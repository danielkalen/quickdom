(function (require, global) {
require = (function (cache, modules, cx) {
return function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : ((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
};
})({}, {
"entry.js": function (require, module, exports) {
var chai, checkChildStructure, creator, elementSuffix, expect, i, j, len, len1, nonElementSuffix, ref, ref1, ref2, ref3, ref4, restartSandbox, sandbox, slice = [].slice;
this.dimensions = require("simulate.coffee");
console.log(this.dimensions);
this.Dom = this.DOM = window.quickdom;
mocha.setup('tdd');
mocha.slow(400);
mocha.timeout(12000);
if (!window.location.hostname) {
mocha.bail();
}
chai = require("node_modules/chai/index.js");
chai.use(require("node_modules/chai-style/sources/index.js"));
chai.config.truncateThreshold = 1e3;
expect = chai.expect;
sandbox = null;
restartSandbox = function () {
if (sandbox) {
sandbox.parentElement.removeChild(sandbox);
}
sandbox = document.createElement('div');
sandbox.id = 'sandbox';
sandbox.setAttribute('style', 'border:1px solid; padding:20px; box-sizing:border-box');
return document.body.appendChild(sandbox);
};
checkChildStructure = function (main) {
return function () {
var child, children, i, index, len;
children = 1 <= arguments.length ? slice.call(arguments, 0) : [];
expect(main.children.length).to.equal(children.length);
for ((index = i = 0, len = children.length); i < len; index = ++i) {
child = children[index];
expect(main.children[index]).to.equal(child);
expect(child.el.parentNode).to.equal(main.el);
expect(child.parent).to.equal(main);
}
};
};
suite("QuickDom", function () {
setup(restartSandbox);
test("Version Property", function () {
var packageVersion;
packageVersion = "1.0.88";
return expect(Dom.version).to.equal(packageVersion);
});
suite("Element Creation", function () {
test("Basic Creation", function () {
var div;
div = Dom('div');
expect(typeof div).to.equal('object');
expect(typeof div.el).to.equal('object');
expect(div.el).to.be.instanceOf(window.HTMLDivElement);
expect(div.parent).to.be.undefined;
return expect(div.children.length).to.equal(0);
});
test("Shortcuts", function () {
var i, len, type, types;
expect(Dom.a().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.link().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.anchor().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.div().el.constructor).to.equal(Dom('div').el.constructor);
expect(Dom.text().el.constructor).to.equal(Dom('text').el.constructor);
expect(Dom.span().el.constructor).to.equal(Dom('span').el.constructor);
expect(Dom.h4().el.constructor).to.equal(Dom('h4').el.constructor);
expect(Dom.header().el.constructor).to.equal(Dom('header').el.constructor);
expect(Dom.footer().el.constructor).to.equal(Dom('footer').el.constructor);
expect(Dom.section().el.constructor).to.equal(Dom('section').el.constructor);
expect(Dom.button().el.constructor).to.equal(Dom('button').el.constructor);
expect(Dom.input().el.constructor).to.equal(Dom('input').el.constructor);
types = ['a', 'div', 'text', 'span', 'h4', 'header', 'footer', 'section', 'button', 'input'];
for ((i = 0, len = types.length); i < len; i++) {
type = types[i];
expect(Dom[type]().el.constructor.name).not.to.contain('Unknown');
}
});
test("Basic options", function () {
var A, B, C, D, E, F, G, H, I, J, obj;
A = Dom.div({
"class": 'abc-123',
props: {
'abc': 123,
'def': 456
}
});
B = Dom.div({
id: 'B',
className: 'abc-123',
attrs: {
'data-abc': 123,
'data-def': 456
}
});
C = Dom.input({
type: 'text',
name: 'abc',
value: 'hello'
});
D = Dom.input({
type: 'checkbox',
checked: true
});
E = Dom.option({
name: 'abc',
value: 'hello',
selected: true
});
F = Dom.link({
href: 'https://google.com/'
});
G = Dom.anchor({
url: 'https://google.com/'
});
H = Dom.text('Some text');
I = Dom.img({
src: 'https://google.com/'
});
J = Dom.div({
relatedInstance: obj = {
a: 1
}
});
expect(A.el.className).to.equal('abc-123');
expect(A.el.abc).to.equal(123);
expect(A.el.def).to.equal(456);
expect(B.el.className).to.equal('abc-123');
expect(B.el.id).to.equal('B');
expect(B.el.getAttribute('data-abc')).to.equal('123');
expect(B.el.getAttribute('data-def')).to.equal('456');
if (B.el.dataset) {
expect(B.el.dataset.abc).to.equal('123');
}
expect(C.el.type).to.equal('text');
expect(C.el.name).to.equal('abc');
expect(C.el.value).to.equal('hello');
expect(D.el.checked).to.equal(true);
expect(E.el.name).to.equal('abc');
expect(E.el.selected).to.equal(true);
expect(F.el.href).to.equal('https://google.com/');
expect(G.el.href).to.equal('https://google.com/');
expect(H.el.nodeType).to.equal(3);
expect(H.el.textContent).to.equal('Some text');
expect(I.el.src).to.equal('https://google.com/');
expect(J.related).to.equal(obj);
return expect(J.options.related).to.equal(obj);
});
test("Creation w/ children", function () {
var A, B;
A = Dom.div(null, 'Some text');
B = Dom.div(null, Dom.span(), 'Some text', Dom.span());
expect(A.el.childNodes.length).to.equal(1);
expect(A.el.children.length).to.equal(0);
expect(A.el.childNodes[0].nodeType).to.equal(3);
expect(A.el.childNodes[0].textContent).to.equal('Some text');
expect(A.children.length).to.equal(1);
expect(B.el.childNodes.length).to.equal(3);
expect(B.el.children.length).to.equal(2);
expect(B.el.childNodes[0].nodeType).to.equal(1);
expect(B.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(B.el.childNodes[1].nodeType).to.equal(3);
expect(B.el.childNodes[1].textContent).to.equal('Some text');
expect(B.el.childNodes[2].nodeType).to.equal(1);
expect(B.el.childNodes[2].nodeName.toLowerCase()).to.equal('span');
return expect(B.children.length).to.equal(3);
});
test("Array syntax", function () {
var section;
section = Dom(['section', {
style: {
display: 'inline'
}
}, ['div', null, 'childA'], ['span', null, ['strong', null, 'childB']], ['div', null, 'childC', ['span', null, 'childC_1'], ['span', null, 'childC_2']]]).appendTo(sandbox);
expect(section).not.to.equal(void 0);
expect(section.raw).to.have.style('display', 'inline');
expect(section.children.length).to.equal(3);
expect(section.children[0].children.length).to.equal(1);
expect(section.children[1].children.length).to.equal(1);
expect(section.children[2].children.length).to.equal(3);
expect(section.children[2].children[1].children.length).to.equal(1);
expect(section.children[2].children[2].children.length).to.equal(1);
expect(section.children[0].text).to.equal('childA');
expect(section.children[1].text).to.equal('childB');
expect(section.children[2].text).to.equal('childCchildC_1childC_2');
expect(section.children[2].children[1].text).to.equal('childC_1');
return expect(section.children[2].children[2].text).to.equal('childC_2');
});
test("Existing Element", function () {
var A, B, C, divRaw;
divRaw = document.createElement('div');
A = Dom(divRaw);
B = Dom(divRaw);
C = Dom(A);
expect(A.el).to.equal(divRaw);
expect(B.el).to.equal(divRaw);
expect(C.el).to.equal(divRaw);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(divRaw._quickElement);
});
test("Existing Element w/ Options", function () {
var div, divRaw;
divRaw = document.createElement('div');
divRaw.id = 'A';
div = Dom(divRaw, {
id: 'B',
"class": 'abc-123'
});
expect(divRaw.id).to.equal('B');
expect(divRaw.className).to.equal('abc-123');
div = Dom(div, {
id: 'C',
"class": 'def-456'
});
expect(divRaw.id).to.equal('C');
return expect(divRaw.className).to.equal('def-456');
});
test("Existing Element from array-like objects", function () {
var A, B, C, parent, rawA, rawB, rawC;
rawA = document.createElement('div');
rawB = document.createElement('div');
rawC = document.createElement('div');
parent = document.createElement('section');
parent.appendChild(rawA);
parent.appendChild(rawB);
parent.appendChild(rawC);
A = Dom([rawA, rawB, rawC]);
B = Dom(parent.querySelectorAll('div'));
C = Dom(B);
expect(A.el).to.equal(rawA);
expect(B.el).to.equal(rawA);
expect(C.el).to.equal(rawA);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(rawA._quickElement);
});
test("Document node", function () {
var doc;
doc = Dom(document);
expect(doc).not.to.be.undefined;
expect(doc.raw).to.equal(document);
expect(doc.parent).to.equal(void 0);
expect(doc.children.length).to.equal(1);
expect(Dom(sandbox).parents).not.to.contain(doc);
return expect(Dom(sandbox).parents).to.contain(doc.children[0]);
});
test("Window object", function () {
var win;
win = Dom(window);
expect(win).not.to.be.undefined;
expect(win.raw === window).to.be["true"];
expect(win.parent).to.equal(void 0);
expect(win.children).to.equal(void 0);
expect(win.append).to.equal(void 0);
expect(win.html).to.equal(void 0);
expect(win.style).to.equal(void 0);
return expect(Dom(sandbox).parents).not.to.contain(win);
});
test("Creation w/ styling", function () {
var computedStyle, div;
div = Dom.div({
style: {
'width': '10px',
'height': 15,
'lameo': '19px',
'background-color': 'blue',
'backgroundSize': 'cover'
}
});
sandbox.appendChild(div.el);
computedStyle = getComputedStyle(div.el);
expect(div.style.lameo).to.equal(void 0);
expect(computedStyle.lameo).to.equal(void 0);
expect(computedStyle.width).to.equal('10px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.backgroundColor).not.to.equal('');
return expect(computedStyle.backgroundSize).to.equal('cover');
});
test("SVG elements can be created via a '*' in the element's type string", function () {
var regDiv, svgBad, svgDiv, svgGood, svgPolyBad, svgPolyGood;
svgBad = Dom('svg').el;
svgGood = Dom('*svg').el;
svgPolyBad = Dom('polyline').el;
svgPolyGood = Dom('*polyline').el;
svgDiv = Dom('*div').el;
regDiv = Dom('div').el;
expect(svgBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgPolyBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgGood).to.be.instanceOf(SVGSVGElement);
expect(svgPolyGood).to.be.instanceOf(SVGPolylineElement);
return expect(svgDiv.constructor).not.to.equal(regDiv.constructor);
});
test("QuickDom.html() accepts an html string which would be parsed and converted into a QuickBatch instance", function () {
var htmlString;
htmlString = "<div>firstChildText</div><span>secondChildText</span> textNode <strong>abc123</strong>";
window.batch = Dom.html(htmlString);
expect(typeof batch).to.equal('object');
expect(batch.constructor.name).to.equal('QuickBatch');
expect(batch.elements.length).to.equal(4);
expect(batch.elements[0].type).to.equal('div');
expect(batch.elements[1].type).to.equal('span');
expect(batch.elements[2].type).to.equal('text');
expect(batch.elements[3].type).to.equal('strong');
expect(batch.elements[0].text).to.equal('firstChildText');
expect(batch.elements[1].text).to.equal('secondChildText');
expect(batch.elements[2].text).to.include('textNode');
return expect(batch.elements[3].text).to.equal('abc123');
});
test("Method/Property aliases", function () {
var div;
div = Dom('div');
expect(div.raw).to.equal(div.el);
expect(div[0]).to.equal(div.el);
expect(div.css).to.equal(div.style);
expect(div.replaceWith).to.equal(div.replace);
expect(div.removeListener).to.equal(div.off);
return expect(div.removeListener('eventA'));
});
return test("user-defined methdods/getters/setters", function () {
var divA, divB;
divA = Dom.div();
divB = Dom.div({
methods: {
scrollTop: {
get: function () {
return this.raw.scrollTop;
}
},
weight: {
get: function () {
return this.raw.weight;
}
},
value: {
get: function () {
return this.raw.value;
},
set: function (value) {
return this.raw.value = value;
}
},
name: true,
bigIndex: function () {
return this.index * 10;
}
}
});
sandbox.append(divA);
sandbox.append(divB);
divA.raw.value = divB.raw.value = 'abc';
expect(typeof divA.scrollTop).to.equal('undefined');
expect(typeof divB.scrollTop).to.equal('number');
expect(typeof divA.value).to.equal('undefined');
expect(typeof divB.value).to.equal('string');
expect(typeof divA.name).to.equal('undefined');
expect(typeof divB.name).to.equal('undefined');
expect(typeof divA.bigIndex).to.equal('undefined');
expect(typeof divB.bigIndex).to.equal('function');
expect(divB.scrollTop).to.equal(divB.raw.scrollTop);
divB.raw.weight = '1';
expect(divB.weight).to.equal('1');
divB.weight = '2';
expect(divB.weight).to.equal('1');
expect(divB.value).to.equal('abc');
divB.value = '123';
expect(divB.value).to.equal('123');
return expect(divB.bigIndex()).to.equal(divB.index * 10);
});
});
suite("Events", function () {
test("Events can be listened to via the .on method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myClick', function (event) {
expect(typeof event).to.equal('object');
expect(event.type).to.equal('myClick');
return emitCountA++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
div.on('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(1);
expect(emitCountA).to.equal(3);
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(2);
return expect(emitCountA).to.equal(4);
});
test("Events can be emitted via the .emit method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(2);
return expect(emitCountB).to.equal(2);
});
test("Event handlers can be manually invoked with a custom arg via the .emitPrivate method", function () {
var arg, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
arg = null;
div = Dom.div();
div.on('myEvent', function () {
emitCountA++;
return arg = arguments[0];
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(null);
div.emitPrivate('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(void 0);
div.emitPrivate('myEvent', 'abc123');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(0);
expect(arg).to.equal('abc123');
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(1);
expect(arg).not.to.equal('abc123');
return expect(typeof arg).to.equal('object');
});
test("Booleans can be passed for the 2nd and 3rd args of .emit to control event.bubbles and event.cancelable", function () {
var div, emitCountA, emitCountB, emitCountC;
emitCountA = emitCountB = emitCountC = 0;
div = Dom.div();
div.on('eventA', function (event) {
emitCountA++;
expect(event.bubbles).to.be["true"];
return expect(event.cancelable).to.be["true"];
});
div.on('eventB', function (event) {
emitCountB++;
expect(event.bubbles).to.be["false"];
return expect(event.cancelable).to.be["true"];
});
div.on('eventC', function (event) {
emitCountC++;
expect(event.bubbles).to.be["false"];
return expect(event.cancelable).to.be["false"];
});
div.emit('eventA');
div.emit('eventB', false);
div.emit('eventC', false, false);
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
return expect(emitCountC).to.equal(1);
});
test("A data object can be passed as the 4th arg of .emit which will be extended onto the event object", function () {
var div, event;
div = DOM.div();
event = null;
div.on('mousedown', function (e) {
return event = e;
});
expect(event).to.equal(null);
div.emit('mousedown');
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal(void 0);
div.emit('mousedown', null, null, {
custom: 'custom',
abc: 123
});
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal('custom');
expect(event.abc).to.equal(123);
div.emit('mousedown', null, null, true);
expect(event.type).to.equal('mousedown');
return expect(event.custom).to.equal(void 0);
});
test("Event listeners can be removed via the .off method", function () {
var div, emitCountA, emitCountB, emitCountC, emitCountD, eventCB;
emitCountA = emitCountB = emitCountC = emitCountD = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', eventCB = function () {
return emitCountB++;
});
div.on('anotherEvent', function () {
return emitCountC++;
});
div.el.addEventListener('myEvent', function () {
return emitCountD++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(emitCountC).to.equal(0);
expect(emitCountD).to.equal(0);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(1);
expect(emitCountD).to.equal(1);
div.off('myEvent', eventCB);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(2);
expect(emitCountD).to.equal(2);
div.on('myEvent', function () {
return emitCountB++;
});
div.off('myEvent');
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
expect(emitCountD).to.equal(3);
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', function () {
return emitCountB++;
});
div.off();
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
return expect(emitCountD).to.equal(4);
});
test("Events can be named via a '<event>.<name>' syntax which can be used to remove listeners later on without the original callbacks", function () {
var attachListeners, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div().appendTo(sandbox);
attachListeners = function () {
div.on('myEvent.someName', function () {
return emitCountA++;
});
return div.on('myEvent', function () {
return emitCountB++;
});
};
attachListeners();
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.emit('myEvent.someName');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.off('myEvent.someOtherName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(2);
div.off('myEvent.someName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(3);
div.off('myEvent');
attachListeners();
div.emit('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(4);
div.off('myEvent');
div.emit('myEvent');
expect(emitCountA).to.equal(3);
return expect(emitCountB).to.equal(4);
});
test("Multiple events can be registered/deregistered at once using whitespace separators", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div();
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(3);
div.emit('two');
expect(emitCount).to.equal(4);
div.emit('three');
expect(emitCount).to.equal(4);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.on('one two   three.someName', function () {
return emitCount++;
});
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(4);
div.emit('one');
expect(emitCount).to.equal(6);
div.emit('two');
expect(emitCount).to.equal(8);
div.emit('three');
expect(emitCount).to.equal(10);
div.off('two \tone.someName');
div.emit('one');
expect(emitCount).to.equal(11);
div.emit('two');
expect(emitCount).to.equal(12);
div.emit('three');
expect(emitCount).to.equal(14);
div.off('one three');
div.emit('one');
expect(emitCount).to.equal(14);
div.emit('two');
expect(emitCount).to.equal(15);
div.emit('three');
return expect(emitCount).to.equal(15);
});
test("Events can be listened for once via the .once method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.once('myClick', function (event) {
expect(typeof event).to.equal('object');
return expect(event.type).to.equal('myClick');
});
div.on('myClick', function () {
return emitCountA++;
});
div.once('myClick', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
div.once('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(2);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(4);
return expect(emitCountB).to.equal(2);
});
test("Pre-defined event listeners can be passed in options.events", function () {
var div, divB, emitContext, emitCount, listeners;
emitCount = 0;
emitContext = null;
listeners = {
'one two three': function () {
return emitCount++;
},
'four': function () {
return emitCount++;
},
'five': function () {
return emitContext = this;
}
};
div = Dom.div({
events: listeners
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.emit('four');
expect(emitCount).to.equal(4);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(4);
div.emit('two');
expect(emitCount).to.equal(5);
div.emit('three');
expect(emitCount).to.equal(5);
div.emit('five');
expect(emitContext).to.equal(div);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.emit('four');
expect(emitCount).to.equal(5);
divB = Dom.div({
events: listeners
});
divB.emit('one');
divB.emit('three');
expect(emitCount).to.equal(7);
expect(emitContext).to.equal(div);
divB.emit('five');
return expect(emitContext).to.equal(divB);
});
test("the inserted event will be privately emitted when the element is inserted into the DOM", function () {
var div, invokeCount, masterParentB, parentA, parentB, parentC;
invokeCount = 0;
parentA = Dom.section();
parentB = Dom.section();
masterParentB = Dom.div();
parentC = Dom.section().appendTo(sandbox);
div = Dom.div();
div.on('inserted', function (el) {
expect(this).to.equal(div);
expect(el).to.equal(div.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
div.appendTo(parentA);
expect(invokeCount).to.equal(0);
div.appendTo(parentB.appendTo(masterParentB));
expect(invokeCount).to.equal(0);
parentA.appendTo(sandbox);
expect(invokeCount).to.equal(0);
div.appendTo(parentC);
expect(invokeCount).to.equal(1);
div.detach();
div.appendTo(parentB.appendTo(sandbox));
expect(invokeCount).to.equal(1);
expect(div.parent).to.equal(parentB);
div.on('inserted', function () {
return expect(invokeCount++).to.equal(1);
});
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentB);
div.appendTo(parentC);
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentC);
div.detach();
div.appendTo(parentA);
div.on('inserted', function () {
return invokeCount++;
});
expect(invokeCount).to.equal(3);
div.detach();
div.appendTo(parentB);
return expect(invokeCount).to.equal(3);
});
return test("QuickElement.replace will trigger the inserted event", function () {
var A, B, invokeCount, parent;
invokeCount = 0;
parent = Dom.section().appendTo(sandbox);
A = Dom.div();
B = Dom.div();
B.on('inserted', function (el) {
expect(this).to.equal(B);
expect(el).to.equal(B.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
parent.append(A);
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(parent);
expect(B.parent).to.equal(void 0);
A.replace(B);
expect(invokeCount).to.equal(1);
expect(A.parent).to.equal(void 0);
return expect(B.parent).to.equal(parent);
});
});
suite("Style", function () {
test("Styles can be set via the .style/.css method with args pair of [property, value]", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
div.style('width', '25px');
expect(div.el.style.width).to.equal('25px');
expect(computedStyle.width).to.equal('25px');
div.style('width', '5vh');
expect(div.el.style.width).to.equal('5vh');
return expect(computedStyle.width).to.contain('px');
});
test("Multiple Styles can be set via the .style/.css method by passing a style object", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.style({
width: 25,
height: '33'
});
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('33px');
});
test("Styles defined in the options object will be applied via classNames and not inline style", function () {
var divA, divB;
divA = Dom.div({
style: {
width: 15,
height: 30
}
}).appendTo(sandbox);
divB = Dom.div().appendTo(sandbox).style({
width: 15,
height: 30
});
expect(divA.raw).to.have.style('width', '15px');
expect(divB.raw).to.have.style('width', '15px');
expect(divA.raw).to.have.style('height', '30px');
expect(divB.raw).to.have.style('height', '30px');
expect(divA.raw.style.width).to.equal('');
expect(divB.raw.style.width).to.equal('15px');
expect(divA.raw.style.height).to.equal('');
return expect(divB.raw.style.height).to.equal('30px');
});
test("If passed a property name without a value, the computed value for that property will be returned", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.style('width')).to.equal('15px');
expect(div.style('height')).to.equal('0px');
div.style({
width: null,
height: 55
});
expect(div.style('width')).to.equal(computedStyle.width);
expect(div.style('height')).to.equal('55px');
div.style('width', '19vw');
return expect(div.style('width')).to.contain('px');
});
test("Functions can be passed as values for properties in style objects which will be invoked with the element's options.relatedInstance as the only argument", function () {
var anotherObj, applyWidth, div;
div = Dom.div({
rate: 25
}).appendTo(sandbox);
applyWidth = function (expectedInstance) {
return div.style({
width: function (instance) {
expect(typeof instance).to.equal('object');
expect(instance).to.equal(expectedInstance);
return div.options.rate;
}
});
};
applyWidth(div);
expect(div.options.rate).to.equal(25);
expect(div.style('width')).to.equal('25px');
div.options.rate = 250;
div.related = anotherObj = {};
applyWidth(anotherObj);
expect(div.style('width')).to.equal('250px');
div = Dom.div({
style: {
width: 30,
height: (function () {
return 50;
}),
fontSize: (function () {
return 20;
})
}
}).appendTo(sandbox);
expect(div.raw).to.have.style('width', '30px');
expect(div.raw).to.have.style('height', '50px');
return expect(div.raw).to.have.style('fontSize', '20px');
});
test("A null value can be passed for a property in order to delete that style", function () {
var div;
div = Dom.div({
style: {
width: '15px',
fontSize: function () {
return 30;
}
}
}).appendTo(sandbox);
div.style('height', 20);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '20px');
expect(div.el.style.width).to.equal('');
expect(div.el.style.height).to.equal('20px');
div.style({
width: null,
height: 12
});
expect(div.el).not.to.have.style('width', '15px');
expect(div.el).to.have.style('height', '12px');
expect(['unset', 'inherit', 'initial'].some(function (s) {
return s === div.el.style.width;
})).to.be["true"];
expect(div.el.style.height).to.equal('12px');
div.css('height', null);
expect(div.el.style.height).to.equal('');
expect(div.el.style.width).not.to.equal('');
div.el.style.width = null;
expect(div.el.style.width).to.equal('');
expect(div.el).to.have.style('width', '15px');
div.css('width', null);
expect(div.el.style.width).not.to.equal('');
expect(div.el).not.to.have.style('width', '15px');
div.style('height', function () {
return 30;
});
expect(div.el.style.height).to.equal('30px');
div.style('height', function () {
return null;
});
expect(div.el.style.height).to.equal('');
expect(div.el.style.fontSize).to.equal('30px');
div.style('fontSize', null);
return expect(div.el.style.fontSize).to.equal('');
});
test(".styleSafe() can be used to obtain the value for a given property even for non-inserted elements or elements with options.styleAfterInsert", function () {
var divA, divB, heightA, heightB, prop, style, text;
style = {
width: '8px',
height: '9px',
zIndex: function (field) {
return field.options.theIndex;
},
$happy: {
width: '18px',
zIndex: function (field) {
return field.options.theIndex * 2;
}
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style: style,
theIndex: '12'
});
divB = Dom.div({
style: style,
theIndex: '29',
styleAfterInsert: true
});
divA.style({
fontSize: 10,
position: 'relative'
});
divB.style({
fontSize: 10,
position: 'relative'
});
prop = function (el, target) {
return {
computed: el.style(target),
inline: el.raw.style[target],
safe: '' + el.styleSafe(target)
};
};
expect(prop(divA, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divB, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '12',
safe: '12'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '29'
});
divA.state('happy', true);
divB.state('happy', true);
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '58'
});
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
divA.appendTo(sandbox);
divB.appendTo(sandbox);
heightA = getComputedStyle(divA.raw).height;
heightB = getComputedStyle(divB.raw).height;
expect(prop(divA, 'zIndex')).to.eql({
computed: '24',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '58',
inline: '58',
safe: '58'
});
expect(prop(divA, 'height')).to.eql({
computed: heightA,
inline: '',
safe: heightA
});
expect(prop(divB, 'height')).to.eql({
computed: heightB,
inline: '',
safe: heightB
});
expect(divA.styleSafe('height')).to.equal(heightA);
expect(divA.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('height')).to.equal(heightB);
expect(divB.styleSafe('height', true)).to.equal('100%');
divB.appendTo(sandbox);
expect(divB.style('height')).not.to.equal('');
expect(divB.style('height')).not.to.equal('100%');
expect(divB.style('height')).to.contain('px');
expect(divB.styleSafe('height')).to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).not.to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('margin', true)).to.equal('');
expect(divB.style('width')).to.equal('18px');
expect(divA.styleSafe('fakeProp')).to.equal(divA);
expect(divA.styleSafe(123)).to.equal(divA);
text = Dom.text('abc123').appendTo(divA);
expect(text.styleSafe('fakeProp')).to.equal(void 0);
return expect(text.styleSafe(123)).to.equal(void 0);
});
test(".styleSafe() will work with instances with no given base styles", function () {
var divA, divB;
divA = Dom.div();
divB = Dom(document.createElement('div'));
expect(function () {
divA.styleSafe('height');
return divB.styleSafe('height');
}).not.to["throw"]();
expect(divA.styleSafe('height')).to.equal('');
return expect(divB.styleSafe('height')).to.equal('');
});
test(".styleParsed() is a shorthand for parseFloat(.styleSafe())", function () {
var divA, divB, style;
style = {
width: '8px',
height: '9px',
$happy: {
width: '18px'
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style: style
});
divB = Dom.div({
style: style,
styleAfterInsert: true
});
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('8px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('8px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('happy', true);
divB.state('happy', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('100%');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.appendTo(sandbox);
divB.appendTo(sandbox);
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.style('width')).to.equal('18px');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('9px');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('18px');
expect(divB.styleSafe('width')).to.equal('18px');
return expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
});
test(".recalcStyle() re-applies all function-value styles", function () {
var count, div;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
div.state('relaxed', true);
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 1,
F: 1,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 0
});
div.state('funny', true);
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 1
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.state('funny', false);
expect(count).to.eql({
A: 5,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.recalcStyle();
return expect(count).to.eql({
A: 6,
B: 3,
C: 2,
D: 2,
E: 4,
F: 4,
G: 2
});
});
test(".recalcStyle() accepts a single argument to indicate if to recalc style on children", function () {
var count, div, wrapper, wrapperCount;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
wrapperCount = 0;
wrapper = Dom.div({
style: {
width: function () {
return ++wrapperCount;
}
}
});
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
div.appendTo(wrapper);
expect(wrapperCount).to.equal(1);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(2);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(true);
expect(wrapperCount).to.equal(3);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(4);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(1);
expect(wrapperCount).to.equal(5);
return expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
});
test("If options.recalcOnResize is set, .recalcStyle() will be invoked on each resize event", function () {
var count;
count = {
A: 0,
B: 0,
C: 0,
D: 0
};
Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
}
}
});
Dom.div({
recalcOnResize: true,
style: {
width: function () {
return ++count.C;
},
opacity: 1,
height: function () {
return ++count.D;
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 1
});
Dom(window).emit('resize');
expect(count).to.eql({
A: 1,
B: 1,
C: 2,
D: 2
});
Dom(window).emit('resize');
return expect(count).to.eql({
A: 1,
B: 1,
C: 3,
D: 3
});
});
test("If options.forceStyle is set, all registered styles will have the '!important' flag set", function () {
var divA, divB, style;
style = DOM.style({
props: {
innerHTML: ".theDiv {width:50px}"
}
});
divA = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
}
}).appendTo(sandbox);
divB = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
},
forceStyle: true
}).appendTo(sandbox);
expect(divA.style('width')).to.equal('100px');
expect(divB.style('width')).to.equal('100px');
style.appendTo(document.head);
expect(divA.style('width')).to.equal('50px');
expect(divB.style('width')).to.equal('100px');
expect(divA.attr('style') === '' || divA.attr('style') === null).to.be["true"];
expect(divB.attr('style') === '' || divB.attr('style') === null).to.be["true"];
divA.style('width', function () {
return 75;
});
divB.style('width', function () {
return 75;
});
divA.style('height', 85);
divB.style('height', 85);
expect(divA.attr('style')).not.to.equal('');
expect(divB.attr('style')).not.to.equal('');
expect(divA.attr('style')).not.to.include('75px !important');
expect(divB.attr('style')).to.include('75px !important');
expect(divA.attr('style')).not.to.include('85px !important');
expect(divB.attr('style')).to.include('85px !important');
expect(divA.style('width')).to.equal('75px');
expect(divB.style('width')).to.equal('75px');
return style.remove();
});
test(".show()/.hide() will toggle the element's visibility", function () {
var div;
div = Dom.div().appendTo(sandbox);
expect(div.style('display')).to.equal('block');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('block');
div.show();
return expect(div.style('display')).to.equal('block');
});
test(".show() will set the element's display style to the provided argument, or to the value provided in the style object", function () {
var div;
div = Dom.div({
style: {
display: 'inline'
}
}).appendTo(sandbox);
expect(div.style('display')).to.equal('inline');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('inline');
div.hide();
div.show('inline-block');
return expect(div.style('display')).to.equal('inline-block');
});
return test("SVG elements", function () {
var svg;
svg = Dom(['*svg', {
style: {
display: 'block',
width: 10,
height: 10,
$happy: {
width: 20,
height: 20
}
}
}]).appendTo(sandbox);
expect(svg.style('width')).to.equal('10px');
expect(svg.style('height')).to.equal('10px');
svg.state('happy', true);
expect(svg.style('width')).to.equal('20px');
return expect(svg.style('height')).to.equal('20px');
});
});
suite("State", function () {
test("States can be polled for a value by passing only the target state's name to .state & can be toggled on/off by passing a second argument", function () {
var div;
div = Dom.div();
expect(div.state('funny')).to.be["false"];
div.state('funny', true);
expect(div.state('funny')).to.be["true"];
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be["true"];
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.state('funny', false);
expect(div.state('funny')).to.be["false"];
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.state('$funny', true);
div.state('$base', true);
expect(div.state('funny')).to.be["true"];
return expect(div.state('base')).to.be["false"];
});
test("A key:value pair object can be passed to toggle state for multiple states at once", function () {
var div;
div = Dom.div();
expect(div.state('a')).to.equal(false);
expect(div.state('b')).to.equal(false);
expect(div.state('c')).to.equal(false);
div.state({
a: true,
b: 1
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(true);
expect(div.state('c')).to.equal(false);
div.state({
b: false,
c: 'y'
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(false);
return expect(div.state('c')).to.equal(true);
});
test(".state() without arguments should return an array of active states", function () {
var el;
el = DOM.div();
expect(el.state()).to.eql([]);
el.state('happy', true);
el.state('relaxed', true);
expect(el.state()).to.eql(['happy', 'relaxed']);
el.state('happy', false);
expect(el.state()).to.eql(['relaxed']);
el.state('happy', true);
return expect(el.state()).to.eql(['relaxed', 'happy']);
});
test("All states can be cleared/toggled off via .resetState", function () {
var div;
div = Dom.div();
div.state('funny', true);
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be["true"];
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.resetState();
expect(div.state('funny')).to.be["false"];
expect(div.state('happy')).to.be["false"];
return expect(div.state('relaxed')).to.be["false"];
});
test("A state can be toggled on/off via .toggleState", function () {
var div;
div = DOM.div();
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
expect(div.state('happy')).to.equal(true);
div.toggleState('happy');
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
return expect(div.state('happy')).to.equal(true);
});
test("Styles can be passed under specific states using a '$' prefix before the state name", function () {
var computedStyle, div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px'
},
$happy: {
width: '25px',
marginTop: '20px'
},
$relaxed: {
width: '35px',
marginLeft: '12px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', false);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
div.state('relaxed', true);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('12px');
div.state('happy', false);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
return expect(computedStyle.marginLeft).to.equal('12px');
});
test("A state:eventName (or state:eventOpts) map can be passed set for options.stateTriggers", function () {
var computedStyle, div;
div = Dom.div({
stateTriggers: {
happy: {
on: 'becameHappy',
off: 'becameSad'
},
relaxed: 'isRelaxed'
},
style: {
$base: {
width: '15px'
},
$happy: {
width: '25px'
},
$relaxed: {
width: '35px'
}
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.state('happy')).to.be["false"];
expect(div.state('relaxed')).to.be["false"];
expect(computedStyle.width).to.equal('15px');
div.emit('becameHappy');
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["false"];
expect(computedStyle.width).to.equal('25px');
div.emit('isRelaxed');
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
expect(computedStyle.width).to.equal('35px');
div.emit('becameSad');
expect(div.state('happy')).to.be["false"];
expect(div.state('relaxed')).to.be["true"];
expect(computedStyle.width).to.equal('35px');
div.state('relaxed', false);
return expect(computedStyle.width).to.equal('15px');
});
test("options.stateTriggers won't be attached if they aren't being used in style object", function () {
var divA, divB;
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(false);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("options.stateTriggers can be forced to be attached even if they aren't being used in style object via ._attachStateEvents(true)", function () {
var attachStateEvents, divA, divB;
attachStateEvents = Dom.div()._attachStateEvents ? '_attachStateEvents' : '_ae';
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
divA[attachStateEvents](true);
divB[attachStateEvents](true);
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(true);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(true);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("The hover and focus states will be listened for and toggled by default by their appropriate events", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px',
backgroundColor: 'rgb(45, 45, 45)'
},
$hover: {
width: '25px',
marginTop: '20px',
backgroundColor: 'rgb(155, 155, 155)'
},
$focus: {
width: '35px',
backgroundColor: 'rgb(200, 200, 200)'
}
}
});
div.appendTo(sandbox);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(155, 155, 155)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
div.emit('focus');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
return expect(div.el.style.marginTop).to.equal('');
});
test("If not passed a style map under the 'base' state, all non-state properties on the style object will be considered as 'base' state properties", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
height: '20px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('20px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
return expect(computedStyle.height).to.equal('20px');
});
test("State-specific styles will be removed upon state turn off or restored to the base value", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
expect(div.el.style.height).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '30px');
expect(div.el.style.height).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
return expect(div.el.style.height).to.equal('');
});
test("Higher order state styles will have a higher precedence than the 'base' style to be used as replacments for pending-removal state-styles", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
},
$focus: {
height: '45px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('focus');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
div.emit('focus');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('30px');
});
test("State toggles will be passed to children elements unless options.passStateToChildren is off", function () {
var A, B, C, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div({
passStateToChildren: false
}).appendTo(A);
expect(Main.state('happy')).to.be["false"];
expect(A.state('happy')).to.be["false"];
expect(B.state('happy')).to.be["false"];
expect(C.state('happy')).to.be["false"];
Main.state('happy', true);
expect(Main.state('happy')).to.be["true"];
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
expect(C.state('happy')).to.be["true"];
Main.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be["false"];
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
expect(C.state('happy')).to.be["true"];
Main.state('happy', true);
Main.options.passStateToChildren = true;
A.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be["false"];
expect(A.state('happy')).to.be["false"];
expect(B.state('happy')).to.be["true"];
return expect(C.state('happy')).to.be["true"];
});
test("State styles can be nested to trigger when all states are toggled on", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '12px',
height: '12px',
fontSize: '10px'
},
$funny: {
fontSize: '15px',
height: '15px'
},
$happy: {
width: '14px',
fontSize: '14px',
$relaxed: {
height: '11px',
fontSize: '17px',
$funny: {
width: '10px',
height: '14px'
}
}
},
$relaxed: {
width: '17px'
}
}
});
div.appendTo(sandbox);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('funny', true);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('15px');
expect(div.style('fontSize')).to.equal('15px');
div.state('funny', false);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('14px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('14px');
div.state('relaxed', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('funny', true);
expect(div.style('width')).to.equal('10px');
expect(div.style('height')).to.equal('14px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('15px');
return expect(div.style('fontSize')).to.equal('15px');
});
test("QuickElement.rect should contain an updated version of the element's ClientRect", function () {
var div, rectA, rectB, rectC;
div = Dom.div().appendTo(sandbox);
rectA = div.rect;
rectB = div.rect;
expect(rectA).to.be.instanceOf(ClientRect);
expect(rectB).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
div.style('width', '7px');
rectC = div.rect;
expect(rectC).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
expect(rectA).not.to.eql(rectC);
expect(rectA.width).not.to.equal(7);
expect(rectB.width).not.to.equal(7);
return expect(rectC.width).to.equal(7);
});
test("QuickElement.width should return the updated version of an element's computed width", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px'
});
div.style({
width: '50%'
});
expect(div.width).to.equal(500);
div.style({
width: '10%'
});
expect(div.width).to.equal(100);
div.style({
width: '97px'
});
return expect(div.width).to.equal(97);
});
test("QuickElement.height should return the updated version of an element's computed height", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
height: '1000px'
});
div.style({
height: '50%'
});
expect(div.height).to.equal(500);
div.style({
height: '10%'
});
expect(div.height).to.equal(100);
div.style({
height: '97px'
});
return expect(div.height).to.equal(97);
});
test("QuickElement.width/.height setters are shortcuts for .style() setters", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px',
height: '1000px'
});
div.style({
width: '50%',
height: '50%'
});
div.width = div.height = '50%';
expect(div.width).to.equal(500);
expect(div.height).to.equal(500);
div.width = div.height = '10%';
expect(div.width).to.equal(100);
expect(div.height).to.equal(100);
div.width = div.height = '97px';
expect(div.width).to.equal(97);
return expect(div.height).to.equal(97);
});
test("QuickElement.orientation should return the updated version of an element's computed orientation", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.orientation).to.equal('landscape');
div.style({
width: 550,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 600,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 601,
height: 600
});
return expect(div.orientation).to.equal('landscape');
});
test("QuickElement.aspectRatio should return the updated version of an element's computed aspect-ratio", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.aspectRatio).to.equal(1.25);
div.style({
width: 540,
height: 600
});
expect(div.aspectRatio).to.equal(0.9);
div.style({
width: 600,
height: 600
});
expect(div.aspectRatio).to.equal(1);
div.style({
width: 300,
height: 900
});
return expect(div.aspectRatio).to.equal(0.33333333333333333333333333);
});
test("If options.styleAfterInsert is passed, function styles will be applied only after the element is inserted into the DOM", function () {
var className, divA, divB, divC, divReg, parentOpacityGetter;
parentOpacityGetter = function () {
if (this.parent) {
return this.parent.style('opacity');
} else {
return '0.5';
}
};
divReg = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
}
});
divA = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divB = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divC = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
className = divReg.raw.className || 'no className';
expect(divReg.raw.className).to.equal(className);
expect(divA.raw.className).to.equal(className);
expect(divB.raw.className).to.equal(className);
expect(divC.raw.className).to.equal(className);
expect(divReg.el.style.opacity).to.equal('0.5');
expect(divA.el.style.opacity).to.equal('');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divA.appendTo(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divB.insertBefore(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
sandbox.appendChild(divC.el);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
divC.parent;
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('1');
return divC.appendTo(sandbox);
});
test("Any styles applied by states before the element has been inserted into the DOM and when options.styleAfterInsert is on will be re-applied after insert", function () {
var divA, divReg;
divReg = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
}
});
divA = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
},
styleAfterInsert: true
});
expect(divReg.el.style.height).to.equal('19px');
expect(divA.el.style.height).to.equal('');
divReg.state('funny', true);
divA.state('funny', true);
expect(divReg.el.style.height).to.equal('29px');
expect(divA.el.style.height).to.equal('');
divReg.state('happy', true);
divA.state('happy', true);
expect(divReg.el.style.height).to.equal('39px');
expect(divA.el.style.height).to.equal('');
divReg.appendTo(sandbox);
divA.appendTo(sandbox);
expect(divReg.el.style.height).to.equal('39px');
return expect(divA.el.style.height).to.equal('39px');
});
test("If an element with options.styleAfterInsert is appended into a detached element, styles will be applied only after the parent is appended to the DOM", function () {
var detachedParent, divA, divReg;
detachedParent = Dom.div();
divReg = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
}
});
divA = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
},
styleAfterInsert: true
});
divReg.state('happy', true);
divReg.state('relaxed', true);
divA.state('happy', true);
divA.state('relaxed', true);
divA.state('relaxed', true);
divA.style('visibility', 'hidden');
expect(divReg.el.style.height).to.equal('19px');
expect(divReg.el.style.width).to.equal('31px');
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
divA.appendTo(detachedParent);
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
detachedParent.appendTo(sandbox);
expect(divA.el.style.height).to.equal('19px');
expect(divA.el.style.width).to.equal('31px');
return expect(divA.el.style.visibility).to.equal('hidden');
});
test("QuickElement.pipeState can be used to redirect all state toggles to the provided target element", function () {
var childA, childB, divA, divB, parentA, parentB;
parentA = Dom.div();
parentB = Dom.div({
passStateToChildren: false
});
divA = Dom.div(null).appendTo(parentA);
divB = Dom.div(null).appendTo(parentB);
childA = Dom.span().appendTo(divA);
childB = Dom.span().appendTo(divB);
divA.pipeState();
divA.state('1', true);
expect(parentA.state('1')).to.equal(false);
expect(divA.state('1')).to.equal(true);
expect(childA.state('1')).to.equal(true);
divA.pipeState(parentA);
divA.state('2', true);
expect(parentA.state('2')).to.equal(true);
expect(divA.state('2')).to.equal(true);
expect(childA.state('2')).to.equal(true);
divA.pipeState(false);
divA.state('2.5', true);
expect(parentA.state('2.5')).to.equal(false);
expect(divA.state('2.5')).to.equal(true);
expect(childA.state('2.5')).to.equal(true);
divB.pipeState(true);
divB.state('3', true);
expect(parentB.state('3')).to.equal(false);
expect(divB.state('3')).to.equal(true);
expect(childB.state('3')).to.equal(true);
divB.pipeState(parentB);
divB.state('4', true);
expect(parentB.state('4')).to.equal(true);
expect(divB.state('4')).to.equal(false);
expect(childB.state('4')).to.equal(false);
divA.pipeState(parentB);
divA.state('5', true);
expect(parentA.state('5')).to.equal(false);
expect(parentB.state('5')).to.equal(true);
expect(divA.state('5')).to.equal(false);
expect(divB.state('5')).to.equal(false);
expect(childA.state('5')).to.equal(false);
expect(childB.state('5')).to.equal(false);
divA.pipeState(false);
divB.pipeState(parentA);
divB.state('6', true);
expect(parentA.state('6')).to.equal(true);
expect(parentB.state('6')).to.equal(false);
expect(divA.state('6')).to.equal(true);
expect(divB.state('6')).to.equal(false);
expect(childA.state('6')).to.equal(true);
return expect(childB.state('6')).to.equal(false);
});
test("States can be marked as unpassable to avoid passing to children by including them in options.unpassableStates", function () {
var div, spanA, spanB, subSpan;
div = Dom.div({
unpassableStates: ['B', 'D']
});
spanA = Dom.span().appendTo(div);
spanB = Dom.span().appendTo(div);
subSpan = Dom.span().appendTo(spanB);
expect(div.state('A')).to.equal(false);
expect(spanA.state('A')).to.equal(false);
expect(spanB.state('A')).to.equal(false);
expect(subSpan.state('A')).to.equal(false);
div.state('A', true);
expect(div.state('A')).to.equal(true);
expect(spanA.state('A')).to.equal(true);
expect(spanB.state('A')).to.equal(true);
expect(subSpan.state('A')).to.equal(true);
div.state('B', true);
expect(div.state('B')).to.equal(true);
expect(spanA.state('B')).to.equal(false);
expect(spanB.state('B')).to.equal(false);
expect(subSpan.state('B')).to.equal(false);
div.state('C', true);
expect(div.state('C')).to.equal(true);
expect(spanA.state('C')).to.equal(true);
expect(spanB.state('C')).to.equal(true);
expect(subSpan.state('C')).to.equal(true);
div.state('D', true);
expect(div.state('D')).to.equal(true);
expect(spanA.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(false);
expect(subSpan.state('D')).to.equal(false);
spanB.state('D', true);
expect(spanB.state('D')).to.equal(true);
expect(subSpan.state('D')).to.equal(true);
div.state('D', false);
expect(div.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(true);
return expect(subSpan.state('D')).to.equal(true);
});
test("When .state() receives a truthy value as the third argument the event will bubble up to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div(null, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div(null, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.state('happy', true, true);
childB.state('happy', true);
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.state('relaxed', true, null);
childB.state('relaxed', true, 'on');
expect(parentA.state('relaxed')).to.equal(false);
expect(parentB.state('relaxed')).to.equal(true);
expect(subParentA.state('relaxed')).to.equal(false);
expect(subParentB.state('relaxed')).to.equal(true);
expect(childA.state('relaxed')).to.equal(true);
expect(childB.state('relaxed')).to.equal(true);
expect(subChildA.state('relaxed')).to.equal(true);
return expect(subChildB.state('relaxed')).to.equal(false);
});
test("options.stateTriggers config objects can specify a 'force' property which will make them get attached even if they aren't used", function () {
var divA, divB;
divA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
});
divB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF'
}
}
});
expect(divA.state('happy')).to.equal(false);
expect(divB.state('happy')).to.equal(false);
divA.raw.emitEvent('happyON');
divB.raw.emitEvent('happyON');
expect(divA.state('happy')).to.equal(true);
expect(divB.state('happy')).to.equal(false);
divB.state('happy', true);
divA.raw.emitEvent('happyOFF');
divB.raw.emitEvent('happyOFF');
expect(divA.state('happy')).to.equal(false);
return expect(divB.state('happy')).to.equal(true);
});
test("options.stateTriggers config objects can specify a 'bubbles' property which will cause the state to bubble to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
bubbles: true,
force: true
}
}
}, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
}, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.raw.emitEvent('happyON');
childB.raw.emitEvent('happyON');
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.raw.emitEvent('happyOFF');
childB.raw.emitEvent('happyOFF');
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
return expect(subChildB.state('happy')).to.equal(false);
});
test("wrappers created for existing elements should attempt to resolve if its inserted into the DOM on init", function () {
var divA, divA_, divB, divB_;
divA_ = document.createElement('div');
divB_ = document.createElement('div');
sandbox.appendChild(divB_);
divA = Dom(divA_);
divB = Dom(divB_);
divA_.style.height = '100px';
divB_.style.height = '100px';
expect(typeof divA.height).to.equal('number');
expect(typeof divB.height).to.equal('number');
expect(isNaN(divA.height)).to.be["true"];
expect(isNaN(divB.height)).to.be["false"];
return expect(divA.styleSafe('height')).to.equal('100px');
});
test("state-based text", function () {
var divA, divB, divC;
divA = Dom(['div', null, ['text', {
text: {
$base: 'abc123',
$happy: 'Happy',
$relaxed: 'Relaxed'
}
}]]);
divB = Dom(['div', null, ['text', {
text: {
$happy: 'Happy',
$relaxed: 'Relaxed',
'$relaxed+funny': 'Funny & Relaxed'
}
}]]);
divC = Dom.div({
text: {
$base: 'def456',
$happy: 'ghi789'
}
});
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('happy', true);
divB.state('happy', true);
divC.state('happy', true);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
expect(divC.text).to.equal('ghi789');
divA.state('happy', false);
divB.state('happy', false);
divC.state('happy', false);
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('happy', true);
divB.state('happy', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
divB.state('relaxed', true);
divB.state('funny', true);
expect(divB.text).to.equal('Relaxed');
divB.state('relaxed+funny', true);
return expect(divB.text).to.equal('Funny & Relaxed');
});
test("state changes will emit a private stateChange:<state> event", function () {
var div, results;
results = [];
div = Dom.div({
style: {
color: 'white',
opacity: 1,
$happy: {
color: 'black'
}
}
});
div.state('any', true);
div.on('stateChange:happy', function (state) {
return results.push(['happy', state]);
});
div.on('stateChange:relaxed', function (state) {
return results.push(['relaxed', state]);
});
div.on('stateChange:arbitrary', function (state) {
return results.push(['arbitrary', state]);
});
expect(results).to.deep.equal([]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true]]);
div.state('happy', false);
expect(results).to.deep.equal([['happy', true], ['happy', false]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('another', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('relaxed', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true]]);
div.state('arbitrary', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
div.state('relaxed', true);
return expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
});
test("state-based styles can be updated via QuickElement.updateStateStyles", function () {
var div, getStyles;
div = Dom.div({
style: {
width: 5,
height: 5,
marginTop: 5,
$happy: {
marginTop: 10
},
$relaxed: {
marginTop: 20,
width: 20,
$happy: {
height: 40,
marginTop: 40
}
},
$somethingElse: {
width: 60,
marginTop: 60
}
}
}).appendTo(sandbox);
getStyles = function () {
return {
width: div.style('width'),
height: div.style('height'),
marginTop: div.style('marginTop')
};
};
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '10px'
});
div.updateStateStyles({
width: 7,
height: 8,
$happy: {
marginTop: 12,
height: 12
}
});
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
expect(getStyles()).to.eql({
width: '7px',
height: '8px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
div.updateStateStyles({
$base: {
width: 2,
height: 9
},
$relaxed: {
height: 20,
$happy: {
width: 40,
marginTop: function () {
return 45;
}
}
}
});
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('relaxed', true);
expect(getStyles()).to.eql({
width: '20px',
height: '20px',
marginTop: '20px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '40px',
height: '40px',
marginTop: '45px'
});
div.state({
happy: false,
relaxed: false
});
div.el.style.marginTop = null;
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('somethingElse', true);
return expect(getStyles()).to.eql({
width: '60px',
height: '9px',
marginTop: '60px'
});
});
return test("default states to apply to an element upon creation can be specified via options.state mapping", function () {
var el1, el2, el3;
el1 = DOM.div();
el2 = DOM.div({
state: {
happy: true,
relaxed: false
}
});
el3 = DOM.div({
state: {
relaxed: true
}
});
expect(el1.state('happy')).to.equal(false);
expect(el1.state('relaxed')).to.equal(false);
expect(el2.state('happy')).to.equal(true);
expect(el2.state('relaxed')).to.equal(false);
expect(el3.state('happy')).to.equal(false);
return expect(el3.state('relaxed')).to.equal(true);
});
});
suite("Media Queries", function () {
suiteTeardown(function () {
var ref;
if ((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0) {
return dimensions.restore();
}
});
suiteSetup(function () {
var ref;
if (!((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0)) {
return this.skip();
}
});
teardown(function () {
var i, level, results1;
results1 = [];
for (level = i = 0; i <= 3; level = ++i) {
results1.push(Dom.CSS.clearRegistered(level));
}
return results1;
});
test("Window dimensions", function () {
var div;
dimensions.simulate(1000, 1000);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
width: '300px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@window(orientation:landscape)': {
marginTop: 6
},
'@window(orientation:portrait)': {
marginTop: 7
},
'@window(max-width:800)': {
zIndex: 3,
width: '280px'
},
'@window(max-width:700, max-height:1000)': {
zIndex: 4,
width: '250px',
height: '250px'
},
'@window(max-height:1000)': {
fontSize: '25px'
},
'@window(min-width:900px)': {
fontSize: '23px'
},
'@window(aspect-ratio:0.5)': {
fontSize: '21px',
lineHeight: '12px'
},
'@window(min-height:1200)': {
fontSize: '20px'
}
}
});
div.appendTo(sandbox);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('23px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(900);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(899);
expect(div.style('fontSize')).to.equal('25px');
dimensions.simulate(899, 1100);
expect(div.style('fontSize')).to.equal('30px');
dimensions.simulate(950);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(950, 1900);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('12px');
dimensions.simulate(950, 1899);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('30px');
dimensions.simulate(790);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(810);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
dimensions.simulate(791);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(701, 900);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 900);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
dimensions.simulate(700, 1001);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 1000);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(1100, 1000);
expect(div.style('marginTop')).to.equal('6px');
dimensions.simulate(1100, 1101);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Self dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div().appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '100%',
height: '100%',
fontSize: '30px',
lineHeight: '30px',
'@self(orientation:landscape)': {
marginTop: 6
},
'@self(orientation:portrait)': {
marginTop: 7
},
'@self(position:relative)': {
top: '20px'
},
'@self(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@self(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@self(zIndex:4)': {
lineHeight: '15px'
},
'@self(min-zIndex:6)': {
opacity: '0'
},
'@self(max-fontSize:20)': {
lineHeight: '19px'
},
'@self(min-width:600px)': {
fontSize: '19px'
},
'@self(aspect-ratio:2.25)': {
fontSize: '22px',
lineHeight: '12px'
},
'@self(min-height:700)': {
fontSize: '40px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginTop')).to.equal('6px');
expect(div.style('top')).to.equal('20px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
expect(div.style('opacity')).to.equal('1');
div.style('zIndex', 5);
dimensions.simulate();
expect(div.style('opacity')).to.equal('1');
expect(div.style('lineHeight')).to.equal('37px');
div.style('zIndex', 17);
expect(div.style('opacity')).to.equal('1');
dimensions.simulate();
expect(div.style('opacity')).to.equal('0');
simulateParent(900);
expect(div.style('fontSize')).to.equal('19px');
expect(div.style('lineHeight')).to.equal('30px');
simulateParent(900);
expect(div.style('lineHeight')).to.equal('19px');
simulateParent(900, 400);
expect(div.style('fontSize')).to.equal('22px');
expect(div.style('lineHeight')).to.equal('12px');
simulateParent(2025, 900);
expect(div.style('fontSize')).to.equal('40px');
expect(div.style('lineHeight')).to.equal('12px');
expect(div.style('marginTop')).to.equal('6px');
simulateParent(2025, 2026);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Parent dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div({
style: {
position: 'absolute'
}
}).appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@parent(orientation:landscape)': {
marginBottom: 6
},
'@parent(orientation:portrait)': {
marginBottom: 7
},
'@parent(position:relative)': {
top: '21px'
},
'@parent(max-width:350)': {
zIndex: 3,
fontSize: '34px'
},
'@parent(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@parent(zIndex:7)': {
lineHeight: '16px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginBottom')).to.equal('6px');
expect(div.style('top')).to.equal('30px');
parent.style('position', 'relative');
expect(div.style('top')).to.equal('30px');
simulateParent();
expect(div.style('top')).to.equal('21px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('34px');
parent.style('zIndex', '7');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('16px');
return expect(div.style('opacity')).to.equal('1');
});
test("Parent Ref dimensions/styles", function () {
var div, parent;
parent = Dom.div({
ref: 'abc'
}, Dom.div({
id: 'def'
}, Dom.div({
ref: 'ghi'
}))).appendTo(sandbox);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@#abc(orientation:landscape)': {
fontWeight: 600
},
'@#abc(orientation:portrait)': {
fontWeight: 500
},
'@#def(position:relative)': {
top: '20px'
},
'@#def(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@#ghi(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@#abc(zIndex:7)': {
lineHeight: '15px'
}
}
});
parent.style({
width: 400,
height: 300
});
parent.child.def.style({
width: 400,
height: 300
});
parent.child.ghi.style({
width: 400,
height: 300
});
div.appendTo(parent.child.ghi);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('fontWeight')).to.equal('600');
expect(div.style('top')).to.equal('30px');
parent.style({
width: 400,
height: 900,
position: 'relative'
});
dimensions.simulate();
expect(div.style('fontWeight')).to.equal('500');
expect(div.style('top')).to.equal('30px');
parent.child.def.style({
position: 'relative'
});
expect(div.style('top')).to.equal('30px');
dimensions.simulate();
expect(div.style('top')).to.equal('20px');
parent.child.def.style({
width: 349,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
parent.child.ghi.style({
width: 450,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
parent.style({
zIndex: 7
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
return expect(div.style('opacity')).to.equal('1');
});
return test("Nested media queries", function () {
var div;
dimensions.simulate(1000, 900);
div = Dom.div({
style: {
zIndex: 2,
$happy: {
marginRight: 5,
'@window(orientation:landscape)': {
marginRight: 6
}
},
'@window(orientation:portrait)': {
$relaxed: {
marginRight: 7
}
}
}
});
div.appendTo(sandbox);
expect(div.style('marginRight')).to.equal('0px');
div.state('happy', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('5px');
dimensions.simulate(1000, 900);
expect(div.style('marginRight')).to.equal('6px');
div.state('relaxed', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('7px');
dimensions.simulate(1000, 900);
return expect(div.style('marginRight')).to.equal('6px');
});
});
suite("Traversal", function () {
test("Children", function () {
var comment, div, div$, spanA, spanB, text;
div = Dom.div(null, Dom.div(), 'Some Text');
expect(div.children.length).to.equal(2);
expect(div.elementChildren.length).to.equal(1);
expect(div.el.childNodes.length).to.equal(2);
div.append(Dom.span());
expect(div.children.length).to.equal(3);
expect(div.elementChildren.length).to.equal(2);
expect(div.el.childNodes.length).to.equal(3);
div.el.appendChild(document.createElement('div'));
expect(div.children.length).to.equal(4);
expect(div.elementChildren.length).to.equal(3);
expect(div.el.childNodes.length).to.equal(4);
div = document.createElement('div');
spanA = document.createElement('span');
spanB = document.createElement('span');
text = document.createTextNode('someTextNode');
comment = document.createComment('someCommentNode');
div.appendChild(spanA);
div.appendChild(comment);
div.appendChild(spanB);
div.appendChild(text);
expect(div.childNodes.length).to.equal(4);
expect(div.children.length).to.equal(2);
div$ = Dom(div);
expect(div$.children.length).to.equal(3);
expect(div$.elementChildren.length).to.equal(2);
expect(div$.children[0].raw).to.equal(spanA);
expect(div$.children[1].raw).to.equal(spanB);
return expect(div$.children[2].raw).to.equal(text);
});
test("Parent", function () {
var A, B, C;
A = Dom.div(null, Dom.div(), 'Some Text');
B = Dom.div();
C = Dom.div();
expect(A.parent).to.equal(void 0);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
B.append(A);
expect(A.parent).to.equal(B);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(1);
expect(B.children[0]).to.equal(A);
C.append(A);
expect(A.parent).to.equal(C);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(0);
return expect(C.children[0]).to.equal(A);
});
test("Parents", function () {
var A, B, C;
A = Dom.div().appendTo(sandbox);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(B);
expect(A.parent.el).to.equal(sandbox);
expect(B.parent).to.equal(A);
expect(C.parent).to.equal(B);
expect(A.parents.length).to.equal(B.parents.length - 1);
expect(B.parents.length).to.equal(C.parents.length - 1);
expect(B.parents[0]).to.equal(A);
expect(C.parents[0]).to.equal(B);
expect(C.parents.length).to.equal(5);
return expect(C.parents.slice(-1)[0].el).to.equal(document.documentElement);
});
suite("Parent Matching", function () {
teardown(function () {
return this.els.A.detach();
});
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A: A,
B: B,
C: C,
D: D
};
});
test("function filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching(null)).to.equal(void 0);
expect(D.parentMatching(B)).to.equal(void 0);
expect(D.parentMatching(function () {
return false;
})).to.equal(void 0);
expect(D.parentMatching(function (el) {
return el === B;
})).to.equal(B);
expect(D.parentMatching(function (el) {
return el === A;
})).to.equal(A);
expect(D.parentMatching(function (el) {
return el === C;
})).to.equal(C);
A.appendTo(sandbox);
return expect(D.parentMatching(function (el) {
return el.raw === document.documentElement;
})).to.equal(Dom(document.documentElement));
});
return test("ref filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching('badRef')).to.equal(void 0);
expect(D.parentMatching('B')).to.equal(B);
expect(D.parentMatching('A')).to.equal(A);
return expect(D.parentMatching('C')).to.equal(C);
});
});
suite("Parents Until", function () {
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A: A,
B: B,
C: C,
D: D
};
});
test("function filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentsUntil(null)).to.eql([C, B, A]);
expect(D.parentsUntil()).to.eql([C, B, A]);
expect(D.parentsUntil(function (el) {
return el === A;
})).to.eql([C, B]);
expect(D.parentsUntil(function (el) {
return el === B;
})).to.eql([C]);
return expect(D.parentsUntil(function (el) {
return false;
})).to.eql([C, B, A]);
});
return test("ref filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parentsUntil('A')).to.eql([C, B]);
expect(D.parentsUntil('B')).to.eql([C]);
return expect(D.parentsUntil('badRef')).to.eql([C, B, A]);
});
});
test("Next", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(A.next).to.equal(B);
expect(C.next).to.equal(D);
expect(E.next).to.equal(void 0);
return expect(B.nextAll).to.eql([C, D, E]);
});
test("Next Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(A.next).to.equal(B);
expect(A.nextEl).to.equal(C);
expect(B.nextEl).to.equal(C);
expect(C.nextEl).to.equal(E);
expect(E.nextEl).to.equal(void 0);
return expect(A.nextElAll).to.eql([C, E]);
});
test("Prev", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(C.prev).to.equal(B);
expect(A.prev).to.equal(void 0);
return expect(D.prevAll).to.eql([C, B, A]);
});
test("Prev Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(E.prevEl).to.equal(C);
expect(D.prevEl).to.equal(C);
expect(C.prevEl).to.equal(A);
expect(A.prevEl).to.equal(void 0);
return expect(E.prevElAll).to.eql([C, A]);
});
test("Siblings", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(C.siblings).to.eql(C.prevAll.reverse().concat(C.nextAll));
expect(C.siblings).to.eql([A, B, D, E]);
expect(C.elementSiblings).to.eql([A, E]);
return expect(B.elementSiblings).to.eql([A, C, E]);
});
test("First/Last Child", function () {
var divA, divB, divBA, divBB, divC, main;
main = DOM.div({
id: 'main'
});
divA = DOM.div({
id: 'divA'
}).appendTo(main);
divB = DOM.div({
id: 'divB'
}).appendTo(main);
divC = DOM.div({
id: 'divC'
}).appendTo(main);
divBA = DOM.div({
id: 'divBA'
}).appendTo(divB);
divBB = DOM.div({
id: 'divBB'
}).appendTo(divB);
expect(main.firstChild).to.equal(divA);
expect(main.lastChild).to.equal(divC);
expect(divA.firstChild).to.equal(void 0);
expect(divA.lastChild).to.equal(void 0);
expect(divB.firstChild).to.equal(divBA);
return expect(divB.lastChild).to.equal(divBB);
});
test("Child (by ref)", function () {
var divA, divB, divC, newChild, newChildChild, newParent, sandBox;
divA = Dom.div({
id: 'divA'
}, Dom.div({
id: 'childA'
}, Dom.span({
ref: 'childA_1'
}), Dom.div({
ref: 'childA_2',
id: 'childA_2'
})), Dom.div({}, Dom.span({
ref: 'childB_1'
}), Dom.text({
id: 'childB_2'
}, 'The Text')));
divB = Dom.template(['div', {
id: 'divB'
}, ['div', {
id: 'childA',
style: {
color: 'pink'
}
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_3',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}]]]).spawn();
divC = Dom.template(['div', {
ref: 'divC'
}, ['div', {
ref: 'childA'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}]], ['div', {
ref: 'childB'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}], ['div', {
ref: 'divD'
}, ['div', {
ref: 'childB'
}]]]]).spawn();
expect(divA.child.childA).to.equal(divA.children[0]);
expect(divA.child.childA_1).to.equal(divA.children[0].children[0]);
expect(divA.child.childA_2).to.equal(divA.children[0].children[1]);
expect(divA.child.childA_3).to.equal(void 0);
expect(divA.child.childB).to.equal(void 0);
expect(divA.child.childB_1).to.equal(divA.children[1].children[0]);
expect(divA.child.childB_2).to.equal(divA.children[1].children[1]);
expect(divA.child.childB_2.type).to.equal('text');
expect(divB.child.childA).to.equal(divB.children[0]);
expect(divB.child.childA_1).to.equal(divB.children[0].children[0]);
expect(divB.child.childA_2).to.equal(divB.children[0].children[1]);
expect(divB.child.childA_3).to.equal(void 0);
expect(divB.child.childB).to.equal(void 0);
expect(divB.child.childB_1).to.equal(divB.children[1].children[0]);
expect(divB.child.childB_2).to.equal(divB.children[1].children[1]);
expect(divB.child.childA.style('color')).to.equal('');
expect(divB.child.childA.styleSafe('color')).not.to.equal('');
expect(divB.child.childA.styleSafe('color').length >= 4).to.be["true"];
expect(divA.child.childA.raw.getAttribute('id')).to.equal('childA');
expect(divA.child.childA.raw.getAttribute('data-ref')).to.equal('childA');
expect(divA.child.childA_1.raw.getAttribute('id')).to.equal(null);
expect(divA.child.childA_1.raw.getAttribute('data-ref')).to.equal('childA_1');
expect(divA.child.childA_2.raw.getAttribute('id')).to.equal('childA_2');
expect(divA.child.childA_2.raw.getAttribute('data-ref')).to.equal('childA_2');
expect(divC.child.childA).to.equal(divC.children[0]);
expect(divC.child.childB).to.equal(divC.children[1]);
expect(divC.child.divB).to.equal(divC.children[0].children[0]);
expect(divC.child.divC).to.equal(divC);
expect(divC.child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[0].child.divB).to.equal(divC.children[0].children[0]);
expect(divC.children[0].child.divC).to.equal(divC.children[0].children[1]);
expect(divC.children[1].child.divB).to.equal(divC.children[1].children[0]);
expect(divC.children[1].child.divC).to.equal(divC.children[1].children[1]);
expect(divC.children[1].child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[1].child.childB).to.equal(divC.children[1]);
sandBox = Dom(sandbox);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
sandBox.append(divA);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
expect(sandBox.childf.divA).to.equal(divA);
expect(sandBox.child.childA).to.equal(divA.children[0]);
expect(sandBox.child.childB_2).to.equal(divA.children[1].children[1]);
expect(sandBox.child.divA).to.equal(divA);
newChild = Dom.div({
ref: 'newChild'
});
newChildChild = Dom.div({
ref: 'newChildChild'
});
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChildChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newChildChild.appendTo(newChild);
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChild.childf.newChildChild).to.equal(newChildChild);
expect(newChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newParent = Dom.div({
ref: 'newParent'
});
newChild.appendTo(newParent);
return expect(newParent.child.newChildChild).to.equal(newChildChild);
});
test("Index", function () {
var childA, childB, childC, childD, childE, childF, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.div());
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(3);
expect(childF.index).to.equal(5);
childC.detach();
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(2);
expect(childF.index).to.equal(4);
return expect(childC.index).to.equal(null);
});
test("Index (by type)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.text(), childG = Dom.div());
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childC.detach();
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childA.detach();
expect(childB.indexType).to.equal(0);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(1);
expect(childA.indexType).to.equal(null);
return expect(childC.indexType).to.equal(null);
});
test("Index (by ref)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div({
ref: 'abc'
}), childB = Dom.div({
ref: 'abc'
}), childC = Dom.span({
ref: 'def'
}), childD = Dom.text({
ref: 'abc'
}), childE = Dom.span({
ref: 'abc'
}), childF = Dom.text({
ref: 'def'
}), childG = Dom.div({
ref: 'abc'
}));
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(1);
expect(childG.indexRef).to.equal(4);
childC.detach();
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(4);
childA.detach();
expect(childB.indexRef).to.equal(0);
expect(childD.indexRef).to.equal(1);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(3);
expect(childA.indexRef).to.equal(null);
return expect(childC.indexRef).to.equal(null);
});
test("Query", function () {
var div, sandBox;
div = Dom.template(['div', {
"class": 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
"class": 'childA',
style: {
color: 'pink'
}
}, ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_1'
}], ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.query('.childA')).to.equal(div.children[0]);
expect(div.query('.childB')).to.equal(div.children[1]);
expect(div.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(div.query('.childA_1')).to.equal(div.children[0].children[0]);
expect(div.query('.childA_2')).to.equal(div.children[0].children[3]);
expect(sandBox.query('.div-one')).to.equal(div);
expect(sandBox.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(sandBox.query('div[name="abc123"]')).to.equal(div);
return expect(sandBox.query('span[name="abc123"]')).to.equal(void 0);
});
test("QueryAll", function () {
var div, sandBox;
div = Dom.template(['div', {
"class": 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
"class": 'childA',
style: {
color: 'pink'
}
}, ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_1'
}], ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.queryAll('.childA').elements).to.eql([div.children[0]]);
expect(div.queryAll('.childB').elements).to.eql([div.children[1], div.children[2]]);
expect(div.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(div.queryAll('.childA_1').elements).to.eql([div.children[0].children[0], div.children[0].children[1], div.children[0].children[2]]);
expect(div.queryAll('.childA_2').elements).to.eql([div.children[0].children[3]]);
expect(sandBox.queryAll('.div-one').elements).to.eql([div]);
expect(sandBox.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(sandBox.queryAll('div[name="abc123"]').elements).to.eql([div]);
expect(sandBox.queryAll('span[name="abc123"]').elements).to.eql([]);
expect(div.text).to.equal('');
expect(sandBox.queryAll('.childB_1').text('abc123').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
return expect(div.text).to.equal('abc123abc123');
});
return test("Query/QueryAll shortcuts", function () {
var allA, allB, el, i, index, len;
expect(Dom.query('head')).to.equal(Dom(document).query('head'));
expect(Dom.query('body')).to.equal(Dom(document).query('body'));
allA = Dom.queryAll('section').elements;
allB = Dom(document).queryAll('section').elements;
expect(allA.length).to.equal(allB.length);
for ((index = i = 0, len = allA.length); i < len; index = ++i) {
el = allA[index];
expect(allA[index]).to.equal(allB[index]);
}
});
});
suite("Manipulation", function () {
test(".append()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.appendTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(A, C);
});
test(".prepend()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.prepend(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.prependTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(C, A);
});
test(".after()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.after(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(B, A);
C.insertAfter(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(B, C, A);
});
test(".before()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.before(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(A, B);
C.insertBefore(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(A, C, B);
});
test(".detach()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.detach();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(2);
expect(div.state('happy')).to.be["true"];
return expect(div.state('relaxed')).to.be["true"];
});
test(".remove()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.remove();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be["false"];
return expect(div.state('relaxed')).to.be["false"];
});
test(".empty()", function () {
var A, B, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
A.state('happy', true);
B.state('happy', true);
checkChildStructure(Main)(A, B);
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
Main.empty();
checkChildStructure(Main)();
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
expect(A.state('happy')).to.be["true"];
return expect(B.state('happy')).to.be["true"];
});
test(".wrap()", function () {
var A, B, C, Main, wrapA, wrapB, wrapC;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div();
wrapA = Dom.section();
wrapB = Dom.section();
wrapC = Dom.section();
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
wrapA.state('relaxed', true);
wrapB.state('relaxed', true);
wrapC.state('relaxed', true);
checkChildStructure(Main)(A, B);
A.wrap(wrapA);
checkChildStructure(Main)(wrapA, B);
checkChildStructure(wrapA)(A);
B.wrap(wrapB);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A);
checkChildStructure(wrapB)(B);
B.wrap(wrapA);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)();
wrapC.appendTo(wrapB);
C.wrap(wrapC);
C.wrap();
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
C.wrap(C);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
expect(C.state('happy')).to.be["true"];
expect(wrapA.state('relaxed')).to.be["true"];
expect(wrapB.state('relaxed')).to.be["true"];
return expect(wrapC.state('relaxed')).to.be["true"];
});
test(".unwrap()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().prependTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(C);
E = Dom.div().appendTo(D);
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
D.state('happy', true);
E.state('happy', true);
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(D);
checkChildStructure(D)(E);
E.unwrap();
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
B.unwrap();
checkChildStructure(Main)(B, C);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
E.unwrap();
checkChildStructure(Main)(B, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.insertAfter(B);
C.appendTo(A);
D.appendTo(A);
checkChildStructure(Main)(B, A, E);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
D.unwrap();
checkChildStructure(Main)(B, C, D, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".replace()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(A);
E = Dom.div().appendTo(D);
A.replace();
E.replace();
checkChildStructure(Main)(A, B);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)(E);
C.replace(E).appendTo(B);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E, D);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
D.replace(E);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(C);
checkChildStructure(Main)(A, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.replace(D);
checkChildStructure(Main)(D, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(D);
checkChildStructure(Main)(C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".clone()", function () {
var A, B, childA, childB, emitCount, opts, sandBox;
emitCount = 0;
sandBox = Dom(sandbox);
opts = {
style: {
$base: {
width: '34px'
},
$happy: {
height: '99px'
},
$relaxed: {
opacity: '0.5'
}
}
};
A = Dom.div(opts, 'Some Inner Text').appendTo(sandbox);
A.state('happy', true);
A.on('privateEvent', function () {
return emitCount++;
});
childA = Dom.div().appendTo(A);
childB = Dom.span().appendTo(A);
B = A.clone();
A.state('relaxed', true);
A.emit('privateEvent');
expect(emitCount).to.equal(1);
expect(A.parent).to.equal(sandBox);
expect(A.css('width')).to.equal('34px');
expect(A.css('height')).to.equal('99px');
expect(A.css('opacity')).to.equal('0.5');
expect(A.siblings.length).to.equal(0);
expect(A.children.length).to.equal(3);
expect(A.children[0].el.textContent).to.equal('Some Inner Text');
expect(A.children[1]).to.equal(childA);
expect(A.children[2]).to.equal(childB);
expect(B).not.to.equal(A);
expect(B.parent).to.equal(void 0);
sandBox.append(B);
expect(B.parent).to.equal(sandBox);
expect(B.css('width')).to.equal('34px');
expect(B.css('height')).to.equal('99px');
expect(B.css('opacity')).to.equal('1');
expect(B.siblings.length).to.equal(1);
expect(B.children.length).to.equal(3);
expect(B.children[0].el.textContent).to.equal('Some Inner Text');
expect(B.children[0]).not.to.equal(A.children[0]);
expect(B.children[1]).not.to.equal(childA);
expect(B.children[2]).not.to.equal(childB);
expect(B.state('happy')).to.be["true"];
expect(B.state('relaxed')).to.be["false"];
expect(emitCount).to.equal(1);
B.emit('privateEvent');
expect(emitCount).to.equal(2);
A.off();
A.emit('privateEvent');
expect(emitCount).to.equal(2);
B.emit('privateEvent');
return expect(emitCount).to.equal(3);
});
test(".prop() - element property getter/setter", function () {
var div;
div = Dom.div();
expect(div.prop('myProp')).to.equal(void 0);
expect(div.prop('myProp', 192)).to.equal(div);
expect(div.prop('myProp')).to.equal(192);
expect(div.prop('myProp', '192')).to.equal(div);
expect(div.prop('myProp')).to.equal('192');
expect(div.prop('anotherProp', [1, 2, 3])).to.equal(div);
expect(div.prop('anotherProp')).to.eql([1, 2, 3]);
expect(div.el.myProp).to.equal('192');
expect(div.el.anotherProp).to.eql([1, 2, 3]);
div.el.lastProp = 9999;
expect(div.el.lastProp).to.equal(9999);
expect(div.prop('lastProp')).to.equal(9999);
expect(Object.keys(div.el)).not.to.contain('promiseIsLast');
div.prop('promiseIsLast', 'over9k');
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', void 0);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', null);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop({
abc: 123,
def: 456
});
expect(div.el.abc).to.equal(123);
return expect(div.el.def).to.equal(456);
});
test(".attr() - element attribute getter/setter", function () {
var div;
div = Dom.div();
expect(div.attr('myAttr')).to.equal(null);
expect(div.attr('myAttr', 192)).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('myAttr', '192')).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('anotherAttr', [1, 2, 3])).to.equal(div);
expect(div.attr('anotherAttr')).to.equal('1,2,3');
expect(div.el.getAttribute('myAttr')).to.equal('192');
expect(div.el.getAttribute('anotherAttr')).to.eql('1,2,3');
div.el.setAttribute('lastAttr', 9999);
expect(div.el.getAttribute('lastAttr')).to.equal('9999');
expect(div.attr('lastAttr')).to.equal('9999');
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr('promiseIsLast', 'over9k');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast', null);
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr({
abc: 123,
def: 456
});
expect(div.el.getAttribute('abc')).to.equal('123');
expect(div.el.getAttribute('def')).to.equal('456');
div.attr({
abc: 123,
def: null
});
expect(div.el.getAttribute('abc')).to.equal('123');
return expect(div.el.getAttribute('def')).to.equal(null);
});
test(".html - innerHTML getter/setter", function () {
var div;
div = Dom.div(null, Dom.div(), 'Some text', Dom.span(), Dom.div());
expect(div.children.length).to.equal(4);
expect(div.html).to.equal(div.el.innerHTML);
expect(div.children.length).to.equal(4);
div.html = '<section ID="test"></section>';
expect(div.html).to.equal('<section id="test"></section>');
expect(div.children.length).to.equal(1);
expect(div.children[0].el.id).to.equal('test');
return expect(div.children[0].el.nodeName.toLowerCase()).to.equal('section');
});
test(".text - textContent getter/setter", function () {
var div;
div = Dom.div(null, 'Some text', Dom.span(null, 'Inner Text'));
expect(div.children.length).to.equal(2);
expect(div.text).to.equal(div.el.textContent);
expect(div.text).to.equal('Some textInner Text');
expect(div.children.length).to.equal(2);
div.text = 'newText';
expect(div.text).to.equal('newText');
expect(div.el.textContent).to.equal('newText');
expect(div.children.length).to.equal(1);
return expect(div.children[0].el.nodeType).to.equal(3);
});
test(".addClass", function () {
var div;
div = Dom.div({
"class": 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.raw.className = div.raw.className.replace('new-selector', ' ');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector  ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('.period');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('period');
return expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector period');
});
test(".removeClass", function () {
var div;
div = Dom.div({
"class": 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('.period');
return expect(div.raw.className).to.equal('anotherSelector annoying-_-selector');
});
test(".toggleClass", function () {
var div;
div = Dom.div({
"class": 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector');
div.toggleClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector period');
div.toggleClass('.period');
expect(div.raw.className).to.equal('anotherSelector annoying-_-selector some-selector period');
div.toggleClass('annoying-_-selector');
return expect(div.raw.className).to.equal('anotherSelector some-selector period');
});
test(".setRef", function () {
var el;
el = DOM.div({
ref: 'name1'
});
expect(el.ref).to.equal('name1');
expect(el.options.ref).to.equal('name1');
expect(el.attr('data-ref')).to.equal('name1');
el.setRef('name2');
expect(el.ref).to.equal('name2');
expect(el.options.ref).to.equal('name2');
return expect(el.attr('data-ref')).to.equal('name2');
});
return test("Appending/prepending elements to a text node should do nothing", function () {
var div, text;
text = Dom.text('abc123');
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.append(Dom.text('def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.prepend(Dom.div(null, 'def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
div = Dom.div(null, '456');
div.appendTo(text);
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
return expect(div.parent).to.equal(void 0);
});
});
suite("Batch", function () {
test("Dom.batch() takes an iterable containing an array of elements or QuickDom elements and reveals the QuickElement API which will be applied for each element", function () {
var A, B, C, div, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
checkChildStructure(sandBox)();
checkChildStructure(div)(A, B, C);
Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text');
checkChildStructure(sandBox)(A, B, C);
checkChildStructure(div)();
expect(getComputedStyle(A.el).opacity).to.equal('0.5');
expect(getComputedStyle(C.el).opacity).to.equal('0.5');
expect(getComputedStyle(B.el).height).to.equal('30px');
expect(A.children.length).to.equal(1);
expect(B.children.length).to.equal(1);
expect(C.children.length).to.equal(1);
return expect(B.children[0].el.textContent).to.equal('Some Inner Text');
});
test("If a truthy value is passed as the 2nd arg of Dom.batch(), an array will be returned for the first method invoked containing the result for each element provided", function () {
var A, B, C, batch1, batch2, sandBox;
sandBox = Dom(sandbox);
A = Dom.div().appendTo(sandBox);
B = Dom.section().appendTo(sandBox);
C = Dom.div().appendTo(sandBox);
batch1 = Dom.batch([A, B, C]);
batch2 = Dom.batch([A, B, C], true);
expect(batch1.style('width')).to.equal(batch1);
expect(batch1.style('width', 47)).to.equal(batch1);
expect(batch2.style('width')).to.eql(['47px', '47px', '47px']);
expect(batch2.style('width', 33)).to.eql([A, B, C]);
return expect(batch2.style('width')).to.eql(['33px', '33px', '33px']);
});
test("If the .return() method is invoked on the batch instance, it will return the result set from the last method invocation", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text').style('opacity')["return"]();
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('width')["return"]()).to.eql(['38px', '38px', '38px']);
});
test("If the .return() method is invoked with a truthy argument, it will cause the next method invocation to return the results of the invocation for each element provided", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text')["return"](true).style('opacity');
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('height', '28px')["return"](true).css('width')).to.eql(['38px', '38px', '38px']);
});
test("Invoking the .reverse() method on the batch instance will reverse the elements array in the batch and thus the execution order", function () {
var A, B, C, arr;
A = Dom.div(null, 'AAA').appendTo(sandbox);
B = Dom.div(null, 'BBB').appendTo(sandbox);
C = Dom.div(null, 'CCC').appendTo(sandbox);
arr = [A, B, C];
expect(Dom.batch(arr).elements).not.to.equal(arr);
expect(Dom.batch(arr).elements).to.eql([A, B, C]);
expect(Dom.batch(arr).reverse().elements).to.eql([C, B, A]);
expect(Dom.batch(arr, 1).text()).to.eql(['AAA', 'BBB', 'CCC']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
return expect(Dom.batch(arr, 1).reverse().reverse().text()).to.eql(['AAA', 'BBB', 'CCC']);
});
return test("Batch.text/.html are methods instead of getters/setters", function () {
var batch, divA, divB;
divA = Dom.div(null, 'The divA');
divB = Dom.div(null, 'The divB');
batch = Dom.batch([divA, divB], true);
expect(batch.html()).to.eql(['The divA', 'The divB']);
expect(batch.text()).to.eql(['The divA', 'The divB']);
batch.html('<span>The div</span>');
expect(batch.html()).to.eql(['<span>The div</span>', '<span>The div</span>']);
expect(batch.text()).to.eql(['The div', 'The div']);
batch.text('THE DIV');
expect(batch.html()).to.eql(['THE DIV', 'THE DIV']);
return expect(batch.text()).to.eql(['THE DIV', 'THE DIV']);
});
});
suite("Templates", function () {
test("A reusable template can be generated via QuickDom.template()", function () {
var template;
template = Dom.template(['span', {
id: 'theSpan'
}]);
expect(typeof template).to.equal('object');
expect(template.type).to.equal('span');
expect(template.options).to.eql({
id: 'theSpan'
});
return expect(template.children).to.eql([]);
});
test("Templates can be turned into QuickDom instances via template.spawn() or by passing as arg to QuickDom", function () {
var spawnA, spawnB, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
spawnA = template.spawn();
spawnA.state('happy', true);
spawnB = Dom(template);
expect(spawnA.el).to.be.instanceOf(HTMLDivElement);
expect(spawnB.el).to.be.instanceOf(HTMLDivElement);
expect(spawnA).not.to.equal(spawnB);
expect(spawnA.el).not.to.equal(spawnB.el);
expect(spawnA.state('happy')).to.be["true"];
expect(spawnB.state('happy')).to.be["false"];
expect(spawnA.el.textContent).to.equal('Some Inner Text');
expect(spawnB.el.textContent).to.equal('Some Inner Text');
return expect(spawnA.el.className).to.equal('some-div');
});
test("Templates can be created from QuickElement instances", function () {
var section, sectionTemplate, templateSpawn;
section = Dom.section({
className: 'singleSection'
}, 'Some Inner Text');
section.state('happy', true);
sectionTemplate = section.toTemplate();
templateSpawn = sectionTemplate.spawn();
expect(sectionTemplate).not.to.equal(section);
expect(templateSpawn.el).not.to.equal(section.el);
expect(templateSpawn.el.className).to.equal('singleSection');
expect(templateSpawn.text).to.equal('Some Inner Text');
expect(section.state('happy')).to.be["true"];
return expect(templateSpawn.state('happy')).to.be["false"];
});
test("Templates can be created from DOM Elements", function () {
var sectionEl, sectionTemplate, templateSpawn;
sectionEl = document.createElement('section');
sectionEl.className = 'singleSection';
sectionEl.appendChild(document.createTextNode('Some Inner Text'));
sectionTemplate = Dom.template(sectionEl);
templateSpawn = sectionTemplate.spawn();
expect(templateSpawn.el).not.to.equal(sectionEl);
expect(templateSpawn.el.className).to.equal('singleSection');
return expect(templateSpawn.text).to.equal('Some Inner Text');
});
test("Templates can be extended via template.extend", function () {
var spawn, spawnA, spawnB, spawnC, template, templateCopyA, templateCopyB, templateCopyC;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
templateCopyA = template.extend({
type: 'span',
options: {
className: 'some-span'
},
children: []
});
templateCopyB = template.extend({
options: {
id: 'theMainDiv'
},
children: ['The Other Inner Text']
});
templateCopyC = template.extend(['section', {
className: 'some-section'
}, ['div', null, 'Very '], ['div', null, ['span', {
style: {
fontWeight: 500
}
}, 'Nested '], 'Inner Text']]);
expect(templateCopyA).not.to.equal(template);
expect(templateCopyB).not.to.equal(template);
spawn = template.spawn();
spawnA = templateCopyA.spawn();
spawnB = templateCopyB.spawn();
spawnC = templateCopyC.spawn();
expect(spawn.el.nodeName.toLowerCase()).to.equal('div');
expect(spawn.el.className).to.equal('some-div');
expect(spawn.el.id).to.equal('');
expect(spawn.text).to.equal('Some Inner Text');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('span');
expect(spawnA.el.className).to.equal('some-span');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.equal('some-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('The Other Inner Text');
expect(spawnC.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnC.el.className).to.equal('some-section');
expect(spawnC.el.id).to.equal('');
return expect(spawnC.text).to.equal('Very Nested Inner Text');
});
test("Templates can be spawned via extended config by passing a new config object to template.spawn()", function () {
var spawnA, spawnB, spawnRaw, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text', ['strong', {
className: 'highlighted',
style: {
opacity: 0.9
}
}, ' - Bolded Text']]);
spawnRaw = template.spawn().appendTo(sandbox);
spawnA = template.spawn({
type: 'section',
options: {
className: 'some-section',
style: {
opacity: 0.7
}
}
}).appendTo(sandbox);
spawnB = template.spawn({
options: {
className: 'main-div',
id: 'theMainDiv',
style: {
opacity: 0.5
}
},
children: [{
type: 'span',
children: [{
type: 'text',
options: {
text: 'Main Inner Text'
}
}]
}, {
type: 'b',
options: {
className: 'super-highlighted',
style: {
opacity: '0.2'
}
},
children: [{
options: {
text: ' - Very Bolded Text'
}
}]
}, {
type: 'text',
options: {
text: ' + Other Text'
}
}]
}).appendTo(sandbox);
expect(spawnRaw.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnRaw.el.className).to.equal('some-div');
expect(spawnRaw.el.id).to.equal('');
expect(spawnRaw.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnRaw.el).to.have.style('opacity', '1');
expect(spawnRaw.el.childNodes.length).to.equal(2);
expect(spawnRaw.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnRaw.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnRaw.el.childNodes[1].className).to.include('highlighted');
expect(spawnRaw.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnA.el.className).to.include('some-section');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnA.el).to.have.style('opacity', '0.7');
expect(spawnA.el.childNodes.length).to.equal(2);
expect(spawnA.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnA.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnA.el.childNodes[1].className).to.include('highlighted');
expect(spawnA.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.include('main-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('Main Inner Text - Very Bolded Text + Other Text');
expect(spawnB.el).to.have.style('opacity', '0.5');
expect(spawnB.el.childNodes.length).to.equal(3);
expect(spawnB.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(spawnB.el.childNodes[0].childNodes.length).to.equal(1);
expect(spawnB.el.childNodes[1].nodeName.toLowerCase()).to.equal('b');
expect(spawnB.el.childNodes[1].className).to.include('super-highlighted');
return expect(spawnB.el.childNodes[1]).to.have.style('opacity', '0.2');
});
test("Template.extend/spawn() can accept a template tree array", function () {
var cloneA, cloneB, cloneC, spawn, template;
template = Dom.template(['div', {
style: {
'opacity': 0.5
}
}, ['span', null, 'text of span'], ['div', null, 'text of div']]);
cloneA = template.extend(['section', {
style: {
'opacity': 0.8
}
}]);
cloneB = template.extend(['span', null, ['div']]);
cloneC = template.extend(['section', {
className: 'the-section',
style: {
color: 'blue'
}
}, ['section', null, 'text of subsection'], 'just a text node']);
spawn = template.spawn(['span', {
style: {
'width': 190,
'opacity': 0.4
}
}, 'so nice']).appendTo(sandbox);
expect(template.type).to.equal('div');
expect(template.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(template.children.length).to.equal(2);
expect(template.children[0].type).to.equal('span');
expect(template.children[0].children.length).to.equal(1);
expect(template.children[0].children[0].options.text).to.equal('text of span');
expect(template.children[1].type).to.equal('div');
expect(template.children[1].children.length).to.equal(1);
expect(template.children[1].children[0].options.text).to.equal('text of div');
expect(cloneA.type).to.equal('section');
expect(cloneA.options).to.eql({
style: {
'opacity': 0.8
}
});
expect(cloneA.children.length).to.equal(2);
expect(cloneA.children[0].type).to.equal('span');
expect(cloneA.children[0].children.length).to.equal(1);
expect(cloneA.children[0].children[0].options.text).to.equal('text of span');
expect(cloneA.children[1].type).to.equal('div');
expect(cloneA.children[1].children.length).to.equal(1);
expect(cloneA.children[1].children[0].options.text).to.equal('text of div');
expect(cloneB.type).to.equal('span');
expect(cloneB.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(cloneB.children.length).to.equal(2);
expect(cloneB.children[0].type).to.equal('div');
expect(cloneB.children[0].children.length).to.equal(1);
expect(cloneB.children[0].children[0].options.text).to.equal('text of span');
expect(cloneB.children[1].type).to.equal('div');
expect(cloneB.children[1].children.length).to.equal(1);
expect(cloneB.children[1].children[0].options.text).to.equal('text of div');
expect(cloneC.type).to.equal('section');
expect(cloneC.options).to.eql({
className: 'the-section',
style: {
'opacity': 0.5,
'color': 'blue'
}
});
expect(cloneC.children.length).to.equal(2);
expect(cloneC.children[0].type).to.equal('section');
expect(cloneC.children[0].children.length).to.equal(1);
expect(cloneC.children[0].children[0].options.text).to.equal('text of subsection');
expect(cloneC.children[1].type).to.equal('text');
expect(cloneC.children[1].options.text).to.equal('just a text node');
spawn.style('display', 'block');
expect(spawn.el.nodeName.toLowerCase()).to.equal('span');
expect(spawn.el).to.have.style('opacity', '0.4');
expect(spawn.el).to.have.style('width', '190px');
expect(spawn.el.childNodes.length).to.equal(2);
expect(spawn.el.childNodes[0].nodeType).to.equal(3);
expect(spawn.el.childNodes[0].textContent).to.equal('so nice');
expect(spawn.el.childNodes[1].nodeName.toLowerCase()).to.equal('div');
return expect(spawn.el.childNodes[1].textContent).to.equal('text of div');
});
test("Template.extend/spawn() can accept other template instances as children which will replace existing children", function () {
var childA, childB, childC, spawnedA, spawnedB, spawnedC, template, templateCopy;
template = Dom.template(['div', null, ['span', {
style: {
opacity: 0.5
}
}], 'original text']);
childA = Dom.template(['div', {
style: {
fontFamily: 'pink'
}
}]);
childB = Dom.template('replaced text');
childC = Dom.template(['section']);
templateCopy = template.extend(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]);
spawnedA = template.spawn().appendTo(sandbox);
spawnedB = templateCopy.spawn().appendTo(sandbox);
spawnedC = template.spawn(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]).appendTo(sandbox);
expect(spawnedA.type).to.equal('div');
expect(spawnedA.children.length).to.equal(2);
expect(spawnedA.children[0].type).to.equal('span');
expect(spawnedA.children[0].raw).to.have.style('opacity', '0.5');
expect(spawnedA.children[0].raw).to.have.style('fontFamily', '');
expect(spawnedA.children[1].type).to.equal('text');
expect(spawnedA.text).to.equal('original text');
expect(spawnedB.type).to.equal('span');
expect(spawnedB.children.length).to.equal(3);
expect(spawnedB.children[0].type).to.equal('div');
expect(spawnedB.children[0].raw).to.have.style('opacity', '');
expect(spawnedB.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedB.children[1].type).to.equal('text');
expect(spawnedB.text).to.equal('replaced text');
expect(spawnedB.children[2].type).to.equal('section');
expect(spawnedB.raw).to.have.style('fontSize', '77px');
expect(spawnedC.type).to.equal('span');
expect(spawnedC.children.length).to.equal(3);
expect(spawnedC.children[0].type).to.equal('div');
expect(spawnedC.children[0].raw).to.have.style('opacity', '');
expect(spawnedC.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedC.children[1].type).to.equal('text');
expect(spawnedC.text).to.equal('replaced text');
expect(spawnedC.children[2].type).to.equal('section');
return expect(spawnedC.raw).to.have.style('fontSize', '77px');
});
test("Template.extend/spawn() will consider the passed object as the options object if it doesn't contain template-related props", function () {
var template;
template = DOM.template(['div', {
defaults: {
text: 'default'
},
computers: {
text: function (text) {
return this.text = text;
}
}
}, ['span', {
ref: 'theSpan'
}]]);
expect(template.options.style).to.equal(void 0);
expect(template.options.label).to.equal(void 0);
expect(template.extend({
options: {
label: 'abc123'
}
}).options.label).to.equal('abc123');
expect(template.extend({
label: 'def456'
}).options.label).to.equal('def456');
expect(template.extend({
style: 'def456'
}).options.style).to.equal('def456');
expect(template.extend({
style: 'def456',
type: 'section'
}).options.style).to.equal(void 0);
expect(template.extend({
children: {
theSpan: {
style: 'ghi789'
}
}
}).child.theSpan.options.style).to.equal('ghi789');
expect(template.extend({
children: [{
defaults: 'ghi789'
}]
}).child.theSpan.options.defaults).to.equal('ghi789');
expect(template.spawn({
children: {
theSpan: {
className: 'GHI789'
}
}
}).child.theSpan.raw.className).to.equal('GHI789');
expect(template.spawn().text).to.equal('default');
return expect(template.spawn({
defaults: {
text: 'diff'
}
}).text).to.equal('diff');
});
test("Templates can have other templates as their children", function () {
var headerTemplate, headerTemplateClone, section, sectionTemplate;
headerTemplate = Dom.template(['header', {
style: {
'height': '200px'
}
}, ['span', {
style: {
'textAlign': 'center'
}
}, 'This is bolded text'], ' while this is not']);
headerTemplateClone = Dom.template(headerTemplate);
sectionTemplate = Dom.template(['section', null, headerTemplate]);
section = sectionTemplate.spawn().appendTo(sandbox);
expect(headerTemplateClone).to.equal(headerTemplate);
expect(sectionTemplate.children.length).to.equal(1);
expect(sectionTemplate.children[0]).to.equal(headerTemplate);
expect(sectionTemplate.children[0].children.length).to.equal(2);
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
expect(section.text).to.equal('This is bolded text while this is not');
return expect(section.children[0].children[0].style('textAlign')).to.equal('center');
});
test("A global options object can be passed as the 2nd arg to template.extend/spawn() which will be applied to all templates, spawns, & their children", function () {
var dynamicHeightStyle, headerTemplate, obj, section, sectionTemplate;
obj = {
myHeight: '150px'
};
obj.obj = obj;
dynamicHeightStyle = {
'height': function (related) {
expect(related).to.equal(obj);
return related.myHeight;
}
};
headerTemplate = Dom.template(['header', {
style: {
'width': '23px'
}
}, ['div', {
style: {
'width': '23px'
}
}, 'This is bolded text'], ' while this is not']);
sectionTemplate = Dom.template(['section', {
style: {
'width': '23px'
}
}, headerTemplate]);
section = sectionTemplate.spawn({
options: {
related: window
}
}, {
related: obj,
style: dynamicHeightStyle
}).appendTo(sandbox);
expect(section.raw.style.height).to.equal('150px');
expect(section.children[0].raw.style.height).to.equal('150px');
expect(section.children[0].children[0].raw.style.height).to.equal('150px');
expect(section.raw.style.width).to.equal('');
expect(section.children[0].raw.style.width).to.equal('');
expect(section.children[0].children[0].raw.style.width).to.equal('');
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
return expect(section.text).to.equal('This is bolded text while this is not');
});
test("Template children can be navigated by ref using the .child property", function () {
var rendered, template;
template = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
expect(typeof template.child).to.equal('object');
expect(Object.keys(template.child).length).to.equal(6);
expect(template.child.divA).to.equal(template);
expect(template.child.childA.type).to.equal('div');
expect(template.child.childA).to.equal(template.children[0]);
expect(template.child.childA_1).to.equal(template.children[0].children[0]);
expect(template.child.childA_2).to.equal(template.children[0].children[1]);
expect(template.child.childB_1).to.equal(template.children[1].children[0]);
expect(template.child.childB_2).to.equal(template.children[1].children[1]);
rendered = template.spawn();
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
return expect(rendered.text).to.equal('The Text');
});
test("Template's children can be extend/spawned with a {ref:newChild} map instead of a positional array", function () {
var rendered, templateCopy, templateCopy2, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}], {
value: 'theValue'
});
templateCopy2 = templateMain.extend({
children: {
childA: {
children: {
newChild: ['div']
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}
});
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(6);
expect(Object.keys(templateCopy.child).length).to.equal(8);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA_1).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[1]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[1].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.childD).to.equal(templateCopy.children[2]);
rendered = templateCopy.spawn().appendTo(sandbox);
expect(Object.keys(rendered.child).length).to.equal(8);
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
expect(rendered.child.childA.raw).to.have.style('display', 'inline-block');
expect(rendered.child.CHILDa_2.prop('href')).to.contain('http://google.com');
expect(rendered.child.childB_1.prop('value')).to.equal('theValue');
return expect(rendered.child.childD.attr('data-ref')).to.equal('childD');
});
test("Templates can be passed as replacement/new children in {ref:newChild} extension maps", function () {
var childA, childB, childC, templateCopy, templateMain;
childA = Dom.template(['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]]);
childB = Dom.template(['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]);
childC = Dom.template(['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]);
templateMain = Dom.template(['div', {
id: 'divA'
}, childA, childB]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form'
},
childB: childB.extend({
ref: 'ChildB'
}),
childC: childC.extend({
ref: 'ChildC'
})
}], {
value: 'theValue'
});
expect(Object.keys(templateMain.child).length).to.equal(7);
expect(Object.keys(templateCopy.child).length).to.equal(10);
expect(templateMain.children.length).to.equal(2);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(2);
expect(templateCopy.child.ChildB).to.equal(templateCopy.children[1]);
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateMain.child.childC).to.equal(void 0);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.ChildC).to.equal(templateCopy.children[2]);
expect(Object.keys(templateMain.spawn().child).length).to.equal(7);
return expect(Object.keys(templateCopy.spawn().child).length).to.equal(10);
});
test("ref-children maps shouldn't be modified by the template extender", function () {
var config, spawnA, spawnB, spawnC, spawnD, templateA, templateB, templateC, templateD;
config = {
children: {
childA_1: {
type: 'div',
options: {
style: {
display: 'none'
}
}
}
}
};
templateA = Dom.template(['div', {
ref: 'divA'
}, ['div', {
ref: 'childA'
}, ['span', {
ref: 'childA_1'
}]]]);
templateA.child.childA_1;
templateB = templateA.extend();
templateC = templateA.extend(config);
templateD = templateA.extend(config);
spawnA = templateA.spawn().appendTo(sandbox);
spawnB = templateB.spawn().appendTo(sandbox);
spawnC = templateC.spawn().appendTo(sandbox);
spawnD = templateD.spawn().appendTo(sandbox);
expect(spawnA.child.childA_1.type).to.equal('span');
expect(spawnA.child.childA_1.style('display')).to.equal('inline');
expect(spawnB.child.childA_1.type).to.equal('span');
expect(spawnB.child.childA_1.style('display')).to.equal('inline');
expect(spawnC.child.childA_1.type).to.equal('div');
expect(spawnC.child.childA_1.style('display')).to.equal('none');
expect(spawnD.child.childA_1.type).to.equal('div');
return expect(spawnD.child.childA_1.style('display')).to.equal('none');
});
test("Null values in ref-children map will remove the child from the template", function () {
var templateCopy, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]], ['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_1: null,
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childB_1: null,
childC: null
}]);
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(10);
expect(Object.keys(templateCopy.child).length).to.equal(6);
expect(templateCopy.children.length).to.equal(2);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(1);
expect(templateMain.child.childA_1).to.equal(templateMain.child.childA_1);
expect(templateCopy.child.childA_1).to.equal(void 0);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[0].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(void 0);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[0]);
expect(templateMain.child.childB_1).to.equal(templateMain.children[1].children[0]);
expect(templateMain.child.childB_2).to.equal(templateMain.children[1].children[1]);
expect(templateMain.child.childC).to.equal(templateMain.children[2]);
return expect(templateCopy.child.childC).to.equal(void 0);
});
test("Null values in options object will delete keys during template extension", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
ref: 'theDiv',
computers: {
valueA: function () {
return 1;
},
valueB: function () {
return 2;
}
},
style: {
position: 'relative',
width: 100,
height: 100,
$active: {
width: 200,
height: 200
}
}
}]);
templateB = templateA.extend({
options: {
ref: null,
computers: {
valueA: null,
valueB: function () {
return 3;
}
},
style: {
height: null,
opacity: 1,
$active: {
width: null
}
}
}
});
spawnA = templateA.spawn();
spawnB = templateB.spawn();
expect(spawnA.ref).to.equal('theDiv');
expect(spawnB.ref).to.equal(void 0);
expect(typeof spawnA.options.computers.valueA).to.equal('function');
expect(typeof spawnB.options.computers.valueA).to.equal('undefined');
expect(typeof spawnA.options.computers.valueB).to.equal('function');
expect(typeof spawnB.options.computers.valueB).to.equal('function');
expect(spawnA.options.computers.valueB()).to.equal(2);
expect(spawnB.options.computers.valueB()).to.equal(3);
expect(spawnA.options.style.position).to.equal('relative');
expect(spawnB.options.style.position).to.equal('relative');
expect(spawnA.options.style.width).to.equal(100);
expect(spawnB.options.style.width).to.equal(100);
expect(spawnA.options.style.height).to.equal(100);
expect(spawnB.options.style.height).to.equal(void 0);
expect(spawnA.options.style.opacity).to.equal(void 0);
expect(spawnB.options.style.opacity).to.equal(1);
expect(spawnA.options.style.$active.width).to.equal(200);
expect(spawnB.options.style.$active.width).to.equal(void 0);
expect(spawnA.options.style.$active.height).to.equal(200);
return expect(spawnB.options.style.$active.height).to.equal(200);
});
test("When spawning elements the options object passed to the spawns should be a clone of the template's options", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
style: {
display: 'block'
}
}]);
templateB = Dom.template(['div', {
style: {
display: 'block'
}
}]);
spawnA = templateA.spawn({
ref: 'a'
});
spawnB = templateA.spawn();
expect(spawnA.options).not.to.equal(templateA.options);
expect(spawnA.options.style).not.to.equal(templateA.options.style);
expect(templateA.options.style.$base).to.equal(void 0);
expect(spawnB.options).not.to.equal(templateB.options);
expect(spawnB.options.style).not.to.equal(templateB.options.style);
return expect(templateB.options.style.$base).to.equal(void 0);
});
test("Templates will be spawned when appended to DOM elements", function () {
var div, template;
template = Dom.template(['span', {
ref: 'theSpan'
}, 'someText']);
div = Dom.div(null, 'label: ');
expect(div.children.length).to.equal(1);
expect(div.text).to.equal('label: ');
div.append(template);
expect(div.children.length).to.equal(2);
expect(div.text).to.equal('label: someText');
div.prepend(template);
expect(div.children.length).to.equal(3);
return expect(div.text).to.equal('someTextlabel: someText');
});
return suite("Data computers", function () {
test("Templates accept options.computers fn map which will be invoked with provided options.data upon spawning", function () {
var receivedData, template;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
expect(receivedData).to.equal(null);
template.spawn();
expect(receivedData).to.equal(null);
template.spawn({
data: {
'someLabel': 'works'
}
});
return expect(receivedData).to.equal('works');
});
test("Computers will be have the spawned QuickElement instance as their context", function () {
var context, instance, template;
context = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return context = this;
}
}
}]);
expect(context).to.equal(null);
template.spawn();
expect(context).to.equal(null);
instance = template.spawn({
data: {
'someLabel': void 0
}
});
return expect(context).to.equal(instance);
});
test("Values specified in options.defaults will be used if not specified in options.data upon spawning", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data.toLowerCase();
},
'second': function (data) {
return results.second = data.toLowerCase();
},
'third': function (data) {
return results.third = data.toLowerCase();
}
},
defaults: {
'first': 'firstValue here',
'third': 'thirdValue here'
}
}]);
expect(results).to.deep.equal({});
template.spawn();
expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'thirdvalue here'
});
instance = template.spawn({
data: {
'third': 'customvalue here'
}
});
return expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'customvalue here'
});
});
test("Values can be of any type", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
},
'fourth': function (data) {
return results.fourth = data;
},
'fifth': function (data) {
return results.fifth = data;
},
'sixth': function (data) {
return results.sixth = data;
}
},
defaults: {
'first': ['abc', '123'],
'third': {
a: 1,
b: 12
},
'sixth': 999
}
}]);
instance = template.spawn({
data: {
'second': null,
'fourth': 19,
'fifth': false,
'sixth': void 0
}
});
expect(results).to.deep.equal({
first: ['abc', '123'],
second: null,
third: {
a: 1,
b: 12
},
fourth: 19,
fifth: false,
sixth: void 0
});
return expect(Object.keys(results).length).to.equal(6);
});
test("Values in options.data that do not have a matching computer will be skipped", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
}
}
}]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
return expect(Object.keys(results).length).to.equal(3);
});
test("Computers in template children will receive the parent's options.data", function () {
var instance, results, template;
results = {
parent: {},
childA: {},
childB: {},
childC: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
}
}, ['div', {
computers: {
'first': function (data) {
return results.childA.first = data;
},
'second': function (data) {
return results.childA.second = data;
},
'third': function (data) {
return results.childA.third = data;
}
}
}], ['div', null, ['div', {
computers: {
'first': function (data) {
return results.childB.first = data;
},
'fourth': function (data) {
return results.childB.fourth = data;
}
}
}], ['div', {
computers: {
'first': function (data) {
return results.childC.first = data;
},
'sixth': function (data) {
return results.childC.sixth = data;
}
}
}]]]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results.parent).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childA).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childB).to.deep.equal({
'first': 'first value',
'fourth': 'fourth value'
});
return expect(results.childC).to.deep.equal({
'first': 'first value'
});
});
test("Parent defaults will not be passed to children", function () {
var instance, results, template;
results = {
parent: {},
child: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
},
defaults: {
'second': 'second value',
'fourth': 'fourth value'
}
}, ['div', {
computers: {
'first': function (data) {
return results.child.first = data;
},
'second': function (data) {
return results.child.second = data;
},
'third': function (data) {
return results.child.third = data;
},
'fourth': function (data) {
return results.child.fourth = data;
}
},
defaults: {
'first': 'first value'
}
}]]);
instance = template.spawn({
data: {
'third': 'third value'
}
});
expect(results.parent).to.deep.equal({
'second': 'second value',
'third': 'third value'
});
return expect(results.child).to.deep.equal({
'first': 'first value',
'third': 'third value'
});
});
test("Defaults should only be applied once", function () {
var count, template;
count = {
parent: 0,
child: 0,
childChild: 0
};
template = Dom.template(['div', {
ref: 'parent',
computers: {
'first': function (data) {
return count.parent++;
}
},
defaults: {
'first': 'first value'
}
}, ['div', {
ref: 'child',
computers: {
'first': function (data) {
return count.parent++;
},
'second': function (data) {
return count.child++;
}
},
defaults: {
'second': 'second value'
}
}, ['div', {
ref: 'child',
computers: {
'fourth': function (data) {
return count.childChild++;
}
},
defaults: {
'fourth': 'fourth value'
}
}]]]);
template.spawn({
data: {
'third': 'third value'
}
});
expect(count).to.eql({
parent: 1,
child: 1,
childChild: 1
});
template.spawn();
return expect(count).to.eql({
parent: 2,
child: 2,
childChild: 2
});
});
test("Data/defaults should be applied even when parent doesn't have computers", function () {
var count, template;
count = 0;
template = Dom.template(['div', null, ['section', null, ['div', {
computers: {
'first': function (data) {
return count++;
}
},
defaults: {
'first': 'first value'
}
}]]]);
template.spawn({
data: {
'first': 'second value'
}
});
expect(count).to.equal(1);
template.spawn();
return expect(count).to.equal(2);
});
test("Data can be re-applied via .applyData(data)", function () {
var count, instance, results, template;
results = {};
count = {
a: 0,
b: 0,
c: 0,
d: 0,
e: 0,
f: 0
};
template = Dom.template(['div', {
computers: {
'a': function (data) {
results.a = data;
return count.a++;
},
'b': function (data) {
results.b = data;
return count.b++;
},
'c': function (data) {
results.c = data;
return count.c++;
},
'd': function (data) {
results.d = data;
return count.d++;
},
'e': function (data) {
results.e = data;
return count.e++;
},
'f': function (data) {
results.f = data;
return count.f++;
}
},
defaults: {
'a': 1,
'c': 3,
'f': 6
}
}]);
instance = template.spawn({
data: {
b: 2,
d: 4,
e: 5,
f: 6
}
});
expect(results).to.deep.equal({
a: 1,
b: 2,
c: 3,
d: 4,
e: 5,
f: 6
});
expect(count).to.deep.equal({
a: 1,
b: 1,
c: 1,
d: 1,
e: 1,
f: 1
});
instance.applyData({
a: 11,
b: 22,
d: 44,
e: 55
});
expect(results).to.deep.equal({
a: 11,
b: 22,
c: 3,
d: 44,
e: 55,
f: 6
});
return expect(count).to.deep.equal({
a: 2,
b: 2,
c: 2,
d: 2,
e: 2,
f: 2
});
});
test("The '_init' computer will be run by default on template spawn regardless of data", function () {
var count, template;
count = {};
template = Dom.template(['div', {
ref: 'divA',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}, ['div', {
ref: 'divB',
data: {
first: '1'
},
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}], ['div', {
ref: 'divC'
}, ['div', {
ref: 'divD'
}, ['div', {
ref: 'divE',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}]]]]);
expect(count).to.eql({});
template.spawn();
expect(count).to.eql({
divA: 1,
divB: 1,
divE: 1
});
template.spawn();
expect(count).to.eql({
divA: 2,
divB: 2,
divE: 2
});
template.child.divB.spawn({
data: {
second: '2'
}
});
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 2
});
template.child.divC.spawn();
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 3
});
template.child.divC.spawn();
return expect(count).to.eql({
divA: 2,
divB: 3,
divE: 4
});
});
test("The '_init' computer will be passed all of the data the template spawn receives", function () {
var expected, result, template;
result = {
divA: {},
divB: {}
};
template = Dom.template(['div', {
ref: 'divA',
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}, ['div', {
ref: 'divProxy'
}, ['div', {
ref: 'divB',
defaults: {
first: '1'
},
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}]]]);
expected = {
href: 'abc',
name: '123',
_init: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
};
expect(result).to.eql({
divA: {},
divB: {}
});
template.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
expect(result).to.eql({
divA: expected,
divB: expected
});
delete result.divA;
({
divB: null
});
template.child.divB.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
return expect(result).to.eql({
divB: expected
});
});
test("Data can be specified via options object", function () {
var receivedData, template, templateCopy;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
templateCopy = template.extend({
options: {
data: {
'someLabel': 'works'
}
}
});
template.spawn();
expect(receivedData).to.equal(null);
templateCopy.spawn();
expect(receivedData).to.equal('works');
template.spawn({
options: {
data: {
'someLabel': 'also works'
}
}
});
return expect(receivedData).to.equal('also works');
});
test("Data specified in children's options object will be merged with the parent's data", function () {
var receivedData, template, templateCopy;
receivedData = {
abc: null,
def: null
};
template = Dom.template(['div', null, ['span', {
data: {
abc: 123
},
computers: {
'abc': function (data) {
return receivedData.abc = data || 'nothing';
},
'def': function (data) {
return receivedData.def = data || 'nothing';
}
}
}]]);
templateCopy = template.extend({
options: {
data: {
def: 456
}
}
});
template.spawn();
expect(receivedData).to.eql({
abc: 123,
def: null
});
receivedData = {
abc: null,
def: null
};
templateCopy.spawn();
expect(receivedData).to.eql({
abc: 123,
def: 456
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
def: 789
}
}
});
expect(receivedData).to.eql({
abc: 123,
def: 789
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
abc: 789
}
}
});
return expect(receivedData).to.eql({
abc: 789,
def: null
});
});
test("Data won't be passed to children if options.passDataToChildren is false", function () {
var el1, el2, receivedData, template1, template2;
receivedData = {
parent: null,
child: null
};
template1 = DOM.template(['div', {
computers: {
abc: function (data) {
return receivedData.parent = data;
}
}
}, ['span', {
computers: {
abc: function (data) {
return receivedData.child = data;
}
}
}]]);
template2 = template1.extend({
passDataToChildren: false
});
expect(receivedData).to.eql({
parent: null,
child: null
});
el1 = template1.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: 123
});
receivedData = {
parent: null,
child: null
};
el2 = template2.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: null
});
receivedData = {
parent: null,
child: null
};
el1.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: 456
});
receivedData = {
parent: null,
child: null
};
el2.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: null
});
el2.lastChild.applyData({
abc: 789
});
return expect(receivedData).to.eql({
parent: 456,
child: 789
});
});
test("Data should be invoked for parents after invoked children", function () {
var computers, el, history, template;
history = [];
computers = {
_init: function () {
return history.push(this.ref);
},
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers: computers,
id: 'parent'
}, ['div', {
computers: computers,
id: 'child1'
}, ['div', {
computers: computers,
id: 'child2'
}]], ['div', {
computers: computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn();
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
return expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
});
return test("Computers will be invoked only one time per element if options.invokeComputersOnce is on", function () {
var computers, el, history, template;
history = [];
computers = {
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers: computers,
id: 'parent',
invokeComputersOnce: true
}, ['div', {
computers: computers,
id: 'child1'
}, ['div', {
computers: computers,
id: 'child2',
invokeComputersOnce: true
}]], ['div', {
computers: computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn({
data: {
abc: 123
}
});
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
expect(history).to.eql(['child1', 'child3']);
history.length = 0;
el.applyData({
abc: 456
});
return expect(history).to.eql(['child1', 'child3']);
});
});
});
return suite("Misc", function () {
test("QuickDom.isTemplate", function () {
expect(Dom.isTemplate(Dom.template(['div']))).to.be["true"];
expect(Dom.isTemplate(Dom.div())).to.be["false"];
expect(Dom.isTemplate(Dom.div()[0])).to.be["false"];
expect(Dom.isTemplate({})).to.be["false"];
expect(Dom.isTemplate('string')).to.be["false"];
expect(Dom.isTemplate(5)).to.be["false"];
expect(Dom.isTemplate(false)).to.be["false"];
return expect(Dom.isTemplate(true)).to.be["false"];
});
test("QuickDom.isQuickEl", function () {
expect(Dom.isQuickEl(Dom.template(['div']))).to.be["false"];
expect(Dom.isQuickEl(Dom.div())).to.be["true"];
expect(Dom.isQuickEl(Dom.text())).to.be["true"];
expect(Dom.isQuickEl(Dom.div()[0])).to.be["false"];
expect(Dom.isQuickEl({})).to.be["false"];
expect(Dom.isQuickEl('string')).to.be["false"];
expect(Dom.isQuickEl(5)).to.be["false"];
expect(Dom.isQuickEl(false)).to.be["false"];
return expect(Dom.isQuickEl(true)).to.be["false"];
});
test("QuickDom.isEl", function () {
expect(Dom.isEl(Dom.template(['div']))).to.be["false"];
expect(Dom.isEl(Dom.div())).to.be["false"];
expect(Dom.isEl(Dom.text())).to.be["false"];
expect(Dom.isEl(Dom.div()[0])).to.be["true"];
expect(Dom.isEl(Dom.text()[0])).to.be["false"];
expect(Dom.isEl({})).to.be["false"];
expect(Dom.isEl('string')).to.be["false"];
expect(Dom.isEl(5)).to.be["false"];
expect(Dom.isEl(false)).to.be["false"];
return expect(Dom.isEl(true)).to.be["false"];
});
test("Stringification", function () {
var section, sectionCopy;
section = Dom(['section', {
id: 'theSection',
className: 'theSectionClass',
style: {
'position': 'relative',
'opacity': 0.5,
'fontSize': function () {
return '29px';
},
$happy: {
fontSize: '11px',
$relaxed: {
fontSize: '8px'
}
}
}
}, ['div', {
id: 'childA',
style: {
position: 'relative'
}
}, 'childA-innertext'], 'section-innertext', ['span', {
id: 'childB',
ref: 'childB-ref!',
style: {
position: 'absolute'
}
}, 'childB-innertext', ['text', {
text: 'childB-innertext 2'
}], ['a', {
url: 'https://google.com'
}]]]).appendTo(sandbox);
window.stringified = JSON.stringify(section, null, 2);
sectionCopy = Dom(JSON.parse(stringified)).appendTo(sandbox);
expect(sectionCopy.type).to.equal(section.type);
expect(sectionCopy.ref).to.equal(section.ref);
expect(sectionCopy.el.id).to.equal(section.el.id);
expect(sectionCopy.el.className).to.equal(section.el.className);
expect(sectionCopy.style('position')).to.equal(section.style('position'));
expect(sectionCopy.style('opacity')).to.equal(section.style('opacity'));
expect(sectionCopy.style('fontSize')).not.to.equal(section.style('fontSize'));
section.style('fontSize', null);
section.state('happy', true);
sectionCopy.state('happy', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
section.state('relaxed', true);
sectionCopy.state('relaxed', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
expect(sectionCopy.children.length).to.equal(section.children.length);
expect(Object.keys(sectionCopy.child).length).to.equal(Object.keys(section.child).length);
expect(sectionCopy.text).to.equal(section.text);
expect(sectionCopy.html).to.equal(section.html);
expect(sectionCopy.children[0].style('position')).to.equal(section.children[0].style('position'));
expect(sectionCopy.children[2].style('position')).to.equal(section.children[2].style('position'));
return expect(sectionCopy.children[2].ref).to.equal(section.children[2].ref);
});
test("Chaining", function () {
var chainResult, div, head;
div = Dom.div();
chainResult = div.state('abc', true).resetState().style().css('width', 12).attr('test', 123).prop('anotherTest', 123).updateStateStyles({
height: 50
}).updateStateTexts({
$base: 'abc'
}).append().appendTo().prepend().prependTo().before().after().insertBefore().insertAfter().detach().wrap(Dom.section()).unwrap().wrap(Dom.header()).replace().appendTo(sandbox).wrap(head = Dom.header()).on('abc', function () {}).emit('abc').off('abc').off();
expect(chainResult).to.equal(div);
expect(sandbox.children[0]).to.equal(head.el);
expect(div.parent).to.equal(head);
return expect(div.css('width')).to.equal('12px');
});
return test("Invalid Arguments", function () {
var cb, div, emitCount, text;
text = Dom.text('someText', {
lostOpts: true
});
div = Dom.div({
lostOpts: true
});
expect(Dom()).to.equal(void 0);
expect(Dom(null)).to.equal(void 0);
expect(Dom({})).to.equal(void 0);
expect(div.updateOptions()).to.equal(div);
expect(text.options.lostOpts).to.equal(void 0);
expect(div.options.lostOpts).to.equal(true);
expect(div.on()).to.equal(div);
expect(div.on('abc')).to.equal(div);
expect(div.on('abc', {})).to.equal(div);
expect(div.once('abc')).to.equal(div);
expect(div.off('somethingFake')).to.equal(div);
emitCount = 0;
div.on('something', cb = function () {
return emitCount++;
});
expect(div.emit('')).to.equal(div);
expect(div.emit()).to.equal(div);
expect(div.emitPrivate('none')).to.equal(div);
expect(div.emitPrivate('')).to.equal(div);
expect(div.emitPrivate()).to.equal(div);
expect(emitCount).to.equal(0);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(1);
expect(div.off('something', function () {})).to.equal(div);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(2);
div.css(null, '129');
expect(div.el.style["null"]).to.equal(void 0);
expect(div.state()).to.eql([]);
expect(div.state(null, true)).to.equal(void 0);
expect(div.state(123, true)).to.equal(void 0);
expect(div.state('base', true)).to.equal(div);
expect(div.state('base')).to.be["false"];
expect(div.state('$whatevs', true)).to.equal(div);
expect(div.state('whatevs')).to.be["true"];
expect(div.state('another')).to.be["false"];
expect(div.state('another', true)).to.equal(div);
expect(div.state('another')).to.be["true"];
expect(div.state('another', void 0)).to.equal(div);
expect(div.state('another')).to.be["false"];
expect(div.updateStateStyles({
$base: {
width: 1
}
})).to.equal(div);
expect(div.updateStateStyles(null)).to.equal(div);
expect(div.updateStateTexts({
$base: 'abc'
})).to.equal(div);
expect(div.updateStateTexts(null)).to.equal(div);
div.appendTo(Dom(sandbox));
expect(div.parent).to.equal(Dom(sandbox));
div.append(true);
expect(div.children.length).to.equal(0);
div.appendTo(document);
expect(div.parent).to.equal(Dom(sandbox));
div.prepend(true);
expect(div.children.length).to.equal(0);
div.prependTo(true);
expect(div.parent).to.equal(Dom(sandbox));
div.after(true);
expect(div.children.length).to.equal(0);
div.insertAfter(123);
expect(div.parent).to.equal(Dom(sandbox));
div.before(true);
expect(div.children.length).to.equal(0);
div.insertBefore(123);
expect(div.parent).to.equal(Dom(sandbox));
div.wrap(123);
expect(div.parent).to.equal(Dom(sandbox));
div.replace(123);
expect(div.parent).to.equal(Dom(sandbox));
div.detach();
expect(div.parent).to.equal(void 0);
div.unwrap();
expect(div.parent).to.equal(void 0);
expect(Dom(sandbox).children.length).to.equal(0);
div.appendTo(Dom(sandbox));
expect(Dom(sandbox).children.length).to.equal(1);
if (Dom(sandbox)._removeChild) {
Dom(sandbox)._removeChild(text);
Dom(sandbox)._removeChild(Dom.div());
expect(Dom(sandbox).children.length).to.equal(1);
}
expect(function () {
return Dom.batch();
}).to["throw"]();
expect(function () {
return Dom.batch({});
}).to["throw"]();
expect(function () {
return Dom.batch(5432);
}).to["throw"]();
expect(function () {
return Dom.batch([]);
}).to["throw"]();
expect(function () {
return Dom.batch([12]).append(Dom.div());
}).to["throw"]();
expect(function () {
return Dom.batch([12]);
}).not.to["throw"]();
expect(function () {
return Dom.template();
}).to["throw"]();
expect(function () {
return Dom.template(null);
}).to["throw"]();
expect(function () {
return Dom.template({});
}).to["throw"]();
expect(function () {
return Dom.template([8482, {
className: 't'
}]);
}).to["throw"]();
expect(function () {
return Dom.template(['div', 'someString']);
}).to["throw"]();
expect(function () {
return Dom.template(['div', null, 'Some Inner Text']);
}).not.to["throw"]();
expect(function () {
return Dom.div({
style: {
opacity: 0.5,
'@abc(max-width:390)': {
opacity: 1
}
}
}).appendTo(sandbox);
}).not.to["throw"]();
return expect(function () {
div = Dom.div();
div.pipeState(div);
div.state('happy', true);
return expect(div.state('happy')).to.equal(true);
}).not.to["throw"]();
});
});
});
HTMLElement.prototype.onEvent = function (eventName, callback) {
if (this.addEventListener) {
return this.addEventListener(eventName, callback);
} else {
return this.attachEvent("on" + eventName, callback);
}
};
HTMLElement.prototype.removeEvent = function (eventName, callback) {
if (this.removeEventListener) {
return this.removeEventListener(eventName, callback);
} else {
return this.detachEvent("on" + eventName, callback);
}
};
HTMLElement.prototype.emitEvent = function (eventName) {
var event;
event = document.createEvent('Event');
event.initEvent(eventName, true, false);
return this.dispatchEvent(event);
};
if (HTMLElement.name !== 'HTMLElement') {
HTMLElement.name = 'HTMLElement';
Text.name = 'Text';
nonElementSuffix = ['OptionsCollection', 'FormControlsCollection', 'Document', 'Collection', 'AllCollection'];
elementSuffix = ["Video", "Unknown", "UList", "Track", "Title", "TextArea", "Template", "TableSection", "TableRow", "Table", "TableCol", "TableCell", "TableCaption", "Style", "Span", "Source", "Slot", "Shadow", "Select", "Script", "Quote", "Progress", "Pre", "Picture", "Param", "Paragraph", "Output", "Option", "OptGroup", "Object", "OList", "Mod", "Meter", "Meta", "Menu", "Media", "Marquee", "Map", "Link", "Legend", "Label", "LI", "Input", "Image", "IFrame", "Html", "Heading", "Head", "HR", "FrameSet", "Frame", "Form", "Font", "FieldSet", "Embed", "Div", "Directory", "Dialog", "Details", "DataList", "DList", "Content", "Canvas", "Button", "Body", "Base", "BR", "Audio", "Area", "Anchor"];
for ((i = 0, len = nonElementSuffix.length); i < len; i++) {
creator = nonElementSuffix[i];
if ((ref = window["HTML" + creator]) != null) {
ref.name = "HTML" + creator;
}
}
for ((j = 0, len1 = elementSuffix.length); j < len1; j++) {
creator = elementSuffix[j];
if ((ref1 = window["HTML" + creator + "Element"]) != null) {
ref1.name = "HTML" + creator + "Element";
}
}
if ((ref2 = window.SVGElement) != null) {
ref2.name = 'SVGElement';
}
if ((ref3 = window.SVGSVGElement) != null) {
ref3.name = 'SVGSVGElement';
}
if ((ref4 = window.SVGPolylineElement) != null) {
ref4.name = 'SVGPolylineElement';
}
}
if (window.ClientRect == null) {
window.ClientRect = DOMRect;
}
return module.exports;
},
"simulate.coffee": function (require, module, exports) {
var origDescriptors;
origDescriptors = {
'innerWidth': Object.getOwnPropertyDescriptor(window, 'innerWidth'),
'innerHeight': Object.getOwnPropertyDescriptor(window, 'innerHeight')
};
module.exports = new (function () {
var current, getReal, overwrite, overwritten;
overwritten = false;
current = {
width: window.innerWidth,
height: window.innerHeight
};
getReal = function (dimension) {
dimension = 'inner' + dimension.replace(/\b./, function (letter) {
return letter.toUpperCase();
});
return origDescriptors[dimension].get.call(window);
};
overwrite = function () {
if (!overwritten) {
overwritten = true;
Object.defineProperty(window, 'innerWidth', {
configurable: true,
get: function () {
return current.width;
},
set: function (newValue) {
return current.width = newValue;
}
});
return Object.defineProperty(window, 'innerHeight', {
configurable: true,
get: function () {
return current.height;
},
set: function (newValue) {
return current.height = newValue;
}
});
}
};
this.simulate = function (width, height) {
var event;
if (width) {
current.width = width;
}
if (height) {
current.height = height;
}
overwrite();
event = document.createEvent('Event');
event.initEvent('resize', true, false);
return window.dispatchEvent(event);
};
this.restore = function () {
Object.defineProperty(window, 'innerWidth', origDescriptors.innerWidth);
return Object.defineProperty(window, 'innerHeight', origDescriptors.innerHeight);
};
return this;
})();
return module.exports;
},
"node_modules/chai/index.js": function (require, module, exports) {
module.exports = require("node_modules/chai/lib/chai.js");
return module.exports;
},
"node_modules/chai-style/sources/index.js": function (require, module, exports) {
module.exports = chaiStyle;
function chaiStyle(chai, utils) {
const {Assertion} = chai;
const {flag} = utils;
let sampleDiv, sampleStyle, sampleIframe;
Assertion.addMethod('style', function (property, value = '') {
const element = flag(this, 'object');
const style = window.getComputedStyle(element);
value = value.trim();
const isNonColors = style[property] === 'rgba(0, 0, 0, 0)' || style[property] === 'transparent';
const propertyValue = isNonColors ? '' : style[property];
const assertion = value ? compareCSSValue(propertyValue, value) : Boolean(propertyValue);
const elementTag = element.tagName.toLowerCase();
const throwMessage = `expect ${elementTag} to have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
const throwMessageNegative = `expect ${elementTag} to not have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
this.assert(assertion, throwMessage, throwMessageNegative, value);
function compareCSSValue(computed, expected) {
const propertyHifenCase = property.replace(/[A-Z]/g, match => '-' + match.toLowerCase());
if (!sampleDiv) {
sampleIframe = document.createElement('iframe');
sampleDiv = document.createElement('div');
sampleStyle = window.getComputedStyle(sampleDiv);
sampleIframe.appendChild(sampleDiv);
document.body.appendChild(sampleIframe);
}
sampleDiv.style.fontSize = style.fontSize;
sampleDiv.style.setProperty(propertyHifenCase, expected, 'important');
const value = sampleStyle[property];
const hasAutoValue = value.includes('auto');
const reg = new RegExp(escapeRegExp(value).replace(/auto/g, '(\\d+(.\\d+)?px|auto)'));
sampleDiv.style.fontSize = null;
sampleDiv.style[propertyHifenCase] = null;
return hasAutoValue ? reg.test(computed) : computed === value;
}
});
}
function escapeRegExp(value) {
return String(value).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}
return module.exports;
},
"node_modules/chai/lib/chai.js": function (require, module, exports) {
var used = [];
exports.version = '4.1.2';
exports.AssertionError = require("node_modules/assertion-error/index.js");
var util = require("node_modules/chai/lib/chai/utils/index.js");
exports.use = function (fn) {
if (!~used.indexOf(fn)) {
fn(exports, util);
used.push(fn);
}
return exports;
};
exports.util = util;
var config = require("node_modules/chai/lib/chai/config.js");
exports.config = config;
var assertion = require("node_modules/chai/lib/chai/assertion.js");
exports.use(assertion);
var core = require("node_modules/chai/lib/chai/core/assertions.js");
exports.use(core);
var expect = require("node_modules/chai/lib/chai/interface/expect.js");
exports.use(expect);
var should = require("node_modules/chai/lib/chai/interface/should.js");
exports.use(should);
var assert = require("node_modules/chai/lib/chai/interface/assert.js");
exports.use(assert);
return module.exports;
},
"node_modules/assertion-error/index.js": function (require, module, exports) {
function exclude() {
var excludes = [].slice.call(arguments);
function excludeProps(res, obj) {
Object.keys(obj).forEach(function (key) {
if (!~excludes.indexOf(key)) res[key] = obj[key];
});
}
return function extendExclude() {
var args = [].slice.call(arguments), i = 0, res = {};
for (; i < args.length; i++) {
excludeProps(res, args[i]);
}
return res;
};
}
;
module.exports = AssertionError;
function AssertionError(message, _props, ssf) {
var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'), props = extend(_props || ({}));
this.message = message || 'Unspecified AssertionError';
this.showDiff = false;
for (var key in props) {
this[key] = props[key];
}
ssf = ssf || arguments.callee;
if (ssf && Error.captureStackTrace) {
Error.captureStackTrace(this, ssf);
} else {
try {
throw new Error();
} catch (e) {
this.stack = e.stack;
}
}
}
AssertionError.prototype = Object.create(Error.prototype);
AssertionError.prototype.name = 'AssertionError';
AssertionError.prototype.constructor = AssertionError;
AssertionError.prototype.toJSON = function (stack) {
var extend = exclude('constructor', 'toJSON', 'stack'), props = extend({
name: this.name
}, this);
if (false !== stack && this.stack) {
props.stack = this.stack;
}
return props;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/index.js": function (require, module, exports) {
var pathval = require("node_modules/pathval/index.js");
exports.test = require("node_modules/chai/lib/chai/utils/test.js");
exports.type = require("node_modules/type-detect/index.js");
exports.expectTypes = require("node_modules/chai/lib/chai/utils/expectTypes.js");
exports.getMessage = require("node_modules/chai/lib/chai/utils/getMessage.js");
exports.getActual = require("node_modules/chai/lib/chai/utils/getActual.js");
exports.inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
exports.objDisplay = require("node_modules/chai/lib/chai/utils/objDisplay.js");
exports.flag = require("node_modules/chai/lib/chai/utils/flag.js");
exports.transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
exports.eql = require("node_modules/deep-eql/index.js");
exports.getPathInfo = pathval.getPathInfo;
exports.hasProperty = pathval.hasProperty;
exports.getName = require("node_modules/get-func-name/index.js");
exports.addProperty = require("node_modules/chai/lib/chai/utils/addProperty.js");
exports.addMethod = require("node_modules/chai/lib/chai/utils/addMethod.js");
exports.overwriteProperty = require("node_modules/chai/lib/chai/utils/overwriteProperty.js");
exports.overwriteMethod = require("node_modules/chai/lib/chai/utils/overwriteMethod.js");
exports.addChainableMethod = require("node_modules/chai/lib/chai/utils/addChainableMethod.js");
exports.overwriteChainableMethod = require("node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");
exports.compareByInspect = require("node_modules/chai/lib/chai/utils/compareByInspect.js");
exports.getOwnEnumerablePropertySymbols = require("node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
exports.getOwnEnumerableProperties = require("node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");
exports.checkError = require("node_modules/check-error/index.js");
exports.proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
exports.addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
exports.isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
exports.isNaN = require("node_modules/chai/lib/chai/utils/isNaN.js");
return module.exports;
},
"node_modules/chai/lib/chai/config.js": function (require, module, exports) {
module.exports = {
includeStack: false,
showDiff: true,
truncateThreshold: 40,
useProxy: true,
proxyExcludedKeys: ['then', 'inspect', 'toJSON']
};
return module.exports;
},
"node_modules/chai/lib/chai/assertion.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function (_chai, util) {
var AssertionError = _chai.AssertionError, flag = util.flag;
_chai.Assertion = Assertion;
function Assertion(obj, msg, ssfi, lockSsfi) {
flag(this, 'ssfi', ssfi || Assertion);
flag(this, 'lockSsfi', lockSsfi);
flag(this, 'object', obj);
flag(this, 'message', msg);
return util.proxify(this);
}
Object.defineProperty(Assertion, 'includeStack', {
get: function () {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
return config.includeStack;
},
set: function (value) {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
config.includeStack = value;
}
});
Object.defineProperty(Assertion, 'showDiff', {
get: function () {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
return config.showDiff;
},
set: function (value) {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
config.showDiff = value;
}
});
Assertion.addProperty = function (name, fn) {
util.addProperty(this.prototype, name, fn);
};
Assertion.addMethod = function (name, fn) {
util.addMethod(this.prototype, name, fn);
};
Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.overwriteProperty = function (name, fn) {
util.overwriteProperty(this.prototype, name, fn);
};
Assertion.overwriteMethod = function (name, fn) {
util.overwriteMethod(this.prototype, name, fn);
};
Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
var ok = util.test(this, arguments);
if (false !== showDiff) showDiff = true;
if (undefined === expected && undefined === _actual) showDiff = false;
if (true !== config.showDiff) showDiff = false;
if (!ok) {
msg = util.getMessage(this, arguments);
var actual = util.getActual(this, arguments);
throw new AssertionError(msg, {
actual: actual,
expected: expected,
showDiff: showDiff
}, ((config.includeStack)) ? this.assert : flag(this, 'ssfi'));
}
};
Object.defineProperty(Assertion.prototype, '_obj', {
get: function () {
return flag(this, 'object');
},
set: function (val) {
flag(this, 'object', val);
}
});
};
return module.exports;
},
"node_modules/chai/lib/chai/core/assertions.js": function (require, module, exports) {
module.exports = function (chai, _) {
var Assertion = chai.Assertion, AssertionError = chai.AssertionError, flag = _.flag;
['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does'].forEach(function (chain) {
Assertion.addProperty(chain);
});
Assertion.addProperty('not', function () {
flag(this, 'negate', true);
});
Assertion.addProperty('deep', function () {
flag(this, 'deep', true);
});
Assertion.addProperty('nested', function () {
flag(this, 'nested', true);
});
Assertion.addProperty('own', function () {
flag(this, 'own', true);
});
Assertion.addProperty('ordered', function () {
flag(this, 'ordered', true);
});
Assertion.addProperty('any', function () {
flag(this, 'any', true);
flag(this, 'all', false);
});
Assertion.addProperty('all', function () {
flag(this, 'all', true);
flag(this, 'any', false);
});
function an(type, msg) {
if (msg) flag(this, 'message', msg);
type = type.toLowerCase();
var obj = flag(this, 'object'), article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
}
Assertion.addChainableMethod('an', an);
Assertion.addChainableMethod('a', an);
function SameValueZero(a, b) {
return (_.isNaN(a) && _.isNaN(b)) || a === b;
}
function includeChainingBehavior() {
flag(this, 'contains', true);
}
function include(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, 'message'), negate = flag(this, 'negate'), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), descriptor = isDeep ? 'deep ' : '';
flagMsg = flagMsg ? flagMsg + ': ' : '';
var included = false;
switch (objType) {
case 'string':
included = obj.indexOf(val) !== -1;
break;
case 'weakset':
if (isDeep) {
throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
}
included = obj.has(val);
break;
case 'map':
var isEql = isDeep ? _.eql : SameValueZero;
obj.forEach(function (item) {
included = included || isEql(item, val);
});
break;
case 'set':
if (isDeep) {
obj.forEach(function (item) {
included = included || _.eql(item, val);
});
} else {
included = obj.has(val);
}
break;
case 'array':
if (isDeep) {
included = obj.some(function (item) {
return _.eql(item, val);
});
} else {
included = obj.indexOf(val) !== -1;
}
break;
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,' + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
}
var props = Object.keys(val), firstErr = null, numErrs = 0;
props.forEach(function (prop) {
var propAssertion = new Assertion(obj);
_.transferFlags(this, propAssertion, true);
flag(propAssertion, 'lockSsfi', true);
if (!negate || props.length === 1) {
propAssertion.property(prop, val[prop]);
return;
}
try {
propAssertion.property(prop, val[prop]);
} catch (err) {
if (!_.checkError.compatibleConstructor(err, AssertionError)) {
throw err;
}
if (firstErr === null) firstErr = err;
numErrs++;
}
}, this);
if (negate && props.length > 1 && numErrs === props.length) {
throw firstErr;
}
return;
}
this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
}
Assertion.addChainableMethod('include', include, includeChainingBehavior);
Assertion.addChainableMethod('contain', include, includeChainingBehavior);
Assertion.addChainableMethod('contains', include, includeChainingBehavior);
Assertion.addChainableMethod('includes', include, includeChainingBehavior);
Assertion.addProperty('ok', function () {
this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
});
Assertion.addProperty('true', function () {
this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
});
Assertion.addProperty('false', function () {
this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
});
Assertion.addProperty('null', function () {
this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
});
Assertion.addProperty('undefined', function () {
this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
});
Assertion.addProperty('NaN', function () {
this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
});
Assertion.addProperty('exist', function () {
var val = flag(this, 'object');
this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
});
Assertion.addProperty('empty', function () {
var val = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), itemsCount;
flagMsg = flagMsg ? flagMsg + ': ' : '';
switch (_.type(val).toLowerCase()) {
case 'array':
case 'string':
itemsCount = val.length;
break;
case 'map':
case 'set':
itemsCount = val.size;
break;
case 'weakmap':
case 'weakset':
throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);
case 'function':
var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
throw new AssertionError(msg.trim(), undefined, ssfi);
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
}
itemsCount = Object.keys(val).length;
}
this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
});
function checkArguments() {
var obj = flag(this, 'object'), type = _.type(obj);
this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
}
Assertion.addProperty('arguments', checkArguments);
Assertion.addProperty('Arguments', checkArguments);
function assertEqual(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
if (flag(this, 'deep')) {
return this.eql(val);
} else {
this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
}
}
Assertion.addMethod('equal', assertEqual);
Assertion.addMethod('equals', assertEqual);
Assertion.addMethod('eq', assertEqual);
function assertEql(obj, msg) {
if (msg) flag(this, 'message', msg);
this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
}
Assertion.addMethod('eql', assertEql);
Assertion.addMethod('eqls', assertEql);
function assertAbove(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to above must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to above must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len > n, 'expected #{this} to have a length above #{exp} but got #{act}', 'expected #{this} to not have a length above #{exp}', n, len);
} else {
this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
}
}
Assertion.addMethod('above', assertAbove);
Assertion.addMethod('gt', assertAbove);
Assertion.addMethod('greaterThan', assertAbove);
function assertLeast(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to least must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to least must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= n, 'expected #{this} to have a length at least #{exp} but got #{act}', 'expected #{this} to have a length below #{exp}', n, len);
} else {
this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
}
}
Assertion.addMethod('least', assertLeast);
Assertion.addMethod('gte', assertLeast);
function assertBelow(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to below must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to below must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len < n, 'expected #{this} to have a length below #{exp} but got #{act}', 'expected #{this} to not have a length below #{exp}', n, len);
} else {
this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
}
}
Assertion.addMethod('below', assertBelow);
Assertion.addMethod('lt', assertBelow);
Assertion.addMethod('lessThan', assertBelow);
function assertMost(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to most must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to most must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len <= n, 'expected #{this} to have a length at most #{exp} but got #{act}', 'expected #{this} to have a length above #{exp}', n, len);
} else {
this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
}
}
Assertion.addMethod('most', assertMost);
Assertion.addMethod('lte', assertMost);
Assertion.addMethod('within', function (start, finish, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), shouldThrow = true, range = ((startType === 'date' && finishType === 'date')) ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
errorMessage = msgPrefix + 'the arguments to within must be dates';
} else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the arguments to within must be numbers';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= start && len <= finish, 'expected #{this} to have a length within ' + range, 'expected #{this} to not have a length within ' + range);
} else {
this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
}
});
function assertInstanceOf(constructor, msg) {
if (msg) flag(this, 'message', msg);
var target = flag(this, 'object');
var ssfi = flag(this, 'ssfi');
var flagMsg = flag(this, 'message');
try {
var isInstanceOf = target instanceof constructor;
} catch (err) {
if (err instanceof TypeError) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);
}
throw err;
}
var name = _.getName(constructor);
if (name === null) {
name = 'an unnamed constructor';
}
this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
}
;
Assertion.addMethod('instanceof', assertInstanceOf);
Assertion.addMethod('instanceOf', assertInstanceOf);
function assertProperty(name, val, msg) {
if (msg) flag(this, 'message', msg);
var isNested = flag(this, 'nested'), isOwn = flag(this, 'own'), flagMsg = flag(this, 'message'), obj = flag(this, 'object'), ssfi = flag(this, 'ssfi');
if (isNested && isOwn) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
}
if (obj === null || obj === undefined) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
}
var isDeep = flag(this, 'deep'), negate = flag(this, 'negate'), pathInfo = isNested ? _.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name];
var descriptor = '';
if (isDeep) descriptor += 'deep ';
if (isOwn) descriptor += 'own ';
if (isNested) descriptor += 'nested ';
descriptor += 'property ';
var hasProperty;
if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name); else if (isNested) hasProperty = pathInfo.exists; else hasProperty = _.hasProperty(obj, name);
if (!negate || arguments.length === 1) {
this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
}
if (arguments.length > 1) {
this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
}
flag(this, 'object', value);
}
Assertion.addMethod('property', assertProperty);
function assertOwnProperty(name, value, msg) {
flag(this, 'own', true);
assertProperty.apply(this, arguments);
}
Assertion.addMethod('ownProperty', assertOwnProperty);
Assertion.addMethod('haveOwnProperty', assertOwnProperty);
function assertOwnPropertyDescriptor(name, descriptor, msg) {
if (typeof descriptor === 'string') {
msg = descriptor;
descriptor = null;
}
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
if (actualDescriptor && descriptor) {
this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
} else {
this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
}
flag(this, 'object', actualDescriptor);
}
Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
function assertLengthChain() {
flag(this, 'doLength', true);
}
function assertLength(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
var len = obj.length;
this.assert(len == n, 'expected #{this} to have a length of #{exp} but got #{act}', 'expected #{this} to not have a length of #{act}', n, len);
}
Assertion.addChainableMethod('length', assertLength, assertLengthChain);
Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
function assertMatch(re, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
}
Assertion.addMethod('match', assertMatch);
Assertion.addMethod('matches', assertMatch);
Assertion.addMethod('string', function (str, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('string');
this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
});
function assertKeys(keys) {
var obj = flag(this, 'object'), objType = _.type(obj), keysType = _.type(keys), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), str, deepStr = '', ok = true, flagMsg = flag(this, 'message');
flagMsg = flagMsg ? flagMsg + ': ' : '';
var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';
if (objType === 'Map' || objType === 'Set') {
deepStr = isDeep ? 'deeply ' : '';
actual = [];
obj.forEach(function (val, key) {
actual.push(key);
});
if (keysType !== 'Array') {
keys = Array.prototype.slice.call(arguments);
}
} else {
actual = _.getOwnEnumerableProperties(obj);
switch (keysType) {
case 'Array':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
break;
case 'Object':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
keys = Object.keys(keys);
break;
default:
keys = Array.prototype.slice.call(arguments);
}
keys = keys.map(function (val) {
return typeof val === 'symbol' ? val : String(val);
});
}
if (!keys.length) {
throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
}
var len = keys.length, any = flag(this, 'any'), all = flag(this, 'all'), expected = keys, actual;
if (!any && !all) {
all = true;
}
if (any) {
ok = expected.some(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
}
if (all) {
ok = expected.every(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
if (!flag(this, 'contains')) {
ok = ok && keys.length == actual.length;
}
}
if (len > 1) {
keys = keys.map(function (key) {
return _.inspect(key);
});
var last = keys.pop();
if (all) {
str = keys.join(', ') + ', and ' + last;
}
if (any) {
str = keys.join(', ') + ', or ' + last;
}
} else {
str = _.inspect(keys[0]);
}
str = (len > 1 ? 'keys ' : 'key ') + str;
str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
}
Assertion.addMethod('keys', assertKeys);
Assertion.addMethod('key', assertKeys);
function assertThrows(errorLike, errMsgMatcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), negate = flag(this, 'negate') || false;
new Assertion(obj, flagMsg, ssfi, true).is.a('function');
if (errorLike instanceof RegExp || typeof errorLike === 'string') {
errMsgMatcher = errorLike;
errorLike = null;
}
var caughtErr;
try {
obj();
} catch (err) {
caughtErr = err;
}
var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
var errorLikeFail = false;
var errMsgMatcherFail = false;
if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
var errorLikeString = 'an error';
if (errorLike instanceof Error) {
errorLikeString = '#{exp}';
} else if (errorLike) {
errorLikeString = _.checkError.getConstructorName(errorLike);
}
this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), (caughtErr instanceof Error ? caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr))));
}
if (errorLike && caughtErr) {
if (errorLike instanceof Error) {
var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
if (isCompatibleInstance === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
}
}
}
var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
if (isCompatibleConstructor === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
}
}
if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
var placeholder = 'including';
if (errMsgMatcher instanceof RegExp) {
placeholder = 'matching';
}
var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
if (isCompatibleMessage === negate) {
if (everyArgIsDefined && negate) {
errMsgMatcherFail = true;
} else {
this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
}
}
}
if (errorLikeFail && errMsgMatcherFail) {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
flag(this, 'object', caughtErr);
}
;
Assertion.addMethod('throw', assertThrows);
Assertion.addMethod('throws', assertThrows);
Assertion.addMethod('Throw', assertThrows);
function respondTo(method, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), itself = flag(this, 'itself'), context = (('function' === typeof obj && !itself)) ? obj.prototype[method] : obj[method];
this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
}
Assertion.addMethod('respondTo', respondTo);
Assertion.addMethod('respondsTo', respondTo);
Assertion.addProperty('itself', function () {
flag(this, 'itself', true);
});
function satisfy(matcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var result = matcher(obj);
this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
}
Assertion.addMethod('satisfy', satisfy);
Assertion.addMethod('satisfies', satisfy);
function closeTo(expected, delta, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('number');
if (typeof expected !== 'number' || typeof delta !== 'number') {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
}
this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
}
Assertion.addMethod('closeTo', closeTo);
Assertion.addMethod('approximately', closeTo);
function isSubsetOf(subset, superset, cmp, contains, ordered) {
if (!contains) {
if (subset.length !== superset.length) return false;
superset = superset.slice();
}
return subset.every(function (elem, idx) {
if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
if (!cmp) {
var matchIdx = superset.indexOf(elem);
if (matchIdx === -1) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
}
return superset.some(function (elem2, matchIdx) {
if (!cmp(elem, elem2)) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
});
});
}
Assertion.addMethod('members', function (subset, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
var contains = flag(this, 'contains');
var ordered = flag(this, 'ordered');
var subject, failMsg, failNegateMsg, lengthCheck;
if (contains) {
subject = ordered ? 'an ordered superset' : 'a superset';
failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
} else {
subject = ordered ? 'ordered members' : 'members';
failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
}
var cmp = flag(this, 'deep') ? _.eql : undefined;
this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
});
function oneOf(list, msg) {
if (msg) flag(this, 'message', msg);
var expected = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
}
Assertion.addMethod('oneOf', oneOf);
function assertChanges(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'change');
flag(this, 'realDelta', final !== initial);
this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
}
Assertion.addMethod('change', assertChanges);
Assertion.addMethod('changes', assertChanges);
function assertIncreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'increase');
flag(this, 'realDelta', final - initial);
this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
}
Assertion.addMethod('increase', assertIncreases);
Assertion.addMethod('increases', assertIncreases);
function assertDecreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'decrease');
flag(this, 'realDelta', initial - final);
this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
}
Assertion.addMethod('decrease', assertDecreases);
Assertion.addMethod('decreases', assertDecreases);
function assertDelta(delta, msg) {
if (msg) flag(this, 'message', msg);
var msgObj = flag(this, 'deltaMsgObj');
var initial = flag(this, 'initialDeltaValue');
var final = flag(this, 'finalDeltaValue');
var behavior = flag(this, 'deltaBehavior');
var realDelta = flag(this, 'realDelta');
var expression;
if (behavior === 'change') {
expression = Math.abs(final - initial) === Math.abs(delta);
} else {
expression = realDelta === Math.abs(delta);
}
this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
}
Assertion.addMethod('by', assertDelta);
Assertion.addProperty('extensible', function () {
var obj = flag(this, 'object');
var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
});
Assertion.addProperty('sealed', function () {
var obj = flag(this, 'object');
var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
});
Assertion.addProperty('frozen', function () {
var obj = flag(this, 'object');
var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
});
Assertion.addProperty('finite', function (msg) {
var obj = flag(this, 'object');
this.assert(typeof obj === "number" && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
});
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/expect.js": function (require, module, exports) {
module.exports = function (chai, util) {
chai.expect = function (val, message) {
return new chai.Assertion(val, message);
};
chai.expect.fail = function (actual, expected, message, operator) {
message = message || 'expect.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, chai.expect.fail);
};
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/should.js": function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion;
function loadShould() {
function shouldGetter() {
if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {
return new Assertion(this.valueOf(), null, shouldGetter);
}
return new Assertion(this, null, shouldGetter);
}
function shouldSetter(value) {
Object.defineProperty(this, 'should', {
value: value,
enumerable: true,
configurable: true,
writable: true
});
}
Object.defineProperty(Object.prototype, 'should', {
set: shouldSetter,
get: shouldGetter,
configurable: true
});
var should = {};
should.fail = function (actual, expected, message, operator) {
message = message || 'should.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, should.fail);
};
should.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.equal(val2);
};
should.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.Throw(errt, errs);
};
should.exist = function (val, msg) {
new Assertion(val, msg).to.exist;
};
should.not = {};
should.not.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.not.equal(val2);
};
should.not.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.not.Throw(errt, errs);
};
should.not.exist = function (val, msg) {
new Assertion(val, msg).to.not.exist;
};
should['throw'] = should['Throw'];
should.not['throw'] = should.not['Throw'];
return should;
}
;
chai.should = loadShould;
chai.Should = loadShould;
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/assert.js": function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion, flag = util.flag;
var assert = chai.assert = function (express, errmsg) {
var test = new Assertion(null, null, chai.assert, true);
test.assert(express, errmsg, '[ negation message unavailable ]');
};
assert.fail = function (actual, expected, message, operator) {
message = message || 'assert.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, assert.fail);
};
assert.isOk = function (val, msg) {
new Assertion(val, msg, assert.isOk, true).is.ok;
};
assert.isNotOk = function (val, msg) {
new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
};
assert.equal = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.equal, true);
test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
};
assert.notEqual = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.notEqual, true);
test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
};
assert.strictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
};
assert.notStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
};
assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
};
assert.notDeepEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
};
assert.isAbove = function (val, abv, msg) {
new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
};
assert.isAtLeast = function (val, atlst, msg) {
new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
};
assert.isBelow = function (val, blw, msg) {
new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
};
assert.isAtMost = function (val, atmst, msg) {
new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
};
assert.isTrue = function (val, msg) {
new Assertion(val, msg, assert.isTrue, true).is['true'];
};
assert.isNotTrue = function (val, msg) {
new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
};
assert.isFalse = function (val, msg) {
new Assertion(val, msg, assert.isFalse, true).is['false'];
};
assert.isNotFalse = function (val, msg) {
new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
};
assert.isNull = function (val, msg) {
new Assertion(val, msg, assert.isNull, true).to.equal(null);
};
assert.isNotNull = function (val, msg) {
new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
};
assert.isNaN = function (val, msg) {
new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
};
assert.isNotNaN = function (val, msg) {
new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
};
assert.exists = function (val, msg) {
new Assertion(val, msg, assert.exists, true).to.exist;
};
assert.notExists = function (val, msg) {
new Assertion(val, msg, assert.notExists, true).to.not.exist;
};
assert.isUndefined = function (val, msg) {
new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
};
assert.isDefined = function (val, msg) {
new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
};
assert.isFunction = function (val, msg) {
new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
};
assert.isNotFunction = function (val, msg) {
new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
};
assert.isObject = function (val, msg) {
new Assertion(val, msg, assert.isObject, true).to.be.a('object');
};
assert.isNotObject = function (val, msg) {
new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
};
assert.isArray = function (val, msg) {
new Assertion(val, msg, assert.isArray, true).to.be.an('array');
};
assert.isNotArray = function (val, msg) {
new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
};
assert.isString = function (val, msg) {
new Assertion(val, msg, assert.isString, true).to.be.a('string');
};
assert.isNotString = function (val, msg) {
new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
};
assert.isNumber = function (val, msg) {
new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
};
assert.isNotNumber = function (val, msg) {
new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
};
assert.isFinite = function (val, msg) {
new Assertion(val, msg, assert.isFinite, true).to.be.finite;
};
assert.isBoolean = function (val, msg) {
new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
};
assert.isNotBoolean = function (val, msg) {
new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
};
assert.typeOf = function (val, type, msg) {
new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
};
assert.notTypeOf = function (val, type, msg) {
new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
};
assert.instanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
};
assert.notInstanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
};
assert.include = function (exp, inc, msg) {
new Assertion(exp, msg, assert.include, true).include(inc);
};
assert.notInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
};
assert.deepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
};
assert.notDeepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
};
assert.nestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
};
assert.notNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
};
assert.deepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
};
assert.notDeepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
};
assert.ownInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
};
assert.notOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
};
assert.deepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
};
assert.notDeepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
};
assert.match = function (exp, re, msg) {
new Assertion(exp, msg, assert.match, true).to.match(re);
};
assert.notMatch = function (exp, re, msg) {
new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
};
assert.property = function (obj, prop, msg) {
new Assertion(obj, msg, assert.property, true).to.have.property(prop);
};
assert.notProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
};
assert.propertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
};
assert.notPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
};
assert.deepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
};
assert.notDeepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
};
assert.ownProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
};
assert.notOwnProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
};
assert.ownPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
};
assert.notOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
};
assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
};
assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
};
assert.nestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
};
assert.notNestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
};
assert.nestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
};
assert.notNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
};
assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
};
assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
};
assert.lengthOf = function (exp, len, msg) {
new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
};
assert.hasAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
};
assert.hasAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
};
assert.containsAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
};
assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
};
assert.doesNotHaveAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
};
assert.hasAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
};
assert.hasAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
};
assert.containsAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
};
assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
};
assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
};
assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
return flag(assertErr, 'object');
};
assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
};
assert.operator = function (val, operator, val2, msg) {
var ok;
switch (operator) {
case '==':
ok = val == val2;
break;
case '===':
ok = val === val2;
break;
case '>':
ok = val > val2;
break;
case '>=':
ok = val >= val2;
break;
case '<':
ok = val < val2;
break;
case '<=':
ok = val <= val2;
break;
case '!=':
ok = val != val2;
break;
case '!==':
ok = val !== val2;
break;
default:
msg = msg ? msg + ': ' : msg;
throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
}
var test = new Assertion(ok, msg, assert.operator, true);
test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
};
assert.closeTo = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
};
assert.approximately = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
};
assert.sameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
};
assert.notSameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
};
assert.sameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
};
assert.notSameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
};
assert.sameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
};
assert.notSameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
};
assert.sameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
};
assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
};
assert.includeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
};
assert.notIncludeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
};
assert.includeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
};
assert.notIncludeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
};
assert.includeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
};
assert.notIncludeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
};
assert.includeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
};
assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
};
assert.oneOf = function (inList, list, msg) {
new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
};
assert.changes = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
};
assert.changesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
};
assert.doesNotChange = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
};
assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
};
assert.increases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
};
assert.increasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
};
assert.doesNotIncrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
};
assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
};
assert.decreases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
};
assert.decreasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
};
assert.doesNotDecrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
};
assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
};
assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
};
assert.ifError = function (val) {
if (val) {
throw (val);
}
};
assert.isExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
};
assert.isNotExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
};
assert.isSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
};
assert.isNotSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
};
assert.isFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
};
assert.isNotFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
};
assert.isEmpty = function (val, msg) {
new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
};
assert.isNotEmpty = function (val, msg) {
new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
};
(function alias(name, as) {
assert[as] = assert[name];
return alias;
})('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};
return module.exports;
},
"node_modules/pathval/index.js": function (require, module, exports) {
'use strict';
function hasProperty(obj, name) {
if (typeof obj === 'undefined' || obj === null) {
return false;
}
return (name in Object(obj));
}
function parsePath(path) {
var str = path.replace(/([^\\])\[/g, '$1.[');
var parts = str.match(/(\\\.|[^.]+?)+/g);
return parts.map(function mapMatches(value) {
var regexp = /^\[(\d+)\]$/;
var mArr = regexp.exec(value);
var parsed = null;
if (mArr) {
parsed = {
i: parseFloat(mArr[1])
};
} else {
parsed = {
p: value.replace(/\\([.\[\]])/g, '$1')
};
}
return parsed;
});
}
function internalGetPathValue(obj, parsed, pathDepth) {
var temporaryValue = obj;
var res = null;
pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);
for (var i = 0; i < pathDepth; i++) {
var part = parsed[i];
if (temporaryValue) {
if (typeof part.p === 'undefined') {
temporaryValue = temporaryValue[part.i];
} else {
temporaryValue = temporaryValue[part.p];
}
if (i === (pathDepth - 1)) {
res = temporaryValue;
}
}
}
return res;
}
function internalSetPathValue(obj, val, parsed) {
var tempObj = obj;
var pathDepth = parsed.length;
var part = null;
for (var i = 0; i < pathDepth; i++) {
var propName = null;
var propVal = null;
part = parsed[i];
if (i === (pathDepth - 1)) {
propName = typeof part.p === 'undefined' ? part.i : part.p;
tempObj[propName] = val;
} else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
tempObj = tempObj[part.p];
} else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
tempObj = tempObj[part.i];
} else {
var next = parsed[i + 1];
propName = typeof part.p === 'undefined' ? part.i : part.p;
propVal = typeof next.p === 'undefined' ? [] : {};
tempObj[propName] = propVal;
tempObj = tempObj[propName];
}
}
}
function getPathInfo(obj, path) {
var parsed = parsePath(path);
var last = parsed[parsed.length - 1];
var info = {
parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
name: last.p || last.i,
value: internalGetPathValue(obj, parsed)
};
info.exists = hasProperty(info.parent, info.name);
return info;
}
function getPathValue(obj, path) {
var info = getPathInfo(obj, path);
return info.value;
}
function setPathValue(obj, path, val) {
var parsed = parsePath(path);
internalSetPathValue(obj, val, parsed);
return obj;
}
module.exports = {
hasProperty: hasProperty,
getPathInfo: getPathInfo,
getPathValue: getPathValue,
setPathValue: setPathValue
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/test.js": function (require, module, exports) {
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
module.exports = function test(obj, args) {
var negate = flag(obj, 'negate'), expr = args[0];
return negate ? !expr : expr;
};
return module.exports;
},
"node_modules/type-detect/index.js": function (require, module, exports) {
'use strict';
var promiseExists = typeof Promise === 'function';
var globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self;
var isDom = ('location' in globalObject) && ('document' in globalObject);
var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(('')[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
module.exports = function typeDetect(obj) {
var typeofObj = typeof obj;
if (typeofObj !== 'object') {
return typeofObj;
}
if (obj === null) {
return 'null';
}
if (obj === globalObject) {
return 'global';
}
if (Array.isArray(obj) && (symbolToStringTagExists === false || !((Symbol.toStringTag in obj)))) {
return 'Array';
}
if (isDom) {
if (obj === globalObject.location) {
return 'Location';
}
if (obj === globalObject.document) {
return 'Document';
}
if (obj === (globalObject.navigator || ({})).mimeTypes) {
return 'MimeTypeArray';
}
if (obj === (globalObject.navigator || ({})).plugins) {
return 'PluginArray';
}
if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
return 'HTMLQuoteElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TD') {
return 'HTMLTableDataCellElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TH') {
return 'HTMLTableHeaderCellElement';
}
}
var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
if (typeof stringTag === 'string') {
return stringTag;
}
var objPrototype = Object.getPrototypeOf(obj);
if (objPrototype === RegExp.prototype) {
return 'RegExp';
}
if (objPrototype === Date.prototype) {
return 'Date';
}
if (promiseExists && objPrototype === Promise.prototype) {
return 'Promise';
}
if (setExists && objPrototype === Set.prototype) {
return 'Set';
}
if (mapExists && objPrototype === Map.prototype) {
return 'Map';
}
if (weakSetExists && objPrototype === WeakSet.prototype) {
return 'WeakSet';
}
if (weakMapExists && objPrototype === WeakMap.prototype) {
return 'WeakMap';
}
if (dataViewExists && objPrototype === DataView.prototype) {
return 'DataView';
}
if (mapExists && objPrototype === mapIteratorPrototype) {
return 'Map Iterator';
}
if (setExists && objPrototype === setIteratorPrototype) {
return 'Set Iterator';
}
if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
return 'Array Iterator';
}
if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
return 'String Iterator';
}
if (objPrototype === null) {
return 'Object';
}
return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
};
module.exports.typeDetect = module.exports;
return module.exports;
},
"node_modules/chai/lib/chai/utils/expectTypes.js": function (require, module, exports) {
var AssertionError = require("node_modules/assertion-error/index.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var type = require("node_modules/type-detect/index.js");
module.exports = function expectTypes(obj, types) {
var flagMsg = flag(obj, 'message');
var ssfi = flag(obj, 'ssfi');
flagMsg = flagMsg ? flagMsg + ': ' : '';
obj = flag(obj, 'object');
types = types.map(function (t) {
return t.toLowerCase();
});
types.sort();
var str = types.map(function (t, index) {
var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
return or + art + ' ' + t;
}).join(', ');
var objType = type(obj).toLowerCase();
if (!types.some(function (expected) {
return objType === expected;
})) {
throw new AssertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getMessage.js": function (require, module, exports) {
var flag = require("node_modules/chai/lib/chai/utils/flag.js"), getActual = require("node_modules/chai/lib/chai/utils/getActual.js"), inspect = require("node_modules/chai/lib/chai/utils/inspect.js"), objDisplay = require("node_modules/chai/lib/chai/utils/objDisplay.js");
module.exports = function getMessage(obj, args) {
var negate = flag(obj, 'negate'), val = flag(obj, 'object'), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, 'message');
if (typeof msg === "function") msg = msg();
msg = msg || '';
msg = msg.replace(/#\{this\}/g, function () {
return objDisplay(val);
}).replace(/#\{act\}/g, function () {
return objDisplay(actual);
}).replace(/#\{exp\}/g, function () {
return objDisplay(expected);
});
return flagMsg ? flagMsg + ': ' + msg : msg;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getActual.js": function (require, module, exports) {
module.exports = function getActual(obj, args) {
return args.length > 4 ? args[4] : obj._obj;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/inspect.js": function (require, module, exports) {
var getName = require("node_modules/get-func-name/index.js");
var getProperties = require("node_modules/chai/lib/chai/utils/getProperties.js");
var getEnumerableProperties = require("node_modules/chai/lib/chai/utils/getEnumerableProperties.js");
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = inspect;
function inspect(obj, showHidden, depth, colors) {
var ctx = {
showHidden: showHidden,
seen: [],
stylize: function (str) {
return str;
}
};
return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}
var isDOMElement = function (object) {
if (typeof HTMLElement === 'object') {
return object instanceof HTMLElement;
} else {
return object && typeof object === 'object' && ('nodeType' in object) && object.nodeType === 1 && typeof object.nodeName === 'string';
}
};
function formatValue(ctx, value, recurseTimes) {
if (value && typeof value.inspect === 'function' && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (typeof ret !== 'string') {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
if (isDOMElement(value)) {
if (('outerHTML' in value)) {
return value.outerHTML;
} else {
try {
if (document.xmlVersion) {
var xmlSerializer = new XMLSerializer();
return xmlSerializer.serializeToString(value);
} else {
var ns = "http://www.w3.org/1999/xhtml";
var container = document.createElementNS(ns, '_');
container.appendChild(value.cloneNode(false));
var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');
container.innerHTML = '';
return html;
}
} catch (err) {}
}
}
var visibleKeys = getEnumerableProperties(value);
var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
var name, nameSuffix;
if (keys.length === 0 || (isError(value) && ((keys.length === 1 && keys[0] === 'stack') || (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')))) {
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
return ctx.stylize('[Function' + nameSuffix + ']', 'special');
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
}
if (isError(value)) {
return formatError(value);
}
}
var base = '', array = false, typedArray = false, braces = ['{', '}'];
if (isTypedArray(value)) {
typedArray = true;
braces = ['[', ']'];
}
if (isArray(value)) {
array = true;
braces = ['[', ']'];
}
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
base = ' [Function' + nameSuffix + ']';
}
if (isRegExp(value)) {
base = ' ' + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = ' ' + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
return formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
} else {
return ctx.stylize('[Object]', 'special');
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else if (typedArray) {
return formatTypedArray(value);
} else {
output = keys.map(function (key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
switch (typeof value) {
case 'undefined':
return ctx.stylize('undefined', 'undefined');
case 'string':
var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
return ctx.stylize(simple, 'string');
case 'number':
if (value === 0 && (1 / value) === -Infinity) {
return ctx.stylize('-0', 'number');
}
return ctx.stylize('' + value, 'number');
case 'boolean':
return ctx.stylize('' + value, 'boolean');
case 'symbol':
return ctx.stylize(value.toString(), 'symbol');
}
if (value === null) {
return ctx.stylize('null', 'null');
}
}
function formatError(value) {
return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (Object.prototype.hasOwnProperty.call(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push('');
}
}
keys.forEach(function (key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatTypedArray(value) {
var str = '[ ';
for (var i = 0; i < value.length; ++i) {
if (str.length >= config.truncateThreshold - 7) {
str += '...';
break;
}
str += value[i] + ', ';
}
str += ' ]';
if (str.indexOf(',  ]') !== -1) {
str = str.replace(',  ]', ' ]');
}
return str;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name;
var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
var str;
if (propDescriptor) {
if (propDescriptor.get) {
if (propDescriptor.set) {
str = ctx.stylize('[Getter/Setter]', 'special');
} else {
str = ctx.stylize('[Getter]', 'special');
}
} else {
if (propDescriptor.set) {
str = ctx.stylize('[Setter]', 'special');
}
}
}
if (visibleKeys.indexOf(key) < 0) {
name = '[' + key + ']';
}
if (!str) {
if (ctx.seen.indexOf(value[key]) < 0) {
if (recurseTimes === null) {
str = formatValue(ctx, value[key], null);
} else {
str = formatValue(ctx, value[key], recurseTimes - 1);
}
if (str.indexOf('\n') > -1) {
if (array) {
str = str.split('\n').map(function (line) {
return '  ' + line;
}).join('\n').substr(2);
} else {
str = '\n' + str.split('\n').map(function (line) {
return '   ' + line;
}).join('\n');
}
}
} else {
str = ctx.stylize('[Circular]', 'special');
}
}
if (typeof name === 'undefined') {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify('' + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, 'name');
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, 'string');
}
}
return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function (prev, cur) {
numLinesEst++;
if (cur.indexOf('\n') >= 0) numLinesEst++;
return prev + cur.length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
}
return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
function isTypedArray(ar) {
return (typeof ar === 'object' && (/\w+Array]$/).test(objectToString(ar)));
}
function isArray(ar) {
return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}
function isRegExp(re) {
return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}
function isDate(d) {
return typeof d === 'object' && objectToString(d) === '[object Date]';
}
function isError(e) {
return typeof e === 'object' && objectToString(e) === '[object Error]';
}
function objectToString(o) {
return Object.prototype.toString.call(o);
}
return module.exports;
},
"node_modules/chai/lib/chai/utils/objDisplay.js": function (require, module, exports) {
var inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function objDisplay(obj) {
var str = inspect(obj), type = Object.prototype.toString.call(obj);
if (config.truncateThreshold && str.length >= config.truncateThreshold) {
if (type === '[object Function]') {
return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';
} else if (type === '[object Array]') {
return '[ Array(' + obj.length + ') ]';
} else if (type === '[object Object]') {
var keys = Object.keys(obj), kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');
return '{ Object (' + kstr + ') }';
} else {
return str;
}
} else {
return str;
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/flag.js": function (require, module, exports) {
module.exports = function flag(obj, key, value) {
var flags = obj.__flags || (obj.__flags = Object.create(null));
if (arguments.length === 3) {
flags[key] = value;
} else {
return flags[key];
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/transferFlags.js": function (require, module, exports) {
module.exports = function transferFlags(assertion, object, includeAll) {
var flags = assertion.__flags || (assertion.__flags = Object.create(null));
if (!object.__flags) {
object.__flags = Object.create(null);
}
includeAll = arguments.length === 3 ? includeAll : true;
for (var flag in flags) {
if (includeAll || (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
object.__flags[flag] = flags[flag];
}
}
};
return module.exports;
},
"node_modules/deep-eql/index.js": function (require, module, exports) {
'use strict';
var type = require("node_modules/type-detect/index.js");
function FakeMap() {
this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}
FakeMap.prototype = {
get: function getMap(key) {
return key[this._key];
},
set: function setMap(key, value) {
if (!Object.isFrozen(key)) {
Object.defineProperty(key, this._key, {
value: value,
configurable: true
});
}
}
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return null;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
var result = leftHandMap.get(rightHandOperand);
if (typeof result === 'boolean') {
return result;
}
}
return null;
}
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
leftHandMap.set(rightHandOperand, result);
} else {
leftHandMap = new MemoizeMap();
leftHandMap.set(rightHandOperand, result);
memoizeMap.set(leftHandOperand, leftHandMap);
}
}
module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;
function deepEqual(leftHandOperand, rightHandOperand, options) {
if (options && options.comparator) {
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
function simpleEqual(leftHandOperand, rightHandOperand) {
if (leftHandOperand === rightHandOperand) {
return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
}
if (leftHandOperand !== leftHandOperand && rightHandOperand !== rightHandOperand) {
return true;
}
if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return false;
}
return null;
}
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
options = options || ({});
options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
var comparator = options && options.comparator;
var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
if (memoizeResultLeft !== null) {
return memoizeResultLeft;
}
var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
if (memoizeResultRight !== null) {
return memoizeResultRight;
}
if (comparator) {
var comparatorResult = comparator(leftHandOperand, rightHandOperand);
if (comparatorResult === false || comparatorResult === true) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
return comparatorResult;
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
}
var leftHandType = type(leftHandOperand);
if (leftHandType !== type(rightHandOperand)) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
return false;
}
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
return result;
}
function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
switch (leftHandType) {
case 'String':
case 'Number':
case 'Boolean':
case 'Date':
return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
case 'Promise':
case 'Symbol':
case 'function':
case 'WeakMap':
case 'WeakSet':
case 'Error':
return leftHandOperand === rightHandOperand;
case 'Arguments':
case 'Int8Array':
case 'Uint8Array':
case 'Uint8ClampedArray':
case 'Int16Array':
case 'Uint16Array':
case 'Int32Array':
case 'Uint32Array':
case 'Float32Array':
case 'Float64Array':
case 'Array':
return iterableEqual(leftHandOperand, rightHandOperand, options);
case 'RegExp':
return regexpEqual(leftHandOperand, rightHandOperand);
case 'Generator':
return generatorEqual(leftHandOperand, rightHandOperand, options);
case 'DataView':
return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
case 'ArrayBuffer':
return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
case 'Set':
return entriesEqual(leftHandOperand, rightHandOperand, options);
case 'Map':
return entriesEqual(leftHandOperand, rightHandOperand, options);
default:
return objectEqual(leftHandOperand, rightHandOperand, options);
}
}
function regexpEqual(leftHandOperand, rightHandOperand) {
return leftHandOperand.toString() === rightHandOperand.toString();
}
function entriesEqual(leftHandOperand, rightHandOperand, options) {
if (leftHandOperand.size !== rightHandOperand.size) {
return false;
}
if (leftHandOperand.size === 0) {
return true;
}
var leftHandItems = [];
var rightHandItems = [];
leftHandOperand.forEach(function gatherEntries(key, value) {
leftHandItems.push([key, value]);
});
rightHandOperand.forEach(function gatherEntries(key, value) {
rightHandItems.push([key, value]);
});
return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
function iterableEqual(leftHandOperand, rightHandOperand, options) {
var length = leftHandOperand.length;
if (length !== rightHandOperand.length) {
return false;
}
if (length === 0) {
return true;
}
var index = -1;
while (++index < length) {
if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
return false;
}
}
return true;
}
function generatorEqual(leftHandOperand, rightHandOperand, options) {
return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
function hasIteratorFunction(target) {
return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
function getIteratorEntries(target) {
if (hasIteratorFunction(target)) {
try {
return getGeneratorEntries(target[Symbol.iterator]());
} catch (iteratorError) {
return [];
}
}
return [];
}
function getGeneratorEntries(generator) {
var generatorResult = generator.next();
var accumulator = [generatorResult.value];
while (generatorResult.done === false) {
generatorResult = generator.next();
accumulator.push(generatorResult.value);
}
return accumulator;
}
function getEnumerableKeys(target) {
var keys = [];
for (var key in target) {
keys.push(key);
}
return keys;
}
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
var length = keys.length;
if (length === 0) {
return true;
}
for (var i = 0; i < length; i += 1) {
if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
return false;
}
}
return true;
}
function objectEqual(leftHandOperand, rightHandOperand, options) {
var leftHandKeys = getEnumerableKeys(leftHandOperand);
var rightHandKeys = getEnumerableKeys(rightHandOperand);
if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
leftHandKeys.sort();
rightHandKeys.sort();
if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
return false;
}
return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
}
var leftHandEntries = getIteratorEntries(leftHandOperand);
var rightHandEntries = getIteratorEntries(rightHandOperand);
if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
leftHandEntries.sort();
rightHandEntries.sort();
return iterableEqual(leftHandEntries, rightHandEntries, options);
}
if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
return true;
}
return false;
}
function isPrimitive(value) {
return value === null || typeof value !== 'object';
}
return module.exports;
},
"node_modules/get-func-name/index.js": function (require, module, exports) {
'use strict';
var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
if (typeof aFunc !== 'function') {
return null;
}
var name = '';
if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
var match = toString.call(aFunc).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = aFunc.name;
}
return name;
}
module.exports = getFuncName;
return module.exports;
},
"node_modules/chai/lib/chai/utils/addProperty.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function addProperty(ctx, name, getter) {
getter = getter === undefined ? function () {} : getter;
Object.defineProperty(ctx, name, {
get: function propertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', propertyGetter);
}
var result = getter.call(this);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/addMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function addMethod(ctx, name, method) {
var methodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', methodWrapper);
}
var result = method.apply(this, arguments);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(methodWrapper, name, false);
ctx[name] = proxify(methodWrapper, name);
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteProperty.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteProperty(ctx, name, getter) {
var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function () {};
if (_get && 'function' === typeof _get.get) _super = _get.get;
Object.defineProperty(ctx, name, {
get: function overwritingPropertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingPropertyGetter);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = getter(_super).call(this);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteMethod(ctx, name, method) {
var _method = ctx[name], _super = function () {
throw new Error(name + ' is not a function');
};
if (_method && 'function' === typeof _method) _super = _method;
var overwritingMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingMethodWrapper);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = method(_super).apply(this, arguments);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(overwritingMethodWrapper, name, false);
ctx[name] = proxify(overwritingMethodWrapper, name);
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/addChainableMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
var canSetPrototype = typeof Object.setPrototypeOf === 'function';
var testFn = function () {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
if (typeof propDesc !== 'object') return true;
return !propDesc.configurable;
});
var call = Function.prototype.call, apply = Function.prototype.apply;
module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
if (typeof chainingBehavior !== 'function') {
chainingBehavior = function () {};
}
var chainableBehavior = {
method: method,
chainingBehavior: chainingBehavior
};
if (!ctx.__methods) {
ctx.__methods = {};
}
ctx.__methods[name] = chainableBehavior;
Object.defineProperty(ctx, name, {
get: function chainableMethodGetter() {
chainableBehavior.chainingBehavior.call(this);
var chainableMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', chainableMethodWrapper);
}
var result = chainableBehavior.method.apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(chainableMethodWrapper, name, true);
if (canSetPrototype) {
var prototype = Object.create(this);
prototype.call = call;
prototype.apply = apply;
Object.setPrototypeOf(chainableMethodWrapper, prototype);
} else {
var asserterNames = Object.getOwnPropertyNames(ctx);
asserterNames.forEach(function (asserterName) {
if (excludeNames.indexOf(asserterName) !== -1) {
return;
}
var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
Object.defineProperty(chainableMethodWrapper, asserterName, pd);
});
}
transferFlags(this, chainableMethodWrapper);
return proxify(chainableMethodWrapper);
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteChainableMethod.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
var chainableBehavior = ctx.__methods[name];
var _chainingBehavior = chainableBehavior.chainingBehavior;
chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
var result = chainingBehavior(_chainingBehavior).call(this);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
var _method = chainableBehavior.method;
chainableBehavior.method = function overwritingChainableMethodWrapper() {
var result = method(_method).apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/compareByInspect.js": function (require, module, exports) {
var inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
module.exports = function compareByInspect(a, b) {
return inspect(a) < inspect(b) ? -1 : 1;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js": function (require, module, exports) {
module.exports = function getOwnEnumerablePropertySymbols(obj) {
if (typeof Object.getOwnPropertySymbols !== 'function') return [];
return Object.getOwnPropertySymbols(obj).filter(function (sym) {
return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js": function (require, module, exports) {
var getOwnEnumerablePropertySymbols = require("node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
module.exports = function getOwnEnumerableProperties(obj) {
return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};
return module.exports;
},
"node_modules/check-error/index.js": function (require, module, exports) {
'use strict';
function compatibleInstance(thrown, errorLike) {
return errorLike instanceof Error && thrown === errorLike;
}
function compatibleConstructor(thrown, errorLike) {
if (errorLike instanceof Error) {
return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
} else if (errorLike.prototype instanceof Error || errorLike === Error) {
return thrown.constructor === errorLike || thrown instanceof errorLike;
}
return false;
}
function compatibleMessage(thrown, errMatcher) {
var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
if (errMatcher instanceof RegExp) {
return errMatcher.test(comparisonString);
} else if (typeof errMatcher === 'string') {
return comparisonString.indexOf(errMatcher) !== -1;
}
return false;
}
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
var name = '';
if (typeof constructorFn.name === 'undefined') {
var match = String(constructorFn).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = constructorFn.name;
}
return name;
}
function getConstructorName(errorLike) {
var constructorName = errorLike;
if (errorLike instanceof Error) {
constructorName = getFunctionName(errorLike.constructor);
} else if (typeof errorLike === 'function') {
constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike());
}
return constructorName;
}
function getMessage(errorLike) {
var msg = '';
if (errorLike && errorLike.message) {
msg = errorLike.message;
} else if (typeof errorLike === 'string') {
msg = errorLike;
}
return msg;
}
module.exports = {
compatibleInstance: compatibleInstance,
compatibleConstructor: compatibleConstructor,
compatibleMessage: compatibleMessage,
getMessage: getMessage,
getConstructorName: getConstructorName
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/proxify.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var getProperties = require("node_modules/chai/lib/chai/utils/getProperties.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var builtins = ['__flags', '__methods', '_obj', 'assert'];
module.exports = function proxify(obj, nonChainableMethodName) {
if (!isProxyEnabled()) return obj;
return new Proxy(obj, {
get: function proxyGetter(target, property) {
if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
if (nonChainableMethodName) {
throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
}
var orderedProperties = getProperties(target).filter(function (property) {
return !Object.prototype.hasOwnProperty(property) && builtins.indexOf(property) === -1;
}).sort(function (a, b) {
return stringDistance(property, a) - stringDistance(property, b);
});
if (orderedProperties.length && stringDistance(orderedProperties[0], property) < 4) {
throw Error('Invalid Chai property: ' + property + '. Did you mean "' + orderedProperties[0] + '"?');
} else {
throw Error('Invalid Chai property: ' + property);
}
}
if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
flag(target, 'ssfi', proxyGetter);
}
return Reflect.get(target, property);
}
});
};
function stringDistance(strA, strB, memo) {
if (!memo) {
memo = [];
for (var i = 0; i <= strA.length; i++) {
memo[i] = [];
}
}
if (!memo[strA.length] || !memo[strA.length][strB.length]) {
if (strA.length === 0 || strB.length === 0) {
memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
} else {
memo[strA.length][strB.length] = Math.min(stringDistance(strA.slice(0, -1), strB, memo) + 1, stringDistance(strA, strB.slice(0, -1), memo) + 1, stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) + (strA.slice(-1) === strB.slice(-1) ? 0 : 1));
}
}
return memo[strA.length][strB.length];
}
return module.exports;
},
"node_modules/chai/lib/chai/utils/addLengthGuard.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
module.exports = function addLengthGuard(fn, assertionName, isChainable) {
if (!fnLengthDesc.configurable) return fn;
Object.defineProperty(fn, 'length', {
get: function () {
if (isChainable) {
throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
}
throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of "' + assertionName + '".');
}
});
return fn;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/isProxyEnabled.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function isProxyEnabled() {
return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/isNaN.js": function (require, module, exports) {
function isNaN(value) {
return value !== value;
}
module.exports = Number.isNaN || isNaN;
return module.exports;
},
"node_modules/chai/lib/chai/utils/getProperties.js": function (require, module, exports) {
module.exports = function getProperties(object) {
var result = Object.getOwnPropertyNames(object);
function addProperty(property) {
if (result.indexOf(property) === -1) {
result.push(property);
}
}
var proto = Object.getPrototypeOf(object);
while (proto !== null) {
Object.getOwnPropertyNames(proto).forEach(addProperty);
proto = Object.getPrototypeOf(proto);
}
return result;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getEnumerableProperties.js": function (require, module, exports) {
module.exports = function getEnumerableProperties(object) {
var result = [];
for (var name in object) {
result.push(name);
}
return result;
};
return module.exports;
}
}, this);
return require("entry.js");
}).call(this, null, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : this);


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuY29mZmVlIiwiLi4vcGFja2FnZS5qc29uIiwic2ltdWxhdGUuY29mZmVlIiwibm9kZV9tb2R1bGVzL2NoYWkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS1zdHlsZS9zb3VyY2VzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkuanMiLCJub2RlX21vZHVsZXMvYXNzZXJ0aW9uLWVycm9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9jb25maWcuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9hc3NlcnRpb24uanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9jb3JlL2Fzc2VydGlvbnMuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2UvZXhwZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvaW50ZXJmYWNlL3Nob3VsZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL2ludGVyZmFjZS9hc3NlcnQuanMiLCJub2RlX21vZHVsZXMvcGF0aHZhbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Rlc3QuanMiLCJub2RlX21vZHVsZXMvdHlwZS1kZXRlY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9leHBlY3RUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE1lc3NhZ2UuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRBY3R1YWwuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9pbnNwZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb2JqRGlzcGxheS5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2ZsYWcuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy90cmFuc2ZlckZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2RlZXAtZXFsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2dldC1mdW5jLW5hbWUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2FkZE1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL292ZXJ3cml0ZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvYWRkQ2hhaW5hYmxlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvY29tcGFyZUJ5SW5zcGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jaGVjay1lcnJvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Byb3hpZnkuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRMZW5ndGhHdWFyZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2lzUHJveHlFbmFibGVkLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaXNOYU4uanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRQcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMuanMiXSwibmFtZXMiOlsiY2hhaSIsImRpbWVuc2lvbnMiLCJjb25zb2xlIiwibG9nIiwiRG9tIiwiRE9NIiwid2luZG93IiwicXVpY2tkb20iLCJtb2NoYSIsInNldHVwIiwic2xvdyIsInRpbWVvdXQiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwiYmFpbCIsInVzZSIsImNvbmZpZyIsInRydW5jYXRlVGhyZXNob2xkIiwiZXhwZWN0Iiwic2FuZGJveCIsInJlc3RhcnRTYW5kYm94IiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjaGVja0NoaWxkU3RydWN0dXJlIiwibWFpbiIsImNoaWxkIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJ0byIsImVxdWFsIiwiaW5kZXgiLCJlbCIsInBhcmVudE5vZGUiLCJwYXJlbnQiLCJzdWl0ZSIsInRlc3QiLCJwYWNrYWdlVmVyc2lvbiIsInZlcnNpb24iLCJkaXYiLCJiZSIsImluc3RhbmNlT2YiLCJIVE1MRGl2RWxlbWVudCIsInVuZGVmaW5lZCIsImkiLCJhIiwiY29uc3RydWN0b3IiLCJsaW5rIiwiYW5jaG9yIiwidGV4dCIsInNwYW4iLCJoNCIsImhlYWRlciIsImZvb3RlciIsInNlY3Rpb24iLCJidXR0b24iLCJpbnB1dCIsInR5cGVzIiwidHlwZSIsIm5hbWUiLCJub3QiLCJjb250YWluIiwiQSIsInByb3BzIiwiQiIsImNsYXNzTmFtZSIsImF0dHJzIiwiQyIsInZhbHVlIiwiRCIsImNoZWNrZWQiLCJFIiwib3B0aW9uIiwic2VsZWN0ZWQiLCJGIiwiaHJlZiIsIkciLCJ1cmwiLCJIIiwiSSIsImltZyIsInNyYyIsIkoiLCJyZWxhdGVkSW5zdGFuY2UiLCJvYmoiLCJhYmMiLCJkZWYiLCJnZXRBdHRyaWJ1dGUiLCJkYXRhc2V0Iiwibm9kZVR5cGUiLCJ0ZXh0Q29udGVudCIsInJlbGF0ZWQiLCJvcHRpb25zIiwiY2hpbGROb2RlcyIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRUbyIsInJhdyIsImhhdmUiLCJkaXZSYXciLCJfcXVpY2tFbGVtZW50IiwicmF3QiIsInJhd0MiLCJyYXdBIiwicXVlcnlTZWxlY3RvckFsbCIsImRvYyIsInBhcmVudHMiLCJ3aW4iLCJhcHBlbmQiLCJodG1sIiwiY29tcHV0ZWRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJsYW1lbyIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZFNpemUiLCJyZWdEaXYiLCJzdmdHb29kIiwic3ZnUG9seUJhZCIsInN2Z1BvbHlHb29kIiwic3ZnRGl2Iiwic3ZnQmFkIiwiSFRNTFVua25vd25FbGVtZW50IiwiU1ZHU1ZHRWxlbWVudCIsIlNWR1BvbHlsaW5lRWxlbWVudCIsImh0bWxTdHJpbmciLCJiYXRjaCIsImVsZW1lbnRzIiwiaW5jbHVkZSIsImNzcyIsInJlcGxhY2VXaXRoIiwicmVwbGFjZSIsInJlbW92ZUxpc3RlbmVyIiwib2ZmIiwiZGl2QSIsImRpdkIiLCJtZXRob2RzIiwic2Nyb2xsVG9wIiwiZ2V0Iiwid2VpZ2h0Iiwic2V0IiwiYmlnSW5kZXgiLCJlbWl0Q291bnRCIiwib24iLCJldmVudCIsImVtaXRDb3VudEEiLCJlbWl0RXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZW1pdCIsImFyZyIsImFyZ3VtZW50cyIsImVtaXRQcml2YXRlIiwiZW1pdENvdW50QyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZSIsImN1c3RvbSIsImVtaXRDb3VudEQiLCJldmVudENCIiwiYXR0YWNoTGlzdGVuZXJzIiwiZW1pdENvdW50Iiwib25jZSIsImVtaXRDb250ZXh0IiwibGlzdGVuZXJzIiwiZXZlbnRzIiwicGFyZW50QSIsInBhcmVudEIiLCJtYXN0ZXJQYXJlbnRCIiwicGFyZW50QyIsImludm9rZUNvdW50IiwiZGV0YWNoIiwiYW5vdGhlck9iaiIsInJhdGUiLCJhcHBseVdpZHRoIiwiZXhwZWN0ZWRJbnN0YW5jZSIsImluc3RhbmNlIiwiZm9udFNpemUiLCJzb21lIiwicyIsInpJbmRleCIsImZpZWxkIiwidGhlSW5kZXgiLCIkaGFwcHkiLCIkcmVsYXhlZCIsInN0eWxlQWZ0ZXJJbnNlcnQiLCJwb3NpdGlvbiIsInByb3AiLCJ0YXJnZXQiLCJjb21wdXRlZCIsImlubGluZSIsInNhZmUiLCJzdHlsZVNhZmUiLCJlcWwiLCJzdGF0ZSIsImhlaWdodEEiLCJoZWlnaHRCIiwic3R5bGVQYXJzZWQiLCJwYXJzZUZsb2F0IiwiY291bnQiLCJvcGFjaXR5IiwiJGZ1bm55IiwicmVjYWxjU3R5bGUiLCJ3cmFwcGVyQ291bnQiLCJ3cmFwcGVyIiwicmVjYWxjT25SZXNpemUiLCJpbm5lckhUTUwiLCJmb3JjZVN0eWxlIiwiaGVhZCIsImF0dHIiLCJyZW1vdmUiLCJoaWRlIiwic2hvdyIsInN2ZyIsImIiLCJjIiwicmVzZXRTdGF0ZSIsInRvZ2dsZVN0YXRlIiwiJGJhc2UiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0Iiwic3RhdGVUcmlnZ2VycyIsImhhcHB5IiwicmVsYXhlZCIsIiRob3ZlciIsIiRmb2N1cyIsImF0dGFjaFN0YXRlRXZlbnRzIiwiX2F0dGFjaFN0YXRlRXZlbnRzIiwiTWFpbiIsInBhc3NTdGF0ZVRvQ2hpbGRyZW4iLCJyZWN0QSIsInJlY3QiLCJyZWN0QiIsIkNsaWVudFJlY3QiLCJyZWN0QyIsIm9yaWVudGF0aW9uIiwiYXNwZWN0UmF0aW8iLCJkaXZSZWciLCJwYXJlbnRPcGFjaXR5R2V0dGVyIiwiZGl2QyIsImluc2VydEJlZm9yZSIsImRldGFjaGVkUGFyZW50IiwidmlzaWJpbGl0eSIsImNoaWxkQSIsImNoaWxkQiIsInBpcGVTdGF0ZSIsInVucGFzc2FibGVTdGF0ZXMiLCJzcGFuQSIsInNwYW5CIiwic3ViU3BhbiIsInN1YlBhcmVudEEiLCJzdWJDaGlsZEEiLCJzdWJQYXJlbnRCIiwic3ViQ2hpbGRCIiwiZm9yY2UiLCJkaXZCXyIsImRpdkFfIiwiaXNOYU4iLCJjb2xvciIsInJlc3VsdHMiLCJwdXNoIiwiZGVlcCIsIiRzb21ldGhpbmdFbHNlIiwiZ2V0U3R5bGVzIiwidXBkYXRlU3RhdGVTdHlsZXMiLCJlbDEiLCJlbDIiLCJlbDMiLCJzdWl0ZVRlYXJkb3duIiwicmVmIiwiY29uZmlndXJhYmxlIiwicmVzdG9yZSIsInN1aXRlU2V0dXAiLCJza2lwIiwidGVhcmRvd24iLCJsZXZlbCIsIkNTUyIsImNsZWFyUmVnaXN0ZXJlZCIsInNpbXVsYXRlIiwibGluZUhlaWdodCIsInNpbXVsYXRlUGFyZW50IiwidG9wIiwibWFyZ2luQm90dG9tIiwiZm9udFdlaWdodCIsImdoaSIsIm1hcmdpblJpZ2h0IiwiY29tbWVudCIsImVsZW1lbnRDaGlsZHJlbiIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlQ29tbWVudCIsImRpdiQiLCJzbGljZSIsImRvY3VtZW50RWxlbWVudCIsImVscyIsInBhcmVudE1hdGNoaW5nIiwicGFyZW50c1VudGlsIiwibmV4dCIsIm5leHRBbGwiLCJuZXh0RWwiLCJuZXh0RWxBbGwiLCJwcmV2IiwicHJldkFsbCIsInByZXZFbCIsInByZXZFbEFsbCIsInNpYmxpbmdzIiwicmV2ZXJzZSIsImNvbmNhdCIsImVsZW1lbnRTaWJsaW5ncyIsImRpdkJBIiwiZGl2QkIiLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwidGVtcGxhdGUiLCJzcGF3biIsImNoaWxkQV8xIiwiY2hpbGRBXzIiLCJjaGlsZEFfMyIsImNoaWxkQl8xIiwiY2hpbGRCXzIiLCJkaXZEIiwic2FuZEJveCIsImNoaWxkZiIsIm5ld0NoaWxkIiwibmV3Q2hpbGRDaGlsZCIsIk9iamVjdCIsImtleXMiLCJuZXdQYXJlbnQiLCJjaGlsZEMiLCJjaGlsZEQiLCJjaGlsZEUiLCJjaGlsZEYiLCJjaGlsZEciLCJpbmRleFR5cGUiLCJpbmRleFJlZiIsInF1ZXJ5IiwicXVlcnlBbGwiLCJhbGxBIiwiYWxsQiIsIk1haW5BIiwiTWFpbkIiLCJwcmVwZW5kIiwicHJlcGVuZFRvIiwiYWZ0ZXIiLCJpbnNlcnRBZnRlciIsImJlZm9yZSIsImV4aXN0IiwiZW1wdHkiLCJ3cmFwQSIsIndyYXBCIiwid3JhcEMiLCJ3cmFwIiwidW53cmFwIiwib3B0cyIsImNsb25lIiwibXlQcm9wIiwiYW5vdGhlclByb3AiLCJsYXN0UHJvcCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInNldFJlZiIsImJhdGNoMSIsImJhdGNoMiIsInJlc3VsdCIsImFyciIsInNwYXduQSIsInNwYXduQiIsInNlY3Rpb25UZW1wbGF0ZSIsInRvVGVtcGxhdGUiLCJ0ZW1wbGF0ZVNwYXduIiwic2VjdGlvbkVsIiwidGVtcGxhdGVDb3B5QSIsImV4dGVuZCIsInRlbXBsYXRlQ29weUIiLCJ0ZW1wbGF0ZUNvcHlDIiwic3Bhd25DIiwic3Bhd25SYXciLCJjbG9uZUEiLCJjbG9uZUIiLCJjbG9uZUMiLCJmb250RmFtaWx5IiwidGVtcGxhdGVDb3B5Iiwic3Bhd25lZEEiLCJzcGF3bmVkQiIsInNwYXduZWRDIiwiZGVmYXVsdHMiLCJjb21wdXRlcnMiLCJsYWJlbCIsInRoZVNwYW4iLCJoZWFkZXJUZW1wbGF0ZSIsImhlYWRlclRlbXBsYXRlQ2xvbmUiLCJkeW5hbWljSGVpZ2h0U3R5bGUiLCJteUhlaWdodCIsInJlbmRlcmVkIiwidGVtcGxhdGVNYWluIiwidGVtcGxhdGVDb3B5MiIsImNoaWxkQV8yXzEiLCJDSElMRGFfMiIsIkNoaWxkQiIsIkNoaWxkQyIsInRlbXBsYXRlQSIsInRlbXBsYXRlQiIsInRlbXBsYXRlQyIsInRlbXBsYXRlRCIsInNwYXduRCIsInZhbHVlQSIsInZhbHVlQiIsIiRhY3RpdmUiLCJyZWNlaXZlZERhdGEiLCJkYXRhIiwiY29udGV4dCIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJmaWZ0aCIsInNpeHRoIiwiY2hpbGRDaGlsZCIsImQiLCJmIiwiYXBwbHlEYXRhIiwiX2luaXQiLCJuYW1lMSIsImRpdkUiLCJleHBlY3RlZCIsInNpemUiLCJ0ZW1wbGF0ZTEiLCJ0ZW1wbGF0ZTIiLCJwYXNzRGF0YVRvQ2hpbGRyZW4iLCJoaXN0b3J5IiwiaW52b2tlQ29tcHV0ZXJzT25jZSIsImlzVGVtcGxhdGUiLCJpc1F1aWNrRWwiLCJpc0VsIiwic3RyaW5naWZpZWQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VjdGlvbkNvcHkiLCJwYXJzZSIsImNoYWluUmVzdWx0IiwidXBkYXRlU3RhdGVUZXh0cyIsImNiIiwibG9zdE9wdHMiLCJ1cGRhdGVPcHRpb25zIiwiX3JlbW92ZUNoaWxkIiwiSFRNTEVsZW1lbnQiLCJwcm90b3R5cGUiLCJvbkV2ZW50IiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiVGV4dCIsIm5vbkVsZW1lbnRTdWZmaXgiLCJlbGVtZW50U3VmZml4IiwiY3JlYXRvciIsImoiLCJET01SZWN0Iiwib3JpZ0Rlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImN1cnJlbnQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRSZWFsIiwiZGltZW5zaW9uIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYWxsIiwib3ZlcndyaXRlIiwib3ZlcndyaXR0ZW4iLCJkZWZpbmVQcm9wZXJ0eSIsIm5ld1ZhbHVlIiwiY2hhaVN0eWxlIiwidXRpbHMiLCJBc3NlcnRpb24iLCJmbGFnIiwic2FtcGxlRGl2Iiwic2FtcGxlU3R5bGUiLCJzYW1wbGVJZnJhbWUiLCJhZGRNZXRob2QiLCJwcm9wZXJ0eSIsImVsZW1lbnQiLCJ0cmltIiwiaXNOb25Db2xvcnMiLCJwcm9wZXJ0eVZhbHVlIiwiYXNzZXJ0aW9uIiwiY29tcGFyZUNTU1ZhbHVlIiwiQm9vbGVhbiIsImVsZW1lbnRUYWciLCJ0YWdOYW1lIiwidGhyb3dNZXNzYWdlIiwidGhyb3dNZXNzYWdlTmVnYXRpdmUiLCJhc3NlcnQiLCJwcm9wZXJ0eUhpZmVuQ2FzZSIsIm1hdGNoIiwic2V0UHJvcGVydHkiLCJoYXNBdXRvVmFsdWUiLCJpbmNsdWRlcyIsInJlZyIsIlJlZ0V4cCIsImVzY2FwZVJlZ0V4cCIsIlN0cmluZyIsInVzZWQiLCJBc3NlcnRpb25FcnJvciIsInV0aWwiLCJmbiIsImluZGV4T2YiLCJjb3JlIiwic2hvdWxkIiwiZXhjbHVkZXMiLCJyZXMiLCJmb3JFYWNoIiwia2V5IiwiYXJncyIsImV4Y2x1ZGVQcm9wcyIsIm1lc3NhZ2UiLCJfcHJvcHMiLCJzc2YiLCJleGNsdWRlIiwic2hvd0RpZmYiLCJjYWxsZWUiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2siLCJjcmVhdGUiLCJ0b0pTT04iLCJwYXRodmFsIiwiZXhwZWN0VHlwZXMiLCJnZXRNZXNzYWdlIiwiZ2V0QWN0dWFsIiwiaW5zcGVjdCIsIm9iakRpc3BsYXkiLCJ0cmFuc2ZlckZsYWdzIiwiZ2V0UGF0aEluZm8iLCJoYXNQcm9wZXJ0eSIsImdldE5hbWUiLCJhZGRQcm9wZXJ0eSIsIm92ZXJ3cml0ZVByb3BlcnR5Iiwib3ZlcndyaXRlTWV0aG9kIiwiYWRkQ2hhaW5hYmxlTWV0aG9kIiwib3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kIiwiY29tcGFyZUJ5SW5zcGVjdCIsImdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyIsImNoZWNrRXJyb3IiLCJwcm94aWZ5IiwiYWRkTGVuZ3RoR3VhcmQiLCJpc1Byb3h5RW5hYmxlZCIsImluY2x1ZGVTdGFjayIsInVzZVByb3h5IiwicHJveHlFeGNsdWRlZEtleXMiLCJfY2hhaSIsIm1zZyIsInNzZmkiLCJsb2NrU3NmaSIsIndhcm4iLCJjaGFpbmluZ0JlaGF2aW9yIiwiZXhwciIsIm5lZ2F0ZU1zZyIsIl9hY3R1YWwiLCJvayIsImFjdHVhbCIsInZhbCIsIl8iLCJjaGFpbiIsImFydGljbGUiLCJjaGFyQXQiLCJhbiIsIm9ialR5cGUiLCJmbGFnTXNnIiwibmVnYXRlIiwiaXNEZWVwIiwiZGVzY3JpcHRvciIsImluY2x1ZGVkIiwiaGFzIiwiaXNFcWwiLCJTYW1lVmFsdWVaZXJvIiwiaXRlbSIsImZpcnN0RXJyIiwibnVtRXJycyIsInByb3BBc3NlcnRpb24iLCJlcnIiLCJjb21wYXRpYmxlQ29uc3RydWN0b3IiLCJpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvciIsIml0ZW1zQ291bnQiLCJjaGVja0FyZ3VtZW50cyIsIl9vYmoiLCJhc3NlcnRFcXVhbCIsImFzc2VydEVxbCIsIm4iLCJkb0xlbmd0aCIsIm1zZ1ByZWZpeCIsIm5UeXBlIiwic2hvdWxkVGhyb3ciLCJlcnJvck1lc3NhZ2UiLCJwcmludE9iaiIsImxlbiIsImFzc2VydEFib3ZlIiwiYXNzZXJ0TGVhc3QiLCJhc3NlcnRCZWxvdyIsImFzc2VydE1vc3QiLCJzdGFydCIsImZpbmlzaCIsInN0YXJ0VHlwZSIsImZpbmlzaFR5cGUiLCJyYW5nZSIsInRvVVRDU3RyaW5nIiwiaXNJbnN0YW5jZU9mIiwiVHlwZUVycm9yIiwiYXNzZXJ0SW5zdGFuY2VPZiIsImlzTmVzdGVkIiwiaXNPd24iLCJwYXRoSW5mbyIsImhhc093blByb3BlcnR5IiwiZXhpc3RzIiwiYXNzZXJ0UHJvcGVydHkiLCJhcHBseSIsImFzc2VydE93blByb3BlcnR5IiwiYWN0dWFsRGVzY3JpcHRvciIsImFzc2VydE93blByb3BlcnR5RGVzY3JpcHRvciIsImFzc2VydExlbmd0aCIsImFzc2VydExlbmd0aENoYWluIiwicmUiLCJleGVjIiwiYXNzZXJ0TWF0Y2giLCJzdHIiLCJpcyIsImtleXNUeXBlIiwiZGVlcFN0ciIsIm1peGVkQXJnc01zZyIsIkFycmF5IiwibWFwIiwiYW55IiwiYWxsIiwiZXhwZWN0ZWRLZXkiLCJhY3R1YWxLZXkiLCJldmVyeSIsImxhc3QiLCJwb3AiLCJqb2luIiwic29ydCIsImFzc2VydEtleXMiLCJlcnJvckxpa2UiLCJlcnJNc2dNYXRjaGVyIiwiY2F1Z2h0RXJyIiwiZXZlcnlBcmdJc1VuZGVmaW5lZCIsImV2ZXJ5QXJnSXNEZWZpbmVkIiwiZXJyb3JMaWtlRmFpbCIsImVyck1zZ01hdGNoZXJGYWlsIiwiZXJyb3JMaWtlU3RyaW5nIiwiZ2V0Q29uc3RydWN0b3JOYW1lIiwidG9TdHJpbmciLCJpc0NvbXBhdGlibGVJbnN0YW5jZSIsImNvbXBhdGlibGVJbnN0YW5jZSIsImlzQ29tcGF0aWJsZUNvbnN0cnVjdG9yIiwicGxhY2Vob2xkZXIiLCJpc0NvbXBhdGlibGVNZXNzYWdlIiwiY29tcGF0aWJsZU1lc3NhZ2UiLCJhc3NlcnRUaHJvd3MiLCJtZXRob2QiLCJpdHNlbGYiLCJyZXNwb25kVG8iLCJtYXRjaGVyIiwic2F0aXNmeSIsImRlbHRhIiwiTWF0aCIsImFicyIsImNsb3NlVG8iLCJzdWJzZXQiLCJzdXBlcnNldCIsImNtcCIsImNvbnRhaW5zIiwib3JkZXJlZCIsImVsZW0iLCJpZHgiLCJtYXRjaElkeCIsInNwbGljZSIsImVsZW0yIiwic3ViamVjdCIsImZhaWxNc2ciLCJmYWlsTmVnYXRlTXNnIiwibGVuZ3RoQ2hlY2siLCJpc1N1YnNldE9mIiwibGlzdCIsIm9uZU9mIiwiaW5pdGlhbCIsImZpbmFsIiwibXNnT2JqIiwiYXNzZXJ0Q2hhbmdlcyIsImFzc2VydEluY3JlYXNlcyIsImFzc2VydERlY3JlYXNlcyIsImJlaGF2aW9yIiwicmVhbERlbHRhIiwiZXhwcmVzc2lvbiIsImFzc2VydERlbHRhIiwiaXNFeHRlbnNpYmxlIiwiaXNTZWFsZWQiLCJpc0Zyb3plbiIsImlzRmluaXRlIiwiZmFpbCIsIm9wZXJhdG9yIiwiTnVtYmVyIiwiU3ltYm9sIiwidmFsdWVPZiIsInNob3VsZEdldHRlciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInNob3VsZFNldHRlciIsInZhbDEiLCJ2YWwyIiwiVGhyb3ciLCJlcnJ0IiwiZXJycyIsImxvYWRTaG91bGQiLCJTaG91bGQiLCJleHByZXNzIiwiZXJybXNnIiwiaXNPayIsImlzTm90T2siLCJhY3QiLCJleHAiLCJub3RFcXVhbCIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJkZWVwRXF1YWwiLCJkZWVwU3RyaWN0RXF1YWwiLCJub3REZWVwRXF1YWwiLCJpc0Fib3ZlIiwiYWJ2IiwiYWJvdmUiLCJpc0F0TGVhc3QiLCJhdGxzdCIsImxlYXN0IiwiaXNCZWxvdyIsImJsdyIsImJlbG93IiwiaXNBdE1vc3QiLCJhdG1zdCIsIm1vc3QiLCJpc1RydWUiLCJpc05vdFRydWUiLCJpc0ZhbHNlIiwiaXNOb3RGYWxzZSIsImlzTnVsbCIsImlzTm90TnVsbCIsIk5hTiIsImlzTm90TmFOIiwibm90RXhpc3RzIiwiaXNVbmRlZmluZWQiLCJpc0RlZmluZWQiLCJpc0Z1bmN0aW9uIiwiaXNOb3RGdW5jdGlvbiIsImlzT2JqZWN0IiwiaXNOb3RPYmplY3QiLCJpc0FycmF5IiwiaXNOb3RBcnJheSIsImlzU3RyaW5nIiwiaXNOb3RTdHJpbmciLCJpc051bWJlciIsImlzTm90TnVtYmVyIiwiZmluaXRlIiwiaXNCb29sZWFuIiwiaXNOb3RCb29sZWFuIiwidHlwZU9mIiwibm90VHlwZU9mIiwibm90SW5zdGFuY2VPZiIsImluYyIsIm5vdEluY2x1ZGUiLCJkZWVwSW5jbHVkZSIsIm5vdERlZXBJbmNsdWRlIiwibmVzdGVkSW5jbHVkZSIsIm5lc3RlZCIsIm5vdE5lc3RlZEluY2x1ZGUiLCJkZWVwTmVzdGVkSW5jbHVkZSIsIm5vdERlZXBOZXN0ZWRJbmNsdWRlIiwib3duSW5jbHVkZSIsIm93biIsIm5vdE93bkluY2x1ZGUiLCJkZWVwT3duSW5jbHVkZSIsIm5vdERlZXBPd25JbmNsdWRlIiwibm90TWF0Y2giLCJub3RQcm9wZXJ0eSIsInByb3BlcnR5VmFsIiwibm90UHJvcGVydHlWYWwiLCJkZWVwUHJvcGVydHlWYWwiLCJub3REZWVwUHJvcGVydHlWYWwiLCJvd25Qcm9wZXJ0eSIsIm5vdE93blByb3BlcnR5Iiwib3duUHJvcGVydHlWYWwiLCJub3RPd25Qcm9wZXJ0eVZhbCIsImRlZXBPd25Qcm9wZXJ0eVZhbCIsIm5vdERlZXBPd25Qcm9wZXJ0eVZhbCIsIm5lc3RlZFByb3BlcnR5Iiwibm90TmVzdGVkUHJvcGVydHkiLCJuZXN0ZWRQcm9wZXJ0eVZhbCIsIm5vdE5lc3RlZFByb3BlcnR5VmFsIiwiZGVlcE5lc3RlZFByb3BlcnR5VmFsIiwibm90RGVlcE5lc3RlZFByb3BlcnR5VmFsIiwibGVuZ3RoT2YiLCJoYXNBbnlLZXlzIiwiaGFzQWxsS2V5cyIsImNvbnRhaW5zQWxsS2V5cyIsImRvZXNOb3RIYXZlQW55S2V5cyIsImRvZXNOb3RIYXZlQWxsS2V5cyIsImhhc0FueURlZXBLZXlzIiwiaGFzQWxsRGVlcEtleXMiLCJjb250YWluc0FsbERlZXBLZXlzIiwiZG9lc05vdEhhdmVBbnlEZWVwS2V5cyIsImRvZXNOb3RIYXZlQWxsRGVlcEtleXMiLCJ0aHJvd3MiLCJhc3NlcnRFcnIiLCJ0aHJvdyIsImRvZXNOb3RUaHJvdyIsImFwcHJveGltYXRlbHkiLCJzYW1lTWVtYmVycyIsInNldDEiLCJzZXQyIiwic2FtZSIsIm1lbWJlcnMiLCJub3RTYW1lTWVtYmVycyIsInNhbWVEZWVwTWVtYmVycyIsIm5vdFNhbWVEZWVwTWVtYmVycyIsInNhbWVPcmRlcmVkTWVtYmVycyIsIm5vdFNhbWVPcmRlcmVkTWVtYmVycyIsInNhbWVEZWVwT3JkZXJlZE1lbWJlcnMiLCJub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzIiwiaW5jbHVkZU1lbWJlcnMiLCJub3RJbmNsdWRlTWVtYmVycyIsImluY2x1ZGVEZWVwTWVtYmVycyIsIm5vdEluY2x1ZGVEZWVwTWVtYmVycyIsImluY2x1ZGVPcmRlcmVkTWVtYmVycyIsIm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyIsImluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMiLCJub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzIiwiaW5MaXN0IiwiY2hhbmdlcyIsImNoYW5nZSIsImNoYW5nZXNCeSIsInRtcE1zZyIsImJ5IiwiZG9lc05vdENoYW5nZSIsImNoYW5nZXNCdXROb3RCeSIsImJ1dCIsImluY3JlYXNlcyIsImluY3JlYXNlIiwiaW5jcmVhc2VzQnkiLCJkb2VzTm90SW5jcmVhc2UiLCJpbmNyZWFzZXNCdXROb3RCeSIsImRlY3JlYXNlcyIsImRlY3JlYXNlIiwiZGVjcmVhc2VzQnkiLCJkb2VzTm90RGVjcmVhc2UiLCJkb2VzTm90RGVjcmVhc2VCeSIsImRlY3JlYXNlc0J1dE5vdEJ5IiwiaWZFcnJvciIsImV4dGVuc2libGUiLCJpc05vdEV4dGVuc2libGUiLCJzZWFsZWQiLCJpc05vdFNlYWxlZCIsImZyb3plbiIsImlzTm90RnJvemVuIiwiaXNFbXB0eSIsImlzTm90RW1wdHkiLCJhcyIsImFsaWFzIiwicGF0aCIsInBhcnRzIiwicmVnZXhwIiwibUFyciIsInBhcnNlZCIsInAiLCJwYXRoRGVwdGgiLCJ0ZW1wb3JhcnlWYWx1ZSIsInBhcnQiLCJ0ZW1wT2JqIiwicHJvcE5hbWUiLCJwcm9wVmFsIiwicGFyc2VQYXRoIiwiaW5mbyIsImludGVybmFsR2V0UGF0aFZhbHVlIiwiaW50ZXJuYWxTZXRQYXRoVmFsdWUiLCJnZXRQYXRoVmFsdWUiLCJzZXRQYXRoVmFsdWUiLCJwcm9taXNlRXhpc3RzIiwiUHJvbWlzZSIsImdsb2JhbE9iamVjdCIsImdsb2JhbCIsInNlbGYiLCJpc0RvbSIsInN5bWJvbEV4aXN0cyIsIm1hcEV4aXN0cyIsIk1hcCIsInNldEV4aXN0cyIsIlNldCIsIndlYWtNYXBFeGlzdHMiLCJXZWFrTWFwIiwid2Vha1NldEV4aXN0cyIsIldlYWtTZXQiLCJkYXRhVmlld0V4aXN0cyIsIkRhdGFWaWV3Iiwic3ltYm9sSXRlcmF0b3JFeGlzdHMiLCJpdGVyYXRvciIsInN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzIiwidG9TdHJpbmdUYWciLCJzZXRFbnRyaWVzRXhpc3RzIiwiZW50cmllcyIsIm1hcEVudHJpZXNFeGlzdHMiLCJzZXRJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwibWFwSXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yRXhpc3RzIiwiYXJyYXlJdGVyYXRvclByb3RvdHlwZSIsInN0cmluZ0l0ZXJhdG9yRXhpc3RzIiwic3RyaW5nSXRlcmF0b3JQcm90b3R5cGUiLCJ0b1N0cmluZ0xlZnRTbGljZUxlbmd0aCIsInRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCIsInR5cGVvZk9iaiIsIm5hdmlnYXRvciIsIm1pbWVUeXBlcyIsInBsdWdpbnMiLCJzdHJpbmdUYWciLCJvYmpQcm90b3R5cGUiLCJEYXRlIiwidHlwZURldGVjdCIsInQiLCJhcnQiLCJvciIsImdldFByb3BlcnRpZXMiLCJnZXRFbnVtZXJhYmxlUHJvcGVydGllcyIsInNob3dIaWRkZW4iLCJkZXB0aCIsImNvbG9ycyIsImN0eCIsInNlZW4iLCJzdHlsaXplIiwiZm9ybWF0VmFsdWUiLCJpc0RPTUVsZW1lbnQiLCJvYmplY3QiLCJyZWN1cnNlVGltZXMiLCJyZXQiLCJwcmltaXRpdmUiLCJmb3JtYXRQcmltaXRpdmUiLCJvdXRlckhUTUwiLCJ4bWxWZXJzaW9uIiwieG1sU2VyaWFsaXplciIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsIm5zIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudE5TIiwiY2xvbmVOb2RlIiwidmlzaWJsZUtleXMiLCJuYW1lU3VmZml4IiwiaXNFcnJvciIsImlzUmVnRXhwIiwiaXNEYXRlIiwiZm9ybWF0RXJyb3IiLCJiYXNlIiwiYXJyYXkiLCJ0eXBlZEFycmF5IiwiYnJhY2VzIiwiaXNUeXBlZEFycmF5Iiwib3V0cHV0IiwiZm9ybWF0QXJyYXkiLCJmb3JtYXRUeXBlZEFycmF5IiwiZm9ybWF0UHJvcGVydHkiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsInNpbXBsZSIsIkluZmluaXR5IiwibCIsInByb3BEZXNjcmlwdG9yIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwibnVtTGluZXNFc3QiLCJyZWR1Y2UiLCJjdXIiLCJhciIsIm9iamVjdFRvU3RyaW5nIiwibyIsImtzdHIiLCJmbGFncyIsIl9fZmxhZ3MiLCJpbmNsdWRlQWxsIiwiX2tleSIsInJhbmRvbSIsIm5vdyIsIkZha2VNYXAiLCJNZW1vaXplTWFwIiwibGVmdEhhbmRPcGVyYW5kIiwicmlnaHRIYW5kT3BlcmFuZCIsIm1lbW9pemVNYXAiLCJpc1ByaW1pdGl2ZSIsImxlZnRIYW5kTWFwIiwiY29tcGFyYXRvciIsImV4dGVuc2l2ZURlZXBFcXVhbCIsInNpbXBsZVJlc3VsdCIsInNpbXBsZUVxdWFsIiwibWVtb2l6ZSIsIm1lbW9pemVSZXN1bHRMZWZ0IiwibWVtb2l6ZUNvbXBhcmUiLCJtZW1vaXplUmVzdWx0UmlnaHQiLCJjb21wYXJhdG9yUmVzdWx0IiwibWVtb2l6ZVNldCIsImxlZnRIYW5kVHlwZSIsImV4dGVuc2l2ZURlZXBFcXVhbEJ5VHlwZSIsIml0ZXJhYmxlRXF1YWwiLCJyZWdleHBFcXVhbCIsImdlbmVyYXRvckVxdWFsIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImVudHJpZXNFcXVhbCIsIm9iamVjdEVxdWFsIiwibGVmdEhhbmRJdGVtcyIsInJpZ2h0SGFuZEl0ZW1zIiwiZ2V0R2VuZXJhdG9yRW50cmllcyIsImhhc0l0ZXJhdG9yRnVuY3Rpb24iLCJpdGVyYXRvckVycm9yIiwiZ2VuZXJhdG9yIiwiZ2VuZXJhdG9yUmVzdWx0IiwiYWNjdW11bGF0b3IiLCJkb25lIiwibGVmdEhhbmRLZXlzIiwiZ2V0RW51bWVyYWJsZUtleXMiLCJyaWdodEhhbmRLZXlzIiwia2V5c0VxdWFsIiwibGVmdEhhbmRFbnRyaWVzIiwiZ2V0SXRlcmF0b3JFbnRyaWVzIiwicmlnaHRIYW5kRW50cmllcyIsIkZ1bmN0aW9uIiwiZnVuY3Rpb25OYW1lTWF0Y2giLCJhRnVuYyIsImdldEZ1bmNOYW1lIiwiZ2V0dGVyIiwicHJvcGVydHlHZXR0ZXIiLCJuZXdBc3NlcnRpb24iLCJtZXRob2RXcmFwcGVyIiwiX2dldCIsIl9zdXBlciIsIm92ZXJ3cml0aW5nUHJvcGVydHlHZXR0ZXIiLCJvcmlnTG9ja1NzZmkiLCJfbWV0aG9kIiwib3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyIiwiY2FuU2V0UHJvdG90eXBlIiwic2V0UHJvdG90eXBlT2YiLCJ0ZXN0Rm4iLCJleGNsdWRlTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmlsdGVyIiwicHJvcERlc2MiLCJjaGFpbmFibGVCZWhhdmlvciIsIl9fbWV0aG9kcyIsImNoYWluYWJsZU1ldGhvZFdyYXBwZXIiLCJhc3NlcnRlck5hbWVzIiwiYXNzZXJ0ZXJOYW1lIiwicGQiLCJfY2hhaW5pbmdCZWhhdmlvciIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsInRocm93biIsImVyck1hdGNoZXIiLCJjb21wYXJpc29uU3RyaW5nIiwiY29uc3RydWN0b3JGbiIsImNvbnN0cnVjdG9yTmFtZSIsImdldEZ1bmN0aW9uTmFtZSIsImJ1aWx0aW5zIiwibm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSIsIlByb3h5IiwiUmVmbGVjdCIsIm9yZGVyZWRQcm9wZXJ0aWVzIiwic3RyaW5nRGlzdGFuY2UiLCJwcm94eUdldHRlciIsInN0ckEiLCJzdHJCIiwibWVtbyIsIm1heCIsIm1pbiIsImZuTGVuZ3RoRGVzYyIsImFzc2VydGlvbk5hbWUiLCJpc0NoYWluYWJsZSIsInByb3RvIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUFBO0tBQUNDLGFBR2lCO0FBRmxCQyxRQUFRQyxJQUFJLEtBQUNGO0FBQ2IsS0FBQ0csTUFBTSxLQUFDQyxNQUFNQyxPQUFPQztBQUNyQkMsTUFBTUMsTUFBTTtBQUNaRCxNQUFNRSxLQUFLO0FBQ1hGLE1BQU1HLFFBQVE7QUFDZCxLQUFvQkwsT0FBT00sU0FBU0MsVUFBcENMO01BQU1NOztBQUNOZCxPQVlPO0FBWFBBLEtBQUtlLElBYUk7QUFa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QUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUUvQ3JDLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0NyQyxJQUFJcUs7QUFDSi9MLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUUvQ3JDLElBQUk2SixNQUFNLFdBQVc7QUFDckJ2TCxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0NyQyxJQUFJcUs7QUFDSi9MLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUUvQ3JDLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0NyQyxJQUFJcUs7QUFDSi9MLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUUvQ3JDLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0NyQyxJQUFJcUs7T0FDSi9MLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOzs7QUFHaER4QyxLQUFLLHVGQUF1RjtBQUMzRnFLO1FBQVEzSTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUNsQ2lJLGVBQWU7QUFDZkMsVUFBVS9NLElBQUl3QyxJQUFJeUQ7T0FDakJtQjtPQUFPO09BQUssRUFBRTBGOzs7O0FBRWZ0SyxNQUFNeEMsSUFBSXdDLElBQUl5RDtPQUNibUI7T0FBTztPQUFLLEVBQUVzRixNQUFNM0k7O0FBQ3BCNEksU0FBUztBQUNUdEYsUUFBUTtPQUFLLEVBQUVxRixNQUFNekk7O0FBQ3JCbUgsVUFBVTtPQUFLLEVBQUVzQixNQUFNdEk7O0FBQ3ZCc0gsUUFDQ2lCO1NBQVM7QUFDVHZCLFVBQVU7T0FBSyxFQUFFc0IsTUFBTXBJOzs7QUFDeEJxSCxVQUNDdEU7UUFBUTtPQUFLLEVBQUVxRixNQUFNbEk7O0FBQ3JCNEcsVUFBVTtPQUFLLEVBQUVzQixNQUFNL0g7O0FBQ3ZCaUksUUFDQ3hGO09BQU87T0FBSyxFQUFFc0YsTUFBTTdIOzs7Ozs7QUFFdkJyQyxJQUFJMkQsU0FBUzRHO0FBQ2JqTSxPQUFPZ00sY0FBY2hMLEdBQUdDLE1BQU07QUFDOUJqQixPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0NrSSxRQUFRRjtBQUNSL0wsT0FBT2dNLGNBQWNoTCxHQUFHQyxNQUFNO0FBQzlCakIsT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSXJJO0dBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9Da0ksUUFBUUYsWUFBWTtBQUNwQi9MLE9BQU9nTSxjQUFjaEwsR0FBR0MsTUFBTTtBQUM5QmpCLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUUvQ3JDLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0NrSSxRQUFRRjtBQUNSL0wsT0FBT2dNLGNBQWNoTCxHQUFHQyxNQUFNO0FBQzlCakIsT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSXJJO0dBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9Da0ksUUFBUUYsWUFBWTtBQUNwQi9MLE9BQU9nTSxjQUFjaEwsR0FBR0MsTUFBTTtPQUM5QmpCLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOzs7QUFHaER4QyxLQUFLLHlGQUF5RjtBQUM3RnFLO1FBQVEzSTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUN0QnRFLElBQUl3QyxJQUNIeUQ7T0FDQ21CO09BQU87T0FBSyxFQUFFc0YsTUFBTTNJOztBQUNwQjRJLFNBQVM7QUFDVHRGLFFBQVE7T0FBSyxFQUFFcUYsTUFBTXpJOzs7O0FBRXZCakUsSUFBSXdDLElBQ0h3SztnQkFBZ0I7QUFDaEIvRyxPQUNDbUI7T0FBTztPQUFLLEVBQUVzRixNQUFNdEk7O0FBQ3BCdUksU0FBUztBQUNUdEYsUUFBUTtPQUFLLEVBQUVxRixNQUFNcEk7Ozs7QUFFdkJ4RCxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJckk7R0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFbkN0RSxJQUFJRSxRQUFRc0osS0FBSztBQUNqQjFJLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUlySTtHQUFFO0FBQUVFLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUVuQ3RFLElBQUlFLFFBQVFzSixLQUFLO09BQ2pCMUksT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSXJJO0dBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7OztBQUdwQ2pDLEtBQUssMkZBQTJGO0FBQy9GcUc7UUFBUXpJLElBQUlnRyxNQUFNakM7T0FBTWlKO1dBQVU7OztBQUNsQ3ZFLE9BQU96SSxJQUFJdUMsSUFBSTBCO1dBQVU7QUFBVStCLE9BQU07QUFBQ21CLE9BQU07QUFBS0MsUUFBTzs7R0FBTWxCLFNBQVNwRjtBQUMzRTRILE9BQU8xSSxJQUFJdUMsSUFBSTBCO1dBQVU7QUFBVStCLE9BQU07QUFBQ21CLE9BQU07QUFBS0MsUUFBTzs7QUFBTTZGLFlBQVc7R0FBTS9HLFNBQVNwRjtBQUU1RkQsT0FBTzRILEtBQUt6QyxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzZILEtBQUsxQyxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBRXBDa0UsTUFBTUUsU0FBU2hGLFNBQVNnTTtBQUN4QnJNLE9BQU80SCxLQUFLekMsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU82SCxLQUFLMUMsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUVwQ2pCLE9BQU80SCxLQUFLMEUsS0FBSyxhQUFZLE1BQU0xRSxLQUFLMEUsS0FBSyxhQUFZLE1BQU10TCxHQUFHVyxHQUFFO0FBQ3BFM0IsT0FBTzZILEtBQUt5RSxLQUFLLGFBQVksTUFBTXpFLEtBQUt5RSxLQUFLLGFBQVksTUFBTXRMLEdBQUdXLEdBQUU7QUFFcEVpRyxLQUFLekMsTUFBTSxTQUFTO09BQUs7O0FBQ3pCMEMsS0FBSzFDLE1BQU0sU0FBUztPQUFLOztBQUN6QnlDLEtBQUt6QyxNQUFNLFVBQVU7QUFDckIwQyxLQUFLMUMsTUFBTSxVQUFVO0FBQ3JCbkYsT0FBTzRILEtBQUswRSxLQUFLLFVBQVN2SixJQUFJL0IsR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU82SCxLQUFLeUUsS0FBSyxVQUFTdkosSUFBSS9CLEdBQUdDLE1BQU07QUFDdkNqQixPQUFPNEgsS0FBSzBFLEtBQUssVUFBU3ZKLElBQUkvQixHQUFHc0csUUFBUTtBQUN6Q3RILE9BQU82SCxLQUFLeUUsS0FBSyxVQUFTdEwsR0FBR3NHLFFBQVE7QUFDckN0SCxPQUFPNEgsS0FBSzBFLEtBQUssVUFBU3ZKLElBQUkvQixHQUFHc0csUUFBUTtBQUN6Q3RILE9BQU82SCxLQUFLeUUsS0FBSyxVQUFTdEwsR0FBR3NHLFFBQVE7QUFDckN0SCxPQUFPNEgsS0FBS3pDLE1BQU0sVUFBU25FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPNkgsS0FBSzFDLE1BQU0sVUFBU25FLEdBQUdDLE1BQU07T0FDcENrRSxNQUFNb0g7O0FBR1BoTCxLQUFLLHdEQUF3RDtBQUM1REc7TUFBTXhDLElBQUl3QyxNQUFNMkQsU0FBU3BGO0FBQ3pCRCxPQUFPMEIsSUFBSXlELE1BQU0sWUFBWW5FLEdBQUdDLE1BQU07QUFFdENTLElBQUk4SztBQUNKeE0sT0FBTzBCLElBQUl5RCxNQUFNLFlBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJK0s7QUFDSnpNLE9BQU8wQixJQUFJeUQsTUFBTSxZQUFZbkUsR0FBR0MsTUFBTTtBQUV0Q1MsSUFBSStLO09BQ0p6TSxPQUFPMEIsSUFBSXlELE1BQU0sWUFBWW5FLEdBQUdDLE1BQU07O0FBR3ZDTSxLQUFLLHVIQUF1SDtBQUMzSEc7TUFBTXhDLElBQUl3QyxJQUFJeUQ7T0FBTUM7U0FBUTs7R0FBVUMsU0FBU3BGO0FBQy9DRCxPQUFPMEIsSUFBSXlELE1BQU0sWUFBWW5FLEdBQUdDLE1BQU07QUFFdENTLElBQUk4SztBQUNKeE0sT0FBTzBCLElBQUl5RCxNQUFNLFlBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJK0s7QUFDSnpNLE9BQU8wQixJQUFJeUQsTUFBTSxZQUFZbkUsR0FBR0MsTUFBTTtBQUV0Q1MsSUFBSThLO0FBQ0o5SyxJQUFJK0ssS0FBSztPQUNUek0sT0FBTzBCLElBQUl5RCxNQUFNLFlBQVluRSxHQUFHQyxNQUFNOztPQUd2Q00sS0FBSyxnQkFBZ0I7QUFDcEJtTDtNQUFNeE4sSUFDTCxDQUFDLFFBQ0FpRztPQUNDQztTQUFTO0FBQ1RrQixPQUFPO0FBQ1BDLFFBQVE7QUFDUnFFLFFBQ0N0RTtPQUFPO0FBQ1BDLFFBQVE7OztJQUVWbEIsU0FBU3BGO0FBRVhELE9BQU8wTSxJQUFJdkgsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wTSxJQUFJdkgsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUVwQ3lMLElBQUluQixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPME0sSUFBSXZILE1BQU0sVUFBU25FLEdBQUdDLE1BQU07T0FDbkNqQixPQUFPME0sSUFBSXZILE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07OztBQUt0Q0ssTUFBTSxTQUFTO0FBQ2RDLEtBQUssMklBQTJJO0FBQy9JRztNQUFNeEMsSUFBSXdDO0FBRVYxQixPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFFL0JELElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFFL0JELElBQUk2SixNQUFNLFNBQVM7QUFDbkI3SixJQUFJNkosTUFBTSxXQUFXO0FBQ3JCdkwsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBRWpDRCxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBRWpDRCxJQUFJNkosTUFBTSxVQUFVO0FBQ3BCN0osSUFBSTZKLE1BQU0sU0FBUztBQUNuQnZMLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR1csR0FBRTtPQUMvQjNCLE9BQU8wQixJQUFJNkosTUFBTSxTQUFRdkssR0FBR1csR0FBRTs7QUFHL0JKLEtBQUsscUZBQXFGO0FBQ3pGRztNQUFNeEMsSUFBSXdDO0FBRVYxQixPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFFL0JTLElBQUk2SixNQUFNdko7R0FBRTtBQUFLMkssR0FBRTs7QUFDbkIzTSxPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFFL0JTLElBQUk2SixNQUFNb0I7R0FBRTtBQUFNQyxHQUFFOztBQUNwQjVNLE9BQU8wQixJQUFJNkosTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUMvQmpCLE9BQU8wQixJQUFJNkosTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtPQUMvQmpCLE9BQU8wQixJQUFJNkosTUFBTSxNQUFLdkssR0FBR0MsTUFBTTs7QUFHaENNLEtBQUssc0VBQXNFO0FBQzFFSjtLQUFLaEMsSUFBSXVDO0FBQ1QxQixPQUFPbUIsR0FBR29LLFNBQVN2SyxHQUFHc0ssSUFBSTtBQUUxQm5LLEdBQUdvSyxNQUFNLFNBQVM7QUFDbEJwSyxHQUFHb0ssTUFBTSxXQUFXO0FBQ3BCdkwsT0FBT21CLEdBQUdvSyxTQUFTdkssR0FBR3NLLElBQUksQ0FBQyxTQUFRO0FBRW5DbkssR0FBR29LLE1BQU0sU0FBUztBQUNsQnZMLE9BQU9tQixHQUFHb0ssU0FBU3ZLLEdBQUdzSyxJQUFJLENBQUM7QUFFM0JuSyxHQUFHb0ssTUFBTSxTQUFTO09BQ2xCdkwsT0FBT21CLEdBQUdvSyxTQUFTdkssR0FBR3NLLElBQUksQ0FBQyxXQUFVOztBQUd0Qy9KLEtBQUsseURBQXlEO0FBQzdERztNQUFNeEMsSUFBSXdDO0FBRVZBLElBQUk2SixNQUFNLFNBQVM7QUFDbkI3SixJQUFJNkosTUFBTSxTQUFTO0FBQ25CN0osSUFBSTZKLE1BQU0sV0FBVztBQUNyQnZMLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUMvQjNCLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUMvQjNCLE9BQU8wQixJQUFJNkosTUFBTSxZQUFXdkssR0FBR1csR0FBRTtBQUVqQ0QsSUFBSW1MO0FBQ0o3TSxPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDL0IzQixPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7T0FDL0IzQixPQUFPMEIsSUFBSTZKLE1BQU0sWUFBV3ZLLEdBQUdXLEdBQUU7O0FBR2xDSixLQUFLLGtEQUFrRDtBQUN0REc7TUFBTXZDLElBQUl1QztBQUNWMUIsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJb0wsWUFBWTtBQUNoQjlNLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSW9MLFlBQVk7QUFDaEI5TSxPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07QUFFbkNTLElBQUlvTCxZQUFZO09BQ2hCOU0sT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHQyxNQUFNOztBQUdwQ00sS0FBSyx1RkFBdUY7QUFDM0Y0RTtNQUFNakgsSUFBSXdDLElBQUl5RDtPQUNiNEg7T0FDQ3pHO09BQU87QUFDUEMsUUFBUTs7QUFDVHFFLFFBQ0N0RTtPQUFPO0FBQ1AwRyxXQUFXOztBQUNabkMsVUFDQ3ZFO09BQU87QUFDUDJHLFlBQVk7Ozs7QUFFZHZMLElBQUkyRCxTQUFTcEY7QUFDYmtHLGdCQUFnQkMsaUJBQWlCMUUsSUFBSVA7QUFDckNuQixPQUFPbUcsY0FBY0csT0FBT3RGLEdBQUdDLE1BQU07QUFDckNqQixPQUFPbUcsY0FBY0ksUUFBUXZGLEdBQUdDLE1BQU07QUFDdENqQixPQUFPbUcsY0FBYzZHLFdBQVdoTSxHQUFHQyxNQUFNO0FBQ3pDakIsT0FBT21HLGNBQWM4RyxZQUFZak0sR0FBR0MsTUFBTTtBQUUxQ1MsSUFBSTZKLE1BQU0sU0FBUztBQUNuQnZMLE9BQU9tRyxjQUFjRyxPQUFPdEYsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU9tRyxjQUFjSSxRQUFRdkYsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9tRyxjQUFjNkcsV0FBV2hNLEdBQUdDLE1BQU07QUFDekNqQixPQUFPbUcsY0FBYzhHLFlBQVlqTSxHQUFHQyxNQUFNO0FBRTFDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNO0FBQ3JDakIsT0FBT21HLGNBQWNJLFFBQVF2RixHQUFHQyxNQUFNO0FBQ3RDakIsT0FBT21HLGNBQWM2RyxXQUFXaE0sR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU9tRyxjQUFjOEcsWUFBWWpNLEdBQUdDLE1BQU07QUFFMUNTLElBQUk2SixNQUFNLFNBQVM7QUFDbkI3SixJQUFJNkosTUFBTSxXQUFXO0FBQ3JCdkwsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNO0FBQ3JDakIsT0FBT21HLGNBQWNJLFFBQVF2RixHQUFHQyxNQUFNO0FBQ3RDakIsT0FBT21HLGNBQWM2RyxXQUFXaE0sR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU9tRyxjQUFjOEcsWUFBWWpNLEdBQUdDLE1BQU07QUFFMUNTLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPbUcsY0FBY0csT0FBT3RGLEdBQUdDLE1BQU07QUFDckNqQixPQUFPbUcsY0FBY0ksUUFBUXZGLEdBQUdDLE1BQU07QUFDdENqQixPQUFPbUcsY0FBYzZHLFdBQVdoTSxHQUFHQyxNQUFNO09BQ3pDakIsT0FBT21HLGNBQWM4RyxZQUFZak0sR0FBR0MsTUFBTTs7QUFHM0NNLEtBQUssMEZBQTBGO0FBQzlGNEU7TUFBTWpILElBQUl3QyxJQUNUd0w7ZUFDQ0M7T0FBTztBQUFDOUUsSUFBRztBQUFlVixLQUFJOztBQUM5QnlGLFNBQVM7O0FBQ1ZqSSxPQUNDNEg7T0FBUXpHO09BQU87O0FBQ2ZzRSxRQUFTdEU7T0FBTzs7QUFDaEJ1RSxVQUFVdkU7T0FBTzs7O0dBQ2pCakIsU0FBU3BGO0FBQ1hrRyxnQkFBZ0JDLGlCQUFpQjFFLElBQUlQO0FBRXJDbkIsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNO0FBRXJDUyxJQUFJZ0gsS0FBSztBQUNUMUksT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNO0FBRXJDUyxJQUFJZ0gsS0FBSztBQUNUMUksT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNO0FBRXJDUyxJQUFJZ0gsS0FBSztBQUNUMUksT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNO0FBRXJDUyxJQUFJNkosTUFBTSxXQUFXO09BQ3JCdkwsT0FBT21HLGNBQWNHLE9BQU90RixHQUFHQyxNQUFNOztBQUd0Q00sS0FBSyxxRkFBcUY7QUFDekZxRztPQUFPMUksSUFBSXdDLElBQUl5RDtPQUFNO0FBQUNrSSxRQUFRakk7U0FBUTs7OztBQUN0Q3lDLE9BQU8zSSxJQUFJd0MsSUFBSXlEO09BQU07QUFBQ21JLFFBQVFsSTtTQUFROzs7O0FBRXRDcEYsT0FBTzRILEtBQUsyRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzZILEtBQUswRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBRXBDMkcsS0FBS3pHLEdBQUdxSCxVQUFVO0FBQ2xCWCxLQUFLMUcsR0FBR3FILFVBQVU7QUFDbEJ4SSxPQUFPNEgsS0FBSzJELE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07QUFDcENqQixPQUFPNkgsS0FBSzBELE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07QUFFcEMyRyxLQUFLekcsR0FBR3FILFVBQVU7QUFDbEJYLEtBQUsxRyxHQUFHcUgsVUFBVTtBQUNsQnhJLE9BQU80SCxLQUFLMkQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU82SCxLQUFLMEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUVwQzJHLEtBQUt6RyxHQUFHcUgsVUFBVTtBQUNsQlgsS0FBSzFHLEdBQUdxSCxVQUFVO0FBQ2xCeEksT0FBTzRILEtBQUsyRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzZILEtBQUswRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBRXBDMkcsS0FBS3pHLEdBQUdxSCxVQUFVO0FBQ2xCWCxLQUFLMUcsR0FBR3FILFVBQVU7QUFDbEJ4SSxPQUFPNEgsS0FBSzJELE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07T0FDcENqQixPQUFPNkgsS0FBSzBELE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07O0FBR3JDTSxLQUFLLG1JQUFtSTtBQUN2SWdNO29CQUF1QnJPLElBQUl3QyxNQUFNOEwscUJBQXdCLHVCQUEwQjtBQUNuRjVGLE9BQU8xSSxJQUFJd0MsSUFBSXlEO09BQU07QUFBQ2tJLFFBQVFqSTtTQUFROzs7O0FBQ3RDeUMsT0FBTzNJLElBQUl3QyxJQUFJeUQ7T0FBTTtBQUFDbUksUUFBUWxJO1NBQVE7Ozs7QUFDdEN3QyxLQUFLMkYsbUJBQW1CO0FBQ3hCMUYsS0FBSzBGLG1CQUFtQjtBQUV4QnZOLE9BQU80SCxLQUFLMkQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU82SCxLQUFLMEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUVwQzJHLEtBQUt6RyxHQUFHcUgsVUFBVTtBQUNsQlgsS0FBSzFHLEdBQUdxSCxVQUFVO0FBQ2xCeEksT0FBTzRILEtBQUsyRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzZILEtBQUswRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBRXBDMkcsS0FBS3pHLEdBQUdxSCxVQUFVO0FBQ2xCWCxLQUFLMUcsR0FBR3FILFVBQVU7QUFDbEJ4SSxPQUFPNEgsS0FBSzJELE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07QUFDcENqQixPQUFPNkgsS0FBSzBELE1BQU0sVUFBU3ZLLEdBQUdDLE1BQU07QUFFcEMyRyxLQUFLekcsR0FBR3FILFVBQVU7QUFDbEJYLEtBQUsxRyxHQUFHcUgsVUFBVTtBQUNsQnhJLE9BQU80SCxLQUFLMkQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU82SCxLQUFLMEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUVwQzJHLEtBQUt6RyxHQUFHcUgsVUFBVTtBQUNsQlgsS0FBSzFHLEdBQUdxSCxVQUFVO0FBQ2xCeEksT0FBTzRILEtBQUsyRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO09BQ3BDakIsT0FBTzZILEtBQUswRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNOztBQUdyQ00sS0FBSyxzR0FBc0c7QUFDMUdHO01BQU14QyxJQUFJd0MsSUFBSXlEO09BQ2I0SDtPQUNDekc7T0FBTztBQUNQQyxRQUFRO0FBQ1JDLGlCQUFpQjs7QUFDbEI2RyxRQUNDL0c7T0FBTztBQUNQMEcsV0FBVztBQUNYeEcsaUJBQWlCOztBQUNsQjhHLFFBQ0NoSDtPQUFPO0FBQ1BFLGlCQUFpQjs7OztBQUVuQjlFLElBQUkyRCxTQUFTcEY7QUFDYkQsT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLFNBQVM7QUFDdENuRixPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sVUFBVTtBQUN2Q25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxhQUFhO0FBQzFDbkYsT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLG1CQUFtQjtBQUNoRG5GLE9BQU8wQixJQUFJUCxHQUFHZ0UsTUFBTTZILFdBQVdoTSxHQUFHQyxNQUFNO0FBRXhDUyxJQUFJZ0gsS0FBSztBQUNUMUksT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLFNBQVM7QUFDdENuRixPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sVUFBVTtBQUN2Q25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxhQUFhO0FBQzFDbkYsT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLG1CQUFtQjtBQUNoRG5GLE9BQU8wQixJQUFJUCxHQUFHZ0UsTUFBTTZILFdBQVdoTSxHQUFHQyxNQUFNO0FBRXhDUyxJQUFJZ0gsS0FBSztBQUNUMUksT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLFNBQVM7QUFDdENuRixPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sVUFBVTtBQUN2Q25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxhQUFhO0FBQzFDbkYsT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLG1CQUFtQjtBQUNoRG5GLE9BQU8wQixJQUFJUCxHQUFHZ0UsTUFBTTZILFdBQVdoTSxHQUFHQyxNQUFNO0FBRXhDUyxJQUFJZ0gsS0FBSztBQUNUaEgsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxTQUFTO0FBQ3RDbkYsT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLFVBQVU7QUFDdkNuRixPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sYUFBYTtBQUMxQ25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxtQkFBbUI7QUFDaERuRixPQUFPMEIsSUFBSVAsR0FBR2dFLE1BQU02SCxXQUFXaE0sR0FBR0MsTUFBTTtBQUV4Q1MsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxTQUFTO0FBQ3RDbkYsT0FBTzBCLElBQUlQLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLFVBQVU7QUFDdkNuRixPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sYUFBYTtBQUMxQ25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxtQkFBbUI7T0FDaERuRixPQUFPMEIsSUFBSVAsR0FBR2dFLE1BQU02SCxXQUFXaE0sR0FBR0MsTUFBTTs7QUFHekNNLEtBQUssZ0pBQWdKO0FBQ3BKNEU7TUFBTWpILElBQUl3QyxJQUFJeUQ7T0FDYm1CO09BQU87QUFDUEMsUUFBUTtBQUNSOEcsUUFDQy9HO09BQU87QUFDUEMsUUFBUTs7OztBQUVWN0UsSUFBSTJELFNBQVNwRjtBQUNia0csZ0JBQWdCQyxpQkFBaUIxRSxJQUFJUDtBQUNyQ25CLE9BQU9tRyxjQUFjRyxPQUFPdEYsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU9tRyxjQUFjSSxRQUFRdkYsR0FBR0MsTUFBTTtBQUV0Q1MsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU9tRyxjQUFjRyxPQUFPdEYsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU9tRyxjQUFjSSxRQUFRdkYsR0FBR0MsTUFBTTtBQUV0Q1MsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU9tRyxjQUFjRyxPQUFPdEYsR0FBR0MsTUFBTTtPQUNyQ2pCLE9BQU9tRyxjQUFjSSxRQUFRdkYsR0FBR0MsTUFBTTs7QUFHdkNNLEtBQUssMkZBQTJGO0FBQy9GNEU7TUFBTWpILElBQUl3QyxJQUFJeUQ7T0FDYm1CO09BQU87QUFDUCtHLFFBQ0MvRztPQUFPO0FBQ1BDLFFBQVE7Ozs7QUFFVjdFLElBQUkyRCxTQUFTcEY7QUFDYmtHLGdCQUFnQkMsaUJBQWlCMUUsSUFBSVA7QUFDckNuQixPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sU0FBUztBQUN0Q25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbkYsT0FBTzBCLElBQUlQLEdBQUdnRSxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFFckNTLElBQUlnSCxLQUFLO0FBQ1QxSSxPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sU0FBUztBQUN0Q25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbkYsT0FBTzBCLElBQUlQLEdBQUdnRSxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFFckNTLElBQUlnSCxLQUFLO0FBQ1QxSSxPQUFPMEIsSUFBSVAsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sU0FBUztBQUN0Q25GLE9BQU8wQixJQUFJUCxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxVQUFVO09BQ3ZDbkYsT0FBTzBCLElBQUlQLEdBQUdnRSxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07O0FBR3RDTSxLQUFLLDRJQUE0STtBQUNoSjRFO01BQU1qSCxJQUFJd0MsSUFBSXlEO09BQ2JtQjtPQUFPO0FBQ1ArRyxRQUNDL0c7T0FBTztBQUNQQyxRQUFROztBQUNUK0csUUFDQy9HO1FBQVE7Ozs7QUFFVjdFLElBQUkyRCxTQUFTcEY7QUFDYmtHLGdCQUFnQkMsaUJBQWlCMUUsSUFBSVA7QUFDckNuQixPQUFPbUcsY0FBY0csT0FBT3RGLEdBQUdDLE1BQU07QUFDckNqQixPQUFPbUcsY0FBY0ksUUFBUXZGLEdBQUdDLE1BQU07QUFFdENTLElBQUlnSCxLQUFLO0FBQ1QxSSxPQUFPbUcsY0FBY0csT0FBT3RGLEdBQUdDLE1BQU07QUFDckNqQixPQUFPbUcsY0FBY0ksUUFBUXZGLEdBQUdDLE1BQU07QUFFdENTLElBQUlnSCxLQUFLO0FBQ1QxSSxPQUFPbUcsY0FBY0csT0FBT3RGLEdBQUdDLE1BQU07QUFDckNqQixPQUFPbUcsY0FBY0ksUUFBUXZGLEdBQUdDLE1BQU07QUFFdENTLElBQUlnSCxLQUFLO0FBQ1QxSSxPQUFPbUcsY0FBY0csT0FBT3RGLEdBQUdDLE1BQU07QUFDckNqQixPQUFPbUcsY0FBY0ksUUFBUXZGLEdBQUdDLE1BQU07QUFFdENTLElBQUlnSCxLQUFLO0FBQ1RoSCxJQUFJZ0gsS0FBSztBQUNUaEgsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU9tRyxjQUFjRyxPQUFPdEYsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU9tRyxjQUFjSSxRQUFRdkYsR0FBR0MsTUFBTTtBQUV0Q1MsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU9tRyxjQUFjRyxPQUFPdEYsR0FBR0MsTUFBTTtPQUNyQ2pCLE9BQU9tRyxjQUFjSSxRQUFRdkYsR0FBR0MsTUFBTTs7QUFHdkNNLEtBQUssK0ZBQStGO0FBQ25HMEI7T0FBTy9ELElBQUl3QztBQUNYdUIsSUFBSS9ELElBQUl3QyxNQUFNMkQsU0FBU29JO0FBQ3ZCdEssSUFBSWpFLElBQUl3QyxNQUFNMkQsU0FBU3BDO0FBQ3ZCSyxJQUFJcEUsSUFBSXdDLElBQUlnTTtxQkFBb0I7R0FBT3JJLFNBQVNwQztBQUVoRGpELE9BQU95TixLQUFLbEMsTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUNoQzNCLE9BQU9pRCxFQUFFc0ksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUM3QjNCLE9BQU9tRCxFQUFFb0ksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUM3QjNCLE9BQU9zRCxFQUFFaUksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUU3QjhMLEtBQUtsQyxNQUFNLFNBQVM7QUFDcEJ2TCxPQUFPeU4sS0FBS2xDLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDaEMzQixPQUFPaUQsRUFBRXNJLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDN0IzQixPQUFPbUQsRUFBRW9JLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDN0IzQixPQUFPc0QsRUFBRWlJLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFFN0I4TCxLQUFLMUksUUFBUTJJLHNCQUFzQjtBQUNuQ0QsS0FBS2xDLE1BQU0sU0FBUztBQUNwQnZMLE9BQU95TixLQUFLbEMsTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUNoQzNCLE9BQU9pRCxFQUFFc0ksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUM3QjNCLE9BQU9tRCxFQUFFb0ksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUM3QjNCLE9BQU9zRCxFQUFFaUksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUU3QjhMLEtBQUtsQyxNQUFNLFNBQVM7QUFDcEJrQyxLQUFLMUksUUFBUTJJLHNCQUFzQjtBQUNuQ3pLLEVBQUU4QixRQUFRMkksc0JBQXNCO0FBQ2hDRCxLQUFLbEMsTUFBTSxTQUFTO0FBQ3BCdkwsT0FBT3lOLEtBQUtsQyxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQ2hDM0IsT0FBT2lELEVBQUVzSSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQzdCM0IsT0FBT21ELEVBQUVvSSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO09BQzdCM0IsT0FBT3NELEVBQUVpSSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFOztBQUc5QkosS0FBSyx3RUFBd0U7QUFDNUVHO01BQU14QyxJQUFJd0MsSUFBSXlEO09BQ2I0SDtPQUNDekc7T0FBTztBQUNQQyxRQUFRO0FBQ1IrRCxVQUFVOztBQUNYd0IsUUFDQ3hCO1VBQVU7QUFDVi9ELFFBQVE7O0FBRVRxRSxRQUNDdEU7T0FBTztBQUNQZ0UsVUFBVTtBQUNWTyxVQUNDdEU7UUFBUTtBQUNSK0QsVUFBVTtBQUNWd0IsUUFDQ3hGO09BQU87QUFDUEMsUUFBUTs7OztBQUNYc0UsVUFDQ3ZFO09BQU87Ozs7QUFFVDVFLElBQUkyRCxTQUFTcEY7QUFDYkQsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxXQUFXO0FBQ3JCdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO09BQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNOztBQUd2Q00sS0FBSyxtRkFBbUY7QUFDdkZHO01BQU14QyxJQUFJd0MsTUFBTTJELFNBQVNwRjtBQUN6QjBOLFFBQVFqTSxJQUFJa007QUFDWkMsUUFBUW5NLElBQUlrTTtBQUVaNU4sT0FBTzJOLE9BQU8zTSxHQUFHVyxHQUFHQyxXQUFXa007QUFDL0I5TixPQUFPNk4sT0FBTzdNLEdBQUdXLEdBQUdDLFdBQVdrTTtBQUMvQjlOLE9BQU8yTixPQUFPM00sR0FBR3NLLElBQUl1QztBQUdyQm5NLElBQUl5RCxNQUFNLFNBQVM7QUFDbkI0SSxRQUFRck0sSUFBSWtNO0FBQ1o1TixPQUFPK04sT0FBTy9NLEdBQUdXLEdBQUdDLFdBQVdrTTtBQUMvQjlOLE9BQU8yTixPQUFPM00sR0FBR3NLLElBQUl1QztBQUNyQjdOLE9BQU8yTixPQUFPNUssSUFBSS9CLEdBQUdzSyxJQUFJeUM7QUFDekIvTixPQUFPMk4sTUFBTXJILE9BQU92RCxJQUFJL0IsR0FBR0MsTUFBTTtBQUNqQ2pCLE9BQU82TixNQUFNdkgsT0FBT3ZELElBQUkvQixHQUFHQyxNQUFNO09BQ2pDakIsT0FBTytOLE1BQU16SCxPQUFPdEYsR0FBR0MsTUFBTTs7QUFHOUJNLEtBQUssdUZBQXVGO0FBQzNGRztTQUFTeEMsSUFBSXdDLE1BQU0yRCxTQUFTcEY7QUFDNUJ5QixNQUFNeEMsSUFBSXdDLE1BQU0yRCxTQUFTaEU7QUFFekJBLE9BQU84RCxNQUFNbUI7T0FBTTs7QUFDbkI1RSxJQUFJeUQsTUFBTW1CO09BQU07O0FBQ2hCdEcsT0FBTzBCLElBQUk0RSxPQUFPdEYsR0FBR0MsTUFBTTtBQUUzQlMsSUFBSXlELE1BQU1tQjtPQUFNOztBQUNoQnRHLE9BQU8wQixJQUFJNEUsT0FBT3RGLEdBQUdDLE1BQU07QUFFM0JTLElBQUl5RCxNQUFNbUI7T0FBTTs7T0FDaEJ0RyxPQUFPMEIsSUFBSTRFLE9BQU90RixHQUFHQyxNQUFNOztBQUc1Qk0sS0FBSyx5RkFBeUY7QUFDN0ZHO1NBQVN4QyxJQUFJd0MsTUFBTTJELFNBQVNwRjtBQUM1QnlCLE1BQU14QyxJQUFJd0MsTUFBTTJELFNBQVNoRTtBQUV6QkEsT0FBTzhELE1BQU1vQjtRQUFPOztBQUNwQjdFLElBQUl5RCxNQUFNb0I7UUFBTzs7QUFDakJ2RyxPQUFPMEIsSUFBSTZFLFFBQVF2RixHQUFHQyxNQUFNO0FBRTVCUyxJQUFJeUQsTUFBTW9CO1FBQU87O0FBQ2pCdkcsT0FBTzBCLElBQUk2RSxRQUFRdkYsR0FBR0MsTUFBTTtBQUU1QlMsSUFBSXlELE1BQU1vQjtRQUFPOztPQUNqQnZHLE9BQU8wQixJQUFJNkUsUUFBUXZGLEdBQUdDLE1BQU07O0FBRzdCTSxLQUFLLHlFQUF5RTtBQUM3RUc7U0FBU3hDLElBQUl3QyxNQUFNMkQsU0FBU3BGO0FBQzVCeUIsTUFBTXhDLElBQUl3QyxNQUFNMkQsU0FBU2hFO0FBRXpCQSxPQUFPOEQsTUFBTW1CO09BQU07QUFBVUMsUUFBTzs7QUFDcEM3RSxJQUFJeUQsTUFBTW1CO09BQU07QUFBT0MsUUFBTzs7QUFDOUI3RSxJQUFJNEUsUUFBUTVFLElBQUk2RSxTQUFTO0FBQ3pCdkcsT0FBTzBCLElBQUk0RSxPQUFPdEYsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU8wQixJQUFJNkUsUUFBUXZGLEdBQUdDLE1BQU07QUFFNUJTLElBQUk0RSxRQUFRNUUsSUFBSTZFLFNBQVM7QUFDekJ2RyxPQUFPMEIsSUFBSTRFLE9BQU90RixHQUFHQyxNQUFNO0FBQzNCakIsT0FBTzBCLElBQUk2RSxRQUFRdkYsR0FBR0MsTUFBTTtBQUU1QlMsSUFBSTRFLFFBQVE1RSxJQUFJNkUsU0FBUztBQUN6QnZHLE9BQU8wQixJQUFJNEUsT0FBT3RGLEdBQUdDLE1BQU07T0FDM0JqQixPQUFPMEIsSUFBSTZFLFFBQVF2RixHQUFHQyxNQUFNOztBQUc3Qk0sS0FBSyxtR0FBbUc7QUFDdkdHO1NBQVN4QyxJQUFJd0MsTUFBTTJELFNBQVNwRjtBQUM1QnlCLE1BQU14QyxJQUFJd0MsTUFBTTJELFNBQVNoRTtBQUV6QkssSUFBSXlELE1BQU1tQjtPQUFNO0FBQUtDLFFBQU87O0FBQzVCdkcsT0FBTzBCLElBQUlzTSxhQUFhaE4sR0FBR0MsTUFBTTtBQUVqQ1MsSUFBSXlELE1BQU1tQjtPQUFNO0FBQUtDLFFBQU87O0FBQzVCdkcsT0FBTzBCLElBQUlzTSxhQUFhaE4sR0FBR0MsTUFBTTtBQUVqQ1MsSUFBSXlELE1BQU1tQjtPQUFNO0FBQUtDLFFBQU87O0FBQzVCdkcsT0FBTzBCLElBQUlzTSxhQUFhaE4sR0FBR0MsTUFBTTtBQUVqQ1MsSUFBSXlELE1BQU1tQjtPQUFNO0FBQUtDLFFBQU87O09BQzVCdkcsT0FBTzBCLElBQUlzTSxhQUFhaE4sR0FBR0MsTUFBTTs7QUFHbENNLEtBQUssb0dBQW9HO0FBQ3hHRztTQUFTeEMsSUFBSXdDLE1BQU0yRCxTQUFTcEY7QUFDNUJ5QixNQUFNeEMsSUFBSXdDLE1BQU0yRCxTQUFTaEU7QUFFekJLLElBQUl5RCxNQUFNbUI7T0FBTTtBQUFLQyxRQUFPOztBQUM1QnZHLE9BQU8wQixJQUFJdU0sYUFBYWpOLEdBQUdDLE1BQU07QUFFakNTLElBQUl5RCxNQUFNbUI7T0FBTTtBQUFLQyxRQUFPOztBQUM1QnZHLE9BQU8wQixJQUFJdU0sYUFBYWpOLEdBQUdDLE1BQU07QUFFakNTLElBQUl5RCxNQUFNbUI7T0FBTTtBQUFLQyxRQUFPOztBQUM1QnZHLE9BQU8wQixJQUFJdU0sYUFBYWpOLEdBQUdDLE1BQU07QUFFakNTLElBQUl5RCxNQUFNbUI7T0FBTTtBQUFLQyxRQUFPOztPQUM1QnZHLE9BQU8wQixJQUFJdU0sYUFBYWpOLEdBQUdDLE1BQU07O0FBR2xDTSxLQUFLLDBIQUEwSDtBQUM5SDZCO3NCQUFzQjtBQUFLLElBQUcsS0FBQy9CLFFBQUo7T0FBZ0IsS0FBQ0EsT0FBTzhELE1BQU07T0FBOUI7T0FBOEM7OztBQUN6RStJLFNBQVNoUCxJQUFJd0MsSUFBSXlEO09BQU07QUFBQ29CLFFBQU87QUFBUXNGLFNBQVFzQzs7O0FBQy9DdkcsT0FBTzFJLElBQUl3QyxJQUFJeUQ7T0FBTTtBQUFDb0IsUUFBTztBQUFRc0YsU0FBUXNDOztBQUFzQnJELGtCQUFpQjs7QUFDcEZqRCxPQUFPM0ksSUFBSXdDLElBQUl5RDtPQUFNO0FBQUNvQixRQUFPO0FBQVFzRixTQUFRc0M7O0FBQXNCckQsa0JBQWlCOztBQUNwRnNELE9BQU9sUCxJQUFJd0MsSUFBSXlEO09BQU07QUFBQ29CLFFBQU87QUFBUXNGLFNBQVFzQzs7QUFBc0JyRCxrQkFBaUI7O0FBRXBGMUgsWUFBWThLLE9BQU81SSxJQUFJbEMsYUFBYTtBQUNwQ3BELE9BQU9rTyxPQUFPNUksSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNbUM7QUFDdENwRCxPQUFPNEgsS0FBS3RDLElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTW1DO0FBQ3BDcEQsT0FBTzZILEtBQUt2QyxJQUFJbEMsV0FBV3BDLEdBQUdDLE1BQU1tQztBQUNwQ3BELE9BQU9vTyxLQUFLOUksSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNbUM7QUFDcENwRCxPQUFPa08sT0FBTy9NLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFDekNqQixPQUFPNEgsS0FBS3pHLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFDdkNqQixPQUFPNkgsS0FBSzFHLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFDdkNqQixPQUFPb08sS0FBS2pOLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFFdkMyRyxLQUFLdkMsU0FBU3BGO0FBQ2RELE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU82SCxLQUFLMUcsR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU9vTyxLQUFLak4sR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUV2QzRHLEtBQUt3RyxhQUFhcE87QUFDbEJELE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU82SCxLQUFLMUcsR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU9vTyxLQUFLak4sR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUV2Q2hCLFFBQVFTLFlBQVkwTixLQUFLak47QUFDekJuQixPQUFPNEgsS0FBS3pHLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFDdkNqQixPQUFPNkgsS0FBSzFHLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFDdkNqQixPQUFPb08sS0FBS2pOLEdBQUdnRSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFFdkNtTixLQUFLL007QUFDTHJCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU82SCxLQUFLMUcsR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU9vTyxLQUFLak4sR0FBR2dFLE1BQU0wRyxTQUFTN0ssR0FBR0MsTUFBTTtPQUN2Q21OLEtBQUsvSSxTQUFTcEY7O0FBR2ZzQixLQUFLLDBKQUEwSjtBQUM5SnFHO1NBQVMxSSxJQUFJd0MsSUFBSXlEO09BQU07QUFBQzRILE9BQU07QUFBQ3hHLFFBQU87T0FBRTs7O0FBQVN1RixRQUFPO0FBQUN2RixRQUFPO09BQUU7OztBQUFTcUUsUUFBTztBQUFDckUsUUFBTztPQUFFOzs7OztBQUM1RnFCLE9BQU8xSSxJQUFJd0MsSUFBSXlEO09BQU07QUFBQzRILE9BQU07QUFBQ3hHLFFBQU87T0FBRTs7O0FBQVN1RixRQUFPO0FBQUN2RixRQUFPO09BQUU7OztBQUFTcUUsUUFBTztBQUFDckUsUUFBTztPQUFFOzs7O0FBQVV1RSxrQkFBaUI7O0FBRXJIOUssT0FBT2tPLE9BQU8vTSxHQUFHZ0UsTUFBTW9CLFFBQVF2RixHQUFHQyxNQUFNO0FBQ3hDakIsT0FBTzRILEtBQUt6RyxHQUFHZ0UsTUFBTW9CLFFBQVF2RixHQUFHQyxNQUFNO0FBRXRDaU4sT0FBTzNDLE1BQU0sU0FBUztBQUN0QjNELEtBQUsyRCxNQUFNLFNBQVM7QUFDcEJ2TCxPQUFPa08sT0FBTy9NLEdBQUdnRSxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFDeENqQixPQUFPNEgsS0FBS3pHLEdBQUdnRSxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFFdENpTixPQUFPM0MsTUFBTSxTQUFTO0FBQ3RCM0QsS0FBSzJELE1BQU0sU0FBUztBQUNwQnZMLE9BQU9rTyxPQUFPL00sR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUV0Q2lOLE9BQU83SSxTQUFTcEY7QUFDaEIySCxLQUFLdkMsU0FBU3BGO0FBQ2RELE9BQU9rTyxPQUFPL00sR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtPQUN4Q2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTs7QUFHdkNNLEtBQUssd0pBQXdKO0FBQzVKK007aUJBQWlCcFAsSUFBSXdDO0FBQ3JCd00sU0FBU2hQLElBQUl3QyxJQUFJeUQ7T0FBTTtBQUFDb0IsUUFBTyxDQUFDO09BQUU7O0FBQVNxRSxRQUFPQztVQUFTO0FBQUN2RSxPQUFNO09BQUU7Ozs7OztBQUNwRXNCLE9BQU8xSSxJQUFJd0MsSUFBSXlEO09BQU07QUFBQ29CLFFBQU8sQ0FBQztPQUFFOztBQUFTcUUsUUFBT0M7VUFBUztBQUFDdkUsT0FBTTtPQUFFOzs7OztBQUFVd0Usa0JBQWlCOztBQUU3Rm9ELE9BQU8zQyxNQUFNLFNBQVM7QUFDdEIyQyxPQUFPM0MsTUFBTSxXQUFXO0FBQ3hCM0QsS0FBSzJELE1BQU0sU0FBUztBQUNwQjNELEtBQUsyRCxNQUFNLFdBQVc7QUFDdEIzRCxLQUFLMkQsTUFBTSxXQUFXO0FBQ3RCM0QsS0FBS3pDLE1BQU0sY0FBYztBQUV6Qm5GLE9BQU9rTyxPQUFPL00sR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU9rTyxPQUFPL00sR0FBR2dFLE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vSixZQUFZdk4sR0FBR0MsTUFBTTtBQUUxQzJHLEtBQUt2QyxTQUFTaUo7QUFDZHRPLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vSixZQUFZdk4sR0FBR0MsTUFBTTtBQUUxQ3FOLGVBQWVqSixTQUFTcEY7QUFDeEJELE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtPQUNyQ2pCLE9BQU80SCxLQUFLekcsR0FBR2dFLE1BQU1vSixZQUFZdk4sR0FBR0MsTUFBTTs7QUFHM0NNLEtBQUssbUdBQW1HO0FBQ3ZHaU47VUFBVXRQLElBQUl3QztBQUNka0ksVUFBVTFLLElBQUl3QyxJQUFJZ007cUJBQW9COztBQUN0QzlGLE9BQU8xSSxJQUFJd0MsSUFBSSxNQUFNMkQsU0FBU3NFO0FBQzlCOUIsT0FBTzNJLElBQUl3QyxJQUFJLE1BQU0yRCxTQUFTdUU7QUFDOUI0RSxTQUFTdFAsSUFBSW1ELE9BQU9nRCxTQUFTdUM7QUFDN0I2RyxTQUFTdlAsSUFBSW1ELE9BQU9nRCxTQUFTd0M7QUFFN0JELEtBQUs4RztBQUNMOUcsS0FBSzJELE1BQU0sS0FBSztBQUNoQnZMLE9BQU8ySixRQUFRNEIsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU80SCxLQUFLMkQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNoQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUVsQzJHLEtBQUs4RyxVQUFVL0U7QUFDZi9CLEtBQUsyRCxNQUFNLEtBQUs7QUFDaEJ2TCxPQUFPMkosUUFBUTRCLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPNEgsS0FBSzJELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDaENqQixPQUFPd08sT0FBT2pELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFFbEMyRyxLQUFLOEcsVUFBVTtBQUNmOUcsS0FBSzJELE1BQU0sT0FBTztBQUNsQnZMLE9BQU8ySixRQUFRNEIsTUFBTSxRQUFPdkssR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU80SCxLQUFLMkQsTUFBTSxRQUFPdkssR0FBR0MsTUFBTTtBQUNsQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxRQUFPdkssR0FBR0MsTUFBTTtBQUVwQzRHLEtBQUs2RyxVQUFVO0FBQ2Y3RyxLQUFLMEQsTUFBTSxLQUFLO0FBQ2hCdkwsT0FBTzRKLFFBQVEyQixNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzZILEtBQUswRCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ2hDakIsT0FBT3lPLE9BQU9sRCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBRWxDNEcsS0FBSzZHLFVBQVU5RTtBQUNmL0IsS0FBSzBELE1BQU0sS0FBSztBQUNoQnZMLE9BQU80SixRQUFRMkIsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU82SCxLQUFLMEQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNoQ2pCLE9BQU95TyxPQUFPbEQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUVsQzJHLEtBQUs4RyxVQUFVOUU7QUFDZmhDLEtBQUsyRCxNQUFNLEtBQUs7QUFDaEJ2TCxPQUFPMkosUUFBUTRCLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPNEosUUFBUTJCLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPNEgsS0FBSzJELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDaENqQixPQUFPNkgsS0FBSzBELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDaENqQixPQUFPd08sT0FBT2pELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDbENqQixPQUFPeU8sT0FBT2xELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFFbEMyRyxLQUFLOEcsVUFBVTtBQUNmN0csS0FBSzZHLFVBQVUvRTtBQUNmOUIsS0FBSzBELE1BQU0sS0FBSztBQUNoQnZMLE9BQU8ySixRQUFRNEIsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU80SixRQUFRMkIsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU80SCxLQUFLMkQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNoQ2pCLE9BQU82SCxLQUFLMEQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNoQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtPQUNsQ2pCLE9BQU95TyxPQUFPbEQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTs7QUFHbkNNLEtBQUssaUhBQWlIO0FBQ3JIRztNQUFNeEMsSUFBSXdDLElBQUlpTjtrQkFBa0IsQ0FBQyxLQUFJOztBQUNyQ0MsUUFBUTFQLElBQUltRCxPQUFPZ0QsU0FBUzNEO0FBQzVCbU4sUUFBUTNQLElBQUltRCxPQUFPZ0QsU0FBUzNEO0FBQzVCb04sVUFBVTVQLElBQUltRCxPQUFPZ0QsU0FBU3dKO0FBRTlCN08sT0FBTzBCLElBQUk2SixNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQy9CakIsT0FBTzRPLE1BQU1yRCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ2pDakIsT0FBTzZPLE1BQU10RCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ2pDakIsT0FBTzhPLFFBQVF2RCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJNkosTUFBTSxLQUFLO0FBQ2Z2TCxPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPNE8sTUFBTXJELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDakNqQixPQUFPNk8sTUFBTXRELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDakNqQixPQUFPOE8sUUFBUXZELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFFbkNTLElBQUk2SixNQUFNLEtBQUs7QUFDZnZMLE9BQU8wQixJQUFJNkosTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUMvQmpCLE9BQU80TyxNQUFNckQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNqQ2pCLE9BQU82TyxNQUFNdEQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUNqQ2pCLE9BQU84TyxRQUFRdkQsTUFBTSxNQUFLdkssR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSTZKLE1BQU0sS0FBSztBQUNmdkwsT0FBTzBCLElBQUk2SixNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQy9CakIsT0FBTzRPLE1BQU1yRCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ2pDakIsT0FBTzZPLE1BQU10RCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ2pDakIsT0FBTzhPLFFBQVF2RCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJNkosTUFBTSxLQUFLO0FBQ2Z2TCxPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPNE8sTUFBTXJELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDakNqQixPQUFPNk8sTUFBTXRELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDakNqQixPQUFPOE8sUUFBUXZELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFFbkM0TixNQUFNdEQsTUFBTSxLQUFLO0FBQ2pCdkwsT0FBTzZPLE1BQU10RCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBQ2pDakIsT0FBTzhPLFFBQVF2RCxNQUFNLE1BQUt2SyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJNkosTUFBTSxLQUFLO0FBQ2Z2TCxPQUFPMEIsSUFBSTZKLE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPNk8sTUFBTXRELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07T0FDakNqQixPQUFPOE8sUUFBUXZELE1BQU0sTUFBS3ZLLEdBQUdDLE1BQU07O0FBR3BDTSxLQUFLLGtJQUFrSTtBQUN0SWlOO1VBQVV0UCxJQUFJdUQsUUFBUSxNQUNyQnNNLGFBQWE3UCxJQUFJd0MsSUFBSSxNQUNwQjhNLFNBQVN0UCxJQUFJd0MsSUFBSSxNQUNoQnNOLFlBQVk5UCxJQUFJd0M7QUFFbkJrSSxVQUFVMUssSUFBSXVELFFBQVEsTUFDckJ3TSxhQUFhL1AsSUFBSXdDLElBQUksTUFDcEIrTSxTQUFTdlAsSUFBSXdDLElBQUksTUFDaEJ3TixZQUFZaFEsSUFBSXdDO0FBRW5CMUIsT0FBTzJKLFFBQVE0QixNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3ZDakIsT0FBTzRKLFFBQVEyQixNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3ZDakIsT0FBTytPLFdBQVd4RCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQzFDakIsT0FBT2lQLFdBQVcxRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQzFDakIsT0FBT3dPLE9BQU9qRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3RDakIsT0FBT3lPLE9BQU9sRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3RDakIsT0FBT2dQLFVBQVV6RCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3pDakIsT0FBT2tQLFVBQVUzRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBRXpDdU4sT0FBT2pELE1BQU0sU0FBUyxNQUFJO0FBQzFCa0QsT0FBT2xELE1BQU0sU0FBUztBQUV0QnZMLE9BQU8ySixRQUFRNEIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU80SixRQUFRMkIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU8rTyxXQUFXeEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU9pUCxXQUFXMUQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU95TyxPQUFPbEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9nUCxVQUFVekQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU9rUCxVQUFVM0QsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUV6Q3VOLE9BQU9qRCxNQUFNLFdBQVcsTUFBSTtBQUM1QmtELE9BQU9sRCxNQUFNLFdBQVcsTUFBSTtBQUU1QnZMLE9BQU8ySixRQUFRNEIsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU80SixRQUFRMkIsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU8rTyxXQUFXeEQsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtBQUM1Q2pCLE9BQU9pUCxXQUFXMUQsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtBQUM1Q2pCLE9BQU93TyxPQUFPakQsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU95TyxPQUFPbEQsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU9nUCxVQUFVekQsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTtPQUMzQ2pCLE9BQU9rUCxVQUFVM0QsTUFBTSxZQUFXdkssR0FBR0MsTUFBTTs7QUFHNUNNLEtBQUssa0lBQWtJO0FBQ3RJcUc7T0FBTzFJLElBQUl3QyxJQUFJd0w7ZUFBYztBQUFDLFNBQVM3RTtJQUFHO0FBQVdWLEtBQUk7QUFBWXdILE9BQU07Ozs7QUFDM0V0SCxPQUFPM0ksSUFBSXdDLElBQUl3TDtlQUFjO0FBQUMsU0FBUzdFO0lBQUc7QUFBV1YsS0FBSTs7OztBQUV6RDNILE9BQU80SCxLQUFLMkQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU82SCxLQUFLMEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUVwQzJHLEtBQUt0QyxJQUFJa0QsVUFBVTtBQUNuQlgsS0FBS3ZDLElBQUlrRCxVQUFVO0FBRW5CeEksT0FBTzRILEtBQUsyRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzZILEtBQUswRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBRXBDNEcsS0FBSzBELE1BQU0sU0FBUztBQUNwQjNELEtBQUt0QyxJQUFJa0QsVUFBVTtBQUNuQlgsS0FBS3ZDLElBQUlrRCxVQUFVO0FBRW5CeEksT0FBTzRILEtBQUsyRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO09BQ3BDakIsT0FBTzZILEtBQUswRCxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNOztBQUdyQ00sS0FBSyx3SkFBd0o7QUFDNUppTjtVQUFVdFAsSUFBSXVELFFBQVEsTUFDckJzTSxhQUFhN1AsSUFBSXdDLElBQUksTUFDcEI4TSxTQUFTdFAsSUFBSXdDLElBQUl3TDtlQUFjO0FBQUMsU0FBUzdFO0lBQUc7QUFBV1YsS0FBSTtBQUFZb0IsU0FBUTtBQUFNb0csT0FBTTs7O0dBQzFGSCxZQUFZOVAsSUFBSXdDO0FBRW5Ca0ksVUFBVTFLLElBQUl1RCxRQUFRLE1BQ3JCd00sYUFBYS9QLElBQUl3QyxJQUFJLE1BQ3BCK00sU0FBU3ZQLElBQUl3QyxJQUFJd0w7ZUFBYztBQUFDLFNBQVM3RTtJQUFHO0FBQVdWLEtBQUk7QUFBWXdILE9BQU07OztHQUM1RUQsWUFBWWhRLElBQUl3QztBQUVuQjFCLE9BQU8ySixRQUFRNEIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU80SixRQUFRMkIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU8rTyxXQUFXeEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU9pUCxXQUFXMUQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU95TyxPQUFPbEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9nUCxVQUFVekQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU9rUCxVQUFVM0QsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUV6Q3VOLE9BQU9sSixJQUFJa0QsVUFBVTtBQUNyQmlHLE9BQU9uSixJQUFJa0QsVUFBVTtBQUVyQnhJLE9BQU8ySixRQUFRNEIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU80SixRQUFRMkIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU8rTyxXQUFXeEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU9pUCxXQUFXMUQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU95TyxPQUFPbEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9nUCxVQUFVekQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU9rUCxVQUFVM0QsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUV6Q3VOLE9BQU9sSixJQUFJa0QsVUFBVTtBQUNyQmlHLE9BQU9uSixJQUFJa0QsVUFBVTtBQUVyQnhJLE9BQU8ySixRQUFRNEIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU80SixRQUFRMkIsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU8rTyxXQUFXeEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU9pUCxXQUFXMUQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU93TyxPQUFPakQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU95TyxPQUFPbEQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9nUCxVQUFVekQsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTtPQUN6Q2pCLE9BQU9rUCxVQUFVM0QsTUFBTSxVQUFTdkssR0FBR0MsTUFBTTs7QUFHMUNNLEtBQUsseUdBQXlHO0FBQzdHcUc7UUFBUXZILFNBQVNDLGNBQWM7QUFDL0I4TyxRQUFRL08sU0FBU0MsY0FBYztBQUMvQkwsUUFBUVMsWUFBWTBPO0FBQ3BCeEgsT0FBTzFJLElBQUltUTtBQUNYeEgsT0FBTzNJLElBQUlrUTtBQUVYQyxNQUFNbEssTUFBTW9CLFNBQVM7QUFDckI2SSxNQUFNakssTUFBTW9CLFNBQVM7QUFFckJ2RyxPQUFPLE9BQU80SCxLQUFLckIsUUFBUXZGLEdBQUdDLE1BQU07QUFDcENqQixPQUFPLE9BQU82SCxLQUFLdEIsUUFBUXZGLEdBQUdDLE1BQU07QUFDcENqQixPQUFPc1AsTUFBTTFILEtBQUtyQixTQUFRdkYsR0FBR1csR0FBRTtBQUMvQjNCLE9BQU9zUCxNQUFNekgsS0FBS3RCLFNBQVF2RixHQUFHVyxHQUFFO09BQy9CM0IsT0FBTzRILEtBQUt5RCxVQUFVLFdBQVVySyxHQUFHQyxNQUFNOztBQUcxQ00sS0FBSyxvQkFBb0I7QUFDeEJxRztPQUFPMUksSUFDTixDQUFDLE9BQU8sTUFDUCxDQUFDLFFBQ0FrRDtNQUNDMks7T0FBTztBQUNQbkMsUUFBUTtBQUNSQyxVQUFVOzs7QUFJZGhELE9BQU8zSSxJQUNOLENBQUMsT0FBTyxNQUNQLENBQUMsUUFDQWtEO01BQ0N3STtRQUFRO0FBQ1JDLFVBQVU7QUFDVixrQkFBa0I7OztBQUl0QnVELE9BQU9sUCxJQUFJd0MsSUFBSVU7TUFBSztBQUFDMkssT0FBTTtBQUFVbkMsUUFBTzs7O0FBRTVDNUssT0FBTzRILEtBQUt4RixNQUFNcEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU82SCxLQUFLekYsTUFBTXBCLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPb08sS0FBS2hNLE1BQU1wQixHQUFHQyxNQUFNO0FBRTNCMkcsS0FBSzJELE1BQU0sU0FBUztBQUNwQjFELEtBQUswRCxNQUFNLFNBQVM7QUFDcEI2QyxLQUFLN0MsTUFBTSxTQUFTO0FBQ3BCdkwsT0FBTzRILEtBQUt4RixNQUFNcEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU82SCxLQUFLekYsTUFBTXBCLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPb08sS0FBS2hNLE1BQU1wQixHQUFHQyxNQUFNO0FBRTNCMkcsS0FBSzJELE1BQU0sU0FBUztBQUNwQjFELEtBQUswRCxNQUFNLFNBQVM7QUFDcEI2QyxLQUFLN0MsTUFBTSxTQUFTO0FBQ3BCdkwsT0FBTzRILEtBQUt4RixNQUFNcEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU82SCxLQUFLekYsTUFBTXBCLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPb08sS0FBS2hNLE1BQU1wQixHQUFHQyxNQUFNO0FBRTNCMkcsS0FBSzJELE1BQU0sV0FBVztBQUN0QjFELEtBQUswRCxNQUFNLFdBQVc7QUFDdEJ2TCxPQUFPNEgsS0FBS3hGLE1BQU1wQixHQUFHQyxNQUFNO0FBQzNCakIsT0FBTzZILEtBQUt6RixNQUFNcEIsR0FBR0MsTUFBTTtBQUUzQjJHLEtBQUsyRCxNQUFNLFNBQVM7QUFDcEIxRCxLQUFLMEQsTUFBTSxTQUFTO0FBQ3BCdkwsT0FBTzRILEtBQUt4RixNQUFNcEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU82SCxLQUFLekYsTUFBTXBCLEdBQUdDLE1BQU07QUFFM0IyRyxLQUFLMkQsTUFBTSxXQUFXO0FBQ3RCMUQsS0FBSzBELE1BQU0sV0FBVztBQUN0QnZMLE9BQU80SCxLQUFLeEYsTUFBTXBCLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPNkgsS0FBS3pGLE1BQU1wQixHQUFHQyxNQUFNO0FBRTNCNEcsS0FBSzBELE1BQU0sV0FBVztBQUN0QjFELEtBQUswRCxNQUFNLFNBQVM7QUFDcEJ2TCxPQUFPNkgsS0FBS3pGLE1BQU1wQixHQUFHQyxNQUFNO0FBRTNCNEcsS0FBSzBELE1BQU0saUJBQWlCO09BQzVCdkwsT0FBTzZILEtBQUt6RixNQUFNcEIsR0FBR0MsTUFBTTs7QUFHNUJNLEtBQUssK0RBQStEO0FBQ25FRztVQUFVO0FBQ1ZBLE1BQU14QyxJQUFJd0MsSUFBSXlEO09BQ2JvSztPQUFPO0FBQ1AxRCxTQUFTO0FBQ1RqQixRQUFRMkU7T0FBTzs7OztBQUdoQjdOLElBQUk2SixNQUFNLE9BQU87QUFDakI3SixJQUFJMkcsR0FBRyxxQkFBcUIsVUFBQ2tELE9BQUQ7T0FBVWlFLFFBQVFDLEtBQUssQ0FBQyxTQUFTbEU7O0FBQzdEN0osSUFBSTJHLEdBQUcsdUJBQXVCLFVBQUNrRCxPQUFEO09BQVVpRSxRQUFRQyxLQUFLLENBQUMsV0FBV2xFOztBQUNqRTdKLElBQUkyRyxHQUFHLHlCQUF5QixVQUFDa0QsT0FBRDtPQUFVaUUsUUFBUUMsS0FBSyxDQUFDLGFBQWFsRTs7QUFDckV2TCxPQUFPd1AsU0FBU3hPLEdBQUcwTyxLQUFLek8sTUFBTTtBQUU5QlMsSUFBSTZKLE1BQU0sU0FBUztBQUNuQnZMLE9BQU93UCxTQUFTeE8sR0FBRzBPLEtBQUt6TyxNQUFNLENBQUMsQ0FBQyxTQUFRO0FBRXhDUyxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQU0sQ0FBQyxDQUFDLFNBQVEsT0FBSyxDQUFDLFNBQVE7QUFFdERTLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPd1AsU0FBU3hPLEdBQUcwTyxLQUFLek8sTUFBTSxDQUFDLENBQUMsU0FBUSxPQUFLLENBQUMsU0FBUSxRQUFNLENBQUMsU0FBUTtBQUVyRVMsSUFBSTZKLE1BQU0sU0FBUztBQUNuQnZMLE9BQU93UCxTQUFTeE8sR0FBRzBPLEtBQUt6TyxNQUFNLENBQUMsQ0FBQyxTQUFRLE9BQUssQ0FBQyxTQUFRLFFBQU0sQ0FBQyxTQUFRO0FBRXJFUyxJQUFJNkosTUFBTSxXQUFXO0FBQ3JCdkwsT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQU0sQ0FBQyxDQUFDLFNBQVEsT0FBSyxDQUFDLFNBQVEsUUFBTSxDQUFDLFNBQVE7QUFFckVTLElBQUk2SixNQUFNLFdBQVc7QUFDckJ2TCxPQUFPd1AsU0FBU3hPLEdBQUcwTyxLQUFLek8sTUFBTSxDQUFDLENBQUMsU0FBUSxPQUFLLENBQUMsU0FBUSxRQUFNLENBQUMsU0FBUSxPQUFLLENBQUMsV0FBVTtBQUVyRlMsSUFBSTZKLE1BQU0sYUFBYTtBQUN2QnZMLE9BQU93UCxTQUFTeE8sR0FBRzBPLEtBQUt6TyxNQUFNLENBQUMsQ0FBQyxTQUFRLE9BQUssQ0FBQyxTQUFRLFFBQU0sQ0FBQyxTQUFRLE9BQUssQ0FBQyxXQUFVLE9BQUssQ0FBQyxhQUFZO0FBRXZHUyxJQUFJNkosTUFBTSxXQUFXO09BQ3JCdkwsT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQU0sQ0FBQyxDQUFDLFNBQVEsT0FBSyxDQUFDLFNBQVEsUUFBTSxDQUFDLFNBQVEsT0FBSyxDQUFDLFdBQVUsT0FBSyxDQUFDLGFBQVk7O0FBR3hHTSxLQUFLLHdFQUF3RTtBQUM1RUc7TUFBTXhDLElBQUl3QyxJQUFJeUQ7T0FDYm1CO09BQU87QUFDUEMsUUFBUTtBQUNSeUcsV0FBVztBQUNYcEMsUUFDQ29DO1dBQVc7O0FBQ1puQyxVQUNDbUM7V0FBVztBQUNYMUcsT0FBTztBQUNQc0UsUUFDQ3JFO1FBQVE7QUFDUnlHLFdBQVc7OztBQUNiMkMsZ0JBQ0NySjtPQUFPO0FBQ1AwRyxXQUFXOzs7R0FDWDNILFNBQVNwRjtBQUNYMlAsWUFBWTtPQUFLdEo7T0FBTTVFLElBQUl5RCxNQUFNO0FBQVVvQixRQUFPN0UsSUFBSXlELE1BQU07QUFBVzZILFdBQVV0TCxJQUFJeUQsTUFBTTs7O0FBRTNGbkYsT0FBTzRQLGFBQWE1TyxHQUFHc0ssSUFBSWhGO09BQU07QUFBT0MsUUFBTztBQUFPeUcsV0FBVTs7QUFFaEV0TCxJQUFJNkosTUFBTSxTQUFTO0FBQ25CdkwsT0FBTzRQLGFBQWE1TyxHQUFHc0ssSUFBSWhGO09BQU07QUFBT0MsUUFBTztBQUFPeUcsV0FBVTs7QUFFaEV0TCxJQUFJbU8sa0JBQWtCO0FBQUN2SixPQUFNO0FBQUdDLFFBQU87QUFBR3FFLFFBQU87QUFBQ29DLFdBQVU7QUFBSXpHLFFBQU87OztBQUN2RXZHLE9BQU80UCxhQUFhNU8sR0FBR3NLLElBQUloRjtPQUFNO0FBQU9DLFFBQU87QUFBUXlHLFdBQVU7O0FBRWpFdEwsSUFBSTZKLE1BQU0sU0FBUztBQUNuQnZMLE9BQU80UCxhQUFhNU8sR0FBR3NLLElBQUloRjtPQUFNO0FBQU9DLFFBQU87QUFBT3lHLFdBQVU7O0FBRWhFdEwsSUFBSTZKLE1BQU0sU0FBUztBQUNuQnZMLE9BQU80UCxhQUFhNU8sR0FBR3NLLElBQUloRjtPQUFNO0FBQU9DLFFBQU87QUFBUXlHLFdBQVU7O0FBQ2pFdEwsSUFBSTZKLE1BQU0sU0FBUztBQUVuQjdKLElBQUltTyxrQkFDSDlDO09BQ0N6RztPQUFPO0FBQ1BDLFFBQVE7O0FBQ1RzRSxVQUNDdEU7UUFBUTtBQUNScUUsUUFDQ3RFO09BQU87QUFDUDBHLFdBQVc7T0FBRzs7Ozs7QUFFakJoTixPQUFPNFAsYUFBYTVPLEdBQUdzSyxJQUFJaEY7T0FBTTtBQUFPQyxRQUFPO0FBQU95RyxXQUFVOztBQUVoRXRMLElBQUk2SixNQUFNLFdBQVc7QUFDckJ2TCxPQUFPNFAsYUFBYTVPLEdBQUdzSyxJQUFJaEY7T0FBTTtBQUFRQyxRQUFPO0FBQVF5RyxXQUFVOztBQUVsRXRMLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPNFAsYUFBYTVPLEdBQUdzSyxJQUFJaEY7T0FBTTtBQUFRQyxRQUFPO0FBQVF5RyxXQUFVOztBQUVsRXRMLElBQUk2SixNQUFNO0FBQUM0QixPQUFNO0FBQUtDLFNBQVE7O0FBQzlCMUwsSUFBSVAsR0FBR2dFLE1BQU02SCxZQUFZO0FBQ3pCaE4sT0FBTzRQLGFBQWE1TyxHQUFHc0ssSUFBSWhGO09BQU07QUFBT0MsUUFBTztBQUFPeUcsV0FBVTs7QUFFaEV0TCxJQUFJNkosTUFBTSxpQkFBaUI7T0FDM0J2TCxPQUFPNFAsYUFBYTVPLEdBQUdzSyxJQUFJaEY7T0FBTTtBQUFRQyxRQUFPO0FBQU95RyxXQUFVOzs7T0FHbEV6TCxLQUFLLGtHQUFrRztBQUN0R3VPO01BQU0zUSxJQUFJdUM7QUFDVnFPLE1BQU01USxJQUFJdUMsSUFBSTZKO09BQU07QUFBQzRCLE9BQU07QUFBSUMsU0FBUTs7O0FBQ3ZDNEMsTUFBTTdRLElBQUl1QyxJQUFJNko7T0FBTTtBQUFDNkIsU0FBUTs7O0FBQzdCcE4sT0FBTzhQLElBQUl2RSxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzhQLElBQUl2RSxNQUFNLFlBQVd2SyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTytQLElBQUl4RSxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTytQLElBQUl4RSxNQUFNLFlBQVd2SyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBT2dRLElBQUl6RSxNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO09BQ25DakIsT0FBT2dRLElBQUl6RSxNQUFNLFlBQVd2SyxHQUFHQyxNQUFNOzs7QUFJdkNLLE1BQU0saUJBQWlCO0FBQ3RCMk8sY0FBYztBQUFLQztnRkFBK0VDLHVCQUEvRXBSO2tCQUFXcVI7OztBQUM5QkMsV0FBVztBQUFLSDtJQUFXQSw4RUFBMkRDLHdCQUF0RTtZQUFDRzs7O0FBQ2pCQyxTQUFTO0FBQUt4Tzs7S0FBNEN5TyxvQ0FBNUN0UjtrQkFBSXVSLElBQUlDLGdCQUFnQkY7Ozs7QUFHdENqUCxLQUFLLHFCQUFxQjtBQUN6Qkc7V0FBV2lQLFNBQVMsTUFBTTtBQUMxQmpQLE1BQU14QyxJQUFJd0MsSUFBSXlEO09BQ2I0RjtVQUFVO0FBQ1ZOLFFBQVE7QUFDUm5FLE9BQU87QUFDUEMsUUFBUTtBQUNSK0QsVUFBVTtBQUNWc0csWUFBWTtBQUVaLGtDQUNDNUQ7V0FBVzs7QUFFWixpQ0FDQ0E7V0FBVzs7QUFFWiwwQkFDQ3ZDO1FBQVE7QUFDUm5FLE9BQU87O0FBRVIsMkNBQ0NtRTtRQUFRO0FBQ1JuRSxPQUFPO0FBQ1BDLFFBQVE7O0FBRVQsNEJBQ0MrRDtVQUFVOztBQUVYLDRCQUNDQTtVQUFVOztBQUVYLDZCQUNDQTtVQUFVO0FBQ1ZzRyxZQUFZOztBQUViLDRCQUNDdEc7VUFBVTs7OztBQUVaNUksSUFBSTJELFNBQVNwRjtBQUViRCxPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sVUFBU25FLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sY0FBYW5FLEdBQUdDLE1BQU07QUFFdkNsQyxXQUFXNFIsU0FBUztBQUNwQjNRLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUV0Q2xDLFdBQVc0UixTQUFTO0FBQ3BCM1EsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDbEMsV0FBVzRSLFNBQVMsS0FBSztBQUN6QjNRLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUV0Q2xDLFdBQVc0UixTQUFTO0FBQ3BCM1EsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDbEMsV0FBVzRSLFNBQVMsS0FBSztBQUN6QjNRLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtBQUV4Q2xDLFdBQVc0UixTQUFTLEtBQUs7QUFDekIzUSxPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFFeENsQyxXQUFXNFIsU0FBUztBQUNwQjNRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUVuQ2xDLFdBQVc0UixTQUFTO0FBQ3BCM1EsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBRW5DbEMsV0FBVzRSLFNBQVM7QUFDcEIzUSxPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sVUFBU25FLEdBQUdDLE1BQU07QUFFbkNsQyxXQUFXNFIsU0FBUyxLQUFLO0FBQ3pCM1EsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBRXBDbEMsV0FBVzRSLFNBQVMsS0FBSztBQUN6QjNRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUVwQ2xDLFdBQVc0UixTQUFTLEtBQUs7QUFDekIzUSxPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sVUFBU25FLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFFcENsQyxXQUFXNFIsU0FBUyxLQUFLO0FBQ3pCM1EsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLFVBQVNuRSxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGNBQWFuRSxHQUFHQyxNQUFNO0FBRXZDbEMsV0FBVzRSLFNBQVMsTUFBTTtBQUMxQjNRLE9BQU8wQixJQUFJeUQsTUFBTSxjQUFhbkUsR0FBR0MsTUFBTTtBQUV2Q2xDLFdBQVc0UixTQUFTLE1BQU07T0FDMUIzUSxPQUFPMEIsSUFBSXlELE1BQU0sY0FBYW5FLEdBQUdDLE1BQU07O0FBR3hDTSxLQUFLLDBCQUEwQjtBQUM5Qkc7U0FBU3hDLElBQUl3QyxNQUFNMkQsU0FBU3BGO0FBQzVCNFEsaUJBQWlCLFVBQUN2SyxPQUFPQyxRQUFSO0FBQ2hCLElBQStCRCxPQUEvQmpGO09BQU84RCxNQUFNLFNBQVNtQjs7QUFDdEIsSUFBaUNDLFFBQWpDbEY7T0FBTzhELE1BQU0sVUFBVW9COztPQUN2QnhILFdBQVc0Ujs7QUFFWmpQLE1BQU14QyxJQUFJd0MsSUFBSXlEO09BQ2I0RjtVQUFVO0FBQ1ZOLFFBQVE7QUFDUnFHLEtBQUs7QUFDTHhLLE9BQU87QUFDUEMsUUFBUTtBQUNSK0QsVUFBVTtBQUNWc0csWUFBWTtBQUVaLGdDQUNDNUQ7V0FBVzs7QUFFWiwrQkFDQ0E7V0FBVzs7QUFFWiw0QkFDQzhEO0tBQUs7O0FBRU4sd0JBQ0NyRztRQUFRO0FBQ1JILFVBQVU7O0FBRVgsd0NBQ0NHO1FBQVE7QUFDUkgsVUFBVTtBQUNWc0csWUFBWTs7QUFFYixtQkFDQ0E7WUFBWTs7QUFFYix1QkFDQy9FO1NBQVM7O0FBRVYsMEJBQ0MrRTtZQUFZOztBQUViLDBCQUNDdEc7VUFBVTs7QUFFWCw0QkFDQ0E7VUFBVTtBQUNWc0csWUFBWTs7QUFFYix5QkFDQ3RHO1VBQVU7Ozs7QUFFWnVHLGVBQWUsS0FBSztBQUNwQm5QLElBQUkyRCxTQUFTaEU7QUFDYnJCLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxjQUFhbkUsR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxRQUFPbkUsR0FBR0MsTUFBTTtBQUVqQzRQLGVBQWUsS0FBSztBQUNwQjdRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtBQUV4QzRQLGVBQWUsS0FBSztBQUNwQjdRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUV0QzRQLGVBQWUsS0FBSztBQUNwQjdRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxZQUFXbkUsR0FBR0MsTUFBTTtBQUVyQ1MsSUFBSXlELE1BQU0sVUFBVTtBQUNwQnBHLFdBQVc0UjtBQUNYM1EsT0FBTzBCLElBQUl5RCxNQUFNLFlBQVduRSxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzBCLElBQUl5RCxNQUFNLGVBQWNuRSxHQUFHQyxNQUFNO0FBRXhDUyxJQUFJeUQsTUFBTSxVQUFVO0FBQ3BCbkYsT0FBTzBCLElBQUl5RCxNQUFNLFlBQVduRSxHQUFHQyxNQUFNO0FBRXJDbEMsV0FBVzRSO0FBQ1gzUSxPQUFPMEIsSUFBSXlELE1BQU0sWUFBV25FLEdBQUdDLE1BQU07QUFFckM0UCxlQUFlO0FBQ2Y3USxPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFFeEM0UCxlQUFlO0FBQ2Y3USxPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFFeEM0UCxlQUFlLEtBQUs7QUFDcEI3USxPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFFeEM0UCxlQUFlLE1BQU07QUFDckI3USxPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFDeENqQixPQUFPMEIsSUFBSXlELE1BQU0sY0FBYW5FLEdBQUdDLE1BQU07QUFFdkM0UCxlQUFlLE1BQU07T0FDckI3USxPQUFPMEIsSUFBSXlELE1BQU0sY0FBYW5FLEdBQUdDLE1BQU07O0FBR3hDTSxLQUFLLDRCQUE0QjtBQUNoQ0c7U0FBU3hDLElBQUl3QyxJQUFJeUQ7T0FBTTtBQUFDNEYsVUFBUzs7R0FBYTFGLFNBQVNwRjtBQUN2RDRRLGlCQUFpQixVQUFDdkssT0FBT0MsUUFBUjtBQUNoQixJQUErQkQsT0FBL0JqRjtPQUFPOEQsTUFBTSxTQUFTbUI7O0FBQ3RCLElBQWlDQyxRQUFqQ2xGO09BQU84RCxNQUFNLFVBQVVvQjs7T0FDdkJ4SCxXQUFXNFI7O0FBRVpqUCxNQUFNeEMsSUFBSXdDLElBQUl5RDtPQUNiNEY7VUFBVTtBQUNWTixRQUFRO0FBQ1JxRyxLQUFLO0FBQ0x4SyxPQUFPO0FBQ1BDLFFBQVE7QUFDUitELFVBQVU7QUFDVnNHLFlBQVk7QUFFWixrQ0FDQ0c7Y0FBYzs7QUFFZixpQ0FDQ0E7Y0FBYzs7QUFFZiw4QkFDQ0Q7S0FBSzs7QUFFTiwwQkFDQ3JHO1FBQVE7QUFDUkgsVUFBVTs7QUFFWCwwQ0FDQ0c7UUFBUTtBQUNSSCxVQUFVO0FBQ1ZzRyxZQUFZOztBQUViLHFCQUNDQTtZQUFZOzs7O0FBR2RDLGVBQWUsS0FBSztBQUNwQm5QLElBQUkyRCxTQUFTaEU7QUFDYnJCLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxVQUFTbkUsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtBQUN4Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxpQkFBZ0JuRSxHQUFHQyxNQUFNO0FBQzFDakIsT0FBTzBCLElBQUl5RCxNQUFNLFFBQU9uRSxHQUFHQyxNQUFNO0FBRWpDSSxPQUFPOEQsTUFBTSxZQUFZO0FBQ3pCbkYsT0FBTzBCLElBQUl5RCxNQUFNLFFBQU9uRSxHQUFHQyxNQUFNO0FBRWpDNFA7QUFDQTdRLE9BQU8wQixJQUFJeUQsTUFBTSxRQUFPbkUsR0FBR0MsTUFBTTtBQUVqQzRQLGVBQWUsS0FBSztBQUNwQjdRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtBQUV4QzRQLGVBQWUsS0FBSztBQUNwQjdRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUV0Q0ksT0FBTzhELE1BQU0sVUFBVTtBQUN2QjBMLGVBQWUsS0FBSztBQUNwQjdRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtPQUN4Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxZQUFXbkUsR0FBR0MsTUFBTTs7QUFHdENNLEtBQUssZ0NBQWdDO0FBQ3BDRztTQUNDeEMsSUFBSXdDLElBQUk7QUFBQ3dPLEtBQUk7R0FDWmhSLElBQUl3QyxJQUFJO0FBQUNuQixJQUFHO0dBQ1hyQixJQUFJd0MsSUFBSTtBQUFDd08sS0FBSTtLQUNiN0ssU0FBU3BGO0FBRVp5QixNQUFNeEMsSUFBSXdDLElBQUl5RDtPQUNiNEY7VUFBVTtBQUNWTixRQUFRO0FBQ1JxRyxLQUFLO0FBQ0x4SyxPQUFPO0FBQ1BDLFFBQVE7QUFDUitELFVBQVU7QUFDVnNHLFlBQVk7QUFFWixnQ0FDQ0k7WUFBWTs7QUFFYiwrQkFDQ0E7WUFBWTs7QUFFYiw0QkFDQ0Y7S0FBSzs7QUFFTix3QkFDQ3JHO1FBQVE7QUFDUkgsVUFBVTs7QUFFWCx3Q0FDQ0c7UUFBUTtBQUNSSCxVQUFVO0FBQ1ZzRyxZQUFZOztBQUViLG1CQUNDQTtZQUFZOzs7O0FBR2R2UCxPQUFPOEQsTUFBTW1CO09BQU07QUFBS0MsUUFBTzs7QUFDL0JsRixPQUFPUixNQUFNNEQsSUFBSVUsTUFBTW1CO09BQU07QUFBS0MsUUFBTzs7QUFDekNsRixPQUFPUixNQUFNb1EsSUFBSTlMLE1BQU1tQjtPQUFNO0FBQUtDLFFBQU87O0FBQ3pDN0UsSUFBSTJELFNBQVNoRSxPQUFPUixNQUFNb1E7QUFDMUJqUixPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sVUFBU25FLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFDeENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFDeENqQixPQUFPMEIsSUFBSXlELE1BQU0sUUFBT25FLEdBQUdDLE1BQU07QUFFakNJLE9BQU84RCxNQUFNbUI7T0FBTTtBQUFLQyxRQUFPO0FBQUt3RSxVQUFTOztBQUM3Q2hNLFdBQVc0UjtBQUNYM1EsT0FBTzBCLElBQUl5RCxNQUFNLGVBQWNuRSxHQUFHQyxNQUFNO0FBQ3hDakIsT0FBTzBCLElBQUl5RCxNQUFNLFFBQU9uRSxHQUFHQyxNQUFNO0FBRWpDSSxPQUFPUixNQUFNNEQsSUFBSVUsTUFBTTRGO1VBQVM7O0FBQ2hDL0ssT0FBTzBCLElBQUl5RCxNQUFNLFFBQU9uRSxHQUFHQyxNQUFNO0FBRWpDbEMsV0FBVzRSO0FBQ1gzUSxPQUFPMEIsSUFBSXlELE1BQU0sUUFBT25FLEdBQUdDLE1BQU07QUFFakNJLE9BQU9SLE1BQU00RCxJQUFJVSxNQUFNbUI7T0FBTTtBQUFLQyxRQUFPOztBQUN6Q3hILFdBQVc0UjtBQUNYM1EsT0FBTzBCLElBQUl5RCxNQUFNLFdBQVVuRSxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUl5RCxNQUFNLGFBQVluRSxHQUFHQyxNQUFNO0FBRXRDSSxPQUFPUixNQUFNb1EsSUFBSTlMLE1BQU1tQjtPQUFNO0FBQUtDLFFBQU87O0FBQ3pDeEgsV0FBVzRSO0FBQ1gzUSxPQUFPMEIsSUFBSXlELE1BQU0sV0FBVW5FLEdBQUdDLE1BQU07QUFDcENqQixPQUFPMEIsSUFBSXlELE1BQU0sYUFBWW5FLEdBQUdDLE1BQU07QUFDdENqQixPQUFPMEIsSUFBSXlELE1BQU0sZUFBY25FLEdBQUdDLE1BQU07QUFFeENJLE9BQU84RCxNQUFNc0Y7UUFBTzs7QUFDcEIxTCxXQUFXNFI7QUFDWDNRLE9BQU8wQixJQUFJeUQsTUFBTSxXQUFVbkUsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJeUQsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxlQUFjbkUsR0FBR0MsTUFBTTtPQUN4Q2pCLE9BQU8wQixJQUFJeUQsTUFBTSxZQUFXbkUsR0FBR0MsTUFBTTs7T0FHdENNLEtBQUssd0JBQXdCO0FBQzVCRztXQUFXaVAsU0FBUyxNQUFNO0FBQzFCalAsTUFBTXhDLElBQUl3QyxJQUFJeUQ7T0FDYnNGO1FBQVE7QUFFUkcsUUFDQ3NHO2FBQWE7QUFDYixrQ0FDQ0E7YUFBYTs7O0FBRWYsaUNBQ0NyRztVQUNDcUc7YUFBYTs7Ozs7QUFHaEJ4UCxJQUFJMkQsU0FBU3BGO0FBRWJELE9BQU8wQixJQUFJeUQsTUFBTSxnQkFBZW5FLEdBQUdDLE1BQU07QUFFekNTLElBQUk2SixNQUFNLFNBQVM7QUFDbkJ2TCxPQUFPMEIsSUFBSXlELE1BQU0sZ0JBQWVuRSxHQUFHQyxNQUFNO0FBRXpDbEMsV0FBVzRSLFNBQVMsS0FBSztBQUN6QjNRLE9BQU8wQixJQUFJeUQsTUFBTSxnQkFBZW5FLEdBQUdDLE1BQU07QUFFekNsQyxXQUFXNFIsU0FBUyxNQUFNO0FBQzFCM1EsT0FBTzBCLElBQUl5RCxNQUFNLGdCQUFlbkUsR0FBR0MsTUFBTTtBQUd6Q1MsSUFBSTZKLE1BQU0sV0FBVztBQUNyQnZMLE9BQU8wQixJQUFJeUQsTUFBTSxnQkFBZW5FLEdBQUdDLE1BQU07QUFFekNsQyxXQUFXNFIsU0FBUyxLQUFLO0FBQ3pCM1EsT0FBTzBCLElBQUl5RCxNQUFNLGdCQUFlbkUsR0FBR0MsTUFBTTtBQUV6Q2xDLFdBQVc0UixTQUFTLE1BQU07T0FDMUIzUSxPQUFPMEIsSUFBSXlELE1BQU0sZ0JBQWVuRSxHQUFHQyxNQUFNOzs7QUFPM0NLLE1BQU0sYUFBYTtBQUNsQkMsS0FBSyxZQUFZO0FBQ2hCNFA7TUFBTWpTLElBQUl3QyxJQUFJLE1BQU14QyxJQUFJd0MsT0FBTztBQUUvQjFCLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzBCLElBQUkwUCxnQkFBZ0JyUSxRQUFRQyxHQUFHQyxNQUFNO0FBQzVDakIsT0FBTzBCLElBQUlQLEdBQUc2RCxXQUFXakUsUUFBUUMsR0FBR0MsTUFBTTtBQUUxQ1MsSUFBSXVFLE9BQU8vRyxJQUFJbUQ7QUFDZnJDLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzBCLElBQUkwUCxnQkFBZ0JyUSxRQUFRQyxHQUFHQyxNQUFNO0FBQzVDakIsT0FBTzBCLElBQUlQLEdBQUc2RCxXQUFXakUsUUFBUUMsR0FBR0MsTUFBTTtBQUUxQ1MsSUFBSVAsR0FBR1QsWUFBWUwsU0FBU0MsY0FBYztBQUMxQ04sT0FBTzBCLElBQUlaLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDckNqQixPQUFPMEIsSUFBSTBQLGdCQUFnQnJRLFFBQVFDLEdBQUdDLE1BQU07QUFDNUNqQixPQUFPMEIsSUFBSVAsR0FBRzZELFdBQVdqRSxRQUFRQyxHQUFHQyxNQUFNO0FBRTFDUyxNQUFNckIsU0FBU0MsY0FBYztBQUM3QnNPLFFBQVF2TyxTQUFTQyxjQUFjO0FBQy9CdU8sUUFBUXhPLFNBQVNDLGNBQWM7QUFDL0I4QixPQUFPL0IsU0FBU2dSLGVBQWU7QUFDL0JGLFVBQVU5USxTQUFTaVIsY0FBYztBQUVqQzVQLElBQUloQixZQUFZa087QUFDaEJsTixJQUFJaEIsWUFBWXlRO0FBQ2hCelAsSUFBSWhCLFlBQVltTztBQUNoQm5OLElBQUloQixZQUFZMEI7QUFDaEJwQyxPQUFPMEIsSUFBSXNELFdBQVdqRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3ZDakIsT0FBTzBCLElBQUlaLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFFckNzUSxPQUFPclMsSUFBSXdDO0FBQ1gxQixPQUFPdVIsS0FBS3pRLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDdENqQixPQUFPdVIsS0FBS0gsZ0JBQWdCclEsUUFBUUMsR0FBR0MsTUFBTTtBQUM3Q2pCLE9BQU91UixLQUFLelEsU0FBUyxHQUFHd0UsS0FBS3RFLEdBQUdDLE1BQU0yTjtBQUN0QzVPLE9BQU91UixLQUFLelEsU0FBUyxHQUFHd0UsS0FBS3RFLEdBQUdDLE1BQU00TjtPQUN0QzdPLE9BQU91UixLQUFLelEsU0FBUyxHQUFHd0UsS0FBS3RFLEdBQUdDLE1BQU1tQjs7QUFHdkNiLEtBQUssVUFBVTtBQUNkMEI7SUFBSS9ELElBQUl3QyxJQUFJLE1BQU14QyxJQUFJd0MsT0FBTztBQUM3QnlCLElBQUlqRSxJQUFJd0M7QUFDUjRCLElBQUlwRSxJQUFJd0M7QUFFUjFCLE9BQU9pRCxFQUFFNUIsUUFBUUwsR0FBR0MsTUFBTTtBQUMxQmpCLE9BQU9pRCxFQUFFbkMsU0FBUyxHQUFHTyxRQUFRTCxHQUFHQyxNQUFNZ0M7QUFDdENqRCxPQUFPaUQsRUFBRW5DLFNBQVMsR0FBR0ssR0FBR0MsWUFBWUosR0FBR0MsTUFBTWdDLEVBQUU5QjtBQUUvQ2dDLEVBQUU4QyxPQUFPaEQ7QUFDVGpELE9BQU9pRCxFQUFFNUIsUUFBUUwsR0FBR0MsTUFBTWtDO0FBQzFCbkQsT0FBT2lELEVBQUVuQyxTQUFTLEdBQUdPLFFBQVFMLEdBQUdDLE1BQU1nQztBQUN0Q2pELE9BQU9pRCxFQUFFbkMsU0FBUyxHQUFHSyxHQUFHQyxZQUFZSixHQUFHQyxNQUFNZ0MsRUFBRTlCO0FBQy9DbkIsT0FBT21ELEVBQUVyQyxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBT21ELEVBQUVyQyxTQUFTLElBQUlFLEdBQUdDLE1BQU1nQztBQUUvQkssRUFBRTJDLE9BQU9oRDtBQUNUakQsT0FBT2lELEVBQUU1QixRQUFRTCxHQUFHQyxNQUFNcUM7QUFDMUJ0RCxPQUFPaUQsRUFBRW5DLFNBQVMsR0FBR08sUUFBUUwsR0FBR0MsTUFBTWdDO0FBQ3RDakQsT0FBT2lELEVBQUVuQyxTQUFTLEdBQUdLLEdBQUdDLFlBQVlKLEdBQUdDLE1BQU1nQyxFQUFFOUI7QUFDL0NuQixPQUFPbUQsRUFBRXJDLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07T0FDbkNqQixPQUFPc0QsRUFBRXhDLFNBQVMsSUFBSUUsR0FBR0MsTUFBTWdDOztBQUdoQzFCLEtBQUssV0FBVztBQUNmMEI7SUFBSS9ELElBQUl3QyxNQUFNMkQsU0FBU3BGO0FBQ3ZCa0QsSUFBSWpFLElBQUl3QyxNQUFNMkQsU0FBU3BDO0FBQ3ZCSyxJQUFJcEUsSUFBSXdDLE1BQU0yRCxTQUFTbEM7QUFFdkJuRCxPQUFPaUQsRUFBRTVCLE9BQU9GLElBQUlILEdBQUdDLE1BQU1oQjtBQUM3QkQsT0FBT21ELEVBQUU5QixRQUFRTCxHQUFHQyxNQUFNZ0M7QUFDMUJqRCxPQUFPc0QsRUFBRWpDLFFBQVFMLEdBQUdDLE1BQU1rQztBQUUxQm5ELE9BQU9pRCxFQUFFOEMsUUFBUWhGLFFBQVFDLEdBQUdDLE1BQU1rQyxFQUFFNEMsUUFBUWhGLFNBQU87QUFDbkRmLE9BQU9tRCxFQUFFNEMsUUFBUWhGLFFBQVFDLEdBQUdDLE1BQU1xQyxFQUFFeUMsUUFBUWhGLFNBQU87QUFDbkRmLE9BQU9tRCxFQUFFNEMsUUFBUSxJQUFJL0UsR0FBR0MsTUFBTWdDO0FBQzlCakQsT0FBT3NELEVBQUV5QyxRQUFRLElBQUkvRSxHQUFHQyxNQUFNa0M7QUFDOUJuRCxPQUFPc0QsRUFBRXlDLFFBQVFoRixRQUFRQyxHQUFHQyxNQUFNO09BQ2xDakIsT0FBT3NELEVBQUV5QyxRQUFReUwsTUFBTSxDQUFDLEdBQUcsR0FBR3JRLElBQUlILEdBQUdDLE1BQU1aLFNBQVNvUjs7QUFHckRuUSxNQUFNLG1CQUFtQjtBQUN4QmlQLFNBQVM7T0FBSyxLQUFDbUIsSUFBSXpPLEVBQUUrRzs7QUFDckJxRyxXQUFXO0FBQ1ZwTjtJQUFJL0QsSUFBSXVELFFBQVF5TjtLQUFJOztBQUNwQi9NLElBQUlqRSxJQUFJd0MsSUFBSXdPO0tBQUk7R0FBSzdLLFNBQVNwQztBQUM5QkssSUFBSXBFLElBQUl3QyxJQUFJd087S0FBSTtHQUFLN0ssU0FBU2xDO0FBQzlCSyxJQUFJdEUsSUFBSW1ELEtBQUs2TjtLQUFJO0dBQUs3SyxTQUFTL0I7T0FDL0IsS0FBQ29PLE1BQU07QUFBQ3pPO0FBQUVFO0FBQUVHO0FBQUVFOzs7QUFFZmpDLEtBQUssbUJBQW1CO0FBQ3ZCMEI7T0FBWSxLQUFDeU8sS0FBWnpPLFdBQUVFLFdBQUVHLFdBQUVFO0FBQ1B4RCxPQUFPd0QsRUFBRXVDLFNBQVMvRSxHQUFHc0ssSUFBSSxDQUFDaEksR0FBRUgsR0FBRUY7QUFDOUJqRCxPQUFPd0QsRUFBRW1PLGVBQWUsT0FBTzNRLEdBQUdDLE1BQU07QUFDeENqQixPQUFPd0QsRUFBRW1PLGVBQWV4TyxJQUFJbkMsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU93RCxFQUFFbU8sZUFBZTtPQUFLO0lBQU8zUSxHQUFHQyxNQUFNO0FBQzdDakIsT0FBT3dELEVBQUVtTyxlQUFlLFVBQUN4USxJQUFEO09BQU9BLE9BQU1nQztJQUFHbkMsR0FBR0MsTUFBTWtDO0FBQ2pEbkQsT0FBT3dELEVBQUVtTyxlQUFlLFVBQUN4USxJQUFEO09BQU9BLE9BQU04QjtJQUFHakMsR0FBR0MsTUFBTWdDO0FBQ2pEakQsT0FBT3dELEVBQUVtTyxlQUFlLFVBQUN4USxJQUFEO09BQU9BLE9BQU1tQztJQUFHdEMsR0FBR0MsTUFBTXFDO0FBRWpETCxFQUFFb0MsU0FBU3BGO09BQ1hELE9BQU93RCxFQUFFbU8sZUFBZSxVQUFDeFEsSUFBRDtPQUFPQSxHQUFHbUUsUUFBT2pGLFNBQVNvUjtJQUFpQnpRLEdBQUdDLE1BQU0vQixJQUFJbUIsU0FBU29SOztPQUUxRmxRLEtBQUssY0FBYztBQUNsQjBCO09BQVksS0FBQ3lPLEtBQVp6TyxXQUFFRSxXQUFFRyxXQUFFRTtBQUNQeEQsT0FBT3dELEVBQUV1QyxTQUFTL0UsR0FBR3NLLElBQUksQ0FBQ2hJLEdBQUVILEdBQUVGO0FBQzlCakQsT0FBT3dELEVBQUVtTyxlQUFlLFdBQVUzUSxHQUFHQyxNQUFNO0FBQzNDakIsT0FBT3dELEVBQUVtTyxlQUFlLE1BQUszUSxHQUFHQyxNQUFNa0M7QUFDdENuRCxPQUFPd0QsRUFBRW1PLGVBQWUsTUFBSzNRLEdBQUdDLE1BQU1nQztPQUN0Q2pELE9BQU93RCxFQUFFbU8sZUFBZSxNQUFLM1EsR0FBR0MsTUFBTXFDOzs7QUFHeENoQyxNQUFNLGlCQUFpQjtBQUN0QitPLFdBQVc7QUFDVnBOO0lBQUkvRCxJQUFJdUQsUUFBUXlOO0tBQUk7O0FBQ3BCL00sSUFBSWpFLElBQUl3QyxJQUFJd087S0FBSTtHQUFLN0ssU0FBU3BDO0FBQzlCSyxJQUFJcEUsSUFBSXdDLElBQUl3TztLQUFJO0dBQUs3SyxTQUFTbEM7QUFDOUJLLElBQUl0RSxJQUFJbUQsS0FBSzZOO0tBQUk7R0FBSzdLLFNBQVMvQjtPQUMvQixLQUFDb08sTUFBTTtBQUFDek87QUFBRUU7QUFBRUc7QUFBRUU7OztBQUVmakMsS0FBSyxtQkFBbUI7QUFDdkIwQjtPQUFZLEtBQUN5TyxLQUFaek8sV0FBRUUsV0FBRUcsV0FBRUU7QUFDUHhELE9BQU93RCxFQUFFdUMsU0FBUy9FLEdBQUdzSyxJQUFJLENBQUNoSSxHQUFFSCxHQUFFRjtBQUM5QmpELE9BQU93RCxFQUFFb08sYUFBYSxPQUFPNVEsR0FBR3NLLElBQUksQ0FBQ2hJLEdBQUVILEdBQUVGO0FBQ3pDakQsT0FBT3dELEVBQUVvTyxnQkFBZ0I1USxHQUFHc0ssSUFBSSxDQUFDaEksR0FBRUgsR0FBRUY7QUFDckNqRCxPQUFPd0QsRUFBRW9PLGFBQWEsVUFBQ3pRLElBQUQ7T0FBT0EsT0FBTThCO0lBQUdqQyxHQUFHc0ssSUFBSSxDQUFDaEksR0FBRUg7QUFDaERuRCxPQUFPd0QsRUFBRW9PLGFBQWEsVUFBQ3pRLElBQUQ7T0FBT0EsT0FBTWdDO0lBQUduQyxHQUFHc0ssSUFBSSxDQUFDaEk7T0FDOUN0RCxPQUFPd0QsRUFBRW9PLGFBQWEsVUFBQ3pRLElBQUQ7T0FBTztJQUFPSCxHQUFHc0ssSUFBSSxDQUFDaEksR0FBRUgsR0FBRUY7O09BR2pEMUIsS0FBSyxjQUFjO0FBQ2xCMEI7T0FBWSxLQUFDeU8sS0FBWnpPLFdBQUVFLFdBQUVHLFdBQUVFO0FBQ1B4RCxPQUFPd0QsRUFBRW9PLGFBQWEsTUFBSzVRLEdBQUdzSyxJQUFJLENBQUNoSSxHQUFFSDtBQUNyQ25ELE9BQU93RCxFQUFFb08sYUFBYSxNQUFLNVEsR0FBR3NLLElBQUksQ0FBQ2hJO09BQ25DdEQsT0FBT3dELEVBQUVvTyxhQUFhLFdBQVU1USxHQUFHc0ssSUFBSSxDQUFDaEksR0FBRUgsR0FBRUY7OztBQUc5QzFCLEtBQUssUUFBUTtBQUNaMEI7TUFBTS9ELElBQUl3QyxJQUFJLE1BQU11QixJQUFFL0QsSUFBSXdDLE9BQU95QixJQUFFakUsSUFBSXdDLE9BQU80QixJQUFFcEUsSUFBSXdDLE9BQU84QixJQUFFdEUsSUFBSXdDLE9BQU9nQyxJQUFFeEUsSUFBSXdDO0FBRTlFMUIsT0FBT2lELEVBQUU0TyxNQUFNN1EsR0FBR0MsTUFBTWtDO0FBQ3hCbkQsT0FBT3NELEVBQUV1TyxNQUFNN1EsR0FBR0MsTUFBTXVDO0FBQ3hCeEQsT0FBTzBELEVBQUVtTyxNQUFNN1EsR0FBR0MsTUFBTTtPQUN4QmpCLE9BQU9tRCxFQUFFMk8sU0FBUzlRLEdBQUdzSyxJQUFJLENBQUNoSSxHQUFFRSxHQUFFRTs7QUFHL0JuQyxLQUFLLGdCQUFnQjtBQUNwQjBCO01BQU0vRCxJQUFJd0MsSUFBSSxNQUFNdUIsSUFBRS9ELElBQUl3QyxPQUFPeUIsSUFBRWpFLElBQUlrRCxRQUFRa0IsSUFBRXBFLElBQUl3QyxPQUFPOEIsSUFBRXRFLElBQUlrRCxRQUFRc0IsSUFBRXhFLElBQUl3QztBQUVoRjFCLE9BQU9pRCxFQUFFNE8sTUFBTTdRLEdBQUdDLE1BQU1rQztBQUN4Qm5ELE9BQU9pRCxFQUFFOE8sUUFBUS9RLEdBQUdDLE1BQU1xQztBQUMxQnRELE9BQU9tRCxFQUFFNE8sUUFBUS9RLEdBQUdDLE1BQU1xQztBQUMxQnRELE9BQU9zRCxFQUFFeU8sUUFBUS9RLEdBQUdDLE1BQU15QztBQUMxQjFELE9BQU8wRCxFQUFFcU8sUUFBUS9RLEdBQUdDLE1BQU07T0FDMUJqQixPQUFPaUQsRUFBRStPLFdBQVdoUixHQUFHc0ssSUFBSSxDQUFDaEksR0FBRUk7O0FBRy9CbkMsS0FBSyxRQUFRO0FBQ1owQjtNQUFNL0QsSUFBSXdDLElBQUksTUFBTXVCLElBQUUvRCxJQUFJd0MsT0FBT3lCLElBQUVqRSxJQUFJd0MsT0FBTzRCLElBQUVwRSxJQUFJd0MsT0FBTzhCLElBQUV0RSxJQUFJd0MsT0FBT2dDLElBQUV4RSxJQUFJd0M7QUFFOUUxQixPQUFPMEQsRUFBRXVPLE1BQU1qUixHQUFHQyxNQUFNdUM7QUFDeEJ4RCxPQUFPc0QsRUFBRTJPLE1BQU1qUixHQUFHQyxNQUFNa0M7QUFDeEJuRCxPQUFPaUQsRUFBRWdQLE1BQU1qUixHQUFHQyxNQUFNO09BQ3hCakIsT0FBT3dELEVBQUUwTyxTQUFTbFIsR0FBR3NLLElBQUksQ0FBQ2hJLEdBQUVILEdBQUVGOztBQUcvQjFCLEtBQUssZ0JBQWdCO0FBQ3BCMEI7TUFBTS9ELElBQUl3QyxJQUFJLE1BQU11QixJQUFFL0QsSUFBSXdDLE9BQU95QixJQUFFakUsSUFBSWtELFFBQVFrQixJQUFFcEUsSUFBSXdDLE9BQU84QixJQUFFdEUsSUFBSWtELFFBQVFzQixJQUFFeEUsSUFBSXdDO0FBRWhGMUIsT0FBTzBELEVBQUV1TyxNQUFNalIsR0FBR0MsTUFBTXVDO0FBQ3hCeEQsT0FBTzBELEVBQUV5TyxRQUFRblIsR0FBR0MsTUFBTXFDO0FBQzFCdEQsT0FBT3dELEVBQUUyTyxRQUFRblIsR0FBR0MsTUFBTXFDO0FBQzFCdEQsT0FBT3NELEVBQUU2TyxRQUFRblIsR0FBR0MsTUFBTWdDO0FBQzFCakQsT0FBT2lELEVBQUVrUCxRQUFRblIsR0FBR0MsTUFBTTtPQUMxQmpCLE9BQU8wRCxFQUFFME8sV0FBV3BSLEdBQUdzSyxJQUFJLENBQUNoSSxHQUFFTDs7QUFHL0IxQixLQUFLLFlBQVk7QUFDaEIwQjtNQUFNL0QsSUFBSXdDLElBQUksTUFBTXVCLElBQUUvRCxJQUFJd0MsT0FBT3lCLElBQUVqRSxJQUFJa0QsUUFBUWtCLElBQUVwRSxJQUFJd0MsT0FBTzhCLElBQUV0RSxJQUFJa0QsUUFBUXNCLElBQUV4RSxJQUFJd0M7QUFFaEYxQixPQUFPc0QsRUFBRStPLFVBQVVyUixHQUFHc0ssSUFBSWhJLEVBQUU0TyxRQUFRSSxVQUFVQyxPQUFPalAsRUFBRXdPO0FBQ3ZEOVIsT0FBT3NELEVBQUUrTyxVQUFVclIsR0FBR3NLLElBQUksQ0FBQ3JJLEdBQUVFLEdBQUVLLEdBQUVFO0FBQ2pDMUQsT0FBT3NELEVBQUVrUCxpQkFBaUJ4UixHQUFHc0ssSUFBSSxDQUFDckksR0FBRVM7T0FDcEMxRCxPQUFPbUQsRUFBRXFQLGlCQUFpQnhSLEdBQUdzSyxJQUFJLENBQUNySSxHQUFFSyxHQUFFSTs7QUFHdkNuQyxLQUFLLG9CQUFvQjtBQUN4QnFHO09BQU96SSxJQUFJdUMsSUFBSW5CO0lBQUc7O0FBQ2xCcUgsT0FBT3pJLElBQUl1QyxJQUFJbkI7SUFBRztHQUFROEUsU0FBU3pFO0FBQ25DaUgsT0FBTzFJLElBQUl1QyxJQUFJbkI7SUFBRztHQUFROEUsU0FBU3pFO0FBQ25Dd04sT0FBT2pQLElBQUl1QyxJQUFJbkI7SUFBRztHQUFROEUsU0FBU3pFO0FBQ25DNlIsUUFBUXRULElBQUl1QyxJQUFJbkI7SUFBRztHQUFTOEUsU0FBU3dDO0FBQ3JDNkssUUFBUXZULElBQUl1QyxJQUFJbkI7SUFBRztHQUFTOEUsU0FBU3dDO0FBRXJDN0gsT0FBT1ksS0FBSytSLFlBQVkzUixHQUFHQyxNQUFNMkc7QUFDakM1SCxPQUFPWSxLQUFLZ1MsV0FBVzVSLEdBQUdDLE1BQU1tTjtBQUNoQ3BPLE9BQU80SCxLQUFLK0ssWUFBWTNSLEdBQUdDLE1BQU07QUFDakNqQixPQUFPNEgsS0FBS2dMLFdBQVc1UixHQUFHQyxNQUFNO0FBQ2hDakIsT0FBTzZILEtBQUs4SyxZQUFZM1IsR0FBR0MsTUFBTXdSO09BQ2pDelMsT0FBTzZILEtBQUsrSyxXQUFXNVIsR0FBR0MsTUFBTXlSOztBQUdqQ25SLEtBQUssa0JBQWtCO0FBQ3RCcUc7T0FDQzFJLElBQUl3QyxJQUFJO0FBQUNuQixJQUFHO0dBQ1hyQixJQUFJd0MsSUFBSTtBQUFDbkIsSUFBRztHQUNYckIsSUFBSW1ELEtBQUs7QUFBQzZOLEtBQUk7SUFDZGhSLElBQUl3QyxJQUFJO0FBQUN3TyxLQUFJO0FBQVkzUCxJQUFHO0tBQzdCckIsSUFBSXdDLElBQUksSUFDUHhDLElBQUltRCxLQUFLO0FBQUM2TixLQUFJO0lBQ2RoUixJQUFJa0QsS0FBSztBQUFDN0IsSUFBRztHQUFhO0FBRzdCc0gsT0FBTzNJLElBQUkyVCxTQUNWLENBQUMsT0FBTztBQUFDdFMsSUFBRztHQUNYLENBQUMsT0FBTztBQUFDQSxJQUFHO0FBQVU0RSxPQUFNO0FBQUNvSyxPQUFNOztHQUNsQyxDQUFDLFFBQVE7QUFBQ1csS0FBSTtJQUNkLENBQUMsT0FBTztBQUFDQSxLQUFJO0FBQVkzUCxJQUFHO0tBRTdCLENBQUMsT0FBTyxNQUNQLENBQUMsUUFBUTtBQUFDMlAsS0FBSTtNQUdmNEM7QUFFRjFFLE9BQU9sUCxJQUFJMlQsU0FDVixDQUFDLE9BQU8zQztLQUFJO0dBQ1gsQ0FBQyxPQUFPQTtLQUFJO0dBQ1gsQ0FBQyxPQUFPQTtLQUFJO0lBQ1osQ0FBQyxPQUFPQTtLQUFJO0tBRWIsQ0FBQyxPQUFPQTtLQUFJO0dBQ1gsQ0FBQyxPQUFPQTtLQUFJO0lBQ1osQ0FBQyxPQUFPQTtLQUFJO0lBQ1osQ0FBQyxPQUFPQTtLQUFJO0dBQ1gsQ0FBQyxPQUFPQTtLQUFJO09BSWQ0QztBQUdGOVMsT0FBTzRILEtBQUsvRyxNQUFNMk4sUUFBUXhOLEdBQUdDLE1BQU0yRyxLQUFLOUcsU0FBUztBQUNqRGQsT0FBTzRILEtBQUsvRyxNQUFNa1MsVUFBVS9SLEdBQUdDLE1BQU0yRyxLQUFLOUcsU0FBUyxHQUFHQSxTQUFTO0FBQy9EZCxPQUFPNEgsS0FBSy9HLE1BQU1tUyxVQUFVaFMsR0FBR0MsTUFBTTJHLEtBQUs5RyxTQUFTLEdBQUdBLFNBQVM7QUFDL0RkLE9BQU80SCxLQUFLL0csTUFBTW9TLFVBQVVqUyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzRILEtBQUsvRyxNQUFNNE4sUUFBUXpOLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPNEgsS0FBSy9HLE1BQU1xUyxVQUFVbFMsR0FBR0MsTUFBTTJHLEtBQUs5RyxTQUFTLEdBQUdBLFNBQVM7QUFDL0RkLE9BQU80SCxLQUFLL0csTUFBTXNTLFVBQVVuUyxHQUFHQyxNQUFNMkcsS0FBSzlHLFNBQVMsR0FBR0EsU0FBUztBQUMvRGQsT0FBTzRILEtBQUsvRyxNQUFNc1MsU0FBU3RRLE1BQU03QixHQUFHQyxNQUFNO0FBRzFDakIsT0FBTzZILEtBQUtoSCxNQUFNMk4sUUFBUXhOLEdBQUdDLE1BQU00RyxLQUFLL0csU0FBUztBQUNqRGQsT0FBTzZILEtBQUtoSCxNQUFNa1MsVUFBVS9SLEdBQUdDLE1BQU00RyxLQUFLL0csU0FBUyxHQUFHQSxTQUFTO0FBQy9EZCxPQUFPNkgsS0FBS2hILE1BQU1tUyxVQUFVaFMsR0FBR0MsTUFBTTRHLEtBQUsvRyxTQUFTLEdBQUdBLFNBQVM7QUFDL0RkLE9BQU82SCxLQUFLaEgsTUFBTW9TLFVBQVVqUyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzZILEtBQUtoSCxNQUFNNE4sUUFBUXpOLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPNkgsS0FBS2hILE1BQU1xUyxVQUFVbFMsR0FBR0MsTUFBTTRHLEtBQUsvRyxTQUFTLEdBQUdBLFNBQVM7QUFDL0RkLE9BQU82SCxLQUFLaEgsTUFBTXNTLFVBQVVuUyxHQUFHQyxNQUFNNEcsS0FBSy9HLFNBQVMsR0FBR0EsU0FBUztBQUMvRGQsT0FBTzZILEtBQUtoSCxNQUFNMk4sT0FBT3JKLE1BQU0sVUFBVW5FLEdBQUdDLE1BQU07QUFDbERqQixPQUFPNkgsS0FBS2hILE1BQU0yTixPQUFPbkQsVUFBVSxVQUFVdEksSUFBSS9CLEdBQUdDLE1BQU07QUFDMURqQixPQUFPNkgsS0FBS2hILE1BQU0yTixPQUFPbkQsVUFBVSxTQUFTdEssVUFBVSxHQUFHQyxHQUFHVyxHQUFFO0FBRzlEM0IsT0FBTzRILEtBQUsvRyxNQUFNMk4sT0FBT2xKLElBQUlaLGFBQWEsT0FBTzFELEdBQUdDLE1BQU07QUFDMURqQixPQUFPNEgsS0FBSy9HLE1BQU0yTixPQUFPbEosSUFBSVosYUFBYSxhQUFhMUQsR0FBR0MsTUFBTTtBQUNoRWpCLE9BQU80SCxLQUFLL0csTUFBTWtTLFNBQVN6TixJQUFJWixhQUFhLE9BQU8xRCxHQUFHQyxNQUFNO0FBQzVEakIsT0FBTzRILEtBQUsvRyxNQUFNa1MsU0FBU3pOLElBQUlaLGFBQWEsYUFBYTFELEdBQUdDLE1BQU07QUFDbEVqQixPQUFPNEgsS0FBSy9HLE1BQU1tUyxTQUFTMU4sSUFBSVosYUFBYSxPQUFPMUQsR0FBR0MsTUFBTTtBQUM1RGpCLE9BQU80SCxLQUFLL0csTUFBTW1TLFNBQVMxTixJQUFJWixhQUFhLGFBQWExRCxHQUFHQyxNQUFNO0FBRWxFakIsT0FBT29PLEtBQUt2TixNQUFNMk4sUUFBUXhOLEdBQUdDLE1BQU1tTixLQUFLdE4sU0FBUztBQUNqRGQsT0FBT29PLEtBQUt2TixNQUFNNE4sUUFBUXpOLEdBQUdDLE1BQU1tTixLQUFLdE4sU0FBUztBQUNqRGQsT0FBT29PLEtBQUt2TixNQUFNZ0gsTUFBTTdHLEdBQUdDLE1BQU1tTixLQUFLdE4sU0FBUyxHQUFHQSxTQUFTO0FBQzNEZCxPQUFPb08sS0FBS3ZOLE1BQU11TixNQUFNcE4sR0FBR0MsTUFBTW1OO0FBQ2pDcE8sT0FBT29PLEtBQUt2TixNQUFNdVMsTUFBTXBTLEdBQUdDLE1BQU1tTixLQUFLdE4sU0FBUyxHQUFHQSxTQUFTO0FBQzNEZCxPQUFPb08sS0FBS3ROLFNBQVMsR0FBR0QsTUFBTWdILE1BQU03RyxHQUFHQyxNQUFNbU4sS0FBS3ROLFNBQVMsR0FBR0EsU0FBUztBQUN2RWQsT0FBT29PLEtBQUt0TixTQUFTLEdBQUdELE1BQU11TixNQUFNcE4sR0FBR0MsTUFBTW1OLEtBQUt0TixTQUFTLEdBQUdBLFNBQVM7QUFDdkVkLE9BQU9vTyxLQUFLdE4sU0FBUyxHQUFHRCxNQUFNZ0gsTUFBTTdHLEdBQUdDLE1BQU1tTixLQUFLdE4sU0FBUyxHQUFHQSxTQUFTO0FBQ3ZFZCxPQUFPb08sS0FBS3ROLFNBQVMsR0FBR0QsTUFBTXVOLE1BQU1wTixHQUFHQyxNQUFNbU4sS0FBS3ROLFNBQVMsR0FBR0EsU0FBUztBQUN2RWQsT0FBT29PLEtBQUt0TixTQUFTLEdBQUdELE1BQU11UyxNQUFNcFMsR0FBR0MsTUFBTW1OLEtBQUt0TixTQUFTLEdBQUdBLFNBQVM7QUFDdkVkLE9BQU9vTyxLQUFLdE4sU0FBUyxHQUFHRCxNQUFNNE4sUUFBUXpOLEdBQUdDLE1BQU1tTixLQUFLdE4sU0FBUztBQUU3RHVTLFVBQVVuVSxJQUFJZTtBQUNkRCxPQUFPcVQsUUFBUXhTLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9xVCxRQUFReFMsTUFBTXNTLFVBQVVuUyxHQUFHQyxNQUFNO0FBQ3hDakIsT0FBT3FULFFBQVF4UyxNQUFNK0csTUFBTTVHLEdBQUdDLE1BQU07QUFFcENvUyxRQUFRcE4sT0FBTzJCO0FBQ2Y1SCxPQUFPcVQsUUFBUXhTLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU9xVCxRQUFReFMsTUFBTXNTLFVBQVVuUyxHQUFHQyxNQUFNO0FBQ3hDakIsT0FBT3FULFFBQVF4UyxNQUFNK0csTUFBTTVHLEdBQUdDLE1BQU07QUFDcENqQixPQUFPcVQsUUFBUUMsT0FBTzFMLE1BQU01RyxHQUFHQyxNQUFNMkc7QUFDckM1SCxPQUFPcVQsUUFBUXhTLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTTJHLEtBQUs5RyxTQUFTO0FBQ3BEZCxPQUFPcVQsUUFBUXhTLE1BQU1zUyxVQUFVblMsR0FBR0MsTUFBTTJHLEtBQUs5RyxTQUFTLEdBQUdBLFNBQVM7QUFDbEVkLE9BQU9xVCxRQUFReFMsTUFBTStHLE1BQU01RyxHQUFHQyxNQUFNMkc7QUFFcEMyTCxXQUFXclUsSUFBSXdDLElBQUl3TztLQUFJOztBQUN2QnNELGdCQUFnQnRVLElBQUl3QyxJQUFJd087S0FBSTs7QUFDNUJsUSxPQUFPdVQsU0FBUzFTLE1BQU0yUyxlQUFleFMsR0FBR0MsTUFBTTtBQUM5Q2pCLE9BQU93VCxjQUFjM1MsTUFBTTJTLGVBQWV4UyxHQUFHQyxNQUFNdVM7QUFDbkR4VCxPQUFPeVQsT0FBT0MsS0FBS0YsY0FBYzNTLE9BQU9FLFFBQVFDLEdBQUdDLE1BQU07QUFFekR1UyxjQUFjbk8sU0FBU2tPO0FBQ3ZCdlQsT0FBT3VULFNBQVMxUyxNQUFNMlMsZUFBZXhTLEdBQUdDLE1BQU07QUFDOUNqQixPQUFPdVQsU0FBU0QsT0FBT0UsZUFBZXhTLEdBQUdDLE1BQU11UztBQUMvQ3hULE9BQU91VCxTQUFTMVMsTUFBTTJTLGVBQWV4UyxHQUFHQyxNQUFNdVM7QUFDOUN4VCxPQUFPeVQsT0FBT0MsS0FBS0YsY0FBYzNTLE9BQU9FLFFBQVFDLEdBQUdDLE1BQU07QUFFekQwUyxZQUFZelUsSUFBSXdDLElBQUl3TztLQUFJOztBQUN4QnFELFNBQVNsTyxTQUFTc087T0FDbEIzVCxPQUFPMlQsVUFBVTlTLE1BQU0yUyxlQUFleFMsR0FBR0MsTUFBTXVTOztBQUdoRGpTLEtBQUssU0FBUztBQUNiaU47VUFDQ3RQLElBQUl1RCxRQUFRLE1BQ1grTCxTQUFTdFAsSUFBSXdDLE9BQ2IrTSxTQUFTdlAsSUFBSXdDLE9BQ2JrUyxTQUFTMVUsSUFBSW1ELFFBQ2J3UixTQUFTM1UsSUFBSWtELFFBQ2IwUixTQUFTNVUsSUFBSW1ELFFBQ2IwUixTQUFTN1UsSUFBSXdDO0FBR2YxQixPQUFPeU8sT0FBT3ZOLE9BQU9GLEdBQUdDLE1BQU07QUFDOUJqQixPQUFPNlQsT0FBTzNTLE9BQU9GLEdBQUdDLE1BQU07QUFDOUJqQixPQUFPK1QsT0FBTzdTLE9BQU9GLEdBQUdDLE1BQU07QUFFOUIyUyxPQUFPNUo7QUFDUGhLLE9BQU95TyxPQUFPdk4sT0FBT0YsR0FBR0MsTUFBTTtBQUM5QmpCLE9BQU82VCxPQUFPM1MsT0FBT0YsR0FBR0MsTUFBTTtBQUM5QmpCLE9BQU8rVCxPQUFPN1MsT0FBT0YsR0FBR0MsTUFBTTtPQUM5QmpCLE9BQU80VCxPQUFPMVMsT0FBT0YsR0FBR0MsTUFBTTs7QUFHL0JNLEtBQUssbUJBQW1CO0FBQ3ZCaU47VUFDQ3RQLElBQUl1RCxRQUFRLE1BQ1grTCxTQUFTdFAsSUFBSXdDLE9BQ2IrTSxTQUFTdlAsSUFBSXdDLE9BQ2JrUyxTQUFTMVUsSUFBSW1ELFFBQ2J3UixTQUFTM1UsSUFBSWtELFFBQ2IwUixTQUFTNVUsSUFBSW1ELFFBQ2IwUixTQUFTN1UsSUFBSWtELFFBQ2I0UixTQUFTOVUsSUFBSXdDO0FBR2YxQixPQUFPeU8sT0FBT3dGLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBTzZULE9BQU9JLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBTytULE9BQU9FLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBT2dVLE9BQU9DLFdBQVdqVCxHQUFHQyxNQUFNO0FBRWxDMlMsT0FBTzVKO0FBQ1BoSyxPQUFPeU8sT0FBT3dGLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBTzZULE9BQU9JLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBTytULE9BQU9FLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBT2dVLE9BQU9DLFdBQVdqVCxHQUFHQyxNQUFNO0FBRWxDdU4sT0FBT3hFO0FBQ1BoSyxPQUFPeU8sT0FBT3dGLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBTzZULE9BQU9JLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBTytULE9BQU9FLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBT2dVLE9BQU9DLFdBQVdqVCxHQUFHQyxNQUFNO0FBQ2xDakIsT0FBT3dPLE9BQU95RixXQUFXalQsR0FBR0MsTUFBTTtPQUNsQ2pCLE9BQU80VCxPQUFPSyxXQUFXalQsR0FBR0MsTUFBTTs7QUFHbkNNLEtBQUssa0JBQWtCO0FBQ3RCaU47VUFDQ3RQLElBQUl1RCxRQUFRLE1BQ1grTCxTQUFTdFAsSUFBSXdDLElBQUl3TztLQUFJO0lBQ3JCekIsU0FBU3ZQLElBQUl3QyxJQUFJd087S0FBSTtJQUNyQjBELFNBQVMxVSxJQUFJbUQsS0FBSzZOO0tBQUk7SUFDdEIyRCxTQUFTM1UsSUFBSWtELEtBQUs4TjtLQUFJO0lBQ3RCNEQsU0FBUzVVLElBQUltRCxLQUFLNk47S0FBSTtJQUN0QjZELFNBQVM3VSxJQUFJa0QsS0FBSzhOO0tBQUk7SUFDdEI4RCxTQUFTOVUsSUFBSXdDLElBQUl3TztLQUFJOztBQUd2QmxRLE9BQU95TyxPQUFPeUYsVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPNlQsT0FBT0ssVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPK1QsT0FBT0csVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPZ1UsT0FBT0UsVUFBVWxULEdBQUdDLE1BQU07QUFFakMyUyxPQUFPNUo7QUFDUGhLLE9BQU95TyxPQUFPeUYsVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPNlQsT0FBT0ssVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPK1QsT0FBT0csVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPZ1UsT0FBT0UsVUFBVWxULEdBQUdDLE1BQU07QUFFakN1TixPQUFPeEU7QUFDUGhLLE9BQU95TyxPQUFPeUYsVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPNlQsT0FBT0ssVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPK1QsT0FBT0csVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPZ1UsT0FBT0UsVUFBVWxULEdBQUdDLE1BQU07QUFDakNqQixPQUFPd08sT0FBTzBGLFVBQVVsVCxHQUFHQyxNQUFNO09BQ2pDakIsT0FBTzRULE9BQU9NLFVBQVVsVCxHQUFHQyxNQUFNOztBQUdsQ00sS0FBSyxTQUFTO0FBQ2JHO01BQU14QyxJQUFJMlQsU0FDVCxDQUFDLE9BQU87QUFBQyxTQUFNO0FBQVd4UCxPQUFNUDtNQUFLOztHQUNwQyxDQUFDLE9BQU87QUFBQyxTQUFNO0FBQVVxQyxPQUFNO0FBQUNvSyxPQUFNOztHQUNyQyxDQUFDLFFBQVE7QUFBQyxTQUFNO0lBQ2hCLENBQUMsT0FBTztBQUFDLFNBQU07SUFDZixDQUFDLFFBQVE7QUFBQyxTQUFNO0lBQ2hCLENBQUMsT0FBTztBQUFDLFNBQU07S0FFaEIsQ0FBQyxPQUFPbk07V0FBVTtHQUNqQixDQUFDLFFBQVE7QUFBQyxTQUFNO0tBRWpCLENBQUMsV0FBV0E7V0FBVTtHQUNyQixDQUFDLFFBQVE7QUFBQyxTQUFNO01BR2pCMFAsUUFBUXpOLFNBQVNnTyxVQUFVblUsSUFBSWU7QUFFakNELE9BQU8wQixJQUFJeVMsTUFBTSxZQUFXblQsR0FBR0MsTUFBTVMsSUFBSVosU0FBUztBQUNsRGQsT0FBTzBCLElBQUl5UyxNQUFNLFlBQVduVCxHQUFHQyxNQUFNUyxJQUFJWixTQUFTO0FBQ2xEZCxPQUFPMEIsSUFBSXlTLE1BQU0sY0FBYW5ULEdBQUdDLE1BQU1TLElBQUlaLFNBQVMsR0FBR0EsU0FBUztBQUNoRWQsT0FBTzBCLElBQUl5UyxNQUFNLGNBQWFuVCxHQUFHQyxNQUFNUyxJQUFJWixTQUFTLEdBQUdBLFNBQVM7QUFDaEVkLE9BQU8wQixJQUFJeVMsTUFBTSxjQUFhblQsR0FBR0MsTUFBTVMsSUFBSVosU0FBUyxHQUFHQSxTQUFTO0FBQ2hFZCxPQUFPcVQsUUFBUWMsTUFBTSxhQUFZblQsR0FBR0MsTUFBTVM7QUFDMUMxQixPQUFPcVQsUUFBUWMsTUFBTSxjQUFhblQsR0FBR0MsTUFBTVMsSUFBSVosU0FBUyxHQUFHQSxTQUFTO0FBQ3BFZCxPQUFPcVQsUUFBUWMsTUFBTSx1QkFBc0JuVCxHQUFHQyxNQUFNUztPQUNwRDFCLE9BQU9xVCxRQUFRYyxNQUFNLHdCQUF1Qm5ULEdBQUdDLE1BQU07O0FBR3RETSxLQUFLLFlBQVk7QUFDaEJHO01BQU14QyxJQUFJMlQsU0FDVCxDQUFDLE9BQU87QUFBQyxTQUFNO0FBQVd4UCxPQUFNUDtNQUFLOztHQUNwQyxDQUFDLE9BQU87QUFBQyxTQUFNO0FBQVVxQyxPQUFNO0FBQUNvSyxPQUFNOztHQUNyQyxDQUFDLFFBQVE7QUFBQyxTQUFNO0lBQ2hCLENBQUMsT0FBTztBQUFDLFNBQU07SUFDZixDQUFDLFFBQVE7QUFBQyxTQUFNO0lBQ2hCLENBQUMsT0FBTztBQUFDLFNBQU07S0FFaEIsQ0FBQyxPQUFPbk07V0FBVTtHQUNqQixDQUFDLFFBQVE7QUFBQyxTQUFNO0tBRWpCLENBQUMsV0FBV0E7V0FBVTtHQUNyQixDQUFDLFFBQVE7QUFBQyxTQUFNO01BR2pCMFAsUUFBUXpOLFNBQVNnTyxVQUFVblUsSUFBSWU7QUFFakNELE9BQU8wQixJQUFJMFMsU0FBUyxXQUFXL00sVUFBVXJHLEdBQUdzSyxJQUFJLENBQUM1SixJQUFJWixTQUFTO0FBQzlEZCxPQUFPMEIsSUFBSTBTLFNBQVMsV0FBVy9NLFVBQVVyRyxHQUFHc0ssSUFBSSxDQUFDNUosSUFBSVosU0FBUyxJQUFJWSxJQUFJWixTQUFTO0FBQy9FZCxPQUFPMEIsSUFBSTBTLFNBQVMsYUFBYS9NLFVBQVVyRyxHQUFHc0ssSUFBSSxDQUFDNUosSUFBSVosU0FBUyxHQUFHQSxTQUFTLElBQUlZLElBQUlaLFNBQVMsR0FBR0EsU0FBUztBQUN6R2QsT0FBTzBCLElBQUkwUyxTQUFTLGFBQWEvTSxVQUFVckcsR0FBR3NLLElBQUksQ0FBQzVKLElBQUlaLFNBQVMsR0FBR0EsU0FBUyxJQUFJWSxJQUFJWixTQUFTLEdBQUdBLFNBQVMsSUFBSVksSUFBSVosU0FBUyxHQUFHQSxTQUFTO0FBQ3RJZCxPQUFPMEIsSUFBSTBTLFNBQVMsYUFBYS9NLFVBQVVyRyxHQUFHc0ssSUFBSSxDQUFDNUosSUFBSVosU0FBUyxHQUFHQSxTQUFTO0FBQzVFZCxPQUFPcVQsUUFBUWUsU0FBUyxZQUFZL00sVUFBVXJHLEdBQUdzSyxJQUFJLENBQUM1SjtBQUN0RDFCLE9BQU9xVCxRQUFRZSxTQUFTLGFBQWEvTSxVQUFVckcsR0FBR3NLLElBQUksQ0FBQzVKLElBQUlaLFNBQVMsR0FBR0EsU0FBUyxJQUFJWSxJQUFJWixTQUFTLEdBQUdBLFNBQVM7QUFDN0dkLE9BQU9xVCxRQUFRZSxTQUFTLHNCQUFzQi9NLFVBQVVyRyxHQUFHc0ssSUFBSSxDQUFDNUo7QUFDaEUxQixPQUFPcVQsUUFBUWUsU0FBUyx1QkFBdUIvTSxVQUFVckcsR0FBR3NLLElBQUk7QUFDaEV0TCxPQUFPMEIsSUFBSVUsTUFBTXBCLEdBQUdDLE1BQU07QUFDMUJqQixPQUFPcVQsUUFBUWUsU0FBUyxhQUFhaFMsS0FBSyxVQUFVaUYsVUFBVXJHLEdBQUdzSyxJQUFJLENBQUM1SixJQUFJWixTQUFTLEdBQUdBLFNBQVMsSUFBSVksSUFBSVosU0FBUyxHQUFHQSxTQUFTO09BQzVIZCxPQUFPMEIsSUFBSVUsTUFBTXBCLEdBQUdDLE1BQU07O09BRzNCTSxLQUFLLDRCQUE0QjtBQUNoQzhTO09BQU9uVixJQUFJaVYsTUFBTSxTQUFTblQsR0FBR0MsTUFBTS9CLElBQUltQixVQUFVOFQsTUFBTTtBQUN2RG5VLE9BQU9kLElBQUlpVixNQUFNLFNBQVNuVCxHQUFHQyxNQUFNL0IsSUFBSW1CLFVBQVU4VCxNQUFNO0FBRXZERSxPQUFPblYsSUFBSWtWLFNBQVMsV0FBVy9NO0FBQy9CaU4sT0FBT3BWLElBQUltQixVQUFVK1QsU0FBUyxXQUFXL007QUFDekNySCxPQUFPcVUsS0FBS3RULFFBQVFDLEdBQUdDLE1BQU1xVCxLQUFLdlQ7QUFDbENHOztBQUNDbEIsT0FBT3FVLEtBQUtuVCxRQUFRRixHQUFHQyxNQUFNcVQsS0FBS3BUOzs7O0FBS3JDSSxNQUFNLGdCQUFnQjtBQUNyQkMsS0FBSyxhQUFhO0FBQ2pCMEI7SUFBSS9ELElBQUl3QztBQUNSeUIsSUFBSWpFLElBQUl3QztBQUNSNEIsSUFBSXBFLElBQUlrRDtBQUNSb0IsSUFBSXRFLElBQUl3QztBQUNSNlMsUUFBUXJWLElBQUl3QyxJQUFJLE1BQU11QixHQUFHRSxHQUFHRyxHQUFHRTtBQUMvQmdSLFFBQVF0VixJQUFJd0M7QUFFWmYsb0JBQW9CNFQsT0FBT3RSLEdBQUdFLEdBQUdHLEdBQUdFO0FBQ3BDN0Msb0JBQW9CNlQ7QUFFcEJBLE1BQU12TyxPQUFPaEQ7QUFDYnRDLG9CQUFvQjRULE9BQU9wUixHQUFHRyxHQUFHRTtBQUNqQzdDLG9CQUFvQjZULE9BQU92UjtBQUUzQkssRUFBRStCLFNBQVNtUDtBQUNYN1Qsb0JBQW9CNFQsT0FBT3BSLEdBQUdLO09BQzlCN0Msb0JBQW9CNlQsT0FBT3ZSLEdBQUdLOztBQUkvQi9CLEtBQUssY0FBYztBQUNsQjBCO0lBQUkvRCxJQUFJd0M7QUFDUnlCLElBQUlqRSxJQUFJd0M7QUFDUjRCLElBQUlwRSxJQUFJa0Q7QUFDUm9CLElBQUl0RSxJQUFJd0M7QUFDUjZTLFFBQVFyVixJQUFJd0MsSUFBSSxNQUFNdUIsR0FBR0UsR0FBR0csR0FBR0U7QUFDL0JnUixRQUFRdFYsSUFBSXdDO0FBRVpmLG9CQUFvQjRULE9BQU90UixHQUFHRSxHQUFHRyxHQUFHRTtBQUNwQzdDLG9CQUFvQjZUO0FBRXBCQSxNQUFNQyxRQUFReFI7QUFDZHRDLG9CQUFvQjRULE9BQU9wUixHQUFHRyxHQUFHRTtBQUNqQzdDLG9CQUFvQjZULE9BQU92UjtBQUUzQkssRUFBRW9SLFVBQVVGO0FBQ1o3VCxvQkFBb0I0VCxPQUFPcFIsR0FBR0s7T0FDOUI3QyxvQkFBb0I2VCxPQUFPbFIsR0FBR0w7O0FBRy9CMUIsS0FBSyxZQUFZO0FBQ2hCMEI7SUFBSS9ELElBQUl3QztBQUNSeUIsSUFBSWpFLElBQUl3QztBQUNSNEIsSUFBSXBFLElBQUlrRDtBQUNSb0IsSUFBSXRFLElBQUl3QztBQUNSNlMsUUFBUXJWLElBQUl3QyxJQUFJLE1BQU11QixHQUFHRSxHQUFHRyxHQUFHRTtBQUMvQmdSLFFBQVF0VixJQUFJd0M7QUFFWmYsb0JBQW9CNFQsT0FBT3RSLEdBQUdFLEdBQUdHLEdBQUdFO0FBQ3BDN0Msb0JBQW9CNlQ7QUFFcEJBLE1BQU12TyxPQUFPOUM7QUFDYkEsRUFBRXdSLE1BQU0xUjtBQUNSdEMsb0JBQW9CNFQsT0FBT2pSLEdBQUdFO0FBQzlCN0Msb0JBQW9CNlQsT0FBT3JSLEdBQUdGO0FBRTlCSyxFQUFFc1IsWUFBWXpSO0FBQ2R4QyxvQkFBb0I0VCxPQUFPL1E7T0FDM0I3QyxvQkFBb0I2VCxPQUFPclIsR0FBR0csR0FBR0w7O0FBR2xDMUIsS0FBSyxhQUFhO0FBQ2pCMEI7SUFBSS9ELElBQUl3QztBQUNSeUIsSUFBSWpFLElBQUl3QztBQUNSNEIsSUFBSXBFLElBQUlrRDtBQUNSb0IsSUFBSXRFLElBQUl3QztBQUNSNlMsUUFBUXJWLElBQUl3QyxJQUFJLE1BQU11QixHQUFHRSxHQUFHRyxHQUFHRTtBQUMvQmdSLFFBQVF0VixJQUFJd0M7QUFFWmYsb0JBQW9CNFQsT0FBT3RSLEdBQUdFLEdBQUdHLEdBQUdFO0FBQ3BDN0Msb0JBQW9CNlQ7QUFFcEJBLE1BQU12TyxPQUFPOUM7QUFDYkEsRUFBRTBSLE9BQU81UjtBQUNUdEMsb0JBQW9CNFQsT0FBT2pSLEdBQUdFO0FBQzlCN0Msb0JBQW9CNlQsT0FBT3ZSLEdBQUdFO0FBRTlCRyxFQUFFK0ssYUFBYWxMO0FBQ2Z4QyxvQkFBb0I0VCxPQUFPL1E7T0FDM0I3QyxvQkFBb0I2VCxPQUFPdlIsR0FBR0ssR0FBR0g7O0FBR2xDNUIsS0FBSyxhQUFhO0FBQ2pCRztZQUFZO0FBQ1pBLE1BQU14QyxJQUFJd0MsSUFBSSxNQUFNO0FBQ3BCQSxJQUFJMkcsR0FBRyxRQUFRO09BQUtpQjs7QUFDcEI1SCxJQUFJNkosTUFBTSxTQUFTO0FBQ25CN0osSUFBSTZKLE1BQU0sV0FBVztBQUVyQnZMLE9BQU8wQixJQUFJTCxRQUFRMEIsSUFBSS9CLEdBQUc4VDtBQUMxQjlVLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUMvQjNCLE9BQU8wQixJQUFJNkosTUFBTSxZQUFXdkssR0FBR1csR0FBRTtBQUVqQ0QsSUFBSTJELFNBQVNwRjtBQUNieUIsSUFBSWdILEtBQUs7QUFDVDFJLE9BQU9DLFFBQVFhLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDekNqQixPQUFPMEIsSUFBSUwsT0FBT0YsSUFBSUgsR0FBR0MsTUFBTWhCO0FBQy9CRCxPQUFPc0osV0FBV3RJLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDL0IzQixPQUFPMEIsSUFBSTZKLE1BQU0sWUFBV3ZLLEdBQUdXLEdBQUU7QUFFakNELElBQUlzSTtBQUNKdEksSUFBSWdILEtBQUs7QUFDVDFJLE9BQU9DLFFBQVFhLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDekNqQixPQUFPMEIsSUFBSUwsUUFBUTBCLElBQUkvQixHQUFHOFQ7QUFDMUI5VSxPQUFPc0osV0FBV3RJLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPMEIsSUFBSTZKLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7T0FDL0IzQixPQUFPMEIsSUFBSTZKLE1BQU0sWUFBV3ZLLEdBQUdXLEdBQUU7O0FBR2xDSixLQUFLLGFBQWE7QUFDakJHO1lBQVk7QUFDWkEsTUFBTXhDLElBQUl3QyxJQUFJLE1BQU07QUFDcEJBLElBQUkyRyxHQUFHLFFBQVE7T0FBS2lCOztBQUNwQjVILElBQUk2SixNQUFNLFNBQVM7QUFDbkI3SixJQUFJNkosTUFBTSxXQUFXO0FBRXJCdkwsT0FBTzBCLElBQUlMLFFBQVEwQixJQUFJL0IsR0FBRzhUO0FBQzFCOVUsT0FBT3NKLFdBQVd0SSxHQUFHQyxNQUFNO0FBQzNCakIsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQy9CM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBRWpDRCxJQUFJMkQsU0FBU3BGO0FBQ2J5QixJQUFJZ0gsS0FBSztBQUNUMUksT0FBT0MsUUFBUWEsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU8wQixJQUFJTCxPQUFPRixJQUFJSCxHQUFHQyxNQUFNaEI7QUFDL0JELE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR1csR0FBRTtBQUMvQjNCLE9BQU8wQixJQUFJNkosTUFBTSxZQUFXdkssR0FBR1csR0FBRTtBQUVqQ0QsSUFBSTZLO0FBQ0o3SyxJQUFJZ0gsS0FBSztBQUNUMUksT0FBT0MsUUFBUWEsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU8wQixJQUFJTCxRQUFRMEIsSUFBSS9CLEdBQUc4VDtBQUMxQjlVLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU8wQixJQUFJNkosTUFBTSxVQUFTdkssR0FBR1csR0FBRTtPQUMvQjNCLE9BQU8wQixJQUFJNkosTUFBTSxZQUFXdkssR0FBR1csR0FBRTs7QUFHbENKLEtBQUssWUFBWTtBQUNoQjBCO09BQU8vRCxJQUFJd0M7QUFDWHVCLElBQUkvRCxJQUFJd0MsTUFBTTJELFNBQVNvSTtBQUN2QnRLLElBQUlqRSxJQUFJd0MsTUFBTTJELFNBQVNvSTtBQUN2QnhLLEVBQUVzSSxNQUFNLFNBQVM7QUFDakJwSSxFQUFFb0ksTUFBTSxTQUFTO0FBRWpCNUssb0JBQW9COE0sTUFBTXhLLEdBQUdFO0FBQzdCbkQsT0FBT2lELEVBQUVzSSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQzdCM0IsT0FBT21ELEVBQUVvSSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBRTdCOEwsS0FBS3NIO0FBQ0xwVSxvQkFBb0I4TTtBQUNwQnpOLE9BQU9pRCxFQUFFNUIsUUFBUUwsR0FBR0MsTUFBTTtBQUMxQmpCLE9BQU9tRCxFQUFFOUIsUUFBUUwsR0FBR0MsTUFBTTtBQUMxQmpCLE9BQU9pRCxFQUFFc0ksTUFBTSxVQUFTdkssR0FBR1csR0FBRTtPQUM3QjNCLE9BQU9tRCxFQUFFb0ksTUFBTSxVQUFTdkssR0FBR1csR0FBRTs7QUFHOUJKLEtBQUssV0FBVztBQUNmMEI7T0FBTy9ELElBQUl3QztBQUNYdUIsSUFBSS9ELElBQUl3QyxNQUFNMkQsU0FBU29JO0FBQ3ZCdEssSUFBSWpFLElBQUl3QyxNQUFNMkQsU0FBU29JO0FBQ3ZCbkssSUFBSXBFLElBQUl3QztBQUNSc1QsUUFBUTlWLElBQUl1RDtBQUNad1MsUUFBUS9WLElBQUl1RDtBQUNaeVMsUUFBUWhXLElBQUl1RDtBQUNaUSxFQUFFc0ksTUFBTSxTQUFTO0FBQ2pCcEksRUFBRW9JLE1BQU0sU0FBUztBQUNqQmpJLEVBQUVpSSxNQUFNLFNBQVM7QUFDakJ5SixNQUFNekosTUFBTSxXQUFXO0FBQ3ZCMEosTUFBTTFKLE1BQU0sV0FBVztBQUN2QjJKLE1BQU0zSixNQUFNLFdBQVc7QUFDdkI1SyxvQkFBb0I4TSxNQUFNeEssR0FBR0U7QUFFN0JGLEVBQUVrUyxLQUFLSDtBQUNQclUsb0JBQW9COE0sTUFBTXVILE9BQU83UjtBQUNqQ3hDLG9CQUFvQnFVLE9BQU8vUjtBQUUzQkUsRUFBRWdTLEtBQUtGO0FBQ1B0VSxvQkFBb0I4TSxNQUFNdUgsT0FBT0M7QUFDakN0VSxvQkFBb0JxVSxPQUFPL1I7QUFDM0J0QyxvQkFBb0JzVSxPQUFPOVI7QUFFM0JBLEVBQUVnUyxLQUFLSDtBQUNQclUsb0JBQW9COE0sTUFBTXVILE9BQU9DO0FBQ2pDdFUsb0JBQW9CcVUsT0FBTy9SLEdBQUdFO0FBQzlCeEMsb0JBQW9Cc1U7QUFFcEJDLE1BQU03UCxTQUFTNFA7QUFDZjNSLEVBQUU2UixLQUFLRDtBQUNQNVIsRUFBRTZSO0FBQ0Z4VSxvQkFBb0I4TSxNQUFNdUgsT0FBT0M7QUFDakN0VSxvQkFBb0JxVSxPQUFPL1IsR0FBR0U7QUFDOUJ4QyxvQkFBb0JzVSxPQUFPQztBQUMzQnZVLG9CQUFvQnVVLE9BQU81UjtBQUUzQkEsRUFBRTZSLEtBQUs3UjtBQUNQM0Msb0JBQW9COE0sTUFBTXVILE9BQU9DO0FBQ2pDdFUsb0JBQW9CcVUsT0FBTy9SLEdBQUdFO0FBQzlCeEMsb0JBQW9Cc1UsT0FBT0M7QUFDM0J2VSxvQkFBb0J1VSxPQUFPNVI7QUFFM0J0RCxPQUFPaUQsRUFBRXNJLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDN0IzQixPQUFPbUQsRUFBRW9JLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDN0IzQixPQUFPc0QsRUFBRWlJLE1BQU0sVUFBU3ZLLEdBQUdXLEdBQUU7QUFDN0IzQixPQUFPZ1YsTUFBTXpKLE1BQU0sWUFBV3ZLLEdBQUdXLEdBQUU7QUFDbkMzQixPQUFPaVYsTUFBTTFKLE1BQU0sWUFBV3ZLLEdBQUdXLEdBQUU7T0FDbkMzQixPQUFPa1YsTUFBTTNKLE1BQU0sWUFBV3ZLLEdBQUdXLEdBQUU7O0FBR3BDSixLQUFLLGFBQWE7QUFDakIwQjtPQUFPL0QsSUFBSXdDO0FBQ1h1QixJQUFJL0QsSUFBSXdDLE1BQU1nVCxVQUFVakg7QUFDeEJ0SyxJQUFJakUsSUFBSXdDLE1BQU0yRCxTQUFTcEM7QUFDdkJLLElBQUlwRSxJQUFJd0MsTUFBTTJELFNBQVNwQztBQUN2Qk8sSUFBSXRFLElBQUl3QyxNQUFNMkQsU0FBUy9CO0FBQ3ZCSSxJQUFJeEUsSUFBSXdDLE1BQU0yRCxTQUFTN0I7QUFDdkJQLEVBQUVzSSxNQUFNLFNBQVM7QUFDakJwSSxFQUFFb0ksTUFBTSxTQUFTO0FBQ2pCakksRUFBRWlJLE1BQU0sU0FBUztBQUNqQi9ILEVBQUUrSCxNQUFNLFNBQVM7QUFDakI3SCxFQUFFNkgsTUFBTSxTQUFTO0FBRWpCNUssb0JBQW9COE0sTUFBTXhLO0FBQzFCdEMsb0JBQW9Cc0MsR0FBR0UsR0FBR0c7QUFDMUIzQyxvQkFBb0J3QztBQUNwQnhDLG9CQUFvQjJDLEdBQUdFO0FBQ3ZCN0Msb0JBQW9CNkMsR0FBR0U7QUFFdkJBLEVBQUUwUjtBQUNGelUsb0JBQW9COE0sTUFBTXhLO0FBQzFCdEMsb0JBQW9Cc0MsR0FBR0UsR0FBR0c7QUFDMUIzQyxvQkFBb0J3QztBQUNwQnhDLG9CQUFvQjJDLEdBQUdJO0FBQ3ZCL0Msb0JBQW9CNkM7QUFFcEJMLEVBQUVpUztBQUNGelUsb0JBQW9COE0sTUFBTXRLLEdBQUdHO0FBQzdCM0Msb0JBQW9Cc0M7QUFDcEJ0QyxvQkFBb0J3QztBQUNwQnhDLG9CQUFvQjJDLEdBQUdJO0FBQ3ZCL0Msb0JBQW9CNkM7QUFFcEJFLEVBQUUwUjtBQUNGelUsb0JBQW9COE0sTUFBTXRLLEdBQUdPO0FBQzdCL0Msb0JBQW9Cc0M7QUFDcEJ0QyxvQkFBb0J3QztBQUNwQnhDLG9CQUFvQjJDO0FBQ3BCM0Msb0JBQW9CNkM7QUFFcEJQLEVBQUUyUixZQUFZelI7QUFDZEcsRUFBRStCLFNBQVNwQztBQUNYTyxFQUFFNkIsU0FBU3BDO0FBQ1h0QyxvQkFBb0I4TSxNQUFNdEssR0FBR0YsR0FBR1M7QUFDaEMvQyxvQkFBb0JzQyxHQUFHSyxHQUFHRTtBQUMxQjdDLG9CQUFvQndDO0FBQ3BCeEMsb0JBQW9CMkM7QUFDcEIzQyxvQkFBb0I2QztBQUVwQkEsRUFBRTRSO0FBQ0Z6VSxvQkFBb0I4TSxNQUFNdEssR0FBR0csR0FBR0UsR0FBR0U7QUFDbkMvQyxvQkFBb0JzQztBQUNwQnRDLG9CQUFvQndDO0FBQ3BCeEMsb0JBQW9CMkM7T0FDcEIzQyxvQkFBb0I2Qzs7QUFJckJqQyxLQUFLLGNBQWM7QUFDbEIwQjtPQUFPL0QsSUFBSXdDO0FBQ1h1QixJQUFJL0QsSUFBSXdDLE1BQU0yRCxTQUFTb0k7QUFDdkJ0SyxJQUFJakUsSUFBSXdDLE1BQU0yRCxTQUFTb0k7QUFDdkJuSyxJQUFJcEUsSUFBSXdDLE1BQU0yRCxTQUFTcEM7QUFDdkJPLElBQUl0RSxJQUFJd0MsTUFBTTJELFNBQVNwQztBQUN2QlMsSUFBSXhFLElBQUl3QyxNQUFNMkQsU0FBUzdCO0FBRXZCUCxFQUFFd0U7QUFBVy9ELEVBQUUrRDtBQUNmOUcsb0JBQW9COE0sTUFBTXhLLEdBQUdFO0FBQzdCeEMsb0JBQW9Cc0MsR0FBR0ssR0FBR0U7QUFDMUI3QyxvQkFBb0J3QztBQUNwQnhDLG9CQUFvQjJDO0FBQ3BCM0Msb0JBQW9CNkMsR0FBR0U7QUFFdkJKLEVBQUVtRSxRQUFRL0QsR0FBRzJCLFNBQVNsQztBQUN0QnhDLG9CQUFvQjhNLE1BQU14SyxHQUFHRTtBQUM3QnhDLG9CQUFvQnNDLEdBQUdTLEdBQUdGO0FBQzFCN0Msb0JBQW9Cd0MsR0FBR0c7QUFDdkIzQyxvQkFBb0IyQztBQUNwQjNDLG9CQUFvQjZDO0FBRXBCQSxFQUFFaUUsUUFBUS9EO0FBQ1YvQyxvQkFBb0I4TSxNQUFNeEssR0FBR0U7QUFDN0J4QyxvQkFBb0JzQyxHQUFHUztBQUN2Qi9DLG9CQUFvQndDLEdBQUdHO0FBQ3ZCM0Msb0JBQW9CMkM7QUFDcEIzQyxvQkFBb0I2QztBQUVwQkwsRUFBRXNFLFFBQVFuRTtBQUNWM0Msb0JBQW9COE0sTUFBTXhLLEdBQUdLO0FBQzdCM0Msb0JBQW9Cc0MsR0FBR1M7QUFDdkIvQyxvQkFBb0J3QztBQUNwQnhDLG9CQUFvQjJDO0FBQ3BCM0Msb0JBQW9CNkM7QUFFcEJQLEVBQUV3RSxRQUFRakU7QUFDVjdDLG9CQUFvQjhNLE1BQU1qSyxHQUFHRjtBQUM3QjNDLG9CQUFvQnNDLEdBQUdTO0FBQ3ZCL0Msb0JBQW9Cd0M7QUFDcEJ4QyxvQkFBb0IyQztBQUNwQjNDLG9CQUFvQjZDO0FBRXBCTCxFQUFFc0UsUUFBUWpFO0FBQ1Y3QyxvQkFBb0I4TSxNQUFNbks7QUFDMUIzQyxvQkFBb0JzQyxHQUFHUztBQUN2Qi9DLG9CQUFvQndDO0FBQ3BCeEMsb0JBQW9CMkM7T0FDcEIzQyxvQkFBb0I2Qzs7QUFHckJqQyxLQUFLLFlBQVk7QUFDaEIwQjtZQUFZO0FBQ1pvUSxVQUFVblUsSUFBSWU7QUFDZG9WLE9BQU87QUFBQ2xRLE9BQU80SDtPQUFNO0FBQUN6RyxPQUFNOztBQUFTc0UsUUFBTztBQUFDckUsUUFBTzs7QUFBU3NFLFVBQVM7QUFBQ2dCLFNBQVE7Ozs7QUFDL0U1SSxJQUFJL0QsSUFBSXdDLElBQUkyVCxNQUFNLG1CQUFtQmhRLFNBQVNwRjtBQUM5Q2dELEVBQUVzSSxNQUFNLFNBQVM7QUFDakJ0SSxFQUFFb0YsR0FBRyxnQkFBZ0I7T0FBS2lCOztBQUMxQmtGLFNBQVN0UCxJQUFJd0MsTUFBTTJELFNBQVNwQztBQUM1QndMLFNBQVN2UCxJQUFJbUQsT0FBT2dELFNBQVNwQztBQUM3QkUsSUFBSUYsRUFBRXFTO0FBRU5yUyxFQUFFc0ksTUFBTSxXQUFXO0FBQ25CdEksRUFBRXlGLEtBQUs7QUFDUDFJLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU9pRCxFQUFFNUIsUUFBUUwsR0FBR0MsTUFBTW9TO0FBQzFCclQsT0FBT2lELEVBQUVzRSxJQUFJLFVBQVN2RyxHQUFHQyxNQUFNO0FBQy9CakIsT0FBT2lELEVBQUVzRSxJQUFJLFdBQVV2RyxHQUFHQyxNQUFNO0FBQ2hDakIsT0FBT2lELEVBQUVzRSxJQUFJLFlBQVd2RyxHQUFHQyxNQUFNO0FBQ2pDakIsT0FBT2lELEVBQUVvUCxTQUFTdFIsUUFBUUMsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU9pRCxFQUFFbkMsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU9pRCxFQUFFbkMsU0FBUyxHQUFHSyxHQUFHMEQsYUFBYTdELEdBQUdDLE1BQU07QUFDOUNqQixPQUFPaUQsRUFBRW5DLFNBQVMsSUFBSUUsR0FBR0MsTUFBTXVOO0FBQy9CeE8sT0FBT2lELEVBQUVuQyxTQUFTLElBQUlFLEdBQUdDLE1BQU13TjtBQUMvQnpPLE9BQU9tRCxHQUFHSixJQUFJL0IsR0FBR0MsTUFBTWdDO0FBQ3ZCakQsT0FBT21ELEVBQUU5QixRQUFRTCxHQUFHQyxNQUFNO0FBQzFCb1MsUUFBUXBOLE9BQU85QztBQUVmbkQsT0FBT21ELEVBQUU5QixRQUFRTCxHQUFHQyxNQUFNb1M7QUFDMUJyVCxPQUFPbUQsRUFBRW9FLElBQUksVUFBU3ZHLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPbUQsRUFBRW9FLElBQUksV0FBVXZHLEdBQUdDLE1BQU07QUFDaENqQixPQUFPbUQsRUFBRW9FLElBQUksWUFBV3ZHLEdBQUdDLE1BQU07QUFDakNqQixPQUFPbUQsRUFBRWtQLFNBQVN0UixRQUFRQyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBT21ELEVBQUVyQyxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBT21ELEVBQUVyQyxTQUFTLEdBQUdLLEdBQUcwRCxhQUFhN0QsR0FBR0MsTUFBTTtBQUM5Q2pCLE9BQU9tRCxFQUFFckMsU0FBUyxJQUFJaUMsSUFBSS9CLEdBQUdDLE1BQU1nQyxFQUFFbkMsU0FBUztBQUM5Q2QsT0FBT21ELEVBQUVyQyxTQUFTLElBQUlpQyxJQUFJL0IsR0FBR0MsTUFBTXVOO0FBQ25DeE8sT0FBT21ELEVBQUVyQyxTQUFTLElBQUlpQyxJQUFJL0IsR0FBR0MsTUFBTXdOO0FBQ25Dek8sT0FBT21ELEVBQUVvSSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQzdCM0IsT0FBT21ELEVBQUVvSSxNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBRS9CM0IsT0FBT3NKLFdBQVd0SSxHQUFHQyxNQUFNO0FBQzNCa0MsRUFBRXVGLEtBQUs7QUFDUDFJLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUUzQmdDLEVBQUUwRTtBQUNGMUUsRUFBRXlGLEtBQUs7QUFDUDFJLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUMzQmtDLEVBQUV1RixLQUFLO09BQ1AxSSxPQUFPc0osV0FBV3RJLEdBQUdDLE1BQU07O0FBRzVCTSxLQUFLLDRDQUE0QztBQUNoREc7TUFBTXhDLElBQUl3QztBQUVWMUIsT0FBTzBCLElBQUlzSixLQUFLLFdBQVVoSyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUlzSixLQUFLLFVBQVUsTUFBS2hLLEdBQUdDLE1BQU1TO0FBQ3hDMUIsT0FBTzBCLElBQUlzSixLQUFLLFdBQVVoSyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUlzSixLQUFLLFVBQVUsUUFBT2hLLEdBQUdDLE1BQU1TO0FBQzFDMUIsT0FBTzBCLElBQUlzSixLQUFLLFdBQVVoSyxHQUFHQyxNQUFNO0FBQ25DakIsT0FBTzBCLElBQUlzSixLQUFLLGVBQWUsQ0FBQyxHQUFFLEdBQUUsS0FBSWhLLEdBQUdDLE1BQU1TO0FBQ2pEMUIsT0FBTzBCLElBQUlzSixLQUFLLGdCQUFlaEssR0FBR3NLLElBQUksQ0FBQyxHQUFFLEdBQUU7QUFDM0N0TCxPQUFPMEIsSUFBSVAsR0FBR29VLFFBQVF2VSxHQUFHQyxNQUFNO0FBQy9CakIsT0FBTzBCLElBQUlQLEdBQUdxVSxhQUFheFUsR0FBR3NLLElBQUksQ0FBQyxHQUFFLEdBQUU7QUFFdkM1SixJQUFJUCxHQUFHc1UsV0FBVztBQUNsQnpWLE9BQU8wQixJQUFJUCxHQUFHc1UsVUFBVXpVLEdBQUdDLE1BQU07QUFDakNqQixPQUFPMEIsSUFBSXNKLEtBQUssYUFBWWhLLEdBQUdDLE1BQU07QUFFckNqQixPQUFPeVQsT0FBT0MsS0FBS2hTLElBQUlQLEtBQUs0QixJQUFJL0IsR0FBR2dDLFFBQVE7QUFFM0N0QixJQUFJc0osS0FBSyxpQkFBaUI7QUFDMUJoTCxPQUFPeVQsT0FBT0MsS0FBS2hTLElBQUlQLEtBQUtILEdBQUdnQyxRQUFRO0FBRXZDdEIsSUFBSXNKLEtBQUssaUJBQWlCO0FBQzFCaEwsT0FBT3lULE9BQU9DLEtBQUtoUyxJQUFJUCxLQUFLSCxHQUFHZ0MsUUFBUTtBQUV2Q3RCLElBQUlzSixLQUFLLGlCQUFpQjtBQUMxQmhMLE9BQU95VCxPQUFPQyxLQUFLaFMsSUFBSVAsS0FBS0gsR0FBR2dDLFFBQVE7QUFFdkN0QixJQUFJc0osS0FBSztBQUFDeEcsS0FBSTtBQUFLQyxLQUFJOztBQUN2QnpFLE9BQU8wQixJQUFJUCxHQUFHcUQsS0FBS3hELEdBQUdDLE1BQU07T0FDNUJqQixPQUFPMEIsSUFBSVAsR0FBR3NELEtBQUt6RCxHQUFHQyxNQUFNOztBQUc3Qk0sS0FBSyw2Q0FBNkM7QUFDakRHO01BQU14QyxJQUFJd0M7QUFFVjFCLE9BQU8wQixJQUFJNEssS0FBSyxXQUFVdEwsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wQixJQUFJNEssS0FBSyxVQUFVLE1BQUt0TCxHQUFHQyxNQUFNUztBQUN4QzFCLE9BQU8wQixJQUFJNEssS0FBSyxXQUFVdEwsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wQixJQUFJNEssS0FBSyxVQUFVLFFBQU90TCxHQUFHQyxNQUFNUztBQUMxQzFCLE9BQU8wQixJQUFJNEssS0FBSyxXQUFVdEwsR0FBR0MsTUFBTTtBQUNuQ2pCLE9BQU8wQixJQUFJNEssS0FBSyxlQUFlLENBQUMsR0FBRSxHQUFFLEtBQUl0TCxHQUFHQyxNQUFNUztBQUNqRDFCLE9BQU8wQixJQUFJNEssS0FBSyxnQkFBZXRMLEdBQUdDLE1BQU07QUFDeENqQixPQUFPMEIsSUFBSVAsR0FBR3VELGFBQWEsV0FBVTFELEdBQUdDLE1BQU07QUFDOUNqQixPQUFPMEIsSUFBSVAsR0FBR3VELGFBQWEsZ0JBQWUxRCxHQUFHc0ssSUFBSTtBQUVqRDVKLElBQUlQLEdBQUdYLGFBQWEsWUFBWTtBQUNoQ1IsT0FBTzBCLElBQUlQLEdBQUd1RCxhQUFhLGFBQVkxRCxHQUFHQyxNQUFNO0FBQ2hEakIsT0FBTzBCLElBQUk0SyxLQUFLLGFBQVl0TCxHQUFHQyxNQUFNO0FBRXJDakIsT0FBTzBCLElBQUlQLEdBQUd1RCxhQUFhLGtCQUFpQjFELEdBQUdDLE1BQU07QUFFckRTLElBQUk0SyxLQUFLLGlCQUFpQjtBQUMxQnRNLE9BQU8wQixJQUFJUCxHQUFHdUQsYUFBYSxrQkFBaUIxRCxHQUFHQyxNQUFNO0FBRXJEUyxJQUFJNEssS0FBSztBQUNUdE0sT0FBTzBCLElBQUlQLEdBQUd1RCxhQUFhLGtCQUFpQjFELEdBQUdDLE1BQU07QUFFckRTLElBQUk0SyxLQUFLLGlCQUFpQjtBQUMxQnRNLE9BQU8wQixJQUFJUCxHQUFHdUQsYUFBYSxrQkFBaUIxRCxHQUFHQyxNQUFNO0FBRXJEUyxJQUFJNEssS0FBSztBQUFDOUgsS0FBSTtBQUFLQyxLQUFJOztBQUN2QnpFLE9BQU8wQixJQUFJUCxHQUFHdUQsYUFBYSxRQUFPMUQsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU8wQixJQUFJUCxHQUFHdUQsYUFBYSxRQUFPMUQsR0FBR0MsTUFBTTtBQUUzQ1MsSUFBSTRLLEtBQUs7QUFBQzlILEtBQUk7QUFBS0MsS0FBSTs7QUFDdkJ6RSxPQUFPMEIsSUFBSVAsR0FBR3VELGFBQWEsUUFBTzFELEdBQUdDLE1BQU07T0FDM0NqQixPQUFPMEIsSUFBSVAsR0FBR3VELGFBQWEsUUFBTzFELEdBQUdDLE1BQU07O0FBRzVDTSxLQUFLLG1DQUFtQztBQUN2Q0c7TUFBTXhDLElBQUl3QyxJQUFJLE1BQU14QyxJQUFJd0MsT0FBTyxhQUFheEMsSUFBSW1ELFFBQVFuRCxJQUFJd0M7QUFFNUQxQixPQUFPMEIsSUFBSVosU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU8wQixJQUFJd0UsTUFBTWxGLEdBQUdDLE1BQU1TLElBQUlQLEdBQUdnTDtBQUNqQ25NLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBRXJDUyxJQUFJd0UsT0FBTztBQUNYbEcsT0FBTzBCLElBQUl3RSxNQUFNbEYsR0FBR0MsTUFBTTtBQUMxQmpCLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzBCLElBQUlaLFNBQVMsR0FBR0ssR0FBR1osSUFBSVMsR0FBR0MsTUFBTTtPQUN2Q2pCLE9BQU8wQixJQUFJWixTQUFTLEdBQUdLLEdBQUc4RCxTQUFTQyxlQUFlbEUsR0FBR0MsTUFBTTs7QUFHNURNLEtBQUsscUNBQXFDO0FBQ3pDRztNQUFNeEMsSUFBSXdDLElBQUksTUFBTSxhQUFheEMsSUFBSW1ELEtBQUssTUFBTTtBQUVoRHJDLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzBCLElBQUlVLE1BQU1wQixHQUFHQyxNQUFNUyxJQUFJUCxHQUFHMEQ7QUFDakM3RSxPQUFPMEIsSUFBSVUsTUFBTXBCLEdBQUdDLE1BQU07QUFDMUJqQixPQUFPMEIsSUFBSVosU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUVyQ1MsSUFBSVUsT0FBTztBQUNYcEMsT0FBTzBCLElBQUlVLE1BQU1wQixHQUFHQyxNQUFNO0FBQzFCakIsT0FBTzBCLElBQUlQLEdBQUcwRCxhQUFhN0QsR0FBR0MsTUFBTTtBQUNwQ2pCLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO09BQ3JDakIsT0FBTzBCLElBQUlaLFNBQVMsR0FBR0ssR0FBR3lELFVBQVU1RCxHQUFHQyxNQUFNOztBQUc5Q00sS0FBSyxhQUFhO0FBQ2pCRztNQUFNeEMsSUFBSXdDLElBQUk7U0FBTTs7QUFFcEIxQixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWdVLFNBQVM7QUFDYjFWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJZ1UsU0FBUztBQUNiMVYsT0FBTzBCLElBQUk0RCxJQUFJbEMsV0FBV3BDLEdBQUdDLE1BQU07QUFFbkNTLElBQUk0RCxJQUFJbEMsWUFBWTFCLElBQUk0RCxJQUFJbEMsVUFBVXFFLFFBQVEsZ0JBQWdCO0FBQzlEekgsT0FBTzBCLElBQUk0RCxJQUFJbEMsV0FBV3BDLEdBQUdDLE1BQU07QUFFbkNTLElBQUlnVSxTQUFTO0FBQ2IxVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWdVLFNBQVM7QUFDYjFWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJZ1UsU0FBUztPQUNiMVYsT0FBTzBCLElBQUk0RCxJQUFJbEMsV0FBV3BDLEdBQUdDLE1BQU07O0FBR3BDTSxLQUFLLGdCQUFnQjtBQUNwQkc7TUFBTXhDLElBQUl3QyxJQUFJO1NBQU07O0FBRXBCMUIsT0FBTzBCLElBQUk0RCxJQUFJbEMsV0FBV3BDLEdBQUdDLE1BQU07QUFFbkNTLElBQUlnVSxTQUFTO0FBQ2IxVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWlVLFlBQVk7QUFDaEIzVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWlVLFlBQVk7QUFDaEIzVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWlVLFlBQVk7QUFDaEIzVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWlVLFlBQVk7QUFDaEIzVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWlVLFlBQVk7T0FDaEIzVixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTs7QUFHcENNLEtBQUssZ0JBQWdCO0FBQ3BCRztNQUFNeEMsSUFBSXdDLElBQUk7U0FBTTs7QUFFcEIxQixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWtVLFlBQVk7QUFDaEI1VixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWtVLFlBQVk7QUFDaEI1VixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWtVLFlBQVk7QUFDaEI1VixPQUFPMEIsSUFBSTRELElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUVuQ1MsSUFBSWtVLFlBQVk7QUFDaEJsVSxJQUFJa1UsWUFBWTtBQUNoQjVWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJa1UsWUFBWTtBQUNoQjVWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJa1UsWUFBWTtBQUNoQjVWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJa1UsWUFBWTtBQUNoQjVWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNO0FBRW5DUyxJQUFJa1UsWUFBWTtPQUNoQjVWLE9BQU8wQixJQUFJNEQsSUFBSWxDLFdBQVdwQyxHQUFHQyxNQUFNOztBQUdwQ00sS0FBSyxXQUFXO0FBQ2ZKO0tBQUtoQyxJQUFJdUMsSUFBSXdPO0tBQUk7O0FBQ2pCbFEsT0FBT21CLEdBQUcrTyxLQUFLbFAsR0FBR0MsTUFBTTtBQUN4QmpCLE9BQU9tQixHQUFHNEQsUUFBUW1MLEtBQUtsUCxHQUFHQyxNQUFNO0FBQ2hDakIsT0FBT21CLEdBQUdtTCxLQUFLLGFBQVl0TCxHQUFHQyxNQUFNO0FBRXBDRSxHQUFHMFUsT0FBTztBQUNWN1YsT0FBT21CLEdBQUcrTyxLQUFLbFAsR0FBR0MsTUFBTTtBQUN4QmpCLE9BQU9tQixHQUFHNEQsUUFBUW1MLEtBQUtsUCxHQUFHQyxNQUFNO09BQ2hDakIsT0FBT21CLEdBQUdtTCxLQUFLLGFBQVl0TCxHQUFHQyxNQUFNOztPQUtyQ00sS0FBSyxrRUFBa0U7QUFDdEVHO09BQU94QyxJQUFJa0QsS0FBSztBQUNoQnBDLE9BQU9vQyxLQUFLQSxNQUFNcEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU9vQyxLQUFLa0QsSUFBSU4sV0FBV2pFLFFBQVFDLEdBQUdDLE1BQU07QUFFNUNtQixLQUFLNkQsT0FBTy9HLElBQUlrRCxLQUFLO0FBQ3JCcEMsT0FBT29DLEtBQUtBLE1BQU1wQixHQUFHQyxNQUFNO0FBQzNCakIsT0FBT29DLEtBQUtrRCxJQUFJTixXQUFXakUsUUFBUUMsR0FBR0MsTUFBTTtBQUU1Q21CLEtBQUtxUyxRQUFRdlYsSUFBSXdDLElBQUksTUFBTTtBQUMzQjFCLE9BQU9vQyxLQUFLQSxNQUFNcEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU9vQyxLQUFLa0QsSUFBSU4sV0FBV2pFLFFBQVFDLEdBQUdDLE1BQU07QUFFNUNTLE1BQU14QyxJQUFJd0MsSUFBSSxNQUFNO0FBQ3BCQSxJQUFJMkQsU0FBU2pEO0FBQ2JwQyxPQUFPb0MsS0FBS0EsTUFBTXBCLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPb0MsS0FBS2tELElBQUlOLFdBQVdqRSxRQUFRQyxHQUFHQyxNQUFNO09BQzVDakIsT0FBTzBCLElBQUlMLFFBQVFMLEdBQUdDLE1BQU07OztBQUs5QkssTUFBTSxTQUFTO0FBQ2RDLEtBQUssOEpBQThKO0FBQ2xLMEI7VUFBVS9ELElBQUllO0FBQ2R5QixNQUFNeEMsSUFBSXdDO0FBQ1Z1QixJQUFJL0QsSUFBSXdDLE1BQU0yRCxTQUFTM0Q7QUFDdkJ5QixJQUFJakUsSUFBSXVELFVBQVU0QyxTQUFTM0Q7QUFDM0I0QixJQUFJcEUsSUFBSXdDLE1BQU0yRCxTQUFTM0Q7QUFFdkJmLG9CQUFvQjBTO0FBQ3BCMVMsb0JBQW9CZSxLQUFLdUIsR0FBR0UsR0FBR0c7QUFFL0JwRSxJQUFJa0ksTUFBTSxDQUFDbkUsR0FBRUUsR0FBRUcsSUFDYitCLFNBQVNnTyxTQUNUbE8sTUFBTSxXQUFXLEtBQ2pCb0MsSUFBSTtBQUFDaEIsUUFBTztBQUFJQyxpQkFBZ0I7R0FDaENQLE9BQU87QUFFVHRGLG9CQUFvQjBTLFNBQVNwUSxHQUFHRSxHQUFHRztBQUNuQzNDLG9CQUFvQmU7QUFFcEIxQixPQUFPb0csaUJBQWlCbkQsRUFBRTlCLElBQUkwSyxTQUFTN0ssR0FBR0MsTUFBTTtBQUNoRGpCLE9BQU9vRyxpQkFBaUI5QyxFQUFFbkMsSUFBSTBLLFNBQVM3SyxHQUFHQyxNQUFNO0FBQ2hEakIsT0FBT29HLGlCQUFpQmpELEVBQUVoQyxJQUFJb0YsUUFBUXZGLEdBQUdDLE1BQU07QUFDL0NqQixPQUFPaUQsRUFBRW5DLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPbUQsRUFBRXJDLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDbkNqQixPQUFPc0QsRUFBRXhDLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07T0FDbkNqQixPQUFPbUQsRUFBRXJDLFNBQVMsR0FBR0ssR0FBRzBELGFBQWE3RCxHQUFHQyxNQUFNOztBQUcvQ00sS0FBSyxxS0FBcUs7QUFDekswQjtVQUFVL0QsSUFBSWU7QUFDZGdELElBQUkvRCxJQUFJd0MsTUFBTTJELFNBQVNnTztBQUN2QmxRLElBQUlqRSxJQUFJdUQsVUFBVTRDLFNBQVNnTztBQUMzQi9QLElBQUlwRSxJQUFJd0MsTUFBTTJELFNBQVNnTztBQUV2QnlDLFNBQVM1VyxJQUFJa0ksTUFBTSxDQUFDbkUsR0FBRUUsR0FBRUc7QUFDeEJ5UyxTQUFTN1csSUFBSWtJLE1BQU0sQ0FBQ25FLEdBQUVFLEdBQUVHLElBQUk7QUFFNUJ0RCxPQUFPOFYsT0FBTzNRLE1BQU0sVUFBVW5FLEdBQUdDLE1BQU02VTtBQUN2QzlWLE9BQU84VixPQUFPM1EsTUFBTSxTQUFTLEtBQUtuRSxHQUFHQyxNQUFNNlU7QUFDM0M5VixPQUFPK1YsT0FBTzVRLE1BQU0sVUFBVW5FLEdBQUdzSyxJQUFJLENBQUMsUUFBUSxRQUFRO0FBQ3REdEwsT0FBTytWLE9BQU81USxNQUFNLFNBQVMsS0FBS25FLEdBQUdzSyxJQUFJLENBQUNySSxHQUFFRSxHQUFFRztPQUM5Q3RELE9BQU8rVixPQUFPNVEsTUFBTSxVQUFVbkUsR0FBR3NLLElBQUksQ0FBQyxRQUFRLFFBQVE7O0FBR3ZEL0osS0FBSywySEFBMkg7QUFDL0gwQjtVQUFVL0QsSUFBSWU7QUFDZHlCLE1BQU14QyxJQUFJd0M7QUFDVnVCLElBQUkvRCxJQUFJd0MsTUFBTTJELFNBQVMzRDtBQUN2QnlCLElBQUlqRSxJQUFJdUQsVUFBVTRDLFNBQVMzRDtBQUMzQjRCLElBQUlwRSxJQUFJd0MsTUFBTTJELFNBQVMzRDtBQUV2QnNVLFNBQVM5VyxJQUFJa0ksTUFBTSxDQUFDbkUsR0FBRUUsR0FBRUcsSUFDdEIrQixTQUFTZ08sU0FDVGxPLE1BQU0sV0FBVyxLQUNqQm9DLElBQUk7QUFBQ2hCLFFBQU87QUFBSUMsaUJBQWdCO0dBQ2hDUCxPQUFPLG1CQUNQZCxNQUFNLFdBQ1A7QUFFRG5GLE9BQU9nVyxRQUFRaFYsR0FBR3NLLElBQUksQ0FBQyxPQUFNLE9BQU07T0FDbkN0TCxPQUFPZCxJQUFJa0ksTUFBTSxDQUFDbkUsR0FBRUUsR0FBRUcsSUFBSWlFLElBQUksU0FBUyxRQUFRQSxJQUFJLFNBQVEsYUFBV3ZHLEdBQUdzSyxJQUFJLENBQUMsUUFBTyxRQUFPOztBQUc3Ri9KLEtBQUsseUtBQXlLO0FBQzdLMEI7VUFBVS9ELElBQUllO0FBQ2R5QixNQUFNeEMsSUFBSXdDO0FBQ1Z1QixJQUFJL0QsSUFBSXdDLE1BQU0yRCxTQUFTM0Q7QUFDdkJ5QixJQUFJakUsSUFBSXVELFVBQVU0QyxTQUFTM0Q7QUFDM0I0QixJQUFJcEUsSUFBSXdDLE1BQU0yRCxTQUFTM0Q7QUFFdkJzVSxTQUFTOVcsSUFBSWtJLE1BQU0sQ0FBQ25FLEdBQUVFLEdBQUVHLElBQ3RCK0IsU0FBU2dPLFNBQ1RsTyxNQUFNLFdBQVcsS0FDakJvQyxJQUFJO0FBQUNoQixRQUFPO0FBQUlDLGlCQUFnQjtHQUNoQ1AsT0FBTyxtQkFDUixVQUFRLE1BQ1BkLE1BQU07QUFFUm5GLE9BQU9nVyxRQUFRaFYsR0FBR3NLLElBQUksQ0FBQyxPQUFNLE9BQU07T0FDbkN0TCxPQUFPZCxJQUFJa0ksTUFBTSxDQUFDbkUsR0FBRUUsR0FBRUcsSUFBSWlFLElBQUksU0FBUyxRQUFRQSxJQUFJLFVBQVUsUUFBTyxVQUFRLE1BQU1BLElBQUksVUFBVXZHLEdBQUdzSyxJQUFJLENBQUMsUUFBTyxRQUFPOztBQUd2SC9KLEtBQUssa0lBQWtJO0FBQ3RJMEI7SUFBSS9ELElBQUl3QyxJQUFJLE1BQU0sT0FBTzJELFNBQVNwRjtBQUNsQ2tELElBQUlqRSxJQUFJd0MsSUFBSSxNQUFNLE9BQU8yRCxTQUFTcEY7QUFDbENxRCxJQUFJcEUsSUFBSXdDLElBQUksTUFBTSxPQUFPMkQsU0FBU3BGO0FBQ2xDZ1csTUFBTSxDQUFDaFQsR0FBRUUsR0FBRUc7QUFDWHRELE9BQU9kLElBQUlrSSxNQUFNNk8sS0FBSzVPLFVBQVV0RSxJQUFJL0IsR0FBR0MsTUFBTWdWO0FBQzdDalcsT0FBT2QsSUFBSWtJLE1BQU02TyxLQUFLNU8sVUFBVXJHLEdBQUdzSyxJQUFJLENBQUNySSxHQUFFRSxHQUFFRztBQUM1Q3RELE9BQU9kLElBQUlrSSxNQUFNNk8sS0FBSzNELFVBQVVqTCxVQUFVckcsR0FBR3NLLElBQUksQ0FBQ2hJLEdBQUVILEdBQUVGO0FBQ3REakQsT0FBT2QsSUFBSWtJLE1BQU02TyxLQUFJLEdBQUc3VCxRQUFRcEIsR0FBR3NLLElBQUksQ0FBQyxPQUFNLE9BQU07QUFDcER0TCxPQUFPZCxJQUFJa0ksTUFBTTZPLEtBQUksR0FBRzNELFVBQVVsUSxRQUFRcEIsR0FBR3NLLElBQUksQ0FBQyxPQUFNLE9BQU07QUFDOUR0TCxPQUFPZCxJQUFJa0ksTUFBTTZPLEtBQUksR0FBRzNELFVBQVVsUSxRQUFRcEIsR0FBR3NLLElBQUksQ0FBQyxPQUFNLE9BQU07T0FDOUR0TCxPQUFPZCxJQUFJa0ksTUFBTTZPLEtBQUksR0FBRzNELFVBQVVBLFVBQVVsUSxRQUFRcEIsR0FBR3NLLElBQUksQ0FBQyxPQUFNLE9BQU07O09BR3pFL0osS0FBSywyREFBMkQ7QUFDL0Q2RjtPQUFPbEksSUFBSXdDLElBQUksTUFBTTtBQUNyQm1HLE9BQU8zSSxJQUFJd0MsSUFBSSxNQUFNO0FBQ3JCMEYsUUFBUWxJLElBQUlrSSxNQUFNLENBQUNRLE1BQU1DLE9BQU87QUFFaEM3SCxPQUFPb0gsTUFBTWxCLFFBQVFsRixHQUFHc0ssSUFBSSxDQUFDLFlBQVk7QUFDekN0TCxPQUFPb0gsTUFBTWhGLFFBQVFwQixHQUFHc0ssSUFBSSxDQUFDLFlBQVk7QUFFekNsRSxNQUFNbEIsS0FBSztBQUNYbEcsT0FBT29ILE1BQU1sQixRQUFRbEYsR0FBR3NLLElBQUksQ0FBQyx3QkFBd0I7QUFDckR0TCxPQUFPb0gsTUFBTWhGLFFBQVFwQixHQUFHc0ssSUFBSSxDQUFDLFdBQVc7QUFFeENsRSxNQUFNaEYsS0FBSztBQUNYcEMsT0FBT29ILE1BQU1sQixRQUFRbEYsR0FBR3NLLElBQUksQ0FBQyxXQUFXO09BQ3hDdEwsT0FBT29ILE1BQU1oRixRQUFRcEIsR0FBR3NLLElBQUksQ0FBQyxXQUFXOzs7QUFJMUNoSyxNQUFNLGFBQWE7QUFDbEJDLEtBQUssZ0VBQWdFO0FBQ3BFc1I7V0FBVzNULElBQUkyVCxTQUFTLENBQUMsUUFBUXRTO0lBQUc7O0FBRXBDUCxPQUFPLE9BQU82UyxVQUFVN1IsR0FBR0MsTUFBTTtBQUNqQ2pCLE9BQU82UyxTQUFTaFEsTUFBTTdCLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPNlMsU0FBUzlOLFNBQVMvRCxHQUFHc0ssSUFBSS9LO0lBQUc7O09BQ25DUCxPQUFPNlMsU0FBUy9SLFVBQVVFLEdBQUdzSyxJQUFJOztBQUdsQy9KLEtBQUsseUdBQXlHO0FBQzdHMlU7V0FBV2hYLElBQUkyVCxTQUFTLENBQUMsT0FBT3pQO1dBQVU7R0FBWTtBQUN0RDhTLFNBQVNyRCxTQUFTQztBQUNsQm9ELE9BQU8zSyxNQUFNLFNBQVM7QUFDdEI0SyxTQUFTalgsSUFBSTJUO0FBRWI3UyxPQUFPa1csT0FBTy9VLElBQUlILEdBQUdXLEdBQUdDLFdBQVdDO0FBQ25DN0IsT0FBT21XLE9BQU9oVixJQUFJSCxHQUFHVyxHQUFHQyxXQUFXQztBQUNuQzdCLE9BQU9rVyxRQUFRblQsSUFBSS9CLEdBQUdDLE1BQU1rVjtBQUM1Qm5XLE9BQU9rVyxPQUFPL1UsSUFBSTRCLElBQUkvQixHQUFHQyxNQUFNa1YsT0FBT2hWO0FBQ3RDbkIsT0FBT2tXLE9BQU8zSyxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQ2xDM0IsT0FBT21XLE9BQU81SyxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO0FBQ2xDM0IsT0FBT2tXLE9BQU8vVSxHQUFHMEQsYUFBYTdELEdBQUdDLE1BQU07QUFDdkNqQixPQUFPbVcsT0FBT2hWLEdBQUcwRCxhQUFhN0QsR0FBR0MsTUFBTTtPQUN2Q2pCLE9BQU9rVyxPQUFPL1UsR0FBR2lDLFdBQVdwQyxHQUFHQyxNQUFNOztBQUd0Q00sS0FBSyx3REFBd0Q7QUFDNURrQjtVQUFVdkQsSUFBSXVELFFBQVFXO1dBQVU7R0FBaUI7QUFDakRYLFFBQVE4SSxNQUFNLFNBQVM7QUFDdkI2SyxrQkFBa0IzVCxRQUFRNFQ7QUFDMUJDLGdCQUFnQkYsZ0JBQWdCdEQ7QUFFaEM5UyxPQUFPb1csaUJBQWlCclQsSUFBSS9CLEdBQUdDLE1BQU13QjtBQUNyQ3pDLE9BQU9zVyxjQUFjblYsSUFBSTRCLElBQUkvQixHQUFHQyxNQUFNd0IsUUFBUXRCO0FBQzlDbkIsT0FBT3NXLGNBQWNuVixHQUFHaUMsV0FBV3BDLEdBQUdDLE1BQU07QUFDNUNqQixPQUFPc1csY0FBY2xVLE1BQU1wQixHQUFHQyxNQUFNO0FBQ3BDakIsT0FBT3lDLFFBQVE4SSxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFO09BQ25DM0IsT0FBT3NXLGNBQWMvSyxNQUFNLFVBQVN2SyxHQUFHVyxHQUFFOztBQUcxQ0osS0FBSyw4Q0FBOEM7QUFDbERnVjtZQUFZbFcsU0FBU0MsY0FBYztBQUNuQ2lXLFVBQVVuVCxZQUFZO0FBQ3RCbVQsVUFBVTdWLFlBQVlMLFNBQVNnUixlQUFlO0FBQzlDK0Usa0JBQWtCbFgsSUFBSTJULFNBQVMwRDtBQUMvQkQsZ0JBQWdCRixnQkFBZ0J0RDtBQUVoQzlTLE9BQU9zVyxjQUFjblYsSUFBSTRCLElBQUkvQixHQUFHQyxNQUFNc1Y7QUFDdEN2VyxPQUFPc1csY0FBY25WLEdBQUdpQyxXQUFXcEMsR0FBR0MsTUFBTTtPQUM1Q2pCLE9BQU9zVyxjQUFjbFUsTUFBTXBCLEdBQUdDLE1BQU07O0FBR3JDTSxLQUFLLGlEQUFpRDtBQUNyRHVSO1dBQVc1VCxJQUFJMlQsU0FBUyxDQUFDLE9BQU96UDtXQUFVO0dBQVk7QUFDdERvVCxnQkFBZ0IzRCxTQUFTNEQsT0FBTztBQUFDNVQsTUFBSztBQUFRa0MsU0FBUTtBQUFDM0IsV0FBVTs7QUFBY3RDLFVBQVM7O0FBQ3hGNFYsZ0JBQWdCN0QsU0FBUzRELE9BQU87QUFBQzFSLFNBQVE7QUFBQ3hFLElBQUc7O0FBQWVPLFVBQVMsQ0FBQzs7QUFDdEU2VixnQkFBZ0I5RCxTQUFTNEQsT0FDeEIsQ0FBQyxXQUNBclQ7V0FBVTtHQUNWLENBQUMsT0FBTyxNQUFNLFVBQ2QsQ0FBQyxPQUFPLE1BQ1AsQ0FBQyxRQUFRO0FBQUMrQixPQUFNNkw7WUFBVzs7R0FBSyxZQUNoQztBQUtIaFIsT0FBT3dXLGVBQWV6VCxJQUFJL0IsR0FBR0MsTUFBTTRSO0FBQ25DN1MsT0FBTzBXLGVBQWUzVCxJQUFJL0IsR0FBR0MsTUFBTTRSO0FBQ25DQyxRQUFRRCxTQUFTQztBQUNqQm9ELFNBQVNNLGNBQWMxRDtBQUN2QnFELFNBQVNPLGNBQWM1RDtBQUN2QjhELFNBQVNELGNBQWM3RDtBQUV2QjlTLE9BQU84UyxNQUFNM1IsR0FBRzhELFNBQVNDLGVBQWVsRSxHQUFHQyxNQUFNO0FBQ2pEakIsT0FBTzhTLE1BQU0zUixHQUFHaUMsV0FBV3BDLEdBQUdDLE1BQU07QUFDcENqQixPQUFPOFMsTUFBTTNSLEdBQUdaLElBQUlTLEdBQUdDLE1BQU07QUFDN0JqQixPQUFPOFMsTUFBTTFRLE1BQU1wQixHQUFHQyxNQUFNO0FBRTVCakIsT0FBT2tXLE9BQU8vVSxHQUFHOEQsU0FBU0MsZUFBZWxFLEdBQUdDLE1BQU07QUFDbERqQixPQUFPa1csT0FBTy9VLEdBQUdpQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU9rVyxPQUFPL1UsR0FBR1osSUFBSVMsR0FBR0MsTUFBTTtBQUM5QmpCLE9BQU9rVyxPQUFPOVQsTUFBTXBCLEdBQUdDLE1BQU07QUFFN0JqQixPQUFPbVcsT0FBT2hWLEdBQUc4RCxTQUFTQyxlQUFlbEUsR0FBR0MsTUFBTTtBQUNsRGpCLE9BQU9tVyxPQUFPaFYsR0FBR2lDLFdBQVdwQyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBT21XLE9BQU9oVixHQUFHWixJQUFJUyxHQUFHQyxNQUFNO0FBQzlCakIsT0FBT21XLE9BQU8vVCxNQUFNcEIsR0FBR0MsTUFBTTtBQUU3QmpCLE9BQU80VyxPQUFPelYsR0FBRzhELFNBQVNDLGVBQWVsRSxHQUFHQyxNQUFNO0FBQ2xEakIsT0FBTzRXLE9BQU96VixHQUFHaUMsV0FBV3BDLEdBQUdDLE1BQU07QUFDckNqQixPQUFPNFcsT0FBT3pWLEdBQUdaLElBQUlTLEdBQUdDLE1BQU07T0FDOUJqQixPQUFPNFcsT0FBT3hVLE1BQU1wQixHQUFHQyxNQUFNOztBQUc5Qk0sS0FBSyxtR0FBbUc7QUFDdkcyVTtXQUFXaFgsSUFBSTJULFNBQ2QsQ0FBQyxPQUFPelA7V0FBVTtHQUNqQixtQkFDQSxDQUFDLFVBQVU7QUFBQ0EsV0FBVTtBQUFlK0IsT0FBTTtBQUFDMEcsU0FBUTs7R0FBTztBQUc3RGdMLFdBQVdoRSxTQUFTQyxRQUFRek4sU0FBU3BGO0FBQ3JDaVcsU0FBU3JELFNBQVNDLE1BQU1qUTtNQUFLO0FBQVdrQyxTQUFRO0FBQUMzQixXQUFVO0FBQWdCK0IsT0FBTTtBQUFDMEcsU0FBUTs7O0dBQU94RyxTQUFTcEY7QUFDMUdrVyxTQUFTdEQsU0FBU0MsTUFDakIvTjtTQUNDM0I7V0FBVztBQUNYN0MsSUFBSTtBQUNKNEUsT0FBTzBHO1NBQVM7OztBQUNqQi9LLFVBQVUsQ0FDVDtBQUNDK0IsTUFBTTtBQUNOL0IsVUFBVSxDQUNUK0I7TUFBSztBQUNMa0MsU0FBUztBQUFDM0MsTUFBTTs7O0dBR2xCO0FBQ0NTLE1BQU07QUFDTmtDLFNBQ0MzQjtXQUFXO0FBQ1grQixPQUFPMEc7U0FBUzs7O0FBQ2pCL0ssVUFBVSxDQUNUaUU7U0FBUztBQUFDM0MsTUFBTTs7O0dBR2xCO0FBQ0NTLE1BQU07QUFDTmtDLFNBQVM7QUFBQzNDLE1BQU07OztHQUdqQmlELFNBQVNwRjtBQUVYRCxPQUFPNlcsU0FBUzFWLEdBQUc4RCxTQUFTQyxlQUFlbEUsR0FBR0MsTUFBTTtBQUNwRGpCLE9BQU82VyxTQUFTMVYsR0FBR2lDLFdBQVdwQyxHQUFHQyxNQUFNO0FBQ3ZDakIsT0FBTzZXLFNBQVMxVixHQUFHWixJQUFJUyxHQUFHQyxNQUFNO0FBQ2hDakIsT0FBTzZXLFNBQVN6VSxNQUFNcEIsR0FBR0MsTUFBTTtBQUMvQmpCLE9BQU82VyxTQUFTMVYsSUFBSUgsR0FBR3VFLEtBQUtKLE1BQU0sV0FBVTtBQUM1Q25GLE9BQU82VyxTQUFTMVYsR0FBRzZELFdBQVdqRSxRQUFRQyxHQUFHQyxNQUFNO0FBQy9DakIsT0FBTzZXLFNBQVMxVixHQUFHNkQsV0FBVyxHQUFHQyxVQUFVakUsR0FBR0MsTUFBTTtBQUNwRGpCLE9BQU82VyxTQUFTMVYsR0FBRzZELFdBQVcsR0FBR0MsU0FBU0MsZUFBZWxFLEdBQUdDLE1BQU07QUFDbEVqQixPQUFPNlcsU0FBUzFWLEdBQUc2RCxXQUFXLEdBQUc1QixXQUFXcEMsR0FBR3NHLFFBQVE7QUFDdkR0SCxPQUFPNlcsU0FBUzFWLEdBQUc2RCxXQUFXLElBQUloRSxHQUFHdUUsS0FBS0osTUFBTSxXQUFXO0FBRTNEbkYsT0FBT2tXLE9BQU8vVSxHQUFHOEQsU0FBU0MsZUFBZWxFLEdBQUdDLE1BQU07QUFDbERqQixPQUFPa1csT0FBTy9VLEdBQUdpQyxXQUFXcEMsR0FBR3NHLFFBQVE7QUFDdkN0SCxPQUFPa1csT0FBTy9VLEdBQUdaLElBQUlTLEdBQUdDLE1BQU07QUFDOUJqQixPQUFPa1csT0FBTzlULE1BQU1wQixHQUFHQyxNQUFNO0FBQzdCakIsT0FBT2tXLE9BQU8vVSxJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxXQUFVO0FBQzFDbkYsT0FBT2tXLE9BQU8vVSxHQUFHNkQsV0FBV2pFLFFBQVFDLEdBQUdDLE1BQU07QUFDN0NqQixPQUFPa1csT0FBTy9VLEdBQUc2RCxXQUFXLEdBQUdDLFVBQVVqRSxHQUFHQyxNQUFNO0FBQ2xEakIsT0FBT2tXLE9BQU8vVSxHQUFHNkQsV0FBVyxHQUFHQyxTQUFTQyxlQUFlbEUsR0FBR0MsTUFBTTtBQUNoRWpCLE9BQU9rVyxPQUFPL1UsR0FBRzZELFdBQVcsR0FBRzVCLFdBQVdwQyxHQUFHc0csUUFBUTtBQUNyRHRILE9BQU9rVyxPQUFPL1UsR0FBRzZELFdBQVcsSUFBSWhFLEdBQUd1RSxLQUFLSixNQUFNLFdBQVc7QUFFekRuRixPQUFPbVcsT0FBT2hWLEdBQUc4RCxTQUFTQyxlQUFlbEUsR0FBR0MsTUFBTTtBQUNsRGpCLE9BQU9tVyxPQUFPaFYsR0FBR2lDLFdBQVdwQyxHQUFHc0csUUFBUTtBQUN2Q3RILE9BQU9tVyxPQUFPaFYsR0FBR1osSUFBSVMsR0FBR0MsTUFBTTtBQUM5QmpCLE9BQU9tVyxPQUFPL1QsTUFBTXBCLEdBQUdDLE1BQU07QUFDN0JqQixPQUFPbVcsT0FBT2hWLElBQUlILEdBQUd1RSxLQUFLSixNQUFNLFdBQVU7QUFDMUNuRixPQUFPbVcsT0FBT2hWLEdBQUc2RCxXQUFXakUsUUFBUUMsR0FBR0MsTUFBTTtBQUM3Q2pCLE9BQU9tVyxPQUFPaFYsR0FBRzZELFdBQVcsR0FBR0MsU0FBU0MsZUFBZWxFLEdBQUdDLE1BQU07QUFDaEVqQixPQUFPbVcsT0FBT2hWLEdBQUc2RCxXQUFXLEdBQUdBLFdBQVdqRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzNEakIsT0FBT21XLE9BQU9oVixHQUFHNkQsV0FBVyxHQUFHQyxTQUFTQyxlQUFlbEUsR0FBR0MsTUFBTTtBQUNoRWpCLE9BQU9tVyxPQUFPaFYsR0FBRzZELFdBQVcsR0FBRzVCLFdBQVdwQyxHQUFHc0csUUFBUTtPQUNyRHRILE9BQU9tVyxPQUFPaFYsR0FBRzZELFdBQVcsSUFBSWhFLEdBQUd1RSxLQUFLSixNQUFNLFdBQVc7O0FBRzFENUQsS0FBSyw0REFBNEQ7QUFDaEV1VjtXQUFXNVgsSUFBSTJULFNBQVMsQ0FBQyxPQUFPMU47T0FBTTtBQUFDLFdBQVU7O0dBQU0sQ0FBQyxRQUFRLE1BQU0saUJBQWlCLENBQUMsT0FBTyxNQUFNO0FBQ3JHMlIsU0FBU2pFLFNBQVM0RCxPQUFPLENBQUMsV0FBV3RSO09BQU07QUFBQyxXQUFVOzs7QUFDdEQ0UixTQUFTbEUsU0FBUzRELE9BQU8sQ0FBQyxRQUFRLE1BQU0sQ0FBQztBQUN6Q08sU0FBU25FLFNBQVM0RCxPQUFPLENBQUMsV0FBVztBQUFDclQsV0FBVTtBQUFlK0IsT0FBTTtBQUFDb0ssT0FBTTs7R0FBVSxDQUFDLFdBQVcsTUFBTSx1QkFBdUI7QUFDL0h1RCxRQUFRRCxTQUFTQyxNQUFNLENBQUMsUUFBUTNOO09BQU07QUFBQyxTQUFRO0FBQUssV0FBVTs7R0FBTSxZQUFZRSxTQUFTcEY7QUFFekZELE9BQU82UyxTQUFTaFEsTUFBTTdCLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPNlMsU0FBUzlOLFNBQVMvRCxHQUFHc0ssSUFBSTtBQUFDbkcsT0FBTTtBQUFDLFdBQVU7OztBQUNsRG5GLE9BQU82UyxTQUFTL1IsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU82UyxTQUFTL1IsU0FBUyxHQUFHK0IsTUFBTTdCLEdBQUdDLE1BQU07QUFDM0NqQixPQUFPNlMsU0FBUy9SLFNBQVMsR0FBR0EsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUN0RGpCLE9BQU82UyxTQUFTL1IsU0FBUyxHQUFHQSxTQUFTLEdBQUdpRSxRQUFRM0MsTUFBTXBCLEdBQUdDLE1BQU07QUFDL0RqQixPQUFPNlMsU0FBUy9SLFNBQVMsR0FBRytCLE1BQU03QixHQUFHQyxNQUFNO0FBQzNDakIsT0FBTzZTLFNBQVMvUixTQUFTLEdBQUdBLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDdERqQixPQUFPNlMsU0FBUy9SLFNBQVMsR0FBR0EsU0FBUyxHQUFHaUUsUUFBUTNDLE1BQU1wQixHQUFHQyxNQUFNO0FBRS9EakIsT0FBTzhXLE9BQU9qVSxNQUFNN0IsR0FBR0MsTUFBTTtBQUM3QmpCLE9BQU84VyxPQUFPL1IsU0FBUy9ELEdBQUdzSyxJQUFJO0FBQUNuRyxPQUFNO0FBQUMsV0FBVTs7O0FBQ2hEbkYsT0FBTzhXLE9BQU9oVyxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hDakIsT0FBTzhXLE9BQU9oVyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU84VyxPQUFPaFcsU0FBUyxHQUFHQSxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3BEakIsT0FBTzhXLE9BQU9oVyxTQUFTLEdBQUdBLFNBQVMsR0FBR2lFLFFBQVEzQyxNQUFNcEIsR0FBR0MsTUFBTTtBQUM3RGpCLE9BQU84VyxPQUFPaFcsU0FBUyxHQUFHK0IsTUFBTTdCLEdBQUdDLE1BQU07QUFDekNqQixPQUFPOFcsT0FBT2hXLFNBQVMsR0FBR0EsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUNwRGpCLE9BQU84VyxPQUFPaFcsU0FBUyxHQUFHQSxTQUFTLEdBQUdpRSxRQUFRM0MsTUFBTXBCLEdBQUdDLE1BQU07QUFFN0RqQixPQUFPK1csT0FBT2xVLE1BQU03QixHQUFHQyxNQUFNO0FBQzdCakIsT0FBTytXLE9BQU9oUyxTQUFTL0QsR0FBR3NLLElBQUk7QUFBQ25HLE9BQU07QUFBQyxXQUFVOzs7QUFDaERuRixPQUFPK1csT0FBT2pXLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDeENqQixPQUFPK1csT0FBT2pXLFNBQVMsR0FBRytCLE1BQU03QixHQUFHQyxNQUFNO0FBQ3pDakIsT0FBTytXLE9BQU9qVyxTQUFTLEdBQUdBLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDcERqQixPQUFPK1csT0FBT2pXLFNBQVMsR0FBR0EsU0FBUyxHQUFHaUUsUUFBUTNDLE1BQU1wQixHQUFHQyxNQUFNO0FBQzdEakIsT0FBTytXLE9BQU9qVyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU8rVyxPQUFPalcsU0FBUyxHQUFHQSxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3BEakIsT0FBTytXLE9BQU9qVyxTQUFTLEdBQUdBLFNBQVMsR0FBR2lFLFFBQVEzQyxNQUFNcEIsR0FBR0MsTUFBTTtBQUU3RGpCLE9BQU9nWCxPQUFPblUsTUFBTTdCLEdBQUdDLE1BQU07QUFDN0JqQixPQUFPZ1gsT0FBT2pTLFNBQVMvRCxHQUFHc0ssSUFBSTtBQUFDbEksV0FBVTtBQUFlK0IsT0FBTTtBQUFDLFdBQVU7QUFBSyxTQUFROzs7QUFDdEZuRixPQUFPZ1gsT0FBT2xXLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDeENqQixPQUFPZ1gsT0FBT2xXLFNBQVMsR0FBRytCLE1BQU03QixHQUFHQyxNQUFNO0FBQ3pDakIsT0FBT2dYLE9BQU9sVyxTQUFTLEdBQUdBLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDcERqQixPQUFPZ1gsT0FBT2xXLFNBQVMsR0FBR0EsU0FBUyxHQUFHaUUsUUFBUTNDLE1BQU1wQixHQUFHQyxNQUFNO0FBQzdEakIsT0FBT2dYLE9BQU9sVyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU9nWCxPQUFPbFcsU0FBUyxHQUFHaUUsUUFBUTNDLE1BQU1wQixHQUFHQyxNQUFNO0FBRWpENlIsTUFBTTNOLE1BQU0sV0FBVztBQUN2Qm5GLE9BQU84UyxNQUFNM1IsR0FBRzhELFNBQVNDLGVBQWVsRSxHQUFHQyxNQUFNO0FBQ2pEakIsT0FBTzhTLE1BQU0zUixJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxXQUFXO0FBQzFDbkYsT0FBTzhTLE1BQU0zUixJQUFJSCxHQUFHdUUsS0FBS0osTUFBTSxTQUFTO0FBQ3hDbkYsT0FBTzhTLE1BQU0zUixHQUFHNkQsV0FBV2pFLFFBQVFDLEdBQUdDLE1BQU07QUFDNUNqQixPQUFPOFMsTUFBTTNSLEdBQUc2RCxXQUFXLEdBQUdKLFVBQVU1RCxHQUFHQyxNQUFNO0FBQ2pEakIsT0FBTzhTLE1BQU0zUixHQUFHNkQsV0FBVyxHQUFHSCxhQUFhN0QsR0FBR0MsTUFBTTtBQUNwRGpCLE9BQU84UyxNQUFNM1IsR0FBRzZELFdBQVcsR0FBR0MsU0FBU0MsZUFBZWxFLEdBQUdDLE1BQU07T0FDL0RqQixPQUFPOFMsTUFBTTNSLEdBQUc2RCxXQUFXLEdBQUdILGFBQWE3RCxHQUFHQyxNQUFNOztBQU9yRE0sS0FBSyxnSEFBZ0g7QUFDcEhpTjtXQUFXdFAsSUFBSTJULFNBQVMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxRQUFRO0FBQUMxTixPQUFNMEc7U0FBUTs7SUFBTztBQUNyRTJDLFNBQVN0UCxJQUFJMlQsU0FBUyxDQUFDLE9BQU87QUFBQzFOLE9BQU04UjtZQUFXOzs7QUFDaER4SSxTQUFTdlAsSUFBSTJULFNBQVM7QUFDdEJlLFNBQVMxVSxJQUFJMlQsU0FBUyxDQUFDO0FBQ3ZCcUUsZUFBZXJFLFNBQVM0RCxPQUFPLENBQUMsUUFBUTtBQUFDdFIsT0FBTW1GO1VBQVM7O0dBQVNrRSxRQUFRQyxRQUFRbUY7QUFDakZ1RCxXQUFXdEUsU0FBU0MsUUFBUXpOLFNBQVNwRjtBQUNyQ21YLFdBQVdGLGFBQWFwRSxRQUFRek4sU0FBU3BGO0FBQ3pDb1gsV0FBV3hFLFNBQVNDLE1BQU0sQ0FBQyxRQUFRO0FBQUMzTixPQUFNbUY7VUFBUzs7R0FBU2tFLFFBQVFDLFFBQVFtRixTQUFTdk8sU0FBU3BGO0FBRTlGRCxPQUFPbVgsU0FBU3RVLE1BQU03QixHQUFHQyxNQUFNO0FBQy9CakIsT0FBT21YLFNBQVNyVyxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQzFDakIsT0FBT21YLFNBQVNyVyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU9tWCxTQUFTclcsU0FBUyxHQUFHd0UsS0FBS3RFLEdBQUd1RSxLQUFLSixNQUFNLFdBQVc7QUFDMURuRixPQUFPbVgsU0FBU3JXLFNBQVMsR0FBR3dFLEtBQUt0RSxHQUFHdUUsS0FBS0osTUFBTSxjQUFjO0FBQzdEbkYsT0FBT21YLFNBQVNyVyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU9tWCxTQUFTL1UsTUFBTXBCLEdBQUdDLE1BQU07QUFFL0JqQixPQUFPb1gsU0FBU3ZVLE1BQU03QixHQUFHQyxNQUFNO0FBQy9CakIsT0FBT29YLFNBQVN0VyxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQzFDakIsT0FBT29YLFNBQVN0VyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU9vWCxTQUFTdFcsU0FBUyxHQUFHd0UsS0FBS3RFLEdBQUd1RSxLQUFLSixNQUFNLFdBQVc7QUFDMURuRixPQUFPb1gsU0FBU3RXLFNBQVMsR0FBR3dFLEtBQUt0RSxHQUFHdUUsS0FBS0osTUFBTSxjQUFjO0FBQzdEbkYsT0FBT29YLFNBQVN0VyxTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU9vWCxTQUFTaFYsTUFBTXBCLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPb1gsU0FBU3RXLFNBQVMsR0FBRytCLE1BQU03QixHQUFHQyxNQUFNO0FBQzNDakIsT0FBT29YLFNBQVM5UixLQUFLdEUsR0FBR3VFLEtBQUtKLE1BQU0sWUFBWTtBQUUvQ25GLE9BQU9xWCxTQUFTeFUsTUFBTTdCLEdBQUdDLE1BQU07QUFDL0JqQixPQUFPcVgsU0FBU3ZXLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDMUNqQixPQUFPcVgsU0FBU3ZXLFNBQVMsR0FBRytCLE1BQU03QixHQUFHQyxNQUFNO0FBQzNDakIsT0FBT3FYLFNBQVN2VyxTQUFTLEdBQUd3RSxLQUFLdEUsR0FBR3VFLEtBQUtKLE1BQU0sV0FBVztBQUMxRG5GLE9BQU9xWCxTQUFTdlcsU0FBUyxHQUFHd0UsS0FBS3RFLEdBQUd1RSxLQUFLSixNQUFNLGNBQWM7QUFDN0RuRixPQUFPcVgsU0FBU3ZXLFNBQVMsR0FBRytCLE1BQU03QixHQUFHQyxNQUFNO0FBQzNDakIsT0FBT3FYLFNBQVNqVixNQUFNcEIsR0FBR0MsTUFBTTtBQUMvQmpCLE9BQU9xWCxTQUFTdlcsU0FBUyxHQUFHK0IsTUFBTTdCLEdBQUdDLE1BQU07T0FDM0NqQixPQUFPcVgsU0FBUy9SLEtBQUt0RSxHQUFHdUUsS0FBS0osTUFBTSxZQUFZOztBQUdoRDVELEtBQUssOEhBQThIO0FBQ2xJc1I7V0FBVzFULElBQUkwVCxTQUNkLENBQUMsT0FDQXlFO1VBQVVsVjtNQUFNOztBQUNoQm1WLFdBQVduVjtNQUFNLFVBQUNBLE1BQUQ7T0FBUyxLQUFDQSxPQUFPQTs7O0dBRWxDLENBQUMsUUFBUThOO0tBQUk7O0FBSWZsUSxPQUFPNlMsU0FBUzlOLFFBQVFJLE9BQU9uRSxHQUFHQyxNQUFNO0FBQ3hDakIsT0FBTzZTLFNBQVM5TixRQUFReVMsT0FBT3hXLEdBQUdDLE1BQU07QUFDeENqQixPQUFPNlMsU0FBUzRELE9BQU8xUjtTQUFReVM7T0FBTTs7R0FBVXpTLFFBQVF5UyxPQUFPeFcsR0FBR0MsTUFBTTtBQUN2RWpCLE9BQU82UyxTQUFTNEQsT0FBT2U7T0FBTTtHQUFVelMsUUFBUXlTLE9BQU94VyxHQUFHQyxNQUFNO0FBQy9EakIsT0FBTzZTLFNBQVM0RCxPQUFPdFI7T0FBTTtHQUFVSixRQUFRSSxPQUFPbkUsR0FBR0MsTUFBTTtBQUMvRGpCLE9BQU82UyxTQUFTNEQsT0FBT3RSO09BQU07QUFBVXRDLE1BQUs7R0FBV2tDLFFBQVFJLE9BQU9uRSxHQUFHQyxNQUFNO0FBQy9FakIsT0FBTzZTLFNBQVM0RCxPQUFPM1Y7VUFBUzJXO1NBQVF0UztPQUFNOzs7R0FBVXRFLE1BQU00VyxRQUFRMVMsUUFBUUksT0FBT25FLEdBQUdDLE1BQU07QUFDOUZqQixPQUFPNlMsU0FBUzRELE9BQU8zVjtVQUFTLENBQUN3VztVQUFTOztHQUFXelcsTUFBTTRXLFFBQVExUyxRQUFRdVMsVUFBVXRXLEdBQUdDLE1BQU07QUFDOUZqQixPQUFPNlMsU0FBU0MsTUFBTWhTO1VBQVMyVztTQUFRclU7V0FBVTs7O0dBQVV2QyxNQUFNNFcsUUFBUW5TLElBQUlsQyxXQUFXcEMsR0FBR0MsTUFBTTtBQUNqR2pCLE9BQU82UyxTQUFTQyxRQUFRMVEsTUFBTXBCLEdBQUdDLE1BQU07T0FDdkNqQixPQUFPNlMsU0FBU0MsTUFBTXdFO1VBQVNsVjtNQUFLOztHQUFRQSxNQUFNcEIsR0FBR0MsTUFBTTs7QUFHNURNLEtBQUssd0RBQXdEO0FBQzVEbVc7aUJBQWlCeFksSUFBSTJULFNBQVMsQ0FBQyxVQUFVO0FBQUMxTixPQUFNO1VBQVM7O0dBQ3hELENBQUMsUUFBUTtBQUFDQSxPQUFNO2FBQVk7O0dBQVcsd0JBQ3ZDO0FBRUR3UyxzQkFBc0J6WSxJQUFJMlQsU0FBUzZFO0FBQ25DdEIsa0JBQWtCbFgsSUFBSTJULFNBQVMsQ0FBQyxXQUFXLE1BQU02RTtBQUNqRGpWLFVBQVUyVCxnQkFBZ0J0RCxRQUFRek4sU0FBU3BGO0FBRTNDRCxPQUFPMlgscUJBQXFCM1csR0FBR0MsTUFBTXlXO0FBQ3JDMVgsT0FBT29XLGdCQUFnQnRWLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDakRqQixPQUFPb1csZ0JBQWdCdFYsU0FBUyxJQUFJRSxHQUFHQyxNQUFNeVc7QUFDN0MxWCxPQUFPb1csZ0JBQWdCdFYsU0FBUyxHQUFHQSxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQzdEakIsT0FBT3lDLFFBQVEzQixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3pDakIsT0FBT3lDLFFBQVEzQixTQUFTLEdBQUcrQixNQUFNN0IsR0FBR0MsTUFBTTtBQUMxQ2pCLE9BQU95QyxRQUFRM0IsU0FBUyxHQUFHQSxTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JEakIsT0FBT3lDLFFBQVFMLE1BQU1wQixHQUFHQyxNQUFNO09BQzlCakIsT0FBT3lDLFFBQVEzQixTQUFTLEdBQUdBLFNBQVMsR0FBR3FFLE1BQU0sY0FBY25FLEdBQUdDLE1BQU07O0FBR3JFTSxLQUFLLG9KQUFvSjtBQUN4SnFXO01BQU1DO1VBQVM7O0FBQ2Z0VCxJQUFJQSxNQUFNQTtBQUNWcVQscUJBQXFCO1VBQVUsVUFBQzlTLFNBQUQ7QUFBWTlFLE9BQU84RSxTQUFTOUQsR0FBR0MsTUFBTXNEO09BQU1PLFFBQVErUzs7O0FBRWxGSCxpQkFBaUJ4WSxJQUFJMlQsU0FBUyxDQUFDLFVBQVU7QUFBQzFOLE9BQU07U0FBUTs7R0FDdkQsQ0FBQyxPQUFPO0FBQUNBLE9BQU07U0FBUTs7R0FBUyx3QkFDaEM7QUFFRGlSLGtCQUFrQmxYLElBQUkyVCxTQUFTLENBQUMsV0FBVztBQUFDMU4sT0FBTTtTQUFROztHQUFTdVM7QUFDbkVqVixVQUFVMlQsZ0JBQWdCdEQsTUFBTTtBQUFDL04sU0FBUTtBQUFDRCxTQUFRMUY7O0dBQVU7QUFBQzBGLFNBQVFQO0FBQUtZLE9BQU15UztHQUFxQnZTLFNBQVNwRjtBQUU5R0QsT0FBT3lDLFFBQVE2QyxJQUFJSCxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFDMUNqQixPQUFPeUMsUUFBUTNCLFNBQVMsR0FBR3dFLElBQUlILE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUN0RGpCLE9BQU95QyxRQUFRM0IsU0FBUyxHQUFHQSxTQUFTLEdBQUd3RSxJQUFJSCxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFDbEVqQixPQUFPeUMsUUFBUTZDLElBQUlILE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU95QyxRQUFRM0IsU0FBUyxHQUFHd0UsSUFBSUgsTUFBTW1CLE9BQU90RixHQUFHQyxNQUFNO0FBQ3JEakIsT0FBT3lDLFFBQVEzQixTQUFTLEdBQUdBLFNBQVMsR0FBR3dFLElBQUlILE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtBQUNqRWpCLE9BQU95QyxRQUFRM0IsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUN6Q2pCLE9BQU95QyxRQUFRM0IsU0FBUyxHQUFHK0IsTUFBTTdCLEdBQUdDLE1BQU07QUFDMUNqQixPQUFPeUMsUUFBUTNCLFNBQVMsR0FBR0EsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtPQUNyRGpCLE9BQU95QyxRQUFRTCxNQUFNcEIsR0FBR0MsTUFBTTs7QUFHL0JNLEtBQUssdUVBQXVFO0FBQzNFdVc7V0FDQzVZLElBQUkyVCxTQUFTLENBQUMsT0FBTztBQUFDdFMsSUFBRztHQUN4QixDQUFDLE9BQU87QUFBQ0EsSUFBRztHQUNYLENBQUMsUUFBUTtBQUFDMlAsS0FBSTtJQUNkLENBQUMsT0FBTztBQUFDQSxLQUFJO0FBQVkzUCxJQUFHO0tBRTdCLENBQUMsT0FBTyxNQUNQLENBQUMsUUFBUTtBQUFDMlAsS0FBSTtJQUNkLENBQUMsUUFBUTtBQUFDM1AsSUFBRztBQUFZNkIsTUFBSzs7QUFJakNwQyxPQUFPLE9BQU82UyxTQUFTaFMsT0FBT0csR0FBR0MsTUFBTTtBQUN2Q2pCLE9BQU95VCxPQUFPQyxLQUFLYixTQUFTaFMsT0FBT0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNwRGpCLE9BQU82UyxTQUFTaFMsTUFBTStHLE1BQU01RyxHQUFHQyxNQUFNNFI7QUFDckM3UyxPQUFPNlMsU0FBU2hTLE1BQU0yTixPQUFPM0wsTUFBTTdCLEdBQUdDLE1BQU07QUFDNUNqQixPQUFPNlMsU0FBU2hTLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTTRSLFNBQVMvUixTQUFTO0FBQ3pEZCxPQUFPNlMsU0FBU2hTLE1BQU1rUyxVQUFVL1IsR0FBR0MsTUFBTTRSLFNBQVMvUixTQUFTLEdBQUdBLFNBQVM7QUFDdkVkLE9BQU82UyxTQUFTaFMsTUFBTW1TLFVBQVVoUyxHQUFHQyxNQUFNNFIsU0FBUy9SLFNBQVMsR0FBR0EsU0FBUztBQUN2RWQsT0FBTzZTLFNBQVNoUyxNQUFNcVMsVUFBVWxTLEdBQUdDLE1BQU00UixTQUFTL1IsU0FBUyxHQUFHQSxTQUFTO0FBQ3ZFZCxPQUFPNlMsU0FBU2hTLE1BQU1zUyxVQUFVblMsR0FBR0MsTUFBTTRSLFNBQVMvUixTQUFTLEdBQUdBLFNBQVM7QUFFdkVnWCxXQUFXakYsU0FBU0M7QUFDcEI5UyxPQUFPOFgsU0FBU2pYLE1BQU1zUyxVQUFVblMsR0FBR0MsTUFBTTZXLFNBQVNoWCxTQUFTLEdBQUdBLFNBQVM7T0FDdkVkLE9BQU84WCxTQUFTMVYsTUFBTXBCLEdBQUdDLE1BQU07O0FBR2hDTSxLQUFLLHFHQUFxRztBQUN6R3VXO2VBQ0M1WSxJQUFJMlQsU0FBUyxDQUFDLE9BQU87QUFBQ3RTLElBQUc7R0FDeEIsQ0FBQyxPQUFPO0FBQUNBLElBQUc7R0FDWCxDQUFDLFFBQVE7QUFBQzJQLEtBQUk7SUFDZCxDQUFDLE9BQU87QUFBQ0EsS0FBSTtBQUFZM1AsSUFBRztLQUU3QixDQUFDLE9BQU8sTUFDUCxDQUFDLFFBQVE7QUFBQzJQLEtBQUk7SUFDZCxDQUFDLFFBQVE7QUFBQzNQLElBQUc7QUFBWTZCLE1BQUs7O0FBR2pDOFUsZUFBZWEsYUFBYXRCLE9BQU8sQ0FBQyxXQUFXLE1BQzlDakk7UUFDQzNMO01BQU07QUFDTmtDLFNBQ0NJO09BQU9DO1NBQVM7Ozs7QUFDbEI0TixVQUNDLENBQUMsS0FBSztBQUFDelMsSUFBRztBQUFZdUQsTUFBSztHQUMxQixDQUFDLFFBQVE7QUFBQ29NLEtBQUk7QUFBYzlOLE1BQUs7O0FBRW5Dd1IsUUFDQyxDQUFDLE9BQU8xRDtLQUFJOztJQUNYO0FBQUMzTSxPQUFNOztBQUVWeVUsZ0JBQWdCRCxhQUFhdEIsT0FBTzNWO1VBQ25DME47UUFDQzFOO1VBQVV5UztVQUFVLENBQUM7OztBQUN0QlAsVUFDQyxDQUFDLEtBQUs7QUFBQ3pTLElBQUc7QUFBWXVELE1BQUs7R0FDMUIsQ0FBQyxRQUFRO0FBQUNvTSxLQUFJO0FBQWM5TixNQUFLOztBQUVuQ3dSLFFBQ0MsQ0FBQyxPQUFPMUQ7S0FBSTs7OztBQUVkbFEsT0FBTyxPQUFPa1gsYUFBYXJXLE1BQU1vWCxZQUFZbFYsSUFBSS9CLEdBQUdDLE1BQU07QUFDMURqQixPQUFPeVQsT0FBT0MsS0FBS3FFLGFBQWFsWCxPQUFPRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hEakIsT0FBT3lULE9BQU9DLEtBQUt3RCxhQUFhclcsT0FBT0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN4RGpCLE9BQU9rWCxhQUFhcFcsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUM5Q2pCLE9BQU9rWCxhQUFhclcsTUFBTStHLE1BQU01RyxHQUFHQyxNQUFNaVc7QUFDekNsWCxPQUFPa1gsYUFBYXJXLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTO0FBQ2pFZCxPQUFPa1gsYUFBYXJXLE1BQU0yTixPQUFPM0wsTUFBTTdCLEdBQUdDLE1BQU07QUFDaERqQixPQUFPa1gsYUFBYXJXLE1BQU1rUyxVQUFVL1IsR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VkLE9BQU9rWCxhQUFhclcsTUFBTW1TLFVBQVVoUyxHQUFHQyxNQUFNO0FBQzdDakIsT0FBT2tYLGFBQWFyVyxNQUFNcVgsVUFBVWxYLEdBQUdDLE1BQU1pVyxhQUFhcFcsU0FBUyxHQUFHQSxTQUFTO0FBQy9FZCxPQUFPa1gsYUFBYXJXLE1BQU1vWCxZQUFZalgsR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTLEdBQUdBLFNBQVMsR0FBR0EsU0FBUztBQUM3RmQsT0FBT2tYLGFBQWFyVyxNQUFNb1gsV0FBV2xULFFBQVEzQyxNQUFNcEIsR0FBR0MsTUFBTTtBQUM1RGpCLE9BQU9rWCxhQUFhclcsTUFBTXFTLFVBQVVsUyxHQUFHQyxNQUFNaVcsYUFBYXBXLFNBQVMsR0FBR0EsU0FBUztBQUMvRWQsT0FBT2tYLGFBQWFyVyxNQUFNc1MsVUFBVW5TLEdBQUdDLE1BQU1pVyxhQUFhcFcsU0FBUyxHQUFHQSxTQUFTO0FBQy9FZCxPQUFPa1gsYUFBYXJXLE1BQU0rUyxRQUFRNVMsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU9rWCxhQUFhclcsTUFBTWdULFFBQVE3UyxHQUFHQyxNQUFNaVcsYUFBYXBXLFNBQVM7QUFFakVnWCxXQUFXWixhQUFhcEUsUUFBUXpOLFNBQVNwRjtBQUN6Q0QsT0FBT3lULE9BQU9DLEtBQUtvRSxTQUFTalgsT0FBT0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNwRGpCLE9BQU84WCxTQUFTalgsTUFBTXNTLFVBQVVuUyxHQUFHQyxNQUFNNlcsU0FBU2hYLFNBQVMsR0FBR0EsU0FBUztBQUN2RWQsT0FBTzhYLFNBQVNqWCxNQUFNMk4sT0FBT2xKLEtBQUt0RSxHQUFHdUUsS0FBS0osTUFBTSxXQUFXO0FBQzNEbkYsT0FBTzhYLFNBQVNqWCxNQUFNcVgsU0FBU2xOLEtBQUssU0FBU2hLLEdBQUdnQyxRQUFRO0FBQ3hEaEQsT0FBTzhYLFNBQVNqWCxNQUFNcVMsU0FBU2xJLEtBQUssVUFBVWhLLEdBQUdDLE1BQU07T0FDdkRqQixPQUFPOFgsU0FBU2pYLE1BQU1nVCxPQUFPdkgsS0FBSyxhQUFhdEwsR0FBR0MsTUFBTTs7QUFHekRNLEtBQUssd0ZBQXdGO0FBQzVGaU47U0FBU3RQLElBQUkyVCxTQUNaLENBQUMsT0FBTztBQUFDdFMsSUFBRztHQUNYLENBQUMsUUFBUTtBQUFDMlAsS0FBSTtJQUNkLENBQUMsT0FBTztBQUFDQSxLQUFJO0FBQVkzUCxJQUFHOztBQUc5QmtPLFNBQVN2UCxJQUFJMlQsU0FDWixDQUFDLE9BQU8zQztLQUFJO0dBQ1gsQ0FBQyxRQUFRO0FBQUNBLEtBQUk7SUFDZCxDQUFDLFFBQVE7QUFBQzNQLElBQUc7QUFBWTZCLE1BQUs7O0FBR2hDd1IsU0FBUzFVLElBQUkyVCxTQUNaLENBQUMsT0FBTztBQUFDdFMsSUFBRztHQUNYLENBQUMsUUFBUTtBQUFDMlAsS0FBSTtJQUNkLENBQUMsUUFBUTtBQUFDM1AsSUFBRztBQUFZNkIsTUFBSzs7QUFHaEMyVixlQUNDN1ksSUFBSTJULFNBQVMsQ0FBQyxPQUFPO0FBQUN0UyxJQUFHO0dBQ3hCaU8sUUFDQUM7QUFFRnlJLGVBQWVhLGFBQWF0QixPQUFPLENBQUMsV0FBVyxNQUM5Q2pJO1FBQVEzTDtNQUFNOztBQUNkNEwsUUFBUUEsT0FBT2dJLE9BQU92RztLQUFJOztBQUMxQjBELFFBQVFBLE9BQU82QyxPQUFPdkc7S0FBSTs7SUFDeEI7QUFBQzNNLE9BQU07O0FBRVZ2RCxPQUFPeVQsT0FBT0MsS0FBS3FFLGFBQWFsWCxPQUFPRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hEakIsT0FBT3lULE9BQU9DLEtBQUt3RCxhQUFhclcsT0FBT0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN4RGpCLE9BQU8rWCxhQUFhalgsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUM5Q2pCLE9BQU9rWCxhQUFhcFcsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUM5Q2pCLE9BQU9rWCxhQUFhclcsTUFBTStHLE1BQU01RyxHQUFHQyxNQUFNaVc7QUFDekNsWCxPQUFPa1gsYUFBYXJXLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTO0FBQ2pFZCxPQUFPa1gsYUFBYXJXLE1BQU0yTixPQUFPM0wsTUFBTTdCLEdBQUdDLE1BQU07QUFDaERqQixPQUFPa1gsYUFBYXJXLE1BQU0yTixPQUFPMU4sU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUMzRGpCLE9BQU9rWCxhQUFhclcsTUFBTXNYLFFBQVFuWCxHQUFHQyxNQUFNaVcsYUFBYXBXLFNBQVM7QUFDakVkLE9BQU9rWCxhQUFhclcsTUFBTXFTLFVBQVVsUyxHQUFHQyxNQUFNaVcsYUFBYXBXLFNBQVMsR0FBR0EsU0FBUztBQUMvRWQsT0FBT2tYLGFBQWFyVyxNQUFNc1MsVUFBVW5TLEdBQUdDLE1BQU1pVyxhQUFhcFcsU0FBUyxHQUFHQSxTQUFTO0FBQy9FZCxPQUFPK1gsYUFBYWxYLE1BQU0rUyxRQUFRNVMsR0FBR0MsTUFBTTtBQUMzQ2pCLE9BQU9rWCxhQUFhclcsTUFBTStTLFFBQVE1UyxHQUFHQyxNQUFNO0FBQzNDakIsT0FBT2tYLGFBQWFyVyxNQUFNdVgsUUFBUXBYLEdBQUdDLE1BQU1pVyxhQUFhcFcsU0FBUztBQUNqRWQsT0FBT3lULE9BQU9DLEtBQUtxRSxhQUFhakYsUUFBUWpTLE9BQU9FLFFBQVFDLEdBQUdDLE1BQU07T0FDaEVqQixPQUFPeVQsT0FBT0MsS0FBS3dELGFBQWFwRSxRQUFRalMsT0FBT0UsUUFBUUMsR0FBR0MsTUFBTTs7QUFHakVNLEtBQUssb0VBQW9FO0FBQ3hFekI7U0FBU2dCO1VBQVVpUztVQUFVO0FBQUNsUSxNQUFLO0FBQU9rQyxTQUFTO0FBQUNJLE9BQU87QUFBQ0MsU0FBUTs7Ozs7O0FBQ3BFaVQsWUFBWW5aLElBQUkyVCxTQUNmLENBQUMsT0FBTztBQUFDM0MsS0FBSTtHQUNaLENBQUMsT0FBTztBQUFDQSxLQUFJO0dBQ1osQ0FBQyxRQUFRO0FBQUNBLEtBQUk7O0FBSWpCbUksVUFBVXhYLE1BQU1rUztBQUNoQnVGLFlBQVlELFVBQVU1QjtBQUN0QjhCLFlBQVlGLFVBQVU1QixPQUFPM1c7QUFDN0IwWSxZQUFZSCxVQUFVNUIsT0FBTzNXO0FBQzdCb1csU0FBU21DLFVBQVV2RixRQUFRek4sU0FBU3BGO0FBQ3BDa1csU0FBU21DLFVBQVV4RixRQUFRek4sU0FBU3BGO0FBQ3BDMlcsU0FBUzJCLFVBQVV6RixRQUFRek4sU0FBU3BGO0FBQ3BDd1ksU0FBU0QsVUFBVTFGLFFBQVF6TixTQUFTcEY7QUFDcENELE9BQU9rVyxPQUFPclYsTUFBTWtTLFNBQVNsUSxNQUFNN0IsR0FBR0MsTUFBTTtBQUM1Q2pCLE9BQU9rVyxPQUFPclYsTUFBTWtTLFNBQVM1TixNQUFNLFlBQVduRSxHQUFHQyxNQUFNO0FBQ3ZEakIsT0FBT21XLE9BQU90VixNQUFNa1MsU0FBU2xRLE1BQU03QixHQUFHQyxNQUFNO0FBQzVDakIsT0FBT21XLE9BQU90VixNQUFNa1MsU0FBUzVOLE1BQU0sWUFBV25FLEdBQUdDLE1BQU07QUFDdkRqQixPQUFPNFcsT0FBTy9WLE1BQU1rUyxTQUFTbFEsTUFBTTdCLEdBQUdDLE1BQU07QUFDNUNqQixPQUFPNFcsT0FBTy9WLE1BQU1rUyxTQUFTNU4sTUFBTSxZQUFXbkUsR0FBR0MsTUFBTTtBQUN2RGpCLE9BQU95WSxPQUFPNVgsTUFBTWtTLFNBQVNsUSxNQUFNN0IsR0FBR0MsTUFBTTtPQUM1Q2pCLE9BQU95WSxPQUFPNVgsTUFBTWtTLFNBQVM1TixNQUFNLFlBQVduRSxHQUFHQyxNQUFNOztBQUV4RE0sS0FBSywyRUFBMkU7QUFDL0UyVjtlQUNDaFksSUFBSTJULFNBQVMsQ0FBQyxPQUFPO0FBQUN0UyxJQUFHO0dBQ3hCLENBQUMsT0FBTztBQUFDQSxJQUFHO0dBQ1gsQ0FBQyxRQUFRO0FBQUMyUCxLQUFJO0lBQ2QsQ0FBQyxPQUFPO0FBQUNBLEtBQUk7QUFBWTNQLElBQUc7S0FFN0IsQ0FBQyxPQUFPO0FBQUMyUCxLQUFJO0dBQ1osQ0FBQyxRQUFRO0FBQUNBLEtBQUk7SUFDZCxDQUFDLFFBQVE7QUFBQzNQLElBQUc7QUFBWTZCLE1BQUs7S0FFL0IsQ0FBQyxPQUFPO0FBQUM3QixJQUFHO0dBQ1gsQ0FBQyxRQUFRO0FBQUMyUCxLQUFJO0lBQ2QsQ0FBQyxRQUFRO0FBQUMzUCxJQUFHO0FBQVk2QixNQUFLOztBQUdqQzhVLGVBQWVhLGFBQWF0QixPQUFPLENBQUMsV0FBVyxNQUM5Q2pJO1FBQ0MzTDtNQUFNO0FBQ05rQyxTQUNDSTtPQUFPQztTQUFTOzs7O0FBRWxCMk4sVUFBVTtBQUNWQyxVQUNDLENBQUMsS0FBSztBQUFDelMsSUFBRztBQUFZdUQsTUFBSztHQUMxQixDQUFDLFFBQVE7QUFBQ29NLEtBQUk7QUFBYzlOLE1BQUs7O0FBRW5DOFEsVUFBVTtBQUNWVSxRQUFROztBQUdUNVQsT0FBTyxPQUFPa1gsYUFBYXJXLE1BQU1vWCxZQUFZbFYsSUFBSS9CLEdBQUdDLE1BQU07QUFDMURqQixPQUFPeVQsT0FBT0MsS0FBS3FFLGFBQWFsWCxPQUFPRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hEakIsT0FBT3lULE9BQU9DLEtBQUt3RCxhQUFhclcsT0FBT0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN4RGpCLE9BQU9rWCxhQUFhcFcsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUM5Q2pCLE9BQU9rWCxhQUFhclcsTUFBTStHLE1BQU01RyxHQUFHQyxNQUFNaVc7QUFDekNsWCxPQUFPa1gsYUFBYXJXLE1BQU0yTixRQUFReE4sR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTO0FBQ2pFZCxPQUFPa1gsYUFBYXJXLE1BQU0yTixPQUFPM0wsTUFBTTdCLEdBQUdDLE1BQU07QUFDaERqQixPQUFPa1gsYUFBYXJXLE1BQU0yTixPQUFPMU4sU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUMzRGpCLE9BQU8rWCxhQUFhbFgsTUFBTWtTLFVBQVUvUixHQUFHQyxNQUFNOFcsYUFBYWxYLE1BQU1rUztBQUNoRS9TLE9BQU9rWCxhQUFhclcsTUFBTWtTLFVBQVUvUixHQUFHQyxNQUFNO0FBQzdDakIsT0FBT2tYLGFBQWFyVyxNQUFNbVMsVUFBVWhTLEdBQUdDLE1BQU07QUFDN0NqQixPQUFPa1gsYUFBYXJXLE1BQU1xWCxVQUFVbFgsR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VkLE9BQU9rWCxhQUFhclcsTUFBTW9YLFlBQVlqWCxHQUFHQyxNQUFNaVcsYUFBYXBXLFNBQVMsR0FBR0EsU0FBUyxHQUFHQSxTQUFTO0FBQzdGZCxPQUFPa1gsYUFBYXJXLE1BQU1vWCxXQUFXbFQsUUFBUTNDLE1BQU1wQixHQUFHQyxNQUFNO0FBQzVEakIsT0FBT2tYLGFBQWFyVyxNQUFNcVMsVUFBVWxTLEdBQUdDLE1BQU07QUFDN0NqQixPQUFPa1gsYUFBYXJXLE1BQU1zUyxVQUFVblMsR0FBR0MsTUFBTWlXLGFBQWFwVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VkLE9BQU8rWCxhQUFhbFgsTUFBTXFTLFVBQVVsUyxHQUFHQyxNQUFNOFcsYUFBYWpYLFNBQVMsR0FBR0EsU0FBUztBQUMvRWQsT0FBTytYLGFBQWFsWCxNQUFNc1MsVUFBVW5TLEdBQUdDLE1BQU04VyxhQUFhalgsU0FBUyxHQUFHQSxTQUFTO0FBQy9FZCxPQUFPK1gsYUFBYWxYLE1BQU0rUyxRQUFRNVMsR0FBR0MsTUFBTThXLGFBQWFqWCxTQUFTO09BQ2pFZCxPQUFPa1gsYUFBYXJXLE1BQU0rUyxRQUFRNVMsR0FBR0MsTUFBTTs7QUFHNUNNLEtBQUssNEVBQTRFO0FBQ2hGMlU7WUFBWWhYLElBQUkyVCxTQUNmLENBQUMsT0FDQTNDO0tBQUs7QUFDTHFILFdBQ0NtQjtRQUFRO09BQUs7O0FBQ2JDLFFBQVE7T0FBSzs7O0FBRWR4VCxPQUNDNEY7VUFBVTtBQUNWekUsT0FBTztBQUNQQyxRQUFRO0FBQ1JxUyxTQUNDdFM7T0FBTztBQUNQQyxRQUFROzs7O0FBR1orUixZQUFZRCxVQUFVNUIsT0FDckIxUjtTQUNDbUw7S0FBSztBQUNMcUgsV0FDQ21CO1FBQVE7QUFDUkMsUUFBUTtPQUFLOzs7QUFFZHhULE9BQ0NvQjtRQUFRO0FBQ1JzRixTQUFTO0FBQ1QrTSxTQUNDdFM7T0FBTzs7Ozs7QUFHWDRQLFNBQVNtQyxVQUFVdkY7QUFDbkJxRCxTQUFTbUMsVUFBVXhGO0FBRW5COVMsT0FBT2tXLE9BQU9oRyxLQUFLbFAsR0FBR0MsTUFBTTtBQUM1QmpCLE9BQU9tVyxPQUFPakcsS0FBS2xQLEdBQUdDLE1BQU07QUFDNUJqQixPQUFPLE9BQU9rVyxPQUFPblIsUUFBUXdTLFVBQVVtQixRQUFRMVgsR0FBR0MsTUFBTTtBQUN4RGpCLE9BQU8sT0FBT21XLE9BQU9wUixRQUFRd1MsVUFBVW1CLFFBQVExWCxHQUFHQyxNQUFNO0FBQ3hEakIsT0FBTyxPQUFPa1csT0FBT25SLFFBQVF3UyxVQUFVb0IsUUFBUTNYLEdBQUdDLE1BQU07QUFDeERqQixPQUFPLE9BQU9tVyxPQUFPcFIsUUFBUXdTLFVBQVVvQixRQUFRM1gsR0FBR0MsTUFBTTtBQUN4RGpCLE9BQU9rVyxPQUFPblIsUUFBUXdTLFVBQVVvQixVQUFVM1gsR0FBR0MsTUFBTTtBQUNuRGpCLE9BQU9tVyxPQUFPcFIsUUFBUXdTLFVBQVVvQixVQUFVM1gsR0FBR0MsTUFBTTtBQUNuRGpCLE9BQU9rVyxPQUFPblIsUUFBUUksTUFBTTRGLFVBQVUvSixHQUFHQyxNQUFNO0FBQy9DakIsT0FBT21XLE9BQU9wUixRQUFRSSxNQUFNNEYsVUFBVS9KLEdBQUdDLE1BQU07QUFDL0NqQixPQUFPa1csT0FBT25SLFFBQVFJLE1BQU1tQixPQUFPdEYsR0FBR0MsTUFBTTtBQUM1Q2pCLE9BQU9tVyxPQUFPcFIsUUFBUUksTUFBTW1CLE9BQU90RixHQUFHQyxNQUFNO0FBQzVDakIsT0FBT2tXLE9BQU9uUixRQUFRSSxNQUFNb0IsUUFBUXZGLEdBQUdDLE1BQU07QUFDN0NqQixPQUFPbVcsT0FBT3BSLFFBQVFJLE1BQU1vQixRQUFRdkYsR0FBR0MsTUFBTTtBQUM3Q2pCLE9BQU9rVyxPQUFPblIsUUFBUUksTUFBTTBHLFNBQVM3SyxHQUFHQyxNQUFNO0FBQzlDakIsT0FBT21XLE9BQU9wUixRQUFRSSxNQUFNMEcsU0FBUzdLLEdBQUdDLE1BQU07QUFDOUNqQixPQUFPa1csT0FBT25SLFFBQVFJLE1BQU15VCxRQUFRdFMsT0FBT3RGLEdBQUdDLE1BQU07QUFDcERqQixPQUFPbVcsT0FBT3BSLFFBQVFJLE1BQU15VCxRQUFRdFMsT0FBT3RGLEdBQUdDLE1BQU07QUFDcERqQixPQUFPa1csT0FBT25SLFFBQVFJLE1BQU15VCxRQUFRclMsUUFBUXZGLEdBQUdDLE1BQU07T0FDckRqQixPQUFPbVcsT0FBT3BSLFFBQVFJLE1BQU15VCxRQUFRclMsUUFBUXZGLEdBQUdDLE1BQU07O0FBR3RETSxLQUFLLDhHQUE4RztBQUNsSDJVO1lBQVloWCxJQUFJMlQsU0FBUyxDQUFDLE9BQU8xTjtPQUFNO0FBQUNDLFNBQVE7OztBQUNoRGtULFlBQVlwWixJQUFJMlQsU0FBUyxDQUFDLE9BQU8xTjtPQUFNO0FBQUNDLFNBQVE7OztBQUNoRDhRLFNBQVNtQyxVQUFVdkYsTUFBTTVDO0tBQUk7O0FBQzdCaUcsU0FBU2tDLFVBQVV2RjtBQUVuQjlTLE9BQU9rVyxPQUFPblIsU0FBU2hDLElBQUkvQixHQUFHQyxNQUFNb1gsVUFBVXRUO0FBQzlDL0UsT0FBT2tXLE9BQU9uUixRQUFRSSxPQUFPcEMsSUFBSS9CLEdBQUdDLE1BQU1vWCxVQUFVdFQsUUFBUUk7QUFDNURuRixPQUFPcVksVUFBVXRULFFBQVFJLE1BQU00SCxPQUFPL0wsR0FBR0MsTUFBTTtBQUUvQ2pCLE9BQU9tVyxPQUFPcFIsU0FBU2hDLElBQUkvQixHQUFHQyxNQUFNcVgsVUFBVXZUO0FBQzlDL0UsT0FBT21XLE9BQU9wUixRQUFRSSxPQUFPcEMsSUFBSS9CLEdBQUdDLE1BQU1xWCxVQUFVdlQsUUFBUUk7T0FDNURuRixPQUFPc1ksVUFBVXZULFFBQVFJLE1BQU00SCxPQUFPL0wsR0FBR0MsTUFBTTs7QUFHaERNLEtBQUssMkRBQTJEO0FBQy9ERztXQUFXeEMsSUFBSTJULFNBQVMsQ0FBQyxRQUFRO0FBQUMzQyxLQUFJO0dBQVk7QUFDbER4TyxNQUFNeEMsSUFBSXdDLElBQUksTUFBTTtBQUVwQjFCLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDakIsT0FBTzBCLElBQUlVLE1BQU1wQixHQUFHQyxNQUFNO0FBQzFCUyxJQUFJdUUsT0FBTzRNO0FBQ1g3UyxPQUFPMEIsSUFBSVosU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU8wQixJQUFJVSxNQUFNcEIsR0FBR0MsTUFBTTtBQUMxQlMsSUFBSStTLFFBQVE1QjtBQUNaN1MsT0FBTzBCLElBQUlaLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07T0FDckNqQixPQUFPMEIsSUFBSVUsTUFBTXBCLEdBQUdDLE1BQU07O09BRzNCSyxNQUFNLGtCQUFrQjtBQUN2QkMsS0FBSyw0R0FBNEc7QUFDaEhzWDtlQUFlO0FBQ2ZoRyxXQUFXM1QsSUFBSTJULFNBQ2QsQ0FBQyxPQUNBMEU7V0FBVzthQUFhLFVBQUN1QixNQUFEO09BQVNELGVBQWVDLFFBQVE7Ozs7QUFJMUQ5WSxPQUFPNlksY0FBYzdYLEdBQUdDLE1BQU07QUFDOUI0UixTQUFTQztBQUNUOVMsT0FBTzZZLGNBQWM3WCxHQUFHQyxNQUFNO0FBRTlCNFIsU0FBU0MsTUFBTTtBQUFDZ0csTUFBSzthQUFZOzs7T0FDakM5WSxPQUFPNlksY0FBYzdYLEdBQUdDLE1BQU07O0FBRy9CTSxLQUFLLDZFQUE2RTtBQUNqRndYO1VBQVU7QUFDVmxHLFdBQVczVCxJQUFJMlQsU0FDZCxDQUFDLE9BQ0EwRTtXQUFXO2FBQWEsVUFBQ3VCLE1BQUQ7T0FBU0MsVUFBVTs7OztBQUk3Qy9ZLE9BQU8rWSxTQUFTL1gsR0FBR0MsTUFBTTtBQUN6QjRSLFNBQVNDO0FBQ1Q5UyxPQUFPK1ksU0FBUy9YLEdBQUdDLE1BQU07QUFFekJvSixXQUFXd0ksU0FBU0MsTUFBTTtBQUFDZ0csTUFBSzthQUFZOzs7T0FDNUM5WSxPQUFPK1ksU0FBUy9YLEdBQUdDLE1BQU1vSjs7QUFHMUI5SSxLQUFLLG9HQUFvRztBQUN4RzhJO1VBQVU7QUFDVndJLFdBQVczVCxJQUFJMlQsU0FDZCxDQUFDLE9BQ0EwRTtXQUNDO1NBQVMsVUFBQ3VCLE1BQUQ7T0FBU3RKLFFBQVF3SixRQUFRRixLQUFLNVQ7O0FBQ3ZDLFVBQVUsVUFBQzRULE1BQUQ7T0FBU3RKLFFBQVF5SixTQUFTSCxLQUFLNVQ7O0FBQ3pDLFNBQVMsVUFBQzRULE1BQUQ7T0FBU3RKLFFBQVEwSixRQUFRSixLQUFLNVQ7OztBQUN4Q29TLFVBQ0M7U0FBUztBQUNULFNBQVM7OztBQUdadFgsT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQU07QUFDOUI0UixTQUFTQztBQUNUOVMsT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQU07QUFBQytYLE9BQU07QUFBbUJFLE9BQU07O0FBRTlEN08sV0FBV3dJLFNBQVNDLE1BQU07QUFBQ2dHLE1BQUs7U0FBUTs7O09BQ3hDOVksT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQU07QUFBQytYLE9BQU07QUFBbUJFLE9BQU07OztBQUcvRDNYLEtBQUssNkJBQTZCO0FBQ2pDOEk7VUFBVTtBQUNWd0ksV0FBVzNULElBQUkyVCxTQUNkLENBQUMsT0FDQTBFO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTdEosUUFBUXdKLFFBQVFGOztBQUNsQyxVQUFVLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVF5SixTQUFTSDs7QUFDcEMsU0FBUyxVQUFDQSxNQUFEO09BQVN0SixRQUFRMEosUUFBUUo7O0FBQ2xDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTdEosUUFBUTJKLFNBQVNMOztBQUNwQyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVE0SixRQUFRTjs7QUFDbEMsU0FBUyxVQUFDQSxNQUFEO09BQVN0SixRQUFRNkosUUFBUVA7OztBQUNuQ3hCLFVBQ0M7U0FBUyxDQUFDLE9BQU87QUFDakIsU0FBUztBQUFDdFYsR0FBRTtBQUFHMkssR0FBRTs7QUFDakIsU0FBUzs7O0FBS1p0QyxXQUFXd0ksU0FBU0MsTUFBTWdHO01BQ3pCO1VBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7OztBQUVWOVksT0FBT3dQLFNBQVN4TyxHQUFHME8sS0FBS3pPLE1BQ3ZCK1g7T0FBTyxDQUFDLE9BQU87QUFDZkMsUUFBUTtBQUNSQyxPQUFPO0FBQUNsWCxHQUFFO0FBQUcySyxHQUFFOztBQUNmd00sUUFBUTtBQUNSQyxPQUFPO0FBQ1BDLE9BQU87O09BRVJyWixPQUFPeVQsT0FBT0MsS0FBS2xFLFNBQVN6TyxRQUFRQyxHQUFHQyxNQUFNOztBQUc5Q00sS0FBSywrRUFBK0U7QUFDbkY4STtVQUFVO0FBQ1Z3SSxXQUFXM1QsSUFBSTJULFNBQ2QsQ0FBQyxPQUNBMEU7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN0SixRQUFRd0osUUFBUUY7O0FBQ2xDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTdEosUUFBUXlKLFNBQVNIOztBQUNwQyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVEwSixRQUFRSjs7OztBQUtyQ3pPLFdBQVd3SSxTQUFTQyxNQUFNZ0c7TUFDekI7U0FBUztBQUNULFVBQVU7QUFDVixTQUFTO0FBQ1QsVUFBVTs7O0FBRVg5WSxPQUFPd1AsU0FBU3hPLEdBQUcwTyxLQUFLek8sTUFDdkI7U0FBUztBQUNULFVBQVU7QUFDVixTQUFTOztPQUVWakIsT0FBT3lULE9BQU9DLEtBQUtsRSxTQUFTek8sUUFBUUMsR0FBR0MsTUFBTTs7QUFHOUNNLEtBQUsseUVBQXlFO0FBQzdFOEk7VUFBVWhKO1FBQU87QUFBSW1OLFFBQU87QUFBSUMsUUFBTztBQUFJbUYsUUFBTzs7QUFDbERmLFdBQVczVCxJQUFJMlQsU0FDZCxDQUFDLE9BQ0EwRTtXQUNDO1NBQVMsVUFBQ3VCLE1BQUQ7T0FBU3RKLFFBQVFuTyxPQUFPMlgsUUFBUUY7O0FBQ3pDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTdEosUUFBUW5PLE9BQU80WCxTQUFTSDs7QUFDM0MsU0FBUyxVQUFDQSxNQUFEO09BQVN0SixRQUFRbk8sT0FBTzZYLFFBQVFKOzs7R0FFMUMsQ0FBQyxPQUNBdkI7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN0SixRQUFRaEIsT0FBT3dLLFFBQVFGOztBQUN6QyxVQUFVLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVFoQixPQUFPeUssU0FBU0g7O0FBQzNDLFNBQVMsVUFBQ0EsTUFBRDtPQUFTdEosUUFBUWhCLE9BQU8wSyxRQUFRSjs7O0lBRTNDLENBQUMsT0FBTyxNQUNQLENBQUMsT0FDQXZCO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTdEosUUFBUWYsT0FBT3VLLFFBQVFGOztBQUN6QyxVQUFVLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVFmLE9BQU8wSyxTQUFTTDs7O0lBRTdDLENBQUMsT0FDQXZCO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTdEosUUFBUW9FLE9BQU9vRixRQUFRRjs7QUFDekMsU0FBUyxVQUFDQSxNQUFEO09BQVN0SixRQUFRb0UsT0FBT3lGLFFBQVFQOzs7O0FBTzlDek8sV0FBV3dJLFNBQVNDLE1BQU1nRztNQUN6QjtTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVCxVQUFVOzs7QUFFWDlZLE9BQU93UCxRQUFRbk8sUUFBUUwsR0FBRzBPLEtBQUt6TyxNQUM5QjtTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7O0FBRVZqQixPQUFPd1AsUUFBUWhCLFFBQVF4TixHQUFHME8sS0FBS3pPLE1BQzlCO1NBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUzs7QUFFVmpCLE9BQU93UCxRQUFRZixRQUFRek4sR0FBRzBPLEtBQUt6TyxNQUM5QjtTQUFTO0FBQ1QsVUFBVTs7T0FFWGpCLE9BQU93UCxRQUFRb0UsUUFBUTVTLEdBQUcwTyxLQUFLek8sTUFDOUI7U0FBUzs7O0FBR1hNLEtBQUssa0RBQWtEO0FBQ3REOEk7VUFBVWhKO1FBQU87QUFBSVIsT0FBTTs7QUFDM0JnUyxXQUFXM1QsSUFBSTJULFNBQ2QsQ0FBQyxPQUNBMEU7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN0SixRQUFRbk8sT0FBTzJYLFFBQVFGOztBQUN6QyxVQUFVLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVFuTyxPQUFPNFgsU0FBU0g7O0FBQzNDLFNBQVMsVUFBQ0EsTUFBRDtPQUFTdEosUUFBUW5PLE9BQU82WCxRQUFRSjs7O0FBQzFDeEIsVUFDQztVQUFVO0FBQ1YsVUFBVTs7R0FFWCxDQUFDLE9BQ0FDO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTdEosUUFBUTNPLE1BQU1tWSxRQUFRRjs7QUFDeEMsVUFBVSxVQUFDQSxNQUFEO09BQVN0SixRQUFRM08sTUFBTW9ZLFNBQVNIOztBQUMxQyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3RKLFFBQVEzTyxNQUFNcVksUUFBUUo7O0FBQ3hDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTdEosUUFBUTNPLE1BQU1zWSxTQUFTTDs7O0FBQzNDeEIsVUFDQztTQUFTOzs7QUFLYmpOLFdBQVd3SSxTQUFTQyxNQUFNZ0c7TUFDekI7U0FBUzs7O0FBRVY5WSxPQUFPd1AsUUFBUW5PLFFBQVFMLEdBQUcwTyxLQUFLek8sTUFDOUI7VUFBVTtBQUNWLFNBQVM7O09BRVZqQixPQUFPd1AsUUFBUTNPLE9BQU9HLEdBQUcwTyxLQUFLek8sTUFDN0I7U0FBUztBQUNULFNBQVM7OztBQUdYTSxLQUFLLHdDQUF3QztBQUM1Q3FLO1FBQVF2SztRQUFPO0FBQUdSLE9BQU07QUFBR3lZLFlBQVc7O0FBQ3RDekcsV0FBVzNULElBQUkyVCxTQUNkLENBQUMsT0FDQTNDO0tBQUs7QUFDTHFILFdBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTbE4sTUFBTXZLOzs7QUFDekJpVyxVQUNDO1NBQVM7O0dBRVYsQ0FBQyxPQUNBcEg7S0FBSztBQUNMcUgsV0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVNsTixNQUFNdks7O0FBQ3hCLFVBQVUsVUFBQ3lYLE1BQUQ7T0FBU2xOLE1BQU0vSzs7O0FBQzFCeVcsVUFDQztVQUFVOztHQUVYLENBQUMsT0FDQXBIO0tBQUs7QUFDTHFILFdBQ0M7VUFBVSxVQUFDdUIsTUFBRDtPQUFTbE4sTUFBTTBOOzs7QUFDMUJoQyxVQUNDO1VBQVU7OztBQU1mekUsU0FBU0MsTUFBTWdHO01BQUs7U0FBUTs7O0FBQzVCOVksT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSWpLO1FBQU87QUFBR1IsT0FBTTtBQUFHeVksWUFBVzs7QUFFbkR6RyxTQUFTQztPQUNUOVMsT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSWpLO1FBQU87QUFBR1IsT0FBTTtBQUFHeVksWUFBVzs7O0FBR3BEL1gsS0FBSywyRUFBMkU7QUFDL0VxSztRQUFRO0FBQ1JpSCxXQUFXM1QsSUFBSTJULFNBQ2QsQ0FBQyxPQUFPLE1BQ1AsQ0FBQyxXQUFXLE1BQ1gsQ0FBQyxPQUNBMEU7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVNsTjs7O0FBQ25CMEwsVUFDQztTQUFTOzs7QUFNZHpFLFNBQVNDLE1BQU1nRztNQUFLO1NBQVE7OztBQUM1QjlZLE9BQU80TCxPQUFPNUssR0FBR0MsTUFBTTtBQUV2QjRSLFNBQVNDO09BQ1Q5UyxPQUFPNEwsT0FBTzVLLEdBQUdDLE1BQU07O0FBR3hCTSxLQUFLLCtDQUErQztBQUNuRHFLO1VBQVU7QUFBSUEsUUFBUTtBQUFDNUosR0FBRTtBQUFHMkssR0FBRTtBQUFHQyxHQUFFO0FBQUcyTSxHQUFFO0FBQUd0USxHQUFFO0FBQUd1USxHQUFFOztBQUNsRDNHLFdBQVczVCxJQUFJMlQsU0FDZCxDQUFDLE9BQ0EwRTtXQUNDO0tBQUssVUFBQ3VCLE1BQUQ7QUFBU3RKLFFBQVF4TixJQUFJOFc7T0FBTWxOLE1BQU01Sjs7QUFDdEMsS0FBSyxVQUFDOFcsTUFBRDtBQUFTdEosUUFBUTdDLElBQUltTTtPQUFNbE4sTUFBTWU7O0FBQ3RDLEtBQUssVUFBQ21NLE1BQUQ7QUFBU3RKLFFBQVE1QyxJQUFJa007T0FBTWxOLE1BQU1nQjs7QUFDdEMsS0FBSyxVQUFDa00sTUFBRDtBQUFTdEosUUFBUStKLElBQUlUO09BQU1sTixNQUFNMk47O0FBQ3RDLEtBQUssVUFBQ1QsTUFBRDtBQUFTdEosUUFBUXZHLElBQUk2UDtPQUFNbE4sTUFBTTNDOztBQUN0QyxLQUFLLFVBQUM2UCxNQUFEO0FBQVN0SixRQUFRZ0ssSUFBSVY7T0FBTWxOLE1BQU00Tjs7O0FBQ3ZDbEMsVUFDQztLQUFLO0FBQ0wsS0FBSztBQUNMLEtBQUs7OztBQUtSak4sV0FBV3dJLFNBQVNDLE1BQU1nRztNQUFNO0FBQUNuTSxHQUFFO0FBQUc0TSxHQUFFO0FBQUd0USxHQUFFO0FBQUd1USxHQUFFOzs7QUFDbER4WixPQUFPd1AsU0FBU3hPLEdBQUcwTyxLQUFLek8sTUFBTTtBQUFDZSxHQUFFO0FBQUcySyxHQUFFO0FBQUdDLEdBQUU7QUFBRzJNLEdBQUU7QUFBR3RRLEdBQUU7QUFBR3VRLEdBQUU7O0FBQzFEeFosT0FBTzRMLE9BQU81SyxHQUFHME8sS0FBS3pPLE1BQU07QUFBQ2UsR0FBRTtBQUFHMkssR0FBRTtBQUFHQyxHQUFFO0FBQUcyTSxHQUFFO0FBQUd0USxHQUFFO0FBQUd1USxHQUFFOztBQUV4RG5QLFNBQVNvUCxVQUFVelg7R0FBRTtBQUFJMkssR0FBRTtBQUFJNE0sR0FBRTtBQUFJdFEsR0FBRTs7QUFDdkNqSixPQUFPd1AsU0FBU3hPLEdBQUcwTyxLQUFLek8sTUFBTTtBQUFDZSxHQUFFO0FBQUkySyxHQUFFO0FBQUlDLEdBQUU7QUFBRzJNLEdBQUU7QUFBSXRRLEdBQUU7QUFBSXVRLEdBQUU7O09BQzlEeFosT0FBTzRMLE9BQU81SyxHQUFHME8sS0FBS3pPLE1BQU07QUFBQ2UsR0FBRTtBQUFHMkssR0FBRTtBQUFHQyxHQUFFO0FBQUcyTSxHQUFFO0FBQUd0USxHQUFFO0FBQUd1USxHQUFFOzs7QUFHekRqWSxLQUFLLG9GQUFvRjtBQUN4RnFLO1FBQVE7QUFDUmlILFdBQVczVCxJQUFJMlQsU0FDZCxDQUFDLE9BQ0EzQztLQUFLO0FBQ0xxSCxXQUFXbUM7T0FBTztBQUFLQzs7ZUFBYTs7T0FBRy9OLE1BQU0sS0FBQ3NFOzs7R0FFOUMsQ0FBQyxPQUNBQTtLQUFLO0FBQ0w0SSxNQUFNRTtPQUFPOztBQUNiekIsV0FBV21DO09BQU87QUFBS0M7O2VBQWE7O09BQUcvTixNQUFNLEtBQUNzRTs7O0lBRy9DLENBQUMsT0FDQUE7S0FBSztHQUNMLENBQUMsT0FDQUE7S0FBSztHQUVMLENBQUMsT0FDQUE7S0FBSztBQUNMcUgsV0FBV21DO09BQU87QUFBS0M7O2VBQWE7O09BQUcvTixNQUFNLEtBQUNzRTs7OztBQU9uRGxRLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUk7QUFDckJ1SCxTQUFTQztBQUNUOVMsT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSTFEO01BQUs7QUFBR0MsTUFBSztBQUFHK1IsTUFBSzs7QUFFMUMvRyxTQUFTQztBQUNUOVMsT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSTFEO01BQUs7QUFBR0MsTUFBSztBQUFHK1IsTUFBSzs7QUFFMUMvRyxTQUFTaFMsTUFBTWdILEtBQUtpTCxNQUFNZ0c7TUFBS0c7UUFBTzs7O0FBQ3RDalosT0FBTzRMLE9BQU81SyxHQUFHc0ssSUFBSTFEO01BQUs7QUFBR0MsTUFBSztBQUFHK1IsTUFBSzs7QUFFMUMvRyxTQUFTaFMsTUFBTXVOLEtBQUswRTtBQUNwQjlTLE9BQU80TCxPQUFPNUssR0FBR3NLLElBQUkxRDtNQUFLO0FBQUdDLE1BQUs7QUFBRytSLE1BQUs7O0FBRTFDL0csU0FBU2hTLE1BQU11TixLQUFLMEU7T0FDcEI5UyxPQUFPNEwsT0FBTzVLLEdBQUdzSyxJQUFJMUQ7TUFBSztBQUFHQyxNQUFLO0FBQUcrUixNQUFLOzs7QUFHM0NyWSxLQUFLLG1GQUFtRjtBQUN2RnNZO1NBQVNqUztNQUFLO0FBQUlDLE1BQUs7O0FBQ3ZCZ0wsV0FBVzNULElBQUkyVCxTQUNkLENBQUMsT0FDQTNDO0tBQUs7QUFDTHFILFdBQ0N6VDtNQUFNLFVBQUNBLE1BQUQ7T0FBU2tTLE9BQU8sS0FBQzlGLEtBQUtwTSxPQUFPQTs7QUFDbkNoQixNQUFNLFVBQUNBLE1BQUQ7T0FBU2tULE9BQU8sS0FBQzlGLEtBQUtwTixPQUFPQTs7QUFDbkM0VyxPQUFPO09BQUsxRCxPQUFPLEtBQUM5RixLQUFLd0osUUFBUTlRLFVBQVU7OztHQUU1QyxDQUFDLE9BQ0FzSDtLQUFLO0dBRUwsQ0FBQyxPQUNBQTtLQUFLO0FBQ0xvSCxVQUFVMEI7T0FBTzs7QUFDakJ6QixXQUNDelQ7TUFBTSxVQUFDQSxNQUFEO09BQVNrUyxPQUFPLEtBQUM5RixLQUFLcE0sT0FBT0E7O0FBQ25DaEIsTUFBTSxVQUFDQSxNQUFEO09BQVNrVCxPQUFPLEtBQUM5RixLQUFLcE4sT0FBT0E7O0FBQ25DNFcsT0FBTztPQUFLMUQsT0FBTyxLQUFDOUYsS0FBS3dKLFFBQVE5USxVQUFVOzs7O0FBS2hEaVIsV0FDQy9WO01BQU07QUFDTmhCLE1BQU07QUFDTjRXLE9BQU87QUFBQzVWLE1BQUs7QUFBT2hCLE1BQUs7QUFBT1MsT0FBTTtBQUFPdVcsTUFBSzs7O0FBR25EOVosT0FBT2dXLFFBQVFoVixHQUFHc0ssSUFBSTFEO01BQUs7QUFBSUMsTUFBSzs7QUFFcENnTCxTQUFTQyxNQUFNZ0c7TUFBSztBQUFDaFYsTUFBSztBQUFPaEIsTUFBSztBQUFPUyxPQUFNO0FBQU91VyxNQUFLOzs7QUFDL0Q5WixPQUFPZ1csUUFBUWhWLEdBQUdzSyxJQUFJO0FBQUMxRCxNQUFLaVM7QUFBVWhTLE1BQUtnUzs7QUFFM0MsT0FBTzdELE9BQU9wTztBQUNkQztNQUFNOztBQUNOZ0wsU0FBU2hTLE1BQU1nSCxLQUFLaUwsTUFBTWdHO01BQUs7QUFBQ2hWLE1BQUs7QUFBT2hCLE1BQUs7QUFBT1MsT0FBTTtBQUFPdVcsTUFBSzs7O09BQzFFOVosT0FBT2dXLFFBQVFoVixHQUFHc0ssSUFBSTtBQUFDekQsTUFBS2dTOzs7QUFHN0J0WSxLQUFLLDRDQUE0QztBQUNoRHNYO2VBQWU7QUFDZmhHLFdBQVczVCxJQUFJMlQsU0FDZCxDQUFDLE9BQ0EwRTtXQUFXO2FBQWEsVUFBQ3VCLE1BQUQ7T0FBU0QsZUFBZUMsUUFBUTs7OztBQUcxRDVCLGVBQWVyRSxTQUFTNEQsT0FBTzFSO1NBQVErVDtNQUFLO0FBQUMsYUFBWTs7OztBQUV6RGpHLFNBQVNDO0FBQ1Q5UyxPQUFPNlksY0FBYzdYLEdBQUdDLE1BQU07QUFDOUJpVyxhQUFhcEU7QUFDYjlTLE9BQU82WSxjQUFjN1gsR0FBR0MsTUFBTTtBQUU5QjRSLFNBQVNDLE1BQU0vTjtTQUFRK1Q7TUFBSztBQUFDLGFBQVk7Ozs7T0FDekM5WSxPQUFPNlksY0FBYzdYLEdBQUdDLE1BQU07O0FBRy9CTSxLQUFLLHFGQUFxRjtBQUN6RnNYO2VBQWVyVTtLQUFJO0FBQU1DLEtBQUk7O0FBQzdCb08sV0FBVzNULElBQUkyVCxTQUNkLENBQUMsT0FBTyxNQUVQLENBQUMsUUFDQWlHO01BQU10VTtLQUFLOztBQUNYK1MsV0FDQztPQUFPLFVBQUN1QixNQUFEO09BQVNELGFBQWFyVSxNQUFNc1UsUUFBUTs7QUFDM0MsT0FBTyxVQUFDQSxNQUFEO09BQVNELGFBQWFwVSxNQUFNcVUsUUFBUTs7OztBQUkvQzVCLGVBQWVyRSxTQUFTNEQsT0FBTzFSO1NBQVErVDtNQUFLO0FBQUNyVSxLQUFJOzs7O0FBRWpEb08sU0FBU0M7QUFDVDlTLE9BQU82WSxjQUFjN1gsR0FBR3NLLElBQUk5RztLQUFJO0FBQUtDLEtBQUk7O0FBQ3pDb1UsZUFBZXJVO0tBQUk7QUFBTUMsS0FBSTs7QUFFN0J5UyxhQUFhcEU7QUFDYjlTLE9BQU82WSxjQUFjN1gsR0FBR3NLLElBQUk5RztLQUFJO0FBQUtDLEtBQUk7O0FBQ3pDb1UsZUFBZXJVO0tBQUk7QUFBTUMsS0FBSTs7QUFFN0JvTyxTQUFTQyxNQUFNL047U0FBUStUO01BQUs7QUFBQ3JVLEtBQUk7Ozs7QUFDakN6RSxPQUFPNlksY0FBYzdYLEdBQUdzSyxJQUFJOUc7S0FBSTtBQUFLQyxLQUFJOztBQUN6Q29VLGVBQWVyVTtLQUFJO0FBQU1DLEtBQUk7O0FBRTdCb08sU0FBU0MsTUFBTS9OO1NBQVErVDtNQUFLO0FBQUN0VSxLQUFJOzs7O09BQ2pDeEUsT0FBTzZZLGNBQWM3WCxHQUFHc0ssSUFBSTlHO0tBQUk7QUFBS0MsS0FBSTs7O0FBRzFDbEQsS0FBSywyRUFBMkU7QUFDL0V1TztlQUFlek87UUFBTztBQUFNUixPQUFNOztBQUNsQ2taLFlBQVk1YSxJQUFJMFQsU0FDZixDQUFDLE9BQ0EwRTtXQUFXL1M7S0FBSyxVQUFDc1UsTUFBRDtPQUFTRCxhQUFheFgsU0FBU3lYOzs7R0FFL0MsQ0FBQyxRQUNBdkI7V0FBVy9TO0tBQUssVUFBQ3NVLE1BQUQ7T0FBU0QsYUFBYWhZLFFBQVFpWTs7OztBQUlqRGtCLFlBQVlELFVBQVV0RCxPQUFPd0Q7b0JBQW1COztBQUVoRGphLE9BQU82WSxjQUFjN1gsR0FBR3NLLElBQUlqSztRQUFPO0FBQU1SLE9BQU07O0FBRS9DaVAsTUFBTWlLLFVBQVVqSCxNQUFNZ0c7TUFBSztBQUFDdFUsS0FBSTs7O0FBQ2hDeEUsT0FBTzZZLGNBQWM3WCxHQUFHc0ssSUFBSWpLO1FBQU87QUFBS1IsT0FBTTs7QUFFOUNnWSxlQUFleFg7UUFBTztBQUFNUixPQUFNOztBQUNsQ2tQLE1BQU1pSyxVQUFVbEgsTUFBTWdHO01BQUs7QUFBQ3RVLEtBQUk7OztBQUNoQ3hFLE9BQU82WSxjQUFjN1gsR0FBR3NLLElBQUlqSztRQUFPO0FBQUtSLE9BQU07O0FBRTlDZ1ksZUFBZXhYO1FBQU87QUFBTVIsT0FBTTs7QUFDbENpUCxJQUFJMkosVUFBVTtBQUFDalYsS0FBSTs7QUFDbkJ4RSxPQUFPNlksY0FBYzdYLEdBQUdzSyxJQUFJaks7UUFBTztBQUFLUixPQUFNOztBQUU5Q2dZLGVBQWV4WDtRQUFPO0FBQU1SLE9BQU07O0FBQ2xDa1AsSUFBSTBKLFVBQVU7QUFBQ2pWLEtBQUk7O0FBQ25CeEUsT0FBTzZZLGNBQWM3WCxHQUFHc0ssSUFBSWpLO1FBQU87QUFBS1IsT0FBTTs7QUFFOUNrUCxJQUFJNkMsVUFBVTZHLFVBQVU7QUFBQ2pWLEtBQUk7O09BQzdCeEUsT0FBTzZZLGNBQWM3WCxHQUFHc0ssSUFBSWpLO1FBQU87QUFBS1IsT0FBTTs7O0FBRy9DVSxLQUFLLDZEQUE2RDtBQUNqRWdXO1VBQVU7QUFDVkEsWUFDQ21DO09BQU87T0FBS1EsUUFBUXpLLEtBQUssS0FBQ1M7O0FBQzFCMUwsS0FBSztPQUFLMFYsUUFBUXpLLEtBQUssS0FBQ1M7OztBQUV6QjJDLFdBQVcxVCxJQUFJMFQsU0FDZCxDQUFDLE9BQ0E7QUFBQzBFO0FBQVdoWCxJQUFHO0dBQ2YsQ0FBQyxPQUNBO0FBQUNnWDtBQUFXaFgsSUFBRztHQUNmLENBQUMsT0FDQTtBQUFDZ1g7QUFBV2hYLElBQUc7S0FHakIsQ0FBQyxPQUNBO0FBQUNnWDtBQUFXaFgsSUFBRzs7QUFJbEJQLE9BQU9rYSxTQUFTbFosR0FBR3NLLElBQUk7QUFDdkJuSyxLQUFLMFIsU0FBU0M7QUFDZDlTLE9BQU9rYSxTQUFTbFosR0FBR3NLLElBQUksQ0FBQyxVQUFVLFVBQVUsVUFBVTtBQUV0RDRPLFFBQVFuWixTQUFTO0FBQ2pCSSxHQUFHc1ksVUFBVWpWO0tBQUk7O09BQ2pCeEUsT0FBT2thLFNBQVNsWixHQUFHc0ssSUFBSSxDQUFDLFVBQVUsVUFBVSxVQUFVOztPQUd2RC9KLEtBQUssNEZBQTRGO0FBQ2hHZ1c7VUFBVTtBQUNWQSxZQUFhL1M7S0FBSztPQUFLMFYsUUFBUXpLLEtBQUssS0FBQ1M7OztBQUVyQzJDLFdBQVcxVCxJQUFJMFQsU0FDZCxDQUFDLE9BQ0E7QUFBQzBFO0FBQVdoWCxJQUFHO0FBQVU0WixxQkFBb0I7R0FDN0MsQ0FBQyxPQUNBO0FBQUM1QztBQUFXaFgsSUFBRztHQUNmLENBQUMsT0FDQTtBQUFDZ1g7QUFBV2hYLElBQUc7QUFBVTRaLHFCQUFvQjtLQUcvQyxDQUFDLE9BQ0E7QUFBQzVDO0FBQVdoWCxJQUFHOztBQUlsQlAsT0FBT2thLFNBQVNsWixHQUFHc0ssSUFBSTtBQUN2Qm5LLEtBQUswUixTQUFTQyxNQUFNZ0c7TUFBS3RVO0tBQUk7OztBQUM3QnhFLE9BQU9rYSxTQUFTbFosR0FBR3NLLElBQUksQ0FBQyxVQUFVLFVBQVUsVUFBVTtBQUV0RDRPLFFBQVFuWixTQUFTO0FBQ2pCSSxHQUFHc1ksVUFBVWpWO0tBQUk7O0FBQ2pCeEUsT0FBT2thLFNBQVNsWixHQUFHc0ssSUFBSSxDQUFDLFVBQVU7QUFFbEM0TyxRQUFRblosU0FBUztBQUNqQkksR0FBR3NZLFVBQVVqVjtLQUFJOztPQUNqQnhFLE9BQU9rYSxTQUFTbFosR0FBR3NLLElBQUksQ0FBQyxVQUFVOzs7O09BSXJDaEssTUFBTSxRQUFRO0FBQ2JDLEtBQUssdUJBQXVCO0FBQzNCdkIsT0FBT2QsSUFBSWtiLFdBQVdsYixJQUFJMlQsU0FBUyxDQUFDLFVBQVM3UixHQUFHVyxHQUFFO0FBQ2xEM0IsT0FBT2QsSUFBSWtiLFdBQVdsYixJQUFJd0MsUUFBT1YsR0FBR1csR0FBRTtBQUN0QzNCLE9BQU9kLElBQUlrYixXQUFXbGIsSUFBSXdDLE1BQU0sS0FBSVYsR0FBR1csR0FBRTtBQUN6QzNCLE9BQU9kLElBQUlrYixXQUFXLEtBQUlwWixHQUFHVyxHQUFFO0FBQy9CM0IsT0FBT2QsSUFBSWtiLFdBQVcsV0FBVXBaLEdBQUdXLEdBQUU7QUFDckMzQixPQUFPZCxJQUFJa2IsV0FBVyxJQUFHcFosR0FBR1csR0FBRTtBQUM5QjNCLE9BQU9kLElBQUlrYixXQUFXLFFBQU9wWixHQUFHVyxHQUFFO09BQ2xDM0IsT0FBT2QsSUFBSWtiLFdBQVcsT0FBTXBaLEdBQUdXLEdBQUU7O0FBR2xDSixLQUFLLHNCQUFzQjtBQUMxQnZCLE9BQU9kLElBQUltYixVQUFVbmIsSUFBSTJULFNBQVMsQ0FBQyxVQUFTN1IsR0FBR1csR0FBRTtBQUNqRDNCLE9BQU9kLElBQUltYixVQUFVbmIsSUFBSXdDLFFBQU9WLEdBQUdXLEdBQUU7QUFDckMzQixPQUFPZCxJQUFJbWIsVUFBVW5iLElBQUlrRCxTQUFRcEIsR0FBR1csR0FBRTtBQUN0QzNCLE9BQU9kLElBQUltYixVQUFVbmIsSUFBSXdDLE1BQU0sS0FBSVYsR0FBR1csR0FBRTtBQUN4QzNCLE9BQU9kLElBQUltYixVQUFVLEtBQUlyWixHQUFHVyxHQUFFO0FBQzlCM0IsT0FBT2QsSUFBSW1iLFVBQVUsV0FBVXJaLEdBQUdXLEdBQUU7QUFDcEMzQixPQUFPZCxJQUFJbWIsVUFBVSxJQUFHclosR0FBR1csR0FBRTtBQUM3QjNCLE9BQU9kLElBQUltYixVQUFVLFFBQU9yWixHQUFHVyxHQUFFO09BQ2pDM0IsT0FBT2QsSUFBSW1iLFVBQVUsT0FBTXJaLEdBQUdXLEdBQUU7O0FBR2pDSixLQUFLLGlCQUFpQjtBQUNyQnZCLE9BQU9kLElBQUlvYixLQUFLcGIsSUFBSTJULFNBQVMsQ0FBQyxVQUFTN1IsR0FBR1csR0FBRTtBQUM1QzNCLE9BQU9kLElBQUlvYixLQUFLcGIsSUFBSXdDLFFBQU9WLEdBQUdXLEdBQUU7QUFDaEMzQixPQUFPZCxJQUFJb2IsS0FBS3BiLElBQUlrRCxTQUFRcEIsR0FBR1csR0FBRTtBQUNqQzNCLE9BQU9kLElBQUlvYixLQUFLcGIsSUFBSXdDLE1BQU0sS0FBSVYsR0FBR1csR0FBRTtBQUNuQzNCLE9BQU9kLElBQUlvYixLQUFLcGIsSUFBSWtELE9BQU8sS0FBSXBCLEdBQUdXLEdBQUU7QUFDcEMzQixPQUFPZCxJQUFJb2IsS0FBSyxLQUFJdFosR0FBR1csR0FBRTtBQUN6QjNCLE9BQU9kLElBQUlvYixLQUFLLFdBQVV0WixHQUFHVyxHQUFFO0FBQy9CM0IsT0FBT2QsSUFBSW9iLEtBQUssSUFBR3RaLEdBQUdXLEdBQUU7QUFDeEIzQixPQUFPZCxJQUFJb2IsS0FBSyxRQUFPdFosR0FBR1csR0FBRTtPQUM1QjNCLE9BQU9kLElBQUlvYixLQUFLLE9BQU10WixHQUFHVyxHQUFFOztBQUc1QkosS0FBSyxtQkFBbUI7QUFDdkJrQjtVQUFVdkQsSUFDVCxDQUFDLFdBQVU7QUFDVnFCLElBQUk7QUFDSjZDLFdBQVc7QUFDWCtCLE9BQ0M7WUFBWTtBQUNaLFdBQVc7QUFDWCxZQUFZO09BQUs7O0FBQ2pCeUYsUUFDQ047VUFBVTtBQUNWTyxVQUNDUDtVQUFVOzs7O0dBRWIsQ0FBQyxPQUFPO0FBQUMvSixJQUFHO0FBQVU0RSxPQUFNNEY7VUFBUzs7R0FBYSxxQkFDbEQscUJBQ0EsQ0FBQyxRQUFRO0FBQUN4SyxJQUFHO0FBQVUyUCxLQUFJO0FBQWUvSyxPQUFNNEY7VUFBUzs7R0FDeEQsb0JBQ0EsQ0FBQyxRQUFRO0FBQUMzSSxNQUFLO0lBQ2YsQ0FBQyxLQUFLO0FBQUM0QixLQUFJO01BR1pxQixTQUFTcEY7QUFDWGIsT0FBT21iLGNBQWNDLEtBQUtDLFVBQVVoWSxTQUFTLE1BQU07QUFDbkRpWSxjQUFjeGIsSUFBSXNiLEtBQUtHLE1BQU1KLGNBQWNsVixTQUFTcEY7QUFFcERELE9BQU8wYSxZQUFZN1gsTUFBTTdCLEdBQUdDLE1BQU13QixRQUFRSTtBQUMxQzdDLE9BQU8wYSxZQUFZeEssS0FBS2xQLEdBQUdDLE1BQU13QixRQUFReU47QUFDekNsUSxPQUFPMGEsWUFBWXZaLEdBQUdaLElBQUlTLEdBQUdDLE1BQU13QixRQUFRdEIsR0FBR1o7QUFDOUNQLE9BQU8wYSxZQUFZdlosR0FBR2lDLFdBQVdwQyxHQUFHQyxNQUFNd0IsUUFBUXRCLEdBQUdpQztBQUNyRHBELE9BQU8wYSxZQUFZdlYsTUFBTSxhQUFZbkUsR0FBR0MsTUFBTXdCLFFBQVEwQyxNQUFNO0FBQzVEbkYsT0FBTzBhLFlBQVl2VixNQUFNLFlBQVduRSxHQUFHQyxNQUFNd0IsUUFBUTBDLE1BQU07QUFDM0RuRixPQUFPMGEsWUFBWXZWLE1BQU0sYUFBWXBDLElBQUkvQixHQUFHQyxNQUFNd0IsUUFBUTBDLE1BQU07QUFFaEUxQyxRQUFRMEMsTUFBTSxZQUFZO0FBQzFCMUMsUUFBUThJLE1BQU0sU0FBUztBQUN2Qm1QLFlBQVluUCxNQUFNLFNBQVM7QUFDM0J2TCxPQUFPMGEsWUFBWXZWLE1BQU0sYUFBWW5FLEdBQUdDLE1BQU13QixRQUFRMEMsTUFBTTtBQUU1RDFDLFFBQVE4SSxNQUFNLFdBQVc7QUFDekJtUCxZQUFZblAsTUFBTSxXQUFXO0FBQzdCdkwsT0FBTzBhLFlBQVl2VixNQUFNLGFBQVluRSxHQUFHQyxNQUFNd0IsUUFBUTBDLE1BQU07QUFFNURuRixPQUFPMGEsWUFBWTVaLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU13QixRQUFRM0IsU0FBU0M7QUFDOURmLE9BQU95VCxPQUFPQyxLQUFLZ0gsWUFBWTdaLE9BQU9FLFFBQVFDLEdBQUdDLE1BQU13UyxPQUFPQyxLQUFLalIsUUFBUTVCLE9BQU9FO0FBQ2xGZixPQUFPMGEsWUFBWXRZLE1BQU1wQixHQUFHQyxNQUFNd0IsUUFBUUw7QUFDMUNwQyxPQUFPMGEsWUFBWXhVLE1BQU1sRixHQUFHQyxNQUFNd0IsUUFBUXlEO0FBQzFDbEcsT0FBTzBhLFlBQVk1WixTQUFTLEdBQUdxRSxNQUFNLGFBQVluRSxHQUFHQyxNQUFNd0IsUUFBUTNCLFNBQVMsR0FBR3FFLE1BQU07QUFDcEZuRixPQUFPMGEsWUFBWTVaLFNBQVMsR0FBR3FFLE1BQU0sYUFBWW5FLEdBQUdDLE1BQU13QixRQUFRM0IsU0FBUyxHQUFHcUUsTUFBTTtPQUNwRm5GLE9BQU8wYSxZQUFZNVosU0FBUyxHQUFHb1AsS0FBS2xQLEdBQUdDLE1BQU13QixRQUFRM0IsU0FBUyxHQUFHb1A7O0FBR2xFM08sS0FBSyxZQUFZO0FBQ2hCcVo7TUFBTTFiLElBQUl3QztBQUNWa1osY0FBY2xaLElBQ1o2SixNQUFNLE9BQU8sTUFDYnNCLGFBQ0ExSCxRQUNBb0MsSUFBSSxTQUFTLElBQ2IrRSxLQUFLLFFBQVEsS0FDYnRCLEtBQUssZUFBZSxLQUNwQjZFLGtCQUFrQjtBQUFDdEosUUFBTztHQUMxQnNVLGlCQUFpQjtBQUFDOU4sT0FBTTtHQUN4QjlHLFNBQ0FaLFdBQ0FvUCxVQUNBQyxZQUNBRyxTQUNBRixRQUNBdEcsZUFDQXVHLGNBQ0E1SyxTQUNBbUwsS0FBS2pXLElBQUl1RCxXQUNUMlMsU0FDQUQsS0FBS2pXLElBQUlxRCxVQUNUa0YsVUFDQXBDLFNBQVNwRixTQUNUa1YsS0FBSzlJLE9BQUtuTixJQUFJcUQsVUFDZDhGLEdBQUcsT0FBTyxnQkFDVkssS0FBSyxPQUNMZixJQUFJLE9BQ0pBO0FBRUYzSCxPQUFPNGEsYUFBYTVaLEdBQUdDLE1BQU1TO0FBQzdCMUIsT0FBT0MsUUFBUWEsU0FBUyxJQUFJRSxHQUFHQyxNQUFNb0wsS0FBS2xMO0FBQzFDbkIsT0FBTzBCLElBQUlMLFFBQVFMLEdBQUdDLE1BQU1vTDtPQUM1QnJNLE9BQU8wQixJQUFJNkYsSUFBSSxVQUFTdkcsR0FBR0MsTUFBTTs7T0FHbENNLEtBQUsscUJBQXFCO0FBQ3pCdVo7T0FBTzViLElBQUlrRCxLQUFLLFlBQVk7QUFBQzJZLFVBQVM7O0FBQ3RDclosTUFBTXhDLElBQUl3QyxJQUFJO0FBQUNxWixVQUFTOztBQUV4Qi9hLE9BQU9kLE9BQU84QixHQUFHQyxNQUFNO0FBQ3ZCakIsT0FBT2QsSUFBSSxPQUFPOEIsR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU9kLElBQUksS0FBSzhCLEdBQUdDLE1BQU07QUFDekJqQixPQUFPMEIsSUFBSXNaLGlCQUFpQmhhLEdBQUdDLE1BQU1TO0FBQ3JDMUIsT0FBT29DLEtBQUsyQyxRQUFRZ1csVUFBVS9aLEdBQUdDLE1BQU07QUFDdkNqQixPQUFPMEIsSUFBSXFELFFBQVFnVyxVQUFVL1osR0FBR0MsTUFBTTtBQUN0Q2pCLE9BQU8wQixJQUFJMkcsTUFBTXJILEdBQUdDLE1BQU1TO0FBQzFCMUIsT0FBTzBCLElBQUkyRyxHQUFHLFFBQVFySCxHQUFHQyxNQUFNUztBQUMvQjFCLE9BQU8wQixJQUFJMkcsR0FBRyxPQUFPLEtBQUtySCxHQUFHQyxNQUFNUztBQUNuQzFCLE9BQU8wQixJQUFJNkgsS0FBSyxRQUFRdkksR0FBR0MsTUFBTVM7QUFDakMxQixPQUFPMEIsSUFBSWlHLElBQUksa0JBQWtCM0csR0FBR0MsTUFBTVM7QUFFMUM0SCxZQUFZO0FBQUc1SCxJQUFJMkcsR0FBRyxhQUFheVMsS0FBRztPQUFLeFI7O0FBQzNDdEosT0FBTzBCLElBQUlnSCxLQUFLLEtBQUsxSCxHQUFHQyxNQUFNUztBQUM5QjFCLE9BQU8wQixJQUFJZ0gsUUFBUTFILEdBQUdDLE1BQU1TO0FBQzVCMUIsT0FBTzBCLElBQUltSCxZQUFZLFNBQVM3SCxHQUFHQyxNQUFNUztBQUN6QzFCLE9BQU8wQixJQUFJbUgsWUFBWSxLQUFLN0gsR0FBR0MsTUFBTVM7QUFDckMxQixPQUFPMEIsSUFBSW1ILGVBQWU3SCxHQUFHQyxNQUFNUztBQUNuQzFCLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUMzQmpCLE9BQU8wQixJQUFJZ0gsS0FBSyxjQUFjMUgsR0FBR0MsTUFBTVM7QUFDdkMxQixPQUFPc0osV0FBV3RJLEdBQUdDLE1BQU07QUFDM0JqQixPQUFPMEIsSUFBSWlHLElBQUksYUFBYSxpQkFBTzNHLEdBQUdDLE1BQU1TO0FBQzVDMUIsT0FBTzBCLElBQUlnSCxLQUFLLGNBQWMxSCxHQUFHQyxNQUFNUztBQUN2QzFCLE9BQU9zSixXQUFXdEksR0FBR0MsTUFBTTtBQUUzQlMsSUFBSTZGLElBQUksTUFBTTtBQUNkdkgsT0FBTzBCLElBQUlQLEdBQUdnRSxNQUFLLFNBQU9uRSxHQUFHQyxNQUFNO0FBRW5DakIsT0FBTzBCLElBQUk2SixTQUFTdkssR0FBR3NLLElBQUk7QUFDM0J0TCxPQUFPMEIsSUFBSTZKLE1BQU0sTUFBTSxPQUFLdkssR0FBR0MsTUFBTTtBQUNyQ2pCLE9BQU8wQixJQUFJNkosTUFBTSxLQUFLLE9BQUt2SyxHQUFHQyxNQUFNO0FBQ3BDakIsT0FBTzBCLElBQUk2SixNQUFNLFFBQVEsT0FBSXZLLEdBQUdDLE1BQU1TO0FBQ3RDMUIsT0FBTzBCLElBQUk2SixNQUFNLFNBQVF2SyxHQUFHVyxHQUFFO0FBQzlCM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVksT0FBSXZLLEdBQUdDLE1BQU1TO0FBQzFDMUIsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBTzBCLElBQUk2SixNQUFNLFdBQVcsT0FBSXZLLEdBQUdDLE1BQU1TO0FBQ3pDMUIsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBQ2pDM0IsT0FBTzBCLElBQUk2SixNQUFNLFdBQVcsU0FBV3ZLLEdBQUdDLE1BQU1TO0FBQ2hEMUIsT0FBTzBCLElBQUk2SixNQUFNLFlBQVd2SyxHQUFHVyxHQUFFO0FBRWpDM0IsT0FBTzBCLElBQUltTyxrQkFBa0I7QUFBQzlDLE9BQU07QUFBQ3pHLE9BQU07O0lBQUt0RixHQUFHQyxNQUFNUztBQUN6RDFCLE9BQU8wQixJQUFJbU8sa0JBQWtCLE9BQU03TyxHQUFHQyxNQUFNUztBQUM1QzFCLE9BQU8wQixJQUFJbVosaUJBQWlCO0FBQUM5TixPQUFNO0lBQVEvTCxHQUFHQyxNQUFNUztBQUNwRDFCLE9BQU8wQixJQUFJbVosaUJBQWlCLE9BQU03WixHQUFHQyxNQUFNUztBQUUzQ0EsSUFBSTJELFNBQVNuRyxJQUFJZTtBQUNqQkQsT0FBTzBCLElBQUlMLFFBQVFMLEdBQUdDLE1BQU0vQixJQUFJZTtBQUVoQ3lCLElBQUl1RSxPQUFPO0FBQ1hqRyxPQUFPMEIsSUFBSVosU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ1MsSUFBSTJELFNBQVNoRjtBQUNiTCxPQUFPMEIsSUFBSUwsUUFBUUwsR0FBR0MsTUFBTS9CLElBQUllO0FBQ2hDeUIsSUFBSStTLFFBQVE7QUFDWnpVLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDUyxJQUFJZ1QsVUFBVTtBQUNkMVUsT0FBTzBCLElBQUlMLFFBQVFMLEdBQUdDLE1BQU0vQixJQUFJZTtBQUNoQ3lCLElBQUlpVCxNQUFNO0FBQ1YzVSxPQUFPMEIsSUFBSVosU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ1MsSUFBSWtULFlBQVk7QUFDaEI1VSxPQUFPMEIsSUFBSUwsUUFBUUwsR0FBR0MsTUFBTS9CLElBQUllO0FBQ2hDeUIsSUFBSW1ULE9BQU87QUFDWDdVLE9BQU8wQixJQUFJWixTQUFTQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDUyxJQUFJMk0sYUFBYTtBQUNqQnJPLE9BQU8wQixJQUFJTCxRQUFRTCxHQUFHQyxNQUFNL0IsSUFBSWU7QUFDaEN5QixJQUFJeVQsS0FBSztBQUNUblYsT0FBTzBCLElBQUlMLFFBQVFMLEdBQUdDLE1BQU0vQixJQUFJZTtBQUNoQ3lCLElBQUkrRixRQUFRO0FBQ1p6SCxPQUFPMEIsSUFBSUwsUUFBUUwsR0FBR0MsTUFBTS9CLElBQUllO0FBQ2hDeUIsSUFBSXNJO0FBQ0poSyxPQUFPMEIsSUFBSUwsUUFBUUwsR0FBR0MsTUFBTTtBQUM1QlMsSUFBSTBUO0FBQ0pwVixPQUFPMEIsSUFBSUwsUUFBUUwsR0FBR0MsTUFBTTtBQUM1QmpCLE9BQU9kLElBQUllLFNBQVNhLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFFOUNTLElBQUkyRCxTQUFTbkcsSUFBSWU7QUFDakJELE9BQU9kLElBQUllLFNBQVNhLFNBQVNDLFFBQVFDLEdBQUdDLE1BQU07QUFDOUMsSUFBRy9CLElBQUllLFNBQVNnYixjQUFoQjtBQUNDL2IsSUFBSWUsU0FBU2diLGFBQWE3WTtBQUMxQmxELElBQUllLFNBQVNnYixhQUFhL2IsSUFBSXdDO0FBQzlCMUIsT0FBT2QsSUFBSWUsU0FBU2EsU0FBU0MsUUFBUUMsR0FBR0MsTUFBTTs7QUFFL0NqQixPQUFPO09BQUtkLElBQUlrSTtHQUNkcEcsR0FBRTtBQUVKaEIsT0FBTztPQUFLZCxJQUFJa0ksTUFBTTtHQUNwQnBHLEdBQUU7QUFFSmhCLE9BQU87T0FBS2QsSUFBSWtJLE1BQU07R0FDcEJwRyxHQUFFO0FBRUpoQixPQUFPO09BQUtkLElBQUlrSSxNQUFNO0dBQ3BCcEcsR0FBRTtBQUVKaEIsT0FBTztPQUFLZCxJQUFJa0ksTUFBTSxDQUFDLEtBQUtuQixPQUFPL0csSUFBSXdDO0dBQ3JDVixHQUFFO0FBRUpoQixPQUFPO09BQUtkLElBQUlrSSxNQUFNLENBQUM7R0FDckJyRSxJQUFJL0IsR0FBRTtBQUtSaEIsT0FBTztPQUFLZCxJQUFJMlQ7R0FDZDdSLEdBQUU7QUFFSmhCLE9BQU87T0FBS2QsSUFBSTJULFNBQVM7R0FDdkI3UixHQUFFO0FBRUpoQixPQUFPO09BQUtkLElBQUkyVCxTQUFTO0dBQ3ZCN1IsR0FBRTtBQUVKaEIsT0FBTztPQUFLZCxJQUFJMlQsU0FBUyxDQUFDLE1BQU07QUFBQ3pQLFdBQVU7O0dBQ3pDcEMsR0FBRTtBQUVKaEIsT0FBTztPQUFLZCxJQUFJMlQsU0FBUyxDQUFDLE9BQU87R0FDL0I3UixHQUFFO0FBRUpoQixPQUFPO09BQUtkLElBQUkyVCxTQUFTLENBQUMsT0FBTyxNQUFNO0dBQ3JDOVAsSUFBSS9CLEdBQUU7QUFFUmhCLE9BQU87T0FBS2QsSUFBSXdDLElBQUl5RDtPQUFNO0FBQUMwRyxTQUFRO0FBQUssdUJBQXNCO0FBQUNBLFNBQVE7OztHQUFLeEcsU0FBU3BGO0dBQ25GOEMsSUFBSS9CLEdBQUU7T0FFUmhCLE9BQU87QUFDTjBCLE1BQU14QyxJQUFJd0M7QUFDVkEsSUFBSWdOLFVBQVVoTjtBQUNkQSxJQUFJNkosTUFBTSxTQUFTO09BQ25CdkwsT0FBTzBCLElBQUk2SixNQUFNLFVBQVN2SyxHQUFHQyxNQUFNO0dBQ2xDOEIsSUFBSS9CLEdBQUU7Ozs7QUFnQlhrYSxZQUFXQyxVQUFFQyxVQUFVLFVBQUNDLFdBQVdDLFVBQVo7QUFDdEIsSUFBRyxLQUFDN1Msa0JBQUo7T0FDQyxLQUFDQSxpQkFBaUI0UyxXQUFXQztPQUQ5QjtPQUdDLEtBQUNDLFlBQVksT0FBS0YsV0FBYUM7OztBQUdqQ0osWUFBV0MsVUFBRUssY0FBYyxVQUFDSCxXQUFXQyxVQUFaO0FBQzFCLElBQUcsS0FBQ0cscUJBQUo7T0FDQyxLQUFDQSxvQkFBb0JKLFdBQVdDO09BRGpDO09BR0MsS0FBQ0ksWUFBWSxPQUFLTCxXQUFhQzs7O0FBR2pDSixZQUFXQyxVQUFFM1MsWUFBWSxVQUFDNlMsV0FBRDtBQUN4Qi9TO1FBQVFqSSxTQUFTc2IsWUFBWTtBQUM3QnJULE1BQU1zVCxVQUFVUCxXQUFXLE1BQU07T0FDakMsS0FBQ1EsY0FBY3ZUOztBQUdoQixJQUFHNFMsWUFBWXBZLFNBQVUsZUFBekI7QUFDQ29ZLFlBQVlwWSxPQUFPO0FBQ25CZ1osS0FBS2haLE9BQU87QUFDWmlaLG1CQUFtQixDQUNsQixxQkFDQSwwQkFDQSxZQUNBLGNBQ0E7QUFFREMsZ0JBQWdCLENBQ2YsU0FBUSxXQUFVLFNBQVEsU0FBUSxTQUNsQyxZQUFXLFlBQVcsZ0JBQWUsWUFDckMsU0FBUSxZQUFXLGFBQVksZ0JBQy9CLFNBQVEsUUFBTyxVQUFTLFFBQU8sVUFBUyxVQUN4QyxVQUFTLFNBQVEsWUFBVyxPQUFNLFdBQ2xDLFNBQVEsYUFBWSxVQUFTLFVBQVMsWUFDdEMsVUFBUyxTQUFRLE9BQU0sU0FBUSxRQUFPLFFBQ3RDLFNBQVEsV0FBVSxPQUFNLFFBQU8sVUFBUyxTQUN4QyxNQUFLLFNBQVEsU0FBUSxVQUFTLFFBQU8sV0FDckMsUUFBTyxNQUFLLFlBQVcsU0FBUSxRQUFPLFFBQ3RDLFlBQVcsU0FBUSxPQUFNLGFBQVksVUFDckMsV0FBVSxZQUFXLFNBQVEsV0FBVSxVQUN2QyxVQUFTLFFBQU8sUUFBTyxNQUFLLFNBQVEsUUFBTztBQUc1Q2phOzs7SUFDMkJlLE9BQU8sU0FBT21aOzs7QUFFekNDOzs7S0FDa0NwWixPQUFPLFNBQU9tWixVQUFROzs7O0tBRXJDblosT0FBTzs7O0tBQ0pBLE9BQU87OztLQUNGQSxPQUFPOzs7O0FBRW5DMUQsT0FBTzBPLGFBQWNxTzs7Ozs7QUVwdUtyQkM7a0JBQ0M7Y0FBYzNJLE9BQU80SSx5QkFBeUJqZCxRQUFRO0FBQ3RELGVBQWVxVSxPQUFPNEkseUJBQXlCamQsUUFBUTs7QUFFeERrZCxPQUFPQyxVQUFVLEtBQUk7QUFDcEJDO2NBQWM7QUFDZEEsVUFBVWxXO09BQU1sSCxPQUFPcWQ7QUFBWWxXLFFBQU9uSCxPQUFPc2Q7O0FBRWpEQyxVQUFVLFVBQUNDLFdBQUQ7QUFDVEEsWUFBWSxVQUFRQSxVQUFVblYsUUFBUSxPQUFPLFVBQUNvVixRQUFEO09BQVdBLE9BQU9DOztPQUMvRFYsZ0JBQWdCUSxXQUFXNVUsSUFBSStVLEtBQUszZDs7QUFFckM0ZCxZQUFZO0FBQUssS0FBT0MsYUFBUDtBQUNoQkEsY0FBYztBQUVkeEosT0FBT3lKLGVBQWU5ZCxRQUFRLGNBQzdCK1E7Y0FBYztBQUNkbkksS0FBSztPQUFLd1UsUUFBUWxXOztBQUNsQjRCLEtBQUssVUFBQ2lWLFVBQUQ7T0FBYVgsUUFBUWxXLFFBQVE2Vzs7O09BRW5DMUosT0FBT3lKLGVBQWU5ZCxRQUFRLGVBQzdCK1E7Y0FBYztBQUNkbkksS0FBSztPQUFLd1UsUUFBUWpXOztBQUNsQjJCLEtBQUssVUFBQ2lWLFVBQUQ7T0FBYVgsUUFBUWpXLFNBQVM0Vzs7Ozs7QUFHckMsS0FBQ3hNLFdBQVcsVUFBQ3JLLE9BQU9DLFFBQVI7QUFDWCtCO0lBQXlCaEMsT0FBekJrVztRQUFRbFcsUUFBUUE7O0FBQ2hCLElBQTJCQyxRQUEzQmlXO1FBQVFqVyxTQUFTQTs7QUFFakJ5VztBQUNBMVUsUUFBUWpJLFNBQVNzYixZQUFZO0FBQzdCclQsTUFBTXNULFVBQVUsVUFBVSxNQUFNO09BQ2hDeGMsT0FBT3ljLGNBQWN2VDs7QUFHdEIsS0FBQzhILFVBQVU7QUFDVnFELE9BQU95SixlQUFlOWQsUUFBUSxjQUFjZ2QsZ0JBQWdCSztPQUM1RGhKLE9BQU95SixlQUFlOWQsUUFBUSxlQUFlZ2QsZ0JBQWdCTTs7QUFHOUQsT0FBTzs7Ozs7QUN6Q1JKLE9BQU9DLFVBQVU7Ozs7QUNBakJELE9BQU9DLFVBQVVhO0FBRWpCLG1CQUFtQnRlLE1BQU11ZSxPQUFPO0FBQzlCLE1BQU0sQ0FBQ0MsYUFBYXhlO0FBQ3BCLE1BQU0sQ0FBQ3llLFFBQVFGO0FBQ2YsSUFBSUcsV0FBV0MsYUFBYUM7QUFFNUJKLFVBQVVLLFVBQVUsU0FBUyxVQUFTQyxVQUFVcmEsUUFBUSxJQUFJO0FBQzFELE1BQU1zYSxVQUFVTixLQUFLLE1BQU07QUFDM0IsTUFBTXBZLFFBQVEvRixPQUFPZ0gsaUJBQWlCeVg7QUFDdEN0YSxRQUFRQSxNQUFNdWE7QUFFZCxNQUFNQyxjQUFjNVksTUFBTXlZLGNBQWMsc0JBQ25DelksTUFBTXlZLGNBQWM7QUFFekIsTUFBTUksZ0JBQWdCRCxjQUNsQixLQUNBNVksTUFBTXlZO0FBRVYsTUFBTUssWUFBWTFhLFFBQ2QyYSxnQkFBZ0JGLGVBQWV6YSxTQUMvQjRhLFFBQVFIO0FBRVosTUFBTUksYUFBYVAsUUFBUVEsUUFBUW5aO0FBRW5DLE1BQU1vWix5QkFBeUJGLHVCQUF1QlIsYUFBYXJhLHlCQUF5QnFhLGFBQWFJO0FBQ3pHLE1BQU1PLGlDQUFpQ0gsMkJBQTJCUixhQUFhcmEseUJBQXlCcWEsYUFBYUk7QUFFckgsS0FBS1EsT0FBT1AsV0FBV0ssY0FBY0Msc0JBQXNCaGI7QUFFM0QseUJBQXlCMkgsVUFBVTJPLFVBQVU7QUFDM0MsTUFBTTRFLG9CQUFvQmIsU0FBU25XLFFBQVEsVUFBVSxBQUFDaVgsU0FBVSxNQUFNQSxNQUFNeFo7QUFDNUUsSUFBSSxDQUFDc1ksV0FBVztBQUNkRSxlQUFlcmQsU0FBU0MsY0FBYztBQUN0Q2tkLFlBQVluZCxTQUFTQyxjQUFjO0FBQ25DbWQsY0FBY3JlLE9BQU9nSCxpQkFBaUJvWDtBQUV0Q0UsYUFBYWhkLFlBQVk4YztBQUN6Qm5kLFNBQVNJLEtBQUtDLFlBQVlnZDs7QUFFNUJGLFVBQVVyWSxNQUFNbUYsV0FBV25GLE1BQU1tRjtBQUNqQ2tULFVBQVVyWSxNQUFNd1osWUFBWUYsbUJBQW1CNUUsVUFBVTtBQUN6RCxNQUFNdFcsUUFBUWthLFlBQVlHO0FBRTFCLE1BQU1nQixlQUFlcmIsTUFBTXNiLFNBQVM7QUFDcEMsTUFBTUMsTUFBTSxJQUFJQyxPQUFPQyxhQUFhemIsT0FBT2tFLFFBQVEsU0FBUztBQUM1RCtWLFVBQVVyWSxNQUFNbUYsV0FBVztBQUMzQmtULFVBQVVyWSxNQUFNc1oscUJBQXFCO0FBRXJDLE9BQU9HLGVBQ0hFLElBQUl2ZCxLQUFLMkosWUFDVEEsYUFBYTNIOzs7O0FBTXZCLHNCQUFzQkEsT0FBTztBQUN6QixPQUFPMGIsT0FBTzFiLE9BQU9rRSxRQUFRLHVCQUF1Qjs7Ozs7QUNwRHhELElBQUl5WCxPQUFPO0FBTVgzQyxRQUFROWEsVUFBVTtBQU1sQjhhLFFBQVE0QyxpQkFBaUI7QUFNekIsSUFBSUMsT0FBTztBQVlYN0MsUUFBUTFjLE1BQU0sVUFBVXdmLElBQUk7QUFDMUIsSUFBSSxDQUFDLENBQUNILEtBQUtJLFFBQVFELEtBQUs7QUFDdEJBLEdBQUc5QyxTQUFTNkM7QUFDWkYsS0FBS3pQLEtBQUs0UDs7QUFHWixPQUFPOUM7O0FBT1RBLFFBQVE2QyxPQUFPQTtBQU1mLElBQUl0ZixTQUFTO0FBQ2J5YyxRQUFRemMsU0FBU0E7QUFNakIsSUFBSW1lLFlBQVk7QUFDaEIxQixRQUFRMWMsSUFBSW9lO0FBTVosSUFBSXNCLE9BQU87QUFDWGhELFFBQVExYyxJQUFJMGY7QUFNWixJQUFJdmYsU0FBUztBQUNidWMsUUFBUTFjLElBQUlHO0FBTVosSUFBSXdmLFNBQVM7QUFDYmpELFFBQVExYyxJQUFJMmY7QUFNWixJQUFJaEIsU0FBUztBQUNiakMsUUFBUTFjLElBQUkyZTs7OztBQzVFWixtQkFBb0I7QUFDbEIsSUFBSWlCLFdBQVcsR0FBR2pPLE1BQU11TCxLQUFLblU7QUFFN0Isc0JBQXVCOFcsS0FBS25iLEtBQUs7QUFDL0JrUCxPQUFPQyxLQUFLblAsS0FBS29iLFFBQVEsVUFBVUMsS0FBSztBQUN0QyxJQUFJLENBQUMsQ0FBQ0gsU0FBU0gsUUFBUU0sTUFBTUYsSUFBSUUsT0FBT3JiLElBQUlxYjs7O0FBSWhELE9BQU8seUJBQTBCO0FBQy9CLElBQUlDLE9BQU8sR0FBR3JPLE1BQU11TCxLQUFLblUsWUFDckI3RyxJQUFJLEdBQ0oyZCxNQUFNO0FBRVYsT0FBTzNkLElBQUk4ZCxLQUFLOWUsUUFBUWdCLEtBQUs7QUFDM0IrZCxhQUFhSixLQUFLRyxLQUFLOWQ7O0FBR3pCLE9BQU8yZDs7O0FBRVY7QUFNRHBELE9BQU9DLFVBQVU0QztBQWFqQix3QkFBeUJZLFNBQVNDLFFBQVFDLEtBQUs7QUFDN0MsSUFBSXhKLFNBQVN5SixRQUFRLFFBQVEsV0FBVyxTQUFTLGVBQWUsV0FDNURoZCxRQUFRdVQsT0FBT3VKLFdBQVU7QUFHN0IsS0FBS0QsVUFBVUEsV0FBVztBQUMxQixLQUFLSSxXQUFXO0FBR2hCLFNBQVNQLE9BQU8xYyxPQUFPO0FBQ3JCLEtBQUswYyxPQUFPMWMsTUFBTTBjOztBQUlwQkssTUFBTUEsT0FBT3JYLFVBQVV3WDtBQUN2QixJQUFJSCxPQUFPSSxNQUFNQyxtQkFBbUI7QUFDbENELE1BQU1DLGtCQUFrQixNQUFNTDtPQUN6QjtBQUNMLElBQUk7QUFDRixNQUFNLElBQUlJO1NBQ0pwWCxHQUFHO0FBQ1QsS0FBS3NYLFFBQVF0WCxFQUFFc1g7Ozs7QUFTckJwQixlQUFlaEUsWUFBWTFILE9BQU8rTSxPQUFPSCxNQUFNbEY7QUFNL0NnRSxlQUFlaEUsVUFBVXJZLE9BQU87QUFNaENxYyxlQUFlaEUsVUFBVWxaLGNBQWNrZDtBQVN2Q0EsZUFBZWhFLFVBQVVzRixTQUFTLFVBQVVGLE9BQU87QUFDakQsSUFBSTlKLFNBQVN5SixRQUFRLGVBQWUsVUFBVSxVQUMxQ2hkLFFBQVF1VCxPQUFPO0FBQUUzVCxNQUFNLEtBQUtBO0dBQVE7QUFHeEMsSUFBSSxVQUFVeWQsU0FBUyxLQUFLQSxPQUFPO0FBQ2pDcmQsTUFBTXFkLFFBQVEsS0FBS0E7O0FBR3JCLE9BQU9yZDs7Ozs7QUN4R1QsSUFBSXdkLFVBQVU7QUFNZG5FLFFBQVFoYixPQUFPO0FBTWZnYixRQUFRMVosT0FBTztBQUtmMFosUUFBUW9FLGNBQWM7QUFNdEJwRSxRQUFRcUUsYUFBYTtBQU1yQnJFLFFBQVFzRSxZQUFZO0FBTXBCdEUsUUFBUXVFLFVBQVU7QUFNbEJ2RSxRQUFRd0UsYUFBYTtBQU1yQnhFLFFBQVFnQixPQUFPO0FBTWZoQixRQUFReUUsZ0JBQWdCO0FBTXhCekUsUUFBUWpSLE1BQU07QUFNZGlSLFFBQVEwRSxjQUFjUCxRQUFRTztBQU05QjFFLFFBQVEyRSxjQUFjUixRQUFRUTtBQU05QjNFLFFBQVE0RSxVQUFVO0FBTWxCNUUsUUFBUTZFLGNBQWM7QUFNdEI3RSxRQUFRb0IsWUFBWTtBQU1wQnBCLFFBQVE4RSxvQkFBb0I7QUFNNUI5RSxRQUFRK0Usa0JBQWtCO0FBTTFCL0UsUUFBUWdGLHFCQUFxQjtBQU03QmhGLFFBQVFpRiwyQkFBMkI7QUFNbkNqRixRQUFRa0YsbUJBQW1CO0FBTTNCbEYsUUFBUW1GLGtDQUFrQztBQU0xQ25GLFFBQVFvRiw2QkFBNkI7QUFNckNwRixRQUFRcUYsYUFBYTtBQU1yQnJGLFFBQVFzRixVQUFVO0FBTWxCdEYsUUFBUXVGLGlCQUFpQjtBQU16QnZGLFFBQVF3RixpQkFBaUI7QUFNekJ4RixRQUFRak4sUUFBUTs7OztBQzNLaEJnTixPQUFPQyxVQUFVO0FBZWZ5RixjQUFjO0FBZWQ3QixVQUFVO0FBc0JWcGdCLG1CQUFtQjtBQW9CbkJraUIsVUFBVTtBQW9CVkMsbUJBQW1CLENBQUMsUUFBUSxXQUFXOzs7OztBQ3JGekMsSUFBSXBpQixTQUFTO0FBRWJ3YyxPQUFPQyxVQUFVLFVBQVU0RixPQUFPL0MsTUFBTTtBQUt0QyxJQUFJRCxpQkFBaUJnRCxNQUFNaEQsZ0JBQ3ZCNUIsT0FBTzZCLEtBQUs3QjtBQU1oQjRFLE1BQU03RSxZQUFZQTtBQXdDbEIsbUJBQW9CL1ksS0FBSzZkLEtBQUtDLE1BQU1DLFVBQVU7QUFDNUMvRSxLQUFLLE1BQU0sUUFBUThFLFFBQVEvRTtBQUMzQkMsS0FBSyxNQUFNLFlBQVkrRTtBQUN2Qi9FLEtBQUssTUFBTSxVQUFVaFo7QUFDckJnWixLQUFLLE1BQU0sV0FBVzZFO0FBRXRCLE9BQU9oRCxLQUFLeUMsUUFBUTs7QUFHdEJwTyxPQUFPeUosZUFBZUksV0FBVyxnQkFBZ0I7QUFDL0N0VixLQUFLLFlBQVc7QUFDZGhKLFFBQVF1akIsS0FBSztBQUNiLE9BQU96aUIsT0FBT2tpQjs7QUFFaEI5WixLQUFLLFVBQVMzRSxPQUFPO0FBQ25CdkUsUUFBUXVqQixLQUFLO0FBQ2J6aUIsT0FBT2tpQixlQUFlemU7OztBQUkxQmtRLE9BQU95SixlQUFlSSxXQUFXLFlBQVk7QUFDM0N0VixLQUFLLFlBQVc7QUFDZGhKLFFBQVF1akIsS0FBSztBQUNiLE9BQU96aUIsT0FBT3FnQjs7QUFFaEJqWSxLQUFLLFVBQVMzRSxPQUFPO0FBQ25CdkUsUUFBUXVqQixLQUFLO0FBQ2J6aUIsT0FBT3FnQixXQUFXNWM7OztBQUl0QitaLFVBQVU4RCxjQUFjLFVBQVV0ZSxNQUFNdWMsSUFBSTtBQUMxQ0QsS0FBS2dDLFlBQVksS0FBS2pHLFdBQVdyWSxNQUFNdWM7O0FBR3pDL0IsVUFBVUssWUFBWSxVQUFVN2EsTUFBTXVjLElBQUk7QUFDeENELEtBQUt6QixVQUFVLEtBQUt4QyxXQUFXclksTUFBTXVjOztBQUd2Qy9CLFVBQVVpRSxxQkFBcUIsVUFBVXplLE1BQU11YyxJQUFJbUQsa0JBQWtCO0FBQ25FcEQsS0FBS21DLG1CQUFtQixLQUFLcEcsV0FBV3JZLE1BQU11YyxJQUFJbUQ7O0FBR3BEbEYsVUFBVStELG9CQUFvQixVQUFVdmUsTUFBTXVjLElBQUk7QUFDaERELEtBQUtpQyxrQkFBa0IsS0FBS2xHLFdBQVdyWSxNQUFNdWM7O0FBRy9DL0IsVUFBVWdFLGtCQUFrQixVQUFVeGUsTUFBTXVjLElBQUk7QUFDOUNELEtBQUtrQyxnQkFBZ0IsS0FBS25HLFdBQVdyWSxNQUFNdWM7O0FBRzdDL0IsVUFBVWtFLDJCQUEyQixVQUFVMWUsTUFBTXVjLElBQUltRCxrQkFBa0I7QUFDekVwRCxLQUFLb0MseUJBQXlCLEtBQUtyRyxXQUFXclksTUFBTXVjLElBQUltRDs7QUFrQjFEbEYsVUFBVW5DLFVBQVVxRCxTQUFTLFVBQVVpRSxNQUFNTCxLQUFLTSxXQUFXN0ksVUFBVThJLFNBQVN4QyxVQUFVO0FBQ3hGLElBQUl5QyxLQUFLeEQsS0FBSzdkLEtBQUssTUFBTXFIO0FBQ3pCLElBQUksVUFBVXVYLFVBQVVBLFdBQVc7QUFDbkMsSUFBSXJlLGNBQWMrWCxZQUFZL1gsY0FBYzZnQixTQUFTeEMsV0FBVztBQUNoRSxJQUFJLFNBQVNyZ0IsT0FBT3FnQixVQUFVQSxXQUFXO0FBRXpDLElBQUksQ0FBQ3lDLElBQUk7QUFDUFIsTUFBTWhELEtBQUt3QixXQUFXLE1BQU1oWTtBQUM1QixJQUFJaWEsU0FBU3pELEtBQUt5QixVQUFVLE1BQU1qWTtBQUNsQyxNQUFNLElBQUl1VyxlQUFlaUQsS0FBSztBQUMxQlMsUUFBUUE7QUFDUmhKLFVBQVVBO0FBQ1ZzRyxVQUFVQTtHQUNYLEVBQUNyZ0IsT0FBT2tpQixpQkFBZ0IsS0FBS3hELFNBQVNqQixLQUFLLE1BQU07OztBQVl4RDlKLE9BQU95SixlQUFlSSxVQUFVbkMsV0FBVyxRQUN6QztBQUFFblQsS0FBSyxZQUFZO0FBQ2YsT0FBT3VWLEtBQUssTUFBTTs7QUFFcEJyVixLQUFLLFVBQVU0YSxLQUFLO0FBQ2xCdkYsS0FBSyxNQUFNLFVBQVV1Rjs7Ozs7OztBQzFKN0J4RyxPQUFPQyxVQUFVLFVBQVV6ZCxNQUFNaWtCLEdBQUc7QUFDbEMsSUFBSXpGLFlBQVl4ZSxLQUFLd2UsV0FDakI2QixpQkFBaUJyZ0IsS0FBS3FnQixnQkFDdEI1QixPQUFPd0YsRUFBRXhGO0FBK0JiLENBQUUsTUFBTSxNQUFNLFFBQ1osTUFBTSxPQUFPLE9BQU8sUUFDcEIsUUFBUSxRQUFRLFNBQVMsTUFDekIsTUFBTSxRQUFRLE9BQU8sUUFBU29DLFFBQVEsVUFBVXFELE9BQU87QUFDdkQxRixVQUFVOEQsWUFBWTRCOztBQTBCeEIxRixVQUFVOEQsWUFBWSxPQUFPLFlBQVk7QUFDdkM3RCxLQUFLLE1BQU0sVUFBVTs7QUF3Q3ZCRCxVQUFVOEQsWUFBWSxRQUFRLFlBQVk7QUFDeEM3RCxLQUFLLE1BQU0sUUFBUTs7QUF5QnJCRCxVQUFVOEQsWUFBWSxVQUFVLFlBQVk7QUFDMUM3RCxLQUFLLE1BQU0sVUFBVTs7QUF3QnZCRCxVQUFVOEQsWUFBWSxPQUFPLFlBQVk7QUFDdkM3RCxLQUFLLE1BQU0sT0FBTzs7QUF1QnBCRCxVQUFVOEQsWUFBWSxXQUFXLFlBQVk7QUFDM0M3RCxLQUFLLE1BQU0sV0FBVzs7QUFtQnhCRCxVQUFVOEQsWUFBWSxPQUFPLFlBQVk7QUFDdkM3RCxLQUFLLE1BQU0sT0FBTztBQUNsQkEsS0FBSyxNQUFNLE9BQU87O0FBd0JwQkQsVUFBVThELFlBQVksT0FBTyxZQUFZO0FBQ3ZDN0QsS0FBSyxNQUFNLE9BQU87QUFDbEJBLEtBQUssTUFBTSxPQUFPOztBQStEcEIsWUFBYTFhLE1BQU11ZixLQUFLO0FBQ3RCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CdmYsT0FBT0EsS0FBS3FDO0FBQ1osSUFBSVgsTUFBTWdaLEtBQUssTUFBTSxXQUNqQjBGLFVBQVUsQ0FBQyxDQUFFLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBTTNELFFBQVF6YyxLQUFLcWdCLE9BQU8sTUFBTSxRQUFRO0FBRTdFLEtBQUsxRSxPQUNEM2IsU0FBU2tnQixFQUFFbGdCLEtBQUswQixLQUFLVyxlQUNyQiw0QkFBNEIrZCxVQUFVcGdCLE1BQ3RDLGdDQUFnQ29nQixVQUFVcGdCOztBQUloRHlhLFVBQVVpRSxtQkFBbUIsTUFBTTRCO0FBQ25DN0YsVUFBVWlFLG1CQUFtQixLQUFLNEI7QUFxSmxDLHVCQUF1Qm5oQixHQUFHMkssR0FBRztBQUMzQixPQUFPLENBQUNvVyxFQUFFelQsTUFBTXROLE1BQU0rZ0IsRUFBRXpULE1BQU0zQyxPQUFPM0ssTUFBTTJLOztBQUc3QyxtQ0FBb0M7QUFDbEM0USxLQUFLLE1BQU0sWUFBWTs7QUFHekIsaUJBQWtCdUYsS0FBS1YsS0FBSztBQUMxQixJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUUvQixJQUFJN2QsTUFBTWdaLEtBQUssTUFBTSxXQUNqQjZGLFVBQVVMLEVBQUVsZ0IsS0FBSzBCLEtBQUtXLGVBQ3RCbWUsVUFBVTlGLEtBQUssTUFBTSxZQUNyQitGLFNBQVMvRixLQUFLLE1BQU0sV0FDcEI4RSxPQUFPOUUsS0FBSyxNQUFNLFNBQ2xCZ0csU0FBU2hHLEtBQUssTUFBTSxTQUNwQmlHLGFBQWFELFNBQVMsVUFBVTtBQUVwQ0YsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBRXJDLElBQUlJLFdBQVc7QUFFZixRQUFRTDtLQUNEO0FBQ0hLLFdBQVdsZixJQUFJK2EsUUFBUXdELFNBQVMsQ0FBQztBQUNqQztLQUVHO0FBQ0gsSUFBSVMsUUFBUTtBQUNWLE1BQU0sSUFBSXBFLGVBQ1JrRSxVQUFVLDRDQUNWdmhCLFdBQ0F1Z0I7O0FBSUpvQixXQUFXbGYsSUFBSW1mLElBQUlaO0FBQ25CO0tBRUc7QUFDSCxJQUFJYSxRQUFRSixTQUFTUixFQUFFelgsTUFBTXNZO0FBQzdCcmYsSUFBSW9iLFFBQVEsVUFBVWtFLE1BQU07QUFDMUJKLFdBQVdBLFlBQVlFLE1BQU1FLE1BQU1mOztBQUVyQztLQUVHO0FBQ0gsSUFBSVMsUUFBUTtBQUNWaGYsSUFBSW9iLFFBQVEsVUFBVWtFLE1BQU07QUFDMUJKLFdBQVdBLFlBQVlWLEVBQUV6WCxJQUFJdVksTUFBTWY7O09BRWhDO0FBQ0xXLFdBQVdsZixJQUFJbWYsSUFBSVo7O0FBRXJCO0tBRUc7QUFDSCxJQUFJUyxRQUFRO0FBQ1ZFLFdBQVdsZixJQUFJZ0csS0FBSyxVQUFVc1osTUFBTTtBQUNsQyxPQUFPZCxFQUFFelgsSUFBSXVZLE1BQU1mOztPQUVoQjtBQUNMVyxXQUFXbGYsSUFBSSthLFFBQVF3RCxTQUFTLENBQUM7O0FBRW5DOztBQU1BLElBQUlBLFFBQVFyUCxPQUFPcVAsTUFBTTtBQUN2QixNQUFNLElBQUkzRCxlQUNSa0UsVUFBVSxzREFDTix5Q0FBeUNELFVBQVUsVUFDdkR0aEIsV0FDQXVnQjs7QUFJSixJQUFJbmYsUUFBUXVRLE9BQU9DLEtBQUtvUCxNQUNwQmdCLFdBQVcsTUFDWEMsVUFBVTtBQUVkN2dCLE1BQU15YyxRQUFRLFVBQVUzVSxNQUFNO0FBQzVCLElBQUlnWixnQkFBZ0IsSUFBSTFHLFVBQVUvWTtBQUNsQ3dlLEVBQUUvQixjQUFjLE1BQU1nRCxlQUFlO0FBQ3JDekcsS0FBS3lHLGVBQWUsWUFBWTtBQUVoQyxJQUFJLENBQUNWLFVBQVVwZ0IsTUFBTW5DLFdBQVcsR0FBRztBQUNqQ2lqQixjQUFjcEcsU0FBUzVTLE1BQU04WCxJQUFJOVg7QUFDakM7O0FBR0YsSUFBSTtBQUNGZ1osY0FBY3BHLFNBQVM1UyxNQUFNOFgsSUFBSTlYO1NBQzFCaVosS0FBSztBQUNaLElBQUksQ0FBQ2xCLEVBQUVuQixXQUFXc0Msc0JBQXNCRCxLQUFLOUUsaUJBQWlCO0FBQzVELE1BQU04RTs7QUFFUixJQUFJSCxhQUFhLE1BQU1BLFdBQVdHO0FBQ2xDRjs7R0FFRDtBQU1ILElBQUlULFVBQVVwZ0IsTUFBTW5DLFNBQVMsS0FBS2dqQixZQUFZN2dCLE1BQU1uQyxRQUFRO0FBQzFELE1BQU0raUI7O0FBRVI7O0FBSUosS0FBS3RGLE9BQ0hpRixVQUNFLHlCQUF5QkQsYUFBYSxhQUFhVCxFQUFFakMsUUFBUWdDLE1BQzdELDZCQUE2QlUsYUFBYSxhQUFhVCxFQUFFakMsUUFBUWdDOztBQUd2RXhGLFVBQVVpRSxtQkFBbUIsV0FBV2phLFNBQVM2YztBQUNqRDdHLFVBQVVpRSxtQkFBbUIsV0FBV2phLFNBQVM2YztBQUNqRDdHLFVBQVVpRSxtQkFBbUIsWUFBWWphLFNBQVM2YztBQUNsRDdHLFVBQVVpRSxtQkFBbUIsWUFBWWphLFNBQVM2YztBQXNDbEQ3RyxVQUFVOEQsWUFBWSxNQUFNLFlBQVk7QUFDdEMsS0FBSzVDLE9BQ0RqQixLQUFLLE1BQU0sV0FDWCxpQ0FDQTs7QUE2Qk5ELFVBQVU4RCxZQUFZLFFBQVEsWUFBWTtBQUN4QyxLQUFLNUMsT0FDRCxTQUFTakIsS0FBSyxNQUFNLFdBQ3BCLCtCQUNBLGdDQUNBQSxLQUFLLE1BQU0sWUFBWSxRQUFROztBQThCckNELFVBQVU4RCxZQUFZLFNBQVMsWUFBWTtBQUN6QyxLQUFLNUMsT0FDRCxVQUFVakIsS0FBSyxNQUFNLFdBQ3JCLGdDQUNBLCtCQUNBQSxLQUFLLE1BQU0sWUFBWSxPQUFPOztBQTJCcENELFVBQVU4RCxZQUFZLFFBQVEsWUFBWTtBQUN4QyxLQUFLNUMsT0FDRCxTQUFTakIsS0FBSyxNQUFNLFdBQ3BCLCtCQUNBOztBQTJCTkQsVUFBVThELFlBQVksYUFBYSxZQUFZO0FBQzdDLEtBQUs1QyxPQUNEMWMsY0FBY3liLEtBQUssTUFBTSxXQUN6QixvQ0FDQTs7QUEyQk5ELFVBQVU4RCxZQUFZLE9BQU8sWUFBWTtBQUN2QyxLQUFLNUMsT0FDRHVFLEVBQUV6VCxNQUFNaU8sS0FBSyxNQUFNLFlBQ2pCLDhCQUNBOztBQWtDUkQsVUFBVThELFlBQVksU0FBUyxZQUFZO0FBQ3pDLElBQUkwQixNQUFNdkYsS0FBSyxNQUFNO0FBQ3JCLEtBQUtpQixPQUNEc0UsUUFBUSxRQUFRQSxRQUFRaGhCLFdBQ3hCLDZCQUNBOztBQXFETndiLFVBQVU4RCxZQUFZLFNBQVMsWUFBWTtBQUN6QyxJQUFJMEIsTUFBTXZGLEtBQUssTUFBTSxXQUNqQjhFLE9BQU85RSxLQUFLLE1BQU0sU0FDbEI4RixVQUFVOUYsS0FBSyxNQUFNLFlBQ3JCNkc7QUFFSmYsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBRXJDLFFBQVFOLEVBQUVsZ0IsS0FBS2lnQixLQUFLNWQ7S0FDYjtLQUNBO0FBQ0hrZixhQUFhdEIsSUFBSS9oQjtBQUNqQjtLQUNHO0tBQ0E7QUFDSHFqQixhQUFhdEIsSUFBSWhKO0FBQ2pCO0tBQ0c7S0FDQTtBQUNILE1BQU0sSUFBSXFGLGVBQ1JrRSxVQUFVLHVDQUNWdmhCLFdBQ0F1Z0I7S0FFQztBQUNILElBQUlELE1BQU1pQixVQUFVLGtDQUFrQ04sRUFBRTVCLFFBQVEyQjtBQUNoRSxNQUFNLElBQUkzRCxlQUFlaUQsSUFBSXRFLFFBQVFoYyxXQUFXdWdCOztBQUVoRCxJQUFJUyxRQUFRclAsT0FBT3FQLE1BQU07QUFDdkIsTUFBTSxJQUFJM0QsZUFDUmtFLFVBQVUsNENBQTRDTixFQUFFakMsUUFBUWdDLE1BQ2hFaGhCLFdBQ0F1Z0I7O0FBR0orQixhQUFhM1EsT0FBT0MsS0FBS29QLEtBQUsvaEI7O0FBR2xDLEtBQUt5ZCxPQUNELE1BQU00RixZQUNOLGdDQUNBOztBQWtDTiwwQkFBMkI7QUFDekIsSUFBSTdmLE1BQU1nWixLQUFLLE1BQU0sV0FDakIxYSxPQUFPa2dCLEVBQUVsZ0IsS0FBSzBCO0FBQ2xCLEtBQUtpYSxPQUNELGdCQUFnQjNiLE1BQ2hCLDhDQUE4Q0EsTUFDOUM7O0FBSU55YSxVQUFVOEQsWUFBWSxhQUFhaUQ7QUFDbkMvRyxVQUFVOEQsWUFBWSxhQUFhaUQ7QUErQ25DLHFCQUFzQnZCLEtBQUtWLEtBQUs7QUFDOUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSTdkLE1BQU1nWixLQUFLLE1BQU07QUFDckIsSUFBSUEsS0FBSyxNQUFNLFNBQVM7QUFDdEIsT0FBTyxLQUFLalMsSUFBSXdYO09BQ1g7QUFDTCxLQUFLdEUsT0FDRHNFLFFBQVF2ZSxLQUNSLG9DQUNBLHdDQUNBdWUsS0FDQSxLQUFLd0IsTUFDTDs7O0FBS1JoSCxVQUFVSyxVQUFVLFNBQVM0RztBQUM3QmpILFVBQVVLLFVBQVUsVUFBVTRHO0FBQzlCakgsVUFBVUssVUFBVSxNQUFNNEc7QUEyQzFCLG1CQUFtQmhnQixLQUFLNmQsS0FBSztBQUMzQixJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixLQUFLNUQsT0FDRHVFLEVBQUV6WCxJQUFJL0csS0FBS2daLEtBQUssTUFBTSxZQUN0QiwyQ0FDQSwrQ0FDQWhaLEtBQ0EsS0FBSytmLE1BQ0w7O0FBSU5oSCxVQUFVSyxVQUFVLE9BQU82RztBQUMzQmxILFVBQVVLLFVBQVUsUUFBUTZHO0FBNkM1QixxQkFBc0JDLEdBQUdyQyxLQUFLO0FBQzVCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNLFdBQ2pCbUgsV0FBV25ILEtBQUssTUFBTSxhQUN0QjhGLFVBQVU5RixLQUFLLE1BQU0sWUFDckJvSCxZQUFZLENBQUMsRUFBQ3RCLFlBQVdBLFVBQVUsT0FBTyxLQUMxQ2hCLE9BQU85RSxLQUFLLE1BQU0sU0FDbEI2RixVQUFVTCxFQUFFbGdCLEtBQUswQixLQUFLVyxlQUN0QjBmLFFBQVE3QixFQUFFbGdCLEtBQUs0aEIsR0FBR3ZmLGVBQ2xCMmYsY0FBYztBQUVsQixJQUFJSCxVQUFVO0FBQ1osSUFBSXBILFVBQVUvWSxLQUFLOGUsU0FBU2hCLE1BQU0sTUFBTXJoQixHQUFHdUUsS0FBS3FZLFNBQVM7O0FBRzNELElBQUksQ0FBQzhHLFlBQVksQ0FBQ3RCLFlBQVksVUFBVXdCLFVBQVUsU0FBUztBQUN6REUsZUFBZUgsWUFBWTtPQUN0QixJQUFJQyxVQUFVLFlBQVksQ0FBQ0YsWUFBWXRCLFlBQVksV0FBVztBQUNuRTBCLGVBQWVILFlBQVk7T0FDdEIsSUFBSSxDQUFDRCxZQUFZLENBQUN0QixZQUFZLFVBQVVBLFlBQVksV0FBVztBQUNwRSxJQUFJMkIsV0FBVyxFQUFDM0IsWUFBWSxhQUFZLE1BQU03ZSxNQUFNLE1BQU1BO0FBQzFEdWdCLGVBQWVILFlBQVksY0FBY0ksV0FBVztPQUMvQztBQUNMRixjQUFjOztBQUdoQixJQUFJQSxhQUFhO0FBQ2YsTUFBTSxJQUFJMUYsZUFBZTJGLGNBQWNoakIsV0FBV3VnQjs7QUFHcEQsSUFBSXFDLFVBQVU7QUFDWixJQUFJTSxNQUFNemdCLElBQUl4RDtBQUNkLEtBQUt5ZCxPQUNEd0csTUFBTVAsR0FDTixpRUFDQSxzREFDQUEsR0FDQU87T0FFQztBQUNMLEtBQUt4RyxPQUNEamEsTUFBTWtnQixHQUNOLHVDQUNBLHlDQUNBQTs7O0FBS1JuSCxVQUFVSyxVQUFVLFNBQVNzSDtBQUM3QjNILFVBQVVLLFVBQVUsTUFBTXNIO0FBQzFCM0gsVUFBVUssVUFBVSxlQUFlc0g7QUE2Q25DLHFCQUFzQlIsR0FBR3JDLEtBQUs7QUFDNUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSTdkLE1BQU1nWixLQUFLLE1BQU0sV0FDakJtSCxXQUFXbkgsS0FBSyxNQUFNLGFBQ3RCOEYsVUFBVTlGLEtBQUssTUFBTSxZQUNyQm9ILFlBQVksQ0FBQyxFQUFDdEIsWUFBV0EsVUFBVSxPQUFPLEtBQzFDaEIsT0FBTzlFLEtBQUssTUFBTSxTQUNsQjZGLFVBQVVMLEVBQUVsZ0IsS0FBSzBCLEtBQUtXLGVBQ3RCMGYsUUFBUTdCLEVBQUVsZ0IsS0FBSzRoQixHQUFHdmYsZUFDbEIyZixjQUFjO0FBRWxCLElBQUlILFVBQVU7QUFDWixJQUFJcEgsVUFBVS9ZLEtBQUs4ZSxTQUFTaEIsTUFBTSxNQUFNcmhCLEdBQUd1RSxLQUFLcVksU0FBUzs7QUFHM0QsSUFBSSxDQUFDOEcsWUFBWSxDQUFDdEIsWUFBWSxVQUFVd0IsVUFBVSxTQUFTO0FBQ3pERSxlQUFlSCxZQUFZO09BQ3RCLElBQUlDLFVBQVUsWUFBWSxDQUFDRixZQUFZdEIsWUFBWSxXQUFXO0FBQ25FMEIsZUFBZUgsWUFBWTtPQUN0QixJQUFJLENBQUNELFlBQVksQ0FBQ3RCLFlBQVksVUFBVUEsWUFBWSxXQUFXO0FBQ3BFLElBQUkyQixXQUFXLEVBQUMzQixZQUFZLGFBQVksTUFBTTdlLE1BQU0sTUFBTUE7QUFDMUR1Z0IsZUFBZUgsWUFBWSxjQUFjSSxXQUFXO09BQy9DO0FBQ0xGLGNBQWM7O0FBR2hCLElBQUlBLGFBQWE7QUFDZixNQUFNLElBQUkxRixlQUFlMkYsY0FBY2hqQixXQUFXdWdCOztBQUdwRCxJQUFJcUMsVUFBVTtBQUNaLElBQUlNLE1BQU16Z0IsSUFBSXhEO0FBQ2QsS0FBS3lkLE9BQ0R3RyxPQUFPUCxHQUNQLG9FQUNBLGtEQUNBQSxHQUNBTztPQUVDO0FBQ0wsS0FBS3hHLE9BQ0RqYSxPQUFPa2dCLEdBQ1AsMENBQ0EsdUNBQ0FBOzs7QUFLUm5ILFVBQVVLLFVBQVUsU0FBU3VIO0FBQzdCNUgsVUFBVUssVUFBVSxPQUFPdUg7QUE2QzNCLHFCQUFzQlQsR0FBR3JDLEtBQUs7QUFDNUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSTdkLE1BQU1nWixLQUFLLE1BQU0sV0FDakJtSCxXQUFXbkgsS0FBSyxNQUFNLGFBQ3RCOEYsVUFBVTlGLEtBQUssTUFBTSxZQUNyQm9ILFlBQVksQ0FBQyxFQUFDdEIsWUFBV0EsVUFBVSxPQUFPLEtBQzFDaEIsT0FBTzlFLEtBQUssTUFBTSxTQUNsQjZGLFVBQVVMLEVBQUVsZ0IsS0FBSzBCLEtBQUtXLGVBQ3RCMGYsUUFBUTdCLEVBQUVsZ0IsS0FBSzRoQixHQUFHdmYsZUFDbEIyZixjQUFjO0FBRWxCLElBQUlILFVBQVU7QUFDWixJQUFJcEgsVUFBVS9ZLEtBQUs4ZSxTQUFTaEIsTUFBTSxNQUFNcmhCLEdBQUd1RSxLQUFLcVksU0FBUzs7QUFHM0QsSUFBSSxDQUFDOEcsWUFBWSxDQUFDdEIsWUFBWSxVQUFVd0IsVUFBVSxTQUFTO0FBQ3pERSxlQUFlSCxZQUFZO09BQ3RCLElBQUlDLFVBQVUsWUFBWSxDQUFDRixZQUFZdEIsWUFBWSxXQUFXO0FBQ25FMEIsZUFBZUgsWUFBWTtPQUN0QixJQUFJLENBQUNELFlBQVksQ0FBQ3RCLFlBQVksVUFBVUEsWUFBWSxXQUFXO0FBQ3BFLElBQUkyQixXQUFXLEVBQUMzQixZQUFZLGFBQVksTUFBTTdlLE1BQU0sTUFBTUE7QUFDMUR1Z0IsZUFBZUgsWUFBWSxjQUFjSSxXQUFXO09BQy9DO0FBQ0xGLGNBQWM7O0FBR2hCLElBQUlBLGFBQWE7QUFDZixNQUFNLElBQUkxRixlQUFlMkYsY0FBY2hqQixXQUFXdWdCOztBQUdwRCxJQUFJcUMsVUFBVTtBQUNaLElBQUlNLE1BQU16Z0IsSUFBSXhEO0FBQ2QsS0FBS3lkLE9BQ0R3RyxNQUFNUCxHQUNOLGlFQUNBLHNEQUNBQSxHQUNBTztPQUVDO0FBQ0wsS0FBS3hHLE9BQ0RqYSxNQUFNa2dCLEdBQ04sdUNBQ0EsMENBQ0FBOzs7QUFLUm5ILFVBQVVLLFVBQVUsU0FBU3dIO0FBQzdCN0gsVUFBVUssVUFBVSxNQUFNd0g7QUFDMUI3SCxVQUFVSyxVQUFVLFlBQVl3SDtBQTRDaEMsb0JBQXFCVixHQUFHckMsS0FBSztBQUMzQixJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixJQUFJN2QsTUFBTWdaLEtBQUssTUFBTSxXQUNqQm1ILFdBQVduSCxLQUFLLE1BQU0sYUFDdEI4RixVQUFVOUYsS0FBSyxNQUFNLFlBQ3JCb0gsWUFBWSxDQUFDLEVBQUN0QixZQUFXQSxVQUFVLE9BQU8sS0FDMUNoQixPQUFPOUUsS0FBSyxNQUFNLFNBQ2xCNkYsVUFBVUwsRUFBRWxnQixLQUFLMEIsS0FBS1csZUFDdEIwZixRQUFRN0IsRUFBRWxnQixLQUFLNGhCLEdBQUd2ZixlQUNsQjJmLGNBQWM7QUFFbEIsSUFBSUgsVUFBVTtBQUNaLElBQUlwSCxVQUFVL1ksS0FBSzhlLFNBQVNoQixNQUFNLE1BQU1yaEIsR0FBR3VFLEtBQUtxWSxTQUFTOztBQUczRCxJQUFJLENBQUM4RyxZQUFZLENBQUN0QixZQUFZLFVBQVV3QixVQUFVLFNBQVM7QUFDekRFLGVBQWVILFlBQVk7T0FDdEIsSUFBSUMsVUFBVSxZQUFZLENBQUNGLFlBQVl0QixZQUFZLFdBQVc7QUFDbkUwQixlQUFlSCxZQUFZO09BQ3RCLElBQUksQ0FBQ0QsWUFBWSxDQUFDdEIsWUFBWSxVQUFVQSxZQUFZLFdBQVc7QUFDcEUsSUFBSTJCLFdBQVcsRUFBQzNCLFlBQVksYUFBWSxNQUFNN2UsTUFBTSxNQUFNQTtBQUMxRHVnQixlQUFlSCxZQUFZLGNBQWNJLFdBQVc7T0FDL0M7QUFDTEYsY0FBYzs7QUFHaEIsSUFBSUEsYUFBYTtBQUNmLE1BQU0sSUFBSTFGLGVBQWUyRixjQUFjaGpCLFdBQVd1Z0I7O0FBR3BELElBQUlxQyxVQUFVO0FBQ1osSUFBSU0sTUFBTXpnQixJQUFJeEQ7QUFDZCxLQUFLeWQsT0FDRHdHLE9BQU9QLEdBQ1AsbUVBQ0Esa0RBQ0FBLEdBQ0FPO09BRUM7QUFDTCxLQUFLeEcsT0FDRGphLE9BQU9rZ0IsR0FDUCx5Q0FDQSx1Q0FDQUE7OztBQUtSbkgsVUFBVUssVUFBVSxRQUFReUg7QUFDNUI5SCxVQUFVSyxVQUFVLE9BQU95SDtBQTZDM0I5SCxVQUFVSyxVQUFVLFVBQVUsVUFBVTBILE9BQU9DLFFBQVFsRCxLQUFLO0FBQzFELElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNLFdBQ2pCbUgsV0FBV25ILEtBQUssTUFBTSxhQUN0QjhGLFVBQVU5RixLQUFLLE1BQU0sWUFDckJvSCxZQUFZLENBQUMsRUFBQ3RCLFlBQVdBLFVBQVUsT0FBTyxLQUMxQ2hCLE9BQU85RSxLQUFLLE1BQU0sU0FDbEI2RixVQUFVTCxFQUFFbGdCLEtBQUswQixLQUFLVyxlQUN0QnFnQixZQUFZeEMsRUFBRWxnQixLQUFLd2lCLE9BQU9uZ0IsZUFDMUJzZ0IsYUFBYXpDLEVBQUVsZ0IsS0FBS3lpQixRQUFRcGdCLGVBQzVCMmYsY0FBYyxNQUNkWSxRQUFRLEVBQUNGLGNBQWMsVUFBVUMsZUFBZSxXQUM1Q0gsTUFBTUssZ0JBQWdCLE9BQU9KLE9BQU9JLGdCQUNwQ0wsUUFBUSxPQUFPQztBQUV2QixJQUFJWixVQUFVO0FBQ1osSUFBSXBILFVBQVUvWSxLQUFLOGUsU0FBU2hCLE1BQU0sTUFBTXJoQixHQUFHdUUsS0FBS3FZLFNBQVM7O0FBRzNELElBQUksQ0FBQzhHLFlBQVksQ0FBQ3RCLFlBQVksVUFBVSxDQUFDbUMsY0FBYyxVQUFVQyxlQUFlLFVBQVU7QUFDeEZWLGVBQWVILFlBQVk7T0FDdEIsSUFBSSxDQUFDWSxjQUFjLFlBQVlDLGVBQWUsYUFBYSxDQUFDZCxZQUFZdEIsWUFBWSxXQUFXO0FBQ3BHMEIsZUFBZUgsWUFBWTtPQUN0QixJQUFJLENBQUNELFlBQVksQ0FBQ3RCLFlBQVksVUFBVUEsWUFBWSxXQUFXO0FBQ3BFLElBQUkyQixXQUFXLEVBQUMzQixZQUFZLGFBQVksTUFBTTdlLE1BQU0sTUFBTUE7QUFDMUR1Z0IsZUFBZUgsWUFBWSxjQUFjSSxXQUFXO09BQy9DO0FBQ0xGLGNBQWM7O0FBR2hCLElBQUlBLGFBQWE7QUFDZixNQUFNLElBQUkxRixlQUFlMkYsY0FBY2hqQixXQUFXdWdCOztBQUdwRCxJQUFJcUMsVUFBVTtBQUNaLElBQUlNLE1BQU16Z0IsSUFBSXhEO0FBQ2QsS0FBS3lkLE9BQ0R3RyxPQUFPSyxTQUFTTCxPQUFPTSxRQUN2Qiw4Q0FBOENHLE9BQzlDLGtEQUFrREE7T0FFakQ7QUFDTCxLQUFLakgsT0FDRGphLE9BQU84Z0IsU0FBUzlnQixPQUFPK2dCLFFBQ3ZCLG1DQUFtQ0csT0FDbkMsdUNBQXVDQTs7O0FBNEMvQywwQkFBMkJ4akIsYUFBYW1nQixLQUFLO0FBQzNDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBRS9CLElBQUluWCxTQUFTc1MsS0FBSyxNQUFNO0FBQ3hCLElBQUk4RSxPQUFPOUUsS0FBSyxNQUFNO0FBQ3RCLElBQUk4RixVQUFVOUYsS0FBSyxNQUFNO0FBRXpCLElBQUk7QUFDRixJQUFJb0ksZUFBZTFhLGtCQUFrQmhKO1NBQzlCZ2lCLEtBQUs7QUFDWixJQUFJQSxlQUFlMkIsV0FBVztBQUM1QnZDLFVBQVVBLFVBQVVBLFVBQVUsT0FBTztBQUNyQyxNQUFNLElBQUlsRSxlQUNSa0UsVUFBVSxzREFDTk4sRUFBRWxnQixLQUFLWixlQUFlLGVBQzFCSCxXQUNBdWdCOztBQUdKLE1BQU00Qjs7QUFHUixJQUFJbmhCLE9BQU9pZ0IsRUFBRTVCLFFBQVFsZjtBQUNyQixJQUFJYSxTQUFTLE1BQU07QUFDakJBLE9BQU87O0FBR1QsS0FBSzBiLE9BQ0RtSCxjQUNBLDJDQUEyQzdpQixNQUMzQywrQ0FBK0NBOztBQUVwRDtBQUVEd2EsVUFBVUssVUFBVSxjQUFja0k7QUFDbEN2SSxVQUFVSyxVQUFVLGNBQWNrSTtBQWlIbEMsd0JBQXlCL2lCLE1BQU1nZ0IsS0FBS1YsS0FBSztBQUN2QyxJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUUvQixJQUFJMEQsV0FBV3ZJLEtBQUssTUFBTSxXQUN0QndJLFFBQVF4SSxLQUFLLE1BQU0sUUFDbkI4RixVQUFVOUYsS0FBSyxNQUFNLFlBQ3JCaFosTUFBTWdaLEtBQUssTUFBTSxXQUNqQjhFLE9BQU85RSxLQUFLLE1BQU07QUFFdEIsSUFBSXVJLFlBQVlDLE9BQU87QUFDckIxQyxVQUFVQSxVQUFVQSxVQUFVLE9BQU87QUFDckMsTUFBTSxJQUFJbEUsZUFDUmtFLFVBQVUsb0RBQ1Z2aEIsV0FDQXVnQjs7QUFJSixJQUFJOWQsUUFBUSxRQUFRQSxRQUFRekMsV0FBVztBQUNyQ3VoQixVQUFVQSxVQUFVQSxVQUFVLE9BQU87QUFDckMsTUFBTSxJQUFJbEUsZUFDUmtFLFVBQVUsdUNBQ1Z2aEIsV0FDQXVnQjs7QUFJSixJQUFJa0IsU0FBU2hHLEtBQUssTUFBTSxTQUNwQitGLFNBQVMvRixLQUFLLE1BQU0sV0FDcEJ5SSxXQUFXRixXQUFXL0MsRUFBRTlCLFlBQVkxYyxLQUFLekIsUUFBUSxNQUNqRFMsUUFBUXVpQixXQUFXRSxTQUFTemlCLFFBQVFnQixJQUFJekI7QUFFNUMsSUFBSTBnQixhQUFhO0FBQ2pCLElBQUlELFFBQVFDLGNBQWM7QUFDMUIsSUFBSXVDLE9BQU92QyxjQUFjO0FBQ3pCLElBQUlzQyxVQUFVdEMsY0FBYztBQUM1QkEsY0FBYztBQUVkLElBQUl0QztBQUNKLElBQUk2RSxPQUFPN0UsY0FBY3pOLE9BQU8wSCxVQUFVOEssZUFBZWxKLEtBQUt4WSxLQUFLekIsWUFDOUQsSUFBSWdqQixVQUFVNUUsY0FBYzhFLFNBQVNFLGFBQ3JDaEYsY0FBYzZCLEVBQUU3QixZQUFZM2MsS0FBS3pCO0FBT3RDLElBQUksQ0FBQ3dnQixVQUFVMWEsVUFBVTdILFdBQVcsR0FBRztBQUNyQyxLQUFLeWQsT0FDRDBDLGFBQ0EsOEJBQThCc0MsYUFBYVQsRUFBRWpDLFFBQVFoZSxPQUNyRCxrQ0FBa0MwZ0IsYUFBYVQsRUFBRWpDLFFBQVFoZTs7QUFHL0QsSUFBSThGLFVBQVU3SCxTQUFTLEdBQUc7QUFDeEIsS0FBS3lkLE9BQ0QwQyxlQUFlLENBQUNxQyxTQUFTUixFQUFFelgsSUFBSXdYLEtBQUt2ZixTQUFTdWYsUUFBUXZmLFFBQ3JELDhCQUE4QmlnQixhQUFhVCxFQUFFakMsUUFBUWhlLFFBQVEsOEJBQzdELGtDQUFrQzBnQixhQUFhVCxFQUFFakMsUUFBUWhlLFFBQVEsY0FDakVnZ0IsS0FDQXZmOztBQUlOZ2EsS0FBSyxNQUFNLFVBQVVoYTs7QUFHdkIrWixVQUFVSyxVQUFVLFlBQVl3STtBQUVoQywyQkFBNEJyakIsTUFBTVMsT0FBTzZlLEtBQUs7QUFDNUM3RSxLQUFLLE1BQU0sT0FBTztBQUNsQjRJLGVBQWVDLE1BQU0sTUFBTXhkOztBQUc3QjBVLFVBQVVLLFVBQVUsZUFBZTBJO0FBQ25DL0ksVUFBVUssVUFBVSxtQkFBbUIwSTtBQXlIdkMscUNBQXNDdmpCLE1BQU0wZ0IsWUFBWXBCLEtBQUs7QUFDM0QsSUFBSSxPQUFPb0IsZUFBZSxVQUFVO0FBQ2xDcEIsTUFBTW9CO0FBQ05BLGFBQWE7O0FBRWYsSUFBSXBCLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNO0FBQ3JCLElBQUkrSSxtQkFBbUI3UyxPQUFPNEkseUJBQXlCNUksT0FBT2xQLE1BQU16QjtBQUNwRSxJQUFJd2pCLG9CQUFvQjlDLFlBQVk7QUFDbEMsS0FBS2hGLE9BQ0R1RSxFQUFFelgsSUFBSWtZLFlBQVk4QyxtQkFDbEIsOENBQThDdkQsRUFBRWpDLFFBQVFoZSxRQUFRLDBCQUEwQmlnQixFQUFFakMsUUFBUTBDLGNBQWMsV0FBV1QsRUFBRWpDLFFBQVF3RixtQkFDdkksOENBQThDdkQsRUFBRWpDLFFBQVFoZSxRQUFRLDhCQUE4QmlnQixFQUFFakMsUUFBUTBDLGFBQ3hHQSxZQUNBOEMsa0JBQ0E7T0FFQztBQUNMLEtBQUs5SCxPQUNEOEgsa0JBQ0EsNkRBQTZEdkQsRUFBRWpDLFFBQVFoZSxPQUN2RSxpRUFBaUVpZ0IsRUFBRWpDLFFBQVFoZTs7QUFHakZ5YSxLQUFLLE1BQU0sVUFBVStJOztBQUd2QmhKLFVBQVVLLFVBQVUseUJBQXlCNEk7QUFDN0NqSixVQUFVSyxVQUFVLDZCQUE2QjRJO0FBMERqRCw2QkFBOEI7QUFDNUJoSixLQUFLLE1BQU0sWUFBWTs7QUFHekIsc0JBQXVCa0gsR0FBR3JDLEtBQUs7QUFDN0IsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSTdkLE1BQU1nWixLQUFLLE1BQU0sV0FDakI4RixVQUFVOUYsS0FBSyxNQUFNLFlBQ3JCOEUsT0FBTzlFLEtBQUssTUFBTTtBQUN0QixJQUFJRCxVQUFVL1ksS0FBSzhlLFNBQVNoQixNQUFNLE1BQU1yaEIsR0FBR3VFLEtBQUtxWSxTQUFTO0FBQ3pELElBQUlvSCxNQUFNemdCLElBQUl4RDtBQUVkLEtBQUt5ZCxPQUNEd0csT0FBT1AsR0FDUCw4REFDQSxtREFDQUEsR0FDQU87O0FBSU4xSCxVQUFVaUUsbUJBQW1CLFVBQVVpRixjQUFjQztBQUNyRG5KLFVBQVVpRSxtQkFBbUIsWUFBWWlGLGNBQWNDO0FBNkJ2RCxxQkFBcUJDLElBQUl0RSxLQUFLO0FBQzVCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNO0FBQ3JCLEtBQUtpQixPQUNEa0ksR0FBR0MsS0FBS3BpQixNQUNSLCtCQUErQm1pQixJQUMvQixtQ0FBbUNBOztBQUl6Q3BKLFVBQVVLLFVBQVUsU0FBU2lKO0FBQzdCdEosVUFBVUssVUFBVSxXQUFXaUo7QUEyQi9CdEosVUFBVUssVUFBVSxVQUFVLFVBQVVrSixLQUFLekUsS0FBSztBQUNoRCxJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixJQUFJN2QsTUFBTWdaLEtBQUssTUFBTSxXQUNqQjhGLFVBQVU5RixLQUFLLE1BQU0sWUFDckI4RSxPQUFPOUUsS0FBSyxNQUFNO0FBQ3RCLElBQUlELFVBQVUvWSxLQUFLOGUsU0FBU2hCLE1BQU0sTUFBTXlFLEdBQUc5a0IsRUFBRTtBQUU3QyxLQUFLd2MsT0FDRCxDQUFDamEsSUFBSSthLFFBQVF1SCxNQUNiLGlDQUFpQzlELEVBQUVqQyxRQUFRK0YsTUFDM0MscUNBQXFDOUQsRUFBRWpDLFFBQVErRjs7QUE0R3JELG9CQUFxQm5ULE1BQU07QUFDekIsSUFBSW5QLE1BQU1nWixLQUFLLE1BQU0sV0FDakI2RixVQUFVTCxFQUFFbGdCLEtBQUswQixNQUNqQndpQixXQUFXaEUsRUFBRWxnQixLQUFLNlEsT0FDbEIyTyxPQUFPOUUsS0FBSyxNQUFNLFNBQ2xCZ0csU0FBU2hHLEtBQUssTUFBTSxTQUNwQnNKLEtBQ0FHLFVBQVUsSUFDVnBFLEtBQUssTUFDTFMsVUFBVTlGLEtBQUssTUFBTTtBQUV6QjhGLFVBQVVBLFVBQVVBLFVBQVUsT0FBTztBQUNyQyxJQUFJNEQsZUFBZTVELFVBQVU7QUFFN0IsSUFBSUQsWUFBWSxTQUFTQSxZQUFZLE9BQU87QUFDMUM0RCxVQUFVekQsU0FBUyxZQUFZO0FBQy9CVixTQUFTO0FBR1R0ZSxJQUFJb2IsUUFBUSxVQUFVbUQsS0FBS2xELEtBQUs7QUFBRWlELE9BQU9wVCxLQUFLbVE7O0FBRTlDLElBQUltSCxhQUFhLFNBQVM7QUFDeEJyVCxPQUFPd1QsTUFBTS9MLFVBQVUzSixNQUFNdUwsS0FBS25VOztPQUcvQjtBQUNMaWEsU0FBU0UsRUFBRXBCLDJCQUEyQnBkO0FBRXRDLFFBQVF3aUI7S0FDRDtBQUNILElBQUluZSxVQUFVN0gsU0FBUyxHQUFHO0FBQ3hCLE1BQU0sSUFBSW9lLGVBQWU4SCxjQUFjbmxCLFdBQVd1Z0I7O0FBRXBEO0tBQ0c7QUFDSCxJQUFJelosVUFBVTdILFNBQVMsR0FBRztBQUN4QixNQUFNLElBQUlvZSxlQUFlOEgsY0FBY25sQixXQUFXdWdCOztBQUVwRDNPLE9BQU9ELE9BQU9DLEtBQUtBO0FBQ25COztBQUVBQSxPQUFPd1QsTUFBTS9MLFVBQVUzSixNQUFNdUwsS0FBS25VOztBQUl0QzhLLE9BQU9BLEtBQUt5VCxJQUFJLFVBQVVyRSxLQUFLO0FBQzdCLE9BQU8sT0FBT0EsUUFBUSxXQUFXQSxNQUFNN0QsT0FBTzZEOzs7QUFJbEQsSUFBSSxDQUFDcFAsS0FBSzNTLFFBQVE7QUFDaEIsTUFBTSxJQUFJb2UsZUFBZWtFLFVBQVUsaUJBQWlCdmhCLFdBQVd1Z0I7O0FBR2pFLElBQUkyQyxNQUFNdFIsS0FBSzNTLFFBQ1hxbUIsTUFBTTdKLEtBQUssTUFBTSxRQUNqQjhKLE1BQU05SixLQUFLLE1BQU0sUUFDakIxRCxXQUFXbkcsTUFDWG1QO0FBRUosSUFBSSxDQUFDdUUsT0FBTyxDQUFDQyxLQUFLO0FBQ2hCQSxNQUFNOztBQUlSLElBQUlELEtBQUs7QUFDUHhFLEtBQUsvSSxTQUFTdFAsS0FBSyxVQUFTK2MsYUFBYTtBQUN2QyxPQUFPekUsT0FBT3RZLEtBQUssVUFBU2dkLFdBQVc7QUFDckMsSUFBSWhFLFFBQVE7QUFDVixPQUFPUixFQUFFelgsSUFBSWdjLGFBQWFDO09BQ3JCO0FBQ0wsT0FBT0QsZ0JBQWdCQzs7Ozs7QUFPL0IsSUFBSUYsS0FBSztBQUNQekUsS0FBSy9JLFNBQVMyTixNQUFNLFVBQVNGLGFBQWE7QUFDeEMsT0FBT3pFLE9BQU90WSxLQUFLLFVBQVNnZCxXQUFXO0FBQ3JDLElBQUloRSxRQUFRO0FBQ1YsT0FBT1IsRUFBRXpYLElBQUlnYyxhQUFhQztPQUNyQjtBQUNMLE9BQU9ELGdCQUFnQkM7Ozs7QUFLN0IsSUFBSSxDQUFDaEssS0FBSyxNQUFNLGFBQWE7QUFDM0JxRixLQUFLQSxNQUFNbFAsS0FBSzNTLFVBQVU4aEIsT0FBTzloQjs7O0FBS3JDLElBQUlpa0IsTUFBTSxHQUFHO0FBQ1h0UixPQUFPQSxLQUFLeVQsSUFBSSxVQUFTdkgsS0FBSztBQUM1QixPQUFPbUQsRUFBRWpDLFFBQVFsQjs7QUFFbkIsSUFBSTZILE9BQU8vVCxLQUFLZ1U7QUFDaEIsSUFBSUwsS0FBSztBQUNQUixNQUFNblQsS0FBS2lVLEtBQUssUUFBUSxXQUFXRjs7QUFFckMsSUFBSUwsS0FBSztBQUNQUCxNQUFNblQsS0FBS2lVLEtBQUssUUFBUSxVQUFVRjs7T0FFL0I7QUFDTFosTUFBTTlELEVBQUVqQyxRQUFRcE4sS0FBSzs7QUFJdkJtVCxNQUFNLENBQUM3QixNQUFNLElBQUksVUFBVSxVQUFVNkI7QUFHckNBLE1BQU0sQ0FBQ3RKLEtBQUssTUFBTSxjQUFjLGFBQWEsV0FBV3NKO0FBR3hELEtBQUtySSxPQUNEb0UsSUFDQSx5QkFBeUJvRSxVQUFVSCxLQUNuQyw2QkFBNkJHLFVBQVVILEtBQ3ZDaE4sU0FBU3JJLE1BQU0sR0FBR29XLEtBQUs3RSxFQUFFdEIsbUJBQ3pCb0IsT0FBTytFLEtBQUs3RSxFQUFFdEIsbUJBQ2Q7O0FBSU5uRSxVQUFVSyxVQUFVLFFBQVFrSztBQUM1QnZLLFVBQVVLLFVBQVUsT0FBT2tLO0FBdUszQixzQkFBdUJDLFdBQVdDLGVBQWUzRixLQUFLO0FBQ3BELElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNLFdBQ2pCOEUsT0FBTzlFLEtBQUssTUFBTSxTQUNsQjhGLFVBQVU5RixLQUFLLE1BQU0sWUFDckIrRixTQUFTL0YsS0FBSyxNQUFNLGFBQWE7QUFDckMsSUFBSUQsVUFBVS9ZLEtBQUs4ZSxTQUFTaEIsTUFBTSxNQUFNeUUsR0FBRzlrQixFQUFFO0FBRTdDLElBQUk4bEIscUJBQXFCL0ksVUFBVSxPQUFPK0ksY0FBYyxVQUFVO0FBQ2hFQyxnQkFBZ0JEO0FBQ2hCQSxZQUFZOztBQUdkLElBQUlFO0FBQ0osSUFBSTtBQUNGempCO1NBQ08wZixLQUFLO0FBQ1orRCxZQUFZL0Q7O0FBS2QsSUFBSWdFLHNCQUFzQkgsY0FBY2htQixhQUFhaW1CLGtCQUFrQmptQjtBQUl2RSxJQUFJb21CLG9CQUFvQi9KLFFBQVEySixhQUFhQztBQUM3QyxJQUFJSSxnQkFBZ0I7QUFDcEIsSUFBSUMsb0JBQW9CO0FBR3hCLElBQUlILHVCQUF1QixDQUFDQSx1QkFBdUIsQ0FBQzNFLFFBQVE7QUFFMUQsSUFBSStFLGtCQUFrQjtBQUN0QixJQUFJUCxxQkFBcUJ6SCxPQUFPO0FBQzlCZ0ksa0JBQWtCO09BQ2IsSUFBSVAsV0FBVztBQUNwQk8sa0JBQWtCdEYsRUFBRW5CLFdBQVcwRyxtQkFBbUJSOztBQUdwRCxLQUFLdEosT0FDRHdKLFdBQ0EsK0JBQStCSyxpQkFDL0IsZ0VBQ0FQLGFBQWFBLFVBQVVTLFlBQ3ZCLENBQUNQLHFCQUFxQjNILFFBQ3BCMkgsVUFBVU8sYUFBYSxDQUFDLE9BQU9QLGNBQWMsV0FBV0EsWUFBWUEsYUFDNUNqRixFQUFFbkIsV0FBVzBHLG1CQUFtQk47O0FBSWhFLElBQUlGLGFBQWFFLFdBQVc7QUFFMUIsSUFBSUYscUJBQXFCekgsT0FBTztBQUM5QixJQUFJbUksdUJBQXVCekYsRUFBRW5CLFdBQVc2RyxtQkFBbUJULFdBQVdGO0FBRXRFLElBQUlVLHlCQUF5QmxGLFFBQVE7QUFHbkMsSUFBSTRFLHFCQUFxQjVFLFFBQVE7QUFDL0I2RSxnQkFBZ0I7T0FDWDtBQUNMLEtBQUszSixPQUNEOEUsUUFDQSwwREFDQSx5Q0FBeUMsQ0FBQzBFLGFBQWEsQ0FBQzFFLFNBQVMsMkJBQTJCLEtBQzVGd0UsVUFBVVMsWUFDVlAsVUFBVU87Ozs7QUFNcEIsSUFBSUcsMEJBQTBCM0YsRUFBRW5CLFdBQVdzQyxzQkFBc0I4RCxXQUFXRjtBQUM1RSxJQUFJWSw0QkFBNEJwRixRQUFRO0FBQ3RDLElBQUk0RSxxQkFBcUI1RSxRQUFRO0FBQzdCNkUsZ0JBQWdCO09BQ2I7QUFDTCxLQUFLM0osT0FDRDhFLFFBQ0EsMERBQ0EseUNBQXlDLENBQUMwRSxZQUFZLDJCQUEyQixLQUNqRixDQUFDRixxQkFBcUJ6SCxRQUFReUgsVUFBVVMsYUFBYVQsYUFBYS9FLEVBQUVuQixXQUFXMEcsbUJBQW1CUixhQUNsRyxDQUFDRSxxQkFBcUIzSCxRQUFRMkgsVUFBVU8sYUFBYVAsYUFBYWpGLEVBQUVuQixXQUFXMEcsbUJBQW1CTjs7OztBQU01RyxJQUFJQSxhQUFhRCxrQkFBa0JqbUIsYUFBYWltQixrQkFBa0IsTUFBTTtBQUV0RSxJQUFJWSxjQUFjO0FBQ2xCLElBQUlaLHlCQUF5QmhKLFFBQVE7QUFDbkM0SixjQUFjOztBQUdoQixJQUFJQyxzQkFBc0I3RixFQUFFbkIsV0FBV2lILGtCQUFrQmIsV0FBV0Q7QUFDcEUsSUFBSWEsd0JBQXdCdEYsUUFBUTtBQUNsQyxJQUFJNEUscUJBQXFCNUUsUUFBUTtBQUM3QjhFLG9CQUFvQjtPQUNqQjtBQUNMLEtBQUs1SixPQUNIOEUsUUFDRSxxQ0FBcUNxRixjQUFjLDBCQUNuRCx5Q0FBeUNBLGNBQWMsV0FDdERaLGVBQ0FoRixFQUFFbkIsV0FBV2hCLFdBQVdvSDs7OztBQU9uQyxJQUFJRyxpQkFBaUJDLG1CQUFtQjtBQUN0QyxLQUFLNUosT0FDSDhFLFFBQ0UsMERBQ0EseUNBQXlDLENBQUMwRSxZQUFZLDJCQUEyQixLQUNqRixDQUFDRixxQkFBcUJ6SCxRQUFReUgsVUFBVVMsYUFBYVQsYUFBYS9FLEVBQUVuQixXQUFXMEcsbUJBQW1CUixhQUNsRyxDQUFDRSxxQkFBcUIzSCxRQUFRMkgsVUFBVU8sYUFBYVAsYUFBYWpGLEVBQUVuQixXQUFXMEcsbUJBQW1CTjs7QUFJeEd6SyxLQUFLLE1BQU0sVUFBVXlLOztBQUN0QjtBQUVEMUssVUFBVUssVUFBVSxTQUFTbUw7QUFDN0J4TCxVQUFVSyxVQUFVLFVBQVVtTDtBQUM5QnhMLFVBQVVLLFVBQVUsU0FBU21MO0FBbUU3QixtQkFBb0JDLFFBQVEzRyxLQUFLO0FBQy9CLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNLFdBQ2pCeUwsU0FBU3pMLEtBQUssTUFBTSxXQUNwQnhFLFVBQVUsRUFBQyxlQUFlLE9BQU94VSxPQUFPLENBQUN5a0IsV0FDdkN6a0IsSUFBSTRXLFVBQVU0TixVQUNkeGtCLElBQUl3a0I7QUFFVixLQUFLdkssT0FDRCxlQUFlLE9BQU96RixTQUN0QixvQ0FBb0NnSyxFQUFFakMsUUFBUWlJLFNBQzlDLHdDQUF3Q2hHLEVBQUVqQyxRQUFRaUk7O0FBSXhEekwsVUFBVUssVUFBVSxhQUFhc0w7QUFDakMzTCxVQUFVSyxVQUFVLGNBQWNzTDtBQXNCbEMzTCxVQUFVOEQsWUFBWSxVQUFVLFlBQVk7QUFDMUM3RCxLQUFLLE1BQU0sVUFBVTs7QUF5Q3ZCLGlCQUFrQjJMLFNBQVM5RyxLQUFLO0FBQzlCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNO0FBQ3JCLElBQUl2SCxTQUFTa1QsUUFBUTNrQjtBQUNyQixLQUFLaWEsT0FDRHhJLFFBQ0EsaUNBQWlDK00sRUFBRWhDLFdBQVdtSSxVQUM5QyxvQ0FBb0NuRyxFQUFFaEMsV0FBV21JLFVBQ2pEM0wsS0FBSyxNQUFNLFlBQVksUUFBUSxNQUMvQnZIOztBQUlOc0gsVUFBVUssVUFBVSxXQUFXd0w7QUFDL0I3TCxVQUFVSyxVQUFVLGFBQWF3TDtBQXdDakMsaUJBQWlCdFAsVUFBVXVQLE9BQU9oSCxLQUFLO0FBQ3JDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNLFdBQ2pCOEYsVUFBVTlGLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFFdEIsSUFBSUQsVUFBVS9ZLEtBQUs4ZSxTQUFTaEIsTUFBTSxNQUFNeUUsR0FBRzlrQixFQUFFO0FBQzdDLElBQUksT0FBTzZYLGFBQWEsWUFBWSxPQUFPdVAsVUFBVSxVQUFVO0FBQzdEL0YsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBQ3JDLE1BQU0sSUFBSWxFLGVBQ05rRSxVQUFVLDZEQUNWdmhCLFdBQ0F1Z0I7O0FBSU4sS0FBSzdELE9BQ0Q2SyxLQUFLQyxJQUFJL2tCLE1BQU1zVixhQUFhdVAsT0FDNUIscUNBQXFDdlAsV0FBVyxVQUFVdVAsT0FDMUQseUNBQXlDdlAsV0FBVyxVQUFVdVA7O0FBSXBFOUwsVUFBVUssVUFBVSxXQUFXNEw7QUFDL0JqTSxVQUFVSyxVQUFVLGlCQUFpQjRMO0FBR3JDLG9CQUFvQkMsUUFBUUMsVUFBVUMsS0FBS0MsVUFBVUMsU0FBUztBQUM1RCxJQUFJLENBQUNELFVBQVU7QUFDYixJQUFJSCxPQUFPem9CLFdBQVcwb0IsU0FBUzFvQixRQUFRLE9BQU87QUFDOUMwb0IsV0FBV0EsU0FBU2pZOztBQUd0QixPQUFPZ1ksT0FBT2hDLE1BQU0sVUFBU3FDLE1BQU1DLEtBQUs7QUFDdEMsSUFBSUYsU0FBUyxPQUFPRixNQUFNQSxJQUFJRyxNQUFNSixTQUFTSyxRQUFRRCxTQUFTSixTQUFTSztBQUV2RSxJQUFJLENBQUNKLEtBQUs7QUFDUixJQUFJSyxXQUFXTixTQUFTbkssUUFBUXVLO0FBQ2hDLElBQUlFLGFBQWEsQ0FBQyxHQUFHLE9BQU87QUFHNUIsSUFBSSxDQUFDSixVQUFVRixTQUFTTyxPQUFPRCxVQUFVO0FBQ3pDLE9BQU87O0FBR1QsT0FBT04sU0FBU2xmLEtBQUssVUFBUzBmLE9BQU9GLFVBQVU7QUFDN0MsSUFBSSxDQUFDTCxJQUFJRyxNQUFNSSxRQUFRLE9BQU87QUFHOUIsSUFBSSxDQUFDTixVQUFVRixTQUFTTyxPQUFPRCxVQUFVO0FBQ3pDLE9BQU87Ozs7QUEwRWJ6TSxVQUFVSyxVQUFVLFdBQVcsVUFBVTZMLFFBQVFwSCxLQUFLO0FBQ3BELElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUk3ZCxNQUFNZ1osS0FBSyxNQUFNLFdBQ2pCOEYsVUFBVTlGLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFFdEIsSUFBSUQsVUFBVS9ZLEtBQUs4ZSxTQUFTaEIsTUFBTSxNQUFNcmhCLEdBQUdXLEdBQUd3aEIsR0FBRztBQUNqRCxJQUFJN0YsVUFBVWtNLFFBQVFuRyxTQUFTaEIsTUFBTSxNQUFNcmhCLEdBQUdXLEdBQUd3aEIsR0FBRztBQUVwRCxJQUFJd0csV0FBV3BNLEtBQUssTUFBTTtBQUMxQixJQUFJcU0sVUFBVXJNLEtBQUssTUFBTTtBQUV6QixJQUFJMk0sU0FBU0MsU0FBU0MsZUFBZUM7QUFFckMsSUFBSVYsVUFBVTtBQUNaTyxVQUFVTixVQUFVLHdCQUF3QjtBQUM1Q08sVUFBVSw0QkFBNEJELFVBQVU7QUFDaERFLGdCQUFnQixnQ0FBZ0NGLFVBQVU7T0FDckQ7QUFDTEEsVUFBVU4sVUFBVSxvQkFBb0I7QUFDeENPLFVBQVUsdUNBQXVDRCxVQUFVO0FBQzNERSxnQkFBZ0IsMkNBQTJDRixVQUFVOztBQUd2RSxJQUFJUixNQUFNbk0sS0FBSyxNQUFNLFVBQVV3RixFQUFFelgsTUFBTXhKO0FBRXZDLEtBQUswYyxPQUNEOEwsV0FBV2QsUUFBUWpsQixLQUFLbWxCLEtBQUtDLFVBQVVDLFVBQ3ZDTyxTQUNBQyxlQUNBWixRQUNBamxCLEtBQ0E7O0FBa0NOLGVBQWdCZ21CLE1BQU1uSSxLQUFLO0FBQ3pCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl2SSxXQUFXMEQsS0FBSyxNQUFNLFdBQ3RCOEYsVUFBVTlGLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVWlOLE1BQU1sSCxTQUFTaEIsTUFBTSxNQUFNcmhCLEdBQUdXLEdBQUd3aEIsR0FBRztBQUVsRCxLQUFLM0UsT0FDRCtMLEtBQUtqTCxRQUFRekYsWUFBWSxDQUFDLEdBQzFCLHdDQUNBLDRDQUNBMFEsTUFDQTFROztBQUlOeUQsVUFBVUssVUFBVSxTQUFTNk07QUFrRzdCLHVCQUF3Qk4sU0FBU2xmLE1BQU1vWCxLQUFLO0FBQzFDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUkvQyxLQUFLOUIsS0FBSyxNQUFNLFdBQ2hCOEYsVUFBVTlGLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVStCLElBQUlnRSxTQUFTaEIsTUFBTSxNQUFNeUUsR0FBRzlrQixFQUFFO0FBRTVDLElBQUl5b0I7QUFDSixJQUFJLENBQUN6ZixNQUFNO0FBQ1QsSUFBSXNTLFVBQVU0TSxTQUFTN0csU0FBU2hCLE1BQU0sTUFBTXlFLEdBQUc5a0IsRUFBRTtBQUNqRHlvQixVQUFVUDtPQUNMO0FBQ0wsSUFBSTVNLFVBQVU0TSxTQUFTN0csU0FBU2hCLE1BQU0sTUFBTXJoQixHQUFHdUUsS0FBS3FZLFNBQVM1UztBQUM3RHlmLFVBQVVQLFFBQVFsZjs7QUFHcEJxVTtBQUVBLElBQUlxTCxRQUFRMWYsU0FBU2xKLGFBQWFrSixTQUFTLE9BQU9rZixZQUFZQSxRQUFRbGY7QUFDdEUsSUFBSTJmLFNBQVMzZixTQUFTbEosYUFBYWtKLFNBQVMsT0FBT3lmLFVBQVUsTUFBTXpmO0FBR25FdVMsS0FBSyxNQUFNLGVBQWVvTjtBQUMxQnBOLEtBQUssTUFBTSxxQkFBcUJrTjtBQUNoQ2xOLEtBQUssTUFBTSxtQkFBbUJtTjtBQUM5Qm5OLEtBQUssTUFBTSxpQkFBaUI7QUFDNUJBLEtBQUssTUFBTSxhQUFhbU4sVUFBVUQ7QUFFbEMsS0FBS2pNLE9BQ0hpTSxZQUFZQyxPQUNWLGNBQWNDLFNBQVMsY0FDdkIsY0FBY0EsU0FBUzs7QUFJN0JyTixVQUFVSyxVQUFVLFVBQVVpTjtBQUM5QnROLFVBQVVLLFVBQVUsV0FBV2lOO0FBaUYvQix5QkFBMEJWLFNBQVNsZixNQUFNb1gsS0FBSztBQUM1QyxJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixJQUFJL0MsS0FBSzlCLEtBQUssTUFBTSxXQUNoQjhGLFVBQVU5RixLQUFLLE1BQU0sWUFDckI4RSxPQUFPOUUsS0FBSyxNQUFNO0FBQ3RCLElBQUlELFVBQVUrQixJQUFJZ0UsU0FBU2hCLE1BQU0sTUFBTXlFLEdBQUc5a0IsRUFBRTtBQUU1QyxJQUFJeW9CO0FBQ0osSUFBSSxDQUFDemYsTUFBTTtBQUNULElBQUlzUyxVQUFVNE0sU0FBUzdHLFNBQVNoQixNQUFNLE1BQU15RSxHQUFHOWtCLEVBQUU7QUFDakR5b0IsVUFBVVA7T0FDTDtBQUNMLElBQUk1TSxVQUFVNE0sU0FBUzdHLFNBQVNoQixNQUFNLE1BQU1yaEIsR0FBR3VFLEtBQUtxWSxTQUFTNVM7QUFDN0R5ZixVQUFVUCxRQUFRbGY7O0FBSXBCLElBQUlzUyxVQUFVbU4sU0FBU3BILFNBQVNoQixNQUFNLE1BQU15RSxHQUFHOWtCLEVBQUU7QUFFakRxZDtBQUVBLElBQUlxTCxRQUFRMWYsU0FBU2xKLGFBQWFrSixTQUFTLE9BQU9rZixZQUFZQSxRQUFRbGY7QUFDdEUsSUFBSTJmLFNBQVMzZixTQUFTbEosYUFBYWtKLFNBQVMsT0FBT3lmLFVBQVUsTUFBTXpmO0FBRW5FdVMsS0FBSyxNQUFNLGVBQWVvTjtBQUMxQnBOLEtBQUssTUFBTSxxQkFBcUJrTjtBQUNoQ2xOLEtBQUssTUFBTSxtQkFBbUJtTjtBQUM5Qm5OLEtBQUssTUFBTSxpQkFBaUI7QUFDNUJBLEtBQUssTUFBTSxhQUFhbU4sUUFBUUQ7QUFFaEMsS0FBS2pNLE9BQ0hrTSxRQUFRRCxVQUFVLEdBQ2hCLGNBQWNFLFNBQVMsZ0JBQ3ZCLGNBQWNBLFNBQVM7O0FBSTdCck4sVUFBVUssVUFBVSxZQUFZa047QUFDaEN2TixVQUFVSyxVQUFVLGFBQWFrTjtBQWlGakMseUJBQTBCWCxTQUFTbGYsTUFBTW9YLEtBQUs7QUFDNUMsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSS9DLEtBQUs5QixLQUFLLE1BQU0sV0FDaEI4RixVQUFVOUYsS0FBSyxNQUFNLFlBQ3JCOEUsT0FBTzlFLEtBQUssTUFBTTtBQUN0QixJQUFJRCxVQUFVK0IsSUFBSWdFLFNBQVNoQixNQUFNLE1BQU15RSxHQUFHOWtCLEVBQUU7QUFFNUMsSUFBSXlvQjtBQUNKLElBQUksQ0FBQ3pmLE1BQU07QUFDVCxJQUFJc1MsVUFBVTRNLFNBQVM3RyxTQUFTaEIsTUFBTSxNQUFNeUUsR0FBRzlrQixFQUFFO0FBQ2pEeW9CLFVBQVVQO09BQ0w7QUFDTCxJQUFJNU0sVUFBVTRNLFNBQVM3RyxTQUFTaEIsTUFBTSxNQUFNcmhCLEdBQUd1RSxLQUFLcVksU0FBUzVTO0FBQzdEeWYsVUFBVVAsUUFBUWxmOztBQUlwQixJQUFJc1MsVUFBVW1OLFNBQVNwSCxTQUFTaEIsTUFBTSxNQUFNeUUsR0FBRzlrQixFQUFFO0FBRWpEcWQ7QUFFQSxJQUFJcUwsUUFBUTFmLFNBQVNsSixhQUFha0osU0FBUyxPQUFPa2YsWUFBWUEsUUFBUWxmO0FBQ3RFLElBQUkyZixTQUFTM2YsU0FBU2xKLGFBQWFrSixTQUFTLE9BQU95ZixVQUFVLE1BQU16ZjtBQUVuRXVTLEtBQUssTUFBTSxlQUFlb047QUFDMUJwTixLQUFLLE1BQU0scUJBQXFCa047QUFDaENsTixLQUFLLE1BQU0sbUJBQW1CbU47QUFDOUJuTixLQUFLLE1BQU0saUJBQWlCO0FBQzVCQSxLQUFLLE1BQU0sYUFBYWtOLFVBQVVDO0FBRWxDLEtBQUtsTSxPQUNIa00sUUFBUUQsVUFBVSxHQUNoQixjQUFjRSxTQUFTLGdCQUN2QixjQUFjQSxTQUFTOztBQUk3QnJOLFVBQVVLLFVBQVUsWUFBWW1OO0FBQ2hDeE4sVUFBVUssVUFBVSxhQUFhbU47QUFvRWpDLHFCQUFxQjFCLE9BQU9oSCxLQUFLO0FBQy9CLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBRS9CLElBQUl1SSxTQUFTcE4sS0FBSyxNQUFNO0FBQ3hCLElBQUlrTixVQUFVbE4sS0FBSyxNQUFNO0FBQ3pCLElBQUltTixRQUFRbk4sS0FBSyxNQUFNO0FBQ3ZCLElBQUl3TixXQUFXeE4sS0FBSyxNQUFNO0FBQzFCLElBQUl5TixZQUFZek4sS0FBSyxNQUFNO0FBRTNCLElBQUkwTjtBQUNKLElBQUlGLGFBQWEsVUFBVTtBQUN6QkUsYUFBYTVCLEtBQUtDLElBQUlvQixRQUFRRCxhQUFhcEIsS0FBS0MsSUFBSUY7T0FDL0M7QUFDTDZCLGFBQWFELGNBQWMzQixLQUFLQyxJQUFJRjs7QUFHdEMsS0FBSzVLLE9BQ0h5TSxZQUNFLGNBQWNOLFNBQVMsU0FBU0ksV0FBVyxTQUFTM0IsT0FDcEQsY0FBY3VCLFNBQVMsYUFBYUksV0FBVyxTQUFTM0I7O0FBSTlEOUwsVUFBVUssVUFBVSxNQUFNdU47QUE4QjFCNU4sVUFBVThELFlBQVksY0FBYyxZQUFXO0FBQzdDLElBQUk3YyxNQUFNZ1osS0FBSyxNQUFNO0FBT3JCLElBQUk0TixlQUFlNW1CLFFBQVFrUCxPQUFPbFAsUUFBUWtQLE9BQU8wWCxhQUFhNW1CO0FBRTlELEtBQUtpYSxPQUNIMk0sY0FDRSxxQ0FDQTs7QUFnQ043TixVQUFVOEQsWUFBWSxVQUFVLFlBQVc7QUFDekMsSUFBSTdjLE1BQU1nWixLQUFLLE1BQU07QUFPckIsSUFBSTZOLFdBQVc3bUIsUUFBUWtQLE9BQU9sUCxPQUFPa1AsT0FBTzJYLFNBQVM3bUIsT0FBTztBQUU1RCxLQUFLaWEsT0FDSDRNLFVBQ0UsaUNBQ0E7O0FBNkJOOU4sVUFBVThELFlBQVksVUFBVSxZQUFXO0FBQ3pDLElBQUk3YyxNQUFNZ1osS0FBSyxNQUFNO0FBT3JCLElBQUk4TixXQUFXOW1CLFFBQVFrUCxPQUFPbFAsT0FBT2tQLE9BQU80WCxTQUFTOW1CLE9BQU87QUFFNUQsS0FBS2lhLE9BQ0g2TSxVQUNFLGlDQUNBOztBQXFETi9OLFVBQVU4RCxZQUFZLFVBQVUsVUFBU2dCLEtBQUs7QUFDNUMsSUFBSTdkLE1BQU1nWixLQUFLLE1BQU07QUFFckIsS0FBS2lCLE9BQ0QsT0FBT2phLFFBQVEsWUFBWSttQixTQUFTL21CLE1BQ3BDLDBDQUNBOzs7Ozs7QUN2b0hSK1gsT0FBT0MsVUFBVSxVQUFVemQsTUFBTXNnQixNQUFNO0FBQ3JDdGdCLEtBQUtrQixTQUFTLFVBQVU4aUIsS0FBSy9DLFNBQVM7QUFDcEMsT0FBTyxJQUFJamhCLEtBQUt3ZSxVQUFVd0YsS0FBSy9DOztBQWlCakNqaEIsS0FBS2tCLE9BQU91ckIsT0FBTyxVQUFVMUksUUFBUWhKLFVBQVVrRyxTQUFTeUwsVUFBVTtBQUNoRXpMLFVBQVVBLFdBQVc7QUFDckIsTUFBTSxJQUFJamhCLEtBQUtxZ0IsZUFBZVksU0FBUztBQUNuQzhDLFFBQVFBO0FBQ1JoSixVQUFVQTtBQUNWMlIsVUFBVUE7R0FDWDFzQixLQUFLa0IsT0FBT3VyQjs7Ozs7O0FDekJuQmpQLE9BQU9DLFVBQVUsVUFBVXpkLE1BQU1zZ0IsTUFBTTtBQUNyQyxJQUFJOUIsWUFBWXhlLEtBQUt3ZTtBQUVyQixzQkFBdUI7QUFFckIsd0JBQXdCO0FBQ3RCLElBQUksZ0JBQWdCMkIsVUFDYixnQkFBZ0J3TSxVQUNoQixnQkFBZ0J0TixXQUNoQixPQUFPdU4sV0FBVyxjQUFjLGdCQUFnQkEsUUFBUTtBQUM3RCxPQUFPLElBQUlwTyxVQUFVLEtBQUtxTyxXQUFXLE1BQU1DOztBQUU3QyxPQUFPLElBQUl0TyxVQUFVLE1BQU0sTUFBTXNPOztBQUVuQyxzQkFBc0Jyb0IsT0FBTztBQU8zQmtRLE9BQU95SixlQUFlLE1BQU0sVUFBVTtBQUNwQzNaLE9BQU9BO0FBQ1Bzb0IsWUFBWTtBQUNaMWIsY0FBYztBQUNkMmIsVUFBVTs7O0FBSWRyWSxPQUFPeUosZUFBZXpKLE9BQU8wSCxXQUFXLFVBQVU7QUFDaERqVCxLQUFLNmpCO0FBQ0gvakIsS0FBSzRqQjtBQUNMemIsY0FBYzs7QUFHbEIsSUFBSXFQLFNBQVM7QUFnQmJBLE9BQU8rTCxPQUFPLFVBQVUxSSxRQUFRaEosVUFBVWtHLFNBQVN5TCxVQUFVO0FBQzNEekwsVUFBVUEsV0FBVztBQUNyQixNQUFNLElBQUlqaEIsS0FBS3FnQixlQUFlWSxTQUFTO0FBQ25DOEMsUUFBUUE7QUFDUmhKLFVBQVVBO0FBQ1YyUixVQUFVQTtHQUNYaE0sT0FBTytMOztBQWtCWi9MLE9BQU92ZSxRQUFRLFVBQVUrcUIsTUFBTUMsTUFBTTdKLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVUwTyxNQUFNNUosS0FBS3BoQixHQUFHQyxNQUFNZ3JCOztBQTJCcEN6TSxPQUFPME0sUUFBUSxVQUFVN00sSUFBSThNLE1BQU1DLE1BQU1oSyxLQUFLO0FBQzVDLElBQUk5RSxVQUFVK0IsSUFBSStDLEtBQUtwaEIsR0FBR2tyQixNQUFNQyxNQUFNQzs7QUFpQnhDNU0sT0FBTzFLLFFBQVEsVUFBVWdPLEtBQUtWLEtBQUs7QUFDakMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLcGhCLEdBQUc4VDs7QUFJN0IwSyxPQUFPemMsTUFBTTtBQWlCYnljLE9BQU96YyxJQUFJOUIsUUFBUSxVQUFVK3FCLE1BQU1DLE1BQU03SixLQUFLO0FBQzVDLElBQUk5RSxVQUFVME8sTUFBTTVKLEtBQUtwaEIsR0FBRytCLElBQUk5QixNQUFNZ3JCOztBQXVCeEN6TSxPQUFPemMsSUFBSW1wQixRQUFRLFVBQVU3TSxJQUFJOE0sTUFBTUMsTUFBTWhLLEtBQUs7QUFDaEQsSUFBSTlFLFVBQVUrQixJQUFJK0MsS0FBS3BoQixHQUFHK0IsSUFBSW1wQixNQUFNQyxNQUFNQzs7QUFpQjVDNU0sT0FBT3pjLElBQUkrUixRQUFRLFVBQVVnTyxLQUFLVixLQUFLO0FBQ3JDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBS3BoQixHQUFHK0IsSUFBSStSOztBQUdqQzBLLE9BQU8sV0FBV0EsT0FBTztBQUN6QkEsT0FBT3pjLElBQUksV0FBV3ljLE9BQU96YyxJQUFJO0FBRWpDLE9BQU95Yzs7QUFDUjtBQUVEMWdCLEtBQUswZ0IsU0FBUzZNO0FBQ2R2dEIsS0FBS3d0QixTQUFTRDs7Ozs7QUNuTWhCL1AsT0FBT0MsVUFBVSxVQUFVemQsTUFBTXNnQixNQUFNO0FBTXJDLElBQUk5QixZQUFZeGUsS0FBS3dlLFdBQ2pCQyxPQUFPNkIsS0FBSzdCO0FBcUJoQixJQUFJaUIsU0FBUzFmLEtBQUswZixTQUFTLFVBQVUrTixTQUFTQyxRQUFRO0FBQ3BELElBQUlqckIsT0FBTyxJQUFJK2IsVUFBVSxNQUFNLE1BQU14ZSxLQUFLMGYsUUFBUTtBQUNsRGpkLEtBQUtpZCxPQUNEK04sU0FDQUMsUUFDQTs7QUFrQk5oTyxPQUFPK00sT0FBTyxVQUFVMUksUUFBUWhKLFVBQVVrRyxTQUFTeUwsVUFBVTtBQUMzRHpMLFVBQVVBLFdBQVc7QUFDckIsTUFBTSxJQUFJamhCLEtBQUtxZ0IsZUFBZVksU0FBUztBQUNuQzhDLFFBQVFBO0FBQ1JoSixVQUFVQTtBQUNWMlIsVUFBVUE7R0FDWGhOLE9BQU8rTTs7QUFtQlovTSxPQUFPaU8sT0FBTyxVQUFVM0osS0FBS1YsS0FBSztBQUNoQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPaU8sTUFBTSxNQUFNM0YsR0FBR2xFOztBQW1CaERwRSxPQUFPa08sVUFBVSxVQUFVNUosS0FBS1YsS0FBSztBQUNuQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPa08sU0FBUyxNQUFNNUYsR0FBRy9qQixJQUFJNmY7O0FBa0J2RHBFLE9BQU92ZCxRQUFRLFVBQVUwckIsS0FBS0MsS0FBS3hLLEtBQUs7QUFDdEMsSUFBSTdnQixPQUFPLElBQUkrYixVQUFVcVAsS0FBS3ZLLEtBQUs1RCxPQUFPdmQsT0FBTztBQUVqRE0sS0FBS2lkLE9BQ0RvTyxPQUFPclAsS0FBS2hjLE1BQU0sV0FDbEIsb0NBQ0Esd0NBQ0FxckIsS0FDQUQsS0FDQTs7QUFtQk5uTyxPQUFPcU8sV0FBVyxVQUFVRixLQUFLQyxLQUFLeEssS0FBSztBQUN6QyxJQUFJN2dCLE9BQU8sSUFBSStiLFVBQVVxUCxLQUFLdkssS0FBSzVELE9BQU9xTyxVQUFVO0FBRXBEdHJCLEtBQUtpZCxPQUNEb08sT0FBT3JQLEtBQUtoYyxNQUFNLFdBQ2xCLHdDQUNBLG9DQUNBcXJCLEtBQ0FELEtBQ0E7O0FBbUJObk8sT0FBT3NPLGNBQWMsVUFBVUgsS0FBS0MsS0FBS3hLLEtBQUs7QUFDNUMsSUFBSTlFLFVBQVVxUCxLQUFLdkssS0FBSzVELE9BQU9zTyxhQUFhLE1BQU05ckIsR0FBR0MsTUFBTTJyQjs7QUFrQjdEcE8sT0FBT3VPLGlCQUFpQixVQUFVSixLQUFLQyxLQUFLeEssS0FBSztBQUMvQyxJQUFJOUUsVUFBVXFQLEtBQUt2SyxLQUFLNUQsT0FBT3VPLGdCQUFnQixNQUFNL3JCLEdBQUcrQixJQUFJOUIsTUFBTTJyQjs7QUFtQnBFcE8sT0FBT3dPLFlBQVl4TyxPQUFPeU8sa0JBQWtCLFVBQVVOLEtBQUtDLEtBQUt4SyxLQUFLO0FBQ25FLElBQUk5RSxVQUFVcVAsS0FBS3ZLLEtBQUs1RCxPQUFPd08sV0FBVyxNQUFNaHNCLEdBQUdzSyxJQUFJc2hCOztBQWtCekRwTyxPQUFPME8sZUFBZSxVQUFVUCxLQUFLQyxLQUFLeEssS0FBSztBQUM3QyxJQUFJOUUsVUFBVXFQLEtBQUt2SyxLQUFLNUQsT0FBTzBPLGNBQWMsTUFBTWxzQixHQUFHK0IsSUFBSXVJLElBQUlzaEI7O0FBa0JoRXBPLE9BQU8yTyxVQUFVLFVBQVVySyxLQUFLc0ssS0FBS2hMLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBTzJPLFNBQVMsTUFBTW5zQixHQUFHVyxHQUFHMHJCLE1BQU1EOztBQW1CNUQ1TyxPQUFPOE8sWUFBWSxVQUFVeEssS0FBS3lLLE9BQU9uTCxLQUFLO0FBQzVDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU84TyxXQUFXLE1BQU10c0IsR0FBR1csR0FBRzZyQixNQUFNRDs7QUFrQjlEL08sT0FBT2lQLFVBQVUsVUFBVTNLLEtBQUs0SyxLQUFLdEwsS0FBSztBQUN4QyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPaVAsU0FBUyxNQUFNenNCLEdBQUdXLEdBQUdnc0IsTUFBTUQ7O0FBbUI1RGxQLE9BQU9vUCxXQUFXLFVBQVU5SyxLQUFLK0ssT0FBT3pMLEtBQUs7QUFDM0MsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT29QLFVBQVUsTUFBTTVzQixHQUFHVyxHQUFHbXNCLEtBQUtEOztBQWtCNURyUCxPQUFPdVAsU0FBUyxVQUFVakwsS0FBS1YsS0FBSztBQUNsQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPdVAsUUFBUSxNQUFNakgsR0FBRzs7QUFrQmxEdEksT0FBT3dQLFlBQVksVUFBVWxMLEtBQUtWLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT3dQLFdBQVcsTUFBTWh0QixHQUFHK0IsSUFBSTlCLE1BQU07O0FBa0IvRHVkLE9BQU95UCxVQUFVLFVBQVVuTCxLQUFLVixLQUFLO0FBQ25DLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU95UCxTQUFTLE1BQU1uSCxHQUFHOztBQWtCbkR0SSxPQUFPMFAsYUFBYSxVQUFVcEwsS0FBS1YsS0FBSztBQUN0QyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPMFAsWUFBWSxNQUFNbHRCLEdBQUcrQixJQUFJOUIsTUFBTTs7QUFpQmhFdWQsT0FBTzJQLFNBQVMsVUFBVXJMLEtBQUtWLEtBQUs7QUFDbEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBTzJQLFFBQVEsTUFBTW50QixHQUFHQyxNQUFNOztBQWtCeER1ZCxPQUFPNFAsWUFBWSxVQUFVdEwsS0FBS1YsS0FBSztBQUNyQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPNFAsV0FBVyxNQUFNcHRCLEdBQUcrQixJQUFJOUIsTUFBTTs7QUFpQi9EdWQsT0FBT2xQLFFBQVEsVUFBVXdULEtBQUtWLEtBQUs7QUFDakMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT2xQLE9BQU8sTUFBTXRPLEdBQUdXLEdBQUcwc0I7O0FBZ0JwRDdQLE9BQU84UCxXQUFXLFVBQVV4TCxLQUFLVixLQUFLO0FBQ3BDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU84UCxVQUFVLE1BQU12ckIsSUFBSS9CLEdBQUdXLEdBQUcwc0I7O0FBbUIzRDdQLE9BQU8wSCxTQUFTLFVBQVVwRCxLQUFLVixLQUFLO0FBQ2xDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU8wSCxRQUFRLE1BQU1sbEIsR0FBRzhUOztBQXFCbEQwSixPQUFPK1AsWUFBWSxVQUFVekwsS0FBS1YsS0FBSztBQUNyQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPK1AsV0FBVyxNQUFNdnRCLEdBQUcrQixJQUFJK1I7O0FBa0J6RDBKLE9BQU9nUSxjQUFjLFVBQVUxTCxLQUFLVixLQUFLO0FBQ3ZDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU9nUSxhQUFhLE1BQU14dEIsR0FBR0MsTUFBTWE7O0FBa0I3RDBjLE9BQU9pUSxZQUFZLFVBQVUzTCxLQUFLVixLQUFLO0FBQ3JDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU9pUSxXQUFXLE1BQU16dEIsR0FBRytCLElBQUk5QixNQUFNYTs7QUFrQi9EMGMsT0FBT2tRLGFBQWEsVUFBVTVMLEtBQUtWLEtBQUs7QUFDdEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT2tRLFlBQVksTUFBTTF0QixHQUFHVyxHQUFHSyxFQUFFOztBQWtCM0R3YyxPQUFPbVEsZ0JBQWdCLFVBQVU3TCxLQUFLVixLQUFLO0FBQ3pDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU9tUSxlQUFlLE1BQU0zdEIsR0FBRytCLElBQUlwQixHQUFHSyxFQUFFOztBQW1CbEV3YyxPQUFPb1EsV0FBVyxVQUFVOUwsS0FBS1YsS0FBSztBQUNwQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPb1EsVUFBVSxNQUFNNXRCLEdBQUdXLEdBQUdLLEVBQUU7O0FBbUJ6RHdjLE9BQU9xUSxjQUFjLFVBQVUvTCxLQUFLVixLQUFLO0FBQ3ZDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU9xUSxhQUFhLE1BQU03dEIsR0FBRytCLElBQUlwQixHQUFHSyxFQUFFOztBQWtCaEV3YyxPQUFPc1EsVUFBVSxVQUFVaE0sS0FBS1YsS0FBSztBQUNuQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPc1EsU0FBUyxNQUFNOXRCLEdBQUdXLEdBQUd3aEIsR0FBRzs7QUFrQnpEM0UsT0FBT3VRLGFBQWEsVUFBVWpNLEtBQUtWLEtBQUs7QUFDdEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT3VRLFlBQVksTUFBTS90QixHQUFHK0IsSUFBSXBCLEdBQUd3aEIsR0FBRzs7QUFrQmhFM0UsT0FBT3dRLFdBQVcsVUFBVWxNLEtBQUtWLEtBQUs7QUFDcEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT3dRLFVBQVUsTUFBTWh1QixHQUFHVyxHQUFHSyxFQUFFOztBQWtCekR3YyxPQUFPeVEsY0FBYyxVQUFVbk0sS0FBS1YsS0FBSztBQUN2QyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPeVEsYUFBYSxNQUFNanVCLEdBQUcrQixJQUFJcEIsR0FBR0ssRUFBRTs7QUFrQmhFd2MsT0FBTzBRLFdBQVcsVUFBVXBNLEtBQUtWLEtBQUs7QUFDcEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBTzBRLFVBQVUsTUFBTWx1QixHQUFHVyxHQUFHSyxFQUFFOztBQWtCekR3YyxPQUFPMlEsY0FBYyxVQUFVck0sS0FBS1YsS0FBSztBQUN2QyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPMlEsYUFBYSxNQUFNbnVCLEdBQUcrQixJQUFJcEIsR0FBR0ssRUFBRTs7QUFvQmhFd2MsT0FBTzhNLFdBQVcsVUFBVXhJLEtBQUtWLEtBQUs7QUFDcEMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBTzhNLFVBQVUsTUFBTXRxQixHQUFHVyxHQUFHeXRCOztBQXFCdkQ1USxPQUFPNlEsWUFBWSxVQUFVdk0sS0FBS1YsS0FBSztBQUNyQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPNlEsV0FBVyxNQUFNcnVCLEdBQUdXLEdBQUdLLEVBQUU7O0FBcUIxRHdjLE9BQU84USxlQUFlLFVBQVV4TSxLQUFLVixLQUFLO0FBQ3hDLElBQUk5RSxVQUFVd0YsS0FBS1YsS0FBSzVELE9BQU84USxjQUFjLE1BQU10dUIsR0FBRytCLElBQUlwQixHQUFHSyxFQUFFOztBQXdCakV3YyxPQUFPK1EsU0FBUyxVQUFVek0sS0FBS2pnQixNQUFNdWYsS0FBSztBQUN4QyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPK1EsUUFBUSxNQUFNdnVCLEdBQUdXLEdBQUdLLEVBQUVhOztBQW1CdkQyYixPQUFPZ1IsWUFBWSxVQUFVMU0sS0FBS2pnQixNQUFNdWYsS0FBSztBQUMzQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPZ1IsV0FBVyxNQUFNeHVCLEdBQUcrQixJQUFJcEIsR0FBR0ssRUFBRWE7O0FBcUI5RDJiLE9BQU81YyxhQUFhLFVBQVVraEIsS0FBS2pnQixNQUFNdWYsS0FBSztBQUM1QyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPNWMsWUFBWSxNQUFNWixHQUFHVyxHQUFHQyxXQUFXaUI7O0FBcUJwRTJiLE9BQU9pUixnQkFBZ0IsVUFBVTNNLEtBQUtqZ0IsTUFBTXVmLEtBQUs7QUFDL0MsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT2lSLGVBQWUsTUFDM0N6dUIsR0FBRytCLElBQUlwQixHQUFHQyxXQUFXaUI7O0FBa0MxQjJiLE9BQU9sWCxVQUFVLFVBQVVzbEIsS0FBSzhDLEtBQUt0TixLQUFLO0FBQ3hDLElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPbFgsU0FBUyxNQUFNQSxRQUFRb29COztBQW1DeERsUixPQUFPbVIsYUFBYSxVQUFVL0MsS0FBSzhDLEtBQUt0TixLQUFLO0FBQzNDLElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPbVIsWUFBWSxNQUFNNXNCLElBQUl1RSxRQUFRb29COztBQXdCL0RsUixPQUFPb1IsY0FBYyxVQUFVaEQsS0FBSzhDLEtBQUt0TixLQUFLO0FBQzVDLElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPb1IsYUFBYSxNQUFNbGdCLEtBQUtwSSxRQUFRb29COztBQXdCakVsUixPQUFPcVIsaUJBQWlCLFVBQVVqRCxLQUFLOEMsS0FBS3ROLEtBQUs7QUFDL0MsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU9xUixnQkFBZ0IsTUFBTTlzQixJQUFJMk0sS0FBS3BJLFFBQVFvb0I7O0FBd0J4RWxSLE9BQU9zUixnQkFBZ0IsVUFBVWxELEtBQUs4QyxLQUFLdE4sS0FBSztBQUM5QyxJQUFJOUUsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBT3NSLGVBQWUsTUFBTUMsT0FBT3pvQixRQUFRb29COztBQXdCckVsUixPQUFPd1IsbUJBQW1CLFVBQVVwRCxLQUFLOEMsS0FBS3ROLEtBQUs7QUFDakQsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU93UixrQkFBa0IsTUFDOUNqdEIsSUFBSWd0QixPQUFPem9CLFFBQVFvb0I7O0FBd0J4QmxSLE9BQU95UixvQkFBb0IsVUFBU3JELEtBQUs4QyxLQUFLdE4sS0FBSztBQUNqRCxJQUFJOUUsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBT3lSLG1CQUFtQixNQUMvQ3ZnQixLQUFLcWdCLE9BQU96b0IsUUFBUW9vQjs7QUF3QnpCbFIsT0FBTzBSLHVCQUF1QixVQUFTdEQsS0FBSzhDLEtBQUt0TixLQUFLO0FBQ3BELElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPMFIsc0JBQXNCLE1BQ2xEbnRCLElBQUkyTSxLQUFLcWdCLE9BQU96b0IsUUFBUW9vQjs7QUFvQjdCbFIsT0FBTzJSLGFBQWEsVUFBU3ZELEtBQUs4QyxLQUFLdE4sS0FBSztBQUMxQyxJQUFJOUUsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBTzJSLFlBQVksTUFBTUMsSUFBSTlvQixRQUFRb29COztBQXNCL0RsUixPQUFPNlIsZ0JBQWdCLFVBQVN6RCxLQUFLOEMsS0FBS3ROLEtBQUs7QUFDN0MsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU82UixlQUFlLE1BQU10dEIsSUFBSXF0QixJQUFJOW9CLFFBQVFvb0I7O0FBb0J0RWxSLE9BQU84UixpQkFBaUIsVUFBUzFELEtBQUs4QyxLQUFLdE4sS0FBSztBQUM5QyxJQUFJOUUsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBTzhSLGdCQUFnQixNQUM1QzVnQixLQUFLMGdCLElBQUk5b0IsUUFBUW9vQjs7QUFvQnRCbFIsT0FBTytSLG9CQUFvQixVQUFTM0QsS0FBSzhDLEtBQUt0TixLQUFLO0FBQ2pELElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPK1IsbUJBQW1CLE1BQy9DeHRCLElBQUkyTSxLQUFLMGdCLElBQUk5b0IsUUFBUW9vQjs7QUFrQjFCbFIsT0FBT0UsUUFBUSxVQUFVa08sS0FBS2xHLElBQUl0RSxLQUFLO0FBQ3JDLElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPRSxPQUFPLE1BQU0xZCxHQUFHMGQsTUFBTWdJOztBQWtCdkRsSSxPQUFPZ1MsV0FBVyxVQUFVNUQsS0FBS2xHLElBQUl0RSxLQUFLO0FBQ3hDLElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPZ1MsVUFBVSxNQUFNeHZCLEdBQUcrQixJQUFJMmIsTUFBTWdJOztBQW9COURsSSxPQUFPWixXQUFXLFVBQVVyWixLQUFLeUcsTUFBTW9YLEtBQUs7QUFDMUMsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU9aLFVBQVUsTUFBTTVjLEdBQUd1RSxLQUFLcVksU0FBUzVTOztBQW1CbEV3VCxPQUFPaVMsY0FBYyxVQUFVbHNCLEtBQUt5RyxNQUFNb1gsS0FBSztBQUM3QyxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT2lTLGFBQWEsTUFDekN6dkIsR0FBRytCLElBQUl3QyxLQUFLcVksU0FBUzVTOztBQXFCMUJ3VCxPQUFPa1MsY0FBYyxVQUFVbnNCLEtBQUt5RyxNQUFNOFgsS0FBS1YsS0FBSztBQUNsRCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT2tTLGFBQWEsTUFDekMxdkIsR0FBR3VFLEtBQUtxWSxTQUFTNVMsTUFBTThYOztBQXNCNUJ0RSxPQUFPbVMsaUJBQWlCLFVBQVVwc0IsS0FBS3lHLE1BQU04WCxLQUFLVixLQUFLO0FBQ3JELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPbVMsZ0JBQWdCLE1BQzVDM3ZCLEdBQUcrQixJQUFJd0MsS0FBS3FZLFNBQVM1UyxNQUFNOFg7O0FBb0JoQ3RFLE9BQU9vUyxrQkFBa0IsVUFBVXJzQixLQUFLeUcsTUFBTThYLEtBQUtWLEtBQUs7QUFDdEQsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU9vUyxpQkFBaUIsTUFDN0M1dkIsR0FBR3VFLEtBQUttSyxLQUFLa08sU0FBUzVTLE1BQU04WDs7QUFzQmpDdEUsT0FBT3FTLHFCQUFxQixVQUFVdHNCLEtBQUt5RyxNQUFNOFgsS0FBS1YsS0FBSztBQUN6RCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT3FTLG9CQUFvQixNQUNoRDd2QixHQUFHK0IsSUFBSXdDLEtBQUttSyxLQUFLa08sU0FBUzVTLE1BQU04WDs7QUFrQnJDdEUsT0FBT3NTLGNBQWMsVUFBVXZzQixLQUFLeUcsTUFBTW9YLEtBQUs7QUFDN0MsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU9zUyxhQUFhLE1BQ3pDOXZCLEdBQUd1RSxLQUFLNnFCLElBQUl4UyxTQUFTNVM7O0FBbUIxQndULE9BQU91UyxpQkFBaUIsVUFBVXhzQixLQUFLeUcsTUFBTW9YLEtBQUs7QUFDaEQsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU91UyxnQkFBZ0IsTUFDNUMvdkIsR0FBRytCLElBQUl3QyxLQUFLNnFCLElBQUl4UyxTQUFTNVM7O0FBb0I5QndULE9BQU93UyxpQkFBaUIsVUFBVXpzQixLQUFLeUcsTUFBTXpILE9BQU82ZSxLQUFLO0FBQ3ZELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPd1MsZ0JBQWdCLE1BQzVDaHdCLEdBQUd1RSxLQUFLNnFCLElBQUl4UyxTQUFTNVMsTUFBTXpIOztBQXFCaENpYixPQUFPeVMsb0JBQW9CLFVBQVUxc0IsS0FBS3lHLE1BQU16SCxPQUFPNmUsS0FBSztBQUMxRCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT3lTLG1CQUFtQixNQUMvQ2p3QixHQUFHK0IsSUFBSXdDLEtBQUs2cUIsSUFBSXhTLFNBQVM1UyxNQUFNekg7O0FBb0JwQ2liLE9BQU8wUyxxQkFBcUIsVUFBVTNzQixLQUFLeUcsTUFBTXpILE9BQU82ZSxLQUFLO0FBQzNELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPMFMsb0JBQW9CLE1BQ2hEbHdCLEdBQUd1RSxLQUFLbUssS0FBSzBnQixJQUFJeFMsU0FBUzVTLE1BQU16SDs7QUF1QnJDaWIsT0FBTzJTLHdCQUF3QixVQUFVNXNCLEtBQUt5RyxNQUFNekgsT0FBTzZlLEtBQUs7QUFDOUQsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU8yUyx1QkFBdUIsTUFDbkRud0IsR0FBRytCLElBQUl3QyxLQUFLbUssS0FBSzBnQixJQUFJeFMsU0FBUzVTLE1BQU16SDs7QUFvQnpDaWIsT0FBTzRTLGlCQUFpQixVQUFVN3NCLEtBQUt5RyxNQUFNb1gsS0FBSztBQUNoRCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBTzRTLGdCQUFnQixNQUM1Q3B3QixHQUFHdUUsS0FBS3dxQixPQUFPblMsU0FBUzVTOztBQW9CN0J3VCxPQUFPNlMsb0JBQW9CLFVBQVU5c0IsS0FBS3lHLE1BQU1vWCxLQUFLO0FBQ25ELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPNlMsbUJBQW1CLE1BQy9DcndCLEdBQUcrQixJQUFJd0MsS0FBS3dxQixPQUFPblMsU0FBUzVTOztBQXFCakN3VCxPQUFPOFMsb0JBQW9CLFVBQVUvc0IsS0FBS3lHLE1BQU04WCxLQUFLVixLQUFLO0FBQ3hELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPOFMsbUJBQW1CLE1BQy9DdHdCLEdBQUd1RSxLQUFLd3FCLE9BQU9uUyxTQUFTNVMsTUFBTThYOztBQXNCbkN0RSxPQUFPK1MsdUJBQXVCLFVBQVVodEIsS0FBS3lHLE1BQU04WCxLQUFLVixLQUFLO0FBQzNELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPK1Msc0JBQXNCLE1BQ2xEdndCLEdBQUcrQixJQUFJd0MsS0FBS3dxQixPQUFPblMsU0FBUzVTLE1BQU04WDs7QUFxQnZDdEUsT0FBT2dULHdCQUF3QixVQUFVanRCLEtBQUt5RyxNQUFNOFgsS0FBS1YsS0FBSztBQUM1RCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT2dULHVCQUF1QixNQUNuRHh3QixHQUFHdUUsS0FBS21LLEtBQUtxZ0IsT0FBT25TLFNBQVM1UyxNQUFNOFg7O0FBdUJ4Q3RFLE9BQU9pVCwyQkFBMkIsVUFBVWx0QixLQUFLeUcsTUFBTThYLEtBQUtWLEtBQUs7QUFDL0QsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU9pVCwwQkFBMEIsTUFDdER6d0IsR0FBRytCLElBQUl3QyxLQUFLbUssS0FBS3FnQixPQUFPblMsU0FBUzVTLE1BQU04WDs7QUFtQjVDdEUsT0FBT2tULFdBQVcsVUFBVTlFLEtBQUs1SCxLQUFLNUMsS0FBSztBQUN6QyxJQUFJOUUsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBT2tULFVBQVUsTUFBTTF3QixHQUFHdUUsS0FBS21zQixTQUFTMU07O0FBdUJsRXhHLE9BQU9tVCxhQUFhLFVBQVVwdEIsS0FBS21QLE1BQU0wTyxLQUFLO0FBQzVDLElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPbVQsWUFBWSxNQUFNM3dCLEdBQUd1RSxLQUFLNmhCLElBQUkxVCxLQUFLQTs7QUF1QnBFOEssT0FBT29ULGFBQWEsVUFBVXJ0QixLQUFLbVAsTUFBTTBPLEtBQUs7QUFDNUMsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU9vVCxZQUFZLE1BQU01d0IsR0FBR3VFLEtBQUs4aEIsSUFBSTNULEtBQUtBOztBQTJCcEU4SyxPQUFPcVQsa0JBQWtCLFVBQVV0dEIsS0FBS21QLE1BQU0wTyxLQUFLO0FBQ2pELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPcVQsaUJBQWlCLE1BQzdDN3dCLEdBQUdnQyxRQUFRcWtCLElBQUkzVCxLQUFLQTs7QUF1QnpCOEssT0FBT3NULHFCQUFxQixVQUFVdnRCLEtBQUttUCxNQUFNME8sS0FBSztBQUNwRCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT3NULG9CQUFvQixNQUNoRDl3QixHQUFHK0IsSUFBSXdDLEtBQUs2aEIsSUFBSTFULEtBQUtBOztBQXVCMUI4SyxPQUFPdVQscUJBQXFCLFVBQVV4dEIsS0FBS21QLE1BQU0wTyxLQUFLO0FBQ3BELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPdVQsb0JBQW9CLE1BQ2hEL3dCLEdBQUcrQixJQUFJd0MsS0FBSzhoQixJQUFJM1QsS0FBS0E7O0FBMkIxQjhLLE9BQU93VCxpQkFBaUIsVUFBVXp0QixLQUFLbVAsTUFBTTBPLEtBQUs7QUFDaEQsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU93VCxnQkFBZ0IsTUFDNUNoeEIsR0FBR3VFLEtBQUs2aEIsSUFBSTFYLEtBQUtnRSxLQUFLQTs7QUF5QjNCOEssT0FBT3lULGlCQUFpQixVQUFVMXRCLEtBQUttUCxNQUFNME8sS0FBSztBQUNoRCxJQUFJOUUsVUFBVS9ZLEtBQUs2ZCxLQUFLNUQsT0FBT3lULGdCQUFnQixNQUM1Q2p4QixHQUFHdUUsS0FBSzhoQixJQUFJM1gsS0FBS2dFLEtBQUtBOztBQXlCM0I4SyxPQUFPMFQsc0JBQXNCLFVBQVUzdEIsS0FBS21QLE1BQU0wTyxLQUFLO0FBQ3JELElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPMFQscUJBQXFCLE1BQ2pEbHhCLEdBQUdnQyxRQUFRcWtCLElBQUkzWCxLQUFLZ0UsS0FBS0E7O0FBeUI5QjhLLE9BQU8yVCx5QkFBeUIsVUFBVTV0QixLQUFLbVAsTUFBTTBPLEtBQUs7QUFDeEQsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU8yVCx3QkFBd0IsTUFDcERueEIsR0FBRytCLElBQUl3QyxLQUFLNmhCLElBQUkxWCxLQUFLZ0UsS0FBS0E7O0FBeUIvQjhLLE9BQU80VCx5QkFBeUIsVUFBVTd0QixLQUFLbVAsTUFBTTBPLEtBQUs7QUFDeEQsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU80VCx3QkFBd0IsTUFDcERweEIsR0FBRytCLElBQUl3QyxLQUFLOGhCLElBQUkzWCxLQUFLZ0UsS0FBS0E7O0FBa0MvQjhLLE9BQU82VCxTQUFTLFVBQVVoVCxJQUFJeUksV0FBV0MsZUFBZTNGLEtBQUs7QUFDM0QsSUFBSSxhQUFhLE9BQU8wRixhQUFhQSxxQkFBcUIvSSxRQUFRO0FBQ2hFZ0osZ0JBQWdCRDtBQUNoQkEsWUFBWTs7QUFHZCxJQUFJd0ssWUFBWSxJQUFJaFYsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBTzZULFFBQVEsTUFDbkRyeEIsR0FBR3V4QixNQUFNekssV0FBV0M7QUFDdkIsT0FBT3hLLEtBQUsrVSxXQUFXOztBQWdDekI5VCxPQUFPZ1UsZUFBZSxVQUFVblQsSUFBSXlJLFdBQVdDLGVBQWUzRixLQUFLO0FBQ2pFLElBQUksYUFBYSxPQUFPMEYsYUFBYUEscUJBQXFCL0ksUUFBUTtBQUNoRWdKLGdCQUFnQkQ7QUFDaEJBLFlBQVk7O0FBR2QsSUFBSXhLLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU9nVSxjQUFjLE1BQ3pDeHhCLEdBQUcrQixJQUFJd3ZCLE1BQU16SyxXQUFXQzs7QUFvQjdCdkosT0FBT2dOLFdBQVcsVUFBVTFJLEtBQUswSSxVQUFVUyxNQUFNN0osS0FBSztBQUNwRCxJQUFJUTtBQUNKLFFBQU80STtLQUNBO0FBQ0g1SSxLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxRQUFRbUo7QUFDYjtLQUNHO0FBQ0hySixLQUFLRSxNQUFNbUo7QUFDWDtLQUNHO0FBQ0hySixLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxNQUFNbUo7QUFDWDtLQUNHO0FBQ0hySixLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxRQUFRbUo7QUFDYjs7QUFFQTdKLE1BQU1BLE1BQU1BLE1BQU0sT0FBT0E7QUFDekIsTUFBTSxJQUFJdGpCLEtBQUtxZ0IsZUFDYmlELE1BQU0sdUJBQXVCb0osV0FBVyxLQUN4QzFwQixXQUNBMGMsT0FBT2dOOztBQUdiLElBQUlqcUIsT0FBTyxJQUFJK2IsVUFBVXNGLElBQUlSLEtBQUs1RCxPQUFPZ04sVUFBVTtBQUNuRGpxQixLQUFLaWQsT0FDRCxTQUFTakIsS0FBS2hjLE1BQU0sV0FDcEIsY0FBYzZkLEtBQUswQixRQUFRZ0MsT0FBTyxZQUFZMEksV0FBVyxNQUFNcE0sS0FBSzBCLFFBQVFtTCxPQUM1RSxjQUFjN00sS0FBSzBCLFFBQVFnQyxPQUFPLGdCQUFnQjBJLFdBQVcsTUFBTXBNLEtBQUswQixRQUFRbUw7O0FBbUJ0RnpOLE9BQU8rSyxVQUFVLFVBQVVvRCxLQUFLQyxLQUFLeEQsT0FBT2hILEtBQUs7QUFDL0MsSUFBSTlFLFVBQVVxUCxLQUFLdkssS0FBSzVELE9BQU8rSyxTQUFTLE1BQU12b0IsR0FBR1csR0FBRzRuQixRQUFRcUQsS0FBS3hEOztBQW1CbkU1SyxPQUFPaVUsZ0JBQWdCLFVBQVU5RixLQUFLQyxLQUFLeEQsT0FBT2hILEtBQUs7QUFDckQsSUFBSTlFLFVBQVVxUCxLQUFLdkssS0FBSzVELE9BQU9pVSxlQUFlLE1BQzNDenhCLEdBQUdXLEdBQUc4d0IsY0FBYzdGLEtBQUt4RDs7QUFtQjlCNUssT0FBT2tVLGNBQWMsVUFBVUMsTUFBTUMsTUFBTXhRLEtBQUs7QUFDOUMsSUFBSTlFLFVBQVVxVixNQUFNdlEsS0FBSzVELE9BQU9rVSxhQUFhLE1BQzFDMXhCLEdBQUd1RSxLQUFLc3RCLEtBQUtDLFFBQVFGOztBQW1CMUJwVSxPQUFPdVUsaUJBQWlCLFVBQVVKLE1BQU1DLE1BQU14USxLQUFLO0FBQ2pELElBQUk5RSxVQUFVcVYsTUFBTXZRLEtBQUs1RCxPQUFPdVUsZ0JBQWdCLE1BQzdDL3hCLEdBQUcrQixJQUFJd0MsS0FBS3N0QixLQUFLQyxRQUFRRjs7QUFtQjlCcFUsT0FBT3dVLGtCQUFrQixVQUFVTCxNQUFNQyxNQUFNeFEsS0FBSztBQUNsRCxJQUFJOUUsVUFBVXFWLE1BQU12USxLQUFLNUQsT0FBT3dVLGlCQUFpQixNQUM5Q2h5QixHQUFHdUUsS0FBS3N0QixLQUFLbmpCLEtBQUtvakIsUUFBUUY7O0FBbUIvQnBVLE9BQU95VSxxQkFBcUIsVUFBVU4sTUFBTUMsTUFBTXhRLEtBQUs7QUFDckQsSUFBSTlFLFVBQVVxVixNQUFNdlEsS0FBSzVELE9BQU95VSxvQkFBb0IsTUFDakRqeUIsR0FBRytCLElBQUl3QyxLQUFLc3RCLEtBQUtuakIsS0FBS29qQixRQUFRRjs7QUFtQm5DcFUsT0FBTzBVLHFCQUFxQixVQUFVUCxNQUFNQyxNQUFNeFEsS0FBSztBQUNyRCxJQUFJOUUsVUFBVXFWLE1BQU12USxLQUFLNUQsT0FBTzBVLG9CQUFvQixNQUNqRGx5QixHQUFHdUUsS0FBS3N0QixLQUFLakosUUFBUWtKLFFBQVFGOztBQW1CbENwVSxPQUFPMlUsd0JBQXdCLFVBQVVSLE1BQU1DLE1BQU14USxLQUFLO0FBQ3hELElBQUk5RSxVQUFVcVYsTUFBTXZRLEtBQUs1RCxPQUFPMlUsdUJBQXVCLE1BQ3BEbnlCLEdBQUcrQixJQUFJd0MsS0FBS3N0QixLQUFLakosUUFBUWtKLFFBQVFGOztBQW1CdENwVSxPQUFPNFUseUJBQXlCLFVBQVVULE1BQU1DLE1BQU14USxLQUFLO0FBQ3pELElBQUk5RSxVQUFVcVYsTUFBTXZRLEtBQUs1RCxPQUFPNFUsd0JBQXdCLE1BQ3JEcHlCLEdBQUd1RSxLQUFLc3RCLEtBQUtuakIsS0FBS2thLFFBQVFrSixRQUFRRjs7QUFvQnZDcFUsT0FBTzZVLDRCQUE0QixVQUFVVixNQUFNQyxNQUFNeFEsS0FBSztBQUM1RCxJQUFJOUUsVUFBVXFWLE1BQU12USxLQUFLNUQsT0FBTzZVLDJCQUEyQixNQUN4RHJ5QixHQUFHK0IsSUFBSXdDLEtBQUtzdEIsS0FBS25qQixLQUFLa2EsUUFBUWtKLFFBQVFGOztBQW1CM0NwVSxPQUFPOFUsaUJBQWlCLFVBQVU3SixVQUFVRCxRQUFRcEgsS0FBSztBQUN2RCxJQUFJOUUsVUFBVW1NLFVBQVVySCxLQUFLNUQsT0FBTzhVLGdCQUFnQixNQUNqRHR5QixHQUFHc0csUUFBUXdyQixRQUFRdEo7O0FBbUJ4QmhMLE9BQU8rVSxvQkFBb0IsVUFBVTlKLFVBQVVELFFBQVFwSCxLQUFLO0FBQzFELElBQUk5RSxVQUFVbU0sVUFBVXJILEtBQUs1RCxPQUFPK1UsbUJBQW1CLE1BQ3BEdnlCLEdBQUcrQixJQUFJdUUsUUFBUXdyQixRQUFRdEo7O0FBbUI1QmhMLE9BQU9nVixxQkFBcUIsVUFBVS9KLFVBQVVELFFBQVFwSCxLQUFLO0FBQzNELElBQUk5RSxVQUFVbU0sVUFBVXJILEtBQUs1RCxPQUFPZ1Ysb0JBQW9CLE1BQ3JEeHlCLEdBQUdzRyxRQUFRb0ksS0FBS29qQixRQUFRdEo7O0FBbUI3QmhMLE9BQU9pVix3QkFBd0IsVUFBVWhLLFVBQVVELFFBQVFwSCxLQUFLO0FBQzlELElBQUk5RSxVQUFVbU0sVUFBVXJILEtBQUs1RCxPQUFPaVYsdUJBQXVCLE1BQ3hEenlCLEdBQUcrQixJQUFJdUUsUUFBUW9JLEtBQUtvakIsUUFBUXRKOztBQW9CakNoTCxPQUFPa1Ysd0JBQXdCLFVBQVVqSyxVQUFVRCxRQUFRcEgsS0FBSztBQUM5RCxJQUFJOUUsVUFBVW1NLFVBQVVySCxLQUFLNUQsT0FBT2tWLHVCQUF1QixNQUN4RDF5QixHQUFHc0csUUFBUXNpQixRQUFRa0osUUFBUXRKOztBQXFCaENoTCxPQUFPbVYsMkJBQTJCLFVBQVVsSyxVQUFVRCxRQUFRcEgsS0FBSztBQUNqRSxJQUFJOUUsVUFBVW1NLFVBQVVySCxLQUFLNUQsT0FBT21WLDBCQUEwQixNQUMzRDN5QixHQUFHK0IsSUFBSXVFLFFBQVFzaUIsUUFBUWtKLFFBQVF0Sjs7QUFvQnBDaEwsT0FBT29WLDRCQUE0QixVQUFVbkssVUFBVUQsUUFBUXBILEtBQUs7QUFDbEUsSUFBSTlFLFVBQVVtTSxVQUFVckgsS0FBSzVELE9BQU9vViwyQkFBMkIsTUFDNUQ1eUIsR0FBR3NHLFFBQVFvSSxLQUFLa2EsUUFBUWtKLFFBQVF0Sjs7QUFzQnJDaEwsT0FBT3FWLCtCQUErQixVQUFVcEssVUFBVUQsUUFBUXBILEtBQUs7QUFDckUsSUFBSTlFLFVBQVVtTSxVQUFVckgsS0FBSzVELE9BQU9xViw4QkFBOEIsTUFDL0Q3eUIsR0FBRytCLElBQUl1RSxRQUFRb0ksS0FBS2thLFFBQVFrSixRQUFRdEo7O0FBa0J6Q2hMLE9BQU9nTSxRQUFRLFVBQVVzSixRQUFRdkosTUFBTW5JLEtBQUs7QUFDMUMsSUFBSTlFLFVBQVV3VyxRQUFRMVIsS0FBSzVELE9BQU9nTSxPQUFPLE1BQU14cEIsR0FBR1csR0FBRzZvQixNQUFNRDs7QUFxQjdEL0wsT0FBT3VWLFVBQVUsVUFBVTFVLElBQUk5YSxLQUFLeUcsTUFBTW9YLEtBQUs7QUFDN0MsSUFBSXhaLFVBQVU3SCxXQUFXLEtBQUssT0FBT3dELFFBQVEsWUFBWTtBQUN2RDZkLE1BQU1wWDtBQUNOQSxPQUFPOztBQUdULElBQUlzUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPdVYsU0FBUyxNQUFNL3lCLEdBQUdnekIsT0FBT3p2QixLQUFLeUc7O0FBc0I5RHdULE9BQU95VixZQUFZLFVBQVU1VSxJQUFJOWEsS0FBS3lHLE1BQU1vZSxPQUFPaEgsS0FBSztBQUN0RCxJQUFJeFosVUFBVTdILFdBQVcsS0FBSyxPQUFPd0QsUUFBUSxZQUFZO0FBQ3ZELElBQUkydkIsU0FBUzlLO0FBQ2JBLFFBQVFwZTtBQUNSb1gsTUFBTThSO09BQ0QsSUFBSXRyQixVQUFVN0gsV0FBVyxHQUFHO0FBQ2pDcW9CLFFBQVFwZTtBQUNSQSxPQUFPOztBQUdULElBQUlzUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPeVYsV0FBVyxNQUN0Q2p6QixHQUFHZ3pCLE9BQU96dkIsS0FBS3lHLE1BQU1tcEIsR0FBRy9LOztBQXFCN0I1SyxPQUFPNFYsZ0JBQWdCLFVBQVUvVSxJQUFJOWEsS0FBS3lHLE1BQU1vWCxLQUFLO0FBQ25ELElBQUl4WixVQUFVN0gsV0FBVyxLQUFLLE9BQU93RCxRQUFRLFlBQVk7QUFDdkQ2ZCxNQUFNcFg7QUFDTkEsT0FBTzs7QUFHVCxPQUFPLElBQUlzUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPNFYsZUFBZSxNQUNqRHB6QixHQUFHK0IsSUFBSWl4QixPQUFPenZCLEtBQUt5Rzs7QUFzQnhCd1QsT0FBTzZWLGtCQUFrQixVQUFVaFYsSUFBSTlhLEtBQUt5RyxNQUFNb2UsT0FBT2hILEtBQUs7QUFDNUQsSUFBSXhaLFVBQVU3SCxXQUFXLEtBQUssT0FBT3dELFFBQVEsWUFBWTtBQUN2RCxJQUFJMnZCLFNBQVM5SztBQUNiQSxRQUFRcGU7QUFDUm9YLE1BQU04UjtPQUNELElBQUl0ckIsVUFBVTdILFdBQVcsR0FBRztBQUNqQ3FvQixRQUFRcGU7QUFDUkEsT0FBTzs7QUFHVCxJQUFJc1MsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBTzZWLGlCQUFpQixNQUM1Q3J6QixHQUFHZ3pCLE9BQU96dkIsS0FBS3lHLE1BQU1zcEIsSUFBSXZ4QixJQUFJb3hCLEdBQUcvSzs7QUFxQnJDNUssT0FBTytWLFlBQVksVUFBVWxWLElBQUk5YSxLQUFLeUcsTUFBTW9YLEtBQUs7QUFDL0MsSUFBSXhaLFVBQVU3SCxXQUFXLEtBQUssT0FBT3dELFFBQVEsWUFBWTtBQUN2RDZkLE1BQU1wWDtBQUNOQSxPQUFPOztBQUdULE9BQU8sSUFBSXNTLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU8rVixXQUFXLE1BQzdDdnpCLEdBQUd3ekIsU0FBU2p3QixLQUFLeUc7O0FBc0J0QndULE9BQU9pVyxjQUFjLFVBQVVwVixJQUFJOWEsS0FBS3lHLE1BQU1vZSxPQUFPaEgsS0FBSztBQUN4RCxJQUFJeFosVUFBVTdILFdBQVcsS0FBSyxPQUFPd0QsUUFBUSxZQUFZO0FBQ3ZELElBQUkydkIsU0FBUzlLO0FBQ2JBLFFBQVFwZTtBQUNSb1gsTUFBTThSO09BQ0QsSUFBSXRyQixVQUFVN0gsV0FBVyxHQUFHO0FBQ2pDcW9CLFFBQVFwZTtBQUNSQSxPQUFPOztBQUdULElBQUlzUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPaVcsYUFBYSxNQUN4Q3p6QixHQUFHd3pCLFNBQVNqd0IsS0FBS3lHLE1BQU1tcEIsR0FBRy9LOztBQXFCL0I1SyxPQUFPa1csa0JBQWtCLFVBQVVyVixJQUFJOWEsS0FBS3lHLE1BQU1vWCxLQUFLO0FBQ3JELElBQUl4WixVQUFVN0gsV0FBVyxLQUFLLE9BQU93RCxRQUFRLFlBQVk7QUFDdkQ2ZCxNQUFNcFg7QUFDTkEsT0FBTzs7QUFHVCxPQUFPLElBQUlzUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPa1csaUJBQWlCLE1BQ25EMXpCLEdBQUcrQixJQUFJeXhCLFNBQVNqd0IsS0FBS3lHOztBQXNCMUJ3VCxPQUFPbVcsb0JBQW9CLFVBQVV0VixJQUFJOWEsS0FBS3lHLE1BQU1vZSxPQUFPaEgsS0FBSztBQUM5RCxJQUFJeFosVUFBVTdILFdBQVcsS0FBSyxPQUFPd0QsUUFBUSxZQUFZO0FBQ3ZELElBQUkydkIsU0FBUzlLO0FBQ2JBLFFBQVFwZTtBQUNSb1gsTUFBTThSO09BQ0QsSUFBSXRyQixVQUFVN0gsV0FBVyxHQUFHO0FBQ2pDcW9CLFFBQVFwZTtBQUNSQSxPQUFPOztBQUdULElBQUlzUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPbVcsbUJBQW1CLE1BQzlDM3pCLEdBQUd3ekIsU0FBU2p3QixLQUFLeUcsTUFBTXNwQixJQUFJdnhCLElBQUlveEIsR0FBRy9LOztBQXFCdkM1SyxPQUFPb1csWUFBWSxVQUFVdlYsSUFBSTlhLEtBQUt5RyxNQUFNb1gsS0FBSztBQUMvQyxJQUFJeFosVUFBVTdILFdBQVcsS0FBSyxPQUFPd0QsUUFBUSxZQUFZO0FBQ3ZENmQsTUFBTXBYO0FBQ05BLE9BQU87O0FBR1QsT0FBTyxJQUFJc1MsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBT29XLFdBQVcsTUFDN0M1ekIsR0FBRzZ6QixTQUFTdHdCLEtBQUt5Rzs7QUFzQnRCd1QsT0FBT3NXLGNBQWMsVUFBVXpWLElBQUk5YSxLQUFLeUcsTUFBTW9lLE9BQU9oSCxLQUFLO0FBQ3hELElBQUl4WixVQUFVN0gsV0FBVyxLQUFLLE9BQU93RCxRQUFRLFlBQVk7QUFDdkQsSUFBSTJ2QixTQUFTOUs7QUFDYkEsUUFBUXBlO0FBQ1JvWCxNQUFNOFI7T0FDRCxJQUFJdHJCLFVBQVU3SCxXQUFXLEdBQUc7QUFDakNxb0IsUUFBUXBlO0FBQ1JBLE9BQU87O0FBR1QsSUFBSXNTLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU9zVyxhQUFhLE1BQ3hDOXpCLEdBQUc2ekIsU0FBU3R3QixLQUFLeUcsTUFBTW1wQixHQUFHL0s7O0FBcUIvQjVLLE9BQU91VyxrQkFBa0IsVUFBVTFWLElBQUk5YSxLQUFLeUcsTUFBTW9YLEtBQUs7QUFDckQsSUFBSXhaLFVBQVU3SCxXQUFXLEtBQUssT0FBT3dELFFBQVEsWUFBWTtBQUN2RDZkLE1BQU1wWDtBQUNOQSxPQUFPOztBQUdULE9BQU8sSUFBSXNTLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU91VyxpQkFBaUIsTUFDbkQvekIsR0FBRytCLElBQUk4eEIsU0FBU3R3QixLQUFLeUc7O0FBc0IxQndULE9BQU93VyxvQkFBb0IsVUFBVTNWLElBQUk5YSxLQUFLeUcsTUFBTW9lLE9BQU9oSCxLQUFLO0FBQzlELElBQUl4WixVQUFVN0gsV0FBVyxLQUFLLE9BQU93RCxRQUFRLFlBQVk7QUFDdkQsSUFBSTJ2QixTQUFTOUs7QUFDYkEsUUFBUXBlO0FBQ1JvWCxNQUFNOFI7T0FDRCxJQUFJdHJCLFVBQVU3SCxXQUFXLEdBQUc7QUFDakNxb0IsUUFBUXBlO0FBQ1JBLE9BQU87O0FBR1QsT0FBTyxJQUFJc1MsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBT3dXLG1CQUFtQixNQUNyRGgwQixHQUFHK0IsSUFBSTh4QixTQUFTdHdCLEtBQUt5RyxNQUFNbXBCLEdBQUcvSzs7QUFzQm5DNUssT0FBT3lXLG9CQUFvQixVQUFVNVYsSUFBSTlhLEtBQUt5RyxNQUFNb2UsT0FBT2hILEtBQUs7QUFDOUQsSUFBSXhaLFVBQVU3SCxXQUFXLEtBQUssT0FBT3dELFFBQVEsWUFBWTtBQUN2RCxJQUFJMnZCLFNBQVM5SztBQUNiQSxRQUFRcGU7QUFDUm9YLE1BQU04UjtPQUNELElBQUl0ckIsVUFBVTdILFdBQVcsR0FBRztBQUNqQ3FvQixRQUFRcGU7QUFDUkEsT0FBTzs7QUFHVCxJQUFJc1MsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBT3lXLG1CQUFtQixNQUM5Q2owQixHQUFHNnpCLFNBQVN0d0IsS0FBS3lHLE1BQU1zcEIsSUFBSXZ4QixJQUFJb3hCLEdBQUcvSzs7QUFtQnZDNUssT0FBTzBXLFVBQVUsVUFBVXBTLEtBQUs7QUFDOUIsSUFBSUEsS0FBSztBQUNQLE1BQUssQ0FBQ0E7OztBQW1CVnRFLE9BQU8yTSxlQUFlLFVBQVU1bUIsS0FBSzZkLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU8yTSxjQUFjLE1BQU1ucUIsR0FBR1csR0FBR3d6Qjs7QUF3QjNEM1csT0FBTzRXLGtCQUFrQixVQUFVN3dCLEtBQUs2ZCxLQUFLO0FBQzNDLElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPNFcsaUJBQWlCLE1BQU1wMEIsR0FBRytCLElBQUlwQixHQUFHd3pCOztBQXVCbEUzVyxPQUFPNE0sV0FBVyxVQUFVN21CLEtBQUs2ZCxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPNE0sVUFBVSxNQUFNcHFCLEdBQUdXLEdBQUcwekI7O0FBa0J2RDdXLE9BQU84VyxjQUFjLFVBQVUvd0IsS0FBSzZkLEtBQUs7QUFDdkMsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU84VyxhQUFhLE1BQU10MEIsR0FBRytCLElBQUlwQixHQUFHMHpCOztBQW9COUQ3VyxPQUFPNk0sV0FBVyxVQUFVOW1CLEtBQUs2ZCxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVL1ksS0FBSzZkLEtBQUs1RCxPQUFPNk0sVUFBVSxNQUFNcnFCLEdBQUdXLEdBQUc0ekI7O0FBa0J2RC9XLE9BQU9nWCxjQUFjLFVBQVVqeEIsS0FBSzZkLEtBQUs7QUFDdkMsSUFBSTlFLFVBQVUvWSxLQUFLNmQsS0FBSzVELE9BQU9nWCxhQUFhLE1BQU14MEIsR0FBRytCLElBQUlwQixHQUFHNHpCOztBQXlCOUQvVyxPQUFPaVgsVUFBVSxVQUFTM1MsS0FBS1YsS0FBSztBQUNsQyxJQUFJOUUsVUFBVXdGLEtBQUtWLEtBQUs1RCxPQUFPaVgsU0FBUyxNQUFNejBCLEdBQUdXLEdBQUdvVDs7QUF5QnREeUosT0FBT2tYLGFBQWEsVUFBUzVTLEtBQUtWLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV3RixLQUFLVixLQUFLNUQsT0FBT2tYLFlBQVksTUFBTTEwQixHQUFHK0IsSUFBSXBCLEdBQUdvVDs7QUFPN0QsQ0FBQyxlQUFlalMsTUFBTTZ5QixJQUFHO0FBQ3ZCblgsT0FBT21YLE1BQU1uWCxPQUFPMWI7QUFDcEIsT0FBTzh5QjtHQUVSLFFBQVEsTUFDUixXQUFXLFNBQ1gsVUFBVSxTQUNWLFVBQVUsU0FDVixnQkFBZ0IsY0FDaEIsbUJBQW1CLGlCQUNuQixZQUFZLFVBQ1osZUFBZSxhQUNmLFlBQVksVUFDWixlQUFlLGFBQ2YsV0FBVyxTQUNYLGNBQWM7Ozs7O0FDeGhHakI7QUE4Q0EscUJBQXFCcnhCLEtBQUt6QixNQUFNO0FBQzlCLElBQUksT0FBT3lCLFFBQVEsZUFBZUEsUUFBUSxNQUFNO0FBQzlDLE9BQU87O0FBSVQsT0FBT3pCLFNBQVEyUSxPQUFPbFA7O0FBc0J4QixtQkFBbUJzeEIsTUFBTTtBQUN2QixJQUFJaFAsTUFBTWdQLEtBQUtwdUIsUUFBUSxjQUFjO0FBQ3JDLElBQUlxdUIsUUFBUWpQLElBQUluSSxNQUFNO0FBQ3RCLE9BQU9vWCxNQUFNM08sSUFBSSxvQkFBb0I1akIsT0FBTztBQUMxQyxJQUFJd3lCLFNBQVM7QUFDYixJQUFJQyxPQUFPRCxPQUFPcFAsS0FBS3BqQjtBQUN2QixJQUFJMHlCLFNBQVM7QUFDYixJQUFJRCxNQUFNO0FBQ1JDLFNBQVM7QUFBRWwwQixHQUFHNEosV0FBV3FxQixLQUFLOztPQUN6QjtBQUNMQyxTQUFTO0FBQUVDLEdBQUczeUIsTUFBTWtFLFFBQVEsZ0JBQWdCOzs7QUFHOUMsT0FBT3d1Qjs7O0FBbUJYLDhCQUE4QjF4QixLQUFLMHhCLFFBQVFFLFdBQVc7QUFDcEQsSUFBSUMsaUJBQWlCN3hCO0FBQ3JCLElBQUltYixNQUFNO0FBQ1Z5VyxZQUFZLENBQUMsT0FBT0EsY0FBYyxjQUFjRixPQUFPbDFCLFNBQVNvMUI7QUFFaEUsU0FBU3AwQixJQUFJLEdBQUdBLElBQUlvMEIsV0FBV3AwQixLQUFLO0FBQ2xDLElBQUlzMEIsT0FBT0osT0FBT2wwQjtBQUNsQixJQUFJcTBCLGdCQUFnQjtBQUNsQixJQUFJLE9BQU9DLEtBQUtILE1BQU0sYUFBYTtBQUNqQ0UsaUJBQWlCQSxlQUFlQyxLQUFLdDBCO09BQ2hDO0FBQ0xxMEIsaUJBQWlCQSxlQUFlQyxLQUFLSDs7QUFHdkMsSUFBSW4wQixNQUFNLENBQUNvMEIsWUFBWSxJQUFJO0FBQ3pCelcsTUFBTTBXOzs7O0FBS1osT0FBTzFXOztBQWlCVCw4QkFBOEJuYixLQUFLdWUsS0FBS21ULFFBQVE7QUFDOUMsSUFBSUssVUFBVS94QjtBQUNkLElBQUk0eEIsWUFBWUYsT0FBT2wxQjtBQUN2QixJQUFJczFCLE9BQU87QUFFWCxTQUFTdDBCLElBQUksR0FBR0EsSUFBSW8wQixXQUFXcDBCLEtBQUs7QUFDbEMsSUFBSXcwQixXQUFXO0FBQ2YsSUFBSUMsVUFBVTtBQUNkSCxPQUFPSixPQUFPbDBCO0FBR2QsSUFBSUEsTUFBTSxDQUFDbzBCLFlBQVksSUFBSTtBQUN6QkksV0FBVyxPQUFPRixLQUFLSCxNQUFNLGNBQWNHLEtBQUt0MEIsSUFBSXMwQixLQUFLSDtBQUV6REksUUFBUUMsWUFBWXpUO09BQ2YsSUFBSSxPQUFPdVQsS0FBS0gsTUFBTSxlQUFlSSxRQUFRRCxLQUFLSCxJQUFJO0FBQzNESSxVQUFVQSxRQUFRRCxLQUFLSDtPQUNsQixJQUFJLE9BQU9HLEtBQUt0MEIsTUFBTSxlQUFldTBCLFFBQVFELEtBQUt0MEIsSUFBSTtBQUMzRHUwQixVQUFVQSxRQUFRRCxLQUFLdDBCO09BQ2xCO0FBRUwsSUFBSThQLE9BQU9va0IsT0FBT2wwQixJQUFJO0FBRXRCdzBCLFdBQVcsT0FBT0YsS0FBS0gsTUFBTSxjQUFjRyxLQUFLdDBCLElBQUlzMEIsS0FBS0g7QUFFekRNLFVBQVUsT0FBTzNrQixLQUFLcWtCLE1BQU0sY0FBYyxLQUFLO0FBQy9DSSxRQUFRQyxZQUFZQztBQUNwQkYsVUFBVUEsUUFBUUM7Ozs7QUEyQnhCLHFCQUFxQmh5QixLQUFLc3hCLE1BQU07QUFDOUIsSUFBSUksU0FBU1EsVUFBVVo7QUFDdkIsSUFBSXBPLE9BQU93TyxPQUFPQSxPQUFPbDFCLFNBQVM7QUFDbEMsSUFBSTIxQixPQUFPO0FBQ1RyMUIsUUFBUTQwQixPQUFPbDFCLFNBQVMsSUFBSTQxQixxQkFBcUJweUIsS0FBSzB4QixRQUFRQSxPQUFPbDFCLFNBQVMsS0FBS3dEO0FBQ25GekIsTUFBTTJrQixLQUFLeU8sS0FBS3pPLEtBQUsxbEI7QUFDckJ3QixPQUFPb3pCLHFCQUFxQnB5QixLQUFLMHhCOztBQUVuQ1MsS0FBS3hRLFNBQVNoRixZQUFZd1YsS0FBS3IxQixRQUFRcTFCLEtBQUs1ekI7QUFFNUMsT0FBTzR6Qjs7QUFrQ1Qsc0JBQXNCbnlCLEtBQUtzeEIsTUFBTTtBQUMvQixJQUFJYSxPQUFPelYsWUFBWTFjLEtBQUtzeEI7QUFDNUIsT0FBT2EsS0FBS256Qjs7QUFvQ2Qsc0JBQXNCZ0IsS0FBS3N4QixNQUFNL1MsS0FBSztBQUNwQyxJQUFJbVQsU0FBU1EsVUFBVVo7QUFDdkJlLHFCQUFxQnJ5QixLQUFLdWUsS0FBS21UO0FBQy9CLE9BQU8xeEI7O0FBR1QrWCxPQUFPQyxVQUFVO0FBQ2YyRSxhQUFhQTtBQUNiRCxhQUFhQTtBQUNiNFYsY0FBY0E7QUFDZEMsY0FBY0E7Ozs7O0FDdlJoQixJQUFJdlosT0FBTztBQWFYakIsT0FBT0MsVUFBVSxjQUFjaFksS0FBS3NiLE1BQU07QUFDeEMsSUFBSXlELFNBQVMvRixLQUFLaFosS0FBSyxXQUNuQmtlLE9BQU81QyxLQUFLO0FBQ2hCLE9BQU95RCxTQUFTLENBQUNiLE9BQU9BOzs7OztBQzFCMUI7QUFPQSxJQUFJc1UsZ0JBQWdCLE9BQU9DLFlBQVk7QUFDdkMsSUFBSUMsZUFBZSxPQUFPNzNCLFdBQVcsY0FBY0EsU0FBUyxPQUFPODNCLFdBQVcsY0FBY0EsU0FBU0M7QUFDckcsSUFBSUMsUUFBUSxlQUFjSCxpQkFBZ0IsZUFBY0E7QUFDeEQsSUFBSUksZUFBZSxPQUFPM0wsV0FBVztBQUNyQyxJQUFJNEwsWUFBWSxPQUFPQyxRQUFRO0FBQy9CLElBQUlDLFlBQVksT0FBT0MsUUFBUTtBQUMvQixJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWTtBQUN2QyxJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWTtBQUN2QyxJQUFJQyxpQkFBaUIsT0FBT0MsYUFBYTtBQUN6QyxJQUFJQyx1QkFBdUJYLGdCQUFnQixPQUFPM0wsT0FBT3VNLGFBQWE7QUFDdEUsSUFBSUMsMEJBQTBCYixnQkFBZ0IsT0FBTzNMLE9BQU95TSxnQkFBZ0I7QUFDNUUsSUFBSUMsbUJBQW1CWixhQUFhLE9BQU9DLElBQUl0YyxVQUFVa2QsWUFBWTtBQUNyRSxJQUFJQyxtQkFBbUJoQixhQUFhLE9BQU9DLElBQUlwYyxVQUFVa2QsWUFBWTtBQUNyRSxJQUFJRSx1QkFBdUJILG9CQUFvQjNrQixPQUFPK2tCLGVBQWUsSUFBSWYsTUFBTVk7QUFDL0UsSUFBSUksdUJBQXVCSCxvQkFBb0I3a0IsT0FBTytrQixlQUFlLElBQUlqQixNQUFNYztBQUMvRSxJQUFJSyxzQkFBc0JWLHdCQUF3QixPQUFPOVEsTUFBTS9MLFVBQVV1USxPQUFPdU0sY0FBYztBQUM5RixJQUFJVSx5QkFBeUJELHVCQUF1QmpsQixPQUFPK2tCLGVBQWUsR0FBRzlNLE9BQU91TTtBQUNwRixJQUFJVyx1QkFBdUJaLHdCQUF3QixPQUFPL1ksT0FBTzlELFVBQVV1USxPQUFPdU0sY0FBYztBQUNoRyxJQUFJWSwwQkFBMEJELHdCQUF3Qm5sQixPQUFPK2tCLGVBQWUsS0FBRzlNLE9BQU91TTtBQUN0RixJQUFJYSwwQkFBMEI7QUFDOUIsSUFBSUMsMkJBQTJCLENBQUM7QUFXaEN6YyxPQUFPQyxVQUFVLG9CQUFvQmhZLEtBQUs7QUFleEMsSUFBSXkwQixZQUFZLE9BQU96MEI7QUFDdkIsSUFBSXkwQixjQUFjLFVBQVU7QUFDMUIsT0FBT0E7O0FBU1QsSUFBSXowQixRQUFRLE1BQU07QUFDaEIsT0FBTzs7QUFtQlQsSUFBSUEsUUFBUTB5QixjQUFjO0FBQ3hCLE9BQU87O0FBU1QsSUFDRS9QLE1BQU00SCxRQUFRdnFCLFFBQ2QsQ0FBQzJ6Qiw0QkFBNEIsU0FBUyxDQUFDLENBQUN4TSxRQUFPeU0sZUFBZTV6QixRQUM5RDtBQUNBLE9BQU87O0FBR1QsSUFBSTZ5QixPQUFPO0FBUVQsSUFBSTd5QixRQUFRMHlCLGFBQWF2M0IsVUFBVTtBQUNqQyxPQUFPOztBQXNCVCxJQUFJNkUsUUFBUTB5QixhQUFhNTJCLFVBQVU7QUFDakMsT0FBTzs7QUFTVCxJQUFJa0UsUUFBUSxDQUFDMHlCLGFBQWFnQyxjQUFhLEtBQUlDLFdBQVc7QUFDcEQsT0FBTzs7QUFTVCxJQUFJMzBCLFFBQVEsQ0FBQzB5QixhQUFhZ0MsY0FBYSxLQUFJRSxTQUFTO0FBQ2xELE9BQU87O0FBU1QsSUFBSTUwQixlQUFlMlcsZUFBZTNXLElBQUk4WixZQUFZLGNBQWM7QUFDOUQsT0FBTzs7QUFlVCxJQUFJOVosZUFBZTJXLGVBQWUzVyxJQUFJOFosWUFBWSxNQUFNO0FBQ3RELE9BQU87O0FBZVQsSUFBSTlaLGVBQWUyVyxlQUFlM1csSUFBSThaLFlBQVksTUFBTTtBQUN0RCxPQUFPOzs7QUEwQlgsSUFBSSthLFlBQVksQ0FBQ2xCLDJCQUEyQjN6QixJQUFJbW5CLE9BQU95TTtBQUN2RCxJQUFJLE9BQU9pQixjQUFjLFVBQVU7QUFDakMsT0FBT0E7O0FBR1QsSUFBSUMsZUFBZTVsQixPQUFPK2tCLGVBQWVqMEI7QUFTekMsSUFBSTgwQixpQkFBaUJ0YSxPQUFPNUQsV0FBVztBQUNyQyxPQUFPOztBQVNULElBQUlrZSxpQkFBaUJDLEtBQUtuZSxXQUFXO0FBQ25DLE9BQU87O0FBWVQsSUFBSTRiLGlCQUFpQnNDLGlCQUFpQnJDLFFBQVE3YixXQUFXO0FBQ3ZELE9BQU87O0FBU1QsSUFBSXFjLGFBQWE2QixpQkFBaUI1QixJQUFJdGMsV0FBVztBQUMvQyxPQUFPOztBQVNULElBQUltYyxhQUFhK0IsaUJBQWlCOUIsSUFBSXBjLFdBQVc7QUFDL0MsT0FBTzs7QUFTVCxJQUFJeWMsaUJBQWlCeUIsaUJBQWlCeEIsUUFBUTFjLFdBQVc7QUFDdkQsT0FBTzs7QUFTVCxJQUFJdWMsaUJBQWlCMkIsaUJBQWlCMUIsUUFBUXhjLFdBQVc7QUFDdkQsT0FBTzs7QUFTVCxJQUFJMmMsa0JBQWtCdUIsaUJBQWlCdEIsU0FBUzVjLFdBQVc7QUFDekQsT0FBTzs7QUFTVCxJQUFJbWMsYUFBYStCLGlCQUFpQlosc0JBQXNCO0FBQ3RELE9BQU87O0FBU1QsSUFBSWpCLGFBQWE2QixpQkFBaUJkLHNCQUFzQjtBQUN0RCxPQUFPOztBQVNULElBQUlHLHVCQUF1QlcsaUJBQWlCVix3QkFBd0I7QUFDbEUsT0FBTzs7QUFTVCxJQUFJQyx3QkFBd0JTLGlCQUFpQlIseUJBQXlCO0FBQ3BFLE9BQU87O0FBU1QsSUFBSVEsaUJBQWlCLE1BQU07QUFDekIsT0FBTzs7QUFHVCxPQUFPNWxCLE9BQ0owSCxVQUNBb04sU0FDQXhMLEtBQUt4WSxLQUNMaU4sTUFBTXNuQix5QkFBeUJDOztBQUdwQ3pjLE9BQU9DLFFBQVFnZCxhQUFhamQsT0FBT0M7Ozs7QUM3Vm5DLElBQUk0QyxpQkFBaUI7QUFDckIsSUFBSTVCLE9BQU87QUFDWCxJQUFJMWEsT0FBTztBQUVYeVosT0FBT0MsVUFBVSxxQkFBcUJoWSxLQUFLM0IsT0FBTztBQUNoRCxJQUFJeWdCLFVBQVU5RixLQUFLaFosS0FBSztBQUN4QixJQUFJOGQsT0FBTzlFLEtBQUtoWixLQUFLO0FBRXJCOGUsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBRXJDOWUsTUFBTWdaLEtBQUtoWixLQUFLO0FBQ2hCM0IsUUFBUUEsTUFBTXVrQixJQUFJLFVBQVVxUyxHQUFHO0FBQUUsT0FBT0EsRUFBRXQwQjs7QUFDMUN0QyxNQUFNZ2xCO0FBR04sSUFBSWYsTUFBTWprQixNQUFNdWtCLElBQUksVUFBVXFTLEdBQUd0NEIsT0FBTztBQUN0QyxJQUFJdTRCLE1BQU0sQ0FBQyxDQUFFLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBTW5hLFFBQVFrYSxFQUFFdFcsT0FBTyxNQUFNLE9BQU87QUFDckUsSUFBSXdXLEtBQUs5MkIsTUFBTTdCLFNBQVMsS0FBS0csVUFBVTBCLE1BQU03QixTQUFTLElBQUksUUFBUTtBQUNsRSxPQUFPMjRCLEtBQUtELE1BQU0sTUFBTUQ7R0FDdkI3UixLQUFLO0FBRVIsSUFBSXZFLFVBQVV2Z0IsS0FBSzBCLEtBQUtXO0FBRXhCLElBQUksQ0FBQ3RDLE1BQU0ySCxLQUFLLFVBQVVzUCxVQUFVO0FBQUUsT0FBT3VKLFlBQVl2SjtJQUFjO0FBQ3JFLE1BQU0sSUFBSXNGLGVBQ1JrRSxVQUFVLDJCQUEyQndELE1BQU0sV0FBV3pELFVBQVUsVUFDaEV0aEIsV0FDQXVnQjs7Ozs7O0FDckNOLElBQUk5RSxPQUFPLHFEQUNQc0QsWUFBWSwwREFDWkMsVUFBVSx3REFDVkMsYUFBYTtBQXFCakJ6RSxPQUFPQyxVQUFVLG9CQUFvQmhZLEtBQUtzYixNQUFNO0FBQzlDLElBQUl5RCxTQUFTL0YsS0FBS2haLEtBQUssV0FDbkJ1ZSxNQUFNdkYsS0FBS2haLEtBQUssV0FDaEJzVixXQUFXZ0csS0FBSyxJQUNoQmdELFNBQVNoQyxVQUFVdGMsS0FBS3NiLE9BQ3hCdUMsTUFBTWtCLFNBQVN6RCxLQUFLLEtBQUtBLEtBQUssSUFDOUJ3RCxVQUFVOUYsS0FBS2haLEtBQUs7QUFFeEIsSUFBRyxPQUFPNmQsUUFBUSxZQUFZQSxNQUFNQTtBQUNwQ0EsTUFBTUEsT0FBTztBQUNiQSxNQUFNQSxJQUNIM2EsUUFBUSxjQUFjLFlBQVk7QUFBRSxPQUFPc1osV0FBVytCO0dBQ3REcmIsUUFBUSxhQUFhLFlBQVk7QUFBRSxPQUFPc1osV0FBVzhCO0dBQ3JEcGIsUUFBUSxhQUFhLFlBQVk7QUFBRSxPQUFPc1osV0FBV2xIOztBQUV4RCxPQUFPd0osVUFBVUEsVUFBVSxPQUFPakIsTUFBTUE7Ozs7O0FDaEMxQzlGLE9BQU9DLFVBQVUsbUJBQW1CaFksS0FBS3NiLE1BQU07QUFDN0MsT0FBT0EsS0FBSzllLFNBQVMsSUFBSThlLEtBQUssS0FBS3RiLElBQUkrZjs7Ozs7QUNmekMsSUFBSW5ELFVBQVU7QUFDZCxJQUFJd1ksZ0JBQWdCO0FBQ3BCLElBQUlDLDBCQUEwQjtBQUM5QixJQUFJOTVCLFNBQVM7QUFFYndjLE9BQU9DLFVBQVV1RTtBQWlCakIsaUJBQWlCdmMsS0FBS3MxQixZQUFZQyxPQUFPQyxRQUFRO0FBQy9DLElBQUlDLE1BQU07QUFDUkgsWUFBWUE7QUFDWkksTUFBTTtBQUNOQyxTQUFTLFVBQVVyVCxLQUFLO0FBQUUsT0FBT0E7OztBQUVuQyxPQUFPc1QsWUFBWUgsS0FBS3oxQixLQUFLLENBQUMsT0FBT3UxQixVQUFVLGNBQWMsSUFBSUE7O0FBSW5FLElBQUlNLGVBQWUsVUFBVUMsUUFBUTtBQUNuQyxJQUFJLE9BQU9uZixnQkFBZ0IsVUFBVTtBQUNuQyxPQUFPbWYsa0JBQWtCbmY7T0FDcEI7QUFDTCxPQUFPbWYsVUFDTCxPQUFPQSxXQUFXLFlBQ2xCLGVBQWNBLFdBQ2RBLE9BQU96MUIsYUFBYSxLQUNwQixPQUFPeTFCLE9BQU9wMUIsYUFBYTs7O0FBSWpDLHFCQUFxQiswQixLQUFLejJCLE9BQU8rMkIsY0FBYztBQUc3QyxJQUFJLzJCLFNBQVMsT0FBT0EsTUFBTXVkLFlBQVksY0FFbEN2ZCxNQUFNdWQsWUFBWXZFLFFBQVF1RSxXQUUxQixDQUFDLENBQUN2ZCxNQUFNdEIsZUFBZXNCLE1BQU10QixZQUFZa1osY0FBYzVYLFFBQVE7QUFDakUsSUFBSWczQixNQUFNaDNCLE1BQU11ZCxRQUFRd1osY0FBY047QUFDdEMsSUFBSSxPQUFPTyxRQUFRLFVBQVU7QUFDM0JBLE1BQU1KLFlBQVlILEtBQUtPLEtBQUtEOztBQUU5QixPQUFPQzs7QUFJVCxJQUFJQyxZQUFZQyxnQkFBZ0JULEtBQUt6MkI7QUFDckMsSUFBSWkzQixXQUFXO0FBQ2IsT0FBT0E7O0FBSVQsSUFBSUosYUFBYTcyQixRQUFRO0FBQ3ZCLElBQUksZ0JBQWVBLFFBQU87QUFDeEIsT0FBT0EsTUFBTW0zQjtPQUdSO0FBRUwsSUFBSTtBQUNGLElBQUlyNkIsU0FBU3M2QixZQUFZO0FBQ3ZCLElBQUlDLGdCQUFnQixJQUFJQztBQUN4QixPQUFPRCxjQUFjRSxrQkFBa0J2M0I7T0FDbEM7QUFJTCxJQUFJdzNCLEtBQUs7QUFDVCxJQUFJQyxZQUFZMzZCLFNBQVM0NkIsZ0JBQWdCRixJQUFJO0FBRTdDQyxVQUFVdDZCLFlBQVk2QyxNQUFNMjNCLFVBQVU7QUFDdEMsSUFBSWgxQixPQUFPODBCLFVBQVU3dUIsVUFDbEIxRSxRQUFRLE1BQU0sTUFBTWxFLE1BQU00SSxZQUFZO0FBQ3pDNnVCLFVBQVU3dUIsWUFBWTtBQUN0QixPQUFPakc7O1NBRUYrZCxLQUFLOzs7QUFTbEIsSUFBSWtYLGNBQWN2Qix3QkFBd0JyMkI7QUFDMUMsSUFBSW1RLE9BQU9zbUIsSUFBSUgsYUFBYUYsY0FBY3AyQixTQUFTNDNCO0FBRW5ELElBQUlyNEIsTUFBTXM0QjtBQUtWLElBQUkxbkIsS0FBSzNTLFdBQVcsS0FBSyxDQUFDczZCLFFBQVE5M0IsVUFBVSxDQUN4QyxDQUFDbVEsS0FBSzNTLFdBQVcsS0FBSzJTLEtBQUssT0FBTyxZQUNsQyxDQUFDQSxLQUFLM1MsV0FBVyxLQUFLMlMsS0FBSyxPQUFPLGlCQUFpQkEsS0FBSyxPQUFPLFlBQzVEO0FBQ0wsSUFBSSxPQUFPblEsVUFBVSxZQUFZO0FBQy9CVCxPQUFPcWUsUUFBUTVkO0FBQ2Y2M0IsYUFBYXQ0QixPQUFPLE9BQU9BLE9BQU87QUFDbEMsT0FBT2szQixJQUFJRSxRQUFRLGNBQWNrQixhQUFhLEtBQUs7O0FBRXJELElBQUlFLFNBQVMvM0IsUUFBUTtBQUNuQixPQUFPeTJCLElBQUlFLFFBQVFuYixPQUFPNUQsVUFBVW9OLFNBQVN4TCxLQUFLeFosUUFBUTs7QUFFNUQsSUFBSWc0QixPQUFPaDRCLFFBQVE7QUFDakIsT0FBT3kyQixJQUFJRSxRQUFRWixLQUFLbmUsVUFBVXVLLFlBQVkzSSxLQUFLeFosUUFBUTs7QUFFN0QsSUFBSTgzQixRQUFROTNCLFFBQVE7QUFDbEIsT0FBT2k0QixZQUFZajRCOzs7QUFJdkIsSUFBSWs0QixPQUFPLElBQ1BDLFFBQVEsT0FDUkMsYUFBYSxPQUNiQyxTQUFTLENBQUMsS0FBSztBQUVuQixJQUFJQyxhQUFhdDRCLFFBQVE7QUFDdkJvNEIsYUFBYTtBQUNiQyxTQUFTLENBQUMsS0FBSzs7QUFJakIsSUFBSTlNLFFBQVF2ckIsUUFBUTtBQUNsQm00QixRQUFRO0FBQ1JFLFNBQVMsQ0FBQyxLQUFLOztBQUlqQixJQUFJLE9BQU9yNEIsVUFBVSxZQUFZO0FBQy9CVCxPQUFPcWUsUUFBUTVkO0FBQ2Y2M0IsYUFBYXQ0QixPQUFPLE9BQU9BLE9BQU87QUFDbEMyNEIsT0FBTyxlQUFlTCxhQUFhOztBQUlyQyxJQUFJRSxTQUFTLzNCLFFBQVE7QUFDbkJrNEIsT0FBTyxNQUFNMWMsT0FBTzVELFVBQVVvTixTQUFTeEwsS0FBS3haOztBQUk5QyxJQUFJZzRCLE9BQU9oNEIsUUFBUTtBQUNqQms0QixPQUFPLE1BQU1uQyxLQUFLbmUsVUFBVXVLLFlBQVkzSSxLQUFLeFo7O0FBSS9DLElBQUk4M0IsUUFBUTkzQixRQUFRO0FBQ2xCLE9BQU9pNEIsWUFBWWo0Qjs7QUFHckIsSUFBSW1RLEtBQUszUyxXQUFXLEtBQUssQ0FBQyxDQUFDMjZCLFNBQVNuNEIsTUFBTXhDLFVBQVUsSUFBSTtBQUN0RCxPQUFPNjZCLE9BQU8sS0FBS0gsT0FBT0csT0FBTzs7QUFHbkMsSUFBSXRCLGVBQWUsR0FBRztBQUNwQixJQUFJZ0IsU0FBUy8zQixRQUFRO0FBQ25CLE9BQU95MkIsSUFBSUUsUUFBUW5iLE9BQU81RCxVQUFVb04sU0FBU3hMLEtBQUt4WixRQUFRO09BQ3JEO0FBQ0wsT0FBT3kyQixJQUFJRSxRQUFRLFlBQVk7OztBQUluQ0YsSUFBSUMsS0FBS3hxQixLQUFLbE07QUFFZCxJQUFJdTRCO0FBQ0osSUFBSUosT0FBTztBQUNUSSxTQUFTQyxZQUFZL0IsS0FBS3oyQixPQUFPKzJCLGNBQWNhLGFBQWF6bkI7T0FDdkQsSUFBSWlvQixZQUFZO0FBQ3JCLE9BQU9LLGlCQUFpQno0QjtPQUNuQjtBQUNMdTRCLFNBQVNwb0IsS0FBS3lULElBQUksVUFBU3ZILEtBQUs7QUFDOUIsT0FBT3FjLGVBQWVqQyxLQUFLejJCLE9BQU8rMkIsY0FBY2EsYUFBYXZiLEtBQUs4Yjs7O0FBSXRFMUIsSUFBSUMsS0FBS3ZTO0FBRVQsT0FBT3dVLHFCQUFxQkosUUFBUUwsTUFBTUc7O0FBSTVDLHlCQUF5QjVCLEtBQUt6MkIsT0FBTztBQUNuQyxRQUFRLE9BQU9BO0tBQ1I7QUFDSCxPQUFPeTJCLElBQUlFLFFBQVEsYUFBYTtLQUU3QjtBQUNILElBQUlpQyxTQUFTLE9BQU8zaEIsS0FBS0MsVUFBVWxYLE9BQU9rRSxRQUFRLFVBQVUsSUFDbEJBLFFBQVEsTUFBTSxPQUNkQSxRQUFRLFFBQVEsT0FBTztBQUNqRSxPQUFPdXlCLElBQUlFLFFBQVFpQyxRQUFRO0tBRXhCO0FBQ0gsSUFBSTU0QixVQUFVLEtBQUssQ0FBQyxJQUFFQSxXQUFXLENBQUM2NEIsVUFBVTtBQUMxQyxPQUFPcEMsSUFBSUUsUUFBUSxNQUFNOztBQUUzQixPQUFPRixJQUFJRSxRQUFRLEtBQUszMkIsT0FBTztLQUU1QjtBQUNILE9BQU95MkIsSUFBSUUsUUFBUSxLQUFLMzJCLE9BQU87S0FFNUI7QUFDSCxPQUFPeTJCLElBQUlFLFFBQVEzMkIsTUFBTWdsQixZQUFZOztBQUd6QyxJQUFJaGxCLFVBQVUsTUFBTTtBQUNsQixPQUFPeTJCLElBQUlFLFFBQVEsUUFBUTs7O0FBSy9CLHFCQUFxQjMyQixPQUFPO0FBQzFCLE9BQU8sTUFBTThjLE1BQU1sRixVQUFVb04sU0FBU3hMLEtBQUt4WixTQUFTOztBQUl0RCxxQkFBcUJ5MkIsS0FBS3oyQixPQUFPKzJCLGNBQWNhLGFBQWF6bkIsTUFBTTtBQUNoRSxJQUFJb29CLFNBQVM7QUFDYixTQUFTLzVCLElBQUksR0FBR3M2QixJQUFJOTRCLE1BQU14QyxRQUFRZ0IsSUFBSXM2QixHQUFHLEVBQUV0NkIsR0FBRztBQUM1QyxJQUFJMFIsT0FBTzBILFVBQVU4SyxlQUFlbEosS0FBS3haLE9BQU8wYixPQUFPbGQsS0FBSztBQUMxRCs1QixPQUFPcnNCLEtBQUt3c0IsZUFBZWpDLEtBQUt6MkIsT0FBTysyQixjQUFjYSxhQUNqRGxjLE9BQU9sZCxJQUFJO09BQ1Y7QUFDTCs1QixPQUFPcnNCLEtBQUs7OztBQUloQmlFLEtBQUtpTSxRQUFRLFVBQVNDLEtBQUs7QUFDekIsSUFBSSxDQUFDQSxJQUFJbEIsTUFBTSxVQUFVO0FBQ3ZCb2QsT0FBT3JzQixLQUFLd3NCLGVBQWVqQyxLQUFLejJCLE9BQU8rMkIsY0FBY2EsYUFDakR2YixLQUFLOzs7QUFHYixPQUFPa2M7O0FBR1QsMEJBQTBCdjRCLE9BQU87QUFDL0IsSUFBSXNqQixNQUFNO0FBRVYsU0FBUzlrQixJQUFJLEdBQUdBLElBQUl3QixNQUFNeEMsUUFBUSxFQUFFZ0IsR0FBRztBQUNyQyxJQUFJOGtCLElBQUk5bEIsVUFBVWpCLE9BQU9DLG9CQUFvQixHQUFHO0FBQzlDOG1CLE9BQU87QUFDUDs7QUFFRkEsT0FBT3RqQixNQUFNeEIsS0FBSzs7QUFFcEI4a0IsT0FBTztBQUdQLElBQUlBLElBQUl2SCxRQUFRLFlBQVksQ0FBQyxHQUFHO0FBQzlCdUgsTUFBTUEsSUFBSXBmLFFBQVEsUUFBUTs7QUFHNUIsT0FBT29mOztBQUdULHdCQUF3Qm1ULEtBQUt6MkIsT0FBTysyQixjQUFjYSxhQUFhdmIsS0FBSzhiLE9BQU87QUFDekUsSUFBSTU0QjtBQUNKLElBQUl3NUIsaUJBQWlCN29CLE9BQU80SSx5QkFBeUI5WSxPQUFPcWM7QUFDNUQsSUFBSWlIO0FBRUosSUFBSXlWLGdCQUFnQjtBQUNsQixJQUFJQSxlQUFldDBCLEtBQUs7QUFDdEIsSUFBSXMwQixlQUFlcDBCLEtBQUs7QUFDdEIyZSxNQUFNbVQsSUFBSUUsUUFBUSxtQkFBbUI7T0FDaEM7QUFDTHJULE1BQU1tVCxJQUFJRSxRQUFRLFlBQVk7O09BRTNCO0FBQ0wsSUFBSW9DLGVBQWVwMEIsS0FBSztBQUN0QjJlLE1BQU1tVCxJQUFJRSxRQUFRLFlBQVk7Ozs7QUFJcEMsSUFBSWlCLFlBQVk3YixRQUFRTSxPQUFPLEdBQUc7QUFDaEM5YyxPQUFPLE1BQU04YyxNQUFNOztBQUVyQixJQUFJLENBQUNpSCxLQUFLO0FBQ1IsSUFBSW1ULElBQUlDLEtBQUszYSxRQUFRL2IsTUFBTXFjLFFBQVEsR0FBRztBQUNwQyxJQUFJMGEsaUJBQWlCLE1BQU07QUFDekJ6VCxNQUFNc1QsWUFBWUgsS0FBS3oyQixNQUFNcWMsTUFBTTtPQUM5QjtBQUNMaUgsTUFBTXNULFlBQVlILEtBQUt6MkIsTUFBTXFjLE1BQU0wYSxlQUFlOztBQUVwRCxJQUFJelQsSUFBSXZILFFBQVEsUUFBUSxDQUFDLEdBQUc7QUFDMUIsSUFBSW9jLE9BQU87QUFDVDdVLE1BQU1BLElBQUkwVixNQUFNLE1BQU1wVixJQUFJLFVBQVNxVixNQUFNO0FBQ3ZDLE9BQU8sT0FBT0E7R0FDYjdVLEtBQUssTUFBTThVLE9BQU87T0FDaEI7QUFDTDVWLE1BQU0sT0FBT0EsSUFBSTBWLE1BQU0sTUFBTXBWLElBQUksVUFBU3FWLE1BQU07QUFDOUMsT0FBTyxRQUFRQTtHQUNkN1UsS0FBSzs7O09BR1A7QUFDTGQsTUFBTW1ULElBQUlFLFFBQVEsY0FBYzs7O0FBR3BDLElBQUksT0FBT3AzQixTQUFTLGFBQWE7QUFDL0IsSUFBSTQ0QixTQUFTOWIsSUFBSWxCLE1BQU0sVUFBVTtBQUMvQixPQUFPbUk7O0FBRVQvakIsT0FBTzBYLEtBQUtDLFVBQVUsS0FBS21GO0FBQzNCLElBQUk5YyxLQUFLNGIsTUFBTSxpQ0FBaUM7QUFDOUM1YixPQUFPQSxLQUFLMjVCLE9BQU8sR0FBRzM1QixLQUFLL0IsU0FBUztBQUNwQytCLE9BQU9rM0IsSUFBSUUsUUFBUXAzQixNQUFNO09BQ3BCO0FBQ0xBLE9BQU9BLEtBQUsyRSxRQUFRLE1BQU0sT0FDZEEsUUFBUSxRQUFRLEtBQ2hCQSxRQUFRLFlBQVk7QUFDaEMzRSxPQUFPazNCLElBQUlFLFFBQVFwM0IsTUFBTTs7O0FBSTdCLE9BQU9BLE9BQU8sT0FBTytqQjs7QUFJdkIsOEJBQThCaVYsUUFBUUwsTUFBTUcsUUFBUTtBQUNsRCxJQUFJYyxjQUFjO0FBQ2xCLElBQUkzN0IsU0FBUys2QixPQUFPYSxPQUFPLFVBQVMxcUIsTUFBTTJxQixLQUFLO0FBQzdDRjtBQUNBLElBQUlFLElBQUl0ZCxRQUFRLFNBQVMsR0FBR29kO0FBQzVCLE9BQU96cUIsT0FBTzJxQixJQUFJNzdCLFNBQVM7R0FDMUI7QUFFSCxJQUFJQSxTQUFTLElBQUk7QUFDZixPQUFPNjZCLE9BQU8sS0FDUCxDQUFDSCxTQUFTLEtBQUssS0FBS0EsT0FBTyxTQUMzQixNQUNBSyxPQUFPblUsS0FBSyxXQUNaLE1BQ0FpVSxPQUFPOztBQUdoQixPQUFPQSxPQUFPLEtBQUtILE9BQU8sTUFBTUssT0FBT25VLEtBQUssUUFBUSxNQUFNaVUsT0FBTzs7QUFHbkUsc0JBQXNCaUIsSUFBSTtBQUd4QixPQUFPLENBQUMsT0FBT0EsT0FBTyxZQUFZLGVBQWF0N0IsS0FBS3U3QixlQUFlRDs7QUFHckUsaUJBQWlCQSxJQUFJO0FBQ25CLE9BQU8zVixNQUFNNEgsUUFBUStOLE9BQ2QsQ0FBQyxPQUFPQSxPQUFPLFlBQVlDLGVBQWVELFFBQVE7O0FBRzNELGtCQUFrQm5XLElBQUk7QUFDcEIsT0FBTyxPQUFPQSxPQUFPLFlBQVlvVyxlQUFlcFcsUUFBUTs7QUFHMUQsZ0JBQWdCbk4sR0FBRztBQUNqQixPQUFPLE9BQU9BLE1BQU0sWUFBWXVqQixlQUFldmpCLE9BQU87O0FBR3hELGlCQUFpQnRRLEdBQUc7QUFDbEIsT0FBTyxPQUFPQSxNQUFNLFlBQVk2ekIsZUFBZTd6QixPQUFPOztBQUd4RCx3QkFBd0I4ekIsR0FBRztBQUN6QixPQUFPdHBCLE9BQU8wSCxVQUFVb04sU0FBU3hMLEtBQUtnZ0I7Ozs7O0FDblh4QyxJQUFJamMsVUFBVTtBQUNkLElBQUloaEIsU0FBUztBQWVid2MsT0FBT0MsVUFBVSxvQkFBb0JoWSxLQUFLO0FBQ3hDLElBQUlzaUIsTUFBTS9GLFFBQVF2YyxNQUNkMUIsT0FBTzRRLE9BQU8wSCxVQUFVb04sU0FBU3hMLEtBQUt4WTtBQUUxQyxJQUFJekUsT0FBT0MscUJBQXFCOG1CLElBQUk5bEIsVUFBVWpCLE9BQU9DLG1CQUFtQjtBQUN0RSxJQUFJOEMsU0FBUyxxQkFBcUI7QUFDaEMsT0FBTyxDQUFDMEIsSUFBSXpCLFFBQVF5QixJQUFJekIsU0FBUyxLQUM3QixlQUNBLGdCQUFnQnlCLElBQUl6QixPQUFPO09BQzFCLElBQUlELFNBQVMsa0JBQWtCO0FBQ3BDLE9BQU8sYUFBYTBCLElBQUl4RCxTQUFTO09BQzVCLElBQUk4QixTQUFTLG1CQUFtQjtBQUNyQyxJQUFJNlEsT0FBT0QsT0FBT0MsS0FBS25QLE1BQ25CeTRCLE9BQU90cEIsS0FBSzNTLFNBQVMsSUFDbkIyUyxLQUFLc1csT0FBTyxHQUFHLEdBQUdyQyxLQUFLLFFBQVEsVUFDL0JqVSxLQUFLaVUsS0FBSztBQUNoQixPQUFPLGVBQWVxVixPQUFPO09BQ3hCO0FBQ0wsT0FBT25XOztPQUVKO0FBQ0wsT0FBT0E7Ozs7OztBQ3RCWHZLLE9BQU9DLFVBQVUsY0FBY2hZLEtBQUtxYixLQUFLcmMsT0FBTztBQUM5QyxJQUFJMDVCLFFBQVExNEIsSUFBSTI0QixXQUFXLENBQUMzNEIsSUFBSTI0QixVQUFVenBCLE9BQU8rTSxPQUFPO0FBQ3hELElBQUk1WCxVQUFVN0gsV0FBVyxHQUFHO0FBQzFCazhCLE1BQU1yZCxPQUFPcmM7T0FDUjtBQUNMLE9BQU8wNUIsTUFBTXJkOzs7Ozs7QUNEakJ0RCxPQUFPQyxVQUFVLHVCQUF1QjBCLFdBQVdvYyxRQUFROEMsWUFBWTtBQUNyRSxJQUFJRixRQUFRaGYsVUFBVWlmLFdBQVcsQ0FBQ2pmLFVBQVVpZixVQUFVenBCLE9BQU8rTSxPQUFPO0FBRXBFLElBQUksQ0FBQzZaLE9BQU82QyxTQUFTO0FBQ25CN0MsT0FBTzZDLFVBQVV6cEIsT0FBTytNLE9BQU87O0FBR2pDMmMsYUFBYXYwQixVQUFVN0gsV0FBVyxJQUFJbzhCLGFBQWE7QUFFbkQsU0FBUzVmLFFBQVEwZixPQUFPO0FBQ3RCLElBQUlFLGNBQ0EsQ0FBQzVmLFNBQVMsWUFBWUEsU0FBUyxVQUFVQSxTQUFTLGNBQWNBLFFBQVEsWUFBWTtBQUN0RjhjLE9BQU82QyxRQUFRM2YsUUFBUTBmLE1BQU0xZjs7Ozs7OztBQ3pDbkM7QUFRQSxJQUFJMWEsT0FBTztBQUNYLG1CQUFtQjtBQUNqQixLQUFLdTZCLE9BQU8sb0JBQW9CL1QsS0FBS2dVLFdBQVcvRCxLQUFLZ0U7O0FBR3ZEQyxRQUFRcGlCLFlBQVk7QUFDbEJuVCxLQUFLLGdCQUFnQjRYLEtBQUs7QUFDeEIsT0FBT0EsSUFBSSxLQUFLd2Q7O0FBRWxCbDFCLEtBQUssZ0JBQWdCMFgsS0FBS3JjLE9BQU87QUFDL0IsSUFBSSxDQUFDa1EsT0FBTzRYLFNBQVN6TCxNQUFNO0FBQ3pCbk0sT0FBT3lKLGVBQWUwQyxLQUFLLEtBQUt3ZCxNQUFNO0FBQ3BDNzVCLE9BQU9BO0FBQ1A0TSxjQUFjOzs7OztBQU10QixJQUFJcXRCLGFBQWEsT0FBTzdGLFlBQVksYUFBYUEsVUFBVTRGO0FBUzNELHdCQUF3QkUsaUJBQWlCQyxrQkFBa0JDLFlBQVk7QUFFckUsSUFBSSxDQUFDQSxjQUFjQyxZQUFZSCxvQkFBb0JHLFlBQVlGLG1CQUFtQjtBQUNoRixPQUFPOztBQUVULElBQUlHLGNBQWNGLFdBQVczMUIsSUFBSXkxQjtBQUNqQyxJQUFJSSxhQUFhO0FBQ2YsSUFBSTduQixTQUFTNm5CLFlBQVk3MUIsSUFBSTAxQjtBQUM3QixJQUFJLE9BQU8xbkIsV0FBVyxXQUFXO0FBQy9CLE9BQU9BOzs7QUFHWCxPQUFPOztBQVdULG9CQUFvQnluQixpQkFBaUJDLGtCQUFrQkMsWUFBWTNuQixRQUFRO0FBRXpFLElBQUksQ0FBQzJuQixjQUFjQyxZQUFZSCxvQkFBb0JHLFlBQVlGLG1CQUFtQjtBQUNoRjs7QUFFRixJQUFJRyxjQUFjRixXQUFXMzFCLElBQUl5MUI7QUFDakMsSUFBSUksYUFBYTtBQUNmQSxZQUFZMzFCLElBQUl3MUIsa0JBQWtCMW5CO09BQzdCO0FBQ0w2bkIsY0FBYyxJQUFJTDtBQUNsQkssWUFBWTMxQixJQUFJdzFCLGtCQUFrQjFuQjtBQUNsQzJuQixXQUFXejFCLElBQUl1MUIsaUJBQWlCSTs7O0FBUXBDdmhCLE9BQU9DLFVBQVV5UTtBQUNqQjFRLE9BQU9DLFFBQVFpaEIsYUFBYUE7QUFjNUIsbUJBQW1CQyxpQkFBaUJDLGtCQUFrQjM0QixTQUFTO0FBRTdELElBQUlBLFdBQVdBLFFBQVErNEIsWUFBWTtBQUNqQyxPQUFPQyxtQkFBbUJOLGlCQUFpQkMsa0JBQWtCMzRCOztBQUcvRCxJQUFJaTVCLGVBQWVDLFlBQVlSLGlCQUFpQkM7QUFDaEQsSUFBSU0saUJBQWlCLE1BQU07QUFDekIsT0FBT0E7O0FBSVQsT0FBT0QsbUJBQW1CTixpQkFBaUJDLGtCQUFrQjM0Qjs7QUFTL0QscUJBQXFCMDRCLGlCQUFpQkMsa0JBQWtCO0FBRXRELElBQUlELG9CQUFvQkMsa0JBQWtCO0FBRXhDLE9BQU9ELG9CQUFvQixLQUFLLElBQUlBLG9CQUFvQixJQUFJQzs7QUFJOUQsSUFDRUQsb0JBQW9CQSxtQkFDcEJDLHFCQUFxQkEsa0JBQ3JCO0FBQ0EsT0FBTzs7QUFLVCxJQUFJRSxZQUFZSCxvQkFBb0JHLFlBQVlGLG1CQUFtQjtBQUVqRSxPQUFPOztBQUVULE9BQU87O0FBZVQsNEJBQTRCRCxpQkFBaUJDLGtCQUFrQjM0QixTQUFTO0FBQ3RFQSxVQUFVQSxZQUFXO0FBQ3JCQSxRQUFRbTVCLFVBQVVuNUIsUUFBUW01QixZQUFZLFFBQVEsUUFBUW41QixRQUFRbTVCLFdBQVcsSUFBSVY7QUFDN0UsSUFBSU0sYUFBYS80QixXQUFXQSxRQUFRKzRCO0FBR3BDLElBQUlLLG9CQUFvQkMsZUFBZVgsaUJBQWlCQyxrQkFBa0IzNEIsUUFBUW01QjtBQUNsRixJQUFJQyxzQkFBc0IsTUFBTTtBQUM5QixPQUFPQTs7QUFFVCxJQUFJRSxxQkFBcUJELGVBQWVWLGtCQUFrQkQsaUJBQWlCMTRCLFFBQVFtNUI7QUFDbkYsSUFBSUcsdUJBQXVCLE1BQU07QUFDL0IsT0FBT0E7O0FBSVQsSUFBSVAsWUFBWTtBQUNkLElBQUlRLG1CQUFtQlIsV0FBV0wsaUJBQWlCQztBQUVuRCxJQUFJWSxxQkFBcUIsU0FBU0EscUJBQXFCLE1BQU07QUFDM0RDLFdBQVdkLGlCQUFpQkMsa0JBQWtCMzRCLFFBQVFtNUIsU0FBU0k7QUFDL0QsT0FBT0E7O0FBSVQsSUFBSU4sZUFBZUMsWUFBWVIsaUJBQWlCQztBQUNoRCxJQUFJTSxpQkFBaUIsTUFBTTtBQUV6QixPQUFPQTs7O0FBSVgsSUFBSVEsZUFBZTM3QixLQUFLNDZCO0FBQ3hCLElBQUllLGlCQUFpQjM3QixLQUFLNjZCLG1CQUFtQjtBQUMzQ2EsV0FBV2QsaUJBQWlCQyxrQkFBa0IzNEIsUUFBUW01QixTQUFTO0FBQy9ELE9BQU87O0FBSVRLLFdBQVdkLGlCQUFpQkMsa0JBQWtCMzRCLFFBQVFtNUIsU0FBUztBQUUvRCxJQUFJbG9CLFNBQVN5b0IseUJBQXlCaEIsaUJBQWlCQyxrQkFBa0JjLGNBQWN6NUI7QUFDdkZ3NUIsV0FBV2QsaUJBQWlCQyxrQkFBa0IzNEIsUUFBUW01QixTQUFTbG9CO0FBQy9ELE9BQU9BOztBQUdULGtDQUFrQ3luQixpQkFBaUJDLGtCQUFrQmMsY0FBY3o1QixTQUFTO0FBQzFGLFFBQVF5NUI7S0FDRDtLQUNBO0tBQ0E7S0FDQTtBQUVILE9BQU94UixVQUFVeVEsZ0JBQWdCOVIsV0FBVytSLGlCQUFpQi9SO0tBQzFEO0tBQ0E7S0FDQTtLQUNBO0tBQ0E7S0FDQTtBQUNILE9BQU84UixvQkFBb0JDO0tBQ3hCO0tBQ0E7S0FDQTtLQUNBO0tBQ0E7S0FDQTtLQUNBO0tBQ0E7S0FDQTtLQUNBO0tBQ0E7QUFDSCxPQUFPZ0IsY0FBY2pCLGlCQUFpQkMsa0JBQWtCMzRCO0tBQ3JEO0FBQ0gsT0FBTzQ1QixZQUFZbEIsaUJBQWlCQztLQUNqQztBQUNILE9BQU9rQixlQUFlbkIsaUJBQWlCQyxrQkFBa0IzNEI7S0FDdEQ7QUFDSCxPQUFPMjVCLGNBQWMsSUFBSUcsV0FBV3BCLGdCQUFnQnFCLFNBQVMsSUFBSUQsV0FBV25CLGlCQUFpQm9CLFNBQVMvNUI7S0FDbkc7QUFDSCxPQUFPMjVCLGNBQWMsSUFBSUcsV0FBV3BCLGtCQUFrQixJQUFJb0IsV0FBV25CLG1CQUFtQjM0QjtLQUNyRjtBQUNILE9BQU9nNkIsYUFBYXRCLGlCQUFpQkMsa0JBQWtCMzRCO0tBQ3BEO0FBQ0gsT0FBT2c2QixhQUFhdEIsaUJBQWlCQyxrQkFBa0IzNEI7O0FBRXZELE9BQU9pNkIsWUFBWXZCLGlCQUFpQkMsa0JBQWtCMzRCOzs7QUFZNUQscUJBQXFCMDRCLGlCQUFpQkMsa0JBQWtCO0FBQ3RELE9BQU9ELGdCQUFnQmxWLGVBQWVtVixpQkFBaUJuVjs7QUFZekQsc0JBQXNCa1YsaUJBQWlCQyxrQkFBa0IzNEIsU0FBUztBQUVoRSxJQUFJMDRCLGdCQUFnQjNqQixTQUFTNGpCLGlCQUFpQjVqQixNQUFNO0FBQ2xELE9BQU87O0FBRVQsSUFBSTJqQixnQkFBZ0IzakIsU0FBUyxHQUFHO0FBQzlCLE9BQU87O0FBRVQsSUFBSW1sQixnQkFBZ0I7QUFDcEIsSUFBSUMsaUJBQWlCO0FBQ3JCekIsZ0JBQWdCOWQsUUFBUSx1QkFBdUJDLEtBQUtyYyxPQUFPO0FBQ3pEMDdCLGNBQWN4dkIsS0FBSyxDQUFFbVEsS0FBS3JjOztBQUU1Qm02QixpQkFBaUIvZCxRQUFRLHVCQUF1QkMsS0FBS3JjLE9BQU87QUFDMUQyN0IsZUFBZXp2QixLQUFLLENBQUVtUSxLQUFLcmM7O0FBRTdCLE9BQU9tN0IsY0FBY08sY0FBY3JYLFFBQVFzWCxlQUFldFgsUUFBUTdpQjs7QUFZcEUsdUJBQXVCMDRCLGlCQUFpQkMsa0JBQWtCMzRCLFNBQVM7QUFDakUsSUFBSWhFLFNBQVMwOEIsZ0JBQWdCMThCO0FBQzdCLElBQUlBLFdBQVcyOEIsaUJBQWlCMzhCLFFBQVE7QUFDdEMsT0FBTzs7QUFFVCxJQUFJQSxXQUFXLEdBQUc7QUFDaEIsT0FBTzs7QUFFVCxJQUFJRyxRQUFRLENBQUM7QUFDYixPQUFPLEVBQUVBLFFBQVFILFFBQVE7QUFDdkIsSUFBSWlzQixVQUFVeVEsZ0JBQWdCdjhCLFFBQVF3OEIsaUJBQWlCeDhCLFFBQVE2RCxhQUFhLE9BQU87QUFDakYsT0FBTzs7O0FBR1gsT0FBTzs7QUFZVCx3QkFBd0IwNEIsaUJBQWlCQyxrQkFBa0IzNEIsU0FBUztBQUNsRSxPQUFPMjVCLGNBQWNTLG9CQUFvQjFCLGtCQUFrQjBCLG9CQUFvQnpCLG1CQUFtQjM0Qjs7QUFTcEcsNkJBQTZCa0csUUFBUTtBQUNuQyxPQUFPLE9BQU95Z0IsV0FBVyxlQUN2QixPQUFPemdCLFdBQVcsWUFDbEIsT0FBT3lnQixPQUFPdU0sYUFBYSxlQUMzQixPQUFPaHRCLE9BQU95Z0IsT0FBT3VNLGNBQWM7O0FBVXZDLDRCQUE0Qmh0QixRQUFRO0FBQ2xDLElBQUltMEIsb0JBQW9CbjBCLFNBQVM7QUFDL0IsSUFBSTtBQUNGLE9BQU9rMEIsb0JBQW9CbDBCLE9BQU95Z0IsT0FBT3VNO1NBQ2xDb0gsZUFBZTtBQUN0QixPQUFPOzs7QUFHWCxPQUFPOztBQVNULDZCQUE2QkMsV0FBVztBQUN0QyxJQUFJQyxrQkFBa0JELFVBQVV6dEI7QUFDaEMsSUFBSTJ0QixjQUFjLENBQUVELGdCQUFnQmg4QjtBQUNwQyxPQUFPZzhCLGdCQUFnQkUsU0FBUyxPQUFPO0FBQ3JDRixrQkFBa0JELFVBQVV6dEI7QUFDNUIydEIsWUFBWS92QixLQUFLOHZCLGdCQUFnQmg4Qjs7QUFFbkMsT0FBT2k4Qjs7QUFTVCwyQkFBMkJ2MEIsUUFBUTtBQUNqQyxJQUFJeUksT0FBTztBQUNYLFNBQVNrTSxPQUFPM1UsUUFBUTtBQUN0QnlJLEtBQUtqRSxLQUFLbVE7O0FBRVosT0FBT2xNOztBQWFULG1CQUFtQitwQixpQkFBaUJDLGtCQUFrQmhxQixNQUFNM08sU0FBUztBQUNuRSxJQUFJaEUsU0FBUzJTLEtBQUszUztBQUNsQixJQUFJQSxXQUFXLEdBQUc7QUFDaEIsT0FBTzs7QUFFVCxTQUFTZ0IsSUFBSSxHQUFHQSxJQUFJaEIsUUFBUWdCLEtBQUssR0FBRztBQUNsQyxJQUFJaXJCLFVBQVV5USxnQkFBZ0IvcEIsS0FBSzNSLEtBQUsyN0IsaUJBQWlCaHFCLEtBQUszUixLQUFLZ0QsYUFBYSxPQUFPO0FBQ3JGLE9BQU87OztBQUdYLE9BQU87O0FBYVQscUJBQXFCMDRCLGlCQUFpQkMsa0JBQWtCMzRCLFNBQVM7QUFDL0QsSUFBSTI2QixlQUFlQyxrQkFBa0JsQztBQUNyQyxJQUFJbUMsZ0JBQWdCRCxrQkFBa0JqQztBQUN0QyxJQUFJZ0MsYUFBYTMrQixVQUFVMitCLGFBQWEzK0IsV0FBVzYrQixjQUFjNytCLFFBQVE7QUFDdkUyK0IsYUFBYTlYO0FBQ2JnWSxjQUFjaFk7QUFDZCxJQUFJOFcsY0FBY2dCLGNBQWNFLG1CQUFtQixPQUFPO0FBQ3hELE9BQU87O0FBRVQsT0FBT0MsVUFBVXBDLGlCQUFpQkMsa0JBQWtCZ0MsY0FBYzM2Qjs7QUFHcEUsSUFBSSs2QixrQkFBa0JDLG1CQUFtQnRDO0FBQ3pDLElBQUl1QyxtQkFBbUJELG1CQUFtQnJDO0FBQzFDLElBQUlvQyxnQkFBZ0IvK0IsVUFBVSsrQixnQkFBZ0IvK0IsV0FBV2kvQixpQkFBaUJqL0IsUUFBUTtBQUNoRisrQixnQkFBZ0JsWTtBQUNoQm9ZLGlCQUFpQnBZO0FBQ2pCLE9BQU84VyxjQUFjb0IsaUJBQWlCRSxrQkFBa0JqN0I7O0FBRzFELElBQUkyNkIsYUFBYTMrQixXQUFXLEtBQ3hCKytCLGdCQUFnQi8rQixXQUFXLEtBQzNCNitCLGNBQWM3K0IsV0FBVyxLQUN6QmkvQixpQkFBaUJqL0IsV0FBVyxHQUFHO0FBQ2pDLE9BQU87O0FBR1QsT0FBTzs7QUFZVCxxQkFBcUJ3QyxPQUFPO0FBQzFCLE9BQU9BLFVBQVUsUUFBUSxPQUFPQSxVQUFVOzs7OztBQ3JjNUM7QUFxQkEsSUFBSWdsQixXQUFXMFgsU0FBUzlrQixVQUFVb047QUFDbEMsSUFBSTJYLG9CQUFvQjtBQUN4QixxQkFBcUJDLE9BQU87QUFDMUIsSUFBSSxPQUFPQSxVQUFVLFlBQVk7QUFDL0IsT0FBTzs7QUFHVCxJQUFJcjlCLE9BQU87QUFDWCxJQUFJLE9BQU9tOUIsU0FBUzlrQixVQUFVclksU0FBUyxlQUFlLE9BQU9xOUIsTUFBTXI5QixTQUFTLGFBQWE7QUFFdkYsSUFBSTRiLFFBQVE2SixTQUFTeEwsS0FBS29qQixPQUFPemhCLE1BQU13aEI7QUFDdkMsSUFBSXhoQixPQUFPO0FBQ1Q1YixPQUFPNGIsTUFBTTs7T0FFVjtBQUVMNWIsT0FBT3E5QixNQUFNcjlCOztBQUdmLE9BQU9BOztBQUdUd1osT0FBT0MsVUFBVTZqQjs7OztBQ3JDakIsSUFBSXRoQyxPQUFPO0FBQ1gsSUFBSXllLE9BQU87QUFDWCxJQUFJd0UsaUJBQWlCO0FBQ3JCLElBQUlmLGdCQUFnQjtBQTRCcEIxRSxPQUFPQyxVQUFVLHFCQUFxQnlkLEtBQUtsM0IsTUFBTXU5QixRQUFRO0FBQ3ZEQSxTQUFTQSxXQUFXditCLFlBQVksWUFBWSxLQUFLdStCO0FBRWpENXNCLE9BQU95SixlQUFlOGMsS0FBS2wzQixNQUN6QjtBQUFFa0YsS0FBSywwQkFBMEI7QUFnQjdCLElBQUksQ0FBQytaLG9CQUFvQixDQUFDeEUsS0FBSyxNQUFNLGFBQWE7QUFDaERBLEtBQUssTUFBTSxRQUFRK2lCOztBQUdyQixJQUFJdHFCLFNBQVNxcUIsT0FBT3RqQixLQUFLO0FBQ3pCLElBQUkvRyxXQUFXbFUsV0FDYixPQUFPa1U7QUFFVCxJQUFJdXFCLGVBQWUsSUFBSXpoQyxLQUFLd2U7QUFDNUIwRCxjQUFjLE1BQU11ZjtBQUNwQixPQUFPQTs7QUFFVHB3QixjQUFjOzs7Ozs7QUMvRHBCLElBQUkyUixpQkFBaUI7QUFDckIsSUFBSWhqQixPQUFPO0FBQ1gsSUFBSXllLE9BQU87QUFDWCxJQUFJc0UsVUFBVTtBQUNkLElBQUliLGdCQUFnQjtBQTRCcEIxRSxPQUFPQyxVQUFVLG1CQUFtQnlkLEtBQUtsM0IsTUFBTWltQixRQUFRO0FBQ3JELElBQUl5WCxnQkFBZ0IsWUFBWTtBQWE5QixJQUFJLENBQUNqakIsS0FBSyxNQUFNLGFBQWE7QUFDM0JBLEtBQUssTUFBTSxRQUFRaWpCOztBQUdyQixJQUFJeHFCLFNBQVMrUyxPQUFPM0MsTUFBTSxNQUFNeGQ7QUFDaEMsSUFBSW9OLFdBQVdsVSxXQUNiLE9BQU9rVTtBQUVULElBQUl1cUIsZUFBZSxJQUFJemhDLEtBQUt3ZTtBQUM1QjBELGNBQWMsTUFBTXVmO0FBQ3BCLE9BQU9BOztBQUdUemUsZUFBZTBlLGVBQWUxOUIsTUFBTTtBQUNwQ2szQixJQUFJbDNCLFFBQVErZSxRQUFRMmUsZUFBZTE5Qjs7Ozs7QUM1RHJDLElBQUloRSxPQUFPO0FBQ1gsSUFBSXllLE9BQU87QUFDWCxJQUFJd0UsaUJBQWlCO0FBQ3JCLElBQUlmLGdCQUFnQjtBQW9DcEIxRSxPQUFPQyxVQUFVLDJCQUEyQnlkLEtBQUtsM0IsTUFBTXU5QixRQUFRO0FBQzdELElBQUlJLE9BQU9odEIsT0FBTzRJLHlCQUF5QjJkLEtBQUtsM0IsT0FDNUM0OUIsU0FBUyxZQUFZO0FBRXpCLElBQUlELFFBQVEsZUFBZSxPQUFPQSxLQUFLejRCLEtBQ3JDMDRCLFNBQVNELEtBQUt6NEI7QUFFaEJ5TCxPQUFPeUosZUFBZThjLEtBQUtsM0IsTUFDekI7QUFBRWtGLEtBQUsscUNBQXFDO0FBZ0J4QyxJQUFJLENBQUMrWixvQkFBb0IsQ0FBQ3hFLEtBQUssTUFBTSxhQUFhO0FBQ2hEQSxLQUFLLE1BQU0sUUFBUW9qQjs7QUFNckIsSUFBSUMsZUFBZXJqQixLQUFLLE1BQU07QUFDOUJBLEtBQUssTUFBTSxZQUFZO0FBQ3ZCLElBQUl2SCxTQUFTcXFCLE9BQU9LLFFBQVEzakIsS0FBSztBQUNqQ1EsS0FBSyxNQUFNLFlBQVlxakI7QUFFdkIsSUFBSTVxQixXQUFXbFUsV0FBVztBQUN4QixPQUFPa1U7O0FBR1QsSUFBSXVxQixlQUFlLElBQUl6aEMsS0FBS3dlO0FBQzVCMEQsY0FBYyxNQUFNdWY7QUFDcEIsT0FBT0E7O0FBRVRwd0IsY0FBYzs7Ozs7O0FDbkZwQixJQUFJMlIsaUJBQWlCO0FBQ3JCLElBQUloakIsT0FBTztBQUNYLElBQUl5ZSxPQUFPO0FBQ1gsSUFBSXNFLFVBQVU7QUFDZCxJQUFJYixnQkFBZ0I7QUFvQ3BCMUUsT0FBT0MsVUFBVSx5QkFBeUJ5ZCxLQUFLbDNCLE1BQU1pbUIsUUFBUTtBQUMzRCxJQUFJOFgsVUFBVTdHLElBQUlsM0IsT0FDZDQ5QixTQUFTLFlBQVk7QUFDckIsTUFBTSxJQUFJcmdCLE1BQU12ZCxPQUFPOztBQUczQixJQUFJKzlCLFdBQVcsZUFBZSxPQUFPQSxTQUNuQ0gsU0FBU0c7QUFFWCxJQUFJQywyQkFBMkIsWUFBWTtBQWF6QyxJQUFJLENBQUN2akIsS0FBSyxNQUFNLGFBQWE7QUFDM0JBLEtBQUssTUFBTSxRQUFRdWpCOztBQU1yQixJQUFJRixlQUFlcmpCLEtBQUssTUFBTTtBQUM5QkEsS0FBSyxNQUFNLFlBQVk7QUFDdkIsSUFBSXZILFNBQVMrUyxPQUFPMlgsUUFBUXRhLE1BQU0sTUFBTXhkO0FBQ3hDMlUsS0FBSyxNQUFNLFlBQVlxakI7QUFFdkIsSUFBSTVxQixXQUFXbFUsV0FBVztBQUN4QixPQUFPa1U7O0FBR1QsSUFBSXVxQixlQUFlLElBQUl6aEMsS0FBS3dlO0FBQzVCMEQsY0FBYyxNQUFNdWY7QUFDcEIsT0FBT0E7O0FBR1R6ZSxlQUFlZ2YsMEJBQTBCaCtCLE1BQU07QUFDL0NrM0IsSUFBSWwzQixRQUFRK2UsUUFBUWlmLDBCQUEwQmgrQjs7Ozs7QUNoRmhELElBQUlnZixpQkFBaUI7QUFDckIsSUFBSWhqQixPQUFPO0FBQ1gsSUFBSXllLE9BQU87QUFDWCxJQUFJc0UsVUFBVTtBQUNkLElBQUliLGdCQUFnQjtBQU9wQixJQUFJK2Ysa0JBQWtCLE9BQU90dEIsT0FBT3V0QixtQkFBbUI7QUFJdkQsSUFBSUMsU0FBUyxZQUFXO0FBQ3hCLElBQUlDLGVBQWV6dEIsT0FBTzB0QixvQkFBb0JGLFFBQVFHLE9BQU8sVUFBU3QrQixNQUFNO0FBQzFFLElBQUl1K0IsV0FBVzV0QixPQUFPNEkseUJBQXlCNGtCLFFBQVFuK0I7QUFNdkQsSUFBSSxPQUFPdStCLGFBQWEsVUFDdEIsT0FBTztBQUVULE9BQU8sQ0FBQ0EsU0FBU2x4Qjs7QUFJbkIsSUFBSTRNLE9BQVFrakIsU0FBUzlrQixVQUFVNEIsTUFDM0JxSixRQUFRNlosU0FBUzlrQixVQUFVaUw7QUErQi9COUosT0FBT0MsVUFBVSw0QkFBNEJ5ZCxLQUFLbDNCLE1BQU1pbUIsUUFBUXZHLGtCQUFrQjtBQUNoRixJQUFJLE9BQU9BLHFCQUFxQixZQUFZO0FBQzFDQSxtQkFBbUIsWUFBWTs7QUFHakMsSUFBSThlLG9CQUFvQjtBQUNwQnZZLFFBQVFBO0FBQ1J2RyxrQkFBa0JBOztBQUl0QixJQUFJLENBQUN3WCxJQUFJdUgsV0FBVztBQUNsQnZILElBQUl1SCxZQUFZOztBQUVsQnZILElBQUl1SCxVQUFVeitCLFFBQVF3K0I7QUFFdEI3dEIsT0FBT3lKLGVBQWU4YyxLQUFLbDNCLE1BQ3pCO0FBQUVrRixLQUFLLGlDQUFpQztBQUNwQ3M1QixrQkFBa0I5ZSxpQkFBaUJ6RixLQUFLO0FBRXhDLElBQUl5a0IseUJBQXlCLFlBQVk7QUFnQnZDLElBQUksQ0FBQ2prQixLQUFLLE1BQU0sYUFBYTtBQUMzQkEsS0FBSyxNQUFNLFFBQVFpa0I7O0FBR3JCLElBQUl4ckIsU0FBU3NyQixrQkFBa0J2WSxPQUFPM0MsTUFBTSxNQUFNeGQ7QUFDbEQsSUFBSW9OLFdBQVdsVSxXQUFXO0FBQ3hCLE9BQU9rVTs7QUFHVCxJQUFJdXFCLGVBQWUsSUFBSXpoQyxLQUFLd2U7QUFDNUIwRCxjQUFjLE1BQU11ZjtBQUNwQixPQUFPQTs7QUFHVHplLGVBQWUwZix3QkFBd0IxK0IsTUFBTTtBQUc3QyxJQUFJaStCLGlCQUFpQjtBQUVuQixJQUFJNWxCLFlBQVkxSCxPQUFPK00sT0FBTztBQUU5QnJGLFVBQVU0QixPQUFPQTtBQUNqQjVCLFVBQVVpTCxRQUFRQTtBQUNsQjNTLE9BQU91dEIsZUFBZVEsd0JBQXdCcm1CO09BRzNDO0FBQ0gsSUFBSXNtQixnQkFBZ0JodUIsT0FBTzB0QixvQkFBb0JuSDtBQUMvQ3lILGNBQWM5aEIsUUFBUSxVQUFVK2hCLGNBQWM7QUFDNUMsSUFBSVIsYUFBYTVoQixRQUFRb2lCLGtCQUFrQixDQUFDLEdBQUc7QUFDN0M7O0FBR0YsSUFBSUMsS0FBS2x1QixPQUFPNEkseUJBQXlCMmQsS0FBSzBIO0FBQzlDanVCLE9BQU95SixlQUFlc2tCLHdCQUF3QkUsY0FBY0M7OztBQUloRTNnQixjQUFjLE1BQU13Z0I7QUFDcEIsT0FBTzNmLFFBQVEyZjs7QUFFakJyeEIsY0FBYzs7Ozs7O0FDL0lwQixJQUFJclIsT0FBTztBQUNYLElBQUlraUIsZ0JBQWdCO0FBbUNwQjFFLE9BQU9DLFVBQVUsa0NBQWtDeWQsS0FBS2wzQixNQUFNaW1CLFFBQVF2RyxrQkFBa0I7QUFDdEYsSUFBSThlLG9CQUFvQnRILElBQUl1SCxVQUFVeitCO0FBRXRDLElBQUk4K0Isb0JBQW9CTixrQkFBa0I5ZTtBQUMxQzhlLGtCQUFrQjllLG1CQUFtQiw0Q0FBNEM7QUFDL0UsSUFBSXhNLFNBQVN3TSxpQkFBaUJvZixtQkFBbUI3a0IsS0FBSztBQUN0RCxJQUFJL0csV0FBV2xVLFdBQVc7QUFDeEIsT0FBT2tVOztBQUdULElBQUl1cUIsZUFBZSxJQUFJemhDLEtBQUt3ZTtBQUM1QjBELGNBQWMsTUFBTXVmO0FBQ3BCLE9BQU9BOztBQUdULElBQUlNLFVBQVVTLGtCQUFrQnZZO0FBQ2hDdVksa0JBQWtCdlksU0FBUyw2Q0FBNkM7QUFDdEUsSUFBSS9TLFNBQVMrUyxPQUFPOFgsU0FBU3phLE1BQU0sTUFBTXhkO0FBQ3pDLElBQUlvTixXQUFXbFUsV0FBVztBQUN4QixPQUFPa1U7O0FBR1QsSUFBSXVxQixlQUFlLElBQUl6aEMsS0FBS3dlO0FBQzVCMEQsY0FBYyxNQUFNdWY7QUFDcEIsT0FBT0E7Ozs7OztBQ3hEWCxJQUFJemYsVUFBVTtBQWtCZHhFLE9BQU9DLFVBQVUsMEJBQTBCdmEsR0FBRzJLLEdBQUc7QUFDL0MsT0FBT21VLFFBQVE5ZSxLQUFLOGUsUUFBUW5VLEtBQUssQ0FBQyxJQUFJOzs7OztBQ1R4QzJQLE9BQU9DLFVBQVUseUNBQXlDaFksS0FBSztBQUM3RCxJQUFJLE9BQU9rUCxPQUFPb3VCLDBCQUEwQixZQUFZLE9BQU87QUFFL0QsT0FBT3B1QixPQUFPb3VCLHNCQUFzQnQ5QixLQUFLNjhCLE9BQU8sVUFBVVUsS0FBSztBQUM3RCxPQUFPcnVCLE9BQU80SSx5QkFBeUI5WCxLQUFLdTlCLEtBQUtqVzs7Ozs7O0FDZHJELElBQUluSyxrQ0FBa0M7QUFnQnRDcEYsT0FBT0MsVUFBVSxvQ0FBb0NoWSxLQUFLO0FBQ3hELE9BQU9rUCxPQUFPQyxLQUFLblAsS0FBS2dPLE9BQU9tUCxnQ0FBZ0NuZDs7Ozs7QUMzQmpFO0FBOEJBLDRCQUE0Qnc5QixRQUFRamEsV0FBVztBQUM3QyxPQUFPQSxxQkFBcUJ6SCxTQUFTMGhCLFdBQVdqYTs7QUFtQmxELCtCQUErQmlhLFFBQVFqYSxXQUFXO0FBQ2hELElBQUlBLHFCQUFxQnpILE9BQU87QUFFOUIsT0FBTzBoQixPQUFPOS9CLGdCQUFnQjZsQixVQUFVN2xCLGVBQWU4L0Isa0JBQWtCamEsVUFBVTdsQjtPQUM5RSxJQUFJNmxCLFVBQVUzTSxxQkFBcUJrRixTQUFTeUgsY0FBY3pILE9BQU87QUFFdEUsT0FBTzBoQixPQUFPOS9CLGdCQUFnQjZsQixhQUFhaWEsa0JBQWtCamE7O0FBRy9ELE9BQU87O0FBaUJULDJCQUEyQmlhLFFBQVFDLFlBQVk7QUFDN0MsSUFBSUMsbUJBQW1CLE9BQU9GLFdBQVcsV0FBV0EsU0FBU0EsT0FBT2hpQjtBQUNwRSxJQUFJaWlCLHNCQUFzQmpqQixRQUFRO0FBQ2hDLE9BQU9pakIsV0FBV3pnQyxLQUFLMGdDO09BQ2xCLElBQUksT0FBT0QsZUFBZSxVQUFVO0FBQ3pDLE9BQU9DLGlCQUFpQjNpQixRQUFRMGlCLGdCQUFnQixDQUFDOztBQUduRCxPQUFPOztBQWVULElBQUk5QixvQkFBb0I7QUFDeEIseUJBQXlCZ0MsZUFBZTtBQUN0QyxJQUFJcC9CLE9BQU87QUFDWCxJQUFJLE9BQU9vL0IsY0FBY3AvQixTQUFTLGFBQWE7QUFFN0MsSUFBSTRiLFFBQVFPLE9BQU9pakIsZUFBZXhqQixNQUFNd2hCO0FBQ3hDLElBQUl4aEIsT0FBTztBQUNUNWIsT0FBTzRiLE1BQU07O09BRVY7QUFDTDViLE9BQU9vL0IsY0FBY3AvQjs7QUFHdkIsT0FBT0E7O0FBY1QsNEJBQTRCZ2xCLFdBQVc7QUFDckMsSUFBSXFhLGtCQUFrQnJhO0FBQ3RCLElBQUlBLHFCQUFxQnpILE9BQU87QUFDOUI4aEIsa0JBQWtCQyxnQkFBZ0J0YSxVQUFVN2xCO09BQ3ZDLElBQUksT0FBTzZsQixjQUFjLFlBQVk7QUFJMUNxYSxrQkFBa0JDLGdCQUFnQnRhLFdBQVdoSyxVQUN6Q3NrQixnQkFBZ0IsSUFBSXRhOztBQUcxQixPQUFPcWE7O0FBZ0JULG9CQUFvQnJhLFdBQVc7QUFDN0IsSUFBSTFGLE1BQU07QUFDVixJQUFJMEYsYUFBYUEsVUFBVS9ILFNBQVM7QUFDbENxQyxNQUFNMEYsVUFBVS9IO09BQ1gsSUFBSSxPQUFPK0gsY0FBYyxVQUFVO0FBQ3hDMUYsTUFBTTBGOztBQUdSLE9BQU8xRjs7QUFHVDlGLE9BQU9DLFVBQVU7QUFDZmtNLG9CQUFvQkE7QUFDcEJ2RSx1QkFBdUJBO0FBQ3ZCMkUsbUJBQW1CQTtBQUNuQmpJLFlBQVlBO0FBQ1owSCxvQkFBb0JBOzs7OztBQzFLdEIsSUFBSXhvQixTQUFTO0FBQ2IsSUFBSXlkLE9BQU87QUFDWCxJQUFJb2MsZ0JBQWdCO0FBQ3BCLElBQUk1WCxpQkFBaUI7QUEyQnJCLElBQUlzZ0IsV0FBVyxDQUFDLFdBQVcsYUFBYSxRQUFRO0FBRWhEL2xCLE9BQU9DLFVBQVUsaUJBQWlCaFksS0FBSys5Qix3QkFBd0I7QUFDN0QsSUFBSSxDQUFDdmdCLGtCQUFrQixPQUFPeGQ7QUFFOUIsT0FBTyxJQUFJZytCLE1BQU1oK0IsS0FBSztBQUNwQnlELEtBQUsscUJBQXFCaUQsUUFBUTJTLFVBQVU7QUFLMUMsSUFBSSxPQUFPQSxhQUFhLFlBQ3BCOWQsT0FBT29pQixrQkFBa0I1QyxRQUFRMUIsY0FBYyxDQUFDLEtBQ2hELENBQUM0a0IsUUFBUTllLElBQUl6WSxRQUFRMlMsV0FBVztBQUVsQyxJQUFJMGtCLHdCQUF3QjtBQUMxQixNQUFNamlCLE1BQU0sNEJBQTRCaWlCLHlCQUF5QixNQUMvRDFrQixXQUFXLHFDQUNYMGtCLHlCQUF5Qjs7QUFHN0IsSUFBSUcsb0JBQW9COUksY0FBYzF1QixRQUFRbTJCLE9BQU8sVUFBU3hqQixVQUFVO0FBQ3RFLE9BQU8sQ0FBQ25LLE9BQU8wSCxVQUFVOEssZUFBZXJJLGFBQ3RDeWtCLFNBQVMvaUIsUUFBUTFCLGNBQWMsQ0FBQztHQUNqQ2dLLEtBQUssVUFBUzVsQixHQUFHMkssR0FBRztBQUNyQixPQUFPKzFCLGVBQWU5a0IsVUFBVTViLEtBQUswZ0MsZUFBZTlrQixVQUFValI7O0FBR2hFLElBQUk4MUIsa0JBQWtCMWhDLFVBQ2xCMmhDLGVBQWVELGtCQUFrQixJQUFJN2tCLFlBQVksR0FBRztBQUd0RCxNQUFNeUMsTUFBTSw0QkFBNEJ6QyxXQUN0QyxxQkFBcUI2a0Isa0JBQWtCLEtBQUs7T0FDekM7QUFDTCxNQUFNcGlCLE1BQU0sNEJBQTRCekM7OztBQWdCNUMsSUFBSXlrQixTQUFTL2lCLFFBQVExQixjQUFjLENBQUMsS0FBSyxDQUFDTCxLQUFLdFMsUUFBUSxhQUFhO0FBQ2xFc1MsS0FBS3RTLFFBQVEsUUFBUTAzQjs7QUFHdkIsT0FBT0gsUUFBUXg2QixJQUFJaUQsUUFBUTJTOzs7O0FBY2pDLHdCQUF3QmdsQixNQUFNQyxNQUFNQyxNQUFNO0FBQ3hDLElBQUksQ0FBQ0EsTUFBTTtBQUlUQSxPQUFPO0FBQ1AsU0FBUy9nQyxJQUFJLEdBQUdBLEtBQUs2Z0MsS0FBSzdoQyxRQUFRZ0IsS0FBSztBQUNyQytnQyxLQUFLL2dDLEtBQUs7OztBQUlkLElBQUksQ0FBQytnQyxLQUFLRixLQUFLN2hDLFdBQVcsQ0FBQytoQyxLQUFLRixLQUFLN2hDLFFBQVE4aEMsS0FBSzloQyxTQUFTO0FBQ3pELElBQUk2aEMsS0FBSzdoQyxXQUFXLEtBQUs4aEMsS0FBSzloQyxXQUFXLEdBQUc7QUFDMUMraEMsS0FBS0YsS0FBSzdoQyxRQUFROGhDLEtBQUs5aEMsVUFBVXNvQixLQUFLMFosSUFBSUgsS0FBSzdoQyxRQUFROGhDLEtBQUs5aEM7T0FDdkQ7QUFDTCtoQyxLQUFLRixLQUFLN2hDLFFBQVE4aEMsS0FBSzloQyxVQUFVc29CLEtBQUsyWixJQUNwQ04sZUFBZUUsS0FBS3B4QixNQUFNLEdBQUcsQ0FBQyxJQUFJcXhCLE1BQU1DLFFBQVEsR0FDaERKLGVBQWVFLE1BQU1DLEtBQUtyeEIsTUFBTSxHQUFHLENBQUMsSUFBSXN4QixRQUFRLEdBQ2hESixlQUFlRSxLQUFLcHhCLE1BQU0sR0FBRyxDQUFDLElBQUlxeEIsS0FBS3J4QixNQUFNLEdBQUcsQ0FBQyxJQUFJc3hCLFFBQ25ELENBQUNGLEtBQUtweEIsTUFBTSxDQUFDLE9BQU9xeEIsS0FBS3J4QixNQUFNLENBQUMsS0FBSyxJQUFJOzs7QUFLakQsT0FBT3N4QixLQUFLRixLQUFLN2hDLFFBQVE4aEMsS0FBSzloQzs7Ozs7QUMzSGhDLElBQUlqQixTQUFTO0FBRWIsSUFBSW1qQyxlQUFleHZCLE9BQU80SSx5QkFBeUIsWUFBWSxJQUFJO0FBMENuRUMsT0FBT0MsVUFBVSx3QkFBeUI4QyxJQUFJNmpCLGVBQWVDLGFBQWE7QUFDeEUsSUFBSSxDQUFDRixhQUFhOXlCLGNBQWMsT0FBT2tQO0FBRXZDNUwsT0FBT3lKLGVBQWVtQyxJQUFJLFVBQVU7QUFDbENyWCxLQUFLLFlBQVk7QUFDZixJQUFJbTdCLGFBQWE7QUFDZixNQUFNOWlCLE1BQU0sNEJBQTRCNmlCLGdCQUFnQixpQkFDdEQsaUVBQ0FBLGdCQUFnQixhQUFhQSxnQkFBZ0I7O0FBR2pELE1BQU03aUIsTUFBTSw0QkFBNEI2aUIsZ0JBQWdCLGlCQUN0RCxnQ0FBZ0NBLGdCQUFnQjs7O0FBSXRELE9BQU83akI7Ozs7O0FDNURULElBQUl2ZixTQUFTO0FBbUJid2MsT0FBT0MsVUFBVSwwQkFBMEI7QUFDekMsT0FBT3pjLE9BQU9taUIsWUFDWixPQUFPc2dCLFVBQVUsZUFDakIsT0FBT0MsWUFBWTs7Ozs7QUNKdkIsZUFBZWovQixPQUFPO0FBR3BCLE9BQU9BLFVBQVVBOztBQUluQitZLE9BQU9DLFVBQVVrUCxPQUFPbmMsU0FBU0E7Ozs7QUNOakNnTixPQUFPQyxVQUFVLHVCQUF1QjhkLFFBQVE7QUFDOUMsSUFBSXJrQixTQUFTdkMsT0FBTzB0QixvQkFBb0I5RztBQUV4QyxxQkFBcUJ6YyxVQUFVO0FBQzdCLElBQUk1SCxPQUFPc0osUUFBUTFCLGNBQWMsQ0FBQyxHQUFHO0FBQ25DNUgsT0FBT3ZHLEtBQUttTzs7O0FBSWhCLElBQUl3bEIsUUFBUTN2QixPQUFPK2tCLGVBQWU2QjtBQUNsQyxPQUFPK0ksVUFBVSxNQUFNO0FBQ3JCM3ZCLE9BQU8wdEIsb0JBQW9CaUMsT0FBT3pqQixRQUFReUI7QUFDMUNnaUIsUUFBUTN2QixPQUFPK2tCLGVBQWU0Szs7QUFHaEMsT0FBT3B0Qjs7Ozs7QUNmVHNHLE9BQU9DLFVBQVUsaUNBQWlDOGQsUUFBUTtBQUN4RCxJQUFJcmtCLFNBQVM7QUFDYixTQUFTbFQsUUFBUXUzQixRQUFRO0FBQ3ZCcmtCLE9BQU92RyxLQUFLM007O0FBRWQsT0FBT2tUIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIkBkaW1lbnNpb25zID0gaW1wb3J0ICcuL3NpbXVsYXRlLmNvZmZlZSdcbmNvbnNvbGUubG9nIEBkaW1lbnNpb25zXG5ARG9tID0gQERPTSA9IHdpbmRvdy5xdWlja2RvbVxubW9jaGEuc2V0dXAoJ3RkZCcpXG5tb2NoYS5zbG93KDQwMClcbm1vY2hhLnRpbWVvdXQoMTIwMDApXG5tb2NoYS5iYWlsKCkgdW5sZXNzIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZVxuY2hhaSA9IGltcG9ydCAnY2hhaSdcbmNoYWkudXNlIGltcG9ydCAnY2hhaS1zdHlsZSdcbmNoYWkuY29uZmlnLnRydW5jYXRlVGhyZXNob2xkID0gMWUzXG57ZXhwZWN0fSA9IGNoYWlcblxuc2FuZGJveCA9IG51bGxcbnJlc3RhcnRTYW5kYm94ID0gKCktPlxuXHRzYW5kYm94LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoc2FuZGJveCkgaWYgc2FuZGJveFxuXHRzYW5kYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0c2FuZGJveC5pZCA9ICdzYW5kYm94J1xuXHRzYW5kYm94LnNldEF0dHJpYnV0ZSAnc3R5bGUnLCAnYm9yZGVyOjFweCBzb2xpZDsgcGFkZGluZzoyMHB4OyBib3gtc2l6aW5nOmJvcmRlci1ib3gnXG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2FuZGJveClcblxuY2hlY2tDaGlsZFN0cnVjdHVyZSA9IChtYWluKS0+IChjaGlsZHJlbi4uLiktPlxuXHRleHBlY3QobWFpbi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKGNoaWxkcmVuLmxlbmd0aClcblx0Zm9yIGNoaWxkLGluZGV4IGluIGNoaWxkcmVuXG5cdFx0ZXhwZWN0KG1haW4uY2hpbGRyZW5baW5kZXhdKS50by5lcXVhbChjaGlsZClcblx0XHRleHBlY3QoY2hpbGQuZWwucGFyZW50Tm9kZSkudG8uZXF1YWwobWFpbi5lbClcblx0XHRleHBlY3QoY2hpbGQucGFyZW50KS50by5lcXVhbChtYWluKVxuXHRyZXR1cm5cblxuXG5zdWl0ZSBcIlF1aWNrRG9tXCIsICgpLT5cblx0c2V0dXAocmVzdGFydFNhbmRib3gpXG5cblx0dGVzdCBcIlZlcnNpb24gUHJvcGVydHlcIiwgKCktPlxuXHRcdHBhY2thZ2VWZXJzaW9uID0gKGltcG9ydCAnLi4vcGFja2FnZSAkIHZlcnNpb24nKVxuXHRcdGV4cGVjdChEb20udmVyc2lvbikudG8uZXF1YWwocGFja2FnZVZlcnNpb24pXG5cblxuXHRzdWl0ZSBcIkVsZW1lbnQgQ3JlYXRpb25cIiwgKCktPlxuXHRcdHRlc3QgXCJCYXNpYyBDcmVhdGlvblwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20oJ2RpdicpXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdikudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2LmVsKS50by5lcXVhbCAnb2JqZWN0J1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uYmUuaW5zdGFuY2VPZiB3aW5kb3cuSFRNTERpdkVsZW1lbnRcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5iZS51bmRlZmluZWRcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAwXG5cblxuXHRcdHRlc3QgXCJTaG9ydGN1dHNcIiwgKCktPlxuXHRcdFx0ZXhwZWN0KERvbS5hKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnYScpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5saW5rKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnYScpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5hbmNob3IoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdhJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmRpdigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2RpdicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS50ZXh0KCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgndGV4dCcpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5zcGFuKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnc3BhbicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5oNCgpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2g0JykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmhlYWRlcigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2hlYWRlcicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5mb290ZXIoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdmb290ZXInKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uc2VjdGlvbigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ3NlY3Rpb24nKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uYnV0dG9uKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnYnV0dG9uJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmlucHV0KCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnaW5wdXQnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdCMgZXhwZWN0KERvbS5tYWluKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnbWFpbicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0dHlwZXMgPSBbJ2EnLCdkaXYnLCd0ZXh0Jywnc3BhbicsJ2g0JywnaGVhZGVyJywnZm9vdGVyJywnc2VjdGlvbicsJ2J1dHRvbicsJ2lucHV0J11cblx0XHRcdGZvciB0eXBlIGluIHR5cGVzXG5cdFx0XHRcdGV4cGVjdChEb21bdHlwZV0oKS5lbC5jb25zdHJ1Y3Rvci5uYW1lKS5ub3QudG8uY29udGFpbignVW5rbm93bicpXG5cdFx0XHRyZXR1cm5cblxuXG5cdFx0dGVzdCBcIkJhc2ljIG9wdGlvbnNcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoY2xhc3M6J2FiYy0xMjMnLCBwcm9wczp7J2FiYyc6MTIzLCAnZGVmJzo0NTZ9KVxuXHRcdFx0QiA9IERvbS5kaXYoaWQ6J0InLCBjbGFzc05hbWU6J2FiYy0xMjMnLCBhdHRyczp7J2RhdGEtYWJjJzoxMjMsICdkYXRhLWRlZic6NDU2fSlcblx0XHRcdEMgPSBEb20uaW5wdXQodHlwZTondGV4dCcsIG5hbWU6J2FiYycsIHZhbHVlOidoZWxsbycpXG5cdFx0XHREID0gRG9tLmlucHV0KHR5cGU6J2NoZWNrYm94JywgY2hlY2tlZDp0cnVlKVxuXHRcdFx0RSA9IERvbS5vcHRpb24obmFtZTonYWJjJywgdmFsdWU6J2hlbGxvJywgc2VsZWN0ZWQ6dHJ1ZSlcblx0XHRcdEYgPSBEb20ubGluayhocmVmOidodHRwczovL2dvb2dsZS5jb20vJylcblx0XHRcdEcgPSBEb20uYW5jaG9yKHVybDonaHR0cHM6Ly9nb29nbGUuY29tLycpXG5cdFx0XHRIID0gRG9tLnRleHQoJ1NvbWUgdGV4dCcpXG5cdFx0XHRJID0gRG9tLmltZyhzcmM6J2h0dHBzOi8vZ29vZ2xlLmNvbS8nKVxuXHRcdFx0SiA9IERvbS5kaXYocmVsYXRlZEluc3RhbmNlOiBvYmo9e2E6MX0pXG5cblx0XHRcdGV4cGVjdChBLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ2FiYy0xMjMnKVxuXHRcdFx0ZXhwZWN0KEEuZWwuYWJjKS50by5lcXVhbCgxMjMpXG5cdFx0XHRleHBlY3QoQS5lbC5kZWYpLnRvLmVxdWFsKDQ1Nilcblx0XHRcdGV4cGVjdChCLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ2FiYy0xMjMnKVxuXHRcdFx0ZXhwZWN0KEIuZWwuaWQpLnRvLmVxdWFsKCdCJylcblx0XHRcdGV4cGVjdChCLmVsLmdldEF0dHJpYnV0ZSgnZGF0YS1hYmMnKSkudG8uZXF1YWwoJzEyMycpXG5cdFx0XHRleHBlY3QoQi5lbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVmJykpLnRvLmVxdWFsKCc0NTYnKVxuXHRcdFx0ZXhwZWN0KEIuZWwuZGF0YXNldC5hYmMpLnRvLmVxdWFsKCcxMjMnKSBpZiBCLmVsLmRhdGFzZXRcblx0XHRcdGV4cGVjdChDLmVsLnR5cGUpLnRvLmVxdWFsKCd0ZXh0Jylcblx0XHRcdGV4cGVjdChDLmVsLm5hbWUpLnRvLmVxdWFsKCdhYmMnKVxuXHRcdFx0ZXhwZWN0KEMuZWwudmFsdWUpLnRvLmVxdWFsKCdoZWxsbycpXG5cdFx0XHRleHBlY3QoRC5lbC5jaGVja2VkKS50by5lcXVhbCh0cnVlKVxuXHRcdFx0ZXhwZWN0KEUuZWwubmFtZSkudG8uZXF1YWwoJ2FiYycpXG5cdFx0XHRleHBlY3QoRS5lbC5zZWxlY3RlZCkudG8uZXF1YWwodHJ1ZSlcblx0XHRcdGV4cGVjdChGLmVsLmhyZWYpLnRvLmVxdWFsKCdodHRwczovL2dvb2dsZS5jb20vJylcblx0XHRcdGV4cGVjdChHLmVsLmhyZWYpLnRvLmVxdWFsKCdodHRwczovL2dvb2dsZS5jb20vJylcblx0XHRcdGV4cGVjdChILmVsLm5vZGVUeXBlKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KEguZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIHRleHQnKVxuXHRcdFx0ZXhwZWN0KEkuZWwuc3JjKS50by5lcXVhbCgnaHR0cHM6Ly9nb29nbGUuY29tLycpXG5cdFx0XHRleHBlY3QoSi5yZWxhdGVkKS50by5lcXVhbChvYmopXG5cdFx0XHRleHBlY3QoSi5vcHRpb25zLnJlbGF0ZWQpLnRvLmVxdWFsKG9iailcblxuXG5cdFx0dGVzdCBcIkNyZWF0aW9uIHcvIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KG51bGwsICdTb21lIHRleHQnKVxuXHRcdFx0QiA9IERvbS5kaXYobnVsbCwgRG9tLnNwYW4oKSwgJ1NvbWUgdGV4dCcsIERvbS5zcGFuKCkpXG5cblx0XHRcdGV4cGVjdChBLmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEEuZWwuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KEEuZWwuY2hpbGROb2Rlc1swXS5ub2RlVHlwZSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChBLmVsLmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIHRleHQnKVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzWzBdLm5vZGVUeXBlKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlc1swXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzWzFdLm5vZGVUeXBlKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlc1sxXS50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgdGV4dCcpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzWzJdLm5vZGVUeXBlKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlc1syXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cblxuXHRcdHRlc3QgXCJBcnJheSBzeW50YXhcIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9IERvbShcblx0XHRcdFx0WydzZWN0aW9uJywge3N0eWxlOmRpc3BsYXk6J2lubGluZSd9LCBcblx0XHRcdFx0XHRbJ2RpdicsIG51bGwsICdjaGlsZEEnXVxuXHRcdFx0XHRcdFsnc3BhbicsIG51bGwsIFxuXHRcdFx0XHRcdFx0WydzdHJvbmcnLCBudWxsLCAnY2hpbGRCJ11cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCAnY2hpbGRDJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCBudWxsLCAnY2hpbGRDXzEnXVxuXHRcdFx0XHRcdFx0WydzcGFuJywgbnVsbCwgJ2NoaWxkQ18yJ11cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24pLm5vdC50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5yYXcpLnRvLmhhdmUuc3R5bGUoJ2Rpc3BsYXknLCAnaW5saW5lJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzFdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzJdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzFdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzJdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLnRleHQpLnRvLmVxdWFsKCdjaGlsZEEnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMV0udGV4dCkudG8uZXF1YWwoJ2NoaWxkQicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsyXS50ZXh0KS50by5lcXVhbCgnY2hpbGRDY2hpbGRDXzFjaGlsZENfMicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsyXS5jaGlsZHJlblsxXS50ZXh0KS50by5lcXVhbCgnY2hpbGRDXzEnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMl0uY2hpbGRyZW5bMl0udGV4dCkudG8uZXF1YWwoJ2NoaWxkQ18yJylcblxuXG5cdFx0dGVzdCBcIkV4aXN0aW5nIEVsZW1lbnRcIiwgKCktPlxuXHRcdFx0ZGl2UmF3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdEEgPSBEb20oZGl2UmF3KVxuXHRcdFx0QiA9IERvbShkaXZSYXcpXG5cdFx0XHRDID0gRG9tKEEpXG5cblx0XHRcdGV4cGVjdChBLmVsKS50by5lcXVhbChkaXZSYXcpXG5cdFx0XHRleHBlY3QoQi5lbCkudG8uZXF1YWwoZGl2UmF3KVxuXHRcdFx0ZXhwZWN0KEMuZWwpLnRvLmVxdWFsKGRpdlJhdylcblx0XHRcdGV4cGVjdChBKS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEIpLnRvLmVxdWFsKEMpXG5cdFx0XHRleHBlY3QoQykudG8uZXF1YWwoZGl2UmF3Ll9xdWlja0VsZW1lbnQpXG5cblxuXHRcdHRlc3QgXCJFeGlzdGluZyBFbGVtZW50IHcvIE9wdGlvbnNcIiwgKCktPlxuXHRcdFx0ZGl2UmF3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdGRpdlJhdy5pZCA9ICdBJ1xuXG5cdFx0XHRkaXYgPSBEb20oZGl2UmF3LCB7aWQ6J0InLCBjbGFzczonYWJjLTEyMyd9KVxuXHRcdFx0ZXhwZWN0KGRpdlJhdy5pZCkudG8uZXF1YWwoJ0InKVxuXHRcdFx0ZXhwZWN0KGRpdlJhdy5jbGFzc05hbWUpLnRvLmVxdWFsKCdhYmMtMTIzJylcblx0XHRcdFxuXHRcdFx0ZGl2ID0gRG9tKGRpdiwge2lkOidDJywgY2xhc3M6J2RlZi00NTYnfSlcblx0XHRcdGV4cGVjdChkaXZSYXcuaWQpLnRvLmVxdWFsKCdDJylcblx0XHRcdGV4cGVjdChkaXZSYXcuY2xhc3NOYW1lKS50by5lcXVhbCgnZGVmLTQ1NicpXG5cblxuXHRcdHRlc3QgXCJFeGlzdGluZyBFbGVtZW50IGZyb20gYXJyYXktbGlrZSBvYmplY3RzXCIsICgpLT5cblx0XHRcdHJhd0EgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0cmF3QiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRyYXdDID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKVxuXHRcdFx0cGFyZW50LmFwcGVuZENoaWxkKHJhd0EpOyBwYXJlbnQuYXBwZW5kQ2hpbGQocmF3Qik7IHBhcmVudC5hcHBlbmRDaGlsZChyYXdDKTtcblx0XHRcdEEgPSBEb20oW3Jhd0EsIHJhd0IsIHJhd0NdKVxuXHRcdFx0QiA9IERvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2JykpXG5cdFx0XHRDID0gRG9tKEIpXG5cblx0XHRcdGV4cGVjdChBLmVsKS50by5lcXVhbChyYXdBKVxuXHRcdFx0ZXhwZWN0KEIuZWwpLnRvLmVxdWFsKHJhd0EpXG5cdFx0XHRleHBlY3QoQy5lbCkudG8uZXF1YWwocmF3QSlcblx0XHRcdGV4cGVjdChBKS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEIpLnRvLmVxdWFsKEMpXG5cdFx0XHRleHBlY3QoQykudG8uZXF1YWwocmF3QS5fcXVpY2tFbGVtZW50KVxuXG5cblxuXHRcdHRlc3QgXCJEb2N1bWVudCBub2RlXCIsICgpLT5cblx0XHRcdGRvYyA9IERvbShkb2N1bWVudClcblx0XHRcdGV4cGVjdChkb2MpLm5vdC50by5iZS51bmRlZmluZWRcblx0XHRcdGV4cGVjdChkb2MucmF3KS50by5lcXVhbChkb2N1bWVudClcblx0XHRcdGV4cGVjdChkb2MucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoZG9jLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChEb20oc2FuZGJveCkucGFyZW50cykubm90LnRvLmNvbnRhaW4oZG9jKVxuXHRcdFx0ZXhwZWN0KERvbShzYW5kYm94KS5wYXJlbnRzKS50by5jb250YWluKGRvYy5jaGlsZHJlblswXSlcblxuXG5cdFx0dGVzdCBcIldpbmRvdyBvYmplY3RcIiwgKCktPlxuXHRcdFx0d2luID0gRG9tKHdpbmRvdylcblx0XHRcdGV4cGVjdCh3aW4pLm5vdC50by5iZS51bmRlZmluZWRcblx0XHRcdGV4cGVjdCh3aW4ucmF3IGlzIHdpbmRvdykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KHdpbi5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdCh3aW4uY2hpbGRyZW4pLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdCh3aW4uYXBwZW5kKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qod2luLmh0bWwpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdCh3aW4uc3R5bGUpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChEb20oc2FuZGJveCkucGFyZW50cykubm90LnRvLmNvbnRhaW4od2luKVxuXG5cblx0XHR0ZXN0IFwiQ3JlYXRpb24gdy8gc3R5bGluZ1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHQnd2lkdGgnOiAnMTBweCdcblx0XHRcdFx0J2hlaWdodCc6IDE1XG5cdFx0XHRcdCdsYW1lbyc6ICcxOXB4J1xuXHRcdFx0XHQnYmFja2dyb3VuZC1jb2xvcic6ICdibHVlJ1xuXHRcdFx0XHQnYmFja2dyb3VuZFNpemUnOiAnY292ZXInXG5cblx0XHRcdHNhbmRib3guYXBwZW5kQ2hpbGQoZGl2LmVsKVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlLmxhbWVvKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmxhbWVvKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCAnMTBweCdcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwgJzE1cHgnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLm5vdC50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuYmFja2dyb3VuZFNpemUpLnRvLmVxdWFsICdjb3ZlcidcblxuXG5cdFx0dGVzdCBcIlNWRyBlbGVtZW50cyBjYW4gYmUgY3JlYXRlZCB2aWEgYSAnKicgaW4gdGhlIGVsZW1lbnQncyB0eXBlIHN0cmluZ1wiLCAoKS0+XG5cdFx0XHRzdmdCYWQgPSBEb20oJ3N2ZycpLmVsXG5cdFx0XHRzdmdHb29kID0gRG9tKCcqc3ZnJykuZWxcblx0XHRcdHN2Z1BvbHlCYWQgPSBEb20oJ3BvbHlsaW5lJykuZWxcblx0XHRcdHN2Z1BvbHlHb29kID0gRG9tKCcqcG9seWxpbmUnKS5lbFxuXHRcdFx0c3ZnRGl2ID0gRG9tKCcqZGl2JykuZWxcblx0XHRcdHJlZ0RpdiA9IERvbSgnZGl2JykuZWxcblxuXHRcdFx0ZXhwZWN0KHN2Z0JhZCkudG8uYmUuaW5zdGFuY2VPZihIVE1MVW5rbm93bkVsZW1lbnQpXG5cdFx0XHRleHBlY3Qoc3ZnUG9seUJhZCkudG8uYmUuaW5zdGFuY2VPZihIVE1MVW5rbm93bkVsZW1lbnQpXG5cdFx0XHRleHBlY3Qoc3ZnR29vZCkudG8uYmUuaW5zdGFuY2VPZihTVkdTVkdFbGVtZW50KVxuXHRcdFx0ZXhwZWN0KHN2Z1BvbHlHb29kKS50by5iZS5pbnN0YW5jZU9mKFNWR1BvbHlsaW5lRWxlbWVudClcblx0XHRcdCMgZXhwZWN0KHN2Z0RpdikudG8uYmUuaW5zdGFuY2VPZignU1ZHRWxlbWVudCcpXG5cdFx0XHRleHBlY3Qoc3ZnRGl2LmNvbnN0cnVjdG9yKS5ub3QudG8uZXF1YWwocmVnRGl2LmNvbnN0cnVjdG9yKVxuXG5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaHRtbCgpIGFjY2VwdHMgYW4gaHRtbCBzdHJpbmcgd2hpY2ggd291bGQgYmUgcGFyc2VkIGFuZCBjb252ZXJ0ZWQgaW50byBhIFF1aWNrQmF0Y2ggaW5zdGFuY2VcIiwgKCktPlxuXHRcdFx0aHRtbFN0cmluZyA9IFwiXG5cdFx0XHRcdDxkaXY+Zmlyc3RDaGlsZFRleHQ8L2Rpdj48c3Bhbj5zZWNvbmRDaGlsZFRleHQ8L3NwYW4+XG5cdFx0XHRcdHRleHROb2RlXG5cdFx0XHRcdDxzdHJvbmc+YWJjMTIzPC9zdHJvbmc+XG5cdFx0XHRcIlxuXHRcdFx0d2luZG93LmJhdGNoID0gRG9tLmh0bWwoaHRtbFN0cmluZylcblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiBiYXRjaCkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdGV4cGVjdChiYXRjaC5jb25zdHJ1Y3Rvci5uYW1lKS50by5lcXVhbCAnUXVpY2tCYXRjaCdcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50cy5sZW5ndGgpLnRvLmVxdWFsIDRcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1swXS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzFdLnR5cGUpLnRvLmVxdWFsICdzcGFuJ1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzJdLnR5cGUpLnRvLmVxdWFsICd0ZXh0J1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzNdLnR5cGUpLnRvLmVxdWFsICdzdHJvbmcnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbMF0udGV4dCkudG8uZXF1YWwgJ2ZpcnN0Q2hpbGRUZXh0J1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzFdLnRleHQpLnRvLmVxdWFsICdzZWNvbmRDaGlsZFRleHQnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbMl0udGV4dCkudG8uaW5jbHVkZSAndGV4dE5vZGUnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbM10udGV4dCkudG8uZXF1YWwgJ2FiYzEyMydcblxuXG5cdFx0dGVzdCBcIk1ldGhvZC9Qcm9wZXJ0eSBhbGlhc2VzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbSgnZGl2Jylcblx0XHRcdGV4cGVjdChkaXYucmF3KS50by5lcXVhbChkaXYuZWwpXG5cdFx0XHRleHBlY3QoZGl2WzBdKS50by5lcXVhbChkaXYuZWwpXG5cdFx0XHRleHBlY3QoZGl2LmNzcykudG8uZXF1YWwoZGl2LnN0eWxlKVxuXHRcdFx0ZXhwZWN0KGRpdi5yZXBsYWNlV2l0aCkudG8uZXF1YWwoZGl2LnJlcGxhY2UpXG5cdFx0XHRleHBlY3QoZGl2LnJlbW92ZUxpc3RlbmVyKS50by5lcXVhbChkaXYub2ZmKVxuXHRcdFx0ZXhwZWN0KGRpdi5yZW1vdmVMaXN0ZW5lcignZXZlbnRBJykpXG5cblxuXHRcdHRlc3QgXCJ1c2VyLWRlZmluZWQgbWV0aGRvZHMvZ2V0dGVycy9zZXR0ZXJzXCIsICgpLT5cblx0XHRcdGRpdkEgPSBEb20uZGl2KClcblx0XHRcdGRpdkIgPSBEb20uZGl2IG1ldGhvZHM6XG5cdFx0XHRcdHNjcm9sbFRvcDpcblx0XHRcdFx0XHRnZXQ6ICgpLT4gQHJhdy5zY3JvbGxUb3Bcblx0XHRcdFx0d2VpZ2h0OlxuXHRcdFx0XHRcdGdldDogKCktPiBAcmF3LndlaWdodFxuXHRcdFx0XHR2YWx1ZTpcblx0XHRcdFx0XHRnZXQ6ICgpLT4gQHJhdy52YWx1ZVxuXHRcdFx0XHRcdHNldDogKHZhbHVlKS0+IEByYXcudmFsdWUgPSB2YWx1ZVxuXHRcdFx0XHRuYW1lOiB0cnVlXG5cdFx0XHRcdGJpZ0luZGV4OiAoKS0+IEBpbmRleCAqIDEwXG5cblx0XHRcdHNhbmRib3guYXBwZW5kIGRpdkFcblx0XHRcdHNhbmRib3guYXBwZW5kIGRpdkJcblx0XHRcdGRpdkEucmF3LnZhbHVlID0gZGl2Qi5yYXcudmFsdWUgPSAnYWJjJ1xuXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkEuc2Nyb2xsVG9wKS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZCLnNjcm9sbFRvcCkudG8uZXF1YWwgJ251bWJlcidcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2QS52YWx1ZSkudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2Qi52YWx1ZSkudG8uZXF1YWwgJ3N0cmluZydcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2QS5uYW1lKS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZCLm5hbWUpLnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkEuYmlnSW5kZXgpLnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkIuYmlnSW5kZXgpLnRvLmVxdWFsICdmdW5jdGlvbidcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkIuc2Nyb2xsVG9wKS50by5lcXVhbCBkaXZCLnJhdy5zY3JvbGxUb3Bcblx0XHRcdFxuXHRcdFx0ZGl2Qi5yYXcud2VpZ2h0ID0gJzEnXG5cdFx0XHRleHBlY3QoZGl2Qi53ZWlnaHQpLnRvLmVxdWFsICcxJ1xuXHRcdFx0XG5cdFx0XHRkaXZCLndlaWdodCA9ICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdkIud2VpZ2h0KS50by5lcXVhbCAnMSdcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkIudmFsdWUpLnRvLmVxdWFsICdhYmMnXG5cdFx0XHRkaXZCLnZhbHVlID0gJzEyMydcblx0XHRcdGV4cGVjdChkaXZCLnZhbHVlKS50by5lcXVhbCAnMTIzJ1xuXG5cdFx0XHRleHBlY3QoZGl2Qi5iaWdJbmRleCgpKS50by5lcXVhbCBkaXZCLmluZGV4KjEwXG5cblxuXHRzdWl0ZSBcIkV2ZW50c1wiLCAoKS0+XG5cdFx0dGVzdCBcIkV2ZW50cyBjYW4gYmUgbGlzdGVuZWQgdG8gdmlhIHRoZSAub24gbWV0aG9kXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRkaXYub24gJ215Q2xpY2snLCAoZXZlbnQpLT5cblx0XHRcdFx0ZXhwZWN0KHR5cGVvZiBldmVudCkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdFx0ZXhwZWN0KGV2ZW50LnR5cGUpLnRvLmVxdWFsICdteUNsaWNrJ1xuXHRcdFx0XHRlbWl0Q291bnRBKytcblx0XHRcdFxuXG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdFxuXHRcdFx0ZGl2Lm9uICdteUNsaWNrJywgKGV2ZW50KS0+IGVtaXRDb3VudEIrK1xuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgzKVxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCg0KVxuXG5cblx0XHR0ZXN0IFwiRXZlbnRzIGNhbiBiZSBlbWl0dGVkIHZpYSB0aGUgLmVtaXQgbWV0aG9kXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEErK1xuXHRcdFx0ZGl2LmVsLmFkZEV2ZW50TGlzdGVuZXIgJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEIrK1xuXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0XG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDIpXG5cblxuXHRcdHRlc3QgXCJFdmVudCBoYW5kbGVycyBjYW4gYmUgbWFudWFsbHkgaW52b2tlZCB3aXRoIGEgY3VzdG9tIGFyZyB2aWEgdGhlIC5lbWl0UHJpdmF0ZSBtZXRob2RcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSAwXG5cdFx0XHRhcmcgPSBudWxsXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QSsrOyBhcmcgPSBhcmd1bWVudHNbMF1cblx0XHRcdGRpdi5lbC5hZGRFdmVudExpc3RlbmVyICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRCKytcblxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChhcmcpLnRvLmVxdWFsKG51bGwpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0UHJpdmF0ZSgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGFyZykudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdFByaXZhdGUoJ215RXZlbnQnLCAnYWJjMTIzJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoYXJnKS50by5lcXVhbCgnYWJjMTIzJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGFyZykubm90LnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KHR5cGVvZiBhcmcpLnRvLmVxdWFsKCdvYmplY3QnKVxuXG5cblx0XHR0ZXN0IFwiQm9vbGVhbnMgY2FuIGJlIHBhc3NlZCBmb3IgdGhlIDJuZCBhbmQgM3JkIGFyZ3Mgb2YgLmVtaXQgdG8gY29udHJvbCBldmVudC5idWJibGVzIGFuZCBldmVudC5jYW5jZWxhYmxlXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gZW1pdENvdW50QyA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2Lm9uICdldmVudEEnLCAoZXZlbnQpLT4gZW1pdENvdW50QSsrOyBleHBlY3QoZXZlbnQuYnViYmxlcykudG8uYmUudHJ1ZTsgZXhwZWN0KGV2ZW50LmNhbmNlbGFibGUpLnRvLmJlLnRydWVcblx0XHRcdGRpdi5vbiAnZXZlbnRCJywgKGV2ZW50KS0+IGVtaXRDb3VudEIrKzsgZXhwZWN0KGV2ZW50LmJ1YmJsZXMpLnRvLmJlLmZhbHNlOyBleHBlY3QoZXZlbnQuY2FuY2VsYWJsZSkudG8uYmUudHJ1ZVxuXHRcdFx0ZGl2Lm9uICdldmVudEMnLCAoZXZlbnQpLT4gZW1pdENvdW50QysrOyBleHBlY3QoZXZlbnQuYnViYmxlcykudG8uYmUuZmFsc2U7IGV4cGVjdChldmVudC5jYW5jZWxhYmxlKS50by5iZS5mYWxzZVxuXG5cdFx0XHRkaXYuZW1pdCgnZXZlbnRBJyk7IGRpdi5lbWl0KCdldmVudEInLCBmYWxzZSk7IGRpdi5lbWl0KCdldmVudEMnLCBmYWxzZSwgZmFsc2UpO1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRDKS50by5lcXVhbCgxKVxuXG5cblx0XHR0ZXN0IFwiQSBkYXRhIG9iamVjdCBjYW4gYmUgcGFzc2VkIGFzIHRoZSA0dGggYXJnIG9mIC5lbWl0IHdoaWNoIHdpbGwgYmUgZXh0ZW5kZWQgb250byB0aGUgZXZlbnQgb2JqZWN0XCIsICgpLT5cblx0XHRcdGRpdiA9IERPTS5kaXYoKVxuXHRcdFx0ZXZlbnQgPSBudWxsXG5cdFx0XHRkaXYub24gJ21vdXNlZG93bicsIChlKS0+IGV2ZW50ID0gZVxuXG5cdFx0XHRleHBlY3QoZXZlbnQpLnRvLmVxdWFsIG51bGxcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWRvd24nXG5cdFx0XHRleHBlY3QoZXZlbnQudHlwZSkudG8uZXF1YWwgJ21vdXNlZG93bidcblx0XHRcdGV4cGVjdChldmVudC5jdXN0b20pLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2Vkb3duJywgbnVsbCwgbnVsbCwge2N1c3RvbTonY3VzdG9tJywgYWJjOjEyM31cblx0XHRcdGV4cGVjdChldmVudC50eXBlKS50by5lcXVhbCAnbW91c2Vkb3duJ1xuXHRcdFx0ZXhwZWN0KGV2ZW50LmN1c3RvbSkudG8uZXF1YWwgJ2N1c3RvbSdcblx0XHRcdGV4cGVjdChldmVudC5hYmMpLnRvLmVxdWFsIDEyM1xuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2Vkb3duJywgbnVsbCwgbnVsbCwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGV2ZW50LnR5cGUpLnRvLmVxdWFsICdtb3VzZWRvd24nXG5cdFx0XHRleHBlY3QoZXZlbnQuY3VzdG9tKS50by5lcXVhbCB1bmRlZmluZWRcblxuXG5cdFx0dGVzdCBcIkV2ZW50IGxpc3RlbmVycyBjYW4gYmUgcmVtb3ZlZCB2aWEgdGhlIC5vZmYgbWV0aG9kXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gZW1pdENvdW50QyA9IGVtaXRDb3VudEQgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QSsrXG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCBldmVudENCPSgpLT4gZW1pdENvdW50QisrXG5cdFx0XHRkaXYub24gJ2Fub3RoZXJFdmVudCcsICgpLT4gZW1pdENvdW50QysrXG5cdFx0XHRkaXYuZWwuYWRkRXZlbnRMaXN0ZW5lciAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50RCsrXG5cblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QykudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnREKS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpOyBkaXYuZW1pdCgnYW5vdGhlckV2ZW50Jyk7XG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEMpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50RCkudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2Lm9mZignbXlFdmVudCcsIGV2ZW50Q0IpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpOyBkaXYuZW1pdCgnYW5vdGhlckV2ZW50Jyk7XG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEMpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50RCkudG8uZXF1YWwoMilcblx0XHRcdFxuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRCKytcblx0XHRcdGRpdi5vZmYoJ215RXZlbnQnKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKTsgZGl2LmVtaXQoJ2Fub3RoZXJFdmVudCcpO1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRDKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEQpLnRvLmVxdWFsKDMpXG5cdFx0XHRcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QSsrXG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEIrK1xuXHRcdFx0ZGl2Lm9mZigpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpOyBkaXYuZW1pdCgnYW5vdGhlckV2ZW50Jyk7XG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEMpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50RCkudG8uZXF1YWwoNClcblxuXG5cdFx0dGVzdCBcIkV2ZW50cyBjYW4gYmUgbmFtZWQgdmlhIGEgJzxldmVudD4uPG5hbWU+JyBzeW50YXggd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGxpc3RlbmVycyBsYXRlciBvbiB3aXRob3V0IHRoZSBvcmlnaW5hbCBjYWxsYmFja3NcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0YXR0YWNoTGlzdGVuZXJzID0gKCktPlxuXHRcdFx0XHRkaXYub24gJ215RXZlbnQuc29tZU5hbWUnLCAoKS0+IGVtaXRDb3VudEErKztcblx0XHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRCKys7XG5cblx0XHRcdGF0dGFjaExpc3RlbmVycygpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudC5zb21lTmFtZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0XG5cdFx0XHRkaXYub2ZmKCdteUV2ZW50LnNvbWVPdGhlck5hbWUnKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMilcblx0XHRcdFxuXHRcdFx0ZGl2Lm9mZignbXlFdmVudC5zb21lTmFtZScpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgzKVxuXHRcdFx0XG5cdFx0XHRkaXYub2ZmKCdteUV2ZW50Jylcblx0XHRcdGF0dGFjaExpc3RlbmVycygpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCg0KVxuXHRcdFx0XG5cdFx0XHRkaXYub2ZmKCdteUV2ZW50Jylcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDQpXG5cblxuXHRcdHRlc3QgXCJNdWx0aXBsZSBldmVudHMgY2FuIGJlIHJlZ2lzdGVyZWQvZGVyZWdpc3RlcmVkIGF0IG9uY2UgdXNpbmcgd2hpdGVzcGFjZSBzZXBhcmF0b3JzXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudCA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXG5cdFx0XHRkaXYub24gJ29uZSB0d28gICB0aHJlZScsICgpLT4gZW1pdENvdW50Kytcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDBcblxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxXG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMlxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgM1xuXG5cdFx0XHRkaXYub2ZmKCdvbmUgICAgICB0aHJlZScpXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDNcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA0XG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA0XG5cblx0XHRcdGRpdi5vZmYoKVxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpOyBkaXYuZW1pdCgndHdvJyk7IGRpdi5lbWl0KCd0aHJlZScpO1xuXHRcdFx0ZGl2Lm9uICdvbmUgdHdvICAgdGhyZWUuc29tZU5hbWUnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRkaXYub24gJ29uZSB0d28gICB0aHJlZScsICgpLT4gZW1pdENvdW50Kytcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDRcblxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA2XG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgOFxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTBcblxuXHRcdFx0ZGl2Lm9mZigndHdvIFxcdG9uZS5zb21lTmFtZScpXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDExXG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTJcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDE0XG5cdFx0XHRcblx0XHRcdGRpdi5vZmYoJ29uZSB0aHJlZScpXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDE0XG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTVcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDE1XG5cblxuXHRcdHRlc3QgXCJFdmVudHMgY2FuIGJlIGxpc3RlbmVkIGZvciBvbmNlIHZpYSB0aGUgLm9uY2UgbWV0aG9kXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRkaXYub25jZSAnbXlDbGljaycsIChldmVudCktPlxuXHRcdFx0XHRleHBlY3QodHlwZW9mIGV2ZW50KS50by5lcXVhbCAnb2JqZWN0J1xuXHRcdFx0XHRleHBlY3QoZXZlbnQudHlwZSkudG8uZXF1YWwgJ215Q2xpY2snXG5cblx0XHRcdGRpdi5vbiAnbXlDbGljaycsICgpLT4gZW1pdENvdW50QSsrXG5cdFx0XHRkaXYub25jZSAnbXlDbGljaycsICgpLT4gZW1pdENvdW50QisrXG5cdFx0XHRcblxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblx0XHRcdFxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0XG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5vbmNlICdteUNsaWNrJywgKGV2ZW50KS0+IGVtaXRDb3VudEIrK1xuXHRcdFx0XG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDIpXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDQpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMilcblxuXG5cdFx0dGVzdCBcIlByZS1kZWZpbmVkIGV2ZW50IGxpc3RlbmVycyBjYW4gYmUgcGFzc2VkIGluIG9wdGlvbnMuZXZlbnRzXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudCA9IDBcblx0XHRcdGVtaXRDb250ZXh0ID0gbnVsbFxuXHRcdFx0bGlzdGVuZXJzID1cblx0XHRcdFx0J29uZSB0d28gdGhyZWUnOiAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRcdCdmb3VyJzogKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0XHQnZml2ZSc6ICgpLT4gZW1pdENvbnRleHQgPSBAXG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbS5kaXYoZXZlbnRzOmxpc3RlbmVycylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDBcblxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxXG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMlxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgM1xuXG5cdFx0XHRkaXYuZW1pdCgnZm91cicpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA0XG5cblx0XHRcdGRpdi5vZmYoJ29uZSAgICAgIHRocmVlJylcblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNFxuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDVcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDVcblxuXHRcdFx0ZGl2LmVtaXQoJ2ZpdmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb250ZXh0KS50by5lcXVhbCBkaXZcblxuXHRcdFx0ZGl2Lm9mZigpXG5cdFx0XHRkaXYuZW1pdCgnb25lJyk7IGRpdi5lbWl0KCd0d28nKTsgZGl2LmVtaXQoJ3RocmVlJyk7IGRpdi5lbWl0KCdmb3VyJyk7XG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA1XG5cblx0XHRcdGRpdkIgPSBEb20uZGl2KGV2ZW50czpsaXN0ZW5lcnMpXG5cdFx0XHRkaXZCLmVtaXQoJ29uZScpOyBkaXZCLmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDdcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGVtaXRDb250ZXh0KS50by5lcXVhbCBkaXZcblx0XHRcdGRpdkIuZW1pdCgnZml2ZScpXG5cdFx0XHRleHBlY3QoZW1pdENvbnRleHQpLnRvLmVxdWFsIGRpdkJcblxuXG5cdFx0dGVzdCBcInRoZSBpbnNlcnRlZCBldmVudCB3aWxsIGJlIHByaXZhdGVseSBlbWl0dGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgaW5zZXJ0ZWQgaW50byB0aGUgRE9NXCIsICgpLT5cblx0XHRcdGludm9rZUNvdW50ID0gMFxuXHRcdFx0cGFyZW50QSA9IERvbS5zZWN0aW9uKClcblx0XHRcdHBhcmVudEIgPSBEb20uc2VjdGlvbigpXG5cdFx0XHRtYXN0ZXJQYXJlbnRCID0gRG9tLmRpdigpXG5cdFx0XHRwYXJlbnRDID0gRG9tLnNlY3Rpb24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cblx0XHRcdGRpdi5vbiAnaW5zZXJ0ZWQnLCAoZWwpLT5cblx0XHRcdFx0ZXhwZWN0KEApLnRvLmVxdWFsKGRpdilcblx0XHRcdFx0ZXhwZWN0KGVsKS50by5lcXVhbChkaXYucGFyZW50KVxuXHRcdFx0XHRleHBlY3QoaW52b2tlQ291bnQrKykudG8uZXF1YWwoMClcblxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEEpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRCLmFwcGVuZFRvKG1hc3RlclBhcmVudEIpKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRwYXJlbnRBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRDKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgxKVxuXG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRCLmFwcGVuZFRvKHNhbmRib3gpKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsIHBhcmVudEJcblxuXHRcdFx0ZGl2Lm9uICdpbnNlcnRlZCcsICgpLT4gZXhwZWN0KGludm9rZUNvdW50KyspLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwgcGFyZW50QlxuXHRcdFx0XG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50Qylcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCBwYXJlbnRDXG5cdFx0XHRcblx0XHRcdGRpdi5kZXRhY2goKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEEpXG5cdFx0XHRkaXYub24gJ2luc2VydGVkJywgKCktPiBpbnZva2VDb3VudCsrXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDMpXG5cdFx0XHRcblx0XHRcdGRpdi5kZXRhY2goKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEIpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDMpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQucmVwbGFjZSB3aWxsIHRyaWdnZXIgdGhlIGluc2VydGVkIGV2ZW50XCIsICgpLT5cblx0XHRcdGludm9rZUNvdW50ID0gMFxuXHRcdFx0cGFyZW50ID0gRG9tLnNlY3Rpb24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QSA9IERvbS5kaXYoKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXG5cdFx0XHRCLm9uICdpbnNlcnRlZCcsIChlbCktPlxuXHRcdFx0XHRleHBlY3QoQCkudG8uZXF1YWwoQilcblx0XHRcdFx0ZXhwZWN0KGVsKS50by5lcXVhbChCLnBhcmVudClcblx0XHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KyspLnRvLmVxdWFsKDApXG5cblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KEEucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXHRcdFx0cGFyZW50LmFwcGVuZChBKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsKHBhcmVudClcblx0XHRcdGV4cGVjdChCLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cdFx0XHRBLnJlcGxhY2UoQilcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KEEucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKHBhcmVudClcblxuXG5cblxuXG5cblx0c3VpdGUgXCJTdHlsZVwiLCAoKS0+XG5cdFx0dGVzdCBcIlN0eWxlcyBjYW4gYmUgc2V0IHZpYSB0aGUgLnN0eWxlLy5jc3MgbWV0aG9kIHdpdGggYXJncyBwYWlyIG9mIFtwcm9wZXJ0eSwgdmFsdWVdXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoc3R5bGU6e3dpZHRoOicxNXB4J30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYuZWwpXG5cblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cblx0XHRcdGRpdi5zdHlsZSAnd2lkdGgnLCAnMjVweCdcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cblx0XHRcdGRpdi5zdHlsZSAnd2lkdGgnLCAnNXZoJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJzV2aCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uY29udGFpbigncHgnKVxuXG5cblx0XHR0ZXN0IFwiTXVsdGlwbGUgU3R5bGVzIGNhbiBiZSBzZXQgdmlhIHRoZSAuc3R5bGUvLmNzcyBtZXRob2QgYnkgcGFzc2luZyBhIHN0eWxlIG9iamVjdFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOnt3aWR0aDonMTVweCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMHB4JylcblxuXHRcdFx0ZGl2LnN0eWxlIHt3aWR0aDoyNSwgaGVpZ2h0OiczMyd9XG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMzNweCcpXG5cblxuXHRcdHRlc3QgXCJTdHlsZXMgZGVmaW5lZCBpbiB0aGUgb3B0aW9ucyBvYmplY3Qgd2lsbCBiZSBhcHBsaWVkIHZpYSBjbGFzc05hbWVzIGFuZCBub3QgaW5saW5lIHN0eWxlXCIsICgpLT5cblx0XHRcdGRpdkEgPSBEb20uZGl2KHN0eWxlOnt3aWR0aDoxNSwgaGVpZ2h0OjMwfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdkIgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveCkuc3R5bGUge3dpZHRoOjE1LCBoZWlnaHQ6MzB9XG5cblx0XHRcdGV4cGVjdChkaXZBLnJhdykudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5yYXcpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEucmF3KS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMzBweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5yYXcpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICczMHB4Jylcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkEucmF3LnN0eWxlLndpZHRoKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkIucmF3LnN0eWxlLndpZHRoKS50by5lcXVhbCAnMTVweCdcblx0XHRcdGV4cGVjdChkaXZBLnJhdy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2Qi5yYXcuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnMzBweCdcblxuXG5cdFx0dGVzdCBcIklmIHBhc3NlZCBhIHByb3BlcnR5IG5hbWUgd2l0aG91dCBhIHZhbHVlLCB0aGUgY29tcHV0ZWQgdmFsdWUgZm9yIHRoYXQgcHJvcGVydHkgd2lsbCBiZSByZXR1cm5lZFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOnt3aWR0aDonMTVweCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcxNXB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzBweCdcblxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOm51bGwsIGhlaWdodDogNTVcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgY29tcHV0ZWRTdHlsZS53aWR0aFxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzU1cHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSAnd2lkdGgnLCAnMTl2dydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uY29udGFpbiAncHgnXG5cblxuXHRcdHRlc3QgXCJGdW5jdGlvbnMgY2FuIGJlIHBhc3NlZCBhcyB2YWx1ZXMgZm9yIHByb3BlcnRpZXMgaW4gc3R5bGUgb2JqZWN0cyB3aGljaCB3aWxsIGJlIGludm9rZWQgd2l0aCB0aGUgZWxlbWVudCdzIG9wdGlvbnMucmVsYXRlZEluc3RhbmNlIGFzIHRoZSBvbmx5IGFyZ3VtZW50XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYocmF0ZToyNSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFwcGx5V2lkdGggPSAoZXhwZWN0ZWRJbnN0YW5jZSktPlxuXHRcdFx0XHRkaXYuc3R5bGUgd2lkdGg6IChpbnN0YW5jZSktPlxuXHRcdFx0XHRcdGV4cGVjdCh0eXBlb2YgaW5zdGFuY2UpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRcdFx0ZXhwZWN0KGluc3RhbmNlKS50by5lcXVhbChleHBlY3RlZEluc3RhbmNlKVxuXHRcdFx0XHRcdHJldHVybiBkaXYub3B0aW9ucy5yYXRlXG5cblx0XHRcdGFwcGx5V2lkdGgoZGl2KVxuXHRcdFx0ZXhwZWN0KGRpdi5vcHRpb25zLnJhdGUpLnRvLmVxdWFsIDI1XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyNXB4J1xuXG5cdFx0XHRkaXYub3B0aW9ucy5yYXRlID0gMjUwXG5cdFx0XHRkaXYucmVsYXRlZCA9IGFub3RoZXJPYmogPSB7fVxuXHRcdFx0YXBwbHlXaWR0aChhbm90aGVyT2JqKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjUwcHgnXG5cblx0XHRcdGRpdiA9IERvbS5kaXYoc3R5bGU6e3dpZHRoOjMwLCBoZWlnaHQ6KC0+NTApLCBmb250U2l6ZTooLT4yMCl9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcpLnRvLmhhdmUuc3R5bGUgJ3dpZHRoJywgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnJhdykudG8uaGF2ZS5zdHlsZSAnaGVpZ2h0JywgJzUwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnJhdykudG8uaGF2ZS5zdHlsZSAnZm9udFNpemUnLCAnMjBweCdcblxuXG5cdFx0dGVzdCBcIkEgbnVsbCB2YWx1ZSBjYW4gYmUgcGFzc2VkIGZvciBhIHByb3BlcnR5IGluIG9yZGVyIHRvIGRlbGV0ZSB0aGF0IHN0eWxlXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoc3R5bGU6e3dpZHRoOicxNXB4JywgZm9udFNpemU6IC0+IDMwfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdi5zdHlsZSAnaGVpZ2h0JywgMjBcblxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMjBweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICcyMHB4J1xuXG5cdFx0XHRkaXYuc3R5bGUge3dpZHRoOm51bGwsIGhlaWdodDoxMn1cblx0XHRcdGV4cGVjdChkaXYuZWwpLm5vdC50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICcxMnB4Jylcblx0XHRcdGV4cGVjdChbJ3Vuc2V0JywnaW5oZXJpdCcsJ2luaXRpYWwnXS5zb21lIChzKS0+IHMgaXMgZGl2LmVsLnN0eWxlLndpZHRoKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJzEycHgnXG5cblx0XHRcdGRpdi5jc3MgJ2hlaWdodCcsIG51bGxcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS53aWR0aCkubm90LnRvLmVxdWFsICcnXG5cblx0XHRcdGRpdi5lbC5zdHlsZS53aWR0aCA9IG51bGxcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUud2lkdGgpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmNzcyAnd2lkdGgnLCBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLndpZHRoKS5ub3QudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXYuZWwpLm5vdC50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4JylcblxuXHRcdFx0ZGl2LnN0eWxlICdoZWlnaHQnLCAtPiAzMFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgJ2hlaWdodCcsIC0+IG51bGxcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnJ1xuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmZvbnRTaXplKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGRpdi5zdHlsZSAnZm9udFNpemUnLCBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmZvbnRTaXplKS50by5lcXVhbCAnJ1xuXG5cblx0XHR0ZXN0IFwiLnN0eWxlU2FmZSgpIGNhbiBiZSB1c2VkIHRvIG9idGFpbiB0aGUgdmFsdWUgZm9yIGEgZ2l2ZW4gcHJvcGVydHkgZXZlbiBmb3Igbm9uLWluc2VydGVkIGVsZW1lbnRzIG9yIGVsZW1lbnRzIHdpdGggb3B0aW9ucy5zdHlsZUFmdGVySW5zZXJ0XCIsICgpLT5cblx0XHRcdHN0eWxlID1cblx0XHRcdFx0d2lkdGg6ICc4cHgnXG5cdFx0XHRcdGhlaWdodDogJzlweCdcblx0XHRcdFx0ekluZGV4OiAoZmllbGQpLT4gZmllbGQub3B0aW9ucy50aGVJbmRleFxuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0d2lkdGg6ICcxOHB4J1xuXHRcdFx0XHRcdHpJbmRleDogKGZpZWxkKS0+IGZpZWxkLm9wdGlvbnMudGhlSW5kZXgqMlxuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRoZWlnaHQ6ICcxMDAlJ1xuXHRcdFx0ZGl2QSA9IERvbS5kaXYge3N0eWxlLCB0aGVJbmRleDonMTInfVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYge3N0eWxlLCB0aGVJbmRleDonMjknLCBzdHlsZUFmdGVySW5zZXJ0OnRydWV9XG5cdFx0XHRkaXZBLnN0eWxlIGZvbnRTaXplOjEwLCBwb3NpdGlvbjoncmVsYXRpdmUnXG5cdFx0XHRkaXZCLnN0eWxlIGZvbnRTaXplOjEwLCBwb3NpdGlvbjoncmVsYXRpdmUnXG5cdFx0XHRwcm9wID0gKGVsLHRhcmdldCktPiBjb21wdXRlZDplbC5zdHlsZSh0YXJnZXQpLCBpbmxpbmU6ZWwucmF3LnN0eWxlW3RhcmdldF0sIHNhZmU6JycrZWwuc3R5bGVTYWZlKHRhcmdldClcblxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ2ZvbnRTaXplJykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicxMHB4Jywgc2FmZTonMTBweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnZm9udFNpemUnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JzEwcHgnLCBzYWZlOicxMHB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICd3aWR0aCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonOHB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICd3aWR0aCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonOHB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICdoZWlnaHQnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzlweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnaGVpZ2h0JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOic5cHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ3pJbmRleCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonMTInLCBzYWZlOicxMid9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnekluZGV4JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOicyOSd9XG5cdFx0XHRcblx0XHRcdGRpdkEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICd3aWR0aCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonMThweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnd2lkdGgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzE4cHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ3pJbmRleCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonMjQnLCBzYWZlOicyNCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnekluZGV4JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOic1OCd9XG5cdFx0XHRcblx0XHRcdGRpdkEuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnaGVpZ2h0JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOicxMDAlJ31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICdoZWlnaHQnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzEwMCUnfVxuXHRcdFx0XG5cdFx0XHRkaXZBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZCLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRoZWlnaHRBID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXZBLnJhdykuaGVpZ2h0XG5cdFx0XHRoZWlnaHRCID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXZCLnJhdykuaGVpZ2h0XG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnekluZGV4JykudG8uZXFsIHtjb21wdXRlZDonMjQnLCBpbmxpbmU6JzI0Jywgc2FmZTonMjQnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ3pJbmRleCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JzU4JywgaW5saW5lOic1OCcsIHNhZmU6JzU4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICdoZWlnaHQnKS50by5lcWwge2NvbXB1dGVkOmhlaWdodEEsIGlubGluZTonJywgc2FmZTpoZWlnaHRBfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ2hlaWdodCcpLnRvLmVxbCB7Y29tcHV0ZWQ6aGVpZ2h0QiwgaW5saW5lOicnLCBzYWZlOmhlaWdodEJ9XG5cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSAnaGVpZ2h0JykudG8uZXF1YWwgaGVpZ2h0QVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlICdoZWlnaHQnLCB0cnVlKS50by5lcXVhbCAnMTAwJSdcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSAnaGVpZ2h0JykudG8uZXF1YWwgaGVpZ2h0QlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlICdoZWlnaHQnLCB0cnVlKS50by5lcXVhbCAnMTAwJSdcblx0XHRcdFxuXHRcdFx0ZGl2Qi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ2hlaWdodCcpKS5ub3QudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnaGVpZ2h0JykpLm5vdC50by5lcXVhbCgnMTAwJScpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnaGVpZ2h0JykpLnRvLmNvbnRhaW4oJ3B4Jylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnaGVpZ2h0JykpLnRvLmVxdWFsKGRpdkIuc3R5bGUoJ2hlaWdodCcpKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCdoZWlnaHQnLCB0cnVlKSkubm90LnRvLmVxdWFsKGRpdkIuc3R5bGUoJ2hlaWdodCcpKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCdoZWlnaHQnLCB0cnVlKSkudG8uZXF1YWwoJzEwMCUnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCdtYXJnaW4nLCB0cnVlKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ2Zha2VQcm9wJykpLnRvLmVxdWFsKGRpdkEpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoMTIzKSkudG8uZXF1YWwoZGl2QSlcblxuXHRcdFx0dGV4dCA9IERvbS50ZXh0KCdhYmMxMjMnKS5hcHBlbmRUbyhkaXZBKVxuXHRcdFx0ZXhwZWN0KHRleHQuc3R5bGVTYWZlKCdmYWtlUHJvcCcpKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QodGV4dC5zdHlsZVNhZmUoMTIzKSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cblx0XHR0ZXN0IFwiLnN0eWxlU2FmZSgpIHdpbGwgd29yayB3aXRoIGluc3RhbmNlcyB3aXRoIG5vIGdpdmVuIGJhc2Ugc3R5bGVzXCIsICgpLT5cblx0XHRcdGRpdkEgPSBEb20uZGl2KClcblx0XHRcdGRpdkIgPSBEb20oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnZGl2JylcblxuXHRcdFx0ZXhwZWN0ICgpLT5cblx0XHRcdFx0ZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpXG5cdFx0XHRcdGRpdkIuc3R5bGVTYWZlKCdoZWlnaHQnKVxuXHRcdFx0Lm5vdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSAnaGVpZ2h0JykudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSAnaGVpZ2h0JykudG8uZXF1YWwgJydcblxuXG5cdFx0dGVzdCBcIi5zdHlsZVBhcnNlZCgpIGlzIGEgc2hvcnRoYW5kIGZvciBwYXJzZUZsb2F0KC5zdHlsZVNhZmUoKSlcIiwgKCktPlxuXHRcdFx0c3R5bGUgPVxuXHRcdFx0XHR3aWR0aDogJzhweCdcblx0XHRcdFx0aGVpZ2h0OiAnOXB4J1xuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0d2lkdGg6ICcxOHB4J1xuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRoZWlnaHQ6ICcxMDAlJ1xuXHRcdFx0ZGl2QSA9IERvbS5kaXYge3N0eWxlfVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYge3N0eWxlLCBzdHlsZUFmdGVySW5zZXJ0OnRydWV9XG5cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzhweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSlcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ2hlaWdodCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCc5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ2hlaWdodCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSlcblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnOHB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXG5cdFx0XHRkaXZBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZCLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSkudG8uZXF1YWwoJzlweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnaGVpZ2h0JykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKVxuXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSlcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ2hlaWdodCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCcxMDAlJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCdoZWlnaHQnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpXG5cblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cblx0XHRcdGRpdkEuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdkIuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdkEuc3RhdGUgJ3JlbGF4ZWQnLCBvZmZcblx0XHRcdGRpdkIuc3RhdGUgJ3JlbGF4ZWQnLCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCc5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSkudG8uZXF1YWwoJzlweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnaGVpZ2h0JykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKVxuXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSlcblxuXG5cdFx0dGVzdCBcIi5yZWNhbGNTdHlsZSgpIHJlLWFwcGxpZXMgYWxsIGZ1bmN0aW9uLXZhbHVlIHN0eWxlc1wiLCAoKS0+XG5cdFx0XHRjb3VudCA9IEE6MCxCOjAsQzowLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICgpLT4gKytjb3VudC5BXG5cdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0aGVpZ2h0OiAoKS0+ICsrY291bnQuQlxuXHRcdFx0XHRmb250U2l6ZTogKCktPiArK2NvdW50LkNcblx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdG9wYWNpdHk6IDAuNVxuXHRcdFx0XHRcdGZvbnRTaXplOiAoKS0+ICsrY291bnQuRFxuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRoZWlnaHQ6ICgpLT4gKytjb3VudC5FXG5cdFx0XHRcdFx0Zm9udFNpemU6ICgpLT4gKytjb3VudC5GXG5cdFx0XHRcdFx0JGZ1bm55OlxuXHRcdFx0XHRcdFx0d2lkdGg6ICgpLT4gKytjb3VudC5HXG5cblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MSxCOjEsQzoxLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0XG5cdFx0XHRkaXYucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToyLEI6MixDOjIsRDowLEU6MCxGOjAsRzowXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToyLEI6MixDOjIsRDoxLEU6MCxGOjAsRzowXG5cblx0XHRcdGRpdi5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjMsQjozLEM6MixEOjIsRTowLEY6MCxHOjBcblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MyxCOjMsQzoyLEQ6MixFOjEsRjoxLEc6MFxuXG5cdFx0XHRkaXYucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTo0LEI6MyxDOjIsRDoyLEU6MixGOjIsRzowXG5cblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTo0LEI6MyxDOjIsRDoyLEU6MixGOjIsRzoxXG5cblx0XHRcdGRpdi5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjQsQjozLEM6MixEOjIsRTozLEY6MyxHOjJcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdmdW5ueScsIG9mZlxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTo1LEI6MyxDOjIsRDoyLEU6MyxGOjMsRzoyXG5cdFx0XHRcblx0XHRcdGRpdi5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjYsQjozLEM6MixEOjIsRTo0LEY6NCxHOjJcblxuXG5cdFx0dGVzdCBcIi5yZWNhbGNTdHlsZSgpIGFjY2VwdHMgYSBzaW5nbGUgYXJndW1lbnQgdG8gaW5kaWNhdGUgaWYgdG8gcmVjYWxjIHN0eWxlIG9uIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdGNvdW50ID0gQTowLEI6MCxDOjAsRDowLEU6MCxGOjAsRzowXG5cdFx0XHR3cmFwcGVyQ291bnQgPSAwXG5cdFx0XHR3cmFwcGVyID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICgpLT4gKyt3cmFwcGVyQ291bnRcblx0XHRcdFxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICgpLT4gKytjb3VudC5BXG5cdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0aGVpZ2h0OiAoKS0+ICsrY291bnQuQlxuXHRcdFx0XHRmb250U2l6ZTogKCktPiArK2NvdW50LkNcblx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdG9wYWNpdHk6IDAuNVxuXHRcdFx0XHRcdGZvbnRTaXplOiAoKS0+ICsrY291bnQuRFxuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRoZWlnaHQ6ICgpLT4gKytjb3VudC5FXG5cdFx0XHRcdFx0Zm9udFNpemU6ICgpLT4gKytjb3VudC5GXG5cdFx0XHRcdFx0JGZ1bm55OlxuXHRcdFx0XHRcdFx0d2lkdGg6ICgpLT4gKytjb3VudC5HXG5cblx0XHRcdGRpdi5hcHBlbmRUbyh3cmFwcGVyKVxuXHRcdFx0ZXhwZWN0KHdyYXBwZXJDb3VudCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToxLEI6MSxDOjEsRDowLEU6MCxGOjAsRzowXG5cdFx0XHRcblx0XHRcdHdyYXBwZXIucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KHdyYXBwZXJDb3VudCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToxLEI6MSxDOjEsRDowLEU6MCxGOjAsRzowXG5cdFx0XHRcblx0XHRcdHdyYXBwZXIucmVjYWxjU3R5bGUodHJ1ZSlcblx0XHRcdGV4cGVjdCh3cmFwcGVyQ291bnQpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MixCOjIsQzoyLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MixCOjIsQzoyLEQ6MSxFOjAsRjowLEc6MFxuXG5cdFx0XHR3cmFwcGVyLnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdCh3cmFwcGVyQ291bnQpLnRvLmVxdWFsIDRcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MixCOjIsQzoyLEQ6MSxFOjAsRjowLEc6MFxuXHRcdFx0XG5cdFx0XHR3cmFwcGVyLnJlY2FsY1N0eWxlKDEpXG5cdFx0XHRleHBlY3Qod3JhcHBlckNvdW50KS50by5lcXVhbCA1XG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjMsQjozLEM6MixEOjIsRTowLEY6MCxHOjBcblxuXG5cdFx0dGVzdCBcIklmIG9wdGlvbnMucmVjYWxjT25SZXNpemUgaXMgc2V0LCAucmVjYWxjU3R5bGUoKSB3aWxsIGJlIGludm9rZWQgb24gZWFjaCByZXNpemUgZXZlbnRcIiwgKCktPlxuXHRcdFx0Y291bnQgPSBBOjAsQjowLEM6MCxEOjBcblx0XHRcdERvbS5kaXZcblx0XHRcdFx0c3R5bGU6XG5cdFx0XHRcdFx0d2lkdGg6ICgpLT4gKytjb3VudC5BXG5cdFx0XHRcdFx0b3BhY2l0eTogMVxuXHRcdFx0XHRcdGhlaWdodDogKCktPiArK2NvdW50LkJcblx0XHRcdFxuXHRcdFx0RG9tLmRpdlxuXHRcdFx0XHRyZWNhbGNPblJlc2l6ZTogdHJ1ZVxuXHRcdFx0XHRzdHlsZTpcblx0XHRcdFx0XHR3aWR0aDogKCktPiArK2NvdW50LkNcblx0XHRcdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRcdFx0aGVpZ2h0OiAoKS0+ICsrY291bnQuRFxuXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjEsQjoxLEM6MSxEOjFcblx0XHRcdFxuXHRcdFx0RG9tKHdpbmRvdykuZW1pdCAncmVzaXplJ1xuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToxLEI6MSxDOjIsRDoyXG5cdFx0XHRcblx0XHRcdERvbSh3aW5kb3cpLmVtaXQgJ3Jlc2l6ZSdcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MSxCOjEsQzozLEQ6M1xuXG5cblx0XHR0ZXN0IFwiSWYgb3B0aW9ucy5mb3JjZVN0eWxlIGlzIHNldCwgYWxsIHJlZ2lzdGVyZWQgc3R5bGVzIHdpbGwgaGF2ZSB0aGUgJyFpbXBvcnRhbnQnIGZsYWcgc2V0XCIsICgpLT5cblx0XHRcdHN0eWxlID0gRE9NLnN0eWxlKHByb3BzOmlubmVySFRNTDpcIi50aGVEaXYge3dpZHRoOjUwcHh9XCIpXG5cdFx0XHRkaXZBID0gRE9NLmRpdihjbGFzc05hbWU6J3RoZURpdicsIHN0eWxlOnt3aWR0aDoxMDAsIGhlaWdodDoxMDB9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2QiA9IERPTS5kaXYoY2xhc3NOYW1lOid0aGVEaXYnLCBzdHlsZTp7d2lkdGg6MTAwLCBoZWlnaHQ6MTAwfSwgZm9yY2VTdHlsZTp0cnVlKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMTAwcHgnXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMTAwcHgnXG5cdFx0XHRcblx0XHRcdHN0eWxlLmFwcGVuZFRvKGRvY3VtZW50LmhlYWQpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnNTBweCdcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcxMDBweCdcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkEuYXR0cignc3R5bGUnKSBpcyAnJyBvciBkaXZBLmF0dHIoJ3N0eWxlJykgaXMgbnVsbCkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdkIuYXR0cignc3R5bGUnKSBpcyAnJyBvciBkaXZCLmF0dHIoJ3N0eWxlJykgaXMgbnVsbCkudG8uYmUudHJ1ZVxuXHRcdFx0XG5cdFx0XHRkaXZBLnN0eWxlICd3aWR0aCcsICgpLT4gNzVcblx0XHRcdGRpdkIuc3R5bGUgJ3dpZHRoJywgKCktPiA3NVxuXHRcdFx0ZGl2QS5zdHlsZSAnaGVpZ2h0JywgODVcblx0XHRcdGRpdkIuc3R5bGUgJ2hlaWdodCcsIDg1XG5cdFx0XHRleHBlY3QoZGl2QS5hdHRyICdzdHlsZScpLm5vdC50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkIuYXR0ciAnc3R5bGUnKS5ub3QudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXZBLmF0dHIgJ3N0eWxlJykubm90LnRvLmluY2x1ZGUgJzc1cHggIWltcG9ydGFudCdcblx0XHRcdGV4cGVjdChkaXZCLmF0dHIgJ3N0eWxlJykudG8uaW5jbHVkZSAnNzVweCAhaW1wb3J0YW50J1xuXHRcdFx0ZXhwZWN0KGRpdkEuYXR0ciAnc3R5bGUnKS5ub3QudG8uaW5jbHVkZSAnODVweCAhaW1wb3J0YW50J1xuXHRcdFx0ZXhwZWN0KGRpdkIuYXR0ciAnc3R5bGUnKS50by5pbmNsdWRlICc4NXB4ICFpbXBvcnRhbnQnXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnNzVweCdcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICc3NXB4J1xuXHRcdFx0c3R5bGUucmVtb3ZlKClcblxuXG5cdFx0dGVzdCBcIi5zaG93KCkvLmhpZGUoKSB3aWxsIHRvZ2dsZSB0aGUgZWxlbWVudCdzIHZpc2liaWxpdHlcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvIHNhbmRib3hcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ2Jsb2NrJ1xuXG5cdFx0XHRkaXYuaGlkZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdub25lJ1xuXG5cdFx0XHRkaXYuc2hvdygpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdibG9jaydcblxuXHRcdFx0ZGl2LnNob3coKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnYmxvY2snXG5cblxuXHRcdHRlc3QgXCIuc2hvdygpIHdpbGwgc2V0IHRoZSBlbGVtZW50J3MgZGlzcGxheSBzdHlsZSB0byB0aGUgcHJvdmlkZWQgYXJndW1lbnQsIG9yIHRvIHRoZSB2YWx1ZSBwcm92aWRlZCBpbiB0aGUgc3R5bGUgb2JqZWN0XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoc3R5bGU6ZGlzcGxheTonaW5saW5lJykuYXBwZW5kVG8gc2FuZGJveFxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnaW5saW5lJ1xuXG5cdFx0XHRkaXYuaGlkZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdub25lJ1xuXG5cdFx0XHRkaXYuc2hvdygpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdpbmxpbmUnXG5cblx0XHRcdGRpdi5oaWRlKClcblx0XHRcdGRpdi5zaG93KCdpbmxpbmUtYmxvY2snKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnaW5saW5lLWJsb2NrJ1xuXG5cblx0XHR0ZXN0IFwiU1ZHIGVsZW1lbnRzXCIsICgpLT5cblx0XHRcdHN2ZyA9IERvbShcblx0XHRcdFx0Wycqc3ZnJ1xuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0ZGlzcGxheTogJ2Jsb2NrJ1xuXHRcdFx0XHRcdFx0d2lkdGg6IDEwXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDEwXG5cdFx0XHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiAyMFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDIwXG5cdFx0XHRcdF1cblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHN2Zy5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMTBweCdcblx0XHRcdGV4cGVjdChzdmcuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICcxMHB4J1xuXG5cdFx0XHRzdmcuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChzdmcuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzIwcHgnXG5cdFx0XHRleHBlY3Qoc3ZnLnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMjBweCdcblxuXG5cblxuXHRzdWl0ZSBcIlN0YXRlXCIsICgpLT5cblx0XHR0ZXN0IFwiU3RhdGVzIGNhbiBiZSBwb2xsZWQgZm9yIGEgdmFsdWUgYnkgcGFzc2luZyBvbmx5IHRoZSB0YXJnZXQgc3RhdGUncyBuYW1lIHRvIC5zdGF0ZSAmIGNhbiBiZSB0b2dnbGVkIG9uL29mZiBieSBwYXNzaW5nIGEgc2Vjb25kIGFyZ3VtZW50XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLmZhbHNlXG5cblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIHRydWVcblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIHRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55JywgZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICckZnVubnknLCB0cnVlXG5cdFx0XHRkaXYuc3RhdGUgJyRiYXNlJywgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnZnVubnknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiYXNlJykudG8uYmUuZmFsc2VcblxuXG5cdFx0dGVzdCBcIkEga2V5OnZhbHVlIHBhaXIgb2JqZWN0IGNhbiBiZSBwYXNzZWQgdG8gdG9nZ2xlIHN0YXRlIGZvciBtdWx0aXBsZSBzdGF0ZXMgYXQgb25jZVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYScpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiJykudG8uZXF1YWwgZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2MnKS50by5lcXVhbCBmYWxzZVxuXG5cdFx0XHRkaXYuc3RhdGUgYTp0cnVlLGI6MVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYScpLnRvLmVxdWFsIHRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2InKS50by5lcXVhbCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdjJykudG8uZXF1YWwgZmFsc2VcblxuXHRcdFx0ZGl2LnN0YXRlIGI6ZmFsc2UsYzoneSdcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2EnKS50by5lcXVhbCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiJykudG8uZXF1YWwgZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2MnKS50by5lcXVhbCB0cnVlXG5cblxuXHRcdHRlc3QgXCIuc3RhdGUoKSB3aXRob3V0IGFyZ3VtZW50cyBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIGFjdGl2ZSBzdGF0ZXNcIiwgKCktPlxuXHRcdFx0ZWwgPSBET00uZGl2KClcblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgW11cblxuXHRcdFx0ZWwuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGVsLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgWydoYXBweScsJ3JlbGF4ZWQnXVxuXG5cdFx0XHRlbC5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgWydyZWxheGVkJ11cblxuXHRcdFx0ZWwuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgWydyZWxheGVkJywnaGFwcHknXVxuXG5cblx0XHR0ZXN0IFwiQWxsIHN0YXRlcyBjYW4gYmUgY2xlYXJlZC90b2dnbGVkIG9mZiB2aWEgLnJlc2V0U3RhdGVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnZnVubnknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblx0XHRcdGRpdi5yZXNldFN0YXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS5mYWxzZVxuXG5cblx0XHR0ZXN0IFwiQSBzdGF0ZSBjYW4gYmUgdG9nZ2xlZCBvbi9vZmYgdmlhIC50b2dnbGVTdGF0ZVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBET00uZGl2KClcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdi50b2dnbGVTdGF0ZSgnaGFwcHknKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlU3RhdGUoJ2hhcHB5Jylcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdi50b2dnbGVTdGF0ZSgnaGFwcHknKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cblx0XHR0ZXN0IFwiU3R5bGVzIGNhbiBiZSBwYXNzZWQgdW5kZXIgc3BlY2lmaWMgc3RhdGVzIHVzaW5nIGEgJyQnIHByZWZpeCBiZWZvcmUgdGhlIHN0YXRlIG5hbWVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0JGJhc2U6XG5cdFx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzE1cHgnXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHR3aWR0aDogJzI1cHgnXG5cdFx0XHRcdFx0bWFyZ2luVG9wOiAnMjBweCdcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0d2lkdGg6ICczNXB4J1xuXHRcdFx0XHRcdG1hcmdpbkxlZnQ6ICcxMnB4J1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0KS50by5lcXVhbCgnMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcyMHB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQpLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMzVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzEycHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzM1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzEycHgnKVxuXG5cblx0XHR0ZXN0IFwiQSBzdGF0ZTpldmVudE5hbWUgKG9yIHN0YXRlOmV2ZW50T3B0cykgbWFwIGNhbiBiZSBwYXNzZWQgc2V0IGZvciBvcHRpb25zLnN0YXRlVHJpZ2dlcnNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihcblx0XHRcdFx0c3RhdGVUcmlnZ2Vyczpcblx0XHRcdFx0XHRoYXBweToge29uOidiZWNhbWVIYXBweScsIG9mZjonYmVjYW1lU2FkJ31cblx0XHRcdFx0XHRyZWxheGVkOiAnaXNSZWxheGVkJyBcblx0XHRcdFx0c3R5bGU6XG5cdFx0XHRcdFx0JGJhc2U6XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0XHQkaGFwcHk6XHRcdHdpZHRoOiAnMjVweCdcblx0XHRcdFx0XHQkcmVsYXhlZDpcdHdpZHRoOiAnMzVweCdcblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXG5cdFx0XHRkaXYuZW1pdCgnYmVjYW1lSGFwcHknKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cblx0XHRcdGRpdi5lbWl0KCdpc1JlbGF4ZWQnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCczNXB4JylcblxuXHRcdFx0ZGl2LmVtaXQoJ2JlY2FtZVNhZCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCczNXB4JylcblxuXHRcdFx0ZGl2LnN0YXRlKCdyZWxheGVkJywgb2ZmKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4JylcblxuXG5cdFx0dGVzdCBcIm9wdGlvbnMuc3RhdGVUcmlnZ2VycyB3b24ndCBiZSBhdHRhY2hlZCBpZiB0aGV5IGFyZW4ndCBiZWluZyB1c2VkIGluIHN0eWxlIG9iamVjdFwiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdihzdHlsZTp7JGhvdmVyOiBkaXNwbGF5OidibG9jayd9KVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYoc3R5bGU6eyRmb2N1czogZGlzcGxheTonYmxvY2snfSlcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ21vdXNlZW50ZXInXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ21vdXNlbGVhdmUnXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ2JsdXInXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnYmx1cidcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb2ZmXG5cblxuXHRcdHRlc3QgXCJvcHRpb25zLnN0YXRlVHJpZ2dlcnMgY2FuIGJlIGZvcmNlZCB0byBiZSBhdHRhY2hlZCBldmVuIGlmIHRoZXkgYXJlbid0IGJlaW5nIHVzZWQgaW4gc3R5bGUgb2JqZWN0IHZpYSAuX2F0dGFjaFN0YXRlRXZlbnRzKHRydWUpXCIsICgpLT5cblx0XHRcdGF0dGFjaFN0YXRlRXZlbnRzID0gaWYgRG9tLmRpdigpLl9hdHRhY2hTdGF0ZUV2ZW50cyB0aGVuICdfYXR0YWNoU3RhdGVFdmVudHMnIGVsc2UgJ19hZSdcblx0XHRcdGRpdkEgPSBEb20uZGl2KHN0eWxlOnskaG92ZXI6IGRpc3BsYXk6J2Jsb2NrJ30pXG5cdFx0XHRkaXZCID0gRG9tLmRpdihzdHlsZTp7JGZvY3VzOiBkaXNwbGF5OidibG9jayd9KVxuXHRcdFx0ZGl2QVthdHRhY2hTdGF0ZUV2ZW50c10odHJ1ZSlcblx0XHRcdGRpdkJbYXR0YWNoU3RhdGVFdmVudHNdKHRydWUpXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZGl2Qi5lbC5lbWl0RXZlbnQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ21vdXNlbGVhdmUnXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvblxuXG5cdFx0XHRkaXZBLmVsLmVtaXRFdmVudCAnYmx1cidcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdibHVyJ1xuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvZmZcblxuXG5cdFx0dGVzdCBcIlRoZSBob3ZlciBhbmQgZm9jdXMgc3RhdGVzIHdpbGwgYmUgbGlzdGVuZWQgZm9yIGFuZCB0b2dnbGVkIGJ5IGRlZmF1bHQgYnkgdGhlaXIgYXBwcm9wcmlhdGUgZXZlbnRzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdCRiYXNlOlxuXHRcdFx0XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICcxNXB4J1xuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYig0NSwgNDUsIDQ1KSdcblx0XHRcdFx0JGhvdmVyOlxuXHRcdFx0XHRcdHdpZHRoOiAnMjVweCdcblx0XHRcdFx0XHRtYXJnaW5Ub3A6ICcyMHB4J1xuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYigxNTUsIDE1NSwgMTU1KSdcblx0XHRcdFx0JGZvY3VzOlxuXHRcdFx0XHRcdHdpZHRoOiAnMzVweCdcblx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjAwLCAyMDAsIDIwMCknXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdtYXJnaW5Ub3AnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoNDUsIDQ1LCA0NSknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnYmFja2dyb3VuZENvbG9yJywgJ3JnYigxNTUsIDE1NSwgMTU1KScpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdtYXJnaW5Ub3AnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoNDUsIDQ1LCA0NSknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGRpdi5lbWl0ICdmb2N1cydcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzM1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnYmFja2dyb3VuZENvbG9yJywgJ3JnYigyMDAsIDIwMCwgMjAwKScpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMzVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdtYXJnaW5Ub3AnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoMjAwLCAyMDAsIDIwMCknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXG5cblx0XHR0ZXN0IFwiSWYgbm90IHBhc3NlZCBhIHN0eWxlIG1hcCB1bmRlciB0aGUgJ2Jhc2UnIHN0YXRlLCBhbGwgbm9uLXN0YXRlIHByb3BlcnRpZXMgb24gdGhlIHN0eWxlIG9iamVjdCB3aWxsIGJlIGNvbnNpZGVyZWQgYXMgJ2Jhc2UnIHN0YXRlIHByb3BlcnRpZXNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHRoZWlnaHQ6ICcyMHB4J1xuXHRcdFx0XHQkaG92ZXI6XG5cdFx0XHRcdFx0d2lkdGg6ICcyNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzMwcHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzIwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlbGVhdmUnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMjBweCcpXG5cblxuXHRcdHRlc3QgXCJTdGF0ZS1zcGVjaWZpYyBzdHlsZXMgd2lsbCBiZSByZW1vdmVkIHVwb24gc3RhdGUgdHVybiBvZmYgb3IgcmVzdG9yZWQgdG8gdGhlIGJhc2UgdmFsdWVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHQkaG92ZXI6XG5cdFx0XHRcdFx0d2lkdGg6ICcyNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzMwcHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcyNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICczMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlbGVhdmUnXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICcwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcnKVxuXG5cblx0XHR0ZXN0IFwiSGlnaGVyIG9yZGVyIHN0YXRlIHN0eWxlcyB3aWxsIGhhdmUgYSBoaWdoZXIgcHJlY2VkZW5jZSB0aGFuIHRoZSAnYmFzZScgc3R5bGUgdG8gYmUgdXNlZCBhcyByZXBsYWNtZW50cyBmb3IgcGVuZGluZy1yZW1vdmFsIHN0YXRlLXN0eWxlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogJzE1cHgnXG5cdFx0XHRcdCRob3Zlcjpcblx0XHRcdFx0XHR3aWR0aDogJzI1cHgnXG5cdFx0XHRcdFx0aGVpZ2h0OiAnMzBweCdcblx0XHRcdFx0JGZvY3VzOlxuXHRcdFx0XHRcdGhlaWdodDogJzQ1cHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzMwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnZm9jdXMnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnNDVweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzQ1cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnYmx1cidcblx0XHRcdGRpdi5lbWl0ICdmb2N1cydcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzQ1cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnYmx1cidcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczMHB4JylcblxuXG5cdFx0dGVzdCBcIlN0YXRlIHRvZ2dsZXMgd2lsbCBiZSBwYXNzZWQgdG8gY2hpbGRyZW4gZWxlbWVudHMgdW5sZXNzIG9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiBpcyBvZmZcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0QyA9IERvbS5kaXYocGFzc1N0YXRlVG9DaGlsZHJlbjpmYWxzZSkuYXBwZW5kVG8oQSlcblxuXHRcdFx0ZXhwZWN0KE1haW4uc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2VcblxuXHRcdFx0TWFpbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KE1haW4uc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cdFx0XHRNYWluLm9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiA9IGZhbHNlXG5cdFx0XHRNYWluLnN0YXRlICdoYXBweScsIGZhbHNlXG5cdFx0XHRleHBlY3QoTWFpbi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cdFx0XHRNYWluLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRNYWluLm9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiA9IHRydWVcblx0XHRcdEEub3B0aW9ucy5wYXNzU3RhdGVUb0NoaWxkcmVuID0gZmFsc2Vcblx0XHRcdE1haW4uc3RhdGUgJ2hhcHB5JywgZmFsc2Vcblx0XHRcdGV4cGVjdChNYWluLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoQS5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cblx0XHR0ZXN0IFwiU3RhdGUgc3R5bGVzIGNhbiBiZSBuZXN0ZWQgdG8gdHJpZ2dlciB3aGVuIGFsbCBzdGF0ZXMgYXJlIHRvZ2dsZWQgb25cIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0JGJhc2U6XG5cdFx0XHRcdFx0d2lkdGg6ICcxMnB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzEycHgnXG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxMHB4J1xuXHRcdFx0XHQkZnVubnk6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzE1cHgnXG5cdFx0XHRcdFx0IyB3aWR0aDogJzEwcHgnXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHR3aWR0aDogJzE0cHgnXG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxNHB4J1xuXHRcdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdFx0aGVpZ2h0OiAnMTFweCdcblx0XHRcdFx0XHRcdGZvbnRTaXplOiAnMTdweCdcblx0XHRcdFx0XHRcdCRmdW5ueTpcblx0XHRcdFx0XHRcdFx0d2lkdGg6ICcxMHB4J1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6ICcxNHB4J1xuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHR3aWR0aDogJzE3cHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxMHB4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzE1cHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55Jywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzEwcHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzE0cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzEycHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTRweCcpXG5cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxN3B4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMXB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzE3cHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxN3B4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzEwcHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzE3cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzExcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTdweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTBweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTRweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxN3B4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTdweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxNXB4JylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC5yZWN0IHNob3VsZCBjb250YWluIGFuIHVwZGF0ZWQgdmVyc2lvbiBvZiB0aGUgZWxlbWVudCdzIENsaWVudFJlY3RcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRyZWN0QSA9IGRpdi5yZWN0XG5cdFx0XHRyZWN0QiA9IGRpdi5yZWN0XG5cblx0XHRcdGV4cGVjdChyZWN0QSkudG8uYmUuaW5zdGFuY2VPZihDbGllbnRSZWN0KVxuXHRcdFx0ZXhwZWN0KHJlY3RCKS50by5iZS5pbnN0YW5jZU9mKENsaWVudFJlY3QpXG5cdFx0XHRleHBlY3QocmVjdEEpLnRvLmVxbChyZWN0QilcblxuXG5cdFx0XHRkaXYuc3R5bGUgJ3dpZHRoJywgJzdweCdcblx0XHRcdHJlY3RDID0gZGl2LnJlY3Rcblx0XHRcdGV4cGVjdChyZWN0QykudG8uYmUuaW5zdGFuY2VPZihDbGllbnRSZWN0KVxuXHRcdFx0ZXhwZWN0KHJlY3RBKS50by5lcWwocmVjdEIpXG5cdFx0XHRleHBlY3QocmVjdEEpLm5vdC50by5lcWwocmVjdEMpXG5cdFx0XHRleHBlY3QocmVjdEEud2lkdGgpLm5vdC50by5lcXVhbCg3KVxuXHRcdFx0ZXhwZWN0KHJlY3RCLndpZHRoKS5ub3QudG8uZXF1YWwoNylcblx0XHRcdGV4cGVjdChyZWN0Qy53aWR0aCkudG8uZXF1YWwoNylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC53aWR0aCBzaG91bGQgcmV0dXJuIHRoZSB1cGRhdGVkIHZlcnNpb24gb2YgYW4gZWxlbWVudCdzIGNvbXB1dGVkIHdpZHRoXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHBhcmVudClcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlIHdpZHRoOicxMDAwcHgnXG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6JzUwJSdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDUwMClcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOicxMCUnXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCgxMDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDonOTdweCdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDk3KVxuXG5cblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50LmhlaWdodCBzaG91bGQgcmV0dXJuIHRoZSB1cGRhdGVkIHZlcnNpb24gb2YgYW4gZWxlbWVudCdzIGNvbXB1dGVkIGhlaWdodFwiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdHBhcmVudC5zdHlsZSBoZWlnaHQ6JzEwMDBweCdcblx0XHRcdGRpdi5zdHlsZSBoZWlnaHQ6JzUwJSdcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCg1MDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSBoZWlnaHQ6JzEwJSdcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCgxMDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSBoZWlnaHQ6Jzk3cHgnXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoOTcpXG5cblx0XHRcblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50LndpZHRoLy5oZWlnaHQgc2V0dGVycyBhcmUgc2hvcnRjdXRzIGZvciAuc3R5bGUoKSBzZXR0ZXJzXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHBhcmVudClcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlIHdpZHRoOicxMDAwcHgnLCBoZWlnaHQ6JzEwMDBweCdcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDonNTAlJywgaGVpZ2h0Oic1MCUnXG5cdFx0XHRkaXYud2lkdGggPSBkaXYuaGVpZ2h0ID0gJzUwJSdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDUwMClcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCg1MDApXG5cdFx0XHRcblx0XHRcdGRpdi53aWR0aCA9IGRpdi5oZWlnaHQgPSAnMTAlJ1xuXHRcdFx0ZXhwZWN0KGRpdi53aWR0aCkudG8uZXF1YWwoMTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5oZWlnaHQpLnRvLmVxdWFsKDEwMClcblx0XHRcdFxuXHRcdFx0ZGl2LndpZHRoID0gZGl2LmhlaWdodCA9ICc5N3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi53aWR0aCkudG8uZXF1YWwoOTcpXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoOTcpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQub3JpZW50YXRpb24gc2hvdWxkIHJldHVybiB0aGUgdXBkYXRlZCB2ZXJzaW9uIG9mIGFuIGVsZW1lbnQncyBjb21wdXRlZCBvcmllbnRhdGlvblwiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo1MDAsIGhlaWdodDo0MDBcblx0XHRcdGV4cGVjdChkaXYub3JpZW50YXRpb24pLnRvLmVxdWFsKCdsYW5kc2NhcGUnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NTUwLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgncG9ydHJhaXQnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NjAwLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgncG9ydHJhaXQnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NjAxLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgnbGFuZHNjYXBlJylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC5hc3BlY3RSYXRpbyBzaG91bGQgcmV0dXJuIHRoZSB1cGRhdGVkIHZlcnNpb24gb2YgYW4gZWxlbWVudCdzIGNvbXB1dGVkIGFzcGVjdC1yYXRpb1wiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo1MDAsIGhlaWdodDo0MDBcblx0XHRcdGV4cGVjdChkaXYuYXNwZWN0UmF0aW8pLnRvLmVxdWFsKDEuMjUpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo1NDAsIGhlaWdodDo2MDBcblx0XHRcdGV4cGVjdChkaXYuYXNwZWN0UmF0aW8pLnRvLmVxdWFsKDAuOSlcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjYwMCwgaGVpZ2h0OjYwMFxuXHRcdFx0ZXhwZWN0KGRpdi5hc3BlY3RSYXRpbykudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjMwMCwgaGVpZ2h0OjkwMFxuXHRcdFx0ZXhwZWN0KGRpdi5hc3BlY3RSYXRpbykudG8uZXF1YWwoMC4zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMylcblxuXG5cdFx0dGVzdCBcIklmIG9wdGlvbnMuc3R5bGVBZnRlckluc2VydCBpcyBwYXNzZWQsIGZ1bmN0aW9uIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgb25seSBhZnRlciB0aGUgZWxlbWVudCBpcyBpbnNlcnRlZCBpbnRvIHRoZSBET01cIiwgKCktPlxuXHRcdFx0cGFyZW50T3BhY2l0eUdldHRlciA9ICgpLT4gaWYgQHBhcmVudCB0aGVuIEBwYXJlbnQuc3R5bGUoJ29wYWNpdHknKSBlbHNlICcwLjUnXG5cdFx0XHRkaXZSZWcgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6JzE5cHgnLCBvcGFjaXR5OnBhcmVudE9wYWNpdHlHZXR0ZXJ9KVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6e2hlaWdodDonMTlweCcsIG9wYWNpdHk6cGFyZW50T3BhY2l0eUdldHRlcn0sIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZSlcblx0XHRcdGRpdkIgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6JzE5cHgnLCBvcGFjaXR5OnBhcmVudE9wYWNpdHlHZXR0ZXJ9LCBzdHlsZUFmdGVySW5zZXJ0OnRydWUpXG5cdFx0XHRkaXZDID0gRG9tLmRpdihzdHlsZTp7aGVpZ2h0OicxOXB4Jywgb3BhY2l0eTpwYXJlbnRPcGFjaXR5R2V0dGVyfSwgc3R5bGVBZnRlckluc2VydDp0cnVlKVxuXG5cdFx0XHRjbGFzc05hbWUgPSBkaXZSZWcucmF3LmNsYXNzTmFtZSBvciAnbm8gY2xhc3NOYW1lJ1xuXHRcdFx0ZXhwZWN0KGRpdlJlZy5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2QS5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2Qi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2Qy5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcwLjUnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXZBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnMScpXG5cdFx0XHRleHBlY3QoZGl2Qi5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXZCLmluc2VydEJlZm9yZShzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkMuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdHNhbmRib3guYXBwZW5kQ2hpbGQoZGl2Qy5lbClcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZCLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXZDLnBhcmVudFxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkMuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZGl2Qy5hcHBlbmRUbyhzYW5kYm94KVxuXG5cblx0XHR0ZXN0IFwiQW55IHN0eWxlcyBhcHBsaWVkIGJ5IHN0YXRlcyBiZWZvcmUgdGhlIGVsZW1lbnQgaGFzIGJlZW4gaW5zZXJ0ZWQgaW50byB0aGUgRE9NIGFuZCB3aGVuIG9wdGlvbnMuc3R5bGVBZnRlckluc2VydCBpcyBvbiB3aWxsIGJlIHJlLWFwcGxpZWQgYWZ0ZXIgaW5zZXJ0XCIsICgpLT5cblx0XHRcdGRpdlJlZyA9IERvbS5kaXYoc3R5bGU6eyRiYXNlOntoZWlnaHQ6LT4nMTlweCd9LCAkZnVubnk6e2hlaWdodDotPicyOXB4J30sICRoYXBweTp7aGVpZ2h0Oi0+JzM5cHgnfX0pXG5cdFx0XHRkaXZBID0gRG9tLmRpdihzdHlsZTp7JGJhc2U6e2hlaWdodDotPicxOXB4J30sICRmdW5ueTp7aGVpZ2h0Oi0+JzI5cHgnfSwgJGhhcHB5OntoZWlnaHQ6LT4nMzlweCd9fSwgc3R5bGVBZnRlckluc2VydDp0cnVlKVxuXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblxuXHRcdFx0ZGl2UmVnLnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRkaXZBLnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzI5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2UmVnLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzM5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2UmVnLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzM5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMzlweCcpXG5cblxuXHRcdHRlc3QgXCJJZiBhbiBlbGVtZW50IHdpdGggb3B0aW9ucy5zdHlsZUFmdGVySW5zZXJ0IGlzIGFwcGVuZGVkIGludG8gYSBkZXRhY2hlZCBlbGVtZW50LCBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIG9ubHkgYWZ0ZXIgdGhlIHBhcmVudCBpcyBhcHBlbmRlZCB0byB0aGUgRE9NXCIsICgpLT5cblx0XHRcdGRldGFjaGVkUGFyZW50ID0gRG9tLmRpdigpXG5cdFx0XHRkaXZSZWcgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6KC0+JzE5cHgnKSwgJGhhcHB5OiRyZWxheGVkOnt3aWR0aDotPiczMXB4J319KVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6e2hlaWdodDooLT4nMTlweCcpLCAkaGFwcHk6JHJlbGF4ZWQ6e3dpZHRoOi0+JzMxcHgnfX0sIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZSlcblxuXHRcdFx0ZGl2UmVnLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZSZWcuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkEuc3R5bGUgJ3Zpc2liaWxpdHknLCAnaGlkZGVuJ1xuXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJzMxcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLnZpc2liaWxpdHkpLnRvLmVxdWFsKCdoaWRkZW4nKVxuXG5cdFx0XHRkaXZBLmFwcGVuZFRvKGRldGFjaGVkUGFyZW50KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLnZpc2liaWxpdHkpLnRvLmVxdWFsKCdoaWRkZW4nKVxuXG5cdFx0XHRkZXRhY2hlZFBhcmVudC5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTlweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJzMxcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUudmlzaWJpbGl0eSkudG8uZXF1YWwoJ2hpZGRlbicpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQucGlwZVN0YXRlIGNhbiBiZSB1c2VkIHRvIHJlZGlyZWN0IGFsbCBzdGF0ZSB0b2dnbGVzIHRvIHRoZSBwcm92aWRlZCB0YXJnZXQgZWxlbWVudFwiLCAoKS0+XG5cdFx0XHRwYXJlbnRBID0gRG9tLmRpdigpXG5cdFx0XHRwYXJlbnRCID0gRG9tLmRpdihwYXNzU3RhdGVUb0NoaWxkcmVuOmZhbHNlKVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYobnVsbCkuYXBwZW5kVG8ocGFyZW50QSlcblx0XHRcdGRpdkIgPSBEb20uZGl2KG51bGwpLmFwcGVuZFRvKHBhcmVudEIpXG5cdFx0XHRjaGlsZEEgPSBEb20uc3BhbigpLmFwcGVuZFRvKGRpdkEpXG5cdFx0XHRjaGlsZEIgPSBEb20uc3BhbigpLmFwcGVuZFRvKGRpdkIpXG5cblx0XHRcdGRpdkEucGlwZVN0YXRlKClcblx0XHRcdGRpdkEuc3RhdGUgJzEnLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJzEnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICcxJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJzEnKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXZBLnBpcGVTdGF0ZShwYXJlbnRBKVxuXHRcdFx0ZGl2QS5zdGF0ZSAnMicsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnMicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnMicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICcyJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5waXBlU3RhdGUoZmFsc2UpXG5cdFx0XHRkaXZBLnN0YXRlICcyLjUnLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJzIuNScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJzIuNScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICcyLjUnKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXZCLnBpcGVTdGF0ZSh0cnVlKVxuXHRcdFx0ZGl2Qi5zdGF0ZSAnMycsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnMycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJzMnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnMycpLnRvLmVxdWFsIG9uXG5cdFx0XHRcblx0XHRcdGRpdkIucGlwZVN0YXRlKHBhcmVudEIpXG5cdFx0XHRkaXZCLnN0YXRlICc0Jywgb25cblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICc0JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICc0JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICc0JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdkEucGlwZVN0YXRlKHBhcmVudEIpXG5cdFx0XHRkaXZBLnN0YXRlICc1Jywgb25cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICc1JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnNScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnNScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdFxuXHRcdFx0ZGl2QS5waXBlU3RhdGUoZmFsc2UpXG5cdFx0XHRkaXZCLnBpcGVTdGF0ZShwYXJlbnRBKVxuXHRcdFx0ZGl2Qi5zdGF0ZSAnNicsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnNicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnNicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJzYnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJzYnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJzYnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnNicpLnRvLmVxdWFsIG9mZlxuXG5cblx0XHR0ZXN0IFwiU3RhdGVzIGNhbiBiZSBtYXJrZWQgYXMgdW5wYXNzYWJsZSB0byBhdm9pZCBwYXNzaW5nIHRvIGNoaWxkcmVuIGJ5IGluY2x1ZGluZyB0aGVtIGluIG9wdGlvbnMudW5wYXNzYWJsZVN0YXRlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHVucGFzc2FibGVTdGF0ZXM6IFsnQicsJ0QnXSlcblx0XHRcdHNwYW5BID0gRG9tLnNwYW4oKS5hcHBlbmRUbyhkaXYpXG5cdFx0XHRzcGFuQiA9IERvbS5zcGFuKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0c3ViU3BhbiA9IERvbS5zcGFuKCkuYXBwZW5kVG8oc3BhbkIpXG5cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ0EnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzcGFuQS5zdGF0ZSAnQScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdBJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViU3Bhbi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXYuc3RhdGUgJ0EnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkEuc3RhdGUgJ0EnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdBJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdBJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2LnN0YXRlICdCJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ0InKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5BLnN0YXRlICdCJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0InKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdCJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdi5zdGF0ZSAnQycsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdDJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzcGFuQS5zdGF0ZSAnQycpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0MnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0MnKS50by5lcXVhbCBvblxuXG5cdFx0XHRkaXYuc3RhdGUgJ0QnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkEuc3RhdGUgJ0QnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzcGFuQi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0QnKS50by5lcXVhbCBvZmZcblx0XHRcdFxuXHRcdFx0c3BhbkIuc3RhdGUgJ0QnLCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdEJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdEJykudG8uZXF1YWwgb25cblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdEJywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdEJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0QnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0QnKS50by5lcXVhbCBvblxuXG5cblx0XHR0ZXN0IFwiV2hlbiAuc3RhdGUoKSByZWNlaXZlcyBhIHRydXRoeSB2YWx1ZSBhcyB0aGUgdGhpcmQgYXJndW1lbnQgdGhlIGV2ZW50IHdpbGwgYnViYmxlIHVwIHRvIHBhcmVudHMgaW5zdGVhZCBvZiBjYXNjYWRlIHRvIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdHBhcmVudEEgPSBEb20uc2VjdGlvbiBudWxsLFxuXHRcdFx0XHRzdWJQYXJlbnRBID0gRG9tLmRpdiBudWxsLFxuXHRcdFx0XHRcdGNoaWxkQSA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRcdHN1YkNoaWxkQSA9IERvbS5kaXYoKVxuXHRcdFx0XG5cdFx0XHRwYXJlbnRCID0gRG9tLnNlY3Rpb24gbnVsbCxcblx0XHRcdFx0c3ViUGFyZW50QiA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRjaGlsZEIgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0XHRzdWJDaGlsZEIgPSBEb20uZGl2KClcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRjaGlsZEEuc3RhdGUgJ2hhcHB5Jywgb24sIHRydWVcblx0XHRcdGNoaWxkQi5zdGF0ZSAnaGFwcHknLCBvblxuXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cdFx0XHRjaGlsZEEuc3RhdGUgJ3JlbGF4ZWQnLCBvbiwgbnVsbFxuXHRcdFx0Y2hpbGRCLnN0YXRlICdyZWxheGVkJywgb24sICdvbidcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50Qi5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQS5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cblxuXHRcdHRlc3QgXCJvcHRpb25zLnN0YXRlVHJpZ2dlcnMgY29uZmlnIG9iamVjdHMgY2FuIHNwZWNpZnkgYSAnZm9yY2UnIHByb3BlcnR5IHdoaWNoIHdpbGwgbWFrZSB0aGVtIGdldCBhdHRhY2hlZCBldmVuIGlmIHRoZXkgYXJlbid0IHVzZWRcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYgc3RhdGVUcmlnZ2Vyczp7J2hhcHB5Jzogb246J2hhcHB5T04nLCBvZmY6J2hhcHB5T0ZGJywgZm9yY2U6dHJ1ZX1cblx0XHRcdGRpdkIgPSBEb20uZGl2IHN0YXRlVHJpZ2dlcnM6eydoYXBweSc6IG9uOidoYXBweU9OJywgb2ZmOidoYXBweU9GRid9XG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEucmF3LmVtaXRFdmVudCAnaGFwcHlPTidcblx0XHRcdGRpdkIucmF3LmVtaXRFdmVudCAnaGFwcHlPTidcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXZCLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZBLnJhdy5lbWl0RXZlbnQgJ2hhcHB5T0ZGJ1xuXHRcdFx0ZGl2Qi5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cblx0XHR0ZXN0IFwib3B0aW9ucy5zdGF0ZVRyaWdnZXJzIGNvbmZpZyBvYmplY3RzIGNhbiBzcGVjaWZ5IGEgJ2J1YmJsZXMnIHByb3BlcnR5IHdoaWNoIHdpbGwgY2F1c2UgdGhlIHN0YXRlIHRvIGJ1YmJsZSB0byBwYXJlbnRzIGluc3RlYWQgb2YgY2FzY2FkZSB0byBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRwYXJlbnRBID0gRG9tLnNlY3Rpb24gbnVsbCxcblx0XHRcdFx0c3ViUGFyZW50QSA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRjaGlsZEEgPSBEb20uZGl2IHN0YXRlVHJpZ2dlcnM6eydoYXBweSc6IG9uOidoYXBweU9OJywgb2ZmOidoYXBweU9GRicsIGJ1YmJsZXM6dHJ1ZSwgZm9yY2U6dHJ1ZX0sXG5cdFx0XHRcdFx0XHRzdWJDaGlsZEEgPSBEb20uZGl2KClcblx0XHRcdFxuXHRcdFx0cGFyZW50QiA9IERvbS5zZWN0aW9uIG51bGwsXG5cdFx0XHRcdHN1YlBhcmVudEIgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRCID0gRG9tLmRpdiBzdGF0ZVRyaWdnZXJzOnsnaGFwcHknOiBvbjonaGFwcHlPTicsIG9mZjonaGFwcHlPRkYnLCBmb3JjZTp0cnVlfSxcblx0XHRcdFx0XHRcdHN1YkNoaWxkQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGNoaWxkQS5yYXcuZW1pdEV2ZW50ICdoYXBweU9OJ1xuXHRcdFx0Y2hpbGRCLnJhdy5lbWl0RXZlbnQgJ2hhcHB5T04nXG5cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cblx0XHRcdGNoaWxkQS5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblx0XHRcdGNoaWxkQi5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cblx0XHR0ZXN0IFwid3JhcHBlcnMgY3JlYXRlZCBmb3IgZXhpc3RpbmcgZWxlbWVudHMgc2hvdWxkIGF0dGVtcHQgdG8gcmVzb2x2ZSBpZiBpdHMgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIG9uIGluaXRcIiwgKCktPlxuXHRcdFx0ZGl2QV8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0ZGl2Ql8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0c2FuZGJveC5hcHBlbmRDaGlsZChkaXZCXylcblx0XHRcdGRpdkEgPSBEb20oZGl2QV8pXG5cdFx0XHRkaXZCID0gRG9tKGRpdkJfKVxuXG5cdFx0XHRkaXZBXy5zdHlsZS5oZWlnaHQgPSAnMTAwcHgnXG5cdFx0XHRkaXZCXy5zdHlsZS5oZWlnaHQgPSAnMTAwcHgnXG5cblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2QS5oZWlnaHQpLnRvLmVxdWFsKCdudW1iZXInKVxuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZCLmhlaWdodCkudG8uZXF1YWwoJ251bWJlcicpXG5cdFx0XHRleHBlY3QoaXNOYU4gZGl2QS5oZWlnaHQpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChpc05hTiBkaXZCLmhlaWdodCkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSAnaGVpZ2h0JykudG8uZXF1YWwgJzEwMHB4J1xuXG5cblx0XHR0ZXN0IFwic3RhdGUtYmFzZWQgdGV4dFwiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tKFxuXHRcdFx0XHRbJ2RpdicsIG51bGwsXG5cdFx0XHRcdFx0Wyd0ZXh0Jyxcblx0XHRcdFx0XHRcdHRleHQ6XG5cdFx0XHRcdFx0XHRcdCRiYXNlOiAnYWJjMTIzJ1xuXHRcdFx0XHRcdFx0XHQkaGFwcHk6ICdIYXBweSdcblx0XHRcdFx0XHRcdFx0JHJlbGF4ZWQ6ICdSZWxheGVkJ1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0ZGl2QiA9IERvbShcblx0XHRcdFx0WydkaXYnLCBudWxsLFxuXHRcdFx0XHRcdFsndGV4dCcsXG5cdFx0XHRcdFx0XHR0ZXh0OlxuXHRcdFx0XHRcdFx0XHQkaGFwcHk6ICdIYXBweSdcblx0XHRcdFx0XHRcdFx0JHJlbGF4ZWQ6ICdSZWxheGVkJ1xuXHRcdFx0XHRcdFx0XHQnJHJlbGF4ZWQrZnVubnknOiAnRnVubnkgJiBSZWxheGVkJ1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0ZGl2QyA9IERvbS5kaXYodGV4dDp7JGJhc2U6J2RlZjQ1NicsICRoYXBweTonZ2hpNzg5J30pXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdhYmMxMjMnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkMudGV4dCkudG8uZXF1YWwgJ2RlZjQ1Nidcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0ZXhwZWN0KGRpdkMudGV4dCkudG8uZXF1YWwgJ2doaTc4OSdcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGRpdkIuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRkaXZDLnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ2FiYzEyMydcblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2Qy50ZXh0KS50by5lcXVhbCAnZGVmNDU2J1xuXHRcdFx0XG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ1JlbGF4ZWQnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnUmVsYXhlZCdcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ1JlbGF4ZWQnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnUmVsYXhlZCdcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9mZlxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCcsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0XG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ2Z1bm55Jywgb25cblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICdSZWxheGVkJ1xuXG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkK2Z1bm55Jywgb25cblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICdGdW5ueSAmIFJlbGF4ZWQnXG5cblxuXHRcdHRlc3QgXCJzdGF0ZSBjaGFuZ2VzIHdpbGwgZW1pdCBhIHByaXZhdGUgc3RhdGVDaGFuZ2U6PHN0YXRlPiBldmVudFwiLCAoKS0+XG5cdFx0XHRyZXN1bHRzID0gW11cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdGNvbG9yOiAnd2hpdGUnXG5cdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0JGhhcHB5OiBjb2xvcjogJ2JsYWNrJ1xuXHRcdFx0XG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnYW55Jywgb25cblx0XHRcdGRpdi5vbiAnc3RhdGVDaGFuZ2U6aGFwcHknLCAoc3RhdGUpLT4gcmVzdWx0cy5wdXNoIFsnaGFwcHknLCBzdGF0ZV1cblx0XHRcdGRpdi5vbiAnc3RhdGVDaGFuZ2U6cmVsYXhlZCcsIChzdGF0ZSktPiByZXN1bHRzLnB1c2ggWydyZWxheGVkJywgc3RhdGVdXG5cdFx0XHRkaXYub24gJ3N0YXRlQ2hhbmdlOmFyYml0cmFyeScsIChzdGF0ZSktPiByZXN1bHRzLnB1c2ggWydhcmJpdHJhcnknLCBzdGF0ZV1cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtdXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbCBbWydoYXBweScsb25dLCBbJ2hhcHB5JyxvZmZdLCBbJ2hhcHB5Jyxvbl1dXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dXVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Fub3RoZXInLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dXVxuXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dLCBbJ3JlbGF4ZWQnLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdhcmJpdHJhcnknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dLCBbJ3JlbGF4ZWQnLG9uXSwgWydhcmJpdHJhcnknLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl0sIFsnaGFwcHknLG9uXSwgWydyZWxheGVkJyxvbl0sIFsnYXJiaXRyYXJ5Jyxvbl1dXG5cblxuXHRcdHRlc3QgXCJzdGF0ZS1iYXNlZCBzdHlsZXMgY2FuIGJlIHVwZGF0ZWQgdmlhIFF1aWNrRWxlbWVudC51cGRhdGVTdGF0ZVN0eWxlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogNVxuXHRcdFx0XHRoZWlnaHQ6IDVcblx0XHRcdFx0bWFyZ2luVG9wOiA1XG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDEwXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdG1hcmdpblRvcDogMjBcblx0XHRcdFx0XHR3aWR0aDogMjBcblx0XHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDQwXG5cdFx0XHRcdFx0XHRtYXJnaW5Ub3A6IDQwXG5cdFx0XHRcdCRzb21ldGhpbmdFbHNlOlxuXHRcdFx0XHRcdHdpZHRoOiA2MFxuXHRcdFx0XHRcdG1hcmdpblRvcDogNjBcblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGdldFN0eWxlcyA9ICgpLT4gd2lkdGg6ZGl2LnN0eWxlKCd3aWR0aCcpLCBoZWlnaHQ6ZGl2LnN0eWxlKCdoZWlnaHQnKSwgbWFyZ2luVG9wOmRpdi5zdHlsZSgnbWFyZ2luVG9wJylcblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzVweCcsIGhlaWdodDonNXB4JywgbWFyZ2luVG9wOic1cHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzVweCcsIGhlaWdodDonNXB4JywgbWFyZ2luVG9wOicxMHB4J1xuXHRcdFx0XG5cdFx0XHRkaXYudXBkYXRlU3RhdGVTdHlsZXMge3dpZHRoOjcsIGhlaWdodDo4LCAkaGFwcHk6e21hcmdpblRvcDoxMiwgaGVpZ2h0OjEyfX1cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic3cHgnLCBoZWlnaHQ6JzEycHgnLCBtYXJnaW5Ub3A6JzEycHgnXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic3cHgnLCBoZWlnaHQ6JzhweCcsIG1hcmdpblRvcDonNXB4J1xuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic3cHgnLCBoZWlnaHQ6JzEycHgnLCBtYXJnaW5Ub3A6JzEycHgnXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdi51cGRhdGVTdGF0ZVN0eWxlc1xuXHRcdFx0XHQkYmFzZTpcblx0XHRcdFx0XHR3aWR0aDogMlxuXHRcdFx0XHRcdGhlaWdodDogOVxuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRoZWlnaHQ6IDIwXG5cdFx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdFx0d2lkdGg6IDQwXG5cdFx0XHRcdFx0XHRtYXJnaW5Ub3A6IC0+IDQ1XG5cdFx0XHRcblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOicycHgnLCBoZWlnaHQ6JzlweCcsIG1hcmdpblRvcDonNXB4J1xuXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzIwcHgnLCBoZWlnaHQ6JzIwcHgnLCBtYXJnaW5Ub3A6JzIwcHgnXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzQwcHgnLCBoZWlnaHQ6JzQwcHgnLCBtYXJnaW5Ub3A6JzQ1cHgnXG5cblx0XHRcdGRpdi5zdGF0ZSB7aGFwcHk6b2ZmLCByZWxheGVkOm9mZn1cblx0XHRcdGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3AgPSBudWxsXG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonMnB4JywgaGVpZ2h0Oic5cHgnLCBtYXJnaW5Ub3A6JzVweCdcblxuXHRcdFx0ZGl2LnN0YXRlICdzb21ldGhpbmdFbHNlJywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic2MHB4JywgaGVpZ2h0Oic5cHgnLCBtYXJnaW5Ub3A6JzYwcHgnXG5cblxuXHRcdHRlc3QgXCJkZWZhdWx0IHN0YXRlcyB0byBhcHBseSB0byBhbiBlbGVtZW50IHVwb24gY3JlYXRpb24gY2FuIGJlIHNwZWNpZmllZCB2aWEgb3B0aW9ucy5zdGF0ZSBtYXBwaW5nXCIsICgpLT5cblx0XHRcdGVsMSA9IERPTS5kaXYoKVxuXHRcdFx0ZWwyID0gRE9NLmRpdihzdGF0ZTp7aGFwcHk6b24sIHJlbGF4ZWQ6b2ZmfSlcblx0XHRcdGVsMyA9IERPTS5kaXYoc3RhdGU6e3JlbGF4ZWQ6b259KVxuXHRcdFx0ZXhwZWN0KGVsMS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChlbDEuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChlbDIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChlbDIuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChlbDMuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZWwzLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblxuXG5cblx0c3VpdGUgXCJNZWRpYSBRdWVyaWVzXCIsICgpLT5cblx0XHRzdWl0ZVRlYXJkb3duICgpLT4gZGltZW5zaW9ucy5yZXN0b3JlKCkgaWYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3csICdpbm5lcldpZHRoJyk/LmNvbmZpZ3VyYWJsZVxuXHRcdHN1aXRlU2V0dXAgKCktPiBAc2tpcCgpIGlmIG5vdCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2lubmVyV2lkdGgnKT8uY29uZmlndXJhYmxlXG5cdFx0dGVhcmRvd24gKCktPiBEb20uQ1NTLmNsZWFyUmVnaXN0ZXJlZChsZXZlbCkgZm9yIGxldmVsIGluIFswLi4zXVxuXG5cblx0XHR0ZXN0IFwiV2luZG93IGRpbWVuc2lvbnNcIiwgKCktPlxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgxMDAwLCAxMDAwKVxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZSdcblx0XHRcdFx0ekluZGV4OiAyXG5cdFx0XHRcdHdpZHRoOiAnMzAwcHgnXG5cdFx0XHRcdGhlaWdodDogJzMwMHB4J1xuXHRcdFx0XHRmb250U2l6ZTogJzMwcHgnXG5cdFx0XHRcdGxpbmVIZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOmxhbmRzY2FwZSknOlxuXHRcdFx0XHRcdG1hcmdpblRvcDogNlxuXG5cdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOnBvcnRyYWl0KSc6XG5cdFx0XHRcdFx0bWFyZ2luVG9wOiA3XG5cblx0XHRcdFx0J0B3aW5kb3cobWF4LXdpZHRoOjgwMCknOlxuXHRcdFx0XHRcdHpJbmRleDogM1xuXHRcdFx0XHRcdHdpZHRoOiAnMjgwcHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHdpbmRvdyhtYXgtd2lkdGg6NzAwLCBtYXgtaGVpZ2h0OjEwMDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDRcblx0XHRcdFx0XHR3aWR0aDogJzI1MHB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzI1MHB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3cobWF4LWhlaWdodDoxMDAwKSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcyNXB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3cobWluLXdpZHRoOjkwMHB4KSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcyM3B4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3coYXNwZWN0LXJhdGlvOjAuNSknOlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjFweCdcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTJweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAd2luZG93KG1pbi1oZWlnaHQ6MTIwMCknOlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjBweCdcblxuXHRcdFx0ZGl2LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyM3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luVG9wJykudG8uZXF1YWwgJzdweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyM3B4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDg5OSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzI1cHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoODk5LCAxMTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5NTApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyM3B4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDk1MCwgMTkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzIwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzEycHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoOTUwLCAxODk5KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg3OTApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI4MHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDgxMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMzAwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzkxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzMnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyODBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg3MDEsIDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjgwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzAwLCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnNCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI1MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzI1MHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDcwMCwgMTAwMSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjgwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzAwLCAxMDAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyNTBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICcyNTBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTEwMCwgMTAwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc2cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTEwMCwgMTEwMSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cblxuXHRcdHRlc3QgXCJTZWxmIGRpbWVuc2lvbnMvc3R5bGVzXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c2ltdWxhdGVQYXJlbnQgPSAod2lkdGgsIGhlaWdodCktPlxuXHRcdFx0XHRwYXJlbnQuc3R5bGUgJ3dpZHRoJywgd2lkdGggaWYgd2lkdGhcblx0XHRcdFx0cGFyZW50LnN0eWxlICdoZWlnaHQnLCBoZWlnaHQgaWYgaGVpZ2h0XG5cdFx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuXHRcdFx0XHR6SW5kZXg6IDJcblx0XHRcdFx0dG9wOiAnMzBweCdcblx0XHRcdFx0d2lkdGg6ICcxMDAlJ1xuXHRcdFx0XHRoZWlnaHQ6ICcxMDAlJ1xuXHRcdFx0XHRmb250U2l6ZTogJzMwcHgnXG5cdFx0XHRcdGxpbmVIZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRcdCdAc2VsZihvcmllbnRhdGlvbjpsYW5kc2NhcGUpJzpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDZcblxuXHRcdFx0XHQnQHNlbGYob3JpZW50YXRpb246cG9ydHJhaXQpJzpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihwb3NpdGlvbjpyZWxhdGl2ZSknOlxuXHRcdFx0XHRcdHRvcDogJzIwcHgnXG5cblx0XHRcdFx0J0BzZWxmKG1heC13aWR0aDozNTApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDNcblx0XHRcdFx0XHRmb250U2l6ZTogJzMzcHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWF4LXdpZHRoOjUwMCwgbWluLWhlaWdodDo0MDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDRcblx0XHRcdFx0XHRmb250U2l6ZTogJzI3cHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzM3cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYoekluZGV4OjQpJzpcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTVweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihtaW4tekluZGV4OjYpJzpcblx0XHRcdFx0XHRvcGFjaXR5OiAnMCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihtYXgtZm9udFNpemU6MjApJzpcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTlweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihtaW4td2lkdGg6NjAwcHgpJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzE5cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYoYXNwZWN0LXJhdGlvOjIuMjUpJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzIycHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzEycHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWluLWhlaWdodDo3MDApJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzQwcHgnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDQwMCwgMzAwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnNDAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luVG9wJykudG8uZXF1YWwgJzZweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICcyMHB4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDQyMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTVweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMzQ5LCAzOTkpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzMzcHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgNDAxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxNXB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsICcxJ1xuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUoJ3pJbmRleCcsIDUpXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzdweCdcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlKCd6SW5kZXgnLCAxNylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdvcGFjaXR5JykudG8uZXF1YWwgJzAnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzE5cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTlweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoOTAwLCA0MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyMnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxMnB4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgyMDI1LCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICc0MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxMnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luVG9wJykudG8uZXF1YWwgJzZweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMjAyNSwgMjAyNilcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cblxuXHRcdHRlc3QgXCJQYXJlbnQgZGltZW5zaW9ucy9zdHlsZXNcIiwgKCktPlxuXHRcdFx0cGFyZW50ID0gRG9tLmRpdihzdHlsZTp7cG9zaXRpb246J2Fic29sdXRlJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzaW11bGF0ZVBhcmVudCA9ICh3aWR0aCwgaGVpZ2h0KS0+XG5cdFx0XHRcdHBhcmVudC5zdHlsZSAnd2lkdGgnLCB3aWR0aCBpZiB3aWR0aFxuXHRcdFx0XHRwYXJlbnQuc3R5bGUgJ2hlaWdodCcsIGhlaWdodCBpZiBoZWlnaHRcblx0XHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnXG5cdFx0XHRcdHpJbmRleDogMlxuXHRcdFx0XHR0b3A6ICczMHB4J1xuXHRcdFx0XHR3aWR0aDogJzQwMHB4J1xuXHRcdFx0XHRoZWlnaHQ6ICczMDBweCdcblx0XHRcdFx0Zm9udFNpemU6ICczMHB4J1xuXHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzBweCdcblxuXHRcdFx0XHQnQHBhcmVudChvcmllbnRhdGlvbjpsYW5kc2NhcGUpJzpcblx0XHRcdFx0XHRtYXJnaW5Cb3R0b206IDZcblxuXHRcdFx0XHQnQHBhcmVudChvcmllbnRhdGlvbjpwb3J0cmFpdCknOlxuXHRcdFx0XHRcdG1hcmdpbkJvdHRvbTogN1xuXHRcdFx0XHRcblx0XHRcdFx0J0BwYXJlbnQocG9zaXRpb246cmVsYXRpdmUpJzpcblx0XHRcdFx0XHR0b3A6ICcyMXB4J1xuXG5cdFx0XHRcdCdAcGFyZW50KG1heC13aWR0aDozNTApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDNcblx0XHRcdFx0XHRmb250U2l6ZTogJzM0cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHBhcmVudChtYXgtd2lkdGg6NTAwLCBtaW4taGVpZ2h0OjQwMCknOlxuXHRcdFx0XHRcdHpJbmRleDogNFxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjdweCdcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzdweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAcGFyZW50KHpJbmRleDo3KSc6XG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzE2cHgnXG5cblxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoNDAwLCAzMDApXG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzInXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICc0MDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICczMDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5Cb3R0b20nKS50by5lcXVhbCAnNnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdHBhcmVudC5zdHlsZSAncG9zaXRpb24nLCAncmVsYXRpdmUnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd0b3AnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzIxcHgnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgNDIwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczN3B4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDM5OSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzRweCdcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlICd6SW5kZXgnLCAnNydcblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgNDAxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxNnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsICcxJ1xuXG5cblx0XHR0ZXN0IFwiUGFyZW50IFJlZiBkaW1lbnNpb25zL3N0eWxlc1wiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPVxuXHRcdFx0XHREb20uZGl2KHtyZWY6J2FiYyd9LFxuXHRcdFx0XHRcdERvbS5kaXYge2lkOidkZWYnfSxcblx0XHRcdFx0XHRcdERvbS5kaXYge3JlZjonZ2hpJ31cblx0XHRcdFx0KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuXHRcdFx0XHR6SW5kZXg6IDJcblx0XHRcdFx0dG9wOiAnMzBweCdcblx0XHRcdFx0d2lkdGg6ICc0MDBweCdcblx0XHRcdFx0aGVpZ2h0OiAnMzAwcHgnXG5cdFx0XHRcdGZvbnRTaXplOiAnMzBweCdcblx0XHRcdFx0bGluZUhlaWdodDogJzMwcHgnXG5cblx0XHRcdFx0J0AjYWJjKG9yaWVudGF0aW9uOmxhbmRzY2FwZSknOlxuXHRcdFx0XHRcdGZvbnRXZWlnaHQ6IDYwMFxuXG5cdFx0XHRcdCdAI2FiYyhvcmllbnRhdGlvbjpwb3J0cmFpdCknOlxuXHRcdFx0XHRcdGZvbnRXZWlnaHQ6IDUwMFxuXHRcdFx0XHRcblx0XHRcdFx0J0AjZGVmKHBvc2l0aW9uOnJlbGF0aXZlKSc6XG5cdFx0XHRcdFx0dG9wOiAnMjBweCdcblxuXHRcdFx0XHQnQCNkZWYobWF4LXdpZHRoOjM1MCknOlxuXHRcdFx0XHRcdHpJbmRleDogM1xuXHRcdFx0XHRcdGZvbnRTaXplOiAnMzNweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAI2doaShtYXgtd2lkdGg6NTAwLCBtaW4taGVpZ2h0OjQwMCknOlxuXHRcdFx0XHRcdHpJbmRleDogNFxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjdweCdcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzdweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAI2FiYyh6SW5kZXg6NyknOlxuXHRcdFx0XHRcdGxpbmVIZWlnaHQ6ICcxNXB4J1xuXG5cblx0XHRcdHBhcmVudC5zdHlsZSh3aWR0aDo0MDAsIGhlaWdodDozMDApXG5cdFx0XHRwYXJlbnQuY2hpbGQuZGVmLnN0eWxlKHdpZHRoOjQwMCwgaGVpZ2h0OjMwMClcblx0XHRcdHBhcmVudC5jaGlsZC5naGkuc3R5bGUod2lkdGg6NDAwLCBoZWlnaHQ6MzAwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudC5jaGlsZC5naGkpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMidcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzQwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzMwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRXZWlnaHQnKS50by5lcXVhbCAnNjAwJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdHBhcmVudC5zdHlsZSh3aWR0aDo0MDAsIGhlaWdodDo5MDAsIHBvc2l0aW9uOidyZWxhdGl2ZScpXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRXZWlnaHQnKS50by5lcXVhbCAnNTAwJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRcblx0XHRcdHBhcmVudC5jaGlsZC5kZWYuc3R5bGUocG9zaXRpb246J3JlbGF0aXZlJylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICczMHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICcyMHB4J1xuXG5cdFx0XHRwYXJlbnQuY2hpbGQuZGVmLnN0eWxlKHdpZHRoOjM0OSwgaGVpZ2h0OjQyMClcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzMnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICczM3B4J1xuXHRcdFx0XG5cdFx0XHRwYXJlbnQuY2hpbGQuZ2hpLnN0eWxlKHdpZHRoOjQ1MCwgaGVpZ2h0OjQyMClcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczN3B4J1xuXHRcdFx0XG5cdFx0XHRwYXJlbnQuc3R5bGUoekluZGV4OjcpXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTVweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblxuXG5cdFx0dGVzdCBcIk5lc3RlZCBtZWRpYSBxdWVyaWVzXCIsICgpLT5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTAwMCwgOTAwKVxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0ekluZGV4OiAyXG5cblx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdG1hcmdpblJpZ2h0OiA1XG5cdFx0XHRcdFx0J0B3aW5kb3cob3JpZW50YXRpb246bGFuZHNjYXBlKSc6XG5cdFx0XHRcdFx0XHRtYXJnaW5SaWdodDogNlxuXG5cdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOnBvcnRyYWl0KSc6XG5cdFx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0XHRtYXJnaW5SaWdodDogN1xuXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICcwcHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnNnB4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDkwMCwgMTAwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblJpZ2h0JykudG8uZXF1YWwgJzVweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgxMDAwLCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICc2cHgnXG5cblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblJpZ2h0JykudG8uZXF1YWwgJzZweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5MDAsIDEwMDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICc3cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTAwMCwgOTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnNnB4J1xuXG5cblxuXG5cblxuXHRzdWl0ZSBcIlRyYXZlcnNhbFwiLCAoKS0+XG5cdFx0dGVzdCBcIkNoaWxkcmVuXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgRG9tLmRpdigpLCAnU29tZSBUZXh0JylcblxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LmVsZW1lbnRDaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYuYXBwZW5kKERvbS5zcGFuKCkpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChkaXYuZWxlbWVudENoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYuZWwuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCg0KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbGVtZW50Q2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoNClcblxuXHRcdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHNwYW5BID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cdFx0XHRzcGFuQiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuXHRcdFx0dGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdzb21lVGV4dE5vZGUnKVxuXHRcdFx0Y29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ3NvbWVDb21tZW50Tm9kZScpXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRDaGlsZChzcGFuQSlcblx0XHRcdGRpdi5hcHBlbmRDaGlsZChjb21tZW50KVxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKHNwYW5CKVxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKHRleHQpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCg0KVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cblx0XHRcdGRpdiQgPSBEb20oZGl2KVxuXHRcdFx0ZXhwZWN0KGRpdiQuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGRpdiQuZWxlbWVudENoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYkLmNoaWxkcmVuWzBdLnJhdykudG8uZXF1YWwoc3BhbkEpXG5cdFx0XHRleHBlY3QoZGl2JC5jaGlsZHJlblsxXS5yYXcpLnRvLmVxdWFsKHNwYW5CKVxuXHRcdFx0ZXhwZWN0KGRpdiQuY2hpbGRyZW5bMl0ucmF3KS50by5lcXVhbCh0ZXh0KVxuXG5cblx0XHR0ZXN0IFwiUGFyZW50XCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KG51bGwsIERvbS5kaXYoKSwgJ1NvbWUgVGV4dCcpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLmRpdigpXG5cblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5wYXJlbnQpLnRvLmVxdWFsIEFcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuWzBdLmVsLnBhcmVudE5vZGUpLnRvLmVxdWFsIEEuZWxcblxuXHRcdFx0Qi5hcHBlbmQoQSlcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwgQlxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0ucGFyZW50KS50by5lcXVhbCBBXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC5wYXJlbnROb2RlKS50by5lcXVhbCBBLmVsXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXSkudG8uZXF1YWwoQSlcblxuXHRcdFx0Qy5hcHBlbmQoQSlcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwgQ1xuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0ucGFyZW50KS50by5lcXVhbCBBXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC5wYXJlbnROb2RlKS50by5lcXVhbCBBLmVsXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoQy5jaGlsZHJlblswXSkudG8uZXF1YWwoQSlcblxuXG5cdFx0dGVzdCBcIlBhcmVudHNcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhCKVxuXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQuZWwpLnRvLmVxdWFsKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKEEpXG5cdFx0XHRleHBlY3QoQy5wYXJlbnQpLnRvLmVxdWFsKEIpXG5cblx0XHRcdGV4cGVjdChBLnBhcmVudHMubGVuZ3RoKS50by5lcXVhbChCLnBhcmVudHMubGVuZ3RoLTEpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnRzLmxlbmd0aCkudG8uZXF1YWwoQy5wYXJlbnRzLmxlbmd0aC0xKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50c1swXSkudG8uZXF1YWwoQSlcblx0XHRcdGV4cGVjdChDLnBhcmVudHNbMF0pLnRvLmVxdWFsKEIpXG5cdFx0XHRleHBlY3QoQy5wYXJlbnRzLmxlbmd0aCkudG8uZXF1YWwoNSlcblx0XHRcdGV4cGVjdChDLnBhcmVudHMuc2xpY2UoLTEpWzBdLmVsKS50by5lcXVhbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpXG5cblxuXHRcdHN1aXRlIFwiUGFyZW50IE1hdGNoaW5nXCIsICgpLT5cblx0XHRcdHRlYXJkb3duICgpLT4gQGVscy5BLmRldGFjaCgpXG5cdFx0XHRzdWl0ZVNldHVwICgpLT5cblx0XHRcdFx0QSA9IERvbS5zZWN0aW9uKHJlZjonQScpXG5cdFx0XHRcdEIgPSBEb20uZGl2KHJlZjonQicpLmFwcGVuZFRvKEEpXG5cdFx0XHRcdEMgPSBEb20uZGl2KHJlZjonQycpLmFwcGVuZFRvKEIpXG5cdFx0XHRcdEQgPSBEb20uc3BhbihyZWY6J0QnKS5hcHBlbmRUbyhDKVxuXHRcdFx0XHRAZWxzID0ge0EsQixDLER9XG5cdFx0XHRcdFxuXHRcdFx0dGVzdCBcImZ1bmN0aW9uIGZpbHRlclwiLCAoKS0+XG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50cykudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcobnVsbCkpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcoQikpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKCktPiBmYWxzZSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRNYXRjaGluZyAoZWwpLT4gZWwgaXMgQikudG8uZXF1YWwoQilcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKGVsKS0+IGVsIGlzIEEpLnRvLmVxdWFsKEEpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nIChlbCktPiBlbCBpcyBDKS50by5lcXVhbChDKVxuXG5cdFx0XHRcdEEuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKGVsKS0+IGVsLnJhdyBpcyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnRvLmVxdWFsKERvbShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKVxuXG5cdFx0XHR0ZXN0IFwicmVmIGZpbHRlclwiLCAoKS0+XG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50cykudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgJ2JhZFJlZicpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgJ0InKS50by5lcXVhbChCKVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRNYXRjaGluZyAnQScpLnRvLmVxdWFsKEEpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nICdDJykudG8uZXF1YWwoQylcblxuXG5cdFx0c3VpdGUgXCJQYXJlbnRzIFVudGlsXCIsICgpLT5cblx0XHRcdHN1aXRlU2V0dXAgKCktPlxuXHRcdFx0XHRBID0gRG9tLnNlY3Rpb24ocmVmOidBJylcblx0XHRcdFx0QiA9IERvbS5kaXYocmVmOidCJykuYXBwZW5kVG8oQSlcblx0XHRcdFx0QyA9IERvbS5kaXYocmVmOidDJykuYXBwZW5kVG8oQilcblx0XHRcdFx0RCA9IERvbS5zcGFuKHJlZjonRCcpLmFwcGVuZFRvKEMpXG5cdFx0XHRcdEBlbHMgPSB7QSxCLEMsRH1cblx0XHRcdFxuXHRcdFx0dGVzdCBcImZ1bmN0aW9uIGZpbHRlclwiLCAoKS0+XG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50cykudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsKG51bGwpKS50by5lcWwgW0MsQixBXVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwoKSkudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsIChlbCktPiBlbCBpcyBBKS50by5lcWwgW0MsQl1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsIChlbCktPiBlbCBpcyBCKS50by5lcWwgW0NdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHNVbnRpbCAoZWwpLT4gZmFsc2UpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRcblxuXHRcdFx0dGVzdCBcInJlZiBmaWx0ZXJcIiwgKCktPiBcblx0XHRcdFx0e0EsQixDLER9ID0gQGVsc1xuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwgJ0EnKS50by5lcWwgW0MsQl1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsICdCJykudG8uZXFsIFtDXVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwgJ2JhZFJlZicpLnRvLmVxbCBbQyxCLEFdXG5cblxuXHRcdHRlc3QgXCJOZXh0XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgQT1Eb20uZGl2KCksIEI9RG9tLmRpdigpLCBDPURvbS5kaXYoKSwgRD1Eb20uZGl2KCksIEU9RG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoQS5uZXh0KS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEMubmV4dCkudG8uZXF1YWwoRClcblx0XHRcdGV4cGVjdChFLm5leHQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChCLm5leHRBbGwpLnRvLmVxbChbQyxELEVdKVxuXG5cdFx0XG5cdFx0dGVzdCBcIk5leHQgRWxlbWVudFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsIEE9RG9tLmRpdigpLCBCPURvbS50ZXh0KCksIEM9RG9tLmRpdigpLCBEPURvbS50ZXh0KCksIEU9RG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoQS5uZXh0KS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEEubmV4dEVsKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEIubmV4dEVsKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEMubmV4dEVsKS50by5lcXVhbChFKVxuXHRcdFx0ZXhwZWN0KEUubmV4dEVsKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoQS5uZXh0RWxBbGwpLnRvLmVxbChbQyxFXSlcblxuXG5cdFx0dGVzdCBcIlByZXZcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCBBPURvbS5kaXYoKSwgQj1Eb20uZGl2KCksIEM9RG9tLmRpdigpLCBEPURvbS5kaXYoKSwgRT1Eb20uZGl2KCkpXG5cblx0XHRcdGV4cGVjdChFLnByZXYpLnRvLmVxdWFsKEQpXG5cdFx0XHRleHBlY3QoQy5wcmV2KS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEEucHJldikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEQucHJldkFsbCkudG8uZXFsKFtDLEIsQV0pXG5cblx0XHRcblx0XHR0ZXN0IFwiUHJldiBFbGVtZW50XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgQT1Eb20uZGl2KCksIEI9RG9tLnRleHQoKSwgQz1Eb20uZGl2KCksIEQ9RG9tLnRleHQoKSwgRT1Eb20uZGl2KCkpXG5cblx0XHRcdGV4cGVjdChFLnByZXYpLnRvLmVxdWFsKEQpXG5cdFx0XHRleHBlY3QoRS5wcmV2RWwpLnRvLmVxdWFsKEMpXG5cdFx0XHRleHBlY3QoRC5wcmV2RWwpLnRvLmVxdWFsKEMpXG5cdFx0XHRleHBlY3QoQy5wcmV2RWwpLnRvLmVxdWFsKEEpXG5cdFx0XHRleHBlY3QoQS5wcmV2RWwpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChFLnByZXZFbEFsbCkudG8uZXFsKFtDLEFdKVxuXG5cblx0XHR0ZXN0IFwiU2libGluZ3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCBBPURvbS5kaXYoKSwgQj1Eb20udGV4dCgpLCBDPURvbS5kaXYoKSwgRD1Eb20udGV4dCgpLCBFPURvbS5kaXYoKSlcblxuXHRcdFx0ZXhwZWN0KEMuc2libGluZ3MpLnRvLmVxbChDLnByZXZBbGwucmV2ZXJzZSgpLmNvbmNhdChDLm5leHRBbGwpKVxuXHRcdFx0ZXhwZWN0KEMuc2libGluZ3MpLnRvLmVxbChbQSxCLEQsRV0pXG5cdFx0XHRleHBlY3QoQy5lbGVtZW50U2libGluZ3MpLnRvLmVxbChbQSxFXSlcblx0XHRcdGV4cGVjdChCLmVsZW1lbnRTaWJsaW5ncykudG8uZXFsKFtBLEMsRV0pXG5cblxuXHRcdHRlc3QgXCJGaXJzdC9MYXN0IENoaWxkXCIsICgpLT5cblx0XHRcdG1haW4gPSBET00uZGl2KGlkOidtYWluJylcblx0XHRcdGRpdkEgPSBET00uZGl2KGlkOidkaXZBJykuYXBwZW5kVG8obWFpbilcblx0XHRcdGRpdkIgPSBET00uZGl2KGlkOidkaXZCJykuYXBwZW5kVG8obWFpbilcblx0XHRcdGRpdkMgPSBET00uZGl2KGlkOidkaXZDJykuYXBwZW5kVG8obWFpbilcblx0XHRcdGRpdkJBID0gRE9NLmRpdihpZDonZGl2QkEnKS5hcHBlbmRUbyhkaXZCKVxuXHRcdFx0ZGl2QkIgPSBET00uZGl2KGlkOidkaXZCQicpLmFwcGVuZFRvKGRpdkIpXG5cblx0XHRcdGV4cGVjdChtYWluLmZpcnN0Q2hpbGQpLnRvLmVxdWFsIGRpdkFcblx0XHRcdGV4cGVjdChtYWluLmxhc3RDaGlsZCkudG8uZXF1YWwgZGl2Q1xuXHRcdFx0ZXhwZWN0KGRpdkEuZmlyc3RDaGlsZCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2QS5sYXN0Q2hpbGQpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdkIuZmlyc3RDaGlsZCkudG8uZXF1YWwgZGl2QkFcblx0XHRcdGV4cGVjdChkaXZCLmxhc3RDaGlsZCkudG8uZXF1YWwgZGl2QkJcblxuXG5cdFx0dGVzdCBcIkNoaWxkIChieSByZWYpXCIsICgpLT5cblx0XHRcdGRpdkEgPSBcblx0XHRcdFx0RG9tLmRpdiB7aWQ6J2RpdkEnfSxcblx0XHRcdFx0XHREb20uZGl2IHtpZDonY2hpbGRBJ30sXG5cdFx0XHRcdFx0XHREb20uc3BhbiB7cmVmOidjaGlsZEFfMSd9XG5cdFx0XHRcdFx0XHREb20uZGl2IHtyZWY6J2NoaWxkQV8yJywgaWQ6J2NoaWxkQV8yJ31cblx0XHRcdFx0XHREb20uZGl2IHt9LFxuXHRcdFx0XHRcdFx0RG9tLnNwYW4ge3JlZjonY2hpbGRCXzEnfVxuXHRcdFx0XHRcdFx0RG9tLnRleHQge2lkOidjaGlsZEJfMid9LCAnVGhlIFRleHQnXG5cblxuXHRcdFx0ZGl2QiA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7aWQ6J2RpdkInfSxcblx0XHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRBJywgc3R5bGU6e2NvbG9yOidwaW5rJ319LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzMnLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLnNwYXduKClcblxuXHRcdFx0ZGl2QyA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkMnLFxuXHRcdFx0XHRcdFsnZGl2JyxcdHJlZjonY2hpbGRBJyxcblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZCJ11cblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZDJ11cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLFx0cmVmOidjaGlsZEInLFxuXHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkInXVxuXHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkMnXVxuXHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkQnLFxuXHRcdFx0XHRcdFx0XHRbJ2RpdicsIHJlZjonY2hpbGRCJ11cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdCkuc3Bhd24oKVxuXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQSkudG8uZXF1YWwoZGl2QS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbChkaXZBLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzIpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMykudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRCKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwoZGl2QS5jaGlsZHJlblsxXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbChkaXZBLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRCXzIudHlwZSkudG8uZXF1YWwoJ3RleHQnKVxuXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQSkudG8uZXF1YWwoZGl2Qi5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbChkaXZCLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRBXzIpLnRvLmVxdWFsKGRpdkIuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEFfMykudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRCKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwoZGl2Qi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbChkaXZCLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRBLnN0eWxlKCdjb2xvcicpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQS5zdHlsZVNhZmUoJ2NvbG9yJykpLm5vdC50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQS5zdHlsZVNhZmUoJ2NvbG9yJykubGVuZ3RoID49IDQpLnRvLmJlLnRydWVcblxuXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEEucmF3LmdldEF0dHJpYnV0ZSgnaWQnKSkudG8uZXF1YWwoJ2NoaWxkQScpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEEucmF3LmdldEF0dHJpYnV0ZSgnZGF0YS1yZWYnKSkudG8uZXF1YWwoJ2NoaWxkQScpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMS5yYXcuZ2V0QXR0cmlidXRlKCdpZCcpKS50by5lcXVhbChudWxsKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzEucmF3LmdldEF0dHJpYnV0ZSgnZGF0YS1yZWYnKSkudG8uZXF1YWwoJ2NoaWxkQV8xJylcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQV8yLnJhdy5nZXRBdHRyaWJ1dGUoJ2lkJykpLnRvLmVxdWFsKCdjaGlsZEFfMicpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMi5yYXcuZ2V0QXR0cmlidXRlKCdkYXRhLXJlZicpKS50by5lcXVhbCgnY2hpbGRBXzInKVxuXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5jaGlsZEIpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5kaXZCKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGQuZGl2QykudG8uZXF1YWwoZGl2Qylcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkLmRpdkQpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMl0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZHJlblswXS5jaGlsZC5kaXZCKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGRyZW5bMF0uY2hpbGQuZGl2QykudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblswXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkLmRpdkIpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZC5kaXZDKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGRyZW5bMV0uY2hpbGQuZGl2RCkudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZHJlblsyXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkLmNoaWxkQikudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblsxXSlcblxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRBKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuZGl2QSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0XG5cdFx0XHRzYW5kQm94LmFwcGVuZChkaXZBKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRBKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuZGl2QSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGRmLmRpdkEpLnRvLmVxdWFsKGRpdkEpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwoZGl2QS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkLmRpdkEpLnRvLmVxdWFsKGRpdkEpXG5cblx0XHRcdG5ld0NoaWxkID0gRG9tLmRpdihyZWY6J25ld0NoaWxkJylcblx0XHRcdG5ld0NoaWxkQ2hpbGQgPSBEb20uZGl2KHJlZjonbmV3Q2hpbGRDaGlsZCcpXG5cdFx0XHRleHBlY3QobmV3Q2hpbGQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkQ2hpbGQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwobmV3Q2hpbGRDaGlsZClcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhuZXdDaGlsZENoaWxkLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cblx0XHRcdG5ld0NoaWxkQ2hpbGQuYXBwZW5kVG8obmV3Q2hpbGQpXG5cdFx0XHRleHBlY3QobmV3Q2hpbGQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkLmNoaWxkZi5uZXdDaGlsZENoaWxkKS50by5lcXVhbChuZXdDaGlsZENoaWxkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkLmNoaWxkLm5ld0NoaWxkQ2hpbGQpLnRvLmVxdWFsKG5ld0NoaWxkQ2hpbGQpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMobmV3Q2hpbGRDaGlsZC5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCgxKVxuXG5cdFx0XHRuZXdQYXJlbnQgPSBEb20uZGl2KHJlZjonbmV3UGFyZW50Jylcblx0XHRcdG5ld0NoaWxkLmFwcGVuZFRvKG5ld1BhcmVudClcblx0XHRcdGV4cGVjdChuZXdQYXJlbnQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwobmV3Q2hpbGRDaGlsZClcblxuXG5cdFx0dGVzdCBcIkluZGV4XCIsICgpLT5cblx0XHRcdHNlY3Rpb24gPVxuXHRcdFx0XHREb20uc2VjdGlvbihudWxsLFxuXHRcdFx0XHRcdGNoaWxkQSA9IERvbS5kaXYoKVxuXHRcdFx0XHRcdGNoaWxkQiA9IERvbS5kaXYoKVxuXHRcdFx0XHRcdGNoaWxkQyA9IERvbS5zcGFuKClcblx0XHRcdFx0XHRjaGlsZEQgPSBEb20udGV4dCgpXG5cdFx0XHRcdFx0Y2hpbGRFID0gRG9tLnNwYW4oKVxuXHRcdFx0XHRcdGNoaWxkRiA9IERvbS5kaXYoKVxuXHRcdFx0XHQpXG5cblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXgpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXgpLnRvLmVxdWFsIDVcblxuXHRcdFx0Y2hpbGRDLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4KS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4KS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4KS50by5lcXVhbCA0XG5cdFx0XHRleHBlY3QoY2hpbGRDLmluZGV4KS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCJJbmRleCAoYnkgdHlwZSlcIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9XG5cdFx0XHRcdERvbS5zZWN0aW9uKG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRBID0gRG9tLmRpdigpXG5cdFx0XHRcdFx0Y2hpbGRCID0gRG9tLmRpdigpXG5cdFx0XHRcdFx0Y2hpbGRDID0gRG9tLnNwYW4oKVxuXHRcdFx0XHRcdGNoaWxkRCA9IERvbS50ZXh0KClcblx0XHRcdFx0XHRjaGlsZEUgPSBEb20uc3BhbigpXG5cdFx0XHRcdFx0Y2hpbGRGID0gRG9tLnRleHQoKVxuXHRcdFx0XHRcdGNoaWxkRyA9IERvbS5kaXYoKVxuXHRcdFx0XHQpXG5cblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXhUeXBlKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4VHlwZSkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleFR5cGUpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEcuaW5kZXhUeXBlKS50by5lcXVhbCAyXG5cblx0XHRcdGNoaWxkQy5kZXRhY2goKVxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleFR5cGUpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXhUeXBlKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4VHlwZSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRy5pbmRleFR5cGUpLnRvLmVxdWFsIDJcblxuXHRcdFx0Y2hpbGRBLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4VHlwZSkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleFR5cGUpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXhUeXBlKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRHLmluZGV4VHlwZSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5pbmRleFR5cGUpLnRvLmVxdWFsIG51bGxcblx0XHRcdGV4cGVjdChjaGlsZEMuaW5kZXhUeXBlKS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCJJbmRleCAoYnkgcmVmKVwiLCAoKS0+XG5cdFx0XHRzZWN0aW9uID1cblx0XHRcdFx0RG9tLnNlY3Rpb24obnVsbCxcblx0XHRcdFx0XHRjaGlsZEEgPSBEb20uZGl2KHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEIgPSBEb20uZGl2KHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEMgPSBEb20uc3BhbihyZWY6J2RlZicpXG5cdFx0XHRcdFx0Y2hpbGREID0gRG9tLnRleHQocmVmOidhYmMnKVxuXHRcdFx0XHRcdGNoaWxkRSA9IERvbS5zcGFuKHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEYgPSBEb20udGV4dChyZWY6J2RlZicpXG5cdFx0XHRcdFx0Y2hpbGRHID0gRG9tLmRpdihyZWY6J2FiYycpXG5cdFx0XHRcdClcblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleFJlZikudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleFJlZikudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleFJlZikudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRy5pbmRleFJlZikudG8uZXF1YWwgNFxuXG5cdFx0XHRjaGlsZEMuZGV0YWNoKClcblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXhSZWYpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXhSZWYpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXhSZWYpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChjaGlsZEcuaW5kZXhSZWYpLnRvLmVxdWFsIDRcblxuXHRcdFx0Y2hpbGRBLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4UmVmKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4UmVmKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4UmVmKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRHLmluZGV4UmVmKS50by5lcXVhbCAzXG5cdFx0XHRleHBlY3QoY2hpbGRBLmluZGV4UmVmKS50by5lcXVhbCBudWxsXG5cdFx0XHRleHBlY3QoY2hpbGRDLmluZGV4UmVmKS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCJRdWVyeVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge2NsYXNzOidkaXYtb25lJywgYXR0cnM6bmFtZTonYWJjMTIzJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7Y2xhc3M6J2NoaWxkQScsIHN0eWxlOntjb2xvcjoncGluayd9fSxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydzcGFuJywge2NsYXNzOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydkaXYnLCB7Y2xhc3M6J2NoaWxkQV8yJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JywgY2xhc3NOYW1lOidjaGlsZEInLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRCXzEnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydzZWN0aW9uJywgY2xhc3NOYW1lOidjaGlsZEInLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRCXzEnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdCkuc3Bhd24oKS5hcHBlbmRUbyhzYW5kQm94ID0gRG9tKHNhbmRib3gpKVxuXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5ICcuY2hpbGRBJykudG8uZXF1YWwoZGl2LmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeSAnLmNoaWxkQicpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEJfMScpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEFfMScpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblswXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEFfMicpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblswXS5jaGlsZHJlblszXSlcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5ICcuZGl2LW9uZScpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5ICcuY2hpbGRCXzEnKS50by5lcXVhbChkaXYuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeSAnZGl2W25hbWU9XCJhYmMxMjNcIl0nKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeSAnc3BhbltuYW1lPVwiYWJjMTIzXCJdJykudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cblx0XHR0ZXN0IFwiUXVlcnlBbGxcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRbJ2RpdicsIHtjbGFzczonZGl2LW9uZScsIGF0dHJzOm5hbWU6J2FiYzEyMyd9LFxuXHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEEnLCBzdHlsZTp7Y29sb3I6J3BpbmsnfX0sXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEFfMid9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ2RpdicsIGNsYXNzTmFtZTonY2hpbGRCJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnc2VjdGlvbicsIGNsYXNzTmFtZTonY2hpbGRCJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLnNwYXduKCkuYXBwZW5kVG8oc2FuZEJveCA9IERvbShzYW5kYm94KSlcblxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQScpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblswXV0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5QWxsKCcuY2hpbGRCJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzFdLCBkaXYuY2hpbGRyZW5bMl1dKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQl8xJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdLCBkaXYuY2hpbGRyZW5bMl0uY2hpbGRyZW5bMF1dKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQV8xJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLCBkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0sIGRpdi5jaGlsZHJlblswXS5jaGlsZHJlblsyXV0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5QWxsKCcuY2hpbGRBXzInKS5lbGVtZW50cykudG8uZXFsKFtkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bM11dKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJy5kaXYtb25lJykuZWxlbWVudHMpLnRvLmVxbChbZGl2XSlcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5QWxsKCcuY2hpbGRCXzEnKS5lbGVtZW50cykudG8uZXFsKFtkaXYuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0sIGRpdi5jaGlsZHJlblsyXS5jaGlsZHJlblswXV0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeUFsbCgnZGl2W25hbWU9XCJhYmMxMjNcIl0nKS5lbGVtZW50cykudG8uZXFsKFtkaXZdKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJ3NwYW5bbmFtZT1cImFiYzEyM1wiXScpLmVsZW1lbnRzKS50by5lcWwoW10pXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJy5jaGlsZEJfMScpLnRleHQoJ2FiYzEyMycpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSwgZGl2LmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdXSlcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwoJ2FiYzEyM2FiYzEyMycpXG5cblxuXHRcdHRlc3QgXCJRdWVyeS9RdWVyeUFsbCBzaG9ydGN1dHNcIiwgKCktPlxuXHRcdFx0ZXhwZWN0KERvbS5xdWVyeSgnaGVhZCcpKS50by5lcXVhbChEb20oZG9jdW1lbnQpLnF1ZXJ5KCdoZWFkJykpXG5cdFx0XHRleHBlY3QoRG9tLnF1ZXJ5KCdib2R5JykpLnRvLmVxdWFsKERvbShkb2N1bWVudCkucXVlcnkoJ2JvZHknKSlcblx0XHRcdFxuXHRcdFx0YWxsQSA9IERvbS5xdWVyeUFsbCgnc2VjdGlvbicpLmVsZW1lbnRzXG5cdFx0XHRhbGxCID0gRG9tKGRvY3VtZW50KS5xdWVyeUFsbCgnc2VjdGlvbicpLmVsZW1lbnRzXG5cdFx0XHRleHBlY3QoYWxsQS5sZW5ndGgpLnRvLmVxdWFsKGFsbEIubGVuZ3RoKVxuXHRcdFx0Zm9yIGVsLGluZGV4IGluIGFsbEFcblx0XHRcdFx0ZXhwZWN0KGFsbEFbaW5kZXhdKS50by5lcXVhbChhbGxCW2luZGV4XSlcblx0XHRcdHJldHVyblxuXG5cblxuXHRzdWl0ZSBcIk1hbmlwdWxhdGlvblwiLCAoKS0+XG5cdFx0dGVzdCBcIi5hcHBlbmQoKVwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLnRleHQoKVxuXHRcdFx0RCA9IERvbS5kaXYoKVxuXHRcdFx0TWFpbkEgPSBEb20uZGl2KG51bGwsIEEsIEIsIEMsIEQpXG5cdFx0XHRNYWluQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShBLCBCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoKVxuXG5cdFx0XHRNYWluQi5hcHBlbmQoQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEIsIEMsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShBKVxuXG5cdFx0XHRDLmFwcGVuZFRvKE1haW5CKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQiwgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEEsIEMpXG5cblxuXG5cdFx0dGVzdCBcIi5wcmVwZW5kKClcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXHRcdFx0QyA9IERvbS50ZXh0KClcblx0XHRcdEQgPSBEb20uZGl2KClcblx0XHRcdE1haW5BID0gRG9tLmRpdihudWxsLCBBLCBCLCBDLCBEKVxuXHRcdFx0TWFpbkIgPSBEb20uZGl2KClcblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQSwgQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKClcblxuXHRcdFx0TWFpbkIucHJlcGVuZChBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEEpXG5cblx0XHRcdEMucHJlcGVuZFRvKE1haW5CKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQiwgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEMsIEEpXG5cblxuXHRcdHRlc3QgXCIuYWZ0ZXIoKVwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLnRleHQoKVxuXHRcdFx0RCA9IERvbS5kaXYoKVxuXHRcdFx0TWFpbkEgPSBEb20uZGl2KG51bGwsIEEsIEIsIEMsIEQpXG5cdFx0XHRNYWluQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShBLCBCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoKVxuXG5cdFx0XHRNYWluQi5hcHBlbmQoQilcblx0XHRcdEIuYWZ0ZXIoQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEMsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShCLCBBKVxuXG5cdFx0XHRDLmluc2VydEFmdGVyKEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQiwgQywgQSlcblxuXG5cdFx0dGVzdCBcIi5iZWZvcmUoKVwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLnRleHQoKVxuXHRcdFx0RCA9IERvbS5kaXYoKVxuXHRcdFx0TWFpbkEgPSBEb20uZGl2KG51bGwsIEEsIEIsIEMsIEQpXG5cdFx0XHRNYWluQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShBLCBCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoKVxuXG5cdFx0XHRNYWluQi5hcHBlbmQoQilcblx0XHRcdEIuYmVmb3JlKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQSwgQilcblxuXHRcdFx0Qy5pbnNlcnRCZWZvcmUoQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShBLCBDLCBCKVxuXG5cblx0XHR0ZXN0IFwiLmRldGFjaCgpXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudCA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJ0lubmVyIFRleHQgSGVyZScpXG5cdFx0XHRkaXYub24gJ2JlZXAnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS5ub3QudG8uZXhpc3Rcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2LmVtaXQoJ2JlZXAnKVxuXHRcdFx0ZXhwZWN0KHNhbmRib3guY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQuZWwpLnRvLmVxdWFsKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGRpdi5lbWl0KCdiZWVwJylcblx0XHRcdGV4cGVjdChzYW5kYm94LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS5ub3QudG8uZXhpc3Rcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblxuXHRcdHRlc3QgXCIucmVtb3ZlKClcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50ID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCAnSW5uZXIgVGV4dCBIZXJlJylcblx0XHRcdGRpdi5vbiAnYmVlcCcsICgpLT4gZW1pdENvdW50Kytcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLm5vdC50by5leGlzdFxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYuZW1pdCgnYmVlcCcpXG5cdFx0XHRleHBlY3Qoc2FuZGJveC5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudC5lbCkudG8uZXF1YWwoc2FuZGJveClcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblx0XHRcdGRpdi5yZW1vdmUoKVxuXHRcdFx0ZGl2LmVtaXQoJ2JlZXAnKVxuXHRcdFx0ZXhwZWN0KHNhbmRib3guY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLm5vdC50by5leGlzdFxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS5mYWxzZVxuXG5cblx0XHR0ZXN0IFwiLmVtcHR5KClcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qi5zdGF0ZSAnaGFwcHknLCBvblxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRleHBlY3QoQS5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cblx0XHRcdE1haW4uZW1wdHkoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKSgpXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChCLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cblx0XHR0ZXN0IFwiLndyYXAoKVwiLCAoKS0+XG5cdFx0XHRNYWluID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRCID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRDID0gRG9tLmRpdigpXG5cdFx0XHR3cmFwQSA9IERvbS5zZWN0aW9uKClcblx0XHRcdHdyYXBCID0gRG9tLnNlY3Rpb24oKVxuXHRcdFx0d3JhcEMgPSBEb20uc2VjdGlvbigpXG5cdFx0XHRBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRCLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRDLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHR3cmFwQS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHR3cmFwQi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHR3cmFwQy5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRcblx0XHRcdEEud3JhcCh3cmFwQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikod3JhcEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBBKShBKVxuXHRcdFx0XG5cdFx0XHRCLndyYXAod3JhcEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKShCKVxuXHRcdFx0XG5cdFx0XHRCLndyYXAod3JhcEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKSgpXG5cdFx0XHRcblx0XHRcdHdyYXBDLmFwcGVuZFRvKHdyYXBCKVxuXHRcdFx0Qy53cmFwKHdyYXBDKVxuXHRcdFx0Qy53cmFwKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikod3JhcEEsIHdyYXBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQSkoQSwgQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEIpKHdyYXBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQykoQylcblx0XHRcdFxuXHRcdFx0Qy53cmFwKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKSh3cmFwQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEMpKEMpXG5cblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChCLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChDLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3cmFwQS5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3cmFwQi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3cmFwQy5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblxuXG5cdFx0dGVzdCBcIi51bndyYXAoKVwiLCAoKS0+XG5cdFx0XHRNYWluID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLnByZXBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0RCA9IERvbS5kaXYoKS5hcHBlbmRUbyhDKVxuXHRcdFx0RSA9IERvbS5kaXYoKS5hcHBlbmRUbyhEKVxuXHRcdFx0QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0RC5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0RS5zdGF0ZSAnaGFwcHknLCBvblxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEIsIEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoRSlcblxuXHRcdFx0RS51bndyYXAoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShCLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXHRcdFx0Qi51bndyYXAoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShCLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXG5cdFx0XHRFLnVud3JhcCgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEIsIEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXHRcdFx0QS5pbnNlcnRBZnRlcihCKVxuXHRcdFx0Qy5hcHBlbmRUbyhBKVxuXHRcdFx0RC5hcHBlbmRUbyhBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShCLCBBLCBFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXG5cdFx0XHRELnVud3JhcCgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEIsIEMsIEQsIEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXG5cblx0XHR0ZXN0IFwiLnJlcGxhY2UoKVwiLCAoKS0+XG5cdFx0XHRNYWluID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRCID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRDID0gRG9tLmRpdigpLmFwcGVuZFRvKEEpXG5cdFx0XHREID0gRG9tLmRpdigpLmFwcGVuZFRvKEEpXG5cdFx0XHRFID0gRG9tLmRpdigpLmFwcGVuZFRvKEQpXG5cdFx0XHRcblx0XHRcdEEucmVwbGFjZSgpOyBFLnJlcGxhY2UoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoRSlcblx0XHRcdFxuXHRcdFx0Qy5yZXBsYWNlKEUpLmFwcGVuZFRvKEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEUsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXHRcdFx0XG5cdFx0XHRELnJlcGxhY2UoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQSwgQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cdFx0XHRcblx0XHRcdEIucmVwbGFjZShDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXHRcdFx0XG5cdFx0XHRBLnJlcGxhY2UoRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoRCwgQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblx0XHRcdFxuXHRcdFx0Qi5yZXBsYWNlKEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cblxuXHRcdHRlc3QgXCIuY2xvbmUoKVwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnQgPSAwXG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRvcHRzID0ge3N0eWxlOiAkYmFzZTp7d2lkdGg6JzM0cHgnfSwgJGhhcHB5OntoZWlnaHQ6Jzk5cHgnfSwgJHJlbGF4ZWQ6e29wYWNpdHk6JzAuNSd9fVxuXHRcdFx0QSA9IERvbS5kaXYob3B0cywgJ1NvbWUgSW5uZXIgVGV4dCcpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRBLm9uICdwcml2YXRlRXZlbnQnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRjaGlsZEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oQSlcblx0XHRcdGNoaWxkQiA9IERvbS5zcGFuKCkuYXBwZW5kVG8oQSlcblx0XHRcdEIgPSBBLmNsb25lKClcblxuXHRcdFx0QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRBLmVtaXQoJ3ByaXZhdGVFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEEucGFyZW50KS50by5lcXVhbChzYW5kQm94KVxuXHRcdFx0ZXhwZWN0KEEuY3NzICd3aWR0aCcpLnRvLmVxdWFsKCczNHB4Jylcblx0XHRcdGV4cGVjdChBLmNzcyAnaGVpZ2h0JykudG8uZXF1YWwoJzk5cHgnKVxuXHRcdFx0ZXhwZWN0KEEuY3NzICdvcGFjaXR5JykudG8uZXF1YWwoJzAuNScpXG5cdFx0XHRleHBlY3QoQS5zaWJsaW5ncy5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuWzFdKS50by5lcXVhbChjaGlsZEEpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblsyXSkudG8uZXF1YWwoY2hpbGRCKVxuXHRcdFx0ZXhwZWN0KEIpLm5vdC50by5lcXVhbChBKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRzYW5kQm94LmFwcGVuZChCKVxuXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKHNhbmRCb3gpXG5cdFx0XHRleHBlY3QoQi5jc3MgJ3dpZHRoJykudG8uZXF1YWwoJzM0cHgnKVxuXHRcdFx0ZXhwZWN0KEIuY3NzICdoZWlnaHQnKS50by5lcXVhbCgnOTlweCcpXG5cdFx0XHRleHBlY3QoQi5jc3MgJ29wYWNpdHknKS50by5lcXVhbCgnMScpXG5cdFx0XHRleHBlY3QoQi5zaWJsaW5ncy5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXS5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdGV4cGVjdChCLmNoaWxkcmVuWzBdKS5ub3QudG8uZXF1YWwoQS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChCLmNoaWxkcmVuWzFdKS5ub3QudG8uZXF1YWwoY2hpbGRBKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW5bMl0pLm5vdC50by5lcXVhbChjaGlsZEIpXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLmZhbHNlXG5cblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDEpXG5cdFx0XHRCLmVtaXQoJ3ByaXZhdGVFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0XG5cdFx0XHRBLm9mZigpXG5cdFx0XHRBLmVtaXQoJ3ByaXZhdGVFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0Qi5lbWl0KCdwcml2YXRlRXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMylcblxuXG5cdFx0dGVzdCBcIi5wcm9wKCkgLSBlbGVtZW50IHByb3BlcnR5IGdldHRlci9zZXR0ZXJcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYucHJvcCAnbXlQcm9wJykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcsIDE5MikudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcpLnRvLmVxdWFsIDE5MlxuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdteVByb3AnLCAnMTkyJykudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcpLnRvLmVxdWFsICcxOTInXG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ2Fub3RoZXJQcm9wJywgWzEsMiwzXSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ2Fub3RoZXJQcm9wJykudG8uZXFsIFsxLDIsM11cblx0XHRcdGV4cGVjdChkaXYuZWwubXlQcm9wKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5hbm90aGVyUHJvcCkudG8uZXFsIFsxLDIsM10gXG5cblx0XHRcdGRpdi5lbC5sYXN0UHJvcCA9IDk5OTlcblx0XHRcdGV4cGVjdChkaXYuZWwubGFzdFByb3ApLnRvLmVxdWFsIDk5OTlcblx0XHRcdGV4cGVjdChkaXYucHJvcCAnbGFzdFByb3AnKS50by5lcXVhbCA5OTk5XG5cblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhkaXYuZWwpKS5ub3QudG8uY29udGFpbigncHJvbWlzZUlzTGFzdCcpXG5cdFx0XHRcblx0XHRcdGRpdi5wcm9wICdwcm9taXNlSXNMYXN0JywgJ292ZXI5aydcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhkaXYuZWwpKS50by5jb250YWluKCdwcm9taXNlSXNMYXN0Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnByb3AgJ3Byb21pc2VJc0xhc3QnLCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhkaXYuZWwpKS50by5jb250YWluKCdwcm9taXNlSXNMYXN0Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnByb3AgJ3Byb21pc2VJc0xhc3QnLCBudWxsXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoZGl2LmVsKSkudG8uY29udGFpbigncHJvbWlzZUlzTGFzdCcpXG5cblx0XHRcdGRpdi5wcm9wIHthYmM6MTIzLCBkZWY6NDU2fVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5hYmMpLnRvLmVxdWFsIDEyM1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5kZWYpLnRvLmVxdWFsIDQ1NlxuXG5cblx0XHR0ZXN0IFwiLmF0dHIoKSAtIGVsZW1lbnQgYXR0cmlidXRlIGdldHRlci9zZXR0ZXJcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYuYXR0ciAnbXlBdHRyJykudG8uZXF1YWwgbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInLCAxOTIpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInLCAnMTkyJykudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ215QXR0cicpLnRvLmVxdWFsICcxOTInXG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ2Fub3RoZXJBdHRyJywgWzEsMiwzXSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ2Fub3RoZXJBdHRyJykudG8uZXF1YWwgJzEsMiwzJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ215QXR0cicpLnRvLmVxdWFsICcxOTInXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnYW5vdGhlckF0dHInKS50by5lcWwgJzEsMiwzJ1xuXG5cdFx0XHRkaXYuZWwuc2V0QXR0cmlidXRlICdsYXN0QXR0cicsIDk5OTlcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdsYXN0QXR0cicpLnRvLmVxdWFsICc5OTk5J1xuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdsYXN0QXR0cicpLnRvLmVxdWFsICc5OTk5J1xuXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAncHJvbWlzZUlzTGFzdCcpLnRvLmVxdWFsIG51bGxcblx0XHRcdFxuXHRcdFx0ZGl2LmF0dHIgJ3Byb21pc2VJc0xhc3QnLCAnb3ZlcjlrJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ3Byb21pc2VJc0xhc3QnKS50by5lcXVhbCAnb3ZlcjlrJ1xuXHRcdFx0XG5cdFx0XHRkaXYuYXR0ciAncHJvbWlzZUlzTGFzdCdcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdwcm9taXNlSXNMYXN0JykudG8uZXF1YWwgJ292ZXI5aydcblx0XHRcdFxuXHRcdFx0ZGl2LmF0dHIgJ3Byb21pc2VJc0xhc3QnLCBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAncHJvbWlzZUlzTGFzdCcpLnRvLmVxdWFsIG51bGxcblxuXHRcdFx0ZGl2LmF0dHIge2FiYzoxMjMsIGRlZjo0NTZ9XG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnYWJjJykudG8uZXF1YWwgJzEyMydcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdkZWYnKS50by5lcXVhbCAnNDU2J1xuXG5cdFx0XHRkaXYuYXR0ciB7YWJjOjEyMywgZGVmOm51bGx9XG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnYWJjJykudG8uZXF1YWwgJzEyMydcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdkZWYnKS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCIuaHRtbCAtIGlubmVySFRNTCBnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgRG9tLmRpdigpLCAnU29tZSB0ZXh0JywgRG9tLnNwYW4oKSwgRG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoNClcblx0XHRcdGV4cGVjdChkaXYuaHRtbCkudG8uZXF1YWwoZGl2LmVsLmlubmVySFRNTClcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCg0KVxuXG5cdFx0XHRkaXYuaHRtbCA9ICc8c2VjdGlvbiBJRD1cInRlc3RcIj48L3NlY3Rpb24+J1xuXHRcdFx0ZXhwZWN0KGRpdi5odG1sKS50by5lcXVhbCgnPHNlY3Rpb24gaWQ9XCJ0ZXN0XCI+PC9zZWN0aW9uPicpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW5bMF0uZWwuaWQpLnRvLmVxdWFsKCd0ZXN0Jylcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW5bMF0uZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ3NlY3Rpb24nKVxuXG5cblx0XHR0ZXN0IFwiLnRleHQgLSB0ZXh0Q29udGVudCBnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJ1NvbWUgdGV4dCcsIERvbS5zcGFuKG51bGwsICdJbm5lciBUZXh0JykpXG5cblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbChkaXYuZWwudGV4dENvbnRlbnQpXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsKCdTb21lIHRleHRJbm5lciBUZXh0Jylcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYudGV4dCA9ICduZXdUZXh0J1xuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCgnbmV3VGV4dCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnRleHRDb250ZW50KS50by5lcXVhbCgnbmV3VGV4dCcpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW5bMF0uZWwubm9kZVR5cGUpLnRvLmVxdWFsKDMpXG5cblxuXHRcdHRlc3QgXCIuYWRkQ2xhc3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBjbGFzczonc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LnJhdy5jbGFzc05hbWUgPSBkaXYucmF3LmNsYXNzTmFtZS5yZXBsYWNlICduZXctc2VsZWN0b3InLCAnICdcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciAgJ1xuXHRcdFx0XG5cdFx0XHRkaXYuYWRkQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3IgbmV3LXNlbGVjdG9yJ1xuXHRcdFx0XG5cdFx0XHRkaXYuYWRkQ2xhc3MoJy5wZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCdwZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3RvciBwZXJpb2QnXG5cblxuXHRcdHRlc3QgXCIucmVtb3ZlQ2xhc3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBjbGFzczonc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3RvcidcblxuXHRcdFx0ZGl2LnJlbW92ZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3InXG5cdFx0XHRcdFx0XHRcblx0XHRcdGRpdi5yZW1vdmVDbGFzcygnc29tZS1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJ3BlcmlvZCcpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJy5wZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIGFubm95aW5nLV8tc2VsZWN0b3InXG5cblxuXHRcdHRlc3QgXCIudG9nZ2xlQ2xhc3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBjbGFzczonc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3RvcidcblxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3IgbmV3LXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ3NvbWUtc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCdzb21lLXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3Igc29tZS1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCdwZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBzb21lLXNlbGVjdG9yIHBlcmlvZCdcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCcucGVyaW9kJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciBhbm5veWluZy1fLXNlbGVjdG9yIHNvbWUtc2VsZWN0b3IgcGVyaW9kJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ2Fubm95aW5nLV8tc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIHNvbWUtc2VsZWN0b3IgcGVyaW9kJ1xuXG5cblx0XHR0ZXN0IFwiLnNldFJlZlwiLCAoKS0+XG5cdFx0XHRlbCA9IERPTS5kaXYocmVmOiduYW1lMScpXG5cdFx0XHRleHBlY3QoZWwucmVmKS50by5lcXVhbCAnbmFtZTEnXG5cdFx0XHRleHBlY3QoZWwub3B0aW9ucy5yZWYpLnRvLmVxdWFsICduYW1lMSdcblx0XHRcdGV4cGVjdChlbC5hdHRyICdkYXRhLXJlZicpLnRvLmVxdWFsICduYW1lMSdcblxuXHRcdFx0ZWwuc2V0UmVmICduYW1lMidcblx0XHRcdGV4cGVjdChlbC5yZWYpLnRvLmVxdWFsICduYW1lMidcblx0XHRcdGV4cGVjdChlbC5vcHRpb25zLnJlZikudG8uZXF1YWwgJ25hbWUyJ1xuXHRcdFx0ZXhwZWN0KGVsLmF0dHIgJ2RhdGEtcmVmJykudG8uZXF1YWwgJ25hbWUyJ1xuXG5cblxuXG5cdFx0dGVzdCBcIkFwcGVuZGluZy9wcmVwZW5kaW5nIGVsZW1lbnRzIHRvIGEgdGV4dCBub2RlIHNob3VsZCBkbyBub3RoaW5nXCIsICgpLT5cblx0XHRcdHRleHQgPSBEb20udGV4dCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0ZXh0LnRleHQpLnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KHRleHQucmF3LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgwKVxuXG5cdFx0XHR0ZXh0LmFwcGVuZChEb20udGV4dCgnZGVmJykpXG5cdFx0XHRleHBlY3QodGV4dC50ZXh0KS50by5lcXVhbCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0ZXh0LnJhdy5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMClcblxuXHRcdFx0dGV4dC5wcmVwZW5kKERvbS5kaXYobnVsbCwgJ2RlZicpKVxuXHRcdFx0ZXhwZWN0KHRleHQudGV4dCkudG8uZXF1YWwoJ2FiYzEyMycpXG5cdFx0XHRleHBlY3QodGV4dC5yYXcuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJzQ1NicpXG5cdFx0XHRkaXYuYXBwZW5kVG8odGV4dClcblx0XHRcdGV4cGVjdCh0ZXh0LnRleHQpLnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KHRleHQucmF3LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXG5cblxuXHRzdWl0ZSBcIkJhdGNoXCIsICgpLT5cblx0XHR0ZXN0IFwiRG9tLmJhdGNoKCkgdGFrZXMgYW4gaXRlcmFibGUgY29udGFpbmluZyBhbiBhcnJheSBvZiBlbGVtZW50cyBvciBRdWlja0RvbSBlbGVtZW50cyBhbmQgcmV2ZWFscyB0aGUgUXVpY2tFbGVtZW50IEFQSSB3aGljaCB3aWxsIGJlIGFwcGxpZWQgZm9yIGVhY2ggZWxlbWVudFwiLCAoKS0+XG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QiA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhkaXYpXG5cblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoc2FuZEJveCkoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShkaXYpKEEsIEIsIEMpXG5cblx0XHRcdERvbS5iYXRjaChbQSxCLENdKVxuXHRcdFx0XHQuYXBwZW5kVG8oc2FuZEJveClcblx0XHRcdFx0LnN0eWxlICdvcGFjaXR5JywgMC41XG5cdFx0XHRcdC5jc3Mge2hlaWdodDozMCwgYmFja2dyb3VuZENvbG9yOidwaW5rJ31cblx0XHRcdFx0LmFwcGVuZCAnU29tZSBJbm5lciBUZXh0J1xuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHNhbmRCb3gpKEEsIEIsIEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKGRpdikoKVxuXG5cdFx0XHRleHBlY3QoZ2V0Q29tcHV0ZWRTdHlsZShBLmVsKS5vcGFjaXR5KS50by5lcXVhbCgnMC41Jylcblx0XHRcdGV4cGVjdChnZXRDb21wdXRlZFN0eWxlKEMuZWwpLm9wYWNpdHkpLnRvLmVxdWFsKCcwLjUnKVxuXHRcdFx0ZXhwZWN0KGdldENvbXB1dGVkU3R5bGUoQi5lbCkuaGVpZ2h0KS50by5lcXVhbCgnMzBweCcpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQy5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXS5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cblxuXHRcdHRlc3QgXCJJZiBhIHRydXRoeSB2YWx1ZSBpcyBwYXNzZWQgYXMgdGhlIDJuZCBhcmcgb2YgRG9tLmJhdGNoKCksIGFuIGFycmF5IHdpbGwgYmUgcmV0dXJuZWQgZm9yIHRoZSBmaXJzdCBtZXRob2QgaW52b2tlZCBjb250YWluaW5nIHRoZSByZXN1bHQgZm9yIGVhY2ggZWxlbWVudCBwcm92aWRlZFwiLCAoKS0+XG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRCb3gpXG5cdFx0XHRCID0gRG9tLnNlY3Rpb24oKS5hcHBlbmRUbyhzYW5kQm94KVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kQm94KVxuXG5cdFx0XHRiYXRjaDEgPSBEb20uYmF0Y2goW0EsQixDXSlcblx0XHRcdGJhdGNoMiA9IERvbS5iYXRjaChbQSxCLENdLCB0cnVlKVxuXG5cdFx0XHRleHBlY3QoYmF0Y2gxLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbChiYXRjaDEpXG5cdFx0XHRleHBlY3QoYmF0Y2gxLnN0eWxlKCd3aWR0aCcsIDQ3KSkudG8uZXF1YWwoYmF0Y2gxKVxuXHRcdFx0ZXhwZWN0KGJhdGNoMi5zdHlsZSgnd2lkdGgnKSkudG8uZXFsKFsnNDdweCcsICc0N3B4JywgJzQ3cHgnXSlcblx0XHRcdGV4cGVjdChiYXRjaDIuc3R5bGUoJ3dpZHRoJywgMzMpKS50by5lcWwoW0EsQixDXSlcblx0XHRcdGV4cGVjdChiYXRjaDIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxbChbJzMzcHgnLCAnMzNweCcsICczM3B4J10pXG5cblxuXHRcdHRlc3QgXCJJZiB0aGUgLnJldHVybigpIG1ldGhvZCBpcyBpbnZva2VkIG9uIHRoZSBiYXRjaCBpbnN0YW5jZSwgaXQgd2lsbCByZXR1cm4gdGhlIHJlc3VsdCBzZXQgZnJvbSB0aGUgbGFzdCBtZXRob2QgaW52b2NhdGlvblwiLCAoKS0+XG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QiA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhkaXYpXG5cdFx0XHRcblx0XHRcdHJlc3VsdCA9IERvbS5iYXRjaChbQSxCLENdKVxuXHRcdFx0XHQuYXBwZW5kVG8oc2FuZEJveClcblx0XHRcdFx0LnN0eWxlICdvcGFjaXR5JywgMC41XG5cdFx0XHRcdC5jc3Mge2hlaWdodDozMCwgYmFja2dyb3VuZENvbG9yOidwaW5rJ31cblx0XHRcdFx0LmFwcGVuZCAnU29tZSBJbm5lciBUZXh0J1xuXHRcdFx0XHQuc3R5bGUgJ29wYWNpdHknXG5cdFx0XHRcdC5yZXR1cm4oKVxuXG5cdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwgWycwLjUnLCcwLjUnLCcwLjUnXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChbQSxCLENdKS5jc3MoJ3dpZHRoJywgJzM4cHgnKS5jc3MoJ3dpZHRoJykucmV0dXJuKCkpLnRvLmVxbCBbJzM4cHgnLCczOHB4JywnMzhweCddXG5cblxuXHRcdHRlc3QgXCJJZiB0aGUgLnJldHVybigpIG1ldGhvZCBpcyBpbnZva2VkIHdpdGggYSB0cnV0aHkgYXJndW1lbnQsIGl0IHdpbGwgY2F1c2UgdGhlIG5leHQgbWV0aG9kIGludm9jYXRpb24gdG8gcmV0dXJuIHRoZSByZXN1bHRzIG9mIHRoZSBpbnZvY2F0aW9uIGZvciBlYWNoIGVsZW1lbnQgcHJvdmlkZWRcIiwgKCktPlxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEIgPSBEb20uc2VjdGlvbigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0XG5cdFx0XHRyZXN1bHQgPSBEb20uYmF0Y2goW0EsQixDXSlcblx0XHRcdFx0LmFwcGVuZFRvKHNhbmRCb3gpXG5cdFx0XHRcdC5zdHlsZSAnb3BhY2l0eScsIDAuNVxuXHRcdFx0XHQuY3NzIHtoZWlnaHQ6MzAsIGJhY2tncm91bmRDb2xvcjoncGluayd9XG5cdFx0XHRcdC5hcHBlbmQgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdFx0LnJldHVybih0cnVlKVxuXHRcdFx0XHQuc3R5bGUgJ29wYWNpdHknXG5cblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvLmVxbCBbJzAuNScsJzAuNScsJzAuNSddXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKFtBLEIsQ10pLmNzcygnd2lkdGgnLCAnMzhweCcpLmNzcygnaGVpZ2h0JywgJzI4cHgnKS5yZXR1cm4odHJ1ZSkuY3NzKCd3aWR0aCcpKS50by5lcWwgWyczOHB4JywnMzhweCcsJzM4cHgnXVxuXG5cblx0XHR0ZXN0IFwiSW52b2tpbmcgdGhlIC5yZXZlcnNlKCkgbWV0aG9kIG9uIHRoZSBiYXRjaCBpbnN0YW5jZSB3aWxsIHJldmVyc2UgdGhlIGVsZW1lbnRzIGFycmF5IGluIHRoZSBiYXRjaCBhbmQgdGh1cyB0aGUgZXhlY3V0aW9uIG9yZGVyXCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KG51bGwsICdBQUEnKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QiA9IERvbS5kaXYobnVsbCwgJ0JCQicpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRDID0gRG9tLmRpdihudWxsLCAnQ0NDJykuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFyciA9IFtBLEIsQ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyKS5lbGVtZW50cykubm90LnRvLmVxdWFsKGFycilcblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyKS5lbGVtZW50cykudG8uZXFsIFtBLEIsQ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyKS5yZXZlcnNlKCkuZWxlbWVudHMpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFyciwxKS50ZXh0KCkpLnRvLmVxbCBbJ0FBQScsJ0JCQicsJ0NDQyddXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFyciwxKS5yZXZlcnNlKCkudGV4dCgpKS50by5lcWwgWydDQ0MnLCdCQkInLCdBQUEnXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChhcnIsMSkucmV2ZXJzZSgpLnRleHQoKSkudG8uZXFsIFsnQ0NDJywnQkJCJywnQUFBJ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyLDEpLnJldmVyc2UoKS5yZXZlcnNlKCkudGV4dCgpKS50by5lcWwgWydBQUEnLCdCQkInLCdDQ0MnXVxuXG5cblx0XHR0ZXN0IFwiQmF0Y2gudGV4dC8uaHRtbCBhcmUgbWV0aG9kcyBpbnN0ZWFkIG9mIGdldHRlcnMvc2V0dGVyc1wiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdihudWxsLCAnVGhlIGRpdkEnKVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYobnVsbCwgJ1RoZSBkaXZCJylcblx0XHRcdGJhdGNoID0gRG9tLmJhdGNoKFtkaXZBLCBkaXZCXSwgdHJ1ZSlcblxuXHRcdFx0ZXhwZWN0KGJhdGNoLmh0bWwoKSkudG8uZXFsIFsnVGhlIGRpdkEnLCAnVGhlIGRpdkInXVxuXHRcdFx0ZXhwZWN0KGJhdGNoLnRleHQoKSkudG8uZXFsIFsnVGhlIGRpdkEnLCAnVGhlIGRpdkInXVxuXHRcdFx0XG5cdFx0XHRiYXRjaC5odG1sKCc8c3Bhbj5UaGUgZGl2PC9zcGFuPicpXG5cdFx0XHRleHBlY3QoYmF0Y2guaHRtbCgpKS50by5lcWwgWyc8c3Bhbj5UaGUgZGl2PC9zcGFuPicsICc8c3Bhbj5UaGUgZGl2PC9zcGFuPiddXG5cdFx0XHRleHBlY3QoYmF0Y2gudGV4dCgpKS50by5lcWwgWydUaGUgZGl2JywgJ1RoZSBkaXYnXVxuXG5cdFx0XHRiYXRjaC50ZXh0KCdUSEUgRElWJylcblx0XHRcdGV4cGVjdChiYXRjaC5odG1sKCkpLnRvLmVxbCBbJ1RIRSBESVYnLCAnVEhFIERJViddXG5cdFx0XHRleHBlY3QoYmF0Y2gudGV4dCgpKS50by5lcWwgWydUSEUgRElWJywgJ1RIRSBESVYnXVxuXG5cblxuXHRzdWl0ZSBcIlRlbXBsYXRlc1wiLCAoKS0+XG5cdFx0dGVzdCBcIkEgcmV1c2FibGUgdGVtcGxhdGUgY2FuIGJlIGdlbmVyYXRlZCB2aWEgUXVpY2tEb20udGVtcGxhdGUoKVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShbJ3NwYW4nLCBpZDondGhlU3BhbiddKVxuXG5cdFx0XHRleHBlY3QodHlwZW9mIHRlbXBsYXRlKS50by5lcXVhbCgnb2JqZWN0Jylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS50eXBlKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucykudG8uZXFsKGlkOid0aGVTcGFuJylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlbikudG8uZXFsKFtdKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSB0dXJuZWQgaW50byBRdWlja0RvbSBpbnN0YW5jZXMgdmlhIHRlbXBsYXRlLnNwYXduKCkgb3IgYnkgcGFzc2luZyBhcyBhcmcgdG8gUXVpY2tEb21cIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoWydkaXYnLCBjbGFzc05hbWU6J3NvbWUtZGl2JywgJ1NvbWUgSW5uZXIgVGV4dCddKVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0c3Bhd25BLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRzcGF3bkIgPSBEb20odGVtcGxhdGUpXG5cblx0XHRcdGV4cGVjdChzcGF3bkEuZWwpLnRvLmJlLmluc3RhbmNlT2YoSFRNTERpdkVsZW1lbnQpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsKS50by5iZS5pbnN0YW5jZU9mKEhUTUxEaXZFbGVtZW50KVxuXHRcdFx0ZXhwZWN0KHNwYXduQSkubm90LnRvLmVxdWFsKHNwYXduQilcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwpLm5vdC50by5lcXVhbChzcGF3bkIuZWwpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChzcGF3bkIuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtZGl2JylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gYmUgY3JlYXRlZCBmcm9tIFF1aWNrRWxlbWVudCBpbnN0YW5jZXNcIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9IERvbS5zZWN0aW9uKGNsYXNzTmFtZTonc2luZ2xlU2VjdGlvbicsICdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0c2VjdGlvbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gc2VjdGlvbi50b1RlbXBsYXRlKClcblx0XHRcdHRlbXBsYXRlU3Bhd24gPSBzZWN0aW9uVGVtcGxhdGUuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3Qoc2VjdGlvblRlbXBsYXRlKS5ub3QudG8uZXF1YWwoc2VjdGlvbilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLmVsKS5ub3QudG8uZXF1YWwoc2VjdGlvbi5lbClcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NpbmdsZVNlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlU3Bhd24udGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSBjcmVhdGVkIGZyb20gRE9NIEVsZW1lbnRzXCIsICgpLT5cblx0XHRcdHNlY3Rpb25FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKVxuXHRcdFx0c2VjdGlvbkVsLmNsYXNzTmFtZSA9ICdzaW5nbGVTZWN0aW9uJ1xuXHRcdFx0c2VjdGlvbkVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlICdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKHNlY3Rpb25FbClcblx0XHRcdHRlbXBsYXRlU3Bhd24gPSBzZWN0aW9uVGVtcGxhdGUuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5lbCkubm90LnRvLmVxdWFsKHNlY3Rpb25FbClcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NpbmdsZVNlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlU3Bhd24udGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZXMgY2FuIGJlIGV4dGVuZGVkIHZpYSB0ZW1wbGF0ZS5leHRlbmRcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoWydkaXYnLCBjbGFzc05hbWU6J3NvbWUtZGl2JywgJ1NvbWUgSW5uZXIgVGV4dCddKVxuXHRcdFx0dGVtcGxhdGVDb3B5QSA9IHRlbXBsYXRlLmV4dGVuZCB7dHlwZTonc3BhbicsIG9wdGlvbnM6e2NsYXNzTmFtZTonc29tZS1zcGFuJ30sIGNoaWxkcmVuOltdfVxuXHRcdFx0dGVtcGxhdGVDb3B5QiA9IHRlbXBsYXRlLmV4dGVuZCB7b3B0aW9uczp7aWQ6J3RoZU1haW5EaXYnfSwgY2hpbGRyZW46WydUaGUgT3RoZXIgSW5uZXIgVGV4dCddfVxuXHRcdFx0dGVtcGxhdGVDb3B5QyA9IHRlbXBsYXRlLmV4dGVuZChcblx0XHRcdFx0WydzZWN0aW9uJ1xuXHRcdFx0XHRcdGNsYXNzTmFtZTonc29tZS1zZWN0aW9uJ1xuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgJ1ZlcnkgJ11cblx0XHRcdFx0XHRbJ2RpdicsIG51bGxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtzdHlsZTpmb250V2VpZ2h0OjUwMH0sJ05lc3RlZCAnXVxuXHRcdFx0XHRcdFx0J0lubmVyIFRleHQnXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHlBKS5ub3QudG8uZXF1YWwodGVtcGxhdGUpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5Qikubm90LnRvLmVxdWFsKHRlbXBsYXRlKVxuXHRcdFx0c3Bhd24gPSB0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUNvcHlBLnNwYXduKClcblx0XHRcdHNwYXduQiA9IHRlbXBsYXRlQ29weUIuc3Bhd24oKVxuXHRcdFx0c3Bhd25DID0gdGVtcGxhdGVDb3B5Qy5zcGF3bigpXG5cblx0XHRcdGV4cGVjdChzcGF3bi5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdzb21lLWRpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduLnRleHQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1zcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS50ZXh0KS50by5lcXVhbCgnU29tZSBJbm5lciBUZXh0JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1kaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5pZCkudG8uZXF1YWwoJ3RoZU1haW5EaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi50ZXh0KS50by5lcXVhbCgnVGhlIE90aGVyIElubmVyIFRleHQnKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25DLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bkMuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1zZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bkMuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQy50ZXh0KS50by5lcXVhbCgnVmVyeSBOZXN0ZWQgSW5uZXIgVGV4dCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZXMgY2FuIGJlIHNwYXduZWQgdmlhIGV4dGVuZGVkIGNvbmZpZyBieSBwYXNzaW5nIGEgbmV3IGNvbmZpZyBvYmplY3QgdG8gdGVtcGxhdGUuc3Bhd24oKVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCBjbGFzc05hbWU6J3NvbWUtZGl2Jyxcblx0XHRcdFx0XHQnU29tZSBJbm5lciBUZXh0Jyxcblx0XHRcdFx0XHRbJ3N0cm9uZycsIHtjbGFzc05hbWU6J2hpZ2hsaWdodGVkJywgc3R5bGU6e29wYWNpdHk6MC45fX0sICcgLSBCb2xkZWQgVGV4dCddXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdHNwYXduUmF3ID0gdGVtcGxhdGUuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGUuc3Bhd24odHlwZTonc2VjdGlvbicsIG9wdGlvbnM6e2NsYXNzTmFtZTonc29tZS1zZWN0aW9uJywgc3R5bGU6e29wYWNpdHk6MC43fX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bkIgPSB0ZW1wbGF0ZS5zcGF3bihcblx0XHRcdFx0b3B0aW9uczpcblx0XHRcdFx0XHRjbGFzc05hbWU6ICdtYWluLWRpdidcblx0XHRcdFx0XHRpZDogJ3RoZU1haW5EaXYnXG5cdFx0XHRcdFx0c3R5bGU6IG9wYWNpdHk6IDAuNVxuXHRcdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6ICdzcGFuJ1xuXHRcdFx0XHRcdFx0Y2hpbGRyZW46IFtcblx0XHRcdFx0XHRcdFx0dHlwZTondGV4dCdcblx0XHRcdFx0XHRcdFx0b3B0aW9uczoge3RleHQ6ICdNYWluIElubmVyIFRleHQnfVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnYidcblx0XHRcdFx0XHRcdG9wdGlvbnM6XG5cdFx0XHRcdFx0XHRcdGNsYXNzTmFtZTogJ3N1cGVyLWhpZ2hsaWdodGVkJ1xuXHRcdFx0XHRcdFx0XHRzdHlsZTogb3BhY2l0eTogJzAuMidcblx0XHRcdFx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnM6IHt0ZXh0OiAnIC0gVmVyeSBCb2xkZWQgVGV4dCd9XG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6ICd0ZXh0J1xuXHRcdFx0XHRcdFx0b3B0aW9uczoge3RleHQ6ICcgKyBPdGhlciBUZXh0J31cblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5pZCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcudGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCAtIEJvbGRlZCBUZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbCkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsJzEnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUpLnRvLmVxdWFsKCcjdGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcuZWwuY2hpbGROb2Rlc1sxXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3Ryb25nJylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5jaGlsZE5vZGVzWzFdLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnaGlnaGxpZ2h0ZWQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXNbMV0pLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnMC45JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnc29tZS1zZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS50ZXh0KS50by5lcXVhbCgnU29tZSBJbm5lciBUZXh0IC0gQm9sZGVkIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbCkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsJzAuNycpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lKS50by5lcXVhbCgnI3RleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzFdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzdHJvbmcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzFdLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnaGlnaGxpZ2h0ZWQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzFdKS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJzAuOScpXG5cblx0XHRcdGV4cGVjdChzcGF3bkIuZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnbWFpbi1kaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5pZCkudG8uZXF1YWwoJ3RoZU1haW5EaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi50ZXh0KS50by5lcXVhbCgnTWFpbiBJbm5lciBUZXh0IC0gVmVyeSBCb2xkZWQgVGV4dCArIE90aGVyIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbCkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsJzAuNScpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2hpbGROb2Rlc1sxXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnYicpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXNbMV0uY2xhc3NOYW1lKS50by5pbmNsdWRlKCdzdXBlci1oaWdobGlnaHRlZCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXNbMV0pLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnMC4yJylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlLmV4dGVuZC9zcGF3bigpIGNhbiBhY2NlcHQgYSB0ZW1wbGF0ZSB0cmVlIGFycmF5XCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnZGl2Jywgc3R5bGU6eydvcGFjaXR5JzowLjV9LCBbJ3NwYW4nLCBudWxsLCAndGV4dCBvZiBzcGFuJ10sIFsnZGl2JywgbnVsbCwgJ3RleHQgb2YgZGl2J11dXG5cdFx0XHRjbG9uZUEgPSB0ZW1wbGF0ZS5leHRlbmQoWydzZWN0aW9uJywgc3R5bGU6eydvcGFjaXR5JzowLjh9XSlcblx0XHRcdGNsb25lQiA9IHRlbXBsYXRlLmV4dGVuZChbJ3NwYW4nLCBudWxsLCBbJ2RpdiddXSlcblx0XHRcdGNsb25lQyA9IHRlbXBsYXRlLmV4dGVuZChbJ3NlY3Rpb24nLCB7Y2xhc3NOYW1lOid0aGUtc2VjdGlvbicsIHN0eWxlOntjb2xvcjonYmx1ZSd9fSwgWydzZWN0aW9uJywgbnVsbCwgJ3RleHQgb2Ygc3Vic2VjdGlvbiddLCAnanVzdCBhIHRleHQgbm9kZSddKVxuXHRcdFx0c3Bhd24gPSB0ZW1wbGF0ZS5zcGF3bihbJ3NwYW4nLCBzdHlsZTp7J3dpZHRoJzoxOTAsICdvcGFjaXR5JzowLjR9LCAnc28gbmljZSddKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGUudHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5vcHRpb25zKS50by5lcWwge3N0eWxlOnsnb3BhY2l0eSc6MC41fX1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIHNwYW4nXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIGRpdidcblxuXHRcdFx0ZXhwZWN0KGNsb25lQS50eXBlKS50by5lcXVhbCAnc2VjdGlvbidcblx0XHRcdGV4cGVjdChjbG9uZUEub3B0aW9ucykudG8uZXFsIHtzdHlsZTp7J29wYWNpdHknOjAuOH19XG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNsb25lQS5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ3RleHQgb2Ygc3Bhbidcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMV0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ3RleHQgb2YgZGl2J1xuXG5cdFx0XHRleHBlY3QoY2xvbmVCLnR5cGUpLnRvLmVxdWFsICdzcGFuJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQi5vcHRpb25zKS50by5lcWwge3N0eWxlOnsnb3BhY2l0eSc6MC41fX1cblx0XHRcdGV4cGVjdChjbG9uZUIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblswXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIHNwYW4nXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzFdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblsxXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIGRpdidcblxuXHRcdFx0ZXhwZWN0KGNsb25lQy50eXBlKS50by5lcXVhbCAnc2VjdGlvbidcblx0XHRcdGV4cGVjdChjbG9uZUMub3B0aW9ucykudG8uZXFsIHtjbGFzc05hbWU6J3RoZS1zZWN0aW9uJywgc3R5bGU6eydvcGFjaXR5JzowLjUsICdjb2xvcic6J2JsdWUnfX1cblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2xvbmVDLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsICdzZWN0aW9uJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQy5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAndGV4dCBvZiBzdWJzZWN0aW9uJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQy5jaGlsZHJlblsxXS50eXBlKS50by5lcXVhbCAndGV4dCdcblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW5bMV0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAnanVzdCBhIHRleHQgbm9kZSdcblxuXHRcdFx0c3Bhd24uc3R5bGUgJ2Rpc3BsYXknLCAnYmxvY2snXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwpLnRvLmhhdmUuc3R5bGUgJ29wYWNpdHknLCAnMC40J1xuXHRcdFx0ZXhwZWN0KHNwYXduLmVsKS50by5oYXZlLnN0eWxlICd3aWR0aCcsICcxOTBweCdcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KHNwYXduLmVsLmNoaWxkTm9kZXNbMF0ubm9kZVR5cGUpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50KS50by5lcXVhbCAnc28gbmljZSdcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzWzFdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuY2hpbGROb2Rlc1sxXS50ZXh0Q29udGVudCkudG8uZXF1YWwgJ3RleHQgb2YgZGl2J1xuXG5cdFx0XHQjIGV4cGVjdCAoKS0+XG5cdFx0XHQjIFx0RG9tLnRlbXBsYXRlKFsnZGl2J10pLmV4dGVuZChbJ3NwYW4nLCBudWxsLCBbJ2RpdicsIG51bGwsIFsnc2VjdGlvbiddXV0pXG5cdFx0XHQjIC5ub3QudG8udGhyb3coKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGUuZXh0ZW5kL3NwYXduKCkgY2FuIGFjY2VwdCBvdGhlciB0ZW1wbGF0ZSBpbnN0YW5jZXMgYXMgY2hpbGRyZW4gd2hpY2ggd2lsbCByZXBsYWNlIGV4aXN0aW5nIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnZGl2JywgbnVsbCwgWydzcGFuJywge3N0eWxlOm9wYWNpdHk6MC41fV0sICdvcmlnaW5hbCB0ZXh0J11cblx0XHRcdGNoaWxkQSA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIHtzdHlsZTpmb250RmFtaWx5OidwaW5rJ31dXG5cdFx0XHRjaGlsZEIgPSBEb20udGVtcGxhdGUgJ3JlcGxhY2VkIHRleHQnXG5cdFx0XHRjaGlsZEMgPSBEb20udGVtcGxhdGUgWydzZWN0aW9uJ11cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlLmV4dGVuZChbJ3NwYW4nLCB7c3R5bGU6Zm9udFNpemU6Jzc3cHgnfSwgY2hpbGRBLCBjaGlsZEIsIGNoaWxkQ10pXG5cdFx0XHRzcGF3bmVkQSA9IHRlbXBsYXRlLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduZWRCID0gdGVtcGxhdGVDb3B5LnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduZWRDID0gdGVtcGxhdGUuc3Bhd24oWydzcGFuJywge3N0eWxlOmZvbnRTaXplOic3N3B4J30sIGNoaWxkQSwgY2hpbGRCLCBjaGlsZENdKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEudHlwZSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRBLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnMC41Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ2ZvbnRGYW1pbHknLCAnJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblsxXS50eXBlKS50by5lcXVhbCgndGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEudGV4dCkudG8uZXF1YWwoJ29yaWdpbmFsIHRleHQnKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIudHlwZSkudG8uZXF1YWwoJ3NwYW4nKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ2ZvbnRGYW1pbHknLCAncGluaycpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwoJ3RleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLnRleHQpLnRvLmVxdWFsKCdyZXBsYWNlZCB0ZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblsyXS50eXBlKS50by5lcXVhbCgnc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIucmF3KS50by5oYXZlLnN0eWxlKCdmb250U2l6ZScsICc3N3B4JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLnR5cGUpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQy5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJycpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdmb250RmFtaWx5JywgJ3BpbmsnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsKCd0ZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQy50ZXh0KS50by5lcXVhbCgncmVwbGFjZWQgdGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMl0udHlwZSkudG8uZXF1YWwoJ3NlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLnJhdykudG8uaGF2ZS5zdHlsZSgnZm9udFNpemUnLCAnNzdweCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZS5leHRlbmQvc3Bhd24oKSB3aWxsIGNvbnNpZGVyIHRoZSBwYXNzZWQgb2JqZWN0IGFzIHRoZSBvcHRpb25zIG9iamVjdCBpZiBpdCBkb2Vzbid0IGNvbnRhaW4gdGVtcGxhdGUtcmVsYXRlZCBwcm9wc1wiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0ZGVmYXVsdHM6IHRleHQ6ICdkZWZhdWx0J1xuXHRcdFx0XHRcdGNvbXB1dGVyczogdGV4dDogKHRleHQpLT4gQHRleHQgPSB0ZXh0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0WydzcGFuJywgcmVmOid0aGVTcGFuJ11cblx0XHRcdFx0XVxuXHRcdFx0KVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucy5zdHlsZSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucy5sYWJlbCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuZXh0ZW5kKG9wdGlvbnM6bGFiZWw6J2FiYzEyMycpLm9wdGlvbnMubGFiZWwpLnRvLmVxdWFsICdhYmMxMjMnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuZXh0ZW5kKGxhYmVsOidkZWY0NTYnKS5vcHRpb25zLmxhYmVsKS50by5lcXVhbCAnZGVmNDU2J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmV4dGVuZChzdHlsZTonZGVmNDU2Jykub3B0aW9ucy5zdHlsZSkudG8uZXF1YWwgJ2RlZjQ1Nidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5leHRlbmQoc3R5bGU6J2RlZjQ1NicsIHR5cGU6J3NlY3Rpb24nKS5vcHRpb25zLnN0eWxlKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5leHRlbmQoY2hpbGRyZW46dGhlU3BhbjpzdHlsZTonZ2hpNzg5JykuY2hpbGQudGhlU3Bhbi5vcHRpb25zLnN0eWxlKS50by5lcXVhbCAnZ2hpNzg5J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmV4dGVuZChjaGlsZHJlbjpbZGVmYXVsdHM6J2doaTc4OSddKS5jaGlsZC50aGVTcGFuLm9wdGlvbnMuZGVmYXVsdHMpLnRvLmVxdWFsICdnaGk3ODknXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuc3Bhd24oY2hpbGRyZW46dGhlU3BhbjpjbGFzc05hbWU6J0dISTc4OScpLmNoaWxkLnRoZVNwYW4ucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ0dISTc4OSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5zcGF3bigpLnRleHQpLnRvLmVxdWFsICdkZWZhdWx0J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLnNwYXduKGRlZmF1bHRzOnRleHQ6J2RpZmYnKS50ZXh0KS50by5lcXVhbCAnZGlmZidcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gaGF2ZSBvdGhlciB0ZW1wbGF0ZXMgYXMgdGhlaXIgY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0aGVhZGVyVGVtcGxhdGUgPSBEb20udGVtcGxhdGUgWydoZWFkZXInLCB7c3R5bGU6J2hlaWdodCc6JzIwMHB4J30sXG5cdFx0XHRcdFsnc3BhbicsIHtzdHlsZTondGV4dEFsaWduJzonY2VudGVyJ30sICdUaGlzIGlzIGJvbGRlZCB0ZXh0J11cblx0XHRcdFx0JyB3aGlsZSB0aGlzIGlzIG5vdCdcblx0XHRcdF1cblx0XHRcdGhlYWRlclRlbXBsYXRlQ2xvbmUgPSBEb20udGVtcGxhdGUoaGVhZGVyVGVtcGxhdGUpXG5cdFx0XHRzZWN0aW9uVGVtcGxhdGUgPSBEb20udGVtcGxhdGUgWydzZWN0aW9uJywgbnVsbCwgaGVhZGVyVGVtcGxhdGVdXG5cdFx0XHRzZWN0aW9uID0gc2VjdGlvblRlbXBsYXRlLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KGhlYWRlclRlbXBsYXRlQ2xvbmUpLnRvLmVxdWFsKGhlYWRlclRlbXBsYXRlKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25UZW1wbGF0ZS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvblRlbXBsYXRlLmNoaWxkcmVuWzBdKS50by5lcXVhbChoZWFkZXJUZW1wbGF0ZSlcblx0XHRcdGV4cGVjdChzZWN0aW9uVGVtcGxhdGUuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwoJ2hlYWRlcicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi50ZXh0KS50by5lcXVhbCgnVGhpcyBpcyBib2xkZWQgdGV4dCB3aGlsZSB0aGlzIGlzIG5vdCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlblswXS5zdHlsZSgndGV4dEFsaWduJykpLnRvLmVxdWFsKCdjZW50ZXInKVxuXG5cblx0XHR0ZXN0IFwiQSBnbG9iYWwgb3B0aW9ucyBvYmplY3QgY2FuIGJlIHBhc3NlZCBhcyB0aGUgMm5kIGFyZyB0byB0ZW1wbGF0ZS5leHRlbmQvc3Bhd24oKSB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gYWxsIHRlbXBsYXRlcywgc3Bhd25zLCAmIHRoZWlyIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdG9iaiA9IG15SGVpZ2h0OicxNTBweCdcblx0XHRcdG9iai5vYmogPSBvYmpcblx0XHRcdGR5bmFtaWNIZWlnaHRTdHlsZSA9ICdoZWlnaHQnOiAocmVsYXRlZCktPiBleHBlY3QocmVsYXRlZCkudG8uZXF1YWwob2JqKTsgcmVsYXRlZC5teUhlaWdodFxuXHRcdFx0XG5cdFx0XHRoZWFkZXJUZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZSBbJ2hlYWRlcicsIHtzdHlsZTond2lkdGgnOicyM3B4J30sXG5cdFx0XHRcdFsnZGl2Jywge3N0eWxlOid3aWR0aCc6JzIzcHgnfSwgJ1RoaXMgaXMgYm9sZGVkIHRleHQnXVxuXHRcdFx0XHQnIHdoaWxlIHRoaXMgaXMgbm90J1xuXHRcdFx0XVxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnc2VjdGlvbicsIHtzdHlsZTond2lkdGgnOicyM3B4J30sIGhlYWRlclRlbXBsYXRlXVxuXHRcdFx0c2VjdGlvbiA9IHNlY3Rpb25UZW1wbGF0ZS5zcGF3bih7b3B0aW9uczp7cmVsYXRlZDp3aW5kb3d9fSwge3JlbGF0ZWQ6b2JqLCBzdHlsZTpkeW5hbWljSGVpZ2h0U3R5bGV9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5yYXcuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTUwcHgnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0ucmF3LnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE1MHB4Jylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnJhdy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNTBweCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5yYXcuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0ucmF3LnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnJhdy5zdHlsZS53aWR0aCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCgnaGVhZGVyJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChzZWN0aW9uLnRleHQpLnRvLmVxdWFsKCdUaGlzIGlzIGJvbGRlZCB0ZXh0IHdoaWxlIHRoaXMgaXMgbm90JylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlIGNoaWxkcmVuIGNhbiBiZSBuYXZpZ2F0ZWQgYnkgcmVmIHVzaW5nIHRoZSAuY2hpbGQgcHJvcGVydHlcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBcblx0XHRcdFx0RG9tLnRlbXBsYXRlIFsnZGl2Jywge2lkOidkaXZBJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzInLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiB0ZW1wbGF0ZS5jaGlsZCkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyh0ZW1wbGF0ZS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCg2KVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmRpdkEpLnRvLmVxdWFsIHRlbXBsYXRlXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGQuY2hpbGRBLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGQuY2hpbGRBKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQV8yKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXG5cdFx0XHRyZW5kZXJlZCA9IHRlbXBsYXRlLnNwYXduKClcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgcmVuZGVyZWQuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdChyZW5kZXJlZC50ZXh0KS50by5lcXVhbCgnVGhlIFRleHQnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGUncyBjaGlsZHJlbiBjYW4gYmUgZXh0ZW5kL3NwYXduZWQgd2l0aCBhIHtyZWY6bmV3Q2hpbGR9IG1hcCBpbnN0ZWFkIG9mIGEgcG9zaXRpb25hbCBhcnJheVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZU1haW4gPSBcblx0XHRcdFx0RG9tLnRlbXBsYXRlIFsnZGl2Jywge2lkOidkaXZBJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzInLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlTWFpbi5leHRlbmQgWydzZWN0aW9uJywgbnVsbCwgXG5cdFx0XHRcdGNoaWxkQTpcblx0XHRcdFx0XHR0eXBlOiAnZm9ybSdcblx0XHRcdFx0XHRvcHRpb25zOlxuXHRcdFx0XHRcdFx0c3R5bGU6IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG5cdFx0XHRcdGNoaWxkQV8yOlxuXHRcdFx0XHRcdFsnYScsIHtpZDonQ0hJTERhXzInLCBocmVmOidodHRwOi8vZ29vZ2xlLmNvbSd9LFxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge3JlZjonY2hpbGRBXzJfMScsIHRleHQ6J05ldyBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRjaGlsZEM6XG5cdFx0XHRcdFx0WydkaXYnLCByZWY6J2NoaWxkRCddXG5cdFx0XHRdLCB7dmFsdWU6J3RoZVZhbHVlJ31cblx0XHRcdFxuXHRcdFx0dGVtcGxhdGVDb3B5MiA9IHRlbXBsYXRlTWFpbi5leHRlbmQgY2hpbGRyZW46XG5cdFx0XHRcdGNoaWxkQTpcblx0XHRcdFx0XHRjaGlsZHJlbjogbmV3Q2hpbGQ6IFsnZGl2J11cblx0XHRcdFx0Y2hpbGRBXzI6XG5cdFx0XHRcdFx0WydhJywge2lkOidDSElMRGFfMicsIGhyZWY6J2h0dHA6Ly9nb29nbGUuY29tJ30sXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7cmVmOidjaGlsZEFfMl8xJywgdGV4dDonTmV3IFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdGNoaWxkQzpcblx0XHRcdFx0XHRbJ2RpdicsIHJlZjonY2hpbGREJ11cblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiB0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMSkubm90LnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDYpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDgpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuZGl2QSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5XG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZm9ybSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMikudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLkNISUxEYV8yKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yXzEub3B0aW9ucy50ZXh0KS50by5lcXVhbCAnTmV3IFRleHQnXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEQpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsyXVxuXG5cdFx0XHRyZW5kZXJlZCA9IHRlbXBsYXRlQ29weS5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMocmVuZGVyZWQuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoOClcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgcmVuZGVyZWQuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEEucmF3KS50by5oYXZlLnN0eWxlICdkaXNwbGF5JywgJ2lubGluZS1ibG9jaydcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5DSElMRGFfMi5wcm9wKCdocmVmJykpLnRvLmNvbnRhaW4gJ2h0dHA6Ly9nb29nbGUuY29tJ1xuXHRcdFx0ZXhwZWN0KHJlbmRlcmVkLmNoaWxkLmNoaWxkQl8xLnByb3AoJ3ZhbHVlJykpLnRvLmVxdWFsKCd0aGVWYWx1ZScpXG5cdFx0XHRleHBlY3QocmVuZGVyZWQuY2hpbGQuY2hpbGRELmF0dHIoJ2RhdGEtcmVmJykpLnRvLmVxdWFsKCdjaGlsZEQnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSBwYXNzZWQgYXMgcmVwbGFjZW1lbnQvbmV3IGNoaWxkcmVuIGluIHtyZWY6bmV3Q2hpbGR9IGV4dGVuc2lvbiBtYXBzXCIsICgpLT5cblx0XHRcdGNoaWxkQSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0WydkaXYnLCB7cmVmOidjaGlsZEFfMicsIGlkOidjaGlsZEFfMid9XVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cdFx0XHRjaGlsZEIgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2JywgcmVmOidjaGlsZEInLCBcblx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdFsndGV4dCcsIHtpZDonY2hpbGRCXzInLCB0ZXh0OidUaGUgVGV4dCd9XVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cdFx0XHRjaGlsZEMgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge2lkOidjaGlsZEMnfSwgXG5cdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRDXzEnfV1cblx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQ18yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0dGVtcGxhdGVNYWluID0gXG5cdFx0XHRcdERvbS50ZW1wbGF0ZSBbJ2RpdicsIHtpZDonZGl2QSd9LFxuXHRcdFx0XHRcdGNoaWxkQSxcblx0XHRcdFx0XHRjaGlsZEJcblx0XHRcdFx0XVxuXHRcdFx0dGVtcGxhdGVDb3B5ID0gdGVtcGxhdGVNYWluLmV4dGVuZCBbJ3NlY3Rpb24nLCBudWxsLCBcblx0XHRcdFx0Y2hpbGRBOiB0eXBlOiAnZm9ybSdcblx0XHRcdFx0Y2hpbGRCOiBjaGlsZEIuZXh0ZW5kKHJlZjonQ2hpbGRCJylcblx0XHRcdFx0Y2hpbGRDOiBjaGlsZEMuZXh0ZW5kKHJlZjonQ2hpbGRDJylcblx0XHRcdF0sIHt2YWx1ZTondGhlVmFsdWUnfVxuXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDcpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDEwKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlTWFpbi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuZGl2QSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5XG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZm9ybSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuQ2hpbGRCKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsxXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVNYWluLmNoaWxkLmNoaWxkQykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLkNoaWxkQykudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzJdXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLnNwYXduKCkuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoNylcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyh0ZW1wbGF0ZUNvcHkuc3Bhd24oKS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCgxMClcblxuXG5cdFx0dGVzdCBcInJlZi1jaGlsZHJlbiBtYXBzIHNob3VsZG4ndCBiZSBtb2RpZmllZCBieSB0aGUgdGVtcGxhdGUgZXh0ZW5kZXJcIiwgKCktPlxuXHRcdFx0Y29uZmlnID0gY2hpbGRyZW46IGNoaWxkQV8xOiB7dHlwZTonZGl2Jywgb3B0aW9uczoge3N0eWxlOiB7ZGlzcGxheTonbm9uZSd9fX1cblx0XHRcdHRlbXBsYXRlQSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7cmVmOidkaXZBJ31cblx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQSd9XG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0dGVtcGxhdGVBLmNoaWxkLmNoaWxkQV8xXG5cdFx0XHR0ZW1wbGF0ZUIgPSB0ZW1wbGF0ZUEuZXh0ZW5kKClcblx0XHRcdHRlbXBsYXRlQyA9IHRlbXBsYXRlQS5leHRlbmQoY29uZmlnKVxuXHRcdFx0dGVtcGxhdGVEID0gdGVtcGxhdGVBLmV4dGVuZChjb25maWcpXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUEuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c3Bhd25CID0gdGVtcGxhdGVCLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduQyA9IHRlbXBsYXRlQy5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bkQgPSB0ZW1wbGF0ZUQuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChzcGF3bkEuY2hpbGQuY2hpbGRBXzEuc3R5bGUgJ2Rpc3BsYXknKS50by5lcXVhbCAnaW5saW5lJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQi5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChzcGF3bkIuY2hpbGQuY2hpbGRBXzEuc3R5bGUgJ2Rpc3BsYXknKS50by5lcXVhbCAnaW5saW5lJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQy5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KHNwYXduQy5jaGlsZC5jaGlsZEFfMS5zdHlsZSAnZGlzcGxheScpLnRvLmVxdWFsICdub25lJ1xuXHRcdFx0ZXhwZWN0KHNwYXduRC5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KHNwYXduRC5jaGlsZC5jaGlsZEFfMS5zdHlsZSAnZGlzcGxheScpLnRvLmVxdWFsICdub25lJ1xuXG5cdFx0dGVzdCBcIk51bGwgdmFsdWVzIGluIHJlZi1jaGlsZHJlbiBtYXAgd2lsbCByZW1vdmUgdGhlIGNoaWxkIGZyb20gdGhlIHRlbXBsYXRlXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlTWFpbiA9IFxuXHRcdFx0XHREb20udGVtcGxhdGUgWydkaXYnLCB7aWQ6J2RpdkEnfSxcblx0XHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRBJ30sXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydkaXYnLCB7cmVmOidjaGlsZEFfMicsIGlkOidjaGlsZEFfMid9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQid9LCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQyd9LCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQ18xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQ18yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlTWFpbi5leHRlbmQgWydzZWN0aW9uJywgbnVsbCwgXG5cdFx0XHRcdGNoaWxkQTpcblx0XHRcdFx0XHR0eXBlOiAnZm9ybSdcblx0XHRcdFx0XHRvcHRpb25zOlxuXHRcdFx0XHRcdFx0c3R5bGU6IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG5cblx0XHRcdFx0Y2hpbGRBXzE6IG51bGxcblx0XHRcdFx0Y2hpbGRBXzI6XG5cdFx0XHRcdFx0WydhJywge2lkOidDSElMRGFfMicsIGhyZWY6J2h0dHA6Ly9nb29nbGUuY29tJ30sXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7cmVmOidjaGlsZEFfMl8xJywgdGV4dDonTmV3IFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdGNoaWxkQl8xOiBudWxsXG5cdFx0XHRcdGNoaWxkQzogbnVsbFxuXHRcdFx0XVxuXG5cdFx0XHRleHBlY3QodHlwZW9mIHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMl8xKS5ub3QudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyh0ZW1wbGF0ZU1haW4uY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoMTApXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDYpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuZGl2QSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5XG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZm9ybSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZU1haW4uY2hpbGQuY2hpbGRBXzEpLnRvLmVxdWFsIHRlbXBsYXRlTWFpbi5jaGlsZC5jaGlsZEFfMVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuQ0hJTERhXzIpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMl8xKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICdOZXcgVGV4dCdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzEpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVNYWluLmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZU1haW4uY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZU1haW4uY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHRlbXBsYXRlTWFpbi5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlTWFpbi5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHRlbXBsYXRlTWFpbi5jaGlsZHJlblsyXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXG5cblx0XHR0ZXN0IFwiTnVsbCB2YWx1ZXMgaW4gb3B0aW9ucyBvYmplY3Qgd2lsbCBkZWxldGUga2V5cyBkdXJpbmcgdGVtcGxhdGUgZXh0ZW5zaW9uXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlQSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0cmVmOiAndGhlRGl2J1xuXHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdHZhbHVlQTogKCktPiAxXG5cdFx0XHRcdFx0XHR2YWx1ZUI6ICgpLT4gMlxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZSdcblx0XHRcdFx0XHRcdHdpZHRoOiAxMDBcblx0XHRcdFx0XHRcdGhlaWdodDogMTAwXG5cdFx0XHRcdFx0XHQkYWN0aXZlOlxuXHRcdFx0XHRcdFx0XHR3aWR0aDogMjAwXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogMjAwXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdHRlbXBsYXRlQiA9IHRlbXBsYXRlQS5leHRlbmQoXG5cdFx0XHRcdG9wdGlvbnM6XG5cdFx0XHRcdFx0cmVmOiBudWxsXG5cdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0dmFsdWVBOiBudWxsXG5cdFx0XHRcdFx0XHR2YWx1ZUI6ICgpLT4gM1xuXG5cdFx0XHRcdFx0c3R5bGU6XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IG51bGxcblx0XHRcdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0XHRcdCRhY3RpdmU6XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiBudWxsXG5cdFx0XHQpXG5cblx0XHRcdHNwYXduQSA9IHRlbXBsYXRlQS5zcGF3bigpXG5cdFx0XHRzcGF3bkIgPSB0ZW1wbGF0ZUIuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25BLnJlZikudG8uZXF1YWwgJ3RoZURpdidcblx0XHRcdGV4cGVjdChzcGF3bkIucmVmKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0eXBlb2Ygc3Bhd25BLm9wdGlvbnMuY29tcHV0ZXJzLnZhbHVlQSkudG8uZXF1YWwgJ2Z1bmN0aW9uJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBzcGF3bkIub3B0aW9ucy5jb21wdXRlcnMudmFsdWVBKS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBzcGF3bkEub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKS50by5lcXVhbCAnZnVuY3Rpb24nXG5cdFx0XHRleHBlY3QodHlwZW9mIHNwYXduQi5vcHRpb25zLmNvbXB1dGVycy52YWx1ZUIpLnRvLmVxdWFsICdmdW5jdGlvbidcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKCkpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKCkpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZS5wb3NpdGlvbikudG8uZXF1YWwgJ3JlbGF0aXZlJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLnBvc2l0aW9uKS50by5lcXVhbCAncmVsYXRpdmUnXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuc3R5bGUud2lkdGgpLnRvLmVxdWFsIDEwMFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLndpZHRoKS50by5lcXVhbCAxMDBcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsIDEwMFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3Qoc3Bhd25CLm9wdGlvbnMuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlLiRhY3RpdmUud2lkdGgpLnRvLmVxdWFsIDIwMFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLiRhY3RpdmUud2lkdGgpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlLiRhY3RpdmUuaGVpZ2h0KS50by5lcXVhbCAyMDBcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5zdHlsZS4kYWN0aXZlLmhlaWdodCkudG8uZXF1YWwgMjAwXG5cblxuXHRcdHRlc3QgXCJXaGVuIHNwYXduaW5nIGVsZW1lbnRzIHRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIHNwYXducyBzaG91bGQgYmUgYSBjbG9uZSBvZiB0aGUgdGVtcGxhdGUncyBvcHRpb25zXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlQSA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIHN0eWxlOntkaXNwbGF5OidibG9jayd9XVxuXHRcdFx0dGVtcGxhdGVCID0gRG9tLnRlbXBsYXRlIFsnZGl2Jywgc3R5bGU6e2Rpc3BsYXk6J2Jsb2NrJ31dXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUEuc3Bhd24ocmVmOidhJykgIyBQYXNzZWQgb3B0aW9ucyB0byBtZXJnZSB3aXRoIG9yaWdcblx0XHRcdHNwYXduQiA9IHRlbXBsYXRlQS5zcGF3bigpXG5cblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucykubm90LnRvLmVxdWFsKHRlbXBsYXRlQS5vcHRpb25zKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlKS5ub3QudG8uZXF1YWwodGVtcGxhdGVBLm9wdGlvbnMuc3R5bGUpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVBLm9wdGlvbnMuc3R5bGUuJGJhc2UpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zKS5ub3QudG8uZXF1YWwodGVtcGxhdGVCLm9wdGlvbnMpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLm9wdGlvbnMuc3R5bGUpLm5vdC50by5lcXVhbCh0ZW1wbGF0ZUIub3B0aW9ucy5zdHlsZSlcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUIub3B0aW9ucy5zdHlsZS4kYmFzZSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIHdpbGwgYmUgc3Bhd25lZCB3aGVuIGFwcGVuZGVkIHRvIERPTSBlbGVtZW50c1wiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShbJ3NwYW4nLCB7cmVmOid0aGVTcGFuJ30sICdzb21lVGV4dCddKVxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCAnbGFiZWw6ICcpXG5cblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsICdsYWJlbDogJ1xuXHRcdFx0ZGl2LmFwcGVuZCB0ZW1wbGF0ZVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwgJ2xhYmVsOiBzb21lVGV4dCdcblx0XHRcdGRpdi5wcmVwZW5kIHRlbXBsYXRlXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgM1xuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCAnc29tZVRleHRsYWJlbDogc29tZVRleHQnXG5cblxuXHRcdHN1aXRlIFwiRGF0YSBjb21wdXRlcnNcIiwgKCktPlxuXHRcdFx0dGVzdCBcIlRlbXBsYXRlcyBhY2NlcHQgb3B0aW9ucy5jb21wdXRlcnMgZm4gbWFwIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIHByb3ZpZGVkIG9wdGlvbnMuZGF0YSB1cG9uIHNwYXduaW5nXCIsICgpLT5cblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gbnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogJ3NvbWVMYWJlbCc6IChkYXRhKS0+IHJlY2VpdmVkRGF0YSA9IGRhdGEgb3IgJ25vdGhpbmcnXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXF1YWwobnVsbClcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbChudWxsKVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oe2RhdGE6J3NvbWVMYWJlbCc6J3dvcmtzJ30pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxdWFsKCd3b3JrcycpXG5cblxuXHRcdFx0dGVzdCBcIkNvbXB1dGVycyB3aWxsIGJlIGhhdmUgdGhlIHNwYXduZWQgUXVpY2tFbGVtZW50IGluc3RhbmNlIGFzIHRoZWlyIGNvbnRleHRcIiwgKCktPlxuXHRcdFx0XHRjb250ZXh0ID0gbnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogJ3NvbWVMYWJlbCc6IChkYXRhKS0+IGNvbnRleHQgPSB0aGlzXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0ZXhwZWN0KGNvbnRleHQpLnRvLmVxdWFsKG51bGwpXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvbnRleHQpLnRvLmVxdWFsKG51bGwpXG5cdFx0XHRcdFxuXHRcdFx0XHRpbnN0YW5jZSA9IHRlbXBsYXRlLnNwYXduKHtkYXRhOidzb21lTGFiZWwnOnVuZGVmaW5lZH0pXG5cdFx0XHRcdGV4cGVjdChjb250ZXh0KS50by5lcXVhbChpbnN0YW5jZSlcblxuXG5cdFx0XHR0ZXN0IFwiVmFsdWVzIHNwZWNpZmllZCBpbiBvcHRpb25zLmRlZmF1bHRzIHdpbGwgYmUgdXNlZCBpZiBub3Qgc3BlY2lmaWVkIGluIG9wdGlvbnMuZGF0YSB1cG9uIHNwYXduaW5nXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmZpcnN0ID0gZGF0YS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLnNlY29uZCA9IGRhdGEudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLnRoaXJkID0gZGF0YS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdFx0XHRkZWZhdWx0czpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0VmFsdWUgaGVyZSdcblx0XHRcdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkVmFsdWUgaGVyZSdcblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoe30pXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoe2ZpcnN0OidmaXJzdHZhbHVlIGhlcmUnLCB0aGlyZDondGhpcmR2YWx1ZSBoZXJlJ30pXG5cdFx0XHRcdFxuXHRcdFx0XHRpbnN0YW5jZSA9IHRlbXBsYXRlLnNwYXduKHtkYXRhOid0aGlyZCc6J2N1c3RvbXZhbHVlIGhlcmUnfSlcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoe2ZpcnN0OidmaXJzdHZhbHVlIGhlcmUnLCB0aGlyZDonY3VzdG9tdmFsdWUgaGVyZSd9KVxuXG5cblx0XHRcdHRlc3QgXCJWYWx1ZXMgY2FuIGJlIG9mIGFueSB0eXBlXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdmb3VydGgnOiAoZGF0YSktPiByZXN1bHRzLmZvdXJ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J2ZpZnRoJzogKGRhdGEpLT4gcmVzdWx0cy5maWZ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3NpeHRoJzogKGRhdGEpLT4gcmVzdWx0cy5zaXh0aCA9IGRhdGFcblx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiBbJ2FiYycsICcxMjMnXVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiB7YToxLCBiOjEyfVxuXHRcdFx0XHRcdFx0XHQnc2l4dGgnOiA5OTlcblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bihkYXRhOlxuXHRcdFx0XHRcdCdzZWNvbmQnOiBudWxsXG5cdFx0XHRcdFx0J2ZvdXJ0aCc6IDE5XG5cdFx0XHRcdFx0J2ZpZnRoJzogZmFsc2Vcblx0XHRcdFx0XHQnc2l4dGgnOiB1bmRlZmluZWRcblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdGZpcnN0OiBbJ2FiYycsICcxMjMnXVxuXHRcdFx0XHRcdHNlY29uZDogbnVsbFxuXHRcdFx0XHRcdHRoaXJkOiB7YToxLCBiOjEyfVxuXHRcdFx0XHRcdGZvdXJ0aDogMTlcblx0XHRcdFx0XHRmaWZ0aDogZmFsc2Vcblx0XHRcdFx0XHRzaXh0aDogdW5kZWZpbmVkXG5cblx0XHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHJlc3VsdHMpLmxlbmd0aCkudG8uZXF1YWwoNilcblxuXG5cdFx0XHR0ZXN0IFwiVmFsdWVzIGluIG9wdGlvbnMuZGF0YSB0aGF0IGRvIG5vdCBoYXZlIGEgbWF0Y2hpbmcgY29tcHV0ZXIgd2lsbCBiZSBza2lwcGVkXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YTpcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkIHZhbHVlJ1xuXHRcdFx0XHRcdCdmb3VydGgnOiAnZm91cnRoIHZhbHVlJ1xuXHRcdFx0XHQpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblxuXHRcdFx0XHRleHBlY3QoT2JqZWN0LmtleXMocmVzdWx0cykubGVuZ3RoKS50by5lcXVhbCgzKVxuXG5cblx0XHRcdHRlc3QgXCJDb21wdXRlcnMgaW4gdGVtcGxhdGUgY2hpbGRyZW4gd2lsbCByZWNlaXZlIHRoZSBwYXJlbnQncyBvcHRpb25zLmRhdGFcIiwgKCktPlxuXHRcdFx0XHRyZXN1bHRzID0gcGFyZW50Ont9LCBjaGlsZEE6e30sIGNoaWxkQjp7fSwgY2hpbGRDOnt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLnBhcmVudC5maXJzdCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IHJlc3VsdHMucGFyZW50LnNlY29uZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3RoaXJkJzogKGRhdGEpLT4gcmVzdWx0cy5wYXJlbnQudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEEuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRBLnNlY29uZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkQS50aGlyZCA9IGRhdGFcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdFsnZGl2JywgbnVsbCxcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEIuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEIuZm91cnRoID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRDLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdFx0J3NpeHRoJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEMuc2l4dGggPSBkYXRhXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bihkYXRhOlxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFx0J2ZvdXJ0aCc6ICdmb3VydGggdmFsdWUnXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMucGFyZW50KS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzLmNoaWxkQSkudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZEIpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J2ZvdXJ0aCc6ICdmb3VydGggdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZEMpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cblxuXHRcdFx0dGVzdCBcIlBhcmVudCBkZWZhdWx0cyB3aWxsIG5vdCBiZSBwYXNzZWQgdG8gY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0XHRyZXN1bHRzID0gcGFyZW50Ont9LCBjaGlsZDp7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5wYXJlbnQuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLnBhcmVudC5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMucGFyZW50LnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdFx0XHQnZm91cnRoJzogJ2ZvdXJ0aCB2YWx1ZSdcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLnNlY29uZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdCdmb3VydGgnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLmZvdXJ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bihkYXRhOlxuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5wYXJlbnQpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZCkudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cblxuXHRcdFx0dGVzdCBcIkRlZmF1bHRzIHNob3VsZCBvbmx5IGJlIGFwcGxpZWQgb25jZVwiLCAoKS0+XG5cdFx0XHRcdGNvdW50ID0gcGFyZW50OjAsIGNoaWxkOjAsIGNoaWxkQ2hpbGQ6MFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdHJlZjogJ3BhcmVudCdcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gY291bnQucGFyZW50Kytcblx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRyZWY6ICdjaGlsZCdcblx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IGNvdW50LnBhcmVudCsrXG5cdFx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IGNvdW50LmNoaWxkKytcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRyZWY6ICdjaGlsZCdcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogKGRhdGEpLT4gY291bnQuY2hpbGRDaGlsZCsrXG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogJ2ZvdXJ0aCB2YWx1ZSdcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oZGF0YTondGhpcmQnOid0aGlyZCB2YWx1ZScpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIHBhcmVudDoxLCBjaGlsZDoxLCBjaGlsZENoaWxkOjFcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgcGFyZW50OjIsIGNoaWxkOjIsIGNoaWxkQ2hpbGQ6MlxuXG5cblx0XHRcdHRlc3QgXCJEYXRhL2RlZmF1bHRzIHNob3VsZCBiZSBhcHBsaWVkIGV2ZW4gd2hlbiBwYXJlbnQgZG9lc24ndCBoYXZlIGNvbXB1dGVyc1wiLCAoKS0+XG5cdFx0XHRcdGNvdW50ID0gMFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2RpdicsIG51bGwsXG5cdFx0XHRcdFx0XHRbJ3NlY3Rpb24nLCBudWxsLFxuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiBjb3VudCsrXG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKGRhdGE6J2ZpcnN0Jzonc2Vjb25kIHZhbHVlJylcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxdWFsKDIpXG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgY2FuIGJlIHJlLWFwcGxpZWQgdmlhIC5hcHBseURhdGEoZGF0YSlcIiwgKCktPlxuXHRcdFx0XHRyZXN1bHRzID0ge307IGNvdW50ID0ge2E6MCwgYjowLCBjOjAsIGQ6MCwgZTowLCBmOjB9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnYSc6IChkYXRhKS0+IHJlc3VsdHMuYSA9IGRhdGE7XHRjb3VudC5hKytcblx0XHRcdFx0XHRcdFx0J2InOiAoZGF0YSktPiByZXN1bHRzLmIgPSBkYXRhO1x0Y291bnQuYisrXG5cdFx0XHRcdFx0XHRcdCdjJzogKGRhdGEpLT4gcmVzdWx0cy5jID0gZGF0YTtcdGNvdW50LmMrK1xuXHRcdFx0XHRcdFx0XHQnZCc6IChkYXRhKS0+IHJlc3VsdHMuZCA9IGRhdGE7XHRjb3VudC5kKytcblx0XHRcdFx0XHRcdFx0J2UnOiAoZGF0YSktPiByZXN1bHRzLmUgPSBkYXRhO1x0Y291bnQuZSsrXG5cdFx0XHRcdFx0XHRcdCdmJzogKGRhdGEpLT4gcmVzdWx0cy5mID0gZGF0YTtcdGNvdW50LmYrK1xuXHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdCdhJzogMVxuXHRcdFx0XHRcdFx0XHQnYyc6IDNcblx0XHRcdFx0XHRcdFx0J2YnOiA2XG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YToge2I6MiwgZDo0LCBlOjUsIGY6Nn0pXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIHthOjEsIGI6MiwgYzozLCBkOjQsIGU6NSwgZjo2fVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmRlZXAuZXF1YWwge2E6MSwgYjoxLCBjOjEsIGQ6MSwgZToxLCBmOjF9XG5cblx0XHRcdFx0aW5zdGFuY2UuYXBwbHlEYXRhKGE6MTEsIGI6MjIsIGQ6NDQsIGU6NTUpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIHthOjExLCBiOjIyLCBjOjMsIGQ6NDQsIGU6NTUsIGY6Nn1cblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5kZWVwLmVxdWFsIHthOjIsIGI6MiwgYzoyLCBkOjIsIGU6MiwgZjoyfVxuXG5cblx0XHRcdHRlc3QgXCJUaGUgJ19pbml0JyBjb21wdXRlciB3aWxsIGJlIHJ1biBieSBkZWZhdWx0IG9uIHRlbXBsYXRlIHNwYXduIHJlZ2FyZGxlc3Mgb2YgZGF0YVwiLCAoKS0+XG5cdFx0XHRcdGNvdW50ID0ge31cblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRyZWY6ICdkaXZBJ1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOiBfaW5pdDogKCktPiBjb3VudFtAcmVmXT89MDsgY291bnRbQHJlZl0rK1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2Qidcblx0XHRcdFx0XHRcdFx0ZGF0YTogZmlyc3Q6ICcxJ1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6IF9pbml0OiAoKS0+IGNvdW50W0ByZWZdPz0wOyBjb3VudFtAcmVmXSsrXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRyZWY6ICdkaXZDJ1xuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRyZWY6ICdkaXZEJ1xuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2RSdcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczogX2luaXQ6ICgpLT4gY291bnRbQHJlZl0/PTA7IGNvdW50W0ByZWZdKytcblx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIHt9XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgZGl2QToxLCBkaXZCOjEsIGRpdkU6MVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBkaXZBOjIsIGRpdkI6MiwgZGl2RToyXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5jaGlsZC5kaXZCLnNwYXduKGRhdGE6c2Vjb25kOicyJylcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgZGl2QToyLCBkaXZCOjMsIGRpdkU6MlxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuY2hpbGQuZGl2Qy5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIGRpdkE6MiwgZGl2QjozLCBkaXZFOjNcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLmNoaWxkLmRpdkMuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBkaXZBOjIsIGRpdkI6MywgZGl2RTo0XG5cblxuXHRcdFx0dGVzdCBcIlRoZSAnX2luaXQnIGNvbXB1dGVyIHdpbGwgYmUgcGFzc2VkIGFsbCBvZiB0aGUgZGF0YSB0aGUgdGVtcGxhdGUgc3Bhd24gcmVjZWl2ZXNcIiwgKCktPlxuXHRcdFx0XHRyZXN1bHQgPSBkaXZBOnt9LCBkaXZCOnt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0cmVmOiAnZGl2QSdcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0aHJlZjogKGhyZWYpLT4gcmVzdWx0W0ByZWZdLmhyZWYgPSBocmVmXG5cdFx0XHRcdFx0XHRcdG5hbWU6IChuYW1lKS0+IHJlc3VsdFtAcmVmXS5uYW1lID0gbmFtZVxuXHRcdFx0XHRcdFx0XHRfaW5pdDogKCktPiByZXN1bHRbQHJlZl0uX2luaXQgPSBhcmd1bWVudHNbMF1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHJlZjogJ2RpdlByb3h5J1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2Qidcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0czogZmlyc3Q6ICcxJ1xuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHRcdGhyZWY6IChocmVmKS0+IHJlc3VsdFtAcmVmXS5ocmVmID0gaHJlZlxuXHRcdFx0XHRcdFx0XHRcdFx0bmFtZTogKG5hbWUpLT4gcmVzdWx0W0ByZWZdLm5hbWUgPSBuYW1lXG5cdFx0XHRcdFx0XHRcdFx0XHRfaW5pdDogKCktPiByZXN1bHRbQHJlZl0uX2luaXQgPSBhcmd1bWVudHNbMF1cblx0XHRcdFx0XHRcdFx0XVx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3RlZCA9IFxuXHRcdFx0XHRcdGhyZWY6ICdhYmMnXG5cdFx0XHRcdFx0bmFtZTogJzEyMydcblx0XHRcdFx0XHRfaW5pdDoge2hyZWY6J2FiYycsIG5hbWU6JzEyMycsIHZhbHVlOidkZWYnLCBzaXplOic0NTYnfVxuXHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChyZXN1bHQpLnRvLmVxbCBkaXZBOnt9LCBkaXZCOnt9XG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bihkYXRhOntocmVmOidhYmMnLCBuYW1lOicxMjMnLCB2YWx1ZTonZGVmJywgc2l6ZTonNDU2J30pXG5cdFx0XHRcdGV4cGVjdChyZXN1bHQpLnRvLmVxbCB7ZGl2QTpleHBlY3RlZCwgZGl2QjpleHBlY3RlZH1cblx0XHRcdFx0XG5cdFx0XHRcdGRlbGV0ZSByZXN1bHQuZGl2QVxuXHRcdFx0XHRkaXZCOiBudWxsXG5cdFx0XHRcdHRlbXBsYXRlLmNoaWxkLmRpdkIuc3Bhd24oZGF0YTp7aHJlZjonYWJjJywgbmFtZTonMTIzJywgdmFsdWU6J2RlZicsIHNpemU6JzQ1Nid9KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwge2RpdkI6ZXhwZWN0ZWR9XG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgY2FuIGJlIHNwZWNpZmllZCB2aWEgb3B0aW9ucyBvYmplY3RcIiwgKCktPlxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBudWxsXG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOiAnc29tZUxhYmVsJzogKGRhdGEpLT4gcmVjZWl2ZWREYXRhID0gZGF0YSBvciAnbm90aGluZydcblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0dGVtcGxhdGVDb3B5ID0gdGVtcGxhdGUuZXh0ZW5kKG9wdGlvbnM6ZGF0YTp7J3NvbWVMYWJlbCc6J3dvcmtzJ30pXG5cblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbChudWxsKVxuXHRcdFx0XHR0ZW1wbGF0ZUNvcHkuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbCgnd29ya3MnKVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24ob3B0aW9uczpkYXRhOnsnc29tZUxhYmVsJzonYWxzbyB3b3Jrcyd9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbCgnYWxzbyB3b3JrcycpXG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgc3BlY2lmaWVkIGluIGNoaWxkcmVuJ3Mgb3B0aW9ucyBvYmplY3Qgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGUgcGFyZW50J3MgZGF0YVwiLCAoKS0+XG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2RpdicsIG51bGxcblxuXHRcdFx0XHRcdFx0WydzcGFuJ1xuXHRcdFx0XHRcdFx0XHRkYXRhOiBhYmM6IDEyM1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0J2FiYyc6IChkYXRhKS0+IHJlY2VpdmVkRGF0YS5hYmMgPSBkYXRhIG9yICdub3RoaW5nJ1xuXHRcdFx0XHRcdFx0XHRcdCdkZWYnOiAoZGF0YSktPiByZWNlaXZlZERhdGEuZGVmID0gZGF0YSBvciAnbm90aGluZydcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0dGVtcGxhdGVDb3B5ID0gdGVtcGxhdGUuZXh0ZW5kKG9wdGlvbnM6ZGF0YTp7ZGVmOjQ1Nn0pXG5cblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcWwoYWJjOjEyMywgZGVmOm51bGwpXG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGVDb3B5LnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzoxMjMsIGRlZjo0NTYpXG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24ob3B0aW9uczpkYXRhOntkZWY6Nzg5fSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzoxMjMsIGRlZjo3ODkpXG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24ob3B0aW9uczpkYXRhOnthYmM6Nzg5fSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzo3ODksIGRlZjpudWxsKVxuXG5cblx0XHRcdHRlc3QgXCJEYXRhIHdvbid0IGJlIHBhc3NlZCB0byBjaGlsZHJlbiBpZiBvcHRpb25zLnBhc3NEYXRhVG9DaGlsZHJlbiBpcyBmYWxzZVwiLCAoKS0+XG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IHBhcmVudDpudWxsLCBjaGlsZDpudWxsXG5cdFx0XHRcdHRlbXBsYXRlMSA9IERPTS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogYWJjOiAoZGF0YSktPiByZWNlaXZlZERhdGEucGFyZW50ID0gZGF0YVxuXG5cdFx0XHRcdFx0XHRbJ3NwYW4nXG5cdFx0XHRcdFx0XHRcdGNvbXB1dGVyczogYWJjOiAoZGF0YSktPiByZWNlaXZlZERhdGEuY2hpbGQgPSBkYXRhXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdHRlbXBsYXRlMiA9IHRlbXBsYXRlMS5leHRlbmQocGFzc0RhdGFUb0NoaWxkcmVuOmZhbHNlKVxuXHRcdFx0XHRcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsIHBhcmVudDpudWxsLCBjaGlsZDpudWxsXG5cdFx0XHRcdFxuXHRcdFx0XHRlbDEgPSB0ZW1wbGF0ZTEuc3Bhd24oZGF0YTp7YWJjOjEyM30pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6MTIzLCBjaGlsZDoxMjNcblxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBwYXJlbnQ6bnVsbCwgY2hpbGQ6bnVsbFxuXHRcdFx0XHRlbDIgPSB0ZW1wbGF0ZTIuc3Bhd24oZGF0YTp7YWJjOjEyM30pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6MTIzLCBjaGlsZDpudWxsXG5cdFx0XHRcdFxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBwYXJlbnQ6bnVsbCwgY2hpbGQ6bnVsbFxuXHRcdFx0XHRlbDEuYXBwbHlEYXRhKHthYmM6NDU2fSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsIHBhcmVudDo0NTYsIGNoaWxkOjQ1NlxuXHRcdFx0XHRcblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gcGFyZW50Om51bGwsIGNoaWxkOm51bGxcblx0XHRcdFx0ZWwyLmFwcGx5RGF0YSh7YWJjOjQ1Nn0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6NDU2LCBjaGlsZDpudWxsXG5cdFx0XHRcdFxuXHRcdFx0XHRlbDIubGFzdENoaWxkLmFwcGx5RGF0YSh7YWJjOjc4OX0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6NDU2LCBjaGlsZDo3ODlcblxuXG5cdFx0XHR0ZXN0IFwiRGF0YSBzaG91bGQgYmUgaW52b2tlZCBmb3IgcGFyZW50cyBhZnRlciBpbnZva2VkIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdFx0aGlzdG9yeSA9IFtdXG5cdFx0XHRcdGNvbXB1dGVycyA9IFxuXHRcdFx0XHRcdF9pbml0OiAoKS0+IGhpc3RvcnkucHVzaChAcmVmKVxuXHRcdFx0XHRcdGFiYzogKCktPiBoaXN0b3J5LnB1c2goQHJlZilcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J3BhcmVudCd9XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMSd9XG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDInfVxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMyd9XG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgW11cblx0XHRcdFx0ZWwgPSB0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDInLCAnY2hpbGQxJywgJ2NoaWxkMycsICdwYXJlbnQnXVxuXG5cdFx0XHRcdGhpc3RvcnkubGVuZ3RoID0gMFxuXHRcdFx0XHRlbC5hcHBseURhdGEoYWJjOjEyMylcblx0XHRcdFx0ZXhwZWN0KGhpc3RvcnkpLnRvLmVxbCBbJ2NoaWxkMicsICdjaGlsZDEnLCAnY2hpbGQzJywgJ3BhcmVudCddXG5cblxuXHRcdFx0dGVzdCBcIkNvbXB1dGVycyB3aWxsIGJlIGludm9rZWQgb25seSBvbmUgdGltZSBwZXIgZWxlbWVudCBpZiBvcHRpb25zLmludm9rZUNvbXB1dGVyc09uY2UgaXMgb25cIiwgKCktPlxuXHRcdFx0XHRoaXN0b3J5ID0gW11cblx0XHRcdFx0Y29tcHV0ZXJzID0gIGFiYzogKCktPiBoaXN0b3J5LnB1c2goQHJlZilcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J3BhcmVudCcsIGludm9rZUNvbXB1dGVyc09uY2U6dHJ1ZX1cblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHR7Y29tcHV0ZXJzLCBpZDonY2hpbGQxJ31cblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMicsIGludm9rZUNvbXB1dGVyc09uY2U6dHJ1ZX1cblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDMnfVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFtdXG5cdFx0XHRcdGVsID0gdGVtcGxhdGUuc3Bhd24oZGF0YTphYmM6MTIzKVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFsnY2hpbGQyJywgJ2NoaWxkMScsICdjaGlsZDMnLCAncGFyZW50J11cblxuXHRcdFx0XHRoaXN0b3J5Lmxlbmd0aCA9IDBcblx0XHRcdFx0ZWwuYXBwbHlEYXRhKGFiYzoxMjMpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDEnLCAnY2hpbGQzJ11cblxuXHRcdFx0XHRoaXN0b3J5Lmxlbmd0aCA9IDBcblx0XHRcdFx0ZWwuYXBwbHlEYXRhKGFiYzo0NTYpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDEnLCAnY2hpbGQzJ11cblxuXG5cblx0c3VpdGUgXCJNaXNjXCIsICgpLT5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaXNUZW1wbGF0ZVwiLCAoKS0+XG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUgRG9tLnRlbXBsYXRlKFsnZGl2J10pKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUgRG9tLmRpdigpKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIERvbS5kaXYoKVswXSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSB7fSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSAnc3RyaW5nJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSA1KS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIGZhbHNlKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIHRydWUpLnRvLmJlLmZhbHNlXG5cdFx0XG5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaXNRdWlja0VsXCIsICgpLT5cblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIERvbS50ZW1wbGF0ZShbJ2RpdiddKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIERvbS5kaXYoKSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwgRG9tLnRleHQoKSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwgRG9tLmRpdigpWzBdKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwge30pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCAnc3RyaW5nJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIDUpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCBmYWxzZSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIHRydWUpLnRvLmJlLmZhbHNlXG5cdFx0XG5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaXNFbFwiLCAoKS0+XG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgRG9tLnRlbXBsYXRlKFsnZGl2J10pKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS5kaXYoKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCBEb20udGV4dCgpKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS5kaXYoKVswXSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS50ZXh0KClbMF0pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwge30pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgJ3N0cmluZycpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgNSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCBmYWxzZSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCB0cnVlKS50by5iZS5mYWxzZVxuXHRcdFxuXG5cdFx0dGVzdCBcIlN0cmluZ2lmaWNhdGlvblwiLCAoKS0+XG5cdFx0XHRzZWN0aW9uID0gRG9tKFxuXHRcdFx0XHRbJ3NlY3Rpb24nLHtcblx0XHRcdFx0XHRpZDogJ3RoZVNlY3Rpb24nXG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiAndGhlU2VjdGlvbkNsYXNzJ1xuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJ1xuXHRcdFx0XHRcdFx0J29wYWNpdHknOiAwLjVcblx0XHRcdFx0XHRcdCdmb250U2l6ZSc6ICgpLT4gJzI5cHgnXG5cdFx0XHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0XHRcdGZvbnRTaXplOiAnMTFweCdcblx0XHRcdFx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0XHRcdFx0Zm9udFNpemU6ICc4cHgnXG5cdFx0XHRcdH1cblx0XHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRBJywgc3R5bGU6cG9zaXRpb246J3JlbGF0aXZlJ30sICdjaGlsZEEtaW5uZXJ0ZXh0J11cblx0XHRcdFx0XHQnc2VjdGlvbi1pbm5lcnRleHQnXG5cdFx0XHRcdFx0WydzcGFuJywge2lkOidjaGlsZEInLCByZWY6J2NoaWxkQi1yZWYhJywgc3R5bGU6cG9zaXRpb246J2Fic29sdXRlJ31cblx0XHRcdFx0XHRcdCdjaGlsZEItaW5uZXJ0ZXh0J1xuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge3RleHQ6J2NoaWxkQi1pbm5lcnRleHQgMid9XVxuXHRcdFx0XHRcdFx0WydhJywge3VybDonaHR0cHM6Ly9nb29nbGUuY29tJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHR3aW5kb3cuc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeShzZWN0aW9uLCBudWxsLCAyKVxuXHRcdFx0c2VjdGlvbkNvcHkgPSBEb20oSlNPTi5wYXJzZShzdHJpbmdpZmllZCkpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS50eXBlKS50by5lcXVhbChzZWN0aW9uLnR5cGUpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkucmVmKS50by5lcXVhbChzZWN0aW9uLnJlZilcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5lbC5pZCkudG8uZXF1YWwoc2VjdGlvbi5lbC5pZClcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKHNlY3Rpb24uZWwuY2xhc3NOYW1lKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnN0eWxlICdwb3NpdGlvbicpLnRvLmVxdWFsKHNlY3Rpb24uc3R5bGUgJ3Bvc2l0aW9uJylcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsKHNlY3Rpb24uc3R5bGUgJ29wYWNpdHknKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnN0eWxlICdmb250U2l6ZScpLm5vdC50by5lcXVhbChzZWN0aW9uLnN0eWxlICdmb250U2l6ZScpXG5cdFx0XHRcblx0XHRcdHNlY3Rpb24uc3R5bGUgJ2ZvbnRTaXplJywgbnVsbFxuXHRcdFx0c2VjdGlvbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0c2VjdGlvbkNvcHkuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbChzZWN0aW9uLnN0eWxlICdmb250U2l6ZScpXG5cdFx0XHRcblx0XHRcdHNlY3Rpb24uc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0c2VjdGlvbkNvcHkuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKHNlY3Rpb24uc3R5bGUgJ2ZvbnRTaXplJylcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoc2VjdGlvbi5jaGlsZHJlbi5sZW5ndGgpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoc2VjdGlvbkNvcHkuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoT2JqZWN0LmtleXMoc2VjdGlvbi5jaGlsZCkubGVuZ3RoKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnRleHQpLnRvLmVxdWFsKHNlY3Rpb24udGV4dClcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5odG1sKS50by5lcXVhbChzZWN0aW9uLmh0bWwpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuY2hpbGRyZW5bMF0uc3R5bGUgJ3Bvc2l0aW9uJykudG8uZXF1YWwoc2VjdGlvbi5jaGlsZHJlblswXS5zdHlsZSAncG9zaXRpb24nKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LmNoaWxkcmVuWzJdLnN0eWxlICdwb3NpdGlvbicpLnRvLmVxdWFsKHNlY3Rpb24uY2hpbGRyZW5bMl0uc3R5bGUgJ3Bvc2l0aW9uJylcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5jaGlsZHJlblsyXS5yZWYpLnRvLmVxdWFsKHNlY3Rpb24uY2hpbGRyZW5bMl0ucmVmKVxuXG5cblx0XHR0ZXN0IFwiQ2hhaW5pbmdcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRjaGFpblJlc3VsdCA9IGRpdlxuXHRcdFx0XHQuc3RhdGUoJ2FiYycsIG9uKVxuXHRcdFx0XHQucmVzZXRTdGF0ZSgpXG5cdFx0XHRcdC5zdHlsZSgpXG5cdFx0XHRcdC5jc3MoJ3dpZHRoJywgMTIpXG5cdFx0XHRcdC5hdHRyKCd0ZXN0JywgMTIzKVxuXHRcdFx0XHQucHJvcCgnYW5vdGhlclRlc3QnLCAxMjMpXG5cdFx0XHRcdC51cGRhdGVTdGF0ZVN0eWxlcyh7aGVpZ2h0OjUwfSlcblx0XHRcdFx0LnVwZGF0ZVN0YXRlVGV4dHMoeyRiYXNlOidhYmMnfSlcblx0XHRcdFx0LmFwcGVuZCgpXG5cdFx0XHRcdC5hcHBlbmRUbygpXG5cdFx0XHRcdC5wcmVwZW5kKClcblx0XHRcdFx0LnByZXBlbmRUbygpXG5cdFx0XHRcdC5iZWZvcmUoKVxuXHRcdFx0XHQuYWZ0ZXIoKVxuXHRcdFx0XHQuaW5zZXJ0QmVmb3JlKClcblx0XHRcdFx0Lmluc2VydEFmdGVyKClcblx0XHRcdFx0LmRldGFjaCgpXG5cdFx0XHRcdC53cmFwKERvbS5zZWN0aW9uKCkpXG5cdFx0XHRcdC51bndyYXAoKVxuXHRcdFx0XHQud3JhcChEb20uaGVhZGVyKCkpXG5cdFx0XHRcdC5yZXBsYWNlKClcblx0XHRcdFx0LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRcdC53cmFwKGhlYWQ9RG9tLmhlYWRlcigpKVxuXHRcdFx0XHQub24oJ2FiYycsICgpLT4pXG5cdFx0XHRcdC5lbWl0KCdhYmMnKVxuXHRcdFx0XHQub2ZmKCdhYmMnKVxuXHRcdFx0XHQub2ZmKClcblxuXHRcdFx0ZXhwZWN0KGNoYWluUmVzdWx0KS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3Qoc2FuZGJveC5jaGlsZHJlblswXSkudG8uZXF1YWwoaGVhZC5lbClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbChoZWFkKVxuXHRcdFx0ZXhwZWN0KGRpdi5jc3MgJ3dpZHRoJykudG8uZXF1YWwoJzEycHgnKVxuXG5cblx0XHR0ZXN0IFwiSW52YWxpZCBBcmd1bWVudHNcIiwgKCktPlxuXHRcdFx0dGV4dCA9IERvbS50ZXh0KCdzb21lVGV4dCcsIHtsb3N0T3B0czp0cnVlfSlcblx0XHRcdGRpdiA9IERvbS5kaXYoe2xvc3RPcHRzOnRydWV9KVxuXG5cdFx0XHRleHBlY3QoRG9tKCkpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KERvbShudWxsKSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoRG9tKHt9KSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZU9wdGlvbnMoKSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QodGV4dC5vcHRpb25zLmxvc3RPcHRzKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChkaXYub3B0aW9ucy5sb3N0T3B0cykudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5vbigpKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYub24oJ2FiYycpKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYub24oJ2FiYycsIHt9KSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2Lm9uY2UoJ2FiYycpKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYub2ZmKCdzb21ldGhpbmdGYWtlJykpLnRvLmVxdWFsIGRpdlxuXG5cdFx0XHRlbWl0Q291bnQgPSAwOyBkaXYub24gJ3NvbWV0aGluZycsIGNiPSgpLT4gZW1pdENvdW50Kytcblx0XHRcdGV4cGVjdChkaXYuZW1pdCgnJykpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChkaXYuZW1pdCgpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXRQcml2YXRlKCdub25lJykpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChkaXYuZW1pdFByaXZhdGUoJycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXRQcml2YXRlKCkpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZGl2LmVtaXQoJ3NvbWV0aGluZycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5vZmYoJ3NvbWV0aGluZycsICgpLT4pKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXQoJ3NvbWV0aGluZycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYuY3NzKG51bGwsICcxMjknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5udWxsKS50by5lcXVhbCh1bmRlZmluZWQpXG5cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUoKSkudG8uZXFsIFtdXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlKG51bGwsIG9uKSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlKDEyMywgb24pKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Jhc2UnLCBvbikudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiYXNlJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJyR3aGF0ZXZzJywgb24pLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnd2hhdGV2cycpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYW5vdGhlcicsIG9uKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdhbm90aGVyJywgdW5kZWZpbmVkKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInKS50by5iZS5mYWxzZVxuXG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlU3R5bGVzIHskYmFzZTp7d2lkdGg6MX19KS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYudXBkYXRlU3RhdGVTdHlsZXMgbnVsbCkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlVGV4dHMgeyRiYXNlOidhYmMnfSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlVGV4dHMgbnVsbCkudG8uZXF1YWwgZGl2XG5cblx0XHRcdGRpdi5hcHBlbmRUbyhEb20gc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbChEb20gc2FuZGJveClcblxuXHRcdFx0ZGl2LmFwcGVuZCh0cnVlKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRkaXYuYXBwZW5kVG8oZG9jdW1lbnQpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYucHJlcGVuZCh0cnVlKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRkaXYucHJlcGVuZFRvKHRydWUpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYuYWZ0ZXIodHJ1ZSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2Lmluc2VydEFmdGVyKDEyMylcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbChEb20gc2FuZGJveClcblx0XHRcdGRpdi5iZWZvcmUodHJ1ZSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2Lmluc2VydEJlZm9yZSgxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYud3JhcCgxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYucmVwbGFjZSgxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRkaXYudW53cmFwKClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMFxuXG5cdFx0XHRkaXYuYXBwZW5kVG8oRG9tIHNhbmRib3gpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0aWYgRG9tKHNhbmRib3gpLl9yZW1vdmVDaGlsZFxuXHRcdFx0XHREb20oc2FuZGJveCkuX3JlbW92ZUNoaWxkKHRleHQpXG5cdFx0XHRcdERvbShzYW5kYm94KS5fcmVtb3ZlQ2hpbGQoRG9tLmRpdigpKVxuXHRcdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goe30pXG5cdFx0XHRcdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdGV4cGVjdCAoKS0+IERvbS5iYXRjaCg1NDMyKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goW10pXG5cdFx0XHRcdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdGV4cGVjdCAoKS0+IERvbS5iYXRjaChbMTJdKS5hcHBlbmQoRG9tLmRpdigpKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goWzEyXSlcblx0XHRcdFx0Lm5vdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdCMgZXhwZWN0ICgpLT4gRG9tLmJhdGNoKCQoJ2RpdicpKVxuXHRcdFx0IyBcdC5ub3QudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUoKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUobnVsbClcblx0XHRcdFx0LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLnRlbXBsYXRlKHt9KVxuXHRcdFx0XHQudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUoWzg0ODIsIHtjbGFzc05hbWU6J3QnfV0pXG5cdFx0XHRcdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS50ZW1wbGF0ZShbJ2RpdicsICdzb21lU3RyaW5nJ10pXG5cdFx0XHRcdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS50ZW1wbGF0ZShbJ2RpdicsIG51bGwsICdTb21lIElubmVyIFRleHQnXSlcblx0XHRcdFx0Lm5vdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS5kaXYoc3R5bGU6e29wYWNpdHk6MC41LCAnQGFiYyhtYXgtd2lkdGg6MzkwKSc6e29wYWNpdHk6MX19KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XHQubm90LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0KCgpLT5cblx0XHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRcdGRpdi5waXBlU3RhdGUoZGl2KVxuXHRcdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0KS5ub3QudG8udGhyb3coKVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuSFRNTEVsZW1lbnQ6Om9uRXZlbnQgPSAoZXZlbnROYW1lLCBjYWxsYmFjayktPlxuXHRpZiBAYWRkRXZlbnRMaXN0ZW5lclxuXHRcdEBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spXG5cdGVsc2Vcblx0XHRAYXR0YWNoRXZlbnQoXCJvbiN7ZXZlbnROYW1lfVwiLCBjYWxsYmFjaylcblxuXG5IVE1MRWxlbWVudDo6cmVtb3ZlRXZlbnQgPSAoZXZlbnROYW1lLCBjYWxsYmFjayktPlxuXHRpZiBAcmVtb3ZlRXZlbnRMaXN0ZW5lclxuXHRcdEByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spXG5cdGVsc2Vcblx0XHRAZGV0YWNoRXZlbnQoXCJvbiN7ZXZlbnROYW1lfVwiLCBjYWxsYmFjaylcblxuXG5IVE1MRWxlbWVudDo6ZW1pdEV2ZW50ID0gKGV2ZW50TmFtZSktPlxuXHRldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpXG5cdGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIHRydWUsIGZhbHNlKVxuXHRAZGlzcGF0Y2hFdmVudChldmVudClcblxuXG5pZiBIVE1MRWxlbWVudC5uYW1lIGlzbnQgJ0hUTUxFbGVtZW50J1xuXHRIVE1MRWxlbWVudC5uYW1lID0gJ0hUTUxFbGVtZW50J1xuXHRUZXh0Lm5hbWUgPSAnVGV4dCdcblx0bm9uRWxlbWVudFN1ZmZpeCA9IFtcblx0XHQnT3B0aW9uc0NvbGxlY3Rpb24nXG5cdFx0J0Zvcm1Db250cm9sc0NvbGxlY3Rpb24nXG5cdFx0J0RvY3VtZW50J1xuXHRcdCdDb2xsZWN0aW9uJ1xuXHRcdCdBbGxDb2xsZWN0aW9uJ1xuXHRdXG5cdGVsZW1lbnRTdWZmaXggPSBbXG5cdFx0XCJWaWRlb1wiLFwiVW5rbm93blwiLFwiVUxpc3RcIixcIlRyYWNrXCIsXCJUaXRsZVwiLFxuXHRcdFwiVGV4dEFyZWFcIixcIlRlbXBsYXRlXCIsXCJUYWJsZVNlY3Rpb25cIixcIlRhYmxlUm93XCIsXG5cdFx0XCJUYWJsZVwiLFwiVGFibGVDb2xcIixcIlRhYmxlQ2VsbFwiLFwiVGFibGVDYXB0aW9uXCIsXG5cdFx0XCJTdHlsZVwiLFwiU3BhblwiLFwiU291cmNlXCIsXCJTbG90XCIsXCJTaGFkb3dcIixcIlNlbGVjdFwiLFxuXHRcdFwiU2NyaXB0XCIsXCJRdW90ZVwiLFwiUHJvZ3Jlc3NcIixcIlByZVwiLFwiUGljdHVyZVwiLFxuXHRcdFwiUGFyYW1cIixcIlBhcmFncmFwaFwiLFwiT3V0cHV0XCIsXCJPcHRpb25cIixcIk9wdEdyb3VwXCIsXG5cdFx0XCJPYmplY3RcIixcIk9MaXN0XCIsXCJNb2RcIixcIk1ldGVyXCIsXCJNZXRhXCIsXCJNZW51XCIsXG5cdFx0XCJNZWRpYVwiLFwiTWFycXVlZVwiLFwiTWFwXCIsXCJMaW5rXCIsXCJMZWdlbmRcIixcIkxhYmVsXCIsXG5cdFx0XCJMSVwiLFwiSW5wdXRcIixcIkltYWdlXCIsXCJJRnJhbWVcIixcIkh0bWxcIixcIkhlYWRpbmdcIixcblx0XHRcIkhlYWRcIixcIkhSXCIsXCJGcmFtZVNldFwiLFwiRnJhbWVcIixcIkZvcm1cIixcIkZvbnRcIixcblx0XHRcIkZpZWxkU2V0XCIsXCJFbWJlZFwiLFwiRGl2XCIsXCJEaXJlY3RvcnlcIixcIkRpYWxvZ1wiLFxuXHRcdFwiRGV0YWlsc1wiLFwiRGF0YUxpc3RcIixcIkRMaXN0XCIsXCJDb250ZW50XCIsXCJDYW52YXNcIixcblx0XHRcIkJ1dHRvblwiLFwiQm9keVwiLFwiQmFzZVwiLFwiQlJcIixcIkF1ZGlvXCIsXCJBcmVhXCIsXCJBbmNob3JcIlxuXHRdXG5cblx0Zm9yIGNyZWF0b3IgaW4gbm9uRWxlbWVudFN1ZmZpeFxuXHRcdHdpbmRvd1tcIkhUTUwje2NyZWF0b3J9XCJdPy5uYW1lID0gXCJIVE1MI3tjcmVhdG9yfVwiXG5cblx0Zm9yIGNyZWF0b3IgaW4gZWxlbWVudFN1ZmZpeFxuXHRcdHdpbmRvd1tcIkhUTUwje2NyZWF0b3J9RWxlbWVudFwiXT8ubmFtZSA9IFwiSFRNTCN7Y3JlYXRvcn1FbGVtZW50XCJcblxuXHR3aW5kb3cuU1ZHRWxlbWVudD8ubmFtZSA9ICdTVkdFbGVtZW50J1xuXHR3aW5kb3cuU1ZHU1ZHRWxlbWVudD8ubmFtZSA9ICdTVkdTVkdFbGVtZW50J1xuXHR3aW5kb3cuU1ZHUG9seWxpbmVFbGVtZW50Py5uYW1lID0gJ1NWR1BvbHlsaW5lRWxlbWVudCdcblxud2luZG93LkNsaWVudFJlY3QgPz0gRE9NUmVjdFxuXG5cblxuXG4iLCJ7XG4gIFwibmFtZVwiOiBcInF1aWNrZG9tXCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMC44OFwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiRmFzdCAmIGxpZ2h0IERPTSBlbGVtZW50IG1hbmFnZW1lbnQgc3VwcG9ydGluZyBqcXVlcnktbGlrZSBtZXRob2RzLCB0ZW1wbGF0ZXMsICYgc3RhdGUtYmFzZWQgc3R5bGluZ1wiLFxuICBcIm1haW5cIjogXCJkaXN0L3F1aWNrZG9tLmpzXCIsXG4gIFwiYnJvd3NlclwiOiB7XG4gICAgXCIuL2RlYnVnXCI6IFwiZGlzdC9xdWlja2RvbS5kZWJ1Zy5qc1wiLFxuICAgIFwiLi9kaXN0L3F1aWNrZG9tLmpzXCI6IFwic3JjL2luZGV4LmNvZmZlZVwiXG4gIH0sXG4gIFwiYnJvd3NlcmlmeVwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogW1xuICAgICAgXCJzaW1wbHlpbXBvcnQvY29tcGF0XCJcbiAgICBdXG4gIH0sXG4gIFwic2ltcGx5aW1wb3J0XCI6IHtcbiAgICBcImZpbmFsVHJhbnNmb3JtXCI6IFtcbiAgICAgIFwiLmNvbmZpZy90cmFuc2Zvcm1zL21pbmlmeS1zdXBlclwiLFxuICAgICAgXCIuY29uZmlnL3RyYW5zZm9ybXMvbWluaWZ5LXJlbmFtZVwiLFxuICAgICAgXCIuY29uZmlnL3RyYW5zZm9ybXMvbWluaWZ5LXNpbXBsZVwiXG4gICAgXVxuICB9LFxuICBcImRpcmVjdG9yaWVzXCI6IHtcbiAgICBcInRlc3RcIjogXCJ0ZXN0XCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInBvc3R2ZXJzaW9uXCI6IFwibnBtIHJ1biBidWlsZCAmJiBnaXQgYWRkIC4gJiYgZ2l0IGNvbW1pdCAtYSAtbSAnW0J1aWxkXSdcIixcbiAgICBcInByZXB1Ymxpc2hPbmx5XCI6IFwibnBtIHJ1biB0ZXN0OnRyYXZpc1wiLFxuICAgIFwicG9zdHB1Ymxpc2hcIjogXCJnaXQgcHVzaFwiLFxuICAgIFwid2F0Y2hcIjogXCJjYWtlIC1kIHdhdGNoXCIsXG4gICAgXCJidWlsZFwiOiBcImNha2UgLWQgYnVpbGQgJiYgY2FrZSBidWlsZCAmJiBjYWtlIG1lYXN1cmUgJiYgY3AgLXIgYnVpbGQvKiBkaXN0L1wiLFxuICAgIFwidGVzdFwiOiBcIm5wbSBydW4gdGVzdDpicm93c2VyIC1zIHx8IHRydWVcIixcbiAgICBcInRlc3Q6dHJhdmlzXCI6IFwibnBtIHJ1biB0ZXN0OmJyb3dzZXIgLXMgJiYgbnBtIHJ1biB0ZXN0Om1pbmlmaWVkIC1zXCIsXG4gICAgXCJ0ZXN0OmxvY2FsXCI6IFwib3BlbiB0ZXN0L3Rlc3RydW5uZXIuaHRtbFwiLFxuICAgIFwidGVzdDptaW5pZmllZFwiOiBcIm1pbmlmaWVkPTEgbnBtIHJ1biB0ZXN0OmJyb3dzZXIgLXMgfHwgdHJ1ZVwiLFxuICAgIFwidGVzdDprYXJtYVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAgIGthcm1hIHN0YXJ0IC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6YnJvd3NlclwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyBrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW4gLS1icm93c2VycyBFbGVjdHJvbiAuY29uZmlnL2thcm1hLmNvbmYuY29mZmVlXCIsXG4gICAgXCJ0ZXN0OmNocm9tZVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAga2FybWEgc3RhcnQgLS1zaW5nbGUtcnVuIC0tYnJvd3NlcnMgQ2hyb21lIC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6ZmlyZWZveFwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyBrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW4gLS1icm93c2VycyBGaXJlZm94IC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6c2FmYXJpXCI6IFwiY2FrZSBpbnN0YWxsOnRlc3Q7ICBrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW4gLS1icm93c2VycyBTYWZhcmkgLmNvbmZpZy9rYXJtYS5jb25mLmNvZmZlZVwiLFxuICAgIFwidGVzdDpzYXVjZVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAgIHNhdWNlPTEga2FybWEgc3RhcnQgLmNvbmZpZy9rYXJtYS5jb25mLmNvZmZlZVwiLFxuICAgIFwiY292ZXJhZ2VcIjogXCJjYWtlIGluc3RhbGw6Y292ZXJhZ2U7IG5wbSBydW4gY292ZXJhZ2U6cnVuICYmIG5wbSBydW4gY292ZXJhZ2U6YmFkZ2VcIixcbiAgICBcImNvdmVyYWdlOnJ1blwiOiBcImNvdmVyYWdlPXRydWUgbnBtIHJ1biB0ZXN0OmVsZWN0cm9uXCIsXG4gICAgXCJjb3ZlcmFnZTpiYWRnZVwiOiBcImJhZGdlLWdlbiAtZCAuLy5jb25maWcvYmFkZ2VzL2NvdmVyYWdlXCIsXG4gICAgXCJjb3ZlcmFnZTpzaG93XCI6IFwib3BlbiBjb3ZlcmFnZS9sY292LXJlcG9ydC9pbmRleC5odG1sXCJcbiAgfSxcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsa2FsZW4vcXVpY2tkb20uZ2l0XCJcbiAgfSxcbiAgXCJhdXRob3JcIjogXCJkYW5pZWxrYWxlblwiLFxuICBcImxpY2Vuc2VcIjogXCJJU0NcIixcbiAgXCJidWdzXCI6IHtcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxrYWxlbi9xdWlja2RvbS9pc3N1ZXNcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGthbGVuL3F1aWNrZG9tI3JlYWRtZVwiLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAZGFuaWVsa2FsZW4vaXNcIjogXCJeMi4wLjBcIixcbiAgICBcInF1aWNrY3NzXCI6IFwiXjEuMy40XCIsXG4gICAgXCJzbWFydC1leHRlbmRcIjogXCJeMS43LjNcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJibHVlYmlyZFwiOiBcIl4zLjUuMFwiLFxuICAgIFwiY2hhbGtcIjogXCJeMi4wLjFcIixcbiAgICBcImNvZmZlZS1zY3JpcHRcIjogXCJeMS4xMi42XCIsXG4gICAgXCJleGVjYVwiOiBcIl4wLjcuMFwiLFxuICAgIFwiZnMtamV0cGFja1wiOiBcIl4wLjEzLjNcIixcbiAgICBcInByb21pc2UtYnJlYWtcIjogXCJeMC4xLjJcIixcbiAgICBcInNlbXZlclwiOiBcIl41LjMuMFwiXG4gIH1cbn1cbiIsIm9yaWdEZXNjcmlwdG9ycyA9IFxuXHQnaW5uZXJXaWR0aCc6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LCAnaW5uZXJXaWR0aCcpXG5cdCdpbm5lckhlaWdodCc6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LCAnaW5uZXJIZWlnaHQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyAoKS0+XG5cdG92ZXJ3cml0dGVuID0gZmFsc2Vcblx0Y3VycmVudCA9IHdpZHRoOndpbmRvdy5pbm5lcldpZHRoLCBoZWlnaHQ6d2luZG93LmlubmVySGVpZ2h0XG5cdFxuXHRnZXRSZWFsID0gKGRpbWVuc2lvbiktPlxuXHRcdGRpbWVuc2lvbiA9ICdpbm5lcicrZGltZW5zaW9uLnJlcGxhY2UgL1xcYi4vLCAobGV0dGVyKS0+IGxldHRlci50b1VwcGVyQ2FzZSgpXG5cdFx0b3JpZ0Rlc2NyaXB0b3JzW2RpbWVuc2lvbl0uZ2V0LmNhbGwod2luZG93KVxuXG5cdG92ZXJ3cml0ZSA9ICgpLT4gdW5sZXNzIG92ZXJ3cml0dGVuXG5cdFx0b3ZlcndyaXR0ZW4gPSB0cnVlXG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5IHdpbmRvdywgJ2lubmVyV2lkdGgnLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRnZXQ6ICgpLT4gY3VycmVudC53aWR0aFxuXHRcdFx0c2V0OiAobmV3VmFsdWUpLT4gY3VycmVudC53aWR0aCA9IG5ld1ZhbHVlXG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5IHdpbmRvdywgJ2lubmVySGVpZ2h0Jyxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0Z2V0OiAoKS0+IGN1cnJlbnQuaGVpZ2h0XG5cdFx0XHRzZXQ6IChuZXdWYWx1ZSktPiBjdXJyZW50LmhlaWdodCA9IG5ld1ZhbHVlXG5cdFxuXG5cdEBzaW11bGF0ZSA9ICh3aWR0aCwgaGVpZ2h0KS0+XG5cdFx0Y3VycmVudC53aWR0aCA9IHdpZHRoIGlmIHdpZHRoXG5cdFx0Y3VycmVudC5oZWlnaHQgPSBoZWlnaHQgaWYgaGVpZ2h0XG5cdFx0XG5cdFx0b3ZlcndyaXRlKClcblx0XHRldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpXG5cdFx0ZXZlbnQuaW5pdEV2ZW50KCdyZXNpemUnLCB0cnVlLCBmYWxzZSlcblx0XHR3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudClcblxuXG5cdEByZXN0b3JlID0gKCktPlxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB3aW5kb3csICdpbm5lcldpZHRoJywgb3JpZ0Rlc2NyaXB0b3JzLmlubmVyV2lkdGhcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkgd2luZG93LCAnaW5uZXJIZWlnaHQnLCBvcmlnRGVzY3JpcHRvcnMuaW5uZXJIZWlnaHRcblxuXG5cdHJldHVybiBAIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9jaGFpJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNoYWlTdHlsZVxuXG5mdW5jdGlvbiBjaGFpU3R5bGUoY2hhaSwgdXRpbHMpIHtcbiAgY29uc3Qge0Fzc2VydGlvbn0gPSBjaGFpXG4gIGNvbnN0IHtmbGFnfSA9IHV0aWxzXG4gIGxldCBzYW1wbGVEaXYsIHNhbXBsZVN0eWxlLCBzYW1wbGVJZnJhbWVcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzdHlsZScsIGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSA9ICcnKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVxuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpXG5cbiAgICBjb25zdCBpc05vbkNvbG9ycyA9IHN0eWxlW3Byb3BlcnR5XSA9PT0gJ3JnYmEoMCwgMCwgMCwgMCknIC8vIHdlYmtpdFxuICAgICAgfHwgc3R5bGVbcHJvcGVydHldID09PSAndHJhbnNwYXJlbnQnIC8vIGZpcmVmb3hcblxuICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBpc05vbkNvbG9yc1xuICAgICAgPyAnJ1xuICAgICAgOiBzdHlsZVtwcm9wZXJ0eV1cblxuICAgIGNvbnN0IGFzc2VydGlvbiA9IHZhbHVlXG4gICAgICA/IGNvbXBhcmVDU1NWYWx1ZShwcm9wZXJ0eVZhbHVlLCB2YWx1ZSlcbiAgICAgIDogQm9vbGVhbihwcm9wZXJ0eVZhbHVlKVxuXG4gICAgY29uc3QgZWxlbWVudFRhZyA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICBjb25zdCB0aHJvd01lc3NhZ2UgPSBgZXhwZWN0ICR7ZWxlbWVudFRhZ30gdG8gaGF2ZSB7JHtwcm9wZXJ0eX06ICR7dmFsdWV9fSwgaXMgcmVjZWl2aW5nIHske3Byb3BlcnR5fTogJHtwcm9wZXJ0eVZhbHVlfX1gXG4gICAgY29uc3QgdGhyb3dNZXNzYWdlTmVnYXRpdmUgPSBgZXhwZWN0ICR7ZWxlbWVudFRhZ30gdG8gbm90IGhhdmUgeyR7cHJvcGVydHl9OiAke3ZhbHVlfX0sIGlzIHJlY2VpdmluZyB7JHtwcm9wZXJ0eX06ICR7cHJvcGVydHlWYWx1ZX19YFxuXG4gICAgdGhpcy5hc3NlcnQoYXNzZXJ0aW9uLCB0aHJvd01lc3NhZ2UsIHRocm93TWVzc2FnZU5lZ2F0aXZlLCB2YWx1ZSlcblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVDU1NWYWx1ZShjb21wdXRlZCwgZXhwZWN0ZWQpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5SGlmZW5DYXNlID0gcHJvcGVydHkucmVwbGFjZSgvW0EtWl0vZywgKG1hdGNoKSA9PiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpKVxuICAgICAgaWYgKCFzYW1wbGVEaXYpIHtcbiAgICAgICAgc2FtcGxlSWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJylcbiAgICAgICAgc2FtcGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgc2FtcGxlU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzYW1wbGVEaXYpXG5cbiAgICAgICAgc2FtcGxlSWZyYW1lLmFwcGVuZENoaWxkKHNhbXBsZURpdilcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzYW1wbGVJZnJhbWUpXG4gICAgICB9XG4gICAgICBzYW1wbGVEaXYuc3R5bGUuZm9udFNpemUgPSBzdHlsZS5mb250U2l6ZVxuICAgICAgc2FtcGxlRGl2LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5SGlmZW5DYXNlLCBleHBlY3RlZCwgJ2ltcG9ydGFudCcpXG4gICAgICBjb25zdCB2YWx1ZSA9IHNhbXBsZVN0eWxlW3Byb3BlcnR5XVxuXG4gICAgICBjb25zdCBoYXNBdXRvVmFsdWUgPSB2YWx1ZS5pbmNsdWRlcygnYXV0bycpXG4gICAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4cCh2YWx1ZSkucmVwbGFjZSgvYXV0by9nLCAnKFxcXFxkKyguXFxcXGQrKT9weHxhdXRvKScpKVxuICAgICAgc2FtcGxlRGl2LnN0eWxlLmZvbnRTaXplID0gbnVsbFxuICAgICAgc2FtcGxlRGl2LnN0eWxlW3Byb3BlcnR5SGlmZW5DYXNlXSA9IG51bGxcblxuICAgICAgcmV0dXJuIGhhc0F1dG9WYWx1ZVxuICAgICAgICA/IHJlZy50ZXN0KGNvbXB1dGVkKVxuICAgICAgICA6IGNvbXB1dGVkID09PSB2YWx1ZVxuICAgIH1cbiAgfSlcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmVnRXhwLmVzY2FwZS9ibG9iL21hc3Rlci9wb2x5ZmlsbC5qc1xuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHZhbHVlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkucmVwbGFjZSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKVxufVxuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIHVzZWQgPSBbXTtcblxuLyohXG4gKiBDaGFpIHZlcnNpb25cbiAqL1xuXG5leHBvcnRzLnZlcnNpb24gPSAnNC4xLjInO1xuXG4vKiFcbiAqIEFzc2VydGlvbiBFcnJvclxuICovXG5cbmV4cG9ydHMuQXNzZXJ0aW9uRXJyb3IgPSByZXF1aXJlKCdhc3NlcnRpb24tZXJyb3InKTtcblxuLyohXG4gKiBVdGlscyBmb3IgcGx1Z2lucyAobm90IGV4cG9ydGVkKVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi9jaGFpL3V0aWxzJyk7XG5cbi8qKlxuICogIyAudXNlKGZ1bmN0aW9uKVxuICpcbiAqIFByb3ZpZGVzIGEgd2F5IHRvIGV4dGVuZCB0aGUgaW50ZXJuYWxzIG9mIENoYWkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn1cbiAqIEByZXR1cm5zIHt0aGlzfSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy51c2UgPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYgKCF+dXNlZC5pbmRleE9mKGZuKSkge1xuICAgIGZuKGV4cG9ydHMsIHV0aWwpO1xuICAgIHVzZWQucHVzaChmbik7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cztcbn07XG5cbi8qIVxuICogVXRpbGl0eSBGdW5jdGlvbnNcbiAqL1xuXG5leHBvcnRzLnV0aWwgPSB1dGlsO1xuXG4vKiFcbiAqIENvbmZpZ3VyYXRpb25cbiAqL1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jaGFpL2NvbmZpZycpO1xuZXhwb3J0cy5jb25maWcgPSBjb25maWc7XG5cbi8qIVxuICogUHJpbWFyeSBgQXNzZXJ0aW9uYCBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXNzZXJ0aW9uID0gcmVxdWlyZSgnLi9jaGFpL2Fzc2VydGlvbicpO1xuZXhwb3J0cy51c2UoYXNzZXJ0aW9uKTtcblxuLyohXG4gKiBDb3JlIEFzc2VydGlvbnNcbiAqL1xuXG52YXIgY29yZSA9IHJlcXVpcmUoJy4vY2hhaS9jb3JlL2Fzc2VydGlvbnMnKTtcbmV4cG9ydHMudXNlKGNvcmUpO1xuXG4vKiFcbiAqIEV4cGVjdCBpbnRlcmZhY2VcbiAqL1xuXG52YXIgZXhwZWN0ID0gcmVxdWlyZSgnLi9jaGFpL2ludGVyZmFjZS9leHBlY3QnKTtcbmV4cG9ydHMudXNlKGV4cGVjdCk7XG5cbi8qIVxuICogU2hvdWxkIGludGVyZmFjZVxuICovXG5cbnZhciBzaG91bGQgPSByZXF1aXJlKCcuL2NoYWkvaW50ZXJmYWNlL3Nob3VsZCcpO1xuZXhwb3J0cy51c2Uoc2hvdWxkKTtcblxuLyohXG4gKiBBc3NlcnQgaW50ZXJmYWNlXG4gKi9cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJy4vY2hhaS9pbnRlcmZhY2UvYXNzZXJ0Jyk7XG5leHBvcnRzLnVzZShhc3NlcnQpO1xuIiwiLyohXG4gKiBhc3NlcnRpb24tZXJyb3JcbiAqIENvcHlyaWdodChjKSAyMDEzIEpha2UgTHVlciA8amFrZUBxdWFsaWFuY3kuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHdpbGwgY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIG9uZSBvYmplY3QgdG8gYW5vdGhlciBleGNsdWRpbmcgYW55IG9yaWdpbmFsbHlcbiAqIGxpc3RlZC4gUmV0dXJuZWQgZnVuY3Rpb24gd2lsbCBjcmVhdGUgYSBuZXcgYHt9YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhjbHVkZWQgcHJvcGVydGllcyAuLi5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5cbmZ1bmN0aW9uIGV4Y2x1ZGUgKCkge1xuICB2YXIgZXhjbHVkZXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgZnVuY3Rpb24gZXhjbHVkZVByb3BzIChyZXMsIG9iaikge1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoIX5leGNsdWRlcy5pbmRleE9mKGtleSkpIHJlc1trZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kRXhjbHVkZSAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgICwgaSA9IDBcbiAgICAgICwgcmVzID0ge307XG5cbiAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4Y2x1ZGVQcm9wcyhyZXMsIGFyZ3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG59O1xuXG4vKiFcbiAqIFByaW1hcnkgRXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0aW9uRXJyb3I7XG5cbi8qKlxuICogIyMjIEFzc2VydGlvbkVycm9yXG4gKlxuICogQW4gZXh0ZW5zaW9uIG9mIHRoZSBKYXZhU2NyaXB0IGBFcnJvcmAgY29uc3RydWN0b3IgZm9yXG4gKiBhc3NlcnRpb24gYW5kIHZhbGlkYXRpb24gc2NlbmFyaW9zLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyB0byBpbmNsdWRlIChvcHRpb25hbClcbiAqIEBwYXJhbSB7Y2FsbGVlfSBzdGFydCBzdGFjayBmdW5jdGlvbiAob3B0aW9uYWwpXG4gKi9cblxuZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3IgKG1lc3NhZ2UsIF9wcm9wcywgc3NmKSB7XG4gIHZhciBleHRlbmQgPSBleGNsdWRlKCduYW1lJywgJ21lc3NhZ2UnLCAnc3RhY2snLCAnY29uc3RydWN0b3InLCAndG9KU09OJylcbiAgICAsIHByb3BzID0gZXh0ZW5kKF9wcm9wcyB8fCB7fSk7XG5cbiAgLy8gZGVmYXVsdCB2YWx1ZXNcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCAnVW5zcGVjaWZpZWQgQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLnNob3dEaWZmID0gZmFsc2U7XG5cbiAgLy8gY29weSBmcm9tIHByb3BlcnRpZXNcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdGhpc1trZXldID0gcHJvcHNba2V5XTtcbiAgfVxuXG4gIC8vIGNhcHR1cmUgc3RhY2sgdHJhY2VcbiAgc3NmID0gc3NmIHx8IGFyZ3VtZW50cy5jYWxsZWU7XG4gIGlmIChzc2YgJiYgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzc2YpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrO1xuICAgIH1cbiAgfVxufVxuXG4vKiFcbiAqIEluaGVyaXQgZnJvbSBFcnJvci5wcm90b3R5cGVcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5cbi8qIVxuICogU3RhdGljYWxseSBzZXQgbmFtZVxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcblxuLyohXG4gKiBFbnN1cmUgY29ycmVjdCBjb25zdHJ1Y3RvclxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFzc2VydGlvbkVycm9yO1xuXG4vKipcbiAqIEFsbG93IGVycm9ycyB0byBiZSBjb252ZXJ0ZWQgdG8gSlNPTiBmb3Igc3RhdGljIHRyYW5zZmVyLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5jbHVkZSBzdGFjayAoZGVmYXVsdDogYHRydWVgKVxuICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgdGhhdCBjYW4gYmUgYEpTT04uc3RyaW5naWZ5YFxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoc3RhY2spIHtcbiAgdmFyIGV4dGVuZCA9IGV4Y2x1ZGUoJ2NvbnN0cnVjdG9yJywgJ3RvSlNPTicsICdzdGFjaycpXG4gICAgLCBwcm9wcyA9IGV4dGVuZCh7IG5hbWU6IHRoaXMubmFtZSB9LCB0aGlzKTtcblxuICAvLyBpbmNsdWRlIHN0YWNrIGlmIGV4aXN0cyBhbmQgbm90IHR1cm5lZCBvZmZcbiAgaWYgKGZhbHNlICE9PSBzdGFjayAmJiB0aGlzLnN0YWNrKSB7XG4gICAgcHJvcHMuc3RhY2sgPSB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIERlcGVuZGVuY2llcyB0aGF0IGFyZSB1c2VkIGZvciBtdWx0aXBsZSBleHBvcnRzIGFyZSByZXF1aXJlZCBoZXJlIG9ubHkgb25jZVxuICovXG5cbnZhciBwYXRodmFsID0gcmVxdWlyZSgncGF0aHZhbCcpO1xuXG4vKiFcbiAqIHRlc3QgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMudGVzdCA9IHJlcXVpcmUoJy4vdGVzdCcpO1xuXG4vKiFcbiAqIHR5cGUgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMudHlwZSA9IHJlcXVpcmUoJ3R5cGUtZGV0ZWN0Jyk7XG5cbi8qIVxuICogZXhwZWN0VHlwZXMgdXRpbGl0eVxuICovXG5leHBvcnRzLmV4cGVjdFR5cGVzID0gcmVxdWlyZSgnLi9leHBlY3RUeXBlcycpO1xuXG4vKiFcbiAqIG1lc3NhZ2UgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZ2V0TWVzc2FnZSA9IHJlcXVpcmUoJy4vZ2V0TWVzc2FnZScpO1xuXG4vKiFcbiAqIGFjdHVhbCB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5nZXRBY3R1YWwgPSByZXF1aXJlKCcuL2dldEFjdHVhbCcpO1xuXG4vKiFcbiAqIEluc3BlY3QgdXRpbFxuICovXG5cbmV4cG9ydHMuaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpO1xuXG4vKiFcbiAqIE9iamVjdCBEaXNwbGF5IHV0aWxcbiAqL1xuXG5leHBvcnRzLm9iakRpc3BsYXkgPSByZXF1aXJlKCcuL29iakRpc3BsYXknKTtcblxuLyohXG4gKiBGbGFnIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLmZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcblxuLyohXG4gKiBGbGFnIHRyYW5zZmVycmluZyB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy50cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qIVxuICogRGVlcCBlcXVhbCB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5lcWwgPSByZXF1aXJlKCdkZWVwLWVxbCcpO1xuXG4vKiFcbiAqIERlZXAgcGF0aCBpbmZvXG4gKi9cblxuZXhwb3J0cy5nZXRQYXRoSW5mbyA9IHBhdGh2YWwuZ2V0UGF0aEluZm87XG5cbi8qIVxuICogQ2hlY2sgaWYgYSBwcm9wZXJ0eSBleGlzdHNcbiAqL1xuXG5leHBvcnRzLmhhc1Byb3BlcnR5ID0gcGF0aHZhbC5oYXNQcm9wZXJ0eTtcblxuLyohXG4gKiBGdW5jdGlvbiBuYW1lXG4gKi9cblxuZXhwb3J0cy5nZXROYW1lID0gcmVxdWlyZSgnZ2V0LWZ1bmMtbmFtZScpO1xuXG4vKiFcbiAqIGFkZCBQcm9wZXJ0eVxuICovXG5cbmV4cG9ydHMuYWRkUHJvcGVydHkgPSByZXF1aXJlKCcuL2FkZFByb3BlcnR5Jyk7XG5cbi8qIVxuICogYWRkIE1ldGhvZFxuICovXG5cbmV4cG9ydHMuYWRkTWV0aG9kID0gcmVxdWlyZSgnLi9hZGRNZXRob2QnKTtcblxuLyohXG4gKiBvdmVyd3JpdGUgUHJvcGVydHlcbiAqL1xuXG5leHBvcnRzLm92ZXJ3cml0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9vdmVyd3JpdGVQcm9wZXJ0eScpO1xuXG4vKiFcbiAqIG92ZXJ3cml0ZSBNZXRob2RcbiAqL1xuXG5leHBvcnRzLm92ZXJ3cml0ZU1ldGhvZCA9IHJlcXVpcmUoJy4vb3ZlcndyaXRlTWV0aG9kJyk7XG5cbi8qIVxuICogQWRkIGEgY2hhaW5hYmxlIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuYWRkQ2hhaW5hYmxlTWV0aG9kID0gcmVxdWlyZSgnLi9hZGRDaGFpbmFibGVNZXRob2QnKTtcblxuLyohXG4gKiBPdmVyd3JpdGUgY2hhaW5hYmxlIG1ldGhvZFxuICovXG5cbmV4cG9ydHMub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kID0gcmVxdWlyZSgnLi9vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QnKTtcblxuLyohXG4gKiBDb21wYXJlIGJ5IGluc3BlY3QgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5jb21wYXJlQnlJbnNwZWN0ID0gcmVxdWlyZSgnLi9jb21wYXJlQnlJbnNwZWN0Jyk7XG5cbi8qIVxuICogR2V0IG93biBlbnVtZXJhYmxlIHByb3BlcnR5IHN5bWJvbHMgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzID0gcmVxdWlyZSgnLi9nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzJyk7XG5cbi8qIVxuICogR2V0IG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMnKTtcblxuLyohXG4gKiBDaGVja3MgZXJyb3IgYWdhaW5zdCBhIGdpdmVuIHNldCBvZiBjcml0ZXJpYVxuICovXG5cbmV4cG9ydHMuY2hlY2tFcnJvciA9IHJlcXVpcmUoJ2NoZWNrLWVycm9yJyk7XG5cbi8qIVxuICogUHJveGlmeSB1dGlsXG4gKi9cblxuZXhwb3J0cy5wcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG5cbi8qIVxuICogYWRkTGVuZ3RoR3VhcmQgdXRpbFxuICovXG5cbmV4cG9ydHMuYWRkTGVuZ3RoR3VhcmQgPSByZXF1aXJlKCcuL2FkZExlbmd0aEd1YXJkJyk7XG5cbi8qIVxuICogaXNQcm94eUVuYWJsZWQgaGVscGVyXG4gKi9cblxuZXhwb3J0cy5pc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcblxuLyohXG4gKiBpc05hTiBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmlzTmFOID0gcmVxdWlyZSgnLi9pc05hTicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqICMjIyBjb25maWcuaW5jbHVkZVN0YWNrXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBpbmZsdWVuY2VzIHdoZXRoZXIgc3RhY2sgdHJhY2VcbiAgICogaXMgaW5jbHVkZWQgaW4gQXNzZXJ0aW9uIGVycm9yIG1lc3NhZ2UuIERlZmF1bHQgb2YgZmFsc2VcbiAgICogc3VwcHJlc3NlcyBzdGFjayB0cmFjZSBpbiB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICpcbiAgICogICAgIGNoYWkuY29uZmlnLmluY2x1ZGVTdGFjayA9IHRydWU7ICAvLyBlbmFibGUgc3RhY2sgb24gZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBpbmNsdWRlU3RhY2s6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnNob3dEaWZmXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBpbmZsdWVuY2VzIHdoZXRoZXIgb3Igbm90XG4gICAqIHRoZSBgc2hvd0RpZmZgIGZsYWcgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSB0aHJvd25cbiAgICogQXNzZXJ0aW9uRXJyb3JzLiBgZmFsc2VgIHdpbGwgYWx3YXlzIGJlIGBmYWxzZWA7IGB0cnVlYFxuICAgKiB3aWxsIGJlIHRydWUgd2hlbiB0aGUgYXNzZXJ0aW9uIGhhcyByZXF1ZXN0ZWQgYSBkaWZmXG4gICAqIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNob3dEaWZmOiB0cnVlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnRydW5jYXRlVGhyZXNob2xkXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBzZXRzIGxlbmd0aCB0aHJlc2hvbGQgZm9yIGFjdHVhbCBhbmRcbiAgICogZXhwZWN0ZWQgdmFsdWVzIGluIGFzc2VydGlvbiBlcnJvcnMuIElmIHRoaXMgdGhyZXNob2xkIGlzIGV4Y2VlZGVkLCBmb3JcbiAgICogZXhhbXBsZSBmb3IgbGFyZ2UgZGF0YSBzdHJ1Y3R1cmVzLCB0aGUgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBzb21ldGhpbmdcbiAgICogbGlrZSBgWyBBcnJheSgzKSBdYCBvciBgeyBPYmplY3QgKHByb3AxLCBwcm9wMikgfWAuXG4gICAqXG4gICAqIFNldCBpdCB0byB6ZXJvIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgdHJ1bmNhdGluZyBhbHRvZ2V0aGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGVzcGVjaWFsbHkgdXNlcmZ1bCB3aGVuIGRvaW5nIGFzc2VydGlvbnMgb24gYXJyYXlzOiBoYXZpbmcgdGhpc1xuICAgKiBzZXQgdG8gYSByZWFzb25hYmxlIGxhcmdlIHZhbHVlIG1ha2VzIHRoZSBmYWlsdXJlIG1lc3NhZ2VzIHJlYWRpbHlcbiAgICogaW5zcGVjdGFibGUuXG4gICAqXG4gICAqICAgICBjaGFpLmNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCA9IDA7ICAvLyBkaXNhYmxlIHRydW5jYXRpbmdcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHRydW5jYXRlVGhyZXNob2xkOiA0MCxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy51c2VQcm94eVxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgZGVmaW5lcyBpZiBjaGFpIHdpbGwgdXNlIGEgUHJveHkgdG8gdGhyb3dcbiAgICogYW4gZXJyb3Igd2hlbiBhIG5vbi1leGlzdGVudCBwcm9wZXJ0eSBpcyByZWFkLCB3aGljaCBwcm90ZWN0cyB1c2Vyc1xuICAgKiBmcm9tIHR5cG9zIHdoZW4gdXNpbmcgcHJvcGVydHktYmFzZWQgYXNzZXJ0aW9ucy5cbiAgICpcbiAgICogU2V0IGl0IHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgdGhpcyBmZWF0dXJlLlxuICAgKlxuICAgKiAgICAgY2hhaS5jb25maWcudXNlUHJveHkgPSBmYWxzZTsgIC8vIGRpc2FibGUgdXNlIG9mIFByb3h5XG4gICAqXG4gICAqIFRoaXMgZmVhdHVyZSBpcyBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIHJlZ2FyZGxlc3Mgb2YgdGhpcyBjb25maWcgdmFsdWVcbiAgICogaW4gZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwcm94aWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHVzZVByb3h5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnByb3h5RXhjbHVkZWRLZXlzXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBkZWZpbmVzIHdoaWNoIHByb3BlcnRpZXMgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICogaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGUgYXNzZXJ0aW9uLlxuICAgKiBUaGlzIGlzIG9ubHkgYXBwbGllZCBpZiB0aGUgZW52aXJvbm1lbnQgQ2hhaSBpcyBydW5uaW5nIGluIHN1cHBvcnRzIHByb3hpZXMgYW5kXG4gICAqIGlmIHRoZSBgdXNlUHJveHlgIGNvbmZpZ3VyYXRpb24gc2V0dGluZyBpcyBlbmFibGVkLlxuICAgKiBCeSBkZWZhdWx0LCBgdGhlbmAgYW5kIGBpbnNwZWN0YCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGVcbiAgICogYXNzZXJ0aW9uIG9iamVjdCBiZWNhdXNlIHRoZSBgLmluc3BlY3RgIHByb3BlcnR5IGlzIHJlYWQgYnkgYHV0aWwuaW5zcGVjdGAgKGZvciBleGFtcGxlLCB3aGVuXG4gICAqIHVzaW5nIGBjb25zb2xlLmxvZ2Agb24gdGhlIGFzc2VydGlvbiBvYmplY3QpIGFuZCBgLnRoZW5gIGlzIG5lY2Vzc2FyeSBmb3IgcHJvbWlzZSB0eXBlLWNoZWNraW5nLlxuICAgKlxuICAgKiAgICAgLy8gQnkgZGVmYXVsdCB0aGVzZSBrZXlzIHdpbGwgbm90IHRocm93IGFuIGVycm9yIGlmIHRoZXkgZG8gbm90IGV4aXN0IG9uIHRoZSBhc3NlcnRpb24gb2JqZWN0XG4gICAqICAgICBjaGFpLmNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5cyA9IFsndGhlbicsICdpbnNwZWN0J107XG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHByb3h5RXhjbHVkZWRLZXlzOiBbJ3RoZW4nLCAnaW5zcGVjdCcsICd0b0pTT04nXVxufTtcbiIsIi8qIVxuICogY2hhaVxuICogaHR0cDovL2NoYWlqcy5jb21cbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX2NoYWksIHV0aWwpIHtcbiAgLyohXG4gICAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gICAqL1xuXG4gIHZhciBBc3NlcnRpb25FcnJvciA9IF9jaGFpLkFzc2VydGlvbkVycm9yXG4gICAgLCBmbGFnID0gdXRpbC5mbGFnO1xuXG4gIC8qIVxuICAgKiBNb2R1bGUgZXhwb3J0LlxuICAgKi9cblxuICBfY2hhaS5Bc3NlcnRpb24gPSBBc3NlcnRpb247XG5cbiAgLyohXG4gICAqIEFzc2VydGlvbiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBDcmVhdGVzIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqXG4gICAqIGBBc3NlcnRpb25gIG9iamVjdHMgY29udGFpbiBtZXRhZGF0YSBpbiB0aGUgZm9ybSBvZiBmbGFncy4gVGhyZWUgZmxhZ3MgY2FuXG4gICAqIGJlIGFzc2lnbmVkIGR1cmluZyBpbnN0YW50aWF0aW9uIGJ5IHBhc3NpbmcgYXJndW1lbnRzIHRvIHRoaXMgY29uc3RydWN0b3I6XG4gICAqXG4gICAqIC0gYG9iamVjdGA6IFRoaXMgZmxhZyBjb250YWlucyB0aGUgdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb24uIEZvciBleGFtcGxlLCBpblxuICAgKiAgIHRoZSBhc3NlcnRpb24gYGV4cGVjdChudW1LaXR0ZW5zKS50by5lcXVhbCg3KTtgLCB0aGUgYG9iamVjdGAgZmxhZyB3aWxsXG4gICAqICAgY29udGFpbiBgbnVtS2l0dGVuc2Agc28gdGhhdCB0aGUgYGVxdWFsYCBhc3NlcnRpb24gY2FuIHJlZmVyZW5jZSBpdCB3aGVuXG4gICAqICAgbmVlZGVkLlxuICAgKlxuICAgKiAtIGBtZXNzYWdlYDogVGhpcyBmbGFnIGNvbnRhaW5zIGFuIG9wdGlvbmFsIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvIGJlXG4gICAqICAgcHJlcGVuZGVkIHRvIHRoZSBlcnJvciBtZXNzYWdlIHRoYXQncyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2VydGlvbiB3aGVuIGl0XG4gICAqICAgZmFpbHMuXG4gICAqXG4gICAqIC0gYHNzZmlgOiBUaGlzIGZsYWcgc3RhbmRzIGZvciBcInN0YXJ0IHN0YWNrIGZ1bmN0aW9uIGluZGljYXRvclwiLiBJdFxuICAgKiAgIGNvbnRhaW5zIGEgZnVuY3Rpb24gcmVmZXJlbmNlIHRoYXQgc2VydmVzIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3JcbiAgICogICByZW1vdmluZyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGVycm9yIHRoYXQncyBjcmVhdGVkIGJ5IHRoZVxuICAgKiAgIGFzc2VydGlvbiB3aGVuIGl0IGZhaWxzLiBUaGUgZ29hbCBpcyB0byBwcm92aWRlIGEgY2xlYW5lciBzdGFjayB0cmFjZSB0b1xuICAgKiAgIGVuZCB1c2VycyBieSByZW1vdmluZyBDaGFpJ3MgaW50ZXJuYWwgZnVuY3Rpb25zLiBOb3RlIHRoYXQgaXQgb25seSB3b3Jrc1xuICAgKiAgIGluIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgYEVycm9yLmNhcHR1cmVTdGFja1RyYWNlYCwgYW5kIG9ubHkgd2hlblxuICAgKiAgIGBDaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2tgIGhhc24ndCBiZWVuIHNldCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAtIGBsb2NrU3NmaWA6IFRoaXMgZmxhZyBjb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYHNzZmlgIGZsYWdcbiAgICogICBzaG91bGQgcmV0YWluIGl0cyBjdXJyZW50IHZhbHVlLCBldmVuIGFzIGFzc2VydGlvbnMgYXJlIGNoYWluZWQgb2ZmIG9mXG4gICAqICAgdGhpcyBvYmplY3QuIFRoaXMgaXMgdXN1YWxseSBzZXQgdG8gYHRydWVgIHdoZW4gY3JlYXRpbmcgYSBuZXcgYXNzZXJ0aW9uXG4gICAqICAgZnJvbSB3aXRoaW4gYW5vdGhlciBhc3NlcnRpb24uIEl0J3MgYWxzbyB0ZW1wb3JhcmlseSBzZXQgdG8gYHRydWVgIGJlZm9yZVxuICAgKiAgIGFuIG92ZXJ3cml0dGVuIGFzc2VydGlvbiBnZXRzIGNhbGxlZCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBvYmogdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyAob3B0aW9uYWwpIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNzZmkgKG9wdGlvbmFsKSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3Zpbmcgc3RhY2sgZnJhbWVzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9ja1NzZmkgKG9wdGlvbmFsKSB3aGV0aGVyIG9yIG5vdCB0aGUgc3NmaSBmbGFnIGlzIGxvY2tlZFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgZnVuY3Rpb24gQXNzZXJ0aW9uIChvYmosIG1zZywgc3NmaSwgbG9ja1NzZmkpIHtcbiAgICBmbGFnKHRoaXMsICdzc2ZpJywgc3NmaSB8fCBBc3NlcnRpb24pO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgbG9ja1NzZmkpO1xuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIG9iaik7XG4gICAgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICByZXR1cm4gdXRpbC5wcm94aWZ5KHRoaXMpO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzc2VydGlvbiwgJ2luY2x1ZGVTdGFjaycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uaW5jbHVkZVN0YWNrIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgaW5zdGVhZC4nKTtcbiAgICAgIHJldHVybiBjb25maWcuaW5jbHVkZVN0YWNrO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uaW5jbHVkZVN0YWNrIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgaW5zdGVhZC4nKTtcbiAgICAgIGNvbmZpZy5pbmNsdWRlU3RhY2sgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24sICdzaG93RGlmZicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uc2hvd0RpZmYgaXMgZGVwcmVjYXRlZCwgdXNlIGNoYWkuY29uZmlnLnNob3dEaWZmIGluc3RlYWQuJyk7XG4gICAgICByZXR1cm4gY29uZmlnLnNob3dEaWZmO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uc2hvd0RpZmYgaXMgZGVwcmVjYXRlZCwgdXNlIGNoYWkuY29uZmlnLnNob3dEaWZmIGluc3RlYWQuJyk7XG4gICAgICBjb25maWcuc2hvd0RpZmYgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwuYWRkUHJvcGVydHkodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdXRpbC5hZGRNZXRob2QodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kID0gZnVuY3Rpb24gKG5hbWUsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKSB7XG4gICAgdXRpbC5hZGRDaGFpbmFibGVNZXRob2QodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKTtcbiAgfTtcblxuICBBc3NlcnRpb24ub3ZlcndyaXRlUHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLm92ZXJ3cml0ZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwub3ZlcndyaXRlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcikge1xuICAgIHV0aWwub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuYXNzZXJ0KGV4cHJlc3Npb24sIG1lc3NhZ2UsIG5lZ2F0ZU1lc3NhZ2UsIGV4cGVjdGVkLCBhY3R1YWwsIHNob3dEaWZmKVxuICAgKlxuICAgKiBFeGVjdXRlcyBhbiBleHByZXNzaW9uIGFuZCBjaGVjayBleHBlY3RhdGlvbnMuIFRocm93cyBBc3NlcnRpb25FcnJvciBmb3IgcmVwb3J0aW5nIGlmIHRlc3QgZG9lc24ndCBwYXNzLlxuICAgKlxuICAgKiBAbmFtZSBhc3NlcnRcbiAgICogQHBhcmFtIHtQaGlsb3NvcGhpY2FsfSBleHByZXNzaW9uIHRvIGJlIHRlc3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gbWVzc2FnZSBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgbWVzc2FnZSB0byBkaXNwbGF5IGlmIGV4cHJlc3Npb24gZmFpbHNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IG5lZ2F0ZWRNZXNzYWdlIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBuZWdhdGVkTWVzc2FnZSB0byBkaXNwbGF5IGlmIG5lZ2F0ZWQgZXhwcmVzc2lvbiBmYWlsc1xuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZCB2YWx1ZSAocmVtZW1iZXIgdG8gY2hlY2sgZm9yIG5lZ2F0aW9uKVxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWwgKG9wdGlvbmFsKSB3aWxsIGRlZmF1bHQgdG8gYHRoaXMub2JqYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dEaWZmIChvcHRpb25hbCkgd2hlbiBzZXQgdG8gYHRydWVgLCBhc3NlcnQgd2lsbCBkaXNwbGF5IGEgZGlmZiBpbiBhZGRpdGlvbiB0byB0aGUgbWVzc2FnZSBpZiBleHByZXNzaW9uIGZhaWxzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cblxuICBBc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCA9IGZ1bmN0aW9uIChleHByLCBtc2csIG5lZ2F0ZU1zZywgZXhwZWN0ZWQsIF9hY3R1YWwsIHNob3dEaWZmKSB7XG4gICAgdmFyIG9rID0gdXRpbC50ZXN0KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGZhbHNlICE9PSBzaG93RGlmZikgc2hvd0RpZmYgPSB0cnVlO1xuICAgIGlmICh1bmRlZmluZWQgPT09IGV4cGVjdGVkICYmIHVuZGVmaW5lZCA9PT0gX2FjdHVhbCkgc2hvd0RpZmYgPSBmYWxzZTtcbiAgICBpZiAodHJ1ZSAhPT0gY29uZmlnLnNob3dEaWZmKSBzaG93RGlmZiA9IGZhbHNlO1xuXG4gICAgaWYgKCFvaykge1xuICAgICAgbXNnID0gdXRpbC5nZXRNZXNzYWdlKHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYWN0dWFsID0gdXRpbC5nZXRBY3R1YWwodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtc2csIHtcbiAgICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAsIHNob3dEaWZmOiBzaG93RGlmZlxuICAgICAgfSwgKGNvbmZpZy5pbmNsdWRlU3RhY2spID8gdGhpcy5hc3NlcnQgOiBmbGFnKHRoaXMsICdzc2ZpJykpO1xuICAgIH1cbiAgfTtcblxuICAvKiFcbiAgICogIyMjIC5fb2JqXG4gICAqXG4gICAqIFF1aWNrIHJlZmVyZW5jZSB0byBzdG9yZWQgYGFjdHVhbGAgdmFsdWUgZm9yIHBsdWdpbiBkZXZlbG9wZXJzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzc2VydGlvbi5wcm90b3R5cGUsICdfb2JqJyxcbiAgICB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgLCBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgdmFsKTtcbiAgICAgIH1cbiAgfSk7XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBodHRwOi8vY2hhaWpzLmNvbVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIF8pIHtcbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uXG4gICAgLCBBc3NlcnRpb25FcnJvciA9IGNoYWkuQXNzZXJ0aW9uRXJyb3JcbiAgICAsIGZsYWcgPSBfLmZsYWc7XG5cbiAgLyoqXG4gICAqICMjIyBMYW5ndWFnZSBDaGFpbnNcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBhcmUgcHJvdmlkZWQgYXMgY2hhaW5hYmxlIGdldHRlcnMgdG8gaW1wcm92ZSB0aGUgcmVhZGFiaWxpdHlcbiAgICogb2YgeW91ciBhc3NlcnRpb25zLlxuICAgKlxuICAgKiAqKkNoYWlucyoqXG4gICAqXG4gICAqIC0gdG9cbiAgICogLSBiZVxuICAgKiAtIGJlZW5cbiAgICogLSBpc1xuICAgKiAtIHRoYXRcbiAgICogLSB3aGljaFxuICAgKiAtIGFuZFxuICAgKiAtIGhhc1xuICAgKiAtIGhhdmVcbiAgICogLSB3aXRoXG4gICAqIC0gYXRcbiAgICogLSBvZlxuICAgKiAtIHNhbWVcbiAgICogLSBidXRcbiAgICogLSBkb2VzXG4gICAqXG4gICAqIEBuYW1lIGxhbmd1YWdlIGNoYWluc1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBbICd0bycsICdiZScsICdiZWVuJ1xuICAsICdpcycsICdhbmQnLCAnaGFzJywgJ2hhdmUnXG4gICwgJ3dpdGgnLCAndGhhdCcsICd3aGljaCcsICdhdCdcbiAgLCAnb2YnLCAnc2FtZScsICdidXQnLCAnZG9lcycgXS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFpbikge1xuICAgIEFzc2VydGlvbi5hZGRQcm9wZXJ0eShjaGFpbik7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFxuICAgKlxuICAgKiBOZWdhdGVzIGFsbCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogICAgIGV4cGVjdChmdW5jdGlvbiAoKSB7fSkudG8ubm90LnRocm93KCk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYicpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5kb2VzLm5vdC5pbmNsdWRlKDMpO1xuICAgKlxuICAgKiBKdXN0IGJlY2F1c2UgeW91IGNhbiBuZWdhdGUgYW55IGFzc2VydGlvbiB3aXRoIGAubm90YCBkb2Vzbid0IG1lYW4geW91XG4gICAqIHNob3VsZC4gV2l0aCBncmVhdCBwb3dlciBjb21lcyBncmVhdCByZXNwb25zaWJpbGl0eS4gSXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IHRoZSBvbmUgZXhwZWN0ZWQgb3V0cHV0IHdhcyBwcm9kdWNlZCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nXG4gICAqIHRoYXQgb25lIG9mIGNvdW50bGVzcyB1bmV4cGVjdGVkIG91dHB1dHMgd2Fzbid0IHByb2R1Y2VkLiBTZWUgaW5kaXZpZHVhbFxuICAgKiBhc3NlcnRpb25zIGZvciBzcGVjaWZpYyBndWlkYW5jZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5ub3QuZXF1YWwoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBAbmFtZSBub3RcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdub3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnbmVnYXRlJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLmVxdWFsYCwgYC5pbmNsdWRlYCwgYC5tZW1iZXJzYCwgYC5rZXlzYCwgYW5kIGAucHJvcGVydHlgXG4gICAqIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQgb2Ygc3RyaWN0XG4gICAqIChgPT09YCkgZXF1YWxpdHkuIFNlZSB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXBcbiAgICogZXF1YWxpdHkgYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFscyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZGVlcC5lcXVhbCh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmVxdWFsKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5kZWVwLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmluY2x1ZGUoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5kZWVwLmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgbWVtYmVyIGB7YTogMX1gXG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLmhhdmUuZGVlcC5tZW1iZXJzKFt7YTogMX1dKTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmhhdmUubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgc2V0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIGtleSBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoW3thOiAxfV0pKS50by5oYXZlLmRlZXAua2V5cyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLm5vdC5oYXZlLmtleXMoW3thOiAxfV0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBwcm9wZXJ0eSBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgneCcsIHthOiAxfSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdkZWVwJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2RlZXAnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkXG4gICAqXG4gICAqIEVuYWJsZXMgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBpbiBhbGwgYC5wcm9wZXJ0eWAgYW5kIGAuaW5jbHVkZWBcbiAgICogYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nKTtcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8ubmVzdGVkLmluY2x1ZGUoeydhLmJbMV0nOiAneSd9KTtcbiAgICpcbiAgICogSWYgYC5gIG9yIGBbXWAgYXJlIHBhcnQgb2YgYW4gYWN0dWFsIHByb3BlcnR5IG5hbWUsIHRoZXkgY2FuIGJlIGVzY2FwZWQgYnlcbiAgICogYWRkaW5nIHR3byBiYWNrc2xhc2hlcyBiZWZvcmUgdGhlbS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAneCd9fSkudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ1xcXFwuYS5cXFxcW2JcXFxcXScpO1xuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6ICd4J319KS50by5uZXN0ZWQuaW5jbHVkZSh7J1xcXFwuYS5cXFxcW2JcXFxcXSc6ICd4J30pO1xuICAgKlxuICAgKiBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggYC5vd25gLlxuICAgKlxuICAgKiBAbmFtZSBuZXN0ZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCduZXN0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnbmVzdGVkJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAucHJvcGVydHlgIGFuZCBgLmluY2x1ZGVgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluXG4gICAqIHRvIGlnbm9yZSBpbmhlcml0ZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIE9iamVjdC5wcm90b3R5cGUuYiA9IDI7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93bi5wcm9wZXJ0eSgnYScpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicpLmJ1dC5ub3Qub3duLnByb3BlcnR5KCdiJyk7IFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ub3duLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUoe2I6IDJ9KS5idXQubm90Lm93bi5pbmNsdWRlKHtiOiAyfSk7XG4gICAqXG4gICAqIGAub3duYCBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBgLm5lc3RlZGAuXG4gICAqXG4gICAqIEBuYW1lIG93blxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ293bicsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdvd24nLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAub3JkZXJlZFxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAubWVtYmVyc2AgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gcmVxdWlyZSB0aGF0XG4gICAqIG1lbWJlcnMgYmUgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5oYXZlLm9yZGVyZWQubWVtYmVycyhbMSwgMl0pXG4gICAqICAgICAgIC5idXQubm90LmhhdmUub3JkZXJlZC5tZW1iZXJzKFsyLCAxXSk7XG4gICAqXG4gICAqIFdoZW4gYC5pbmNsdWRlYCBhbmQgYC5vcmRlcmVkYCBhcmUgY29tYmluZWQsIHRoZSBvcmRlcmluZyBiZWdpbnMgYXQgdGhlXG4gICAqIHN0YXJ0IG9mIGJvdGggYXJyYXlzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDJdKVxuICAgKiAgICAgICAuYnV0Lm5vdC5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhbMiwgM10pO1xuICAgKlxuICAgKiBAbmFtZSBvcmRlcmVkXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnb3JkZXJlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdvcmRlcmVkJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmFueVxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAua2V5c2AgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gb25seSByZXF1aXJlIHRoYXRcbiAgICogdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy4gVGhpcyBpcyB0aGUgb3Bwb3NpdGUgb2ZcbiAgICogYC5hbGxgLCB3aGljaCByZXF1aXJlcyB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhbGwgb2YgdGhlIGdpdmVuIGtleXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqIFNlZSB0aGUgYC5rZXlzYCBkb2MgZm9yIGd1aWRhbmNlIG9uIHdoZW4gdG8gdXNlIGAuYW55YCBvciBgLmFsbGAuXG4gICAqXG4gICAqIEBuYW1lIGFueVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2FueScsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdhbnknLCB0cnVlKTtcbiAgICBmbGFnKHRoaXMsICdhbGwnLCBmYWxzZSk7XG4gIH0pO1xuXG5cbiAgLyoqXG4gICAqICMjIyAuYWxsXG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlXG4gICAqIHRhcmdldCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW4ga2V5cy4gVGhpcyBpcyB0aGUgb3Bwb3NpdGUgb2YgYC5hbnlgLCB3aGljaFxuICAgKiBvbmx5IHJlcXVpcmVzIHRoYXQgdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYC5hbGxgIGlzIHVzZWQgYnkgZGVmYXVsdCB3aGVuIG5laXRoZXIgYC5hbGxgIG5vciBgLmFueWAgYXJlXG4gICAqIGFkZGVkIGVhcmxpZXIgaW4gdGhlIGNoYWluLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYWRkIGAuYWxsYCBhbnl3YXlcbiAgICogYmVjYXVzZSBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eS5cbiAgICpcbiAgICogU2VlIHRoZSBgLmtleXNgIGRvYyBmb3IgZ3VpZGFuY2Ugb24gd2hlbiB0byB1c2UgYC5hbnlgIG9yIGAuYWxsYC5cbiAgICpcbiAgICogQG5hbWUgYWxsXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnYWxsJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2FsbCcsIHRydWUpO1xuICAgIGZsYWcodGhpcywgJ2FueScsIGZhbHNlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYSh0eXBlWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQncyB0eXBlIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBzdHJpbmcgYHR5cGVgLiBUeXBlc1xuICAgKiBhcmUgY2FzZSBpbnNlbnNpdGl2ZS4gU2VlIHRoZSBgdHlwZS1kZXRlY3RgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGVcbiAgICogdHlwZSBkZXRlY3Rpb24gYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL3R5cGUtZGV0ZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5hKCdudWxsJyk7XG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS5hbigndW5kZWZpbmVkJyk7XG4gICAqICAgICBleHBlY3QobmV3IEVycm9yKS50by5iZS5hbignZXJyb3InKTtcbiAgICogICAgIGV4cGVjdChQcm9taXNlLnJlc29sdmUoKSkudG8uYmUuYSgncHJvbWlzZScpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBGbG9hdDMyQXJyYXkpLnRvLmJlLmEoJ2Zsb2F0MzJhcnJheScpO1xuICAgKiAgICAgZXhwZWN0KFN5bWJvbCgpKS50by5iZS5hKCdzeW1ib2wnKTtcbiAgICpcbiAgICogYC5hYCBzdXBwb3J0cyBvYmplY3RzIHRoYXQgaGF2ZSBhIGN1c3RvbSB0eXBlIHNldCB2aWEgYFN5bWJvbC50b1N0cmluZ1RhZ2AuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7XG4gICAqICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnbXlDdXN0b21UeXBlJ1xuICAgKiAgICAgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChteU9iaikudG8uYmUuYSgnbXlDdXN0b21UeXBlJykuYnV0Lm5vdC5hbignb2JqZWN0Jyk7XG4gICAqXG4gICAqIEl0J3Mgb2Z0ZW4gYmVzdCB0byB1c2UgYC5hYCB0byBjaGVjayBhIHRhcmdldCdzIHR5cGUgYmVmb3JlIG1ha2luZyBtb3JlXG4gICAqIGFzc2VydGlvbnMgb24gdGhlIHNhbWUgdGFyZ2V0LiBUaGF0IHdheSwgeW91IGF2b2lkIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZnJvbVxuICAgKiBhbnkgYXNzZXJ0aW9uIHRoYXQgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pbmNsdWRlcygyKTtcbiAgICogICAgIGV4cGVjdChbXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pcy5lbXB0eTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5hYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgdGhlIGV4cGVjdGVkIHR5cGUsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0XG4gICAqIGlzbid0IG9uZSBvZiBtYW55IHVuZXhwZWN0ZWQgdHlwZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmJlLmEoJ3N0cmluZycpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5ub3QuYmUuYW4oJ2FycmF5Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmFgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSB0b1xuICAgKiBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZFxuICAgKiBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hKCdzdHJpbmcnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgKlxuICAgKiBgLmFgIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBsYW5ndWFnZSBjaGFpbiB0byBpbXByb3ZlIHRoZSByZWFkYWJpbGl0eSBvZlxuICAgKiB5b3VyIGFzc2VydGlvbnMuIFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8uaGF2ZS5hLnByb3BlcnR5KCdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmFgLlxuICAgKlxuICAgKiBAbmFtZSBhXG4gICAqIEBhbGlhcyBhblxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYW4gKHR5cGUsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGFydGljbGUgPSB+WyAnYScsICdlJywgJ2knLCAnbycsICd1JyBdLmluZGV4T2YodHlwZS5jaGFyQXQoMCkpID8gJ2FuICcgOiAnYSAnO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHR5cGUgPT09IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgJyArIGFydGljbGUgKyB0eXBlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSAnICsgYXJ0aWNsZSArIHR5cGVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnYW4nLCBhbik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2EnLCBhbik7XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZSh2YWxbLCBtc2ddKVxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBzdHJpbmcsIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBzdHJpbmcgYHZhbGBcbiAgICogaXMgYSBzdWJzdHJpbmcgb2YgdGhlIHRhcmdldC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8uaW5jbHVkZSgnZm9vJyk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhbiBhcnJheSwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGB2YWxgIGlzIGFcbiAgICogbWVtYmVyIG9mIHRoZSB0YXJnZXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlKDIpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0LCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gb2JqZWN0XG4gICAqIGB2YWxgJ3MgcHJvcGVydGllcyBhcmUgYSBzdWJzZXQgb2YgdGhlIHRhcmdldCdzIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlKHthOiAxLCBiOiAyfSk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIFNldCBvciBXZWFrU2V0LCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYHZhbGAgaXMgYVxuICAgKiBtZW1iZXIgb2YgdGhlIHRhcmdldC4gU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0gaXMgdXNlZC5cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyXSkpLnRvLmluY2x1ZGUoMik7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIE1hcCwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGB2YWxgIGlzIG9uZSBvZlxuICAgKiB0aGUgdmFsdWVzIG9mIHRoZSB0YXJnZXQuIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtIGlzIHVzZWQuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IE1hcChbWydhJywgMV0sIFsnYicsIDJdXSkpLnRvLmluY2x1ZGUoMik7XG4gICAqXG4gICAqIEJlY2F1c2UgYC5pbmNsdWRlYCBkb2VzIGRpZmZlcmVudCB0aGluZ3MgYmFzZWQgb24gdGhlIHRhcmdldCdzIHR5cGUsIGl0J3NcbiAgICogaW1wb3J0YW50IHRvIGNoZWNrIHRoZSB0YXJnZXQncyB0eXBlIGJlZm9yZSB1c2luZyBgLmluY2x1ZGVgLiBTZWUgdGhlIGAuYWBcbiAgICogZG9jIGZvciBpbmZvIG9uIHRlc3RpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pbmNsdWRlcygyKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkgaXMgdXNlZCB0byBjb21wYXJlIGFycmF5IG1lbWJlcnMgYW5kXG4gICAqIG9iamVjdCBwcm9wZXJ0aWVzLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eVxuICAgKiBpbnN0ZWFkIChXZWFrU2V0IHRhcmdldHMgYXJlIG5vdCBzdXBwb3J0ZWQpLiBTZWUgdGhlIGBkZWVwLWVxbGAgcHJvamVjdFxuICAgKiBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGluY2x1ZGVzIGB7YTogMX1gXG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLmRlZXAuaW5jbHVkZSh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5ub3QuaW5jbHVkZSh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGluY2x1ZGVzIGB4OiB7YTogMX1gXG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLmRlZXAuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLm5vdC5pbmNsdWRlKHt4OiB7YTogMX19KTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYWxsIG9mIHRoZSB0YXJnZXQncyBwcm9wZXJ0aWVzIGFyZSBzZWFyY2hlZCB3aGVuIHdvcmtpbmcgd2l0aFxuICAgKiBvYmplY3RzLiBUaGlzIGluY2x1ZGVzIHByb3BlcnRpZXMgdGhhdCBhcmUgaW5oZXJpdGVkIGFuZC9vciBub24tZW51bWVyYWJsZS5cbiAgICogQWRkIGAub3duYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBleGNsdWRlIHRoZSB0YXJnZXQncyBpbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBmcm9tIHRoZSBzZWFyY2guXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ub3duLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUoe2I6IDJ9KS5idXQubm90Lm93bi5pbmNsdWRlKHtiOiAyfSk7XG4gICAqXG4gICAqIE5vdGUgdGhhdCBhIHRhcmdldCBvYmplY3QgaXMgYWx3YXlzIG9ubHkgc2VhcmNoZWQgZm9yIGB2YWxgJ3Mgb3duXG4gICAqIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICpcbiAgICogYC5kZWVwYCBhbmQgYC5vd25gIGNhbiBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IDJ9fSkudG8uZGVlcC5vd24uaW5jbHVkZSh7YToge2I6IDJ9fSk7XG4gICAqXG4gICAqIEFkZCBgLm5lc3RlZGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZW5hYmxlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gd2hlblxuICAgKiByZWZlcmVuY2luZyBuZXN0ZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8ubmVzdGVkLmluY2x1ZGUoeydhLmJbMV0nOiAneSd9KTtcbiAgICpcbiAgICogSWYgYC5gIG9yIGBbXWAgYXJlIHBhcnQgb2YgYW4gYWN0dWFsIHByb3BlcnR5IG5hbWUsIHRoZXkgY2FuIGJlIGVzY2FwZWQgYnlcbiAgICogYWRkaW5nIHR3byBiYWNrc2xhc2hlcyBiZWZvcmUgdGhlbS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAyfX0pLnRvLm5lc3RlZC5pbmNsdWRlKHsnXFxcXC5hLlxcXFxbYlxcXFxdJzogMn0pO1xuICAgKlxuICAgKiBgLmRlZXBgIGFuZCBgLm5lc3RlZGAgY2FuIGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogW3tjOiAzfV19fSkudG8uZGVlcC5uZXN0ZWQuaW5jbHVkZSh7J2EuYlswXSc6IHtjOiAzfX0pO1xuICAgKlxuICAgKiBgLm93bmAgYW5kIGAubmVzdGVkYCBjYW5ub3QgYmUgY29tYmluZWQuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuaW5jbHVkZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm5vdC5pbmNsdWRlKCd0YWNvJyk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaW5jbHVkZSg0KTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLmluY2x1ZGVgIHdoZW4gdGhlIHRhcmdldCBpcyBhbiBvYmplY3QuXG4gICAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zIGJ5IGFzc2VydGluZyB0aGF0IHRoZVxuICAgKiB0YXJnZXQgb2JqZWN0IGRvZXNuJ3QgaGF2ZSBhbGwgb2YgYHZhbGAncyBrZXkvdmFsdWUgcGFpcnMgYnV0IG1heSBvciBtYXlcbiAgICogbm90IGhhdmUgc29tZSBvZiB0aGVtLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3NcbiAgICogZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IG9iamVjdCBpc24ndCBldmVuIGV4cGVjdGVkIHRvIGhhdmUgYHZhbGAncyBrZXlzLCBpdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YzogM30pLnRvLm5vdC5oYXZlLmFueS5rZXlzKCdhJywgJ2InKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YzogM30pLnRvLm5vdC5pbmNsdWRlKHthOiAxLCBiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgb2JqZWN0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYHZhbGAncyBrZXlzLCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IHRoYXQgZWFjaCBvZiB0aGUgcHJvcGVydGllcyBoYXMgaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXIgdGhhblxuICAgKiBhc3NlcnRpbmcgdGhhdCBlYWNoIHByb3BlcnR5IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMywgYjogNH0pLnRvLmluY2x1ZGUoe2E6IDMsIGI6IDR9KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMywgYjogNH0pLnRvLm5vdC5pbmNsdWRlKHthOiAxLCBiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmluY2x1ZGVgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUoNCwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmluY2x1ZGUoNCk7XG4gICAqXG4gICAqIGAuaW5jbHVkZWAgY2FuIGFsc28gYmUgdXNlZCBhcyBhIGxhbmd1YWdlIGNoYWluLCBjYXVzaW5nIGFsbCBgLm1lbWJlcnNgIGFuZFxuICAgKiBgLmtleXNgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhlIHRhcmdldCB0byBiZSBhXG4gICAqIHN1cGVyc2V0IG9mIHRoZSBleHBlY3RlZCBzZXQsIHJhdGhlciB0aGFuIGFuIGlkZW50aWNhbCBzZXQuIE5vdGUgdGhhdFxuICAgKiBgLm1lbWJlcnNgIGlnbm9yZXMgZHVwbGljYXRlcyBpbiB0aGUgc3Vic2V0IHdoZW4gYC5pbmNsdWRlYCBpcyBhZGRlZC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QncyBrZXlzIGFyZSBhIHN1cGVyc2V0IG9mIFsnYScsICdiJ10gYnV0IG5vdCBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLmluY2x1ZGUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyLCBjOiAzfSkudG8ubm90LmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGlzIGEgc3VwZXJzZXQgb2YgWzEsIDJdIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlLm1lbWJlcnMoWzEsIDJdKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLm5vdC5oYXZlLm1lbWJlcnMoWzEsIDJdKTtcbiAgICpcbiAgICogICAgIC8vIER1cGxpY2F0ZXMgaW4gdGhlIHN1YnNldCBhcmUgaWdub3JlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyLCAyLCAyXSk7XG4gICAqXG4gICAqIE5vdGUgdGhhdCBhZGRpbmcgYC5hbnlgIGVhcmxpZXIgaW4gdGhlIGNoYWluIGNhdXNlcyB0aGUgYC5rZXlzYCBhc3NlcnRpb25cbiAgICogdG8gaWdub3JlIGAuaW5jbHVkZWAuXG4gICAqXG4gICAqICAgICAvLyBCb3RoIGFzc2VydGlvbnMgYXJlIGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaW5jbHVkZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogVGhlIGFsaWFzZXMgYC5pbmNsdWRlc2AsIGAuY29udGFpbmAsIGFuZCBgLmNvbnRhaW5zYCBjYW4gYmUgdXNlZFxuICAgKiBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlXG4gICAqIEBhbGlhcyBjb250YWluXG4gICAqIEBhbGlhcyBpbmNsdWRlc1xuICAgKiBAYWxpYXMgY29udGFpbnNcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBTYW1lVmFsdWVaZXJvKGEsIGIpIHtcbiAgICByZXR1cm4gKF8uaXNOYU4oYSkgJiYgXy5pc05hTihiKSkgfHwgYSA9PT0gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yICgpIHtcbiAgICBmbGFnKHRoaXMsICdjb250YWlucycsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5jbHVkZSAodmFsLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICBcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBkZXNjcmlwdG9yID0gaXNEZWVwID8gJ2RlZXAgJyA6ICcnO1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgdmFyIGluY2x1ZGVkID0gZmFsc2U7XG5cbiAgICBzd2l0Y2ggKG9ialR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIGluY2x1ZGVkID0gb2JqLmluZGV4T2YodmFsKSAhPT0gLTE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd3ZWFrc2V0JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICAgIGZsYWdNc2cgKyAndW5hYmxlIHRvIHVzZSAuZGVlcC5pbmNsdWRlIHdpdGggV2Vha1NldCcsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBzc2ZpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY2x1ZGVkID0gb2JqLmhhcyh2YWwpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWFwJzpcbiAgICAgICAgdmFyIGlzRXFsID0gaXNEZWVwID8gXy5lcWwgOiBTYW1lVmFsdWVaZXJvO1xuICAgICAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGluY2x1ZGVkID0gaW5jbHVkZWQgfHwgaXNFcWwoaXRlbSwgdmFsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZXQnOlxuICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGluY2x1ZGVkID0gaW5jbHVkZWQgfHwgXy5lcWwoaXRlbSwgdmFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IG9iai5oYXModmFsKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IG9iai5pbmRleE9mKHZhbCkgIT09IC0xO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUaGlzIGJsb2NrIGlzIGZvciBhc3NlcnRpbmcgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QuXG4gICAgICAgIC8vIGBfLmV4cGVjdFR5cGVzYCBpc24ndCB1c2VkIGhlcmUgYmVjYXVzZSBgLmluY2x1ZGVgIHNob3VsZCB3b3JrIHdpdGhcbiAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGEgY3VzdG9tIGBAQHRvU3RyaW5nVGFnYC5cbiAgICAgICAgaWYgKHZhbCAhPT0gT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJ29iamVjdCB0ZXN0ZWQgbXVzdCBiZSBhbiBhcnJheSwgYSBtYXAsIGFuIG9iamVjdCwnXG4gICAgICAgICAgICAgICsgJyBhIHNldCwgYSBzdHJpbmcsIG9yIGEgd2Vha3NldCwgYnV0ICcgKyBvYmpUeXBlICsgJyBnaXZlbicsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBzc2ZpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbClcbiAgICAgICAgICAsIGZpcnN0RXJyID0gbnVsbFxuICAgICAgICAgICwgbnVtRXJycyA9IDA7XG4gIFxuICAgICAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgdmFyIHByb3BBc3NlcnRpb24gPSBuZXcgQXNzZXJ0aW9uKG9iaik7XG4gICAgICAgICAgXy50cmFuc2ZlckZsYWdzKHRoaXMsIHByb3BBc3NlcnRpb24sIHRydWUpO1xuICAgICAgICAgIGZsYWcocHJvcEFzc2VydGlvbiwgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gIFxuICAgICAgICAgIGlmICghbmVnYXRlIHx8IHByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcHJvcEFzc2VydGlvbi5wcm9wZXJ0eShwcm9wLCB2YWxbcHJvcF0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb3BBc3NlcnRpb24ucHJvcGVydHkocHJvcCwgdmFsW3Byb3BdKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmICghXy5jaGVja0Vycm9yLmNvbXBhdGlibGVDb25zdHJ1Y3RvcihlcnIsIEFzc2VydGlvbkVycm9yKSkge1xuICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RFcnIgPT09IG51bGwpIGZpcnN0RXJyID0gZXJyO1xuICAgICAgICAgICAgbnVtRXJycysrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gIFxuICAgICAgICAvLyBXaGVuIHZhbGlkYXRpbmcgLm5vdC5pbmNsdWRlIHdpdGggbXVsdGlwbGUgcHJvcGVydGllcywgd2Ugb25seSB3YW50XG4gICAgICAgIC8vIHRvIHRocm93IGFuIGFzc2VydGlvbiBlcnJvciBpZiBhbGwgb2YgdGhlIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkLFxuICAgICAgICAvLyBpbiB3aGljaCBjYXNlIHdlIHRocm93IHRoZSBmaXJzdCBwcm9wZXJ0eSBhc3NlcnRpb24gZXJyb3IgdGhhdCB3ZVxuICAgICAgICAvLyBlbmNvdW50ZXJlZC5cbiAgICAgICAgaWYgKG5lZ2F0ZSAmJiBwcm9wcy5sZW5ndGggPiAxICYmIG51bUVycnMgPT09IHByb3BzLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IGZpcnN0RXJyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBc3NlcnQgaW5jbHVzaW9uIGluIGNvbGxlY3Rpb24gb3Igc3Vic3RyaW5nIGluIGEgc3RyaW5nLlxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaW5jbHVkZWRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gJyArIGRlc2NyaXB0b3IgKyAnaW5jbHVkZSAnICsgXy5pbnNwZWN0KHZhbClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90ICcgKyBkZXNjcmlwdG9yICsgJ2luY2x1ZGUgJyArIF8uaW5zcGVjdCh2YWwpKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2luY2x1ZGUnLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2NvbnRhaW4nLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2NvbnRhaW5zJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdpbmNsdWRlcycsIGluY2x1ZGUsIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yKTtcblxuICAvKipcbiAgICogIyMjIC5va1xuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBsb29zZWx5IChgPT1gKSBlcXVhbCB0byBgdHJ1ZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgb3IgZGVlcGx5IGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUudHJ1ZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub2tgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDApLnRvLmVxdWFsKDApOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDApLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLmJlLmZhbHNlOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLmJlLm51bGw7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobnVsbCkudG8ubm90LmJlLm9rOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5vaztcbiAgICpcbiAgICogQG5hbWUgb2tcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdvaycsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdHJ1dGh5J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBmYWxzeScpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC50cnVlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYHRydWVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAudHJ1ZWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW4gbm90XG4gICAqIGVxdWFsIHRvIGB0cnVlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8uYmUuZmFsc2U7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLm5vdC5iZS50cnVlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUudHJ1ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS50cnVlO1xuICAgKlxuICAgKiBAbmFtZSB0cnVlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgndHJ1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdHJ1ZSA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdHJ1ZSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc2UnXG4gICAgICAsIGZsYWcodGhpcywgJ25lZ2F0ZScpID8gZmFsc2UgOiB0cnVlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZmFsc2VcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5iZS5mYWxzZTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5mYWxzZWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIGBmYWxzZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUudHJ1ZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5ub3QuYmUuZmFsc2U7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5mYWxzZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmZhbHNlO1xuICAgKlxuICAgKiBAbmFtZSBmYWxzZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2ZhbHNlJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBmYWxzZSA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc2UnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydWUnXG4gICAgICAsIGZsYWcodGhpcywgJ25lZ2F0ZScpID8gdHJ1ZSA6IGZhbHNlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAubnVsbFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGBudWxsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm51bGxgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgbnVsbGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLm51bGw7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUubnVsbDtcbiAgICpcbiAgICogQG5hbWUgbnVsbFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ251bGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG51bGwgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIG51bGwnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBudWxsJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLnVuZGVmaW5lZFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHVuZGVmaW5lZCkudG8uYmUudW5kZWZpbmVkO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnVuZGVmaW5lZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS51bmRlZmluZWQ7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUudW5kZWZpbmVkO1xuICAgKlxuICAgKiBAbmFtZSB1bmRlZmluZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCd1bmRlZmluZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHVuZGVmaW5lZCA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdW5kZWZpbmVkJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgdW5kZWZpbmVkJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLk5hTlxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBleGFjdGx5IGBOYU5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KE5hTikudG8uYmUuTmFOO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLk5hTmAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW4gbm90XG4gICAqIGVxdWFsIHRvIGBOYU5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5lcXVhbCgnZm9vJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5OYU47IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuTmFOO1xuICAgKlxuICAgKiBAbmFtZSBOYU5cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdOYU4nLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIF8uaXNOYU4oZmxhZyh0aGlzLCAnb2JqZWN0JykpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgTmFOJ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBOYU4nXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXhpc3RcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbm90IHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gZWl0aGVyIGBudWxsYCBvclxuICAgKiBgdW5kZWZpbmVkYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG9cbiAgICogaXRzIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmV4aXN0OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgwKS50by5lcXVhbCgwKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgwKS50by5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXhpc3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLmJlLm51bGw7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobnVsbCkudG8ubm90LmV4aXN0OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLm5vdC5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobnVsbCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmV4aXN0O1xuICAgKlxuICAgKiBAbmFtZSBleGlzdFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2V4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdmFsICE9PSBudWxsICYmIHZhbCAhPT0gdW5kZWZpbmVkXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGV4aXN0J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXhpc3QnXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZW1wdHlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIGFycmF5LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzXG4gICAqIGBsZW5ndGhgIHByb3BlcnR5IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYDBgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFtdKS50by5iZS5lbXB0eTtcbiAgICogICAgIGV4cGVjdCgnJykudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG1hcCBvciBzZXQsIGAuZW1wdHlgIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgYHNpemVgXG4gICAqIHByb3BlcnR5IGlzIHN0cmljdGx5IGVxdWFsIHRvIGAwYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KCkpLnRvLmJlLmVtcHR5O1xuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoKSkudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGAuZW1wdHlgIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0XG4gICAqIGRvZXNuJ3QgaGF2ZSBhbnkgb3duIGVudW1lcmFibGUgcHJvcGVydGllcy4gUHJvcGVydGllcyB3aXRoIFN5bWJvbC1iYXNlZFxuICAgKiBrZXlzIGFyZSBleGNsdWRlZCBmcm9tIHRoZSBjb3VudC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7fSkudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIEJlY2F1c2UgYC5lbXB0eWAgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5lbXB0eWAuIFNlZSB0aGUgYC5hYFxuICAgKiBkb2MgZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3QoW10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaXMuZW1wdHk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZW1wdHlgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBjb250YWlucyBpdHMgZXhwZWN0ZWQgbnVtYmVyIG9mIHZhbHVlcyxcbiAgICogcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgaXQncyBub3QgZW1wdHkuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmJlLmVtcHR5OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyLCAzXSkpLnRvLmhhdmUucHJvcGVydHkoJ3NpemUnLCAzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyLCAzXSkpLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoT2JqZWN0LmtleXMoe2E6IDF9KSkudG8uaGF2ZS5sZW5ndGhPZigxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIEBuYW1lIGVtcHR5XG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZW1wdHknLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBpdGVtc0NvdW50O1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgc3dpdGNoIChfLnR5cGUodmFsKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBpdGVtc0NvdW50ID0gdmFsLmxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtYXAnOlxuICAgICAgY2FzZSAnc2V0JzpcbiAgICAgICAgaXRlbXNDb3VudCA9IHZhbC5zaXplO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlYWttYXAnOlxuICAgICAgY2FzZSAnd2Vha3NldCc6XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJy5lbXB0eSB3YXMgcGFzc2VkIGEgd2VhayBjb2xsZWN0aW9uJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgc3NmaVxuICAgICAgICApO1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICB2YXIgbXNnID0gZmxhZ01zZyArICcuZW1wdHkgd2FzIHBhc3NlZCBhIGZ1bmN0aW9uICcgKyBfLmdldE5hbWUodmFsKTtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1zZy50cmltKCksIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodmFsICE9PSBPYmplY3QodmFsKSkge1xuICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICAgIGZsYWdNc2cgKyAnLmVtcHR5IHdhcyBwYXNzZWQgbm9uLXN0cmluZyBwcmltaXRpdmUgJyArIF8uaW5zcGVjdCh2YWwpLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXNDb3VudCA9IE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAwID09PSBpdGVtc0NvdW50XG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGVtcHR5J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgZW1wdHknXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYXJndW1lbnRzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIHRlc3QgKCkge1xuICAgKiAgICAgICBleHBlY3QoYXJndW1lbnRzKS50by5iZS5hcmd1bWVudHM7XG4gICAqICAgICB9XG4gICAqXG4gICAqICAgICB0ZXN0KCk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYXJndW1lbnRzYC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB3aGljaCB0eXBlIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gYmUsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IGl0cyBub3QgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmFyZ3VtZW50czsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe30sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hcmd1bWVudHM7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLkFyZ3VtZW50c2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5hcmd1bWVudHNgLlxuICAgKlxuICAgKiBAbmFtZSBhcmd1bWVudHNcbiAgICogQGFsaWFzIEFyZ3VtZW50c1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBjaGVja0FyZ3VtZW50cyAoKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHR5cGUgPSBfLnR5cGUob2JqKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgJ0FyZ3VtZW50cycgPT09IHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYXJndW1lbnRzIGJ1dCBnb3QgJyArIHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIGFyZ3VtZW50cydcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdhcmd1bWVudHMnLCBjaGVja0FyZ3VtZW50cyk7XG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnQXJndW1lbnRzJywgY2hlY2tBcmd1bWVudHMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmVxdWFsKHZhbFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gdGhlIGdpdmVuIGB2YWxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpO1xuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5lcXVhbCgnZm9vJyk7XG4gICAqIFxuICAgKiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWUgdGhlXG4gICAqIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbHMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmRlZXAuZXF1YWwoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWxzIGBbMSwgMl1gXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5kZWVwLmVxdWFsKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuZXF1YWwoWzEsIDJdKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5lcXVhbGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIG9uZSBvZiBjb3VudGxlc3MgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmVxdWFsKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5lcXVhbGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uZXF1YWwoMik7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuZXF1YWxzYCBhbmQgYGVxYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmVxdWFsYC5cbiAgICpcbiAgICogQG5hbWUgZXF1YWxcbiAgICogQGFsaWFzIGVxdWFsc1xuICAgKiBAYWxpYXMgZXFcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRFcXVhbCAodmFsLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgaWYgKGZsYWcodGhpcywgJ2RlZXAnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZXFsKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIHZhbCA9PT0gb2JqXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZXF1YWwgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBlcXVhbCAje2V4cH0nXG4gICAgICAgICwgdmFsXG4gICAgICAgICwgdGhpcy5fb2JqXG4gICAgICAgICwgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcXVhbCcsIGFzc2VydEVxdWFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXF1YWxzJywgYXNzZXJ0RXF1YWwpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcScsIGFzc2VydEVxdWFsKTtcblxuICAvKipcbiAgICogIyMjIC5lcWwob2JqWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgb2JqYC4gU2VlIHRoZVxuICAgKiBgZGVlcC1lcWxgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGlzIGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWwgdG8ge2E6IDF9XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5lcWwoe2E6IDF9KS5idXQubm90LmVxdWFsKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgaXMgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbCB0byBbMSwgMl1cbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmVxbChbMSwgMl0pLmJ1dC5ub3QuZXF1YWwoWzEsIDJdKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5lcWxgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBkZWVwbHkgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXJcbiAgICogdGhhbiBub3QgZGVlcGx5IGVxdWFsIHRvIG9uZSBvZiBjb3VudGxlc3MgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5lcWwoe2E6IDF9KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5lcWwoe2I6IDJ9KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuZXFsYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5lcWwoe2I6IDJ9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uZXFsKHtiOiAyfSk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmVxbHNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuZXFsYC5cbiAgICpcbiAgICogVGhlIGAuZGVlcC5lcXVhbGAgYXNzZXJ0aW9uIGlzIGFsbW9zdCBpZGVudGljYWwgdG8gYC5lcWxgIGJ1dCB3aXRoIG9uZVxuICAgKiBkaWZmZXJlbmNlOiBgLmRlZXAuZXF1YWxgIGNhdXNlcyBkZWVwIGVxdWFsaXR5IGNvbXBhcmlzb25zIHRvIGFsc28gYmUgdXNlZFxuICAgKiBmb3IgYW55IG90aGVyIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluLlxuICAgKlxuICAgKiBAbmFtZSBlcWxcbiAgICogQGFsaWFzIGVxbHNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRFcWwob2JqLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgXy5lcWwob2JqLCBmbGFnKHRoaXMsICdvYmplY3QnKSlcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZGVlcGx5IGVxdWFsICN7ZXhwfSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGRlZXBseSBlcXVhbCAje2V4cH0nXG4gICAgICAsIG9ialxuICAgICAgLCB0aGlzLl9vYmpcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcWwnLCBhc3NlcnRFcWwpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcWxzJywgYXNzZXJ0RXFsKTtcblxuICAvKipcbiAgICogIyMjIC5hYm92ZShuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS5cbiAgICogSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmFib3ZlKDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZ3JlYXRlciB0aGFuIHRoZSBnaXZlbiBudW1iZXIgYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmFib3ZlKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmFib3ZlKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5hYm92ZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmFib3ZlKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5hYm92ZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmFib3ZlKDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYWJvdmUoMik7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuZ3RgIGFuZCBgLmdyZWF0ZXJUaGFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLmFib3ZlYC5cbiAgICpcbiAgICogQG5hbWUgYWJvdmVcbiAgICogQGFsaWFzIGd0XG4gICAqIEBhbGlhcyBncmVhdGVyVGhhblxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0QWJvdmUgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYWJvdmUgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYWJvdmUgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA+IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGFib3ZlICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID4gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBtb3N0ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2Fib3ZlJywgYXNzZXJ0QWJvdmUpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdndCcsIGFzc2VydEFib3ZlKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3JlYXRlclRoYW4nLCBhc3NlcnRBYm92ZSk7XG5cbiAgLyoqXG4gICAqICMjIyAubGVhc3QoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIG51bWJlciBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hdC5sZWFzdCgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlclxuICAgKiBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmxlYXN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmxlYXN0YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYXQubGVhc3QoMiwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hdC5sZWFzdCgyKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuZ3RlYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmxlYXN0YC5cbiAgICpcbiAgICogQG5hbWUgbGVhc3RcbiAgICogQGFsaWFzIGd0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVhc3QgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBsZWFzdCBtdXN0IGJlIGEgZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChuVHlwZSAhPT0gJ251bWJlcicgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBsZWFzdCBtdXN0IGJlIGEgbnVtYmVyJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgbGVuID49IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGF0IGxlYXN0ICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGJlbG93ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgbGVuXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPj0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IGxlYXN0ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsZWFzdCcsIGFzc2VydExlYXN0KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3RlJywgYXNzZXJ0TGVhc3QpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmJlbG93KG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgbGVzcyB0aGFuIHRoZSBnaXZlbiBudW1iZXIgb3IgZGF0ZSBgbmAgcmVzcGVjdGl2ZWx5LlxuICAgKiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYmVsb3coMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYmVsb3coNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGgoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5iZWxvd2AuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmJlLmJlbG93KDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5iZWxvd2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmJlbG93KDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYmVsb3coMSk7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAubHRgIGFuZCBgLmxlc3NUaGFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLmJlbG93YC5cbiAgICpcbiAgICogQG5hbWUgYmVsb3dcbiAgICogQGFsaWFzIGx0XG4gICAqIEBhbGlhcyBsZXNzVGhhblxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0QmVsb3cgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBiZWxvdyBtdXN0IGJlIGEgZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChuVHlwZSAhPT0gJ251bWJlcicgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBiZWxvdyBtdXN0IGJlIGEgbnVtYmVyJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgbGVuIDwgblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSBsZW5ndGggYmVsb3cgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGEgbGVuZ3RoIGJlbG93ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgbGVuXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPCBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYmVsb3cgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IGxlYXN0ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2JlbG93JywgYXNzZXJ0QmVsb3cpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsdCcsIGFzc2VydEJlbG93KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbGVzc1RoYW4nLCBhc3NlcnRCZWxvdyk7XG5cbiAgLyoqXG4gICAqICMjIyAubW9zdChuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzXG4gICAqIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0Lm1vc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0Lm1vc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5tb3N0KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5tb3N0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5ub3QuYmUuYXQubW9zdCgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAubW9zdGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmF0Lm1vc3QoMSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDIsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hdC5tb3N0KDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5sdGVgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAubW9zdGAuXG4gICAqXG4gICAqIEBuYW1lIG1vc3RcbiAgICogQGFsaWFzIGx0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TW9zdCAobiwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGRvTGVuZ3RoID0gZmxhZyh0aGlzLCAnZG9MZW5ndGgnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG1zZ1ByZWZpeCA9ICgoZmxhZ01zZykgPyBmbGFnTXNnICsgJzogJyA6ICcnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIG5UeXBlID0gXy50eXBlKG4pLnRvTG93ZXJDYXNlKClcbiAgICAgICwgc2hvdWxkVGhyb3cgPSB0cnVlO1xuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gICAgfVxuICAgIFxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBtb3N0IG11c3QgYmUgYSBkYXRlJztcbiAgICB9IGVsc2UgaWYgKG5UeXBlICE9PSAnbnVtYmVyJyAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIG1vc3QgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA8PSBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhdCBtb3N0ICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgbGVuXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPD0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IG1vc3QgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21vc3QnLCBhc3NlcnRNb3N0KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbHRlJywgYXNzZXJ0TW9zdCk7XG5cbiAgLyoqXG4gICAqICMjIyAud2l0aGluKHN0YXJ0LCBmaW5pc2hbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlblxuICAgKiBudW1iZXIgb3IgZGF0ZSBgc3RhcnRgLCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIgb3IgZGF0ZSBgZmluaXNoYCByZXNwZWN0aXZlbHkuXG4gICAqIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZFxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS53aXRoaW4oMSwgMyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLndpdGhpbigyLCAzKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUud2l0aGluKDEsIDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXJcbiAgICogYHN0YXJ0YCwgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyIGBmaW5pc2hgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLndpdGhpbigyLCA0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi53aXRoaW4oMiwgNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLndpdGhpbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLndpdGhpbigyLCA0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAud2l0aGluYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoNCkudG8uYmUud2l0aGluKDEsIDMsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCg0LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUud2l0aGluKDEsIDMpO1xuICAgKlxuICAgKiBAbmFtZSB3aXRoaW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IGxvd2VyIGJvdW5kIGluY2x1c2l2ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gZmluaXNoIHVwcGVyIGJvdW5kIGluY2x1c2l2ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnd2l0aGluJywgZnVuY3Rpb24gKHN0YXJ0LCBmaW5pc2gsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzdGFydFR5cGUgPSBfLnR5cGUoc3RhcnQpLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZmluaXNoVHlwZSA9IF8udHlwZShmaW5pc2gpLnRvTG93ZXJDYXNlKClcbiAgICAgICwgc2hvdWxkVGhyb3cgPSB0cnVlXG4gICAgICAsIHJhbmdlID0gKHN0YXJ0VHlwZSA9PT0gJ2RhdGUnICYmIGZpbmlzaFR5cGUgPT09ICdkYXRlJylcbiAgICAgICAgICA/IHN0YXJ0LnRvVVRDU3RyaW5nKCkgKyAnLi4nICsgZmluaXNoLnRvVVRDU3RyaW5nKClcbiAgICAgICAgICA6IHN0YXJ0ICsgJy4uJyArIGZpbmlzaDtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiAoc3RhcnRUeXBlICE9PSAnZGF0ZScgfHwgZmluaXNoVHlwZSAhPT0gJ2RhdGUnKSkpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnRzIHRvIHdpdGhpbiBtdXN0IGJlIGRhdGVzJztcbiAgICB9IGVsc2UgaWYgKChzdGFydFR5cGUgIT09ICdudW1iZXInIHx8IGZpbmlzaFR5cGUgIT09ICdudW1iZXInKSAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50cyB0byB3aXRoaW4gbXVzdCBiZSBudW1iZXJzJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgbGVuID49IHN0YXJ0ICYmIGxlbiA8PSBmaW5pc2hcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCB3aXRoaW4gJyArIHJhbmdlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPj0gc3RhcnQgJiYgb2JqIDw9IGZpbmlzaFxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgd2l0aGluICcgKyByYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmluc3RhbmNlb2YoY29uc3RydWN0b3JbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgZ2l2ZW4gYGNvbnN0cnVjdG9yYC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7IH1cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLmJlLmFuLmluc3RhbmNlb2YoQ2F0KTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluc3RhbmNlb2ZgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgKlxuICAgKiBgLmluc3RhbmNlb2ZgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hbi5pbnN0YW5jZW9mKEFycmF5LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgKlxuICAgKiBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRVM1LCBgLmluc3RhbmNlb2ZgIG1heSBub3QgYWx3YXlzIHdvcmsgYXMgZXhwZWN0ZWRcbiAgICogd2hlbiB1c2luZyBhIHRyYW5zcGlsZXIgc3VjaCBhcyBCYWJlbCBvciBUeXBlU2NyaXB0LiBJbiBwYXJ0aWN1bGFyLCBpdCBtYXlcbiAgICogcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMgd2hlbiBzdWJjbGFzc2luZyBidWlsdC1pbiBvYmplY3Qgc3VjaCBhc1xuICAgKiBgQXJyYXlgLCBgRXJyb3JgLCBhbmQgYE1hcGAuIFNlZSB5b3VyIHRyYW5zcGlsZXIncyBkb2NzIGZvciBkZXRhaWxzOlxuICAgKlxuICAgKiAtIChbQmFiZWxdKGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL3VzYWdlL2NhdmVhdHMvI2NsYXNzZXMpKVxuICAgKiAtIChbVHlwZVNjcmlwdF0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvQnJlYWtpbmctQ2hhbmdlcyNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmspKVxuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5pbnN0YW5jZU9mYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmluc3RhbmNlb2ZgLlxuICAgKlxuICAgKiBAbmFtZSBpbnN0YW5jZW9mXG4gICAqIEBwYXJhbSB7Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAYWxpYXMgaW5zdGFuY2VPZlxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRJbnN0YW5jZU9mIChjb25zdHJ1Y3RvciwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgdGFyZ2V0ID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICB2YXIgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICB2YXIgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgaXNJbnN0YW5jZU9mID0gdGFyZ2V0IGluc3RhbmNlb2YgY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKFxuICAgICAgICAgIGZsYWdNc2cgKyAnVGhlIGluc3RhbmNlb2YgYXNzZXJ0aW9uIG5lZWRzIGEgY29uc3RydWN0b3IgYnV0ICdcbiAgICAgICAgICAgICsgXy50eXBlKGNvbnN0cnVjdG9yKSArICcgd2FzIGdpdmVuLicsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IF8uZ2V0TmFtZShjb25zdHJ1Y3Rvcik7XG4gICAgaWYgKG5hbWUgPT09IG51bGwpIHtcbiAgICAgIG5hbWUgPSAnYW4gdW5uYW1lZCBjb25zdHJ1Y3Rvcic7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGlzSW5zdGFuY2VPZlxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhbiBpbnN0YW5jZSBvZiAnICsgbmFtZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYW4gaW5zdGFuY2Ugb2YgJyArIG5hbWVcbiAgICApO1xuICB9O1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luc3RhbmNlb2YnLCBhc3NlcnRJbnN0YW5jZU9mKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaW5zdGFuY2VPZicsIGFzc2VydEluc3RhbmNlT2YpO1xuXG4gIC8qKlxuICAgKiAjIyMgLnByb3BlcnR5KG5hbWVbLCB2YWxbLCBtc2ddXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnKTtcbiAgICpcbiAgICogV2hlbiBgdmFsYCBpcyBwcm92aWRlZCwgYC5wcm9wZXJ0eWAgYWxzbyBhc3NlcnRzIHRoYXQgdGhlIHByb3BlcnR5J3MgdmFsdWVcbiAgICogaXMgZXF1YWwgdG8gdGhlIGdpdmVuIGB2YWxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYScsIDEpO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZVxuICAgKiBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWUgdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvclxuICAgKiBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgcHJvcGVydHkgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uaGF2ZS5kZWVwLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmhhdmUucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKlxuICAgKiBUaGUgdGFyZ2V0J3MgZW51bWVyYWJsZSBhbmQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgYWx3YXlzIGluY2x1ZGVkXG4gICAqIGluIHRoZSBzZWFyY2guIEJ5IGRlZmF1bHQsIGJvdGggb3duIGFuZCBpbmhlcml0ZWQgcHJvcGVydGllcyBhcmUgaW5jbHVkZWQuXG4gICAqIEFkZCBgLm93bmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZXhjbHVkZSBpbmhlcml0ZWQgcHJvcGVydGllcyBmcm9tIHRoZVxuICAgKiBzZWFyY2guXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd24ucHJvcGVydHkoJ2EnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duLnByb3BlcnR5KCdhJywgMSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdiJykuYnV0Lm5vdC5vd24ucHJvcGVydHkoJ2InKTsgXG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAub3duYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLmhhdmUuZGVlcC5vd24ucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKlxuICAgKiBBZGQgYC5uZXN0ZWRgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGVuYWJsZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIHdoZW5cbiAgICogcmVmZXJlbmNpbmcgbmVzdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nKTtcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ2EuYlsxXScsICd5Jyk7XG4gICAqXG4gICAqIElmIGAuYCBvciBgW11gIGFyZSBwYXJ0IG9mIGFuIGFjdHVhbCBwcm9wZXJ0eSBuYW1lLCB0aGV5IGNhbiBiZSBlc2NhcGVkIGJ5XG4gICAqIGFkZGluZyB0d28gYmFja3NsYXNoZXMgYmVmb3JlIHRoZW0uXG4gICAqXG4gICAqICAgICBleHBlY3QoeycuYSc6IHsnW2JdJzogJ3gnfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdcXFxcLmEuXFxcXFtiXFxcXF0nKTtcbiAgICpcbiAgICogYC5kZWVwYCBhbmQgYC5uZXN0ZWRgIGNhbiBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFt7YzogM31dfX0pXG4gICAqICAgICAgIC50by5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KCdhLmJbMF0nLCB7YzogM30pO1xuICAgKlxuICAgKiBgLm93bmAgYW5kIGAubmVzdGVkYCBjYW5ub3QgYmUgY29tYmluZWQuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAucHJvcGVydHlgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLnByb3BlcnR5YCB3aGVuIHByb3ZpZGluZyBgdmFsYC4gVGhlXG4gICAqIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlXG4gICAqIHRhcmdldCBlaXRoZXIgZG9lc24ndCBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCwgb3IgdGhhdCBpdFxuICAgKiBkb2VzIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgIGJ1dCBpdHMgdmFsdWUgaXNuJ3QgZXF1YWwgdG9cbiAgICogdGhlIGdpdmVuIGB2YWxgLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3NcbiAgICogZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzbid0IGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXlcbiAgICogYG5hbWVgLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdhJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgLFxuICAgKiBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHByb3BlcnR5IGhhcyBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlclxuICAgKiB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdhJywgMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLnByb3BlcnR5YCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluXG4gICAqIHRvIGJlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgZnJvbSB0aGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnKS50aGF0LmlzLmEoJ251bWJlcicpO1xuICAgKlxuICAgKiBgLnByb3BlcnR5YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyBgdmFsYCwgb25seSB1c2UgdGhlXG4gICAqIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5wcm9wZXJ0eSgnYScsIDIpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicsIHVuZGVmaW5lZCwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiBcbiAgICogVGhlIGFib3ZlIGFzc2VydGlvbiBpc24ndCB0aGUgc2FtZSB0aGluZyBhcyBub3QgcHJvdmlkaW5nIGB2YWxgLiBJbnN0ZWFkLFxuICAgKiBpdCdzIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQgb2JqZWN0IGhhcyBhIGBiYCBwcm9wZXJ0eSB0aGF0J3MgZXF1YWwgdG9cbiAgICogYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIFRoZSBhc3NlcnRpb25zIGAub3duUHJvcGVydHlgIGFuZCBgLmhhdmVPd25Qcm9wZXJ0eWAgY2FuIGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5vd24ucHJvcGVydHlgLlxuICAgKlxuICAgKiBAbmFtZSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwgKG9wdGlvbmFsKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQHJldHVybnMgdmFsdWUgb2YgcHJvcGVydHkgZm9yIGNoYWluaW5nXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydFByb3BlcnR5IChuYW1lLCB2YWwsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgdmFyIGlzTmVzdGVkID0gZmxhZyh0aGlzLCAnbmVzdGVkJylcbiAgICAgICwgaXNPd24gPSBmbGFnKHRoaXMsICdvd24nKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG5cbiAgICBpZiAoaXNOZXN0ZWQgJiYgaXNPd24pIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgZmxhZ01zZyArICdUaGUgXCJuZXN0ZWRcIiBhbmQgXCJvd25cIiBmbGFncyBjYW5ub3QgYmUgY29tYmluZWQuJyxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBzc2ZpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgZmxhZ01zZyArICdUYXJnZXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgc3NmaVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgaXNEZWVwID0gZmxhZyh0aGlzLCAnZGVlcCcpXG4gICAgICAsIG5lZ2F0ZSA9IGZsYWcodGhpcywgJ25lZ2F0ZScpXG4gICAgICAsIHBhdGhJbmZvID0gaXNOZXN0ZWQgPyBfLmdldFBhdGhJbmZvKG9iaiwgbmFtZSkgOiBudWxsXG4gICAgICAsIHZhbHVlID0gaXNOZXN0ZWQgPyBwYXRoSW5mby52YWx1ZSA6IG9ialtuYW1lXTtcblxuICAgIHZhciBkZXNjcmlwdG9yID0gJyc7XG4gICAgaWYgKGlzRGVlcCkgZGVzY3JpcHRvciArPSAnZGVlcCAnO1xuICAgIGlmIChpc093bikgZGVzY3JpcHRvciArPSAnb3duICc7XG4gICAgaWYgKGlzTmVzdGVkKSBkZXNjcmlwdG9yICs9ICduZXN0ZWQgJztcbiAgICBkZXNjcmlwdG9yICs9ICdwcm9wZXJ0eSAnO1xuXG4gICAgdmFyIGhhc1Byb3BlcnR5O1xuICAgIGlmIChpc093bikgaGFzUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBuYW1lKTtcbiAgICBlbHNlIGlmIChpc05lc3RlZCkgaGFzUHJvcGVydHkgPSBwYXRoSW5mby5leGlzdHM7XG4gICAgZWxzZSBoYXNQcm9wZXJ0eSA9IF8uaGFzUHJvcGVydHkob2JqLCBuYW1lKTtcblxuICAgIC8vIFdoZW4gcGVyZm9ybWluZyBhIG5lZ2F0ZWQgYXNzZXJ0aW9uIGZvciBib3RoIG5hbWUgYW5kIHZhbCwgbWVyZWx5IGhhdmluZ1xuICAgIC8vIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpc24ndCBlbm91Z2ggdG8gY2F1c2UgdGhlIGFzc2VydGlvbiB0b1xuICAgIC8vIGZhaWwuIEl0IG11c3QgYm90aCBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgYW5kIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoYXQgcHJvcGVydHkgbXVzdCBlcXVhbCB0aGUgZ2l2ZW4gdmFsLiBUaGVyZWZvcmUsIHNraXAgdGhpcyBhc3NlcnRpb24gaW5cbiAgICAvLyBmYXZvciBvZiB0aGUgbmV4dC5cbiAgICBpZiAoIW5lZ2F0ZSB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBoYXNQcm9wZXJ0eVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSAnICsgZGVzY3JpcHRvciArIF8uaW5zcGVjdChuYW1lKSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBoYXNQcm9wZXJ0eSAmJiAoaXNEZWVwID8gXy5lcWwodmFsLCB2YWx1ZSkgOiB2YWwgPT09IHZhbHVlKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9mICN7ZXhwfSwgYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9mICN7YWN0fSdcbiAgICAgICAgLCB2YWxcbiAgICAgICAgLCB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCB2YWx1ZSk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdwcm9wZXJ0eScsIGFzc2VydFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBhc3NlcnRPd25Qcm9wZXJ0eSAobmFtZSwgdmFsdWUsIG1zZykge1xuICAgIGZsYWcodGhpcywgJ293bicsIHRydWUpO1xuICAgIGFzc2VydFByb3BlcnR5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdvd25Qcm9wZXJ0eScsIGFzc2VydE93blByb3BlcnR5KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaGF2ZU93blByb3BlcnR5JywgYXNzZXJ0T3duUHJvcGVydHkpO1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blByb3BlcnR5RGVzY3JpcHRvcihuYW1lWywgZGVzY3JpcHRvclssIG1zZ11dKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBoYXMgaXRzIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlIGdpdmVuIGtleVxuICAgKiBgbmFtZWAuIEVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkIGluIHRoZVxuICAgKiBzZWFyY2guXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScpO1xuICAgKlxuICAgKiBXaGVuIGBkZXNjcmlwdG9yYCBpcyBwcm92aWRlZCwgYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIGFsc28gYXNzZXJ0cyB0aGF0XG4gICAqIHRoZSBwcm9wZXJ0eSdzIGRlc2NyaXB0b3IgaXMgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgZGVzY3JpcHRvcmAuIFNlZVxuICAgKiB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAxLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYicpO1xuICAgKiBcbiAgICogSG93ZXZlciwgaXQncyBkYW5nZXJvdXMgdG8gbmVnYXRlIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCB3aGVuIHByb3ZpZGluZ1xuICAgKiBhIGBkZXNjcmlwdG9yYC4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnlcbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBlaXRoZXIgZG9lc24ndCBoYXZlIGEgcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoXG4gICAqIHRoZSBnaXZlbiBrZXkgYG5hbWVgLCBvciB0aGF0IGl0IGRvZXMgaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aCB0aGVcbiAgICogZ2l2ZW4ga2V5IGBuYW1lYCBidXQgaXRzIG5vdCBkZWVwbHkgZXF1YWwgdG8gdGhlIGdpdmVuIGBkZXNjcmlwdG9yYC4gSXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhblxuICAgKiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpc24ndCBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoIHRoZSBnaXZlblxuICAgKiBrZXkgYG5hbWVgLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8ubm90LmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMSxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aCB0aGUgZ2l2ZW5cbiAgICoga2V5IGBuYW1lYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSBwcm9wZXJ0eSBoYXMgaXRzIGV4cGVjdGVkXG4gICAqIGRlc2NyaXB0b3IsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueVxuICAgKiB1bmV4cGVjdGVkIGRlc2NyaXB0b3JzLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMyxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAxLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3dcbiAgICogaW4gdGhlIGNoYWluIHRvIGJlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBmcm9tIHRoZSBvcmlnaW5hbFxuICAgKiB0YXJnZXQgb2JqZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnKVxuICAgKiAgICAgICAudGhhdC5oYXMucHJvcGVydHkoJ2VudW1lcmFibGUnLCB0cnVlKTtcbiAgICpcbiAgICogYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYVxuICAgKiBjdXN0b20gZXJyb3IgbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc29cbiAgICogYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC4gV2hlbiBub3QgcHJvdmlkaW5nXG4gICAqIGBkZXNjcmlwdG9yYCwgb25seSB1c2UgdGhlIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMixcbiAgICogICAgIH0sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAyLFxuICAgKiAgICAgfSk7XG4gICAqIFxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KVxuICAgKiAgICAgICAudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InLCB1bmRlZmluZWQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogVGhlIGFib3ZlIGFzc2VydGlvbiBpc24ndCB0aGUgc2FtZSB0aGluZyBhcyBub3QgcHJvdmlkaW5nIGBkZXNjcmlwdG9yYC5cbiAgICogSW5zdGVhZCwgaXQncyBhc3NlcnRpbmcgdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCBoYXMgYSBgYmAgcHJvcGVydHlcbiAgICogZGVzY3JpcHRvciB0aGF0J3MgZGVlcGx5IGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5oYXZlT3duUHJvcGVydHlEZXNjcmlwdG9yYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAuXG4gICAqXG4gICAqIEBuYW1lIG93blByb3BlcnR5RGVzY3JpcHRvclxuICAgKiBAYWxpYXMgaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZGVzY3JpcHRvciBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKG5hbWUsIGRlc2NyaXB0b3IsIG1zZykge1xuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1zZyA9IGRlc2NyaXB0b3I7XG4gICAgICBkZXNjcmlwdG9yID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgIHZhciBhY3R1YWxEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3Qob2JqKSwgbmFtZSk7XG4gICAgaWYgKGFjdHVhbERlc2NyaXB0b3IgJiYgZGVzY3JpcHRvcikge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgXy5lcWwoZGVzY3JpcHRvciwgYWN0dWFsRGVzY3JpcHRvcilcbiAgICAgICAgLCAnZXhwZWN0ZWQgdGhlIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvbiAje3RoaXN9IHRvIG1hdGNoICcgKyBfLmluc3BlY3QoZGVzY3JpcHRvcikgKyAnLCBnb3QgJyArIF8uaW5zcGVjdChhY3R1YWxEZXNjcmlwdG9yKVxuICAgICAgICAsICdleHBlY3RlZCB0aGUgb3duIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yICcgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9uICN7dGhpc30gdG8gbm90IG1hdGNoICcgKyBfLmluc3BlY3QoZGVzY3JpcHRvcilcbiAgICAgICAgLCBkZXNjcmlwdG9yXG4gICAgICAgICwgYWN0dWFsRGVzY3JpcHRvclxuICAgICAgICAsIHRydWVcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGFjdHVhbERlc2NyaXB0b3JcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGFuIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYW4gb3duIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yICcgKyBfLmluc3BlY3QobmFtZSlcbiAgICAgICk7XG4gICAgfVxuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIGFjdHVhbERlc2NyaXB0b3IpO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnb3duUHJvcGVydHlEZXNjcmlwdG9yJywgYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvcicsIGFzc2VydE93blByb3BlcnR5RGVzY3JpcHRvcik7XG5cbiAgLyoqXG4gICAqICMjIyAubGVuZ3RoT2YoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlclxuICAgKiBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpO1xuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmxlbmd0aE9mYC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUsIHJhdGhlciB0aGFuIG5vdCBlcXVhbCB0byBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmhhdmUubGVuZ3RoT2YoNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmxlbmd0aE9mYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLmxlbmd0aE9mKDIpO1xuICAgKlxuICAgKiBgLmxlbmd0aE9mYCBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgbGFuZ3VhZ2UgY2hhaW4sIGNhdXNpbmcgYWxsIGAuYWJvdmVgLFxuICAgKiBgLmJlbG93YCwgYC5sZWFzdGAsIGAubW9zdGAsIGFuZCBgLndpdGhpbmAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGVcbiAgICogY2hhaW4gdG8gdXNlIHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBhcyB0aGUgdGFyZ2V0LiBIb3dldmVyLCBpdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGVxdWFsIHRvIGl0c1xuICAgKiBleHBlY3RlZCBsZW5ndGgsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0cyBgbGVuZ3RoYCBwcm9wZXJ0eSBmYWxsc1xuICAgKiB3aXRoaW4gc29tZSByYW5nZSBvZiB2YWx1ZXMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYmVsb3coNCk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmF0LmxlYXN0KDMpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5tb3N0KDMpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi53aXRoaW4oMiw0KTtcbiAgICpcbiAgICogRHVlIHRvIGEgY29tcGF0aWJpbGl0eSBpc3N1ZSwgdGhlIGFsaWFzIGAubGVuZ3RoYCBjYW4ndCBiZSBjaGFpbmVkIGRpcmVjdGx5XG4gICAqIG9mZiBvZiBhbiB1bmludm9rZWQgbWV0aG9kIHN1Y2ggYXMgYC5hYC4gVGhlcmVmb3JlLCBgLmxlbmd0aGAgY2FuJ3QgYmUgdXNlZFxuICAgKiBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmxlbmd0aE9mYCBpbiBldmVyeSBzaXR1YXRpb24uIEl0J3MgcmVjb21tZW5kZWQgdG9cbiAgICogYWx3YXlzIHVzZSBgLmxlbmd0aE9mYCBpbnN0ZWFkIG9mIGAubGVuZ3RoYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUuYS5sZW5ndGgoMyk7IC8vIGluY29tcGF0aWJsZTsgdGhyb3dzIGVycm9yXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmEubGVuZ3RoT2YoMyk7ICAvLyBwYXNzZXMgYXMgZXhwZWN0ZWRcbiAgICpcbiAgICogQG5hbWUgbGVuZ3RoT2ZcbiAgICogQGFsaWFzIGxlbmd0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVuZ3RoQ2hhaW4gKCkge1xuICAgIGZsYWcodGhpcywgJ2RvTGVuZ3RoJywgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRMZW5ndGggKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGxlbiA9PSBuXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSBsZW5ndGggb2YgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCBvZiAje2FjdH0nXG4gICAgICAsIG5cbiAgICAgICwgbGVuXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2xlbmd0aCcsIGFzc2VydExlbmd0aCwgYXNzZXJ0TGVuZ3RoQ2hhaW4pO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdsZW5ndGhPZicsIGFzc2VydExlbmd0aCwgYXNzZXJ0TGVuZ3RoQ2hhaW4pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm1hdGNoKHJlWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIGByZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm1hdGNoKC9eZm9vLyk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAubWF0Y2hgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5ub3QubWF0Y2goL3RhY28vKTtcbiAgICpcbiAgICogYC5tYXRjaGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5tYXRjaCgvdGFjby8sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLm1hdGNoKC90YWNvLyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLm1hdGNoZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAubWF0Y2hgLlxuICAgKlxuICAgKiBAbmFtZSBtYXRjaFxuICAgKiBAYWxpYXMgbWF0Y2hlc1xuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBmdW5jdGlvbiBhc3NlcnRNYXRjaChyZSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICByZS5leGVjKG9iailcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbWF0Y2ggJyArIHJlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBtYXRjaCAnICsgcmVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbWF0Y2gnLCBhc3NlcnRNYXRjaCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21hdGNoZXMnLCBhc3NlcnRNYXRjaCk7XG5cbiAgLyoqXG4gICAqICMjIyAuc3RyaW5nKHN0clssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IHN0cmluZyBjb250YWlucyB0aGUgZ2l2ZW4gc3Vic3RyaW5nIGBzdHJgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5oYXZlLnN0cmluZygnYmFyJyk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuc3RyaW5nYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubm90LmhhdmUuc3RyaW5nKCd0YWNvJyk7XG4gICAqXG4gICAqIGAuc3RyaW5nYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLmhhdmUuc3RyaW5nKC90YWNvLywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KCdmb29iYXInLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5zdHJpbmcoL3RhY28vKTtcbiAgICpcbiAgICogQG5hbWUgc3RyaW5nXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3N0cmluZycsIGZ1bmN0aW9uIChzdHIsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ3N0cmluZycpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIH5vYmouaW5kZXhPZihzdHIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGNvbnRhaW4gJyArIF8uaW5zcGVjdChzdHIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBjb250YWluICcgKyBfLmluc3BlY3Qoc3RyKVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmtleXMoa2V5MVssIGtleTJbLCAuLi5dXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgb2JqZWN0LCBhcnJheSwgbWFwLCBvciBzZXQgaGFzIHRoZSBnaXZlbiBrZXlzLiBPbmx5XG4gICAqIHRoZSB0YXJnZXQncyBvd24gaW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkIGluIHRoZSBzZWFyY2guIFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0IG9yIGFycmF5LCBrZXlzIGNhbiBiZSBwcm92aWRlZCBhcyBvbmUgb3IgbW9yZVxuICAgKiBzdHJpbmcgYXJndW1lbnRzLCBhIHNpbmdsZSBhcnJheSBhcmd1bWVudCwgb3IgYSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LiBJblxuICAgKiB0aGUgbGF0dGVyIGNhc2UsIG9ubHkgdGhlIGtleXMgaW4gdGhlIGdpdmVuIG9iamVjdCBtYXR0ZXI7IHRoZSB2YWx1ZXMgYXJlXG4gICAqIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdChbJ3gnLCAneSddKS50by5oYXZlLmFsbC5rZXlzKDAsIDEpO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cyhbJ2EnLCAnYiddKTtcbiAgICogICAgIGV4cGVjdChbJ3gnLCAneSddKS50by5oYXZlLmFsbC5rZXlzKFswLCAxXSk7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKHthOiA0LCBiOiA1fSk7IC8vIGlnbm9yZSA0IGFuZCA1XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cyh7MDogNCwgMTogNX0pOyAvLyBpZ25vcmUgNCBhbmQgNVxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBtYXAgb3Igc2V0LCBlYWNoIGtleSBtdXN0IGJlIHByb3ZpZGVkIGFzIGEgc2VwYXJhdGVcbiAgICogYXJndW1lbnQuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IE1hcChbWydhJywgMV0sIFsnYicsIDJdXSkpLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoWydhJywgJ2InXSkpLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBCZWNhdXNlIGAua2V5c2AgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5rZXlzYC4gU2VlIHRoZSBgLmFgIGRvY1xuICAgKiBmb3IgaW5mbyBvbiB0ZXN0aW5nIGEgdGFyZ2V0J3MgdHlwZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmJlLmFuKCdvYmplY3QnKS50aGF0Lmhhcy5hbGwua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBrZXlzIG9mIG1hcHMgYW5kXG4gICAqIHNldHMuIEFkZCBgLmRlZXBgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZVxuICAgKiB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IHNldCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBrZXkgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFt7YTogMX1dKSkudG8uaGF2ZS5hbGwuZGVlcC5rZXlzKFt7YTogMX1dKTtcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFt7YTogMX1dKSkudG8ubm90LmhhdmUuYWxsLmtleXMoW3thOiAxfV0pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgdGFyZ2V0IG11c3QgaGF2ZSBhbGwgb2YgdGhlIGdpdmVuIGtleXMgYW5kIG5vIG1vcmUuIEFkZFxuICAgKiBgLmFueWAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gb25seSByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0XG4gICAqIG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy4gQWxzbywgYWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGVcbiAgICogYC5rZXlzYC4gSXQncyBvZnRlbiBiZXN0IHRvIGFkZCBgLmFueWAgd2hlbiBuZWdhdGluZyBgLmtleXNgLCBhbmQgdG8gdXNlXG4gICAqIGAuYWxsYCB3aGVuIGFzc2VydGluZyBgLmtleXNgIHdpdGhvdXQgbmVnYXRpb24uXG4gICAqXG4gICAqIFdoZW4gbmVnYXRpbmcgYC5rZXlzYCwgYC5hbnlgIGlzIHByZWZlcnJlZCBiZWNhdXNlIGAubm90LmFueS5rZXlzYCBhc3NlcnRzXG4gICAqIGV4YWN0bHkgd2hhdCdzIGV4cGVjdGVkIG9mIHRoZSBvdXRwdXQsIHdoZXJlYXMgYC5ub3QuYWxsLmtleXNgIGNyZWF0ZXNcbiAgICogdW5jZXJ0YWluIGV4cGVjdGF0aW9ucy5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkOyBhc3NlcnRzIHRoYXQgdGFyZ2V0IGRvZXNuJ3QgaGF2ZSBhbnkgb2YgdGhlIGdpdmVuIGtleXNcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLm5vdC5oYXZlLmFueS5rZXlzKCdjJywgJ2QnKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBkb2Vzbid0IGhhdmUgYWxsIG9mIHRoZSBnaXZlblxuICAgKiAgICAgLy8ga2V5cyBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBzb21lIG9mIHRoZW1cbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdjJywgJ2QnKTtcbiAgICpcbiAgICogV2hlbiBhc3NlcnRpbmcgYC5rZXlzYCB3aXRob3V0IG5lZ2F0aW9uLCBgLmFsbGAgaXMgcHJlZmVycmVkIGJlY2F1c2VcbiAgICogYC5hbGwua2V5c2AgYXNzZXJ0cyBleGFjdGx5IHdoYXQncyBleHBlY3RlZCBvZiB0aGUgb3V0cHV0LCB3aGVyZWFzXG4gICAqIGAuYW55LmtleXNgIGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucy5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkOyBhc3NlcnRzIHRoYXQgdGFyZ2V0IGhhcyBhbGwgdGhlIGdpdmVuIGtleXNcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkOyBhc3NlcnRzIHRoYXQgdGFyZ2V0IGhhcyBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuXG4gICAqICAgICAvLyBrZXlzIGJ1dCBtYXkgb3IgbWF5IG5vdCBoYXZlIG1vcmUgb2YgdGhlbVxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIE5vdGUgdGhhdCBgLmFsbGAgaXMgdXNlZCBieSBkZWZhdWx0IHdoZW4gbmVpdGhlciBgLmFsbGAgbm9yIGAuYW55YCBhcHBlYXJcbiAgICogZWFybGllciBpbiB0aGUgY2hhaW4uIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhZGQgYC5hbGxgIGFueXdheSBiZWNhdXNlXG4gICAqIGl0IGltcHJvdmVzIHJlYWRhYmlsaXR5LlxuICAgKlxuICAgKiAgICAgLy8gQm90aCBhc3NlcnRpb25zIGFyZSBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5rZXlzKCdhJywgJ2InKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmluY2x1ZGVgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdCB0aGUgdGFyZ2V0J3Mga2V5cyBiZSBhXG4gICAqIHN1cGVyc2V0IG9mIHRoZSBleHBlY3RlZCBrZXlzLCByYXRoZXIgdGhhbiBpZGVudGljYWwgc2V0cy5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QncyBrZXlzIGFyZSBhIHN1cGVyc2V0IG9mIFsnYScsICdiJ10gYnV0IG5vdCBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLmluY2x1ZGUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyLCBjOiAzfSkudG8ubm90LmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBIb3dldmVyLCBpZiBgLmFueWAgYW5kIGAuaW5jbHVkZWAgYXJlIGNvbWJpbmVkLCBvbmx5IHRoZSBgLmFueWAgdGFrZXNcbiAgICogZWZmZWN0LiBUaGUgYC5pbmNsdWRlYCBpcyBpZ25vcmVkIGluIHRoaXMgY2FzZS5cbiAgICpcbiAgICogICAgIC8vIEJvdGggYXNzZXJ0aW9ucyBhcmUgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUua2V5KCdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmtleWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5rZXlzYC5cbiAgICpcbiAgICogQG5hbWUga2V5c1xuICAgKiBAYWxpYXMga2V5XG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfEFycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRLZXlzIChrZXlzKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKVxuICAgICAgLCBrZXlzVHlwZSA9IF8udHlwZShrZXlzKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBzdHJcbiAgICAgICwgZGVlcFN0ciA9ICcnXG4gICAgICAsIG9rID0gdHJ1ZVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpO1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuICAgIHZhciBtaXhlZEFyZ3NNc2cgPSBmbGFnTXNnICsgJ3doZW4gdGVzdGluZyBrZXlzIGFnYWluc3QgYW4gb2JqZWN0IG9yIGFuIGFycmF5IHlvdSBtdXN0IGdpdmUgYSBzaW5nbGUgQXJyYXl8T2JqZWN0fFN0cmluZyBhcmd1bWVudCBvciBtdWx0aXBsZSBTdHJpbmcgYXJndW1lbnRzJztcblxuICAgIGlmIChvYmpUeXBlID09PSAnTWFwJyB8fCBvYmpUeXBlID09PSAnU2V0Jykge1xuICAgICAgZGVlcFN0ciA9IGlzRGVlcCA/ICdkZWVwbHkgJyA6ICcnO1xuICAgICAgYWN0dWFsID0gW107XG5cbiAgICAgIC8vIE1hcCBhbmQgU2V0ICcua2V5cycgYXJlbid0IHN1cHBvcnRlZCBpbiBJRSAxMS4gVGhlcmVmb3JlLCB1c2UgLmZvckVhY2guXG4gICAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsLCBrZXkpIHsgYWN0dWFsLnB1c2goa2V5KSB9KTtcblxuICAgICAgaWYgKGtleXNUeXBlICE9PSAnQXJyYXknKSB7XG4gICAgICAgIGtleXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdHVhbCA9IF8uZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqKTtcblxuICAgICAgc3dpdGNoIChrZXlzVHlwZSkge1xuICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobWl4ZWRBcmdzTXNnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtaXhlZEFyZ3NNc2csIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhrZXlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBrZXlzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBzdHJpbmdpZnkgbm9uLVN5bWJvbHMgYmVjYXVzZSBTeW1ib2xzIHdvdWxkIGJlY29tZSBcIlN5bWJvbCgpXCJcbiAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJyA/IHZhbCA6IFN0cmluZyh2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGZsYWdNc2cgKyAna2V5cyByZXF1aXJlZCcsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoXG4gICAgICAsIGFueSA9IGZsYWcodGhpcywgJ2FueScpXG4gICAgICAsIGFsbCA9IGZsYWcodGhpcywgJ2FsbCcpXG4gICAgICAsIGV4cGVjdGVkID0ga2V5c1xuICAgICAgLCBhY3R1YWw7XG5cbiAgICBpZiAoIWFueSAmJiAhYWxsKSB7XG4gICAgICBhbGwgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEhhcyBhbnlcbiAgICBpZiAoYW55KSB7XG4gICAgICBvayA9IGV4cGVjdGVkLnNvbWUoZnVuY3Rpb24oZXhwZWN0ZWRLZXkpIHtcbiAgICAgICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGFjdHVhbEtleSkge1xuICAgICAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBfLmVxbChleHBlY3RlZEtleSwgYWN0dWFsS2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkS2V5ID09PSBhY3R1YWxLZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhhcyBhbGxcbiAgICBpZiAoYWxsKSB7XG4gICAgICBvayA9IGV4cGVjdGVkLmV2ZXJ5KGZ1bmN0aW9uKGV4cGVjdGVkS2V5KSB7XG4gICAgICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbihhY3R1YWxLZXkpIHtcbiAgICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5lcWwoZXhwZWN0ZWRLZXksIGFjdHVhbEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBleHBlY3RlZEtleSA9PT0gYWN0dWFsS2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFmbGFnKHRoaXMsICdjb250YWlucycpKSB7XG4gICAgICAgIG9rID0gb2sgJiYga2V5cy5sZW5ndGggPT0gYWN0dWFsLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBLZXkgc3RyaW5nXG4gICAgaWYgKGxlbiA+IDEpIHtcbiAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIF8uaW5zcGVjdChrZXkpO1xuICAgICAgfSk7XG4gICAgICB2YXIgbGFzdCA9IGtleXMucG9wKCk7XG4gICAgICBpZiAoYWxsKSB7XG4gICAgICAgIHN0ciA9IGtleXMuam9pbignLCAnKSArICcsIGFuZCAnICsgbGFzdDtcbiAgICAgIH1cbiAgICAgIGlmIChhbnkpIHtcbiAgICAgICAgc3RyID0ga2V5cy5qb2luKCcsICcpICsgJywgb3IgJyArIGxhc3Q7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IF8uaW5zcGVjdChrZXlzWzBdKTtcbiAgICB9XG5cbiAgICAvLyBGb3JtXG4gICAgc3RyID0gKGxlbiA+IDEgPyAna2V5cyAnIDogJ2tleSAnKSArIHN0cjtcblxuICAgIC8vIEhhdmUgLyBpbmNsdWRlXG4gICAgc3RyID0gKGZsYWcodGhpcywgJ2NvbnRhaW5zJykgPyAnY29udGFpbiAnIDogJ2hhdmUgJykgKyBzdHI7XG5cbiAgICAvLyBBc3NlcnRpb25cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgb2tcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gJyArIGRlZXBTdHIgKyBzdHJcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90ICcgKyBkZWVwU3RyICsgc3RyXG4gICAgICAsIGV4cGVjdGVkLnNsaWNlKDApLnNvcnQoXy5jb21wYXJlQnlJbnNwZWN0KVxuICAgICAgLCBhY3R1YWwuc29ydChfLmNvbXBhcmVCeUluc3BlY3QpXG4gICAgICAsIHRydWVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgna2V5cycsIGFzc2VydEtleXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdrZXknLCBhc3NlcnRLZXlzKTtcblxuICAvKipcbiAgICogIyMjIC50aHJvdyhbZXJyb3JMaWtlXSwgW2Vyck1zZ01hdGNoZXJdLCBbbXNnXSlcbiAgICpcbiAgICogV2hlbiBubyBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLnRocm93YCBpbnZva2VzIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kXG4gICAqIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24uXG4gICAqIFxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coKTtcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGFuZCBpdCdzIGFuIGVycm9yIGNvbnN0cnVjdG9yLCBgLnRocm93YFxuICAgKiBpbnZva2VzIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCdzIGFuXG4gICAqIGluc3RhbmNlIG9mIHRoYXQgZXJyb3IgY29uc3RydWN0b3IuXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYW4gZXJyb3IgaW5zdGFuY2UsIGAudGhyb3dgIGludm9rZXNcbiAgICogdGhlIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB0aGF0J3Mgc3RyaWN0bHlcbiAgICogKGA9PT1gKSBlcXVhbCB0byB0aGF0IGVycm9yIGluc3RhbmNlLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KGVycik7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhIHN0cmluZywgYC50aHJvd2AgaW52b2tlcyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHdpdGggYSBtZXNzYWdlIHRoYXRcbiAgICogY29udGFpbnMgdGhhdCBzdHJpbmcuXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdygnc2FsbW9uJyk7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHdpdGggYVxuICAgKiBtZXNzYWdlIHRoYXQgbWF0Y2hlcyB0aGF0IHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICpcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KC9zYWxtb24vKTtcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYW5kIHRoZSBmaXJzdCBpcyBhbiBlcnJvciBpbnN0YW5jZSBvclxuICAgKiBjb25zdHJ1Y3RvciwgYW5kIHRoZSBzZWNvbmQgaXMgYSBzdHJpbmcgb3IgcmVndWxhciBleHByZXNzaW9uLCBgLnRocm93YFxuICAgKiBpbnZva2VzIHRoZSBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB0aGF0IGZ1bGZpbGxzIGJvdGhcbiAgICogY29uZGl0aW9ucyBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqICAgICB2YXIgZXJyID0gbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7XG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yLCAnc2FsbW9uJyk7XG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgL3NhbG1vbi8pO1xuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhlcnIsICdzYWxtb24nKTtcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coZXJyLCAvc2FsbW9uLyk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAudGhyb3dgLlxuICAgKiAgICAgXG4gICAqICAgICB2YXIgZ29vZEZuID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coKTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLnRocm93YCB3aGVuIHByb3ZpZGluZyBhbnkgYXJndW1lbnRzLlxuICAgKiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGVpdGhlciBkb2Vzbid0IHRocm93IGFuIGVycm9yLCBvciB0aGF0IGl0IHRocm93cyBhbiBlcnJvciBidXQgb2YgYVxuICAgKiBkaWZmZXJlbnQgdHlwZSB0aGFuIHRoZSBnaXZlbiB0eXBlLCBvciB0aGF0IGl0IHRocm93cyBhbiBlcnJvciBvZiB0aGUgZ2l2ZW5cbiAgICogdHlwZSBidXQgd2l0aCBhIG1lc3NhZ2UgdGhhdCBkb2Vzbid0IGluY2x1ZGUgdGhlIGdpdmVuIHN0cmluZy4gSXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhblxuICAgKiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpc24ndCBleHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgZ29vZEZuID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChnb29kRm4pLnRvLm5vdC50aHJvdyhSZWZlcmVuY2VFcnJvciwgJ3gnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiB0aGF0IHRoZSBlcnJvciBpcyBvZiBpdHMgZXhwZWN0ZWQgdHlwZSwgYW5kIGhhcyBhIG1lc3NhZ2UgdGhhdCBpbmNsdWRlcyBhblxuICAgKiBleHBlY3RlZCBzdHJpbmcsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueVxuICAgKiB1bmV4cGVjdGVkIHR5cGVzLCBhbmQgZG9lc24ndCBoYXZlIGEgbWVzc2FnZSB0aGF0IGluY2x1ZGVzIHNvbWUgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yLCAnc2FsbW9uJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLm5vdC50aHJvdyhSZWZlcmVuY2VFcnJvciwgJ3gnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAudGhyb3dgIGNoYW5nZXMgdGhlIHRhcmdldCBvZiBhbnkgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG9cbiAgICogYmUgdGhlIGVycm9yIG9iamVjdCB0aGF0J3MgdGhyb3duLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgZXJyLmNvZGUgPSA0MjtcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IpLndpdGgucHJvcGVydHkoJ2NvZGUnLCA0Mik7XG4gICAqXG4gICAqIGAudGhyb3dgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC4gV2hlbiBub3QgcHJvdmlkaW5nIHR3byBhcmd1bWVudHMsIGFsd2F5cyB1c2VcbiAgICogdGhlIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8udGhyb3coVHlwZUVycm9yLCAneCcsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChnb29kRm4sICdub29vIHdoeSBmYWlsPz8nKS50by50aHJvdygpO1xuICAgKlxuICAgKiBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRVM1LCBgLnRocm93YCBtYXkgbm90IGFsd2F5cyB3b3JrIGFzIGV4cGVjdGVkIHdoZW5cbiAgICogdXNpbmcgYSB0cmFuc3BpbGVyIHN1Y2ggYXMgQmFiZWwgb3IgVHlwZVNjcmlwdC4gSW4gcGFydGljdWxhciwgaXQgbWF5XG4gICAqIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzIHdoZW4gc3ViY2xhc3NpbmcgdGhlIGJ1aWx0LWluIGBFcnJvcmAgb2JqZWN0IGFuZFxuICAgKiB0aGVuIHBhc3NpbmcgdGhlIHN1YmNsYXNzZWQgY29uc3RydWN0b3IgdG8gYC50aHJvd2AuIFNlZSB5b3VyIHRyYW5zcGlsZXInc1xuICAgKiBkb2NzIGZvciBkZXRhaWxzOlxuICAgKlxuICAgKiAtIChbQmFiZWxdKGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL3VzYWdlL2NhdmVhdHMvI2NsYXNzZXMpKVxuICAgKiAtIChbVHlwZVNjcmlwdF0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvQnJlYWtpbmctQ2hhbmdlcyNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmspKVxuICAgKlxuICAgKiBCZXdhcmUgb2Ygc29tZSBjb21tb24gbWlzdGFrZXMgd2hlbiB1c2luZyB0aGUgYHRocm93YCBhc3NlcnRpb24uIE9uZSBjb21tb25cbiAgICogbWlzdGFrZSBpcyB0byBhY2NpZGVudGFsbHkgaW52b2tlIHRoZSBmdW5jdGlvbiB5b3Vyc2VsZiBpbnN0ZWFkIG9mIGxldHRpbmdcbiAgICogdGhlIGB0aHJvd2AgYXNzZXJ0aW9uIGludm9rZSB0aGUgZnVuY3Rpb24gZm9yIHlvdS4gRm9yIGV4YW1wbGUsIHdoZW5cbiAgICogdGVzdGluZyBpZiBhIGZ1bmN0aW9uIG5hbWVkIGBmbmAgdGhyb3dzLCBwcm92aWRlIGBmbmAgaW5zdGVhZCBvZiBgZm4oKWAgYXNcbiAgICogdGhlIHRhcmdldCBmb3IgdGhlIGFzc2VydGlvbi5cbiAgICpcbiAgICogICAgIGV4cGVjdChmbikudG8udGhyb3coKTsgICAgIC8vIEdvb2QhIFRlc3RzIGBmbmAgYXMgZGVzaXJlZFxuICAgKiAgICAgZXhwZWN0KGZuKCkpLnRvLnRocm93KCk7ICAgLy8gQmFkISBUZXN0cyByZXN1bHQgb2YgYGZuKClgLCBub3QgYGZuYFxuICAgKlxuICAgKiBJZiB5b3UgbmVlZCB0byBhc3NlcnQgdGhhdCB5b3VyIGZ1bmN0aW9uIGBmbmAgdGhyb3dzIHdoZW4gcGFzc2VkIGNlcnRhaW5cbiAgICogYXJndW1lbnRzLCB0aGVuIHdyYXAgYSBjYWxsIHRvIGBmbmAgaW5zaWRlIG9mIGFub3RoZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqICAgICBleHBlY3QoZnVuY3Rpb24gKCkgeyBmbig0Mik7IH0pLnRvLnRocm93KCk7ICAvLyBGdW5jdGlvbiBleHByZXNzaW9uXG4gICAqICAgICBleHBlY3QoKCkgPT4gZm4oNDIpKS50by50aHJvdygpOyAgICAgICAgICAgICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25cbiAgICpcbiAgICogQW5vdGhlciBjb21tb24gbWlzdGFrZSBpcyB0byBwcm92aWRlIGFuIG9iamVjdCBtZXRob2QgKG9yIGFueSBzdGFuZC1hbG9uZVxuICAgKiBmdW5jdGlvbiB0aGF0IHJlbGllcyBvbiBgdGhpc2ApIGFzIHRoZSB0YXJnZXQgb2YgdGhlIGFzc2VydGlvbi4gRG9pbmcgc28gaXNcbiAgICogcHJvYmxlbWF0aWMgYmVjYXVzZSB0aGUgYHRoaXNgIGNvbnRleHQgd2lsbCBiZSBsb3N0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzXG4gICAqIGludm9rZWQgYnkgYC50aHJvd2A7IHRoZXJlJ3Mgbm8gd2F5IGZvciBpdCB0byBrbm93IHdoYXQgYHRoaXNgIGlzIHN1cHBvc2VkXG4gICAqIHRvIGJlLiBUaGVyZSBhcmUgdHdvIHdheXMgYXJvdW5kIHRoaXMgcHJvYmxlbS4gT25lIHNvbHV0aW9uIGlzIHRvIHdyYXAgdGhlXG4gICAqIG1ldGhvZCBvciBmdW5jdGlvbiBjYWxsIGluc2lkZSBvZiBhbm90aGVyIGZ1bmN0aW9uLiBBbm90aGVyIHNvbHV0aW9uIGlzIHRvXG4gICAqIHVzZSBgYmluZGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZnVuY3Rpb24gKCkgeyBjYXQubWVvdygpOyB9KS50by50aHJvdygpOyAgLy8gRnVuY3Rpb24gZXhwcmVzc2lvblxuICAgKiAgICAgZXhwZWN0KCgpID0+IGNhdC5tZW93KCkpLnRvLnRocm93KCk7ICAgICAgICAgICAgIC8vIEVTNiBhcnJvdyBmdW5jdGlvblxuICAgKiAgICAgZXhwZWN0KGNhdC5tZW93LmJpbmQoY2F0KSkudG8udGhyb3coKTsgICAgICAgICAgIC8vIEJpbmRcbiAgICpcbiAgICogRmluYWxseSwgaXQncyB3b3J0aCBtZW50aW9uaW5nIHRoYXQgaXQncyBhIGJlc3QgcHJhY3RpY2UgaW4gSmF2YVNjcmlwdCB0b1xuICAgKiBvbmx5IHRocm93IGBFcnJvcmAgYW5kIGRlcml2YXRpdmVzIG9mIGBFcnJvcmAgc3VjaCBhcyBgUmVmZXJlbmNlRXJyb3JgLFxuICAgKiBgVHlwZUVycm9yYCwgYW5kIHVzZXItZGVmaW5lZCBvYmplY3RzIHRoYXQgZXh0ZW5kIGBFcnJvcmAuIE5vIG90aGVyIHR5cGUgb2ZcbiAgICogdmFsdWUgd2lsbCBnZW5lcmF0ZSBhIHN0YWNrIHRyYWNlIHdoZW4gaW5pdGlhbGl6ZWQuIFdpdGggdGhhdCBzYWlkLCB0aGVcbiAgICogYHRocm93YCBhc3NlcnRpb24gZG9lcyB0ZWNobmljYWxseSBzdXBwb3J0IGFueSB0eXBlIG9mIHZhbHVlIGJlaW5nIHRocm93bixcbiAgICogbm90IGp1c3QgYEVycm9yYCBhbmQgaXRzIGRlcml2YXRpdmVzLlxuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLnRocm93c2AgYW5kIGAuVGhyb3dgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoXG4gICAqIGAudGhyb3dgLlxuICAgKlxuICAgKiBAbmFtZSB0aHJvd1xuICAgKiBAYWxpYXMgdGhyb3dzXG4gICAqIEBhbGlhcyBUaHJvd1xuICAgKiBAcGFyYW0ge0Vycm9yfEVycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGVyck1zZ01hdGNoZXIgZXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgKiBAcmV0dXJucyBlcnJvciBmb3IgY2hhaW5pbmcgKG51bGwgaWYgbm8gZXJyb3IpXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydFRocm93cyAoZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG5lZ2F0ZSA9IGZsYWcodGhpcywgJ25lZ2F0ZScpIHx8IGZhbHNlO1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIFJlZ0V4cCB8fCB0eXBlb2YgZXJyb3JMaWtlID09PSAnc3RyaW5nJykge1xuICAgICAgZXJyTXNnTWF0Y2hlciA9IGVycm9yTGlrZTtcbiAgICAgIGVycm9yTGlrZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNhdWdodEVycjtcbiAgICB0cnkge1xuICAgICAgb2JqKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjYXVnaHRFcnIgPSBlcnI7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSB0aGUgbmVnYXRlIGZsYWcgZW5hYmxlZCBhbmQgYXQgbGVhc3Qgb25lIHZhbGlkIGFyZ3VtZW50IGl0IG1lYW5zIHdlIGRvIGV4cGVjdCBhbiBlcnJvclxuICAgIC8vIGJ1dCB3ZSB3YW50IGl0IHRvIG1hdGNoIGEgZ2l2ZW4gc2V0IG9mIGNyaXRlcmlhXG4gICAgdmFyIGV2ZXJ5QXJnSXNVbmRlZmluZWQgPSBlcnJvckxpa2UgPT09IHVuZGVmaW5lZCAmJiBlcnJNc2dNYXRjaGVyID09PSB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB3ZSd2ZSBnb3QgdGhlIG5lZ2F0ZSBmbGFnIGVuYWJsZWQgYW5kIGJvdGggYXJncywgd2Ugc2hvdWxkIG9ubHkgZmFpbCBpZiBib3RoIGFyZW4ndCBjb21wYXRpYmxlXG4gICAgLy8gU2VlIElzc3VlICM1NTEgYW5kIFBSICM2ODNAR2l0SHViXG4gICAgdmFyIGV2ZXJ5QXJnSXNEZWZpbmVkID0gQm9vbGVhbihlcnJvckxpa2UgJiYgZXJyTXNnTWF0Y2hlcik7XG4gICAgdmFyIGVycm9yTGlrZUZhaWwgPSBmYWxzZTtcbiAgICB2YXIgZXJyTXNnTWF0Y2hlckZhaWwgPSBmYWxzZTtcblxuICAgIC8vIENoZWNraW5nIGlmIGVycm9yIHdhcyB0aHJvd25cbiAgICBpZiAoZXZlcnlBcmdJc1VuZGVmaW5lZCB8fCAhZXZlcnlBcmdJc1VuZGVmaW5lZCAmJiAhbmVnYXRlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRoaXMgdG8gZGlzcGxheSByZXN1bHRzIGNvcnJlY3RseSBhY2NvcmRpbmcgdG8gdGhlaXIgdHlwZXNcbiAgICAgIHZhciBlcnJvckxpa2VTdHJpbmcgPSAnYW4gZXJyb3InO1xuICAgICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGVycm9yTGlrZVN0cmluZyA9ICcje2V4cH0nO1xuICAgICAgfSBlbHNlIGlmIChlcnJvckxpa2UpIHtcbiAgICAgICAgZXJyb3JMaWtlU3RyaW5nID0gXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBjYXVnaHRFcnJcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAnICsgZXJyb3JMaWtlU3RyaW5nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93IGFuIGVycm9yIGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgLCBlcnJvckxpa2UgJiYgZXJyb3JMaWtlLnRvU3RyaW5nKClcbiAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgP1xuICAgICAgICAgICAgY2F1Z2h0RXJyLnRvU3RyaW5nKCkgOiAodHlwZW9mIGNhdWdodEVyciA9PT0gJ3N0cmluZycgPyBjYXVnaHRFcnIgOiBjYXVnaHRFcnIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoY2F1Z2h0RXJyKSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChlcnJvckxpa2UgJiYgY2F1Z2h0RXJyKSB7XG4gICAgICAvLyBXZSBzaG91bGQgY29tcGFyZSBpbnN0YW5jZXMgb25seSBpZiBgZXJyb3JMaWtlYCBpcyBhbiBpbnN0YW5jZSBvZiBgRXJyb3JgXG4gICAgICBpZiAoZXJyb3JMaWtlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdmFyIGlzQ29tcGF0aWJsZUluc3RhbmNlID0gXy5jaGVja0Vycm9yLmNvbXBhdGlibGVJbnN0YW5jZShjYXVnaHRFcnIsIGVycm9yTGlrZSk7XG5cbiAgICAgICAgaWYgKGlzQ29tcGF0aWJsZUluc3RhbmNlID09PSBuZWdhdGUpIHtcbiAgICAgICAgICAvLyBUaGVzZSBjaGVja3Mgd2VyZSBjcmVhdGVkIHRvIGVuc3VyZSB3ZSB3b24ndCBmYWlsIHRvbyBzb29uIHdoZW4gd2UndmUgZ290IGJvdGggYXJncyBhbmQgYSBuZWdhdGVcbiAgICAgICAgICAvLyBTZWUgSXNzdWUgIzU1MSBhbmQgUFIgIzY4M0BHaXRIdWJcbiAgICAgICAgICBpZiAoZXZlcnlBcmdJc0RlZmluZWQgJiYgbmVnYXRlKSB7XG4gICAgICAgICAgICBlcnJvckxpa2VGYWlsID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgICAgICAgbmVnYXRlXG4gICAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgI3tleHB9IGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgdGhyb3cgI3tleHB9JyArIChjYXVnaHRFcnIgJiYgIW5lZ2F0ZSA/ICcgYnV0ICN7YWN0fSB3YXMgdGhyb3duJyA6ICcnKVxuICAgICAgICAgICAgICAsIGVycm9yTGlrZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICwgY2F1Z2h0RXJyLnRvU3RyaW5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0NvbXBhdGlibGVDb25zdHJ1Y3RvciA9IF8uY2hlY2tFcnJvci5jb21wYXRpYmxlQ29uc3RydWN0b3IoY2F1Z2h0RXJyLCBlcnJvckxpa2UpO1xuICAgICAgaWYgKGlzQ29tcGF0aWJsZUNvbnN0cnVjdG9yID09PSBuZWdhdGUpIHtcbiAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyb3JMaWtlRmFpbCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAje2V4cH0gYnV0ICN7YWN0fSB3YXMgdGhyb3duJ1xuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgdGhyb3cgI3tleHB9JyArIChjYXVnaHRFcnIgPyAnIGJ1dCAje2FjdH0gd2FzIHRocm93bicgOiAnJylcbiAgICAgICAgICAgICwgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3JMaWtlLnRvU3RyaW5nKCkgOiBlcnJvckxpa2UgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpKVxuICAgICAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgPyBjYXVnaHRFcnIudG9TdHJpbmcoKSA6IGNhdWdodEVyciAmJiBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYXVnaHRFcnIgJiYgZXJyTXNnTWF0Y2hlciAhPT0gdW5kZWZpbmVkICYmIGVyck1zZ01hdGNoZXIgIT09IG51bGwpIHtcbiAgICAgIC8vIEhlcmUgd2UgY2hlY2sgY29tcGF0aWJsZSBtZXNzYWdlc1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gJ2luY2x1ZGluZyc7XG4gICAgICBpZiAoZXJyTXNnTWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICBwbGFjZWhvbGRlciA9ICdtYXRjaGluZydcbiAgICAgIH1cblxuICAgICAgdmFyIGlzQ29tcGF0aWJsZU1lc3NhZ2UgPSBfLmNoZWNrRXJyb3IuY29tcGF0aWJsZU1lc3NhZ2UoY2F1Z2h0RXJyLCBlcnJNc2dNYXRjaGVyKTtcbiAgICAgIGlmIChpc0NvbXBhdGlibGVNZXNzYWdlID09PSBuZWdhdGUpIHtcbiAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyTXNnTWF0Y2hlckZhaWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgbmVnYXRlXG4gICAgICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93IGVycm9yICcgKyBwbGFjZWhvbGRlciArICcgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyBlcnJvciBub3QgJyArIHBsYWNlaG9sZGVyICsgJyAje2V4cH0nXG4gICAgICAgICAgICAsICBlcnJNc2dNYXRjaGVyXG4gICAgICAgICAgICAsICBfLmNoZWNrRXJyb3IuZ2V0TWVzc2FnZShjYXVnaHRFcnIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIGJvdGggYXNzZXJ0aW9ucyBmYWlsZWQgYW5kIGJvdGggc2hvdWxkJ3ZlIG1hdGNoZWQgd2UgdGhyb3cgYW4gZXJyb3JcbiAgICBpZiAoZXJyb3JMaWtlRmFpbCAmJiBlcnJNc2dNYXRjaGVyRmFpbCkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG5lZ2F0ZVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93ICN7ZXhwfSBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyID8gJyBidXQgI3thY3R9IHdhcyB0aHJvd24nIDogJycpXG4gICAgICAgICwgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3JMaWtlLnRvU3RyaW5nKCkgOiBlcnJvckxpa2UgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpKVxuICAgICAgICAsIChjYXVnaHRFcnIgaW5zdGFuY2VvZiBFcnJvciA/IGNhdWdodEVyci50b1N0cmluZygpIDogY2F1Z2h0RXJyICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoY2F1Z2h0RXJyKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgY2F1Z2h0RXJyKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCd0aHJvdycsIGFzc2VydFRocm93cyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Rocm93cycsIGFzc2VydFRocm93cyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ1Rocm93JywgYXNzZXJ0VGhyb3dzKTtcblxuICAvKipcbiAgICogIyMjIC5yZXNwb25kVG8obWV0aG9kWywgbXNnXSlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgbm9uLWZ1bmN0aW9uIG9iamVjdCwgYC5yZXNwb25kVG9gIGFzc2VydHMgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGhhcyBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIGBtZXRob2RgLiBUaGUgbWV0aG9kIGNhbiBiZSBvd24gb3JcbiAgICogaW5oZXJpdGVkLCBhbmQgaXQgY2FuIGJlIGVudW1lcmFibGUgb3Igbm9uLWVudW1lcmFibGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBDYXQoKSkudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIGZ1bmN0aW9uLCBgLnJlc3BvbmRUb2AgYXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQnc1xuICAgKiBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYC4gQWdhaW4sIHRoZVxuICAgKiBtZXRob2QgY2FuIGJlIG93biBvciBpbmhlcml0ZWQsIGFuZCBpdCBjYW4gYmUgZW51bWVyYWJsZSBvciBub24tZW51bWVyYWJsZS5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoQ2F0KS50by5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQWRkIGAuaXRzZWxmYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBmb3JjZSBgLnJlc3BvbmRUb2AgdG8gdHJlYXQgdGhlXG4gICAqIHRhcmdldCBhcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGV2ZW4gaWYgaXQncyBhIGZ1bmN0aW9uLiBUaHVzLCBpdCBhc3NlcnRzXG4gICAqIHRoYXQgdGhlIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYCwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCdzIGBwcm90b3R5cGVgIHByb3BlcnR5IGhhcyBhIG1ldGhvZCB3aXRoIHRoZVxuICAgKiBnaXZlbiBuYW1lIGBtZXRob2RgLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICogICAgIENhdC5oaXNzID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoQ2F0KS5pdHNlbGYudG8ucmVzcG9uZFRvKCdoaXNzJykuYnV0Lm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogV2hlbiBub3QgYWRkaW5nIGAuaXRzZWxmYCwgaXQncyBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlXG4gICAqIHVzaW5nIGAucmVzcG9uZFRvYC4gU2VlIHRoZSBgLmFgIGRvYyBmb3IgaW5mbyBvbiBjaGVja2luZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBDYXQoKSkudG8uYmUuYW4oJ29iamVjdCcpLnRoYXQucmVzcG9uZHNUbygnbWVvdycpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnJlc3BvbmRUb2AuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBEb2cgKCkge31cbiAgICogICAgIERvZy5wcm90b3R5cGUuYmFyayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBEb2coKSkudG8ubm90LnJlc3BvbmRUbygnbWVvdycpO1xuICAgKlxuICAgKiBgLnJlc3BvbmRUb2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt9KS50by5yZXNwb25kVG8oJ21lb3cnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe30sICdub29vIHdoeSBmYWlsPz8nKS50by5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAucmVzcG9uZHNUb2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5yZXNwb25kVG9gLlxuICAgKlxuICAgKiBAbmFtZSByZXNwb25kVG9cbiAgICogQGFsaWFzIHJlc3BvbmRzVG9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gcmVzcG9uZFRvIChtZXRob2QsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBpdHNlbGYgPSBmbGFnKHRoaXMsICdpdHNlbGYnKVxuICAgICAgLCBjb250ZXh0ID0gKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvYmogJiYgIWl0c2VsZilcbiAgICAgICAgPyBvYmoucHJvdG90eXBlW21ldGhvZF1cbiAgICAgICAgOiBvYmpbbWV0aG9kXTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAnZnVuY3Rpb24nID09PSB0eXBlb2YgY29udGV4dFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byByZXNwb25kIHRvICcgKyBfLmluc3BlY3QobWV0aG9kKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgcmVzcG9uZCB0byAnICsgXy5pbnNwZWN0KG1ldGhvZClcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgncmVzcG9uZFRvJywgcmVzcG9uZFRvKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgncmVzcG9uZHNUbycsIHJlc3BvbmRUbyk7XG5cbiAgLyoqXG4gICAqICMjIyAuaXRzZWxmXG4gICAqXG4gICAqIEZvcmNlcyBhbGwgYC5yZXNwb25kVG9gIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGJlaGF2ZSBhcyBpZlxuICAgKiB0aGUgdGFyZ2V0IGlzIGEgbm9uLWZ1bmN0aW9uIG9iamVjdCwgZXZlbiBpZiBpdCdzIGEgZnVuY3Rpb24uIFRodXMsIGl0XG4gICAqIGNhdXNlcyBgLnJlc3BvbmRUb2AgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW5cbiAgICogbmFtZSwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCdzIGBwcm90b3R5cGVgIHByb3BlcnR5IGhhcyBhXG4gICAqIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICogICAgIENhdC5oaXNzID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoQ2F0KS5pdHNlbGYudG8ucmVzcG9uZFRvKCdoaXNzJykuYnV0Lm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQG5hbWUgaXRzZWxmXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnaXRzZWxmJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2l0c2VsZicsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5zYXRpc2Z5KG1hdGNoZXJbLCBtc2ddKVxuICAgKlxuICAgKiBJbnZva2VzIHRoZSBnaXZlbiBgbWF0Y2hlcmAgZnVuY3Rpb24gd2l0aCB0aGUgdGFyZ2V0IGJlaW5nIHBhc3NlZCBhcyB0aGVcbiAgICogZmlyc3QgYXJndW1lbnQsIGFuZCBhc3NlcnRzIHRoYXQgdGhlIHZhbHVlIHJldHVybmVkIGlzIHRydXRoeS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5zYXRpc2Z5KGZ1bmN0aW9uKG51bSkge1xuICAgKiAgICAgICByZXR1cm4gbnVtID4gMDsgXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zYXRpc2Z5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3Quc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDI7XG4gICAqICAgICB9KTtcbiAgICpcbiAgICogYC5zYXRpc2Z5YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDI7XG4gICAqICAgICB9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLnNhdGlzZmllc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5zYXRpc2Z5YC5cbiAgICpcbiAgICogQG5hbWUgc2F0aXNmeVxuICAgKiBAYWxpYXMgc2F0aXNmaWVzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1hdGNoZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNhdGlzZnkgKG1hdGNoZXIsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB2YXIgcmVzdWx0ID0gbWF0Y2hlcihvYmopO1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICByZXN1bHRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gc2F0aXNmeSAnICsgXy5vYmpEaXNwbGF5KG1hdGNoZXIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBzYXRpc2Z5JyArIF8ub2JqRGlzcGxheShtYXRjaGVyKVxuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IGZhbHNlIDogdHJ1ZVxuICAgICAgLCByZXN1bHRcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc2F0aXNmeScsIHNhdGlzZnkpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzYXRpc2ZpZXMnLCBzYXRpc2Z5KTtcblxuICAvKipcbiAgICogIyMjIC5jbG9zZVRvKGV4cGVjdGVkLCBkZWx0YVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIHRoYXQncyB3aXRoaW4gYSBnaXZlbiArLy0gYGRlbHRhYCByYW5nZVxuICAgKiBvZiB0aGUgZ2l2ZW4gbnVtYmVyIGBleHBlY3RlZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5lcXVhbCgxLjUpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDEsIDAuNSk7XG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDIsIDAuNSk7XG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDEsIDEpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmNsb3NlVG9gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uZXF1YWwoMS41KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxLjUpLnRvLm5vdC5iZS5jbG9zZVRvKDMsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5jbG9zZVRvYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDMsIDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLjUsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5jbG9zZVRvKDMsIDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5hcHByb3hpbWF0ZWx5YCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmNsb3NlVG9gLlxuICAgKlxuICAgKiBAbmFtZSBjbG9zZVRvXG4gICAqIEBhbGlhcyBhcHByb3hpbWF0ZWx5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNsb3NlVG8oZXhwZWN0ZWQsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ251bWJlcicpO1xuICAgIGlmICh0eXBlb2YgZXhwZWN0ZWQgIT09ICdudW1iZXInIHx8IHR5cGVvZiBkZWx0YSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ3RoZSBhcmd1bWVudHMgdG8gY2xvc2VUbyBvciBhcHByb3hpbWF0ZWx5IG11c3QgYmUgbnVtYmVycycsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIE1hdGguYWJzKG9iaiAtIGV4cGVjdGVkKSA8PSBkZWx0YVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBjbG9zZSB0byAnICsgZXhwZWN0ZWQgKyAnICsvLSAnICsgZGVsdGFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIGNsb3NlIHRvICcgKyBleHBlY3RlZCArICcgKy8tICcgKyBkZWx0YVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdjbG9zZVRvJywgY2xvc2VUbyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2FwcHJveGltYXRlbHknLCBjbG9zZVRvKTtcblxuICAvLyBOb3RlOiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGlmIHRlc3RpbmcgZm9yIGluY2x1c2lvbiBpbnN0ZWFkIG9mIHNhbWVuZXNzLlxuICBmdW5jdGlvbiBpc1N1YnNldE9mKHN1YnNldCwgc3VwZXJzZXQsIGNtcCwgY29udGFpbnMsIG9yZGVyZWQpIHtcbiAgICBpZiAoIWNvbnRhaW5zKSB7XG4gICAgICBpZiAoc3Vic2V0Lmxlbmd0aCAhPT0gc3VwZXJzZXQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBzdXBlcnNldCA9IHN1cGVyc2V0LnNsaWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnNldC5ldmVyeShmdW5jdGlvbihlbGVtLCBpZHgpIHtcbiAgICAgIGlmIChvcmRlcmVkKSByZXR1cm4gY21wID8gY21wKGVsZW0sIHN1cGVyc2V0W2lkeF0pIDogZWxlbSA9PT0gc3VwZXJzZXRbaWR4XTtcblxuICAgICAgaWYgKCFjbXApIHtcbiAgICAgICAgdmFyIG1hdGNoSWR4ID0gc3VwZXJzZXQuaW5kZXhPZihlbGVtKTtcbiAgICAgICAgaWYgKG1hdGNoSWR4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIFJlbW92ZSBtYXRjaCBmcm9tIHN1cGVyc2V0IHNvIG5vdCBjb3VudGVkIHR3aWNlIGlmIGR1cGxpY2F0ZSBpbiBzdWJzZXQuXG4gICAgICAgIGlmICghY29udGFpbnMpIHN1cGVyc2V0LnNwbGljZShtYXRjaElkeCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXJzZXQuc29tZShmdW5jdGlvbihlbGVtMiwgbWF0Y2hJZHgpIHtcbiAgICAgICAgaWYgKCFjbXAoZWxlbSwgZWxlbTIpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgLy8gUmVtb3ZlIG1hdGNoIGZyb20gc3VwZXJzZXQgc28gbm90IGNvdW50ZWQgdHdpY2UgaWYgZHVwbGljYXRlIGluIHN1YnNldC5cbiAgICAgICAgaWYgKCFjb250YWlucykgc3VwZXJzZXQuc3BsaWNlKG1hdGNoSWR4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm1lbWJlcnMoc2V0WywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgYXJyYXkgaGFzIHRoZSBzYW1lIG1lbWJlcnMgYXMgdGhlIGdpdmVuIGFycmF5XG4gICAqIGBzZXRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5tZW1iZXJzKFsyLCAxLCAzXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDJdKS50by5oYXZlLm1lbWJlcnMoWzIsIDEsIDJdKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgbWVtYmVycyBhcmUgY29tcGFyZWQgdXNpbmcgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkuIEFkZCBgLmRlZXBgXG4gICAqIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZSB0aGUgYGRlZXAtZXFsYFxuICAgKiBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIG1lbWJlciBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5oYXZlLmRlZXAubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5oYXZlLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBvcmRlciBkb2Vzbid0IG1hdHRlci4gQWRkIGAub3JkZXJlZGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG9cbiAgICogcmVxdWlyZSB0aGF0IG1lbWJlcnMgYXBwZWFyIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDIsIDNdKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubWVtYmVycyhbMiwgMSwgM10pXG4gICAqICAgICAgIC5idXQubm90Lm9yZGVyZWQubWVtYmVycyhbMiwgMSwgM10pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBib3RoIGFycmF5cyBtdXN0IGJlIHRoZSBzYW1lIHNpemUuIEFkZCBgLmluY2x1ZGVgIGVhcmxpZXIgaW5cbiAgICogdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdCB0aGUgdGFyZ2V0J3MgbWVtYmVycyBiZSBhIHN1cGVyc2V0IG9mIHRoZVxuICAgKiBleHBlY3RlZCBtZW1iZXJzLiBOb3RlIHRoYXQgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBpbiB0aGUgc3Vic2V0IHdoZW5cbiAgICogYC5pbmNsdWRlYCBpcyBhZGRlZC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBpcyBhIHN1cGVyc2V0IG9mIFsxLCAyXSBidXQgbm90IGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqXG4gICAqICAgICAvLyBEdXBsaWNhdGVzIGluIHRoZSBzdWJzZXQgYXJlIGlnbm9yZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMiwgMiwgMl0pO1xuICAgKlxuICAgKiBgLmRlZXBgLCBgLm9yZGVyZWRgLCBhbmQgYC5pbmNsdWRlYCBjYW4gYWxsIGJlIGNvbWJpbmVkLiBIb3dldmVyLCBpZlxuICAgKiBgLmluY2x1ZGVgIGFuZCBgLm9yZGVyZWRgIGFyZSBjb21iaW5lZCwgdGhlIG9yZGVyaW5nIGJlZ2lucyBhdCB0aGUgc3RhcnQgb2ZcbiAgICogYm90aCBhcnJheXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoW3thOiAxfSwge2I6IDJ9LCB7YzogM31dKVxuICAgKiAgICAgICAudG8uaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhbe2E6IDF9LCB7YjogMn1dKVxuICAgKiAgICAgICAuYnV0Lm5vdC5pbmNsdWRlLmRlZXAub3JkZXJlZC5tZW1iZXJzKFt7YjogMn0sIHtjOiAzfV0pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm1lbWJlcnNgLiBIb3dldmVyLCBpdCdzXG4gICAqIGRhbmdlcm91cyB0byBkbyBzby4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnNcbiAgICogYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBhcnJheSBkb2Vzbid0IGhhdmUgYWxsIG9mIHRoZSBzYW1lIG1lbWJlcnMgYXNcbiAgICogdGhlIGdpdmVuIGFycmF5IGBzZXRgIGJ1dCBtYXkgb3IgbWF5IG5vdCBoYXZlIHNvbWUgb2YgdGhlbS4gSXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb25cbiAgICogdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuaW5jbHVkZSgzKS5hbmQubm90LmluY2x1ZGUoNCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFszLCA0XSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm1lbWJlcnNgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmhhdmUubWVtYmVycyhbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLm1lbWJlcnMoWzEsIDIsIDNdKTtcbiAgICpcbiAgICogQG5hbWUgbWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21lbWJlcnMnLCBmdW5jdGlvbiAoc3Vic2V0LCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIG5ldyBBc3NlcnRpb24oc3Vic2V0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcblxuICAgIHZhciBjb250YWlucyA9IGZsYWcodGhpcywgJ2NvbnRhaW5zJyk7XG4gICAgdmFyIG9yZGVyZWQgPSBmbGFnKHRoaXMsICdvcmRlcmVkJyk7XG5cbiAgICB2YXIgc3ViamVjdCwgZmFpbE1zZywgZmFpbE5lZ2F0ZU1zZywgbGVuZ3RoQ2hlY2s7XG5cbiAgICBpZiAoY29udGFpbnMpIHtcbiAgICAgIHN1YmplY3QgPSBvcmRlcmVkID8gJ2FuIG9yZGVyZWQgc3VwZXJzZXQnIDogJ2Egc3VwZXJzZXQnO1xuICAgICAgZmFpbE1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIGJlICcgKyBzdWJqZWN0ICsgJyBvZiAje2V4cH0nO1xuICAgICAgZmFpbE5lZ2F0ZU1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSAnICsgc3ViamVjdCArICcgb2YgI3tleHB9JztcbiAgICB9IGVsc2Uge1xuICAgICAgc3ViamVjdCA9IG9yZGVyZWQgPyAnb3JkZXJlZCBtZW1iZXJzJyA6ICdtZW1iZXJzJztcbiAgICAgIGZhaWxNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIHRoZSBzYW1lICcgKyBzdWJqZWN0ICsgJyBhcyAje2V4cH0nO1xuICAgICAgZmFpbE5lZ2F0ZU1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIHRoZSBzYW1lICcgKyBzdWJqZWN0ICsgJyBhcyAje2V4cH0nO1xuICAgIH1cblxuICAgIHZhciBjbXAgPSBmbGFnKHRoaXMsICdkZWVwJykgPyBfLmVxbCA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBpc1N1YnNldE9mKHN1YnNldCwgb2JqLCBjbXAsIGNvbnRhaW5zLCBvcmRlcmVkKVxuICAgICAgLCBmYWlsTXNnXG4gICAgICAsIGZhaWxOZWdhdGVNc2dcbiAgICAgICwgc3Vic2V0XG4gICAgICAsIG9ialxuICAgICAgLCB0cnVlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAub25lT2YobGlzdFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbWVtYmVyIG9mIHRoZSBnaXZlbiBhcnJheSBgbGlzdGAuIEhvd2V2ZXIsXG4gICAqIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5vbmVPZihbMSwgMiwgM10pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQ29tcGFyaXNvbnMgYXJlIHBlcmZvcm1lZCB1c2luZyBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eS5cbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5vbmVPZmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLm9uZU9mKFsyLCAzLCA0XSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm9uZU9mYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUub25lT2YoWzIsIDMsIDRdLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLm9uZU9mKFsyLCAzLCA0XSk7XG4gICAqXG4gICAqIEBuYW1lIG9uZU9mXG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IGxpc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZU9mIChsaXN0LCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZXhwZWN0ZWQgPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihsaXN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBsaXN0LmluZGV4T2YoZXhwZWN0ZWQpID4gLTFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgb25lIG9mICN7ZXhwfSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIG9uZSBvZiAje2V4cH0nXG4gICAgICAsIGxpc3RcbiAgICAgICwgZXhwZWN0ZWRcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnb25lT2YnLCBvbmVPZik7XG5cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuY2hhbmdlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGZ1bmN0aW9uXG4gICAqIGBzdWJqZWN0YCByZXR1cm5zIGEgZGlmZmVyZW50IHZhbHVlIHdoZW4gaXQncyBpbnZva2VkIGJlZm9yZSB0aGUgdGFyZ2V0XG4gICAqIGZ1bmN0aW9uIGNvbXBhcmVkIHRvIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyd2FyZC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IGBzdWJqZWN0YCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICB2YXIgZG90cyA9ICcnXG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBkb3RzICs9ICcuJzsgfVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChnZXREb3RzKCkpLnRvLmVxdWFsKCcnKTtcbiAgICogICAgIGFkZERvdCgpO1xuICAgKiAgICAgZXhwZWN0KGdldERvdHMoKSkudG8uZXF1YWwoJy4nKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8uY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmNoYW5nZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBkaWZmZXJlbnQgYmVmb3JlIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYWZ0ZXJ3YXJkLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge2RvdHM6ICcnfVxuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgbXlPYmouZG90cyArPSAnLic7IH07XG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG15T2JqKS50by5oYXZlLnByb3BlcnR5KCdkb3RzJywgJycpO1xuICAgKiAgICAgYWRkRG90KCk7XG4gICAqICAgICBleHBlY3QobXlPYmopLnRvLmhhdmUucHJvcGVydHkoJ2RvdHMnLCAnLicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkRG90KS50by5jaGFuZ2UobXlPYmosICdkb3RzJyk7XG4gICAqXG4gICAqIFN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBiZWZvcmUgYW5kIGFmdGVyIHZhbHVlcy5cbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5jaGFuZ2VgLlxuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UoZ2V0RG90cyk7XG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7ZG90czogJyd9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UobXlPYmosICdkb3RzJyk7XG4gICAqXG4gICAqIGAuY2hhbmdlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHtkb3RzOiAnJ31cbiAgICogICAgICAgLCBhZGREb3QgPSBmdW5jdGlvbiAoKSB7IG15T2JqLmRvdHMgKz0gJy4nOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8ubm90LmNoYW5nZShteU9iaiwgJ2RvdHMnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICB2YXIgZG90cyA9ICcnXG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBkb3RzICs9ICcuJzsgfVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZERvdCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLm5vdC5jaGFuZ2UoZ2V0RG90cyk7XG4gICAqXG4gICAqIGAuY2hhbmdlYCBhbHNvIGNhdXNlcyBhbGwgYC5ieWAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG9cbiAgICogYXNzZXJ0IGhvdyBtdWNoIGEgbnVtZXJpYyBzdWJqZWN0IHdhcyBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGJ5LiBIb3dldmVyLFxuICAgKiBpdCdzIGRhbmdlcm91cyB0byB1c2UgYC5jaGFuZ2UuYnlgLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXNcbiAgICogdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaW5jcmVhc2VzIGJ5XG4gICAqIHRoZSBnaXZlbiBkZWx0YSwgb3IgdGhhdCBpdCBkZWNyZWFzZXMgYnkgdGhlIGdpdmVuIGRlbHRhLiBJdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvblxuICAgKiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmNoYW5nZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuY2hhbmdlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5jaGFuZ2VgLlxuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VcbiAgICogQGFsaWFzIGNoYW5nZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRDaGFuZ2VzIChzdWJqZWN0LCBwcm9wLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZm4gPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihmbiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIHZhciBpbml0aWFsO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3RbcHJvcF07XG4gICAgfVxuXG4gICAgZm4oKTtcblxuICAgIHZhciBmaW5hbCA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gc3ViamVjdCgpIDogc3ViamVjdFtwcm9wXTtcbiAgICB2YXIgbXNnT2JqID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBpbml0aWFsIDogJy4nICsgcHJvcDtcblxuICAgIC8vIFRoaXMgZ2V0cyBmbGFnZ2VkIGJlY2F1c2Ugb2YgdGhlIC5ieShkZWx0YSkgYXNzZXJ0aW9uXG4gICAgZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonLCBtc2dPYmopO1xuICAgIGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJywgaW5pdGlhbCk7XG4gICAgZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJywgZmluYWwpO1xuICAgIGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InLCAnY2hhbmdlJyk7XG4gICAgZmxhZyh0aGlzLCAncmVhbERlbHRhJywgZmluYWwgIT09IGluaXRpYWwpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpbml0aWFsICE9PSBmaW5hbFxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gY2hhbmdlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGNoYW5nZSdcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnY2hhbmdlJywgYXNzZXJ0Q2hhbmdlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2NoYW5nZXMnLCBhc3NlcnRDaGFuZ2VzKTtcblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZShzdWJqZWN0WywgcHJvcFssIG1zZ11dKVxuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYC5pbmNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGdyZWF0ZXIgbnVtYmVyIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gd2hlbiBpdCdzIGludm9rZWQgYmVmb3JlaGFuZC4gYC5pbmNyZWFzZWAgYWxzb1xuICAgKiBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGFzc2VydCBob3cgbXVjaFxuICAgKiBncmVhdGVyIG9mIGEgbnVtYmVyIGlzIHJldHVybmVkLiBJdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHJldHVyblxuICAgKiB2YWx1ZSBpbmNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIGl0IGluY3JlYXNlZFxuICAgKiBieSBhbnkgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IHZhbCArPSAyOyB9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UoZ2V0VmFsKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKGdldFZhbCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmluY3JlYXNlYCBhc3NlcnRzIHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiBnaXZlbiBvYmplY3QgYHN1YmplY3RgJ3MgYHByb3BgIHByb3BlcnR5IGlzIGdyZWF0ZXIgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byBiZWZvcmVoYW5kLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluY3JlYXNlYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSBzdWJqZWN0IGVpdGhlciBkZWNyZWFzZXMsIG9yIHRoYXQgaXQgc3RheXMgdGhlIHNhbWUuXG4gICAqIEl0J3Mgb2Z0ZW4gYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW5cbiAgICogd3JpdGUgYW4gYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSBzdWJqZWN0IGlzIGV4cGVjdGVkIHRvIGRlY3JlYXNlLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgaXRcbiAgICogZGVjcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8ubm90LmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiBcbiAgICogV2hlbiB0aGUgc3ViamVjdCBpcyBleHBlY3RlZCB0byBzdGF5IHRoZSBzYW1lLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0XG4gICAqIGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UobXlPYmosICd2YWwnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuaW5jcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuaW5jcmVhc2VgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC4gV2hlbiBub3QgcHJvdmlkaW5nIHR3byBhcmd1bWVudHMsIGFsd2F5c1xuICAgKiB1c2UgdGhlIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8uaW5jcmVhc2UobXlPYmosICd2YWwnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICB2YXIgdmFsID0gMVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuICAgKiAgICAgICAsIGdldFZhbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbDsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaW5jcmVhc2UoZ2V0VmFsKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaW5jcmVhc2VzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmluY3JlYXNlYC5cbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VcbiAgICogQGFsaWFzIGluY3JlYXNlc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc3ViamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEluY3JlYXNlcyAoc3ViamVjdCwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIGZuID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24oZm4sIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG5cbiAgICB2YXIgaW5pdGlhbDtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0W3Byb3BdO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXJcbiAgICBuZXcgQXNzZXJ0aW9uKGluaXRpYWwsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ251bWJlcicpO1xuXG4gICAgZm4oKTtcblxuICAgIHZhciBmaW5hbCA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gc3ViamVjdCgpIDogc3ViamVjdFtwcm9wXTtcbiAgICB2YXIgbXNnT2JqID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBpbml0aWFsIDogJy4nICsgcHJvcDtcblxuICAgIGZsYWcodGhpcywgJ2RlbHRhTXNnT2JqJywgbXNnT2JqKTtcbiAgICBmbGFnKHRoaXMsICdpbml0aWFsRGVsdGFWYWx1ZScsIGluaXRpYWwpO1xuICAgIGZsYWcodGhpcywgJ2ZpbmFsRGVsdGFWYWx1ZScsIGZpbmFsKTtcbiAgICBmbGFnKHRoaXMsICdkZWx0YUJlaGF2aW9yJywgJ2luY3JlYXNlJyk7XG4gICAgZmxhZyh0aGlzLCAncmVhbERlbHRhJywgZmluYWwgLSBpbml0aWFsKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgZmluYWwgLSBpbml0aWFsID4gMFxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gaW5jcmVhc2UnXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBub3QgaW5jcmVhc2UnXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luY3JlYXNlJywgYXNzZXJ0SW5jcmVhc2VzKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaW5jcmVhc2VzJywgYXNzZXJ0SW5jcmVhc2VzKTtcblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZShzdWJqZWN0WywgcHJvcFssIG1zZ11dKVxuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYC5kZWNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGxlc3NlciBudW1iZXIgd2hlbiBpdCdzIGludm9rZWQgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byB3aGVuIGl0J3MgaW52b2tlZCBiZWZvcmVoYW5kLiBgLmRlY3JlYXNlYCBhbHNvXG4gICAqIGNhdXNlcyBhbGwgYC5ieWAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IGhvdyBtdWNoXG4gICAqIGxlc3NlciBvZiBhIG51bWJlciBpcyByZXR1cm5lZC4gSXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSByZXR1cm5cbiAgICogdmFsdWUgZGVjcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQsIHJhdGhlciB0aGFuIGFzc2VydGluZyBpdCBkZWNyZWFzZWRcbiAgICogYnkgYW55IGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IHZhbCAtPSAyOyB9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShnZXRWYWwpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShnZXRWYWwpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC5kZWNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBsZXNzZXIgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byBiZWZvcmVoYW5kLiBcbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCAtPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5kZWNyZWFzZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogZGFuZ2Vyb3VzIHRvIGRvIHNvLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9uc1xuICAgKiBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaW5jcmVhc2VzLCBvciB0aGF0IGl0IHN0YXlzIHRoZSBzYW1lLlxuICAgKiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuXG4gICAqIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgc3ViamVjdCBpcyBleHBlY3RlZCB0byBpbmNyZWFzZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IGl0XG4gICAqIGluY3JlYXNlZCBieSB0aGUgZXhwZWN0ZWQgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLm5vdC5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gc3RheSB0aGUgc2FtZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAndmFsJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmRlY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmRlY3JlYXNlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXRWYWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWw7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmRlY3JlYXNlKGdldFZhbCk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmRlY3JlYXNlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5kZWNyZWFzZWAuXG4gICAqXG4gICAqIEBuYW1lIGRlY3JlYXNlXG4gICAqIEBhbGlhcyBkZWNyZWFzZXNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnREZWNyZWFzZXMgKHN1YmplY3QsIHByb3AsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBmbiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgdmFyIGluaXRpYWw7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkocHJvcCk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdFtwcm9wXTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyXG4gICAgbmV3IEFzc2VydGlvbihpbml0aWFsLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICBmbGFnKHRoaXMsICdkZWx0YU1zZ09iaicsIG1zZ09iaik7XG4gICAgZmxhZyh0aGlzLCAnaW5pdGlhbERlbHRhVmFsdWUnLCBpbml0aWFsKTtcbiAgICBmbGFnKHRoaXMsICdmaW5hbERlbHRhVmFsdWUnLCBmaW5hbCk7XG4gICAgZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicsICdkZWNyZWFzZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGluaXRpYWwgLSBmaW5hbCk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGZpbmFsIC0gaW5pdGlhbCA8IDBcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGRlY3JlYXNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGRlY3JlYXNlJ1xuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdkZWNyZWFzZScsIGFzc2VydERlY3JlYXNlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2RlY3JlYXNlcycsIGFzc2VydERlY3JlYXNlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuYnkoZGVsdGFbLCBtc2ddKVxuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhbiBgLmluY3JlYXNlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXRcbiAgICogdGhlIHN1YmplY3Qgb2YgdGhlIGAuaW5jcmVhc2VgIGFzc2VydGlvbiBpbmNyZWFzZWQgYnkgdGhlIGdpdmVuIGBkZWx0YWAuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhIGAuZGVjcmVhc2VgIGFzc2VydGlvbiBpbiB0aGUgY2hhaW4sIGAuYnlgIGFzc2VydHMgdGhhdCB0aGVcbiAgICogc3ViamVjdCBvZiB0aGUgYC5kZWNyZWFzZWAgYXNzZXJ0aW9uIGRlY3JlYXNlZCBieSB0aGUgZ2l2ZW4gYGRlbHRhYC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCAtPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhIGAuY2hhbmdlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHN1YmplY3Qgb2YgdGhlIGAuY2hhbmdlYCBhc3NlcnRpb24gZWl0aGVyIGluY3JlYXNlZCBvciBkZWNyZWFzZWQgYnkgdGhlXG4gICAqIGdpdmVuIGBkZWx0YWAuIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIHVzZSBgLmNoYW5nZS5ieWAuIFRoZSBwcm9ibGVtIGlzXG4gICAqIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlXG4gICAqIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0c1xuICAgKiB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmNoYW5nZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5ieWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgc3ViamVjdCBjaGFuZ2VkIGJ5IGl0cyBleHBlY3RlZCBkZWx0YSwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgaXQgZGlkbid0IGNoYW5nZSBieSBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgZGVsdGFzLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnV0Lm5vdC5ieSgzKTtcbiAgICpcbiAgICogYC5ieWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvXG4gICAqIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kXG4gICAqIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgzLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoYWRkVHdvLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgzKTtcbiAgICpcbiAgICogQG5hbWUgYnlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnREZWx0YShkZWx0YSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgbXNnT2JqID0gZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonKTtcbiAgICB2YXIgaW5pdGlhbCA9IGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJyk7XG4gICAgdmFyIGZpbmFsID0gZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJyk7XG4gICAgdmFyIGJlaGF2aW9yID0gZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicpO1xuICAgIHZhciByZWFsRGVsdGEgPSBmbGFnKHRoaXMsICdyZWFsRGVsdGEnKTtcblxuICAgIHZhciBleHByZXNzaW9uO1xuICAgIGlmIChiZWhhdmlvciA9PT0gJ2NoYW5nZScpIHtcbiAgICAgIGV4cHJlc3Npb24gPSBNYXRoLmFicyhmaW5hbCAtIGluaXRpYWwpID09PSBNYXRoLmFicyhkZWx0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cHJlc3Npb24gPSByZWFsRGVsdGEgPT09IE1hdGguYWJzKGRlbHRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGV4cHJlc3Npb25cbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvICcgKyBiZWhhdmlvciArICcgYnkgJyArIGRlbHRhXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBub3QgJyArIGJlaGF2aW9yICsgJyBieSAnICsgZGVsdGFcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnYnknLCBhc3NlcnREZWx0YSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXh0ZW5zaWJsZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBleHRlbnNpYmxlLCB3aGljaCBtZWFucyB0aGF0IG5ldyBwcm9wZXJ0aWVzIGNhblxuICAgKiBiZSBhZGRlZCB0byBpdC4gUHJpbWl0aXZlcyBhcmUgbmV2ZXIgZXh0ZW5zaWJsZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXh0ZW5zaWJsZWAuXG4gICAqXG4gICAqICAgICB2YXIgbm9uRXh0ZW5zaWJsZU9iamVjdCA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSlcbiAgICogICAgICAgLCBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSlcbiAgICogICAgICAgLCBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub25FeHRlbnNpYmxlT2JqZWN0KS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgICogICAgIGV4cGVjdChzZWFsZWRPYmplY3QpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEBuYW1lIGV4dGVuc2libGVcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdleHRlbnNpYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuXG4gICAgLy8gSW4gRVM1LCBpZiB0aGUgYXJndW1lbnQgdG8gdGhpcyBtZXRob2QgaXMgYSBwcmltaXRpdmUsIHRoZW4gaXQgd2lsbCBjYXVzZSBhIFR5cGVFcnJvci5cbiAgICAvLyBJbiBFUzYsIGEgbm9uLW9iamVjdCBhcmd1bWVudCB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2FzIGEgbm9uLWV4dGVuc2libGUgb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIGZhbHNlLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0V4dGVuc2libGVcbiAgICAvLyBUaGUgZm9sbG93aW5nIHByb3ZpZGVzIEVTNiBiZWhhdmlvciBmb3IgRVM1IGVudmlyb25tZW50cy5cblxuICAgIHZhciBpc0V4dGVuc2libGUgPSBvYmogPT09IE9iamVjdChvYmopICYmIE9iamVjdC5pc0V4dGVuc2libGUob2JqKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNFeHRlbnNpYmxlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGV4dGVuc2libGUnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBleHRlbnNpYmxlJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLnNlYWxlZFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzZWFsZWQsIHdoaWNoIG1lYW5zIHRoYXQgbmV3IHByb3BlcnRpZXMgY2FuJ3QgYmVcbiAgICogYWRkZWQgdG8gaXQsIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4ndCBiZSByZWNvbmZpZ3VyZWQgb3IgZGVsZXRlZC5cbiAgICogSG93ZXZlciwgaXQncyBwb3NzaWJsZSB0aGF0IGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbiBzdGlsbCBiZSByZWFzc2lnbmVkXG4gICAqIHRvIGRpZmZlcmVudCB2YWx1ZXMuIFByaW1pdGl2ZXMgYXJlIGFsd2F5cyBzZWFsZWQuXG4gICAqXG4gICAqICAgICB2YXIgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHNlYWxlZE9iamVjdCkudG8uYmUuc2VhbGVkO1xuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8uYmUuc2VhbGVkO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLnNlYWxlZDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zZWFsZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLnNlYWxlZDtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEBuYW1lIHNlYWxlZFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ3NlYWxlZCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIHNlYWxlZCBvcmRpbmFyeSBvYmplY3QsIHNpbXBseSByZXR1cm4gdHJ1ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzU2VhbGVkXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNTZWFsZWQgPSBvYmogPT09IE9iamVjdChvYmopID8gT2JqZWN0LmlzU2VhbGVkKG9iaikgOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpc1NlYWxlZFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBzZWFsZWQnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBzZWFsZWQnXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZnJvemVuXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGZyb3plbiwgd2hpY2ggbWVhbnMgdGhhdCBuZXcgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgKiBhZGRlZCB0byBpdCwgYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbid0IGJlIHJlYXNzaWduZWQgdG8gZGlmZmVyZW50XG4gICAqIHZhbHVlcywgcmVjb25maWd1cmVkLCBvciBkZWxldGVkLiBQcmltaXRpdmVzIGFyZSBhbHdheXMgZnJvemVuLlxuICAgKlxuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8uYmUuZnJvemVuO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmZyb3plbjtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5mcm96ZW5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLmZyb3plbjtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5mcm96ZW47XG4gICAqXG4gICAqIEBuYW1lIGZyb3plblxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2Zyb3plbicsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIGZyb3plbiBvcmRpbmFyeSBvYmplY3QsIHNpbXBseSByZXR1cm4gdHJ1ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzRnJvemVuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNGcm96ZW4gPSBvYmogPT09IE9iamVjdChvYmopID8gT2JqZWN0LmlzRnJvemVuKG9iaikgOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpc0Zyb3plblxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBmcm96ZW4nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBmcm96ZW4nXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZmluaXRlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyLCBhbmQgaXNuJ3QgYE5hTmAgb3IgcG9zaXRpdmUvbmVnYXRpdmVcbiAgICogYEluZmluaXR5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5maW5pdGU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZmluaXRlYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSBzdWJqZWN0IGVpdGhlciBpc24ndCBhIG51bWJlciwgb3IgdGhhdCBpdCdzIGBOYU5gLCBvclxuICAgKiB0aGF0IGl0J3MgcG9zaXRpdmUgYEluZmluaXR5YCwgb3IgdGhhdCBpdCdzIG5lZ2F0aXZlIGBJbmZpbml0eWAuIEl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gYmUgYSBudW1iZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogdGhhdCBpdCdzIHRoZSBleHBlY3RlZCB0eXBlLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBpc24ndCBvbmUgb2ZcbiAgICogbWFueSB1bmV4cGVjdGVkIHR5cGVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBgTmFOYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5XG4gICAqIHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoTmFOKS50by5iZS5OYU47IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoTmFOKS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlIHBvc2l0aXZlIGluZmluaXR5LCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdChJbmZpbml0eSkudG8uZXF1YWwoSW5maW5pdHkpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KEluZmluaXR5KS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlIG5lZ2F0aXZlIGluZmluaXR5LCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgtSW5maW5pdHkpLnRvLmVxdWFsKC1JbmZpbml0eSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoLUluZmluaXR5KS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmZpbml0ZTtcbiAgICpcbiAgICogQG5hbWUgZmluaXRlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZmluaXRlJywgZnVuY3Rpb24obXNnKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHR5cGVvZiBvYmogPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUob2JqKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhIGZpbml0ZSBudW1iZXInXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBhIGZpbml0ZSBudW1iZXInXG4gICAgKTtcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuICBjaGFpLmV4cGVjdCA9IGZ1bmN0aW9uICh2YWwsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IGNoYWkuQXNzZXJ0aW9uKHZhbCwgbWVzc2FnZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0sIFtvcGVyYXRvcl0pXG4gICAqXG4gICAqIFRocm93IGEgZmFpbHVyZS5cbiAgICpcbiAgICogQG5hbWUgZmFpbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGNoYWkuZXhwZWN0LmZhaWwgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IpIHtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnZXhwZWN0LmZhaWwoKSc7XG4gICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IobWVzc2FnZSwge1xuICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgLCBleHBlY3RlZDogZXhwZWN0ZWRcbiAgICAgICwgb3BlcmF0b3I6IG9wZXJhdG9yXG4gICAgfSwgY2hhaS5leHBlY3QuZmFpbCk7XG4gIH07XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuICB2YXIgQXNzZXJ0aW9uID0gY2hhaS5Bc3NlcnRpb247XG5cbiAgZnVuY3Rpb24gbG9hZFNob3VsZCAoKSB7XG4gICAgLy8gZXhwbGljaXRseSBkZWZpbmUgdGhpcyBtZXRob2QgYXMgZnVuY3Rpb24gYXMgdG8gaGF2ZSBpdCdzIG5hbWUgdG8gaW5jbHVkZSBhcyBgc3NmaWBcbiAgICBmdW5jdGlvbiBzaG91bGRHZXR0ZXIoKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFN0cmluZ1xuICAgICAgICAgIHx8IHRoaXMgaW5zdGFuY2VvZiBOdW1iZXJcbiAgICAgICAgICB8fCB0aGlzIGluc3RhbmNlb2YgQm9vbGVhblxuICAgICAgICAgIHx8IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdGhpcyBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzc2VydGlvbih0aGlzLnZhbHVlT2YoKSwgbnVsbCwgc2hvdWxkR2V0dGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKHRoaXMsIG51bGwsIHNob3VsZEdldHRlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3VsZFNldHRlcih2YWx1ZSkge1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvY2hhaS9pc3N1ZXMvODY6IHRoaXMgbWFrZXNcbiAgICAgIC8vIGB3aGF0ZXZlci5zaG91bGQgPSBzb21lVmFsdWVgIGFjdHVhbGx5IHNldCBgc29tZVZhbHVlYCwgd2hpY2ggaXNcbiAgICAgIC8vIGVzcGVjaWFsbHkgdXNlZnVsIGZvciBgZ2xvYmFsLnNob3VsZCA9IHJlcXVpcmUoJ2NoYWknKS5zaG91bGQoKWAuXG4gICAgICAvL1xuICAgICAgLy8gTm90ZSB0aGF0IHdlIGhhdmUgdG8gdXNlIFtbRGVmaW5lUHJvcGVydHldXSBpbnN0ZWFkIG9mIFtbUHV0XV1cbiAgICAgIC8vIHNpbmNlIG90aGVyd2lzZSB3ZSB3b3VsZCB0cmlnZ2VyIHRoaXMgdmVyeSBzZXR0ZXIhXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Nob3VsZCcsIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gbW9kaWZ5IE9iamVjdC5wcm90b3R5cGUgdG8gaGF2ZSBgc2hvdWxkYFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCAnc2hvdWxkJywge1xuICAgICAgc2V0OiBzaG91bGRTZXR0ZXJcbiAgICAgICwgZ2V0OiBzaG91bGRHZXR0ZXJcbiAgICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICB2YXIgc2hvdWxkID0ge307XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgICAqXG4gICAgICogVGhyb3cgYSBmYWlsdXJlLlxuICAgICAqXG4gICAgICogQG5hbWUgZmFpbFxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3BlcmF0b3JcbiAgICAgKiBAbmFtZXNwYWNlIEJERFxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG5cbiAgICBzaG91bGQuZmFpbCA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvcikge1xuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ3Nob3VsZC5mYWlsKCknO1xuICAgICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IobWVzc2FnZSwge1xuICAgICAgICAgIGFjdHVhbDogYWN0dWFsXG4gICAgICAgICwgZXhwZWN0ZWQ6IGV4cGVjdGVkXG4gICAgICAgICwgb3BlcmF0b3I6IG9wZXJhdG9yXG4gICAgICB9LCBzaG91bGQuZmFpbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyBub24tc3RyaWN0IGVxdWFsaXR5IChgPT1gKSBvZiBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQuZXF1YWwoMywgJzMnLCAnPT0gY29lcmNlcyB2YWx1ZXMgdG8gc3RyaW5ncycpO1xuICAgICAqXG4gICAgICogQG5hbWUgZXF1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmVxdWFsID0gZnVuY3Rpb24gKHZhbDEsIHZhbDIsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbih2YWwxLCBtc2cpLnRvLmVxdWFsKHZhbDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLnRocm93KGZ1bmN0aW9uLCBbY29uc3RydWN0b3Ivc3RyaW5nL3JlZ2V4cF0sIFtzdHJpbmcvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyB0aGF0IGBmdW5jdGlvbmAgd2lsbCB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuIGluc3RhbmNlIG9mXG4gICAgICogYGNvbnN0cnVjdG9yYCwgb3IgYWx0ZXJuYXRlbHkgdGhhdCBpdCB3aWxsIHRocm93IGFuIGVycm9yIHdpdGggbWVzc2FnZVxuICAgICAqIG1hdGNoaW5nIGByZWdleHBgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgJ2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvcicpO1xuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sIC9mdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3IvKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCBSZWZlcmVuY2VFcnJvcik7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IsICdmdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3InKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCBSZWZlcmVuY2VFcnJvciwgL2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvci8pO1xuICAgICAqXG4gICAgICogQG5hbWUgdGhyb3dcbiAgICAgKiBAYWxpYXMgVGhyb3dcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLlRocm93ID0gZnVuY3Rpb24gKGZuLCBlcnJ0LCBlcnJzLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZykudG8uVGhyb3coZXJydCwgZXJycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAuZXhpc3RcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqICAgICB2YXIgZm9vID0gJ2hpJztcbiAgICAgKlxuICAgICAqICAgICBzaG91bGQuZXhpc3QoZm9vLCAnZm9vIGV4aXN0cycpO1xuICAgICAqXG4gICAgICogQG5hbWUgZXhpc3RcbiAgICAgKiBAbmFtZXNwYWNlIFNob3VsZFxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG5cbiAgICBzaG91bGQuZXhpc3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2cpLnRvLmV4aXN0O1xuICAgIH1cblxuICAgIC8vIG5lZ2F0aW9uXG4gICAgc2hvdWxkLm5vdCA9IHt9XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLm5vdC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAgICpcbiAgICAgKiBBc3NlcnRzIG5vbi1zdHJpY3QgaW5lcXVhbGl0eSAoYCE9YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLm5vdC5lcXVhbCgzLCA0LCAndGhlc2UgbnVtYmVycyBhcmUgbm90IGVxdWFsJyk7XG4gICAgICpcbiAgICAgKiBAbmFtZSBub3QuZXF1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLm5vdC5lcXVhbCA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsMSwgbXNnKS50by5ub3QuZXF1YWwodmFsMik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAudGhyb3coZnVuY3Rpb24sIFtjb25zdHJ1Y3Rvci9yZWdleHBdLCBbbWVzc2FnZV0pXG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgYGZ1bmN0aW9uYCB3aWxsIF9ub3RfIHRocm93IGFuIGVycm9yIHRoYXQgaXMgYW4gaW5zdGFuY2Ugb2ZcbiAgICAgKiBgY29uc3RydWN0b3JgLCBvciBhbHRlcm5hdGVseSB0aGF0IGl0IHdpbGwgbm90IHRocm93IGFuIGVycm9yIHdpdGggbWVzc2FnZVxuICAgICAqIG1hdGNoaW5nIGByZWdleHBgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC5ub3QudGhyb3coZm4sIEVycm9yLCAnZnVuY3Rpb24gZG9lcyBub3QgdGhyb3cnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIG5vdC50aHJvd1xuICAgICAqIEBhbGlhcyBub3QuVGhyb3dcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLm5vdC5UaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJydCwgZXJycywgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2cpLnRvLm5vdC5UaHJvdyhlcnJ0LCBlcnJzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC5ub3QuZXhpc3RcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqICAgICB2YXIgYmFyID0gbnVsbDtcbiAgICAgKlxuICAgICAqICAgICBzaG91bGQubm90LmV4aXN0KGJhciwgJ2JhciBkb2VzIG5vdCBleGlzdCcpO1xuICAgICAqXG4gICAgICogQG5hbWUgbm90LmV4aXN0XG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLm5vdC5leGlzdCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZykudG8ubm90LmV4aXN0O1xuICAgIH1cblxuICAgIHNob3VsZFsndGhyb3cnXSA9IHNob3VsZFsnVGhyb3cnXTtcbiAgICBzaG91bGQubm90Wyd0aHJvdyddID0gc2hvdWxkLm5vdFsnVGhyb3cnXTtcblxuICAgIHJldHVybiBzaG91bGQ7XG4gIH07XG5cbiAgY2hhaS5zaG91bGQgPSBsb2FkU2hvdWxkO1xuICBjaGFpLlNob3VsZCA9IGxvYWRTaG91bGQ7XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjaGFpLCB1dGlsKSB7XG5cbiAgLyohXG4gICAqIENoYWkgZGVwZW5kZW5jaWVzLlxuICAgKi9cblxuICB2YXIgQXNzZXJ0aW9uID0gY2hhaS5Bc3NlcnRpb25cbiAgICAsIGZsYWcgPSB1dGlsLmZsYWc7XG5cbiAgLyohXG4gICAqIE1vZHVsZSBleHBvcnQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiAjIyMgYXNzZXJ0KGV4cHJlc3Npb24sIG1lc3NhZ2UpXG4gICAqXG4gICAqIFdyaXRlIHlvdXIgb3duIHRlc3QgZXhwcmVzc2lvbnMuXG4gICAqXG4gICAqICAgICBhc3NlcnQoJ2ZvbycgIT09ICdiYXInLCAnZm9vIGlzIG5vdCBiYXInKTtcbiAgICogICAgIGFzc2VydChBcnJheS5pc0FycmF5KFtdKSwgJ2VtcHR5IGFycmF5cyBhcmUgYXJyYXlzJyk7XG4gICAqXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cHJlc3Npb24gdG8gdGVzdCBmb3IgdHJ1dGhpbmVzc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSB0byBkaXNwbGF5IG9uIGVycm9yXG4gICAqIEBuYW1lIGFzc2VydFxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB2YXIgYXNzZXJ0ID0gY2hhaS5hc3NlcnQgPSBmdW5jdGlvbiAoZXhwcmVzcywgZXJybXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKG51bGwsIG51bGwsIGNoYWkuYXNzZXJ0LCB0cnVlKTtcbiAgICB0ZXN0LmFzc2VydChcbiAgICAgICAgZXhwcmVzc1xuICAgICAgLCBlcnJtc2dcbiAgICAgICwgJ1sgbmVnYXRpb24gbWVzc2FnZSB1bmF2YWlsYWJsZSBdJ1xuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0sIFtvcGVyYXRvcl0pXG4gICAqXG4gICAqIFRocm93IGEgZmFpbHVyZS4gTm9kZS5qcyBgYXNzZXJ0YCBtb2R1bGUtY29tcGF0aWJsZS5cbiAgICpcbiAgICogQG5hbWUgZmFpbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5mYWlsID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ2Fzc2VydC5mYWlsKCknO1xuICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgYWN0dWFsOiBhY3R1YWxcbiAgICAgICwgZXhwZWN0ZWQ6IGV4cGVjdGVkXG4gICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgIH0sIGFzc2VydC5mYWlsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc09rKG9iamVjdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgdHJ1dGh5LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzT2soJ2V2ZXJ5dGhpbmcnLCAnZXZlcnl0aGluZyBpcyBvaycpO1xuICAgKiAgICAgYXNzZXJ0LmlzT2soZmFsc2UsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc09rXG4gICAqIEBhbGlhcyBva1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3QgdG8gdGVzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNPayA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc09rLCB0cnVlKS5pcy5vaztcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE9rKG9iamVjdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgZmFsc3kuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RPaygnZXZlcnl0aGluZycsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2soZmFsc2UsICd0aGlzIHdpbGwgcGFzcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdE9rXG4gICAqIEBhbGlhcyBub3RPa1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3QgdG8gdGVzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RPayA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE9rLCB0cnVlKS5pcy5ub3Qub2s7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIG5vbi1zdHJpY3QgZXF1YWxpdHkgKGA9PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmVxdWFsKDMsICczJywgJz09IGNvZXJjZXMgdmFsdWVzIHRvIHN0cmluZ3MnKTtcbiAgICpcbiAgICogQG5hbWUgZXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuZXF1YWwsIHRydWUpO1xuXG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cCA9PSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBlcXVhbCAje2FjdH0nXG4gICAgICAsIGV4cFxuICAgICAgLCBhY3RcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIG5vbi1zdHJpY3QgaW5lcXVhbGl0eSAoYCE9YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90RXF1YWwoMywgNCwgJ3RoZXNlIG51bWJlcnMgYXJlIG5vdCBlcXVhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICB2YXIgdGVzdCA9IG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5ub3RFcXVhbCwgdHJ1ZSk7XG5cbiAgICB0ZXN0LmFzc2VydChcbiAgICAgICAgZXhwICE9IGZsYWcodGVzdCwgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGVxdWFsICN7YWN0fSdcbiAgICAgICwgZXhwXG4gICAgICAsIGFjdFxuICAgICAgLCB0cnVlXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgc3RyaWN0IGVxdWFsaXR5IChgPT09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgdHJ1ZSwgJ3RoZXNlIGJvb2xlYW5zIGFyZSBzdHJpY3RseSBlcXVhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBzdHJpY3RFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuc3RyaWN0RXF1YWwsIHRydWUpLnRvLmVxdWFsKGV4cCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHN0cmljdCBpbmVxdWFsaXR5IChgIT09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U3RyaWN0RXF1YWwoMywgJzMnLCAnbm8gY29lcmNpb24gZm9yIHN0cmljdCBlcXVhbGl0eScpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTdHJpY3RFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90U3RyaWN0RXF1YWwsIHRydWUpLnRvLm5vdC5lcXVhbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgYWN0dWFsYCBpcyBkZWVwbHkgZXF1YWwgdG8gYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwRXF1YWwoeyB0ZWE6ICdncmVlbicgfSwgeyB0ZWE6ICdncmVlbicgfSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFsaWFzIGRlZXBTdHJpY3RFcXVhbFxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcEVxdWFsID0gYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmRlZXBFcXVhbCwgdHJ1ZSkudG8uZXFsKGV4cCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0IHRoYXQgYGFjdHVhbGAgaXMgbm90IGRlZXBseSBlcXVhbCB0byBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBFcXVhbCh7IHRlYTogJ2dyZWVuJyB9LCB7IHRlYTogJ2phc21pbmUnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwRXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5ub3REZWVwRXF1YWwsIHRydWUpLnRvLm5vdC5lcWwoZXhwKTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBYm92ZSh2YWx1ZVRvQ2hlY2ssIHZhbHVlVG9CZUFib3ZlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlVG9DaGVja2AgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuICg+KSBgdmFsdWVUb0JlQWJvdmVgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQWJvdmUoNSwgMiwgJzUgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIDInKTtcbiAgICpcbiAgICogQG5hbWUgaXNBYm92ZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQ2hlY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0JlQWJvdmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQWJvdmUgPSBmdW5jdGlvbiAodmFsLCBhYnYsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Fib3ZlLCB0cnVlKS50by5iZS5hYm92ZShhYnYpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0F0TGVhc3QodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBdExlYXN0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlVG9DaGVja2AgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICg+PSkgYHZhbHVlVG9CZUF0TGVhc3RgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQXRMZWFzdCg1LCAyLCAnNSBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIDInKTtcbiAgICogICAgIGFzc2VydC5pc0F0TGVhc3QoMywgMywgJzMgaXMgZ3JlYXRlciBvciBlcXVhbCB0byAzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXRMZWFzdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQ2hlY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0JlQXRMZWFzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNBdExlYXN0ID0gZnVuY3Rpb24gKHZhbCwgYXRsc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0F0TGVhc3QsIHRydWUpLnRvLmJlLmxlYXN0KGF0bHN0KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNCZWxvdyh2YWx1ZVRvQ2hlY2ssIHZhbHVlVG9CZUJlbG93LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlVG9DaGVja2AgaXMgc3RyaWN0bHkgbGVzcyB0aGFuICg8KSBgdmFsdWVUb0JlQmVsb3dgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQmVsb3coMywgNiwgJzMgaXMgc3RyaWN0bHkgbGVzcyB0aGFuIDYnKTtcbiAgICpcbiAgICogQG5hbWUgaXNCZWxvd1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQ2hlY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0JlQmVsb3dcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQmVsb3cgPSBmdW5jdGlvbiAodmFsLCBibHcsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0JlbG93LCB0cnVlKS50by5iZS5iZWxvdyhibHcpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0F0TW9zdCh2YWx1ZVRvQ2hlY2ssIHZhbHVlVG9CZUF0TW9zdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byAoPD0pIGB2YWx1ZVRvQmVBdE1vc3RgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQXRNb3N0KDMsIDYsICczIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byA2Jyk7XG4gICAqICAgICBhc3NlcnQuaXNBdE1vc3QoNCwgNCwgJzQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNBdE1vc3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUF0TW9zdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNBdE1vc3QgPSBmdW5jdGlvbiAodmFsLCBhdG1zdCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQXRNb3N0LCB0cnVlKS50by5iZS5tb3N0KGF0bXN0KTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1RydWUodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgdHJ1ZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWFTZXJ2ZWQgPSB0cnVlO1xuICAgKiAgICAgYXNzZXJ0LmlzVHJ1ZSh0ZWFTZXJ2ZWQsICd0aGUgdGVhIGhhcyBiZWVuIHNlcnZlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1RydWVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzVHJ1ZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc1RydWUsIHRydWUpLmlzWyd0cnVlJ107XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RUcnVlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCB0cnVlLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYSA9ICd0YXN0eSBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc05vdFRydWUodGVhLCAnZ3JlYXQsIHRpbWUgZm9yIHRlYSEnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RUcnVlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFRydWUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RUcnVlLCB0cnVlKS50by5ub3QuZXF1YWwodHJ1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNGYWxzZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBmYWxzZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWFTZXJ2ZWQgPSBmYWxzZTtcbiAgICogICAgIGFzc2VydC5pc0ZhbHNlKHRlYVNlcnZlZCwgJ25vIHRlYSB5ZXQ/IGhtbS4uLicpO1xuICAgKlxuICAgKiBAbmFtZSBpc0ZhbHNlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0ZhbHNlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRmFsc2UsIHRydWUpLmlzWydmYWxzZSddO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RmFsc2UodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgbm90IGZhbHNlLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYSA9ICd0YXN0eSBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc05vdEZhbHNlKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90RmFsc2VcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90RmFsc2UgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RGYWxzZSwgdHJ1ZSkudG8ubm90LmVxdWFsKGZhbHNlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc051bGwodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgbnVsbC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc051bGwoZXJyLCAndGhlcmUgd2FzIG5vIGVycm9yJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTnVsbFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOdWxsID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTnVsbCwgdHJ1ZSkudG8uZXF1YWwobnVsbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3ROdWxsKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBudWxsLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYSA9ICd0YXN0eSBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc05vdE51bGwodGVhLCAnZ3JlYXQsIHRpbWUgZm9yIHRlYSEnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3ROdWxsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdE51bGwgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3ROdWxsLCB0cnVlKS50by5ub3QuZXF1YWwobnVsbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOYU5cbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHZhbHVlIGlzIE5hTi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05hTihOYU4sICdOYU4gaXMgTmFOJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTmFOXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05hTiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05hTiwgdHJ1ZSkudG8uYmUuTmFOO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TmFOXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB2YWx1ZSBpcyBub3QgTmFOLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90TmFOKDQsICc0IGlzIG5vdCBOYU4nKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3ROYU5cbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGFzc2VydC5pc05vdE5hTiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE5hTiwgdHJ1ZSkubm90LnRvLmJlLk5hTjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5leGlzdHNcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbmVpdGhlciBgbnVsbGAgbm9yIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgdmFyIGZvbyA9ICdoaSc7XG4gICAqXG4gICAqICAgICBhc3NlcnQuZXhpc3RzKGZvbywgJ2ZvbyBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAnKTtcbiAgICpcbiAgICogQG5hbWUgZXhpc3RzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5leGlzdHMgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuZXhpc3RzLCB0cnVlKS50by5leGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RFeGlzdHNcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZWl0aGVyIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciBiYXIgPSBudWxsXG4gICAqICAgICAgICwgYmF6O1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEV4aXN0cyhiYXIpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEV4aXN0cyhiYXosICdiYXogaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEV4aXN0c1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RXhpc3RzID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lm5vdEV4aXN0cywgdHJ1ZSkudG8ubm90LmV4aXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzVW5kZWZpbmVkKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYTtcbiAgICogICAgIGFzc2VydC5pc1VuZGVmaW5lZCh0ZWEsICdubyB0ZWEgZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1VuZGVmaW5lZFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNVbmRlZmluZWQgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNVbmRlZmluZWQsIHRydWUpLnRvLmVxdWFsKHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNEZWZpbmVkKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAnY3VwIG9mIGNoYWknO1xuICAgKiAgICAgYXNzZXJ0LmlzRGVmaW5lZCh0ZWEsICd0ZWEgaGFzIGJlZW4gZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc0RlZmluZWRcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzRGVmaW5lZCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0RlZmluZWQsIHRydWUpLnRvLm5vdC5lcXVhbCh1bmRlZmluZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRnVuY3Rpb24odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIHNlcnZlVGVhKCkgeyByZXR1cm4gJ2N1cCBvZiB0ZWEnOyB9O1xuICAgKiAgICAgYXNzZXJ0LmlzRnVuY3Rpb24oc2VydmVUZWEsICdncmVhdCwgd2UgY2FuIGhhdmUgdGVhIG5vdycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Z1bmN0aW9uXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRnVuY3Rpb24sIHRydWUpLnRvLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RGdW5jdGlvbih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIGZ1bmN0aW9uLlxuICAgKlxuICAgKiAgICAgdmFyIHNlcnZlVGVhID0gWyAnaGVhdCcsICdwb3VyJywgJ3NpcCcgXTtcbiAgICogICAgIGFzc2VydC5pc05vdEZ1bmN0aW9uKHNlcnZlVGVhLCAnZ3JlYXQsIHdlIGhhdmUgbGlzdGVkIHRoZSBzdGVwcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90RnVuY3Rpb24sIHRydWUpLnRvLm5vdC5iZS5hKCdmdW5jdGlvbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzT2JqZWN0KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGFuIG9iamVjdCBvZiB0eXBlICdPYmplY3QnIChhcyByZXZlYWxlZCBieSBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2ApLlxuICAgKiBfVGhlIGFzc2VydGlvbiBkb2VzIG5vdCBtYXRjaCBzdWJjbGFzc2VkIG9iamVjdHMuX1xuICAgKlxuICAgKiAgICAgdmFyIHNlbGVjdGlvbiA9IHsgbmFtZTogJ0NoYWknLCBzZXJ2ZTogJ3dpdGggc3BpY2VzJyB9O1xuICAgKiAgICAgYXNzZXJ0LmlzT2JqZWN0KHNlbGVjdGlvbiwgJ3RlYSBzZWxlY3Rpb24gaXMgYW4gb2JqZWN0Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzT2JqZWN0XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc09iamVjdCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc09iamVjdCwgdHJ1ZSkudG8uYmUuYSgnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RPYmplY3QodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYW4gb2JqZWN0IG9mIHR5cGUgJ09iamVjdCcgKGFzIHJldmVhbGVkIGJ5IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCkuXG4gICAqXG4gICAqICAgICB2YXIgc2VsZWN0aW9uID0gJ2NoYWknXG4gICAqICAgICBhc3NlcnQuaXNOb3RPYmplY3Qoc2VsZWN0aW9uLCAndGVhIHNlbGVjdGlvbiBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RPYmplY3QobnVsbCwgJ251bGwgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdE9iamVjdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RPYmplY3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RPYmplY3QsIHRydWUpLnRvLm5vdC5iZS5hKCdvYmplY3QnKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0FycmF5KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGFuIGFycmF5LlxuICAgKlxuICAgKiAgICAgdmFyIG1lbnUgPSBbICdncmVlbicsICdjaGFpJywgJ29vbG9uZycgXTtcbiAgICogICAgIGFzc2VydC5pc0FycmF5KG1lbnUsICd3aGF0IGtpbmQgb2YgdGVhIGRvIHdlIHdhbnQ/Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXJyYXlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXJyYXkgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBcnJheSwgdHJ1ZSkudG8uYmUuYW4oJ2FycmF5Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RBcnJheSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhbiBhcnJheS5cbiAgICpcbiAgICogICAgIHZhciBtZW51ID0gJ2dyZWVufGNoYWl8b29sb25nJztcbiAgICogICAgIGFzc2VydC5pc05vdEFycmF5KG1lbnUsICd3aGF0IGtpbmQgb2YgdGVhIGRvIHdlIHdhbnQ/Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90QXJyYXlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90QXJyYXkgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RBcnJheSwgdHJ1ZSkudG8ubm90LmJlLmFuKCdhcnJheScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzU3RyaW5nKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYU9yZGVyID0gJ2NoYWknO1xuICAgKiAgICAgYXNzZXJ0LmlzU3RyaW5nKHRlYU9yZGVyLCAnb3JkZXIgcGxhY2VkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzU3RyaW5nXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1N0cmluZyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc1N0cmluZywgdHJ1ZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RTdHJpbmcodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBzdHJpbmcuXG4gICAqXG4gICAqICAgICB2YXIgdGVhT3JkZXIgPSA0O1xuICAgKiAgICAgYXNzZXJ0LmlzTm90U3RyaW5nKHRlYU9yZGVyLCAnb3JkZXIgcGxhY2VkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90U3RyaW5nXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFN0cmluZyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdFN0cmluZywgdHJ1ZSkudG8ubm90LmJlLmEoJ3N0cmluZycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTnVtYmVyKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgbnVtYmVyLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAyO1xuICAgKiAgICAgYXNzZXJ0LmlzTnVtYmVyKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTnVtYmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOdW1iZXIgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOdW1iZXIsIHRydWUpLnRvLmJlLmEoJ251bWJlcicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TnVtYmVyKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGEgbnVtYmVyLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAnMiBjdXBzIHBsZWFzZSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3ROdW1iZXIoY3VwcywgJ2hvdyBtYW55IGN1cHMnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3ROdW1iZXJcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90TnVtYmVyID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90TnVtYmVyLCB0cnVlKS50by5ub3QuYmUuYSgnbnVtYmVyJyk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzRmluaXRlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlci4gVW5saWtlIGAuaXNOdW1iZXJgLCB0aGlzIHdpbGwgZmFpbCBmb3IgYE5hTmAgYW5kIGBJbmZpbml0eWAuXG4gICAqXG4gICAqICAgICB2YXIgY3VwcyA9IDI7XG4gICAqICAgICBhc3NlcnQuaXNGaW5pdGUoY3VwcywgJ2hvdyBtYW55IGN1cHMnKTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc0Zpbml0ZShOYU4pOyAvLyB0aHJvd3NcbiAgICpcbiAgICogQG5hbWUgaXNGaW5pdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Zpbml0ZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Zpbml0ZSwgdHJ1ZSkudG8uYmUuZmluaXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzQm9vbGVhbih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIGJvb2xlYW4uXG4gICAqXG4gICAqICAgICB2YXIgdGVhUmVhZHkgPSB0cnVlXG4gICAqICAgICAgICwgdGVhU2VydmVkID0gZmFsc2U7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNCb29sZWFuKHRlYVJlYWR5LCAnaXMgdGhlIHRlYSByZWFkeScpO1xuICAgKiAgICAgYXNzZXJ0LmlzQm9vbGVhbih0ZWFTZXJ2ZWQsICdoYXMgdGVhIGJlZW4gc2VydmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQm9vbGVhblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNCb29sZWFuID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQm9vbGVhbiwgdHJ1ZSkudG8uYmUuYSgnYm9vbGVhbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90Qm9vbGVhbih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIGJvb2xlYW4uXG4gICAqXG4gICAqICAgICB2YXIgdGVhUmVhZHkgPSAneWVwJ1xuICAgKiAgICAgICAsIHRlYVNlcnZlZCA9ICdub3BlJztcbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEJvb2xlYW4odGVhUmVhZHksICdpcyB0aGUgdGVhIHJlYWR5Jyk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RCb29sZWFuKHRlYVNlcnZlZCwgJ2hhcyB0ZWEgYmVlbiBzZXJ2ZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RCb29sZWFuXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEJvb2xlYW4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RCb29sZWFuLCB0cnVlKS50by5ub3QuYmUuYSgnYm9vbGVhbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnR5cGVPZih2YWx1ZSwgbmFtZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCdzIHR5cGUgaXMgYG5hbWVgLCBhcyBkZXRlcm1pbmVkIGJ5XG4gICAqIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICpcbiAgICogICAgIGFzc2VydC50eXBlT2YoeyB0ZWE6ICdjaGFpJyB9LCAnb2JqZWN0JywgJ3dlIGhhdmUgYW4gb2JqZWN0Jyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKFsnY2hhaScsICdqYXNtaW5lJ10sICdhcnJheScsICd3ZSBoYXZlIGFuIGFycmF5Jyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKCd0ZWEnLCAnc3RyaW5nJywgJ3dlIGhhdmUgYSBzdHJpbmcnKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YoL3RlYS8sICdyZWdleHAnLCAnd2UgaGF2ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbicpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZihudWxsLCAnbnVsbCcsICd3ZSBoYXZlIGEgbnVsbCcpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZih1bmRlZmluZWQsICd1bmRlZmluZWQnLCAnd2UgaGF2ZSBhbiB1bmRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgdHlwZU9mXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC50eXBlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQudHlwZU9mLCB0cnVlKS50by5iZS5hKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFR5cGVPZih2YWx1ZSwgbmFtZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCdzIHR5cGUgaXMgX25vdF8gYG5hbWVgLCBhcyBkZXRlcm1pbmVkIGJ5XG4gICAqIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RUeXBlT2YoJ3RlYScsICdudW1iZXInLCAnc3RyaW5ncyBhcmUgbm90IG51bWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90VHlwZU9mXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlb2YgbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90VHlwZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lm5vdFR5cGVPZiwgdHJ1ZSkudG8ubm90LmJlLmEodHlwZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaW5zdGFuY2VPZihvYmplY3QsIGNvbnN0cnVjdG9yLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGFuIGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAuXG4gICAqXG4gICAqICAgICB2YXIgVGVhID0gZnVuY3Rpb24gKG5hbWUpIHsgdGhpcy5uYW1lID0gbmFtZTsgfVxuICAgKiAgICAgICAsIGNoYWkgPSBuZXcgVGVhKCdjaGFpJyk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5zdGFuY2VPZihjaGFpLCBUZWEsICdjaGFpIGlzIGFuIGluc3RhbmNlIG9mIHRlYScpO1xuICAgKlxuICAgKiBAbmFtZSBpbnN0YW5jZU9mXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmluc3RhbmNlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaW5zdGFuY2VPZiwgdHJ1ZSkudG8uYmUuaW5zdGFuY2VPZih0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RJbnN0YW5jZU9mKG9iamVjdCwgY29uc3RydWN0b3IsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBgdmFsdWVgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgLlxuICAgKlxuICAgKiAgICAgdmFyIFRlYSA9IGZ1bmN0aW9uIChuYW1lKSB7IHRoaXMubmFtZSA9IG5hbWU7IH1cbiAgICogICAgICAgLCBjaGFpID0gbmV3IFN0cmluZygnY2hhaScpO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluc3RhbmNlT2YoY2hhaSwgVGVhLCAnY2hhaSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgdGVhJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluc3RhbmNlT2ZcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge0NvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5zdGFuY2VPZiA9IGZ1bmN0aW9uICh2YWwsIHR5cGUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RJbnN0YW5jZU9mLCB0cnVlKVxuICAgICAgLnRvLm5vdC5iZS5pbnN0YW5jZU9mKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBpbmNsdWRlcyBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZVxuICAgKiBpbmNsdXNpb24gb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSwgYSBzdWJzdHJpbmcgaW4gYSBzdHJpbmcsIG9yIGEgc3Vic2V0IG9mXG4gICAqIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoWzEsMiwzXSwgMiwgJ2FycmF5IGNvbnRhaW5zIHZhbHVlJyk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSgnZm9vYmFyJywgJ2ZvbycsICdzdHJpbmcgY29udGFpbnMgc3Vic3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSh7IGZvbzogJ2JhcicsIGhlbGxvOiAndW5pdmVyc2UnIH0sIHsgZm9vOiAnYmFyJyB9LCAnb2JqZWN0IGNvbnRhaW5zIHByb3BlcnR5Jyk7XG4gICAqXG4gICAqIFN0cmljdCBlcXVhbGl0eSAoPT09KSBpcyB1c2VkLiBXaGVuIGFzc2VydGluZyB0aGUgaW5jbHVzaW9uIG9mIGEgdmFsdWUgaW5cbiAgICogYW4gYXJyYXksIHRoZSBhcnJheSBpcyBzZWFyY2hlZCBmb3IgYW4gZWxlbWVudCB0aGF0J3Mgc3RyaWN0bHkgZXF1YWwgdG8gdGhlXG4gICAqIGdpdmVuIHZhbHVlLiBXaGVuIGFzc2VydGluZyBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdCwgdGhlIG9iamVjdFxuICAgKiBpcyBzZWFyY2hlZCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5IGtleXMsIGNoZWNraW5nIHRoYXQgZWFjaCBvbmUgaXMgcHJlc2VudFxuICAgKiBhbmQgc3RyaWN0eSBlcXVhbCB0byB0aGUgZ2l2ZW4gcHJvcGVydHkgdmFsdWUuIEZvciBpbnN0YW5jZTpcbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKFtvYmoxLCBvYmoyXSwgb2JqMSk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiBvYmoxfSk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9KTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuaW5jbHVkZSwgdHJ1ZSkuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBkb2VzIG5vdCBpbmNsdWRlIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnRcbiAgICogdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSwgYSBzdWJzdHJpbmcgaW4gYSBzdHJpbmcsIG9yIGEgc3Vic2V0IG9mXG4gICAqIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoWzEsMiwzXSwgNCwgJ2FycmF5IGRvZXNuJ3QgY29udGFpbiB2YWx1ZScpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoJ2Zvb2JhcicsICdiYXonLCAnc3RyaW5nIGRvZXNuJ3QgY29udGFpbiBzdWJzdHJpbmcnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHsgZm9vOiAnYmFyJywgaGVsbG86ICd1bml2ZXJzZScgfSwgeyBmb286ICdiYXonIH0sICdvYmplY3QgZG9lc24ndCBjb250YWluIHByb3BlcnR5Jyk7XG4gICAqXG4gICAqIFN0cmljdCBlcXVhbGl0eSAoPT09KSBpcyB1c2VkLiBXaGVuIGFzc2VydGluZyB0aGUgYWJzZW5jZSBvZiBhIHZhbHVlIGluIGFuXG4gICAqIGFycmF5LCB0aGUgYXJyYXkgaXMgc2VhcmNoZWQgdG8gY29uZmlybSB0aGUgYWJzZW5jZSBvZiBhbiBlbGVtZW50IHRoYXQnc1xuICAgKiBzdHJpY3RseSBlcXVhbCB0byB0aGUgZ2l2ZW4gdmFsdWUuIFdoZW4gYXNzZXJ0aW5nIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW5cbiAgICogYW4gb2JqZWN0LCB0aGUgb2JqZWN0IGlzIHNlYXJjaGVkIHRvIGNvbmZpcm0gdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuXG4gICAqIHByb3BlcnR5IGtleXMgaXMgZWl0aGVyIG5vdCBwcmVzZW50IG9yIG5vdCBzdHJpY3RseSBlcXVhbCB0byB0aGUgZ2l2ZW5cbiAgICogcHJvcGVydHkgdmFsdWUuIEZvciBpbnN0YW5jZTpcbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDF9KTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMSwgYmFyOiB7YjogMn19KTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZSwgdHJ1ZSkubm90LmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgaGF5c3RhY2tgIGluY2x1ZGVzIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlXG4gICAqIGluY2x1c2lvbiBvZiBhIHZhbHVlIGluIGFuIGFycmF5IG9yIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKiBEZWVwIGVxdWFsaXR5IGlzIHVzZWQuXG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQuZGVlcEluY2x1ZGUoW29iajEsIG9iajJdLCB7YTogMX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfSwgYmFyOiB7YjogMn19KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcEluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5kZWVwSW5jbHVkZSwgdHJ1ZSkuZGVlcC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBkb2VzIG5vdCBpbmNsdWRlIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnRcbiAgICogdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSBvciBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICogRGVlcCBlcXVhbGl0eSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgdmFyIG9iajEgPSB7YTogMX1cbiAgICogICAgICAgLCBvYmoyID0ge2I6IDJ9O1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDl9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogOX19KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX0sIGJhcjoge2I6IDl9fSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBJbmNsdWRlXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge01peGVkfSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90RGVlcEluY2x1ZGUsIHRydWUpLm5vdC5kZWVwLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5uZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLiBcbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0LlxuICAgKiBFbmFibGVzIHRoZSB1c2Ugb2YgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgcmVmZXJlbmNpbmcgbmVzdGVkIFxuICAgKiBwcm9wZXJ0aWVzLlxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5uZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J2InOiAneCd9fSwgeydcXFxcLmEuW2JdJzogJ3gnfSk7XG4gICAqICAgICBhc3NlcnQubmVzdGVkSW5jbHVkZSh7J2EnOiB7J1tiXSc6ICd4J319LCB7J2EuXFxcXFtiXFxcXF0nOiAneCd9KTtcbiAgICogXG4gICAqIEBuYW1lIG5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqLyBcblxuICBhc3NlcnQubmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUsIHRydWUpLm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90TmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBkb2VzIG5vdCBpbmNsdWRlICduZWVkbGUnLiBcbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdC5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZCBcbiAgICogcHJvcGVydGllcy4gXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUoeycuYSc6IHsnYic6ICd4J319LCB7J1xcXFwuYS5iJzogJ3knfSk7XG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkSW5jbHVkZSh7J2EnOiB7J1tiXSc6ICd4J319LCB7J2EuXFxcXFtiXFxcXF0nOiAneSd9KTtcbiAgICogXG4gICAqIEBuYW1lIG5vdE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqLyBcblxuICBhc3NlcnQubm90TmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUsIHRydWUpXG4gICAgICAubm90Lm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcE5lc3RlZEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBjaGVja2luZyBmb3IgZGVlcCBlcXVhbGl0eS5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZCBcbiAgICogcHJvcGVydGllcy5cbiAgICogJ1tdJyBhbmQgJy4nIGluIHByb3BlcnR5IG5hbWVzIGNhbiBiZSBlc2NhcGVkIHVzaW5nIGRvdWJsZSBiYWNrc2xhc2hlcy5cbiAgICogXG4gICAqICAgICBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUoe2E6IHtiOiBbe3g6IDF9XX19LCB7J2EuYlswXSc6IHt4OiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J1tiXSc6IHt4OiAxfX19LCB7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IHt4OiAxfX0pO1xuICAgKiAgICBcbiAgICogQG5hbWUgZGVlcE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwTmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUsIHRydWUpXG4gICAgICAuZGVlcC5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBOZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGRvZXMgbm90IGluY2x1ZGUgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWQgXG4gICAqIHByb3BlcnRpZXMuXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlKHthOiB7YjogW3t4OiAxfV19fSwgeydhLmJbMF0nOiB7eTogMX19KVxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J1tiXSc6IHt4OiAxfX19LCB7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IHt5OiAyfX0pO1xuICAgKiAgICBcbiAgICogQG5hbWUgbm90RGVlcE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwTmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90RGVlcE5lc3RlZEluY2x1ZGUsIHRydWUpXG4gICAgICAubm90LmRlZXAubmVzdGVkLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5vd25JbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGluY2x1c2lvbiBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0Lm93bkluY2x1ZGUoeyBhOiAxIH0sIHsgYTogMSB9KTtcbiAgICogXG4gICAqIEBuYW1lIG93bkluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm93bkluY2x1ZGUsIHRydWUpLm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcy5cbiAgICogXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKiBcbiAgICogICAgIGFzc2VydC5ub3RPd25JbmNsdWRlKHsgYTogMSB9LCB7IGI6IDIgfSk7XG4gICAqIFxuICAgKiBAbmFtZSBub3RPd25JbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3RPd25JbmNsdWRlLCB0cnVlKS5ub3Qub3duLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwT3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0IHdoaWxlIGlnbm9yaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFuZCBjaGVja2luZyBmb3IgZGVlcCBlcXVhbGl0eS5cbiAgICogXG4gICAqICAgICAgYXNzZXJ0LmRlZXBPd25JbmNsdWRlKHthOiB7YjogMn19LCB7YToge2I6IDJ9fSk7XG4gICAqICAgICAgXG4gICAqIEBuYW1lIGRlZXBPd25JbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwT3duSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuZGVlcE93bkluY2x1ZGUsIHRydWUpXG4gICAgICAuZGVlcC5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5ub3REZWVwT3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcyBhbmQgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIFxuICAgKiAgICAgIGFzc2VydC5ub3REZWVwT3duSW5jbHVkZSh7YToge2I6IDJ9fSwge2E6IHtjOiAzfX0pO1xuICAgKiAgICAgIFxuICAgKiBAbmFtZSBub3REZWVwT3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBPd25JbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5kZWVwLm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubWF0Y2godmFsdWUsIHJlZ2V4cCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBtYXRjaGVzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYHJlZ2V4cGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubWF0Y2goJ2Zvb2JhcicsIC9eZm9vLywgJ3JlZ2V4cCBtYXRjaGVzJyk7XG4gICAqXG4gICAqIEBuYW1lIG1hdGNoXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZWdleHBcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm1hdGNoID0gZnVuY3Rpb24gKGV4cCwgcmUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5tYXRjaCwgdHJ1ZSkudG8ubWF0Y2gocmUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE1hdGNoKHZhbHVlLCByZWdleHAsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgZG9lcyBub3QgbWF0Y2ggdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBgcmVnZXhwYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RNYXRjaCgnZm9vYmFyJywgL15mb28vLCAncmVnZXhwIGRvZXMgbm90IG1hdGNoJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE1hdGNoXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZWdleHBcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE1hdGNoID0gZnVuY3Rpb24gKGV4cCwgcmUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3RNYXRjaCwgdHJ1ZSkudG8ubm90Lm1hdGNoKHJlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkIGJ5XG4gICAqIGBwcm9wZXJ0eWAuXG4gICAqXG4gICAqICAgICBhc3NlcnQucHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhJyk7XG4gICAqICAgICBhc3NlcnQucHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndG9TdHJpbmcnKTtcbiAgICpcbiAgICogQG5hbWUgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LnByb3BlcnR5LCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWRcbiAgICogYnkgYHByb3BlcnR5YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUnKTtcbiAgICpcbiAgICogQG5hbWUgbm90UHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkIGJ5XG4gICAqIGBwcm9wZXJ0eWAgd2l0aCBhIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2tcbiAgICogKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQucHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBnb29kJyB9LCAndGVhJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgcHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQucHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAgd2l0aCB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAqICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFByb3BlcnR5VmFsKHsgdGVhOiAnaXMgZ29vZCcgfSwgJ3RlYScsICdpcyBiYWQnKTtcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCh7IHRlYTogJ2lzIGdvb2QnIH0sICdjb2ZmZWUnLCAnaXMgZ29vZCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90UHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgIHdpdGggYSB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWRcbiAgICogYnkgYHByb3BlcnR5YCB3aXRoIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBibGFjazogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnb29sb25nJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ2NvZmZlZScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5kZWVwLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAuIEluaGVyaXRlZFxuICAgKiBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm93blByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYScpO1xuICAgKlxuICAgKiBAbmFtZSBvd25Qcm9wZXJ0eVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQub3duUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQub3duUHJvcGVydHksIHRydWUpXG4gICAgICAudG8uaGF2ZS5vd24ucHJvcGVydHkocHJvcCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5XG4gICAqIGBwcm9wZXJ0eWAuIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ2NvZmZlZScpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5KHt9LCAndG9TdHJpbmcnKTtcbiAgICpcbiAgICogQG5hbWUgbm90T3duUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE93blByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE93blByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm93bi5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5vd25Qcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgYW5kIGEgdmFsdWVcbiAgICogZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm93blByb3BlcnR5VmFsKHsgY29mZmVlOiAnaXMgZ29vZCd9LCAnY29mZmVlJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgb3duUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm93bi5wcm9wZXJ0eShwcm9wLCB2YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgXG4gICAqIHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aGUgcHJvdmlkZWQgYHZhbHVlYC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVja1xuICAgKiAoPT09KS4gSW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90T3duUHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBiZXR0ZXInfSwgJ3RlYScsICdpcyB3b3JzZScpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsKHt9LCAndG9TdHJpbmcnLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgICpcbiAgICogQG5hbWUgbm90T3duUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBPd25Qcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgYW5kIGEgdmFsdWVcbiAgICogZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLiBJbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwT3duUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBPd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZGVlcE93blByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuZGVlcC5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBPd25Qcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWBcbiAgICogd2l0aCBhIHZhbHVlIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICogSW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGJsYWNrOiAnbWF0Y2hhJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgZ3JlZW46ICdvb2xvbmcnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAnY29mZmVlJywgeyBncmVlbjogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHt9LCAndG9TdHJpbmcnLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWx1ZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5kZWVwLm93bi5wcm9wZXJ0eShwcm9wLCB2YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLCB3aGljaCBjYW4gYmUgYSBzdHJpbmcgdXNpbmcgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3JcbiAgICogbmVzdGVkIHJlZmVyZW5jZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICd0ZWEuZ3JlZW4nKTtcbiAgICpcbiAgICogQG5hbWUgbmVzdGVkUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAsIHdoaWNoXG4gICAqIGNhbiBiZSBhIHN0cmluZyB1c2luZyBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWQgcmVmZXJlbmNlLiBUaGVcbiAgICogcHJvcGVydHkgY2Fubm90IGV4aXN0IG9uIHRoZSBvYmplY3Qgbm9yIGFueXdoZXJlIGluIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLm9vbG9uZycpO1xuICAgKlxuICAgKiBAbmFtZSBub3ROZXN0ZWRQcm9wZXJ0eVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90TmVzdGVkUHJvcGVydHksIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUubmVzdGVkLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIHdpdGggdmFsdWUgZ2l2ZW5cbiAgICogYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIG5lc3RlZFxuICAgKiByZWZlcmVuY2UuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJywgJ21hdGNoYScpO1xuICAgKlxuICAgKiBAbmFtZSBuZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIHdpdGhcbiAgICogdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJywgJ2tvbmFjaGEnKTtcbiAgICogICAgIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUuZ3JlZW4nLCAnbWF0Y2hhJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoIGEgdmFsdWUgZ2l2ZW5cbiAgICogYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIG5lc3RlZFxuICAgKiByZWZlcmVuY2UuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogeyBtYXRjaGE6ICd5dW0nIH0gfSB9LCAndGVhLmdyZWVuJywgeyBtYXRjaGE6ICd5dW0nIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwTmVzdGVkUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIHdpdGhcbiAgICogdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogeyBtYXRjaGE6ICd5dW0nIH0gfSB9LCAndGVhLmdyZWVuJywgeyBvb2xvbmc6ICd5dW0nIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogeyBtYXRjaGE6ICd5dW0nIH0gfSB9LCAndGVhLmdyZWVuJywgeyBtYXRjaGE6ICd5dWNrJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ibGFjaycsIHsgbWF0Y2hhOiAneXVtJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmxlbmd0aE9mKG9iamVjdCwgbGVuZ3RoLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBgbGVuZ3RoYCBwcm9wZXJ0eSB3aXRoIHRoZSBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5sZW5ndGhPZihbMSwyLDNdLCAzLCAnYXJyYXkgaGFzIGxlbmd0aCBvZiAzJyk7XG4gICAqICAgICBhc3NlcnQubGVuZ3RoT2YoJ2Zvb2JhcicsIDYsICdzdHJpbmcgaGFzIGxlbmd0aCBvZiA2Jyk7XG4gICAqXG4gICAqIEBuYW1lIGxlbmd0aE9mXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5sZW5ndGhPZiA9IGZ1bmN0aW9uIChleHAsIGxlbiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lmxlbmd0aE9mLCB0cnVlKS50by5oYXZlLmxlbmd0aE9mKGxlbik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaGFzQW55S2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnaURvbnRFeGlzdCcsICdiYXonXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtmb286IDMwLCBpRG9udEV4aXN0OiA5OSwgYmF6OiAxMzM3fSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX0sICdrZXknXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pLCBbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKTtcbiAgICpcbiAgICogQG5hbWUgaGFzQW55S2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FueUtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaGFzQW55S2V5cywgdHJ1ZSkudG8uaGF2ZS5hbnkua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmhhc0FsbEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhbGwgYW5kIG9ubHkgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdiYXInLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgYmFyOiA5OSwgYmF6OiAxMzM3XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX0sICdrZXknXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pO1xuICAgKlxuICAgKiBAbmFtZSBoYXNBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbGxLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FsbEtleXMsIHRydWUpLnRvLmhhdmUuYWxsLmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jb250YWluc0FsbEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhbGwgb2YgdGhlIGBrZXlzYCBwcm92aWRlZCBidXQgbWF5IGhhdmUgbW9yZSBrZXlzIG5vdCBsaXN0ZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnZm9vJywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdiYXInLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtmb286IDMwLCBiYXo6IDEzMzd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgYmFyOiA5OSwgYmF6OiAxMzM3fSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7Zm9vOiAxfV0pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX0sICdrZXknXSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tmb286ICdiYXInfV0pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pO1xuICAgKlxuICAgKiBAbmFtZSBjb250YWluc0FsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5jb250YWluc0FsbEtleXMsIHRydWUpXG4gICAgICAudG8uY29udGFpbi5hbGwua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQW55S2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIG5vbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydvbmUnLCAndHdvJywgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge29uZTogMSwgdHdvOiAyLCBleGFtcGxlOiAnZm9vJ30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbnlLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFueS5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbGxLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIG5vdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ29uZScsICd0d28nLCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7b25lOiAxLCB0d286IDIsIGV4YW1wbGU6ICdmb28nfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7b25lOiAndHdvJ30sICdleGFtcGxlJ10pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7b25lOiAndHdvJ30sICdleGFtcGxlJ10pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYWxsLmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5oYXNBbnlEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgW3t0d286ICd0d28nfSwgJ3ZhbHVlVHdvJ11dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dGhyZWU6ICd0aHJlZSd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQWxsS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FueURlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuYW55LmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuaGFzQWxsRGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhbGwgYW5kIG9ubHkgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddXSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKlxuICAgKiBAbmFtZSBoYXNBbGxEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuYWxsLmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuY29udGFpbnNBbGxEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgY29udGFpbnMgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKlxuICAgKiBAbmFtZSBjb250YWluc0FsbERlZXBLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLmNvbnRhaW4uYWxsLmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIG5vbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHt0aGlzRG9lc05vdDogJ2V4aXN0J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7dHdlbnR5OiAndHdlbnR5J30sIHtmaWZ0eTogJ2ZpZnR5J31dKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHt0d2VudHk6ICd0d2VudHknfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe3R3ZW50eTogJ3R3ZW50eSd9LCB7ZmlmdHk6ICdmaWZ0eSd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQW55RGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYW55LmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBub3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHt0aGlzRG9lc05vdDogJ2V4aXN0J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7dHdlbnR5OiAndHdlbnR5J30sIHtvbmU6ICdvbmUnfV0pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge3R3ZW50eTogJ3R3ZW50eSd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHtmaWZ0eTogJ2ZpZnR5J31dKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbGxEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5hbGwuZGVlcC5rZXlzKGtleXMpO1xuICB9XG5cbiAvKipcbiAgICogIyMjIC50aHJvd3MoZm4sIFtlcnJvckxpa2Uvc3RyaW5nL3JlZ2V4cF0sIFtzdHJpbmcvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBJZiBgZXJyb3JMaWtlYCBpcyBhbiBgRXJyb3JgIGNvbnN0cnVjdG9yLCBhc3NlcnRzIHRoYXQgYGZuYCB3aWxsIHRocm93IGFuIGVycm9yIHRoYXQgaXMgYW5cbiAgICogaW5zdGFuY2Ugb2YgYGVycm9yTGlrZWAuXG4gICAqIElmIGBlcnJvckxpa2VgIGlzIGFuIGBFcnJvcmAgaW5zdGFuY2UsIGFzc2VydHMgdGhhdCB0aGUgZXJyb3IgdGhyb3duIGlzIHRoZSBzYW1lXG4gICAqIGluc3RhbmNlIGFzIGBlcnJvckxpa2VgLlxuICAgKiBJZiBgZXJyTXNnTWF0Y2hlcmAgaXMgcHJvdmlkZWQsIGl0IGFsc28gYXNzZXJ0cyB0aGF0IHRoZSBlcnJvciB0aHJvd24gd2lsbCBoYXZlIGFcbiAgICogbWVzc2FnZSBtYXRjaGluZyBgZXJyTXNnTWF0Y2hlcmAuXG4gICAqXG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCAnZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yJyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCAvZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yLyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvcik7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBlcnJvckluc3RhbmNlKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIFJlZmVyZW5jZUVycm9yLCAnRXJyb3IgdGhyb3duIG11c3QgYmUgYSBSZWZlcmVuY2VFcnJvciBhbmQgaGF2ZSB0aGlzIG1zZycpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSwgJ0Vycm9yIHRocm93biBtdXN0IGJlIHRoZSBzYW1lIGVycm9ySW5zdGFuY2UgYW5kIGhhdmUgdGhpcyBtc2cnKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIFJlZmVyZW5jZUVycm9yLCAvRXJyb3IgdGhyb3duIG11c3QgYmUgYSBSZWZlcmVuY2VFcnJvciBhbmQgbWF0Y2ggdGhpcy8pO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSwgL0Vycm9yIHRocm93biBtdXN0IGJlIHRoZSBzYW1lIGVycm9ySW5zdGFuY2UgYW5kIG1hdGNoIHRoaXMvKTtcbiAgICpcbiAgICogQG5hbWUgdGhyb3dzXG4gICAqIEBhbGlhcyB0aHJvd1xuICAgKiBAYWxpYXMgVGhyb3dcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtFcnJvckNvbnN0cnVjdG9yfEVycm9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBlcnJNc2dNYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBlcnJvckxpa2UgfHwgZXJyb3JMaWtlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBlcnJNc2dNYXRjaGVyID0gZXJyb3JMaWtlO1xuICAgICAgZXJyb3JMaWtlID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgYXNzZXJ0RXJyID0gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQudGhyb3dzLCB0cnVlKVxuICAgICAgLnRvLnRocm93KGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlcik7XG4gICAgcmV0dXJuIGZsYWcoYXNzZXJ0RXJyLCAnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdFRocm93KGZuLCBbZXJyb3JMaWtlL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICpcbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBjb25zdHJ1Y3RvciwgYXNzZXJ0cyB0aGF0IGBmbmAgd2lsbCBfbm90XyB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuXG4gICAqIGluc3RhbmNlIG9mIGBlcnJvckxpa2VgLlxuICAgKiBJZiBgZXJyb3JMaWtlYCBpcyBhbiBgRXJyb3JgIGluc3RhbmNlLCBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biBpcyBfbm90XyB0aGUgc2FtZVxuICAgKiBpbnN0YW5jZSBhcyBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVyck1zZ01hdGNoZXJgIGlzIHByb3ZpZGVkLCBpdCBhbHNvIGFzc2VydHMgdGhhdCB0aGUgZXJyb3IgdGhyb3duIHdpbGwgX25vdF8gaGF2ZSBhXG4gICAqIG1lc3NhZ2UgbWF0Y2hpbmcgYGVyck1zZ01hdGNoZXJgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgJ0FueSBFcnJvciB0aHJvd24gbXVzdCBub3QgaGF2ZSB0aGlzIG1lc3NhZ2UnKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIC9BbnkgRXJyb3IgdGhyb3duIG11c3Qgbm90IG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIEVycm9yKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgRXJyb3IsICdFcnJvciBtdXN0IG5vdCBoYXZlIHRoaXMgbWVzc2FnZScpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgZXJyb3JJbnN0YW5jZSwgJ0Vycm9yIG11c3Qgbm90IGhhdmUgdGhpcyBtZXNzYWdlJyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBFcnJvciwgL0Vycm9yIG11c3Qgbm90IG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UsIC9FcnJvciBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RUaHJvd1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZVxuICAgKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd9IGVyck1zZ01hdGNoZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24gKGZuLCBlcnJvckxpa2UsIGVyck1zZ01hdGNoZXIsIG1zZykge1xuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGVycm9yTGlrZSB8fCBlcnJvckxpa2UgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIGVyck1zZ01hdGNoZXIgPSBlcnJvckxpa2U7XG4gICAgICBlcnJvckxpa2UgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RUaHJvdywgdHJ1ZSlcbiAgICAgIC50by5ub3QudGhyb3coZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5vcGVyYXRvcih2YWwxLCBvcGVyYXRvciwgdmFsMiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBDb21wYXJlcyB0d28gdmFsdWVzIHVzaW5nIGBvcGVyYXRvcmAuXG4gICAqXG4gICAqICAgICBhc3NlcnQub3BlcmF0b3IoMSwgJzwnLCAyLCAnZXZlcnl0aGluZyBpcyBvaycpO1xuICAgKiAgICAgYXNzZXJ0Lm9wZXJhdG9yKDEsICc+JywgMiwgJ3RoaXMgd2lsbCBmYWlsJyk7XG4gICAqXG4gICAqIEBuYW1lIG9wZXJhdG9yXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbDFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm9wZXJhdG9yID0gZnVuY3Rpb24gKHZhbCwgb3BlcmF0b3IsIHZhbDIsIG1zZykge1xuICAgIHZhciBvaztcbiAgICBzd2l0Y2gob3BlcmF0b3IpIHtcbiAgICAgIGNhc2UgJz09JzpcbiAgICAgICAgb2sgPSB2YWwgPT0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc9PT0nOlxuICAgICAgICBvayA9IHZhbCA9PT0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc+JzpcbiAgICAgICAgb2sgPSB2YWwgPiB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgb2sgPSB2YWwgPj0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgb2sgPSB2YWwgPCB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgb2sgPSB2YWwgPD0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICchPSc6XG4gICAgICAgIG9rID0gdmFsICE9IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnIT09JzpcbiAgICAgICAgb2sgPSB2YWwgIT09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbXNnID0gbXNnID8gbXNnICsgJzogJyA6IG1zZztcbiAgICAgICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgbXNnICsgJ0ludmFsaWQgb3BlcmF0b3IgXCInICsgb3BlcmF0b3IgKyAnXCInLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBhc3NlcnQub3BlcmF0b3JcbiAgICAgICAgKTtcbiAgICB9XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKG9rLCBtc2csIGFzc2VydC5vcGVyYXRvciwgdHJ1ZSk7XG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIHRydWUgPT09IGZsYWcodGVzdCwgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAnICsgdXRpbC5pbnNwZWN0KHZhbCkgKyAnIHRvIGJlICcgKyBvcGVyYXRvciArICcgJyArIHV0aWwuaW5zcGVjdCh2YWwyKVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIHV0aWwuaW5zcGVjdCh2YWwpICsgJyB0byBub3QgYmUgJyArIG9wZXJhdG9yICsgJyAnICsgdXRpbC5pbnNwZWN0KHZhbDIpICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuY2xvc2VUbyhhY3R1YWwsIGV4cGVjdGVkLCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCBgZXhwZWN0ZWRgLCB0byB3aXRoaW4gYSArLy0gYGRlbHRhYCByYW5nZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5jbG9zZVRvKDEuNSwgMSwgMC41LCAnbnVtYmVycyBhcmUgY2xvc2UnKTtcbiAgICpcbiAgICogQG5hbWUgY2xvc2VUb1xuICAgKiBAcGFyYW0ge051bWJlcn0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNsb3NlVG8gPSBmdW5jdGlvbiAoYWN0LCBleHAsIGRlbHRhLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuY2xvc2VUbywgdHJ1ZSkudG8uYmUuY2xvc2VUbyhleHAsIGRlbHRhKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5hcHByb3hpbWF0ZWx5KGFjdHVhbCwgZXhwZWN0ZWQsIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIGBleHBlY3RlZGAsIHRvIHdpdGhpbiBhICsvLSBgZGVsdGFgIHJhbmdlLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmFwcHJveGltYXRlbHkoMS41LCAxLCAwLjUsICdudW1iZXJzIGFyZSBjbG9zZScpO1xuICAgKlxuICAgKiBAbmFtZSBhcHByb3hpbWF0ZWx5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhY3R1YWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuYXBwcm94aW1hdGVseSA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgZGVsdGEsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5hcHByb3hpbWF0ZWx5LCB0cnVlKVxuICAgICAgLnRvLmJlLmFwcHJveGltYXRlbHkoZXhwLCBkZWx0YSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZU1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5zYW1lTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAzIF0sICdzYW1lIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZU1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lTWVtYmVycyA9IGZ1bmN0aW9uIChzZXQxLCBzZXQyLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHNldDEsIG1zZywgYXNzZXJ0LnNhbWVNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90U2FtZU1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci5cbiAgICogVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RTYW1lTWVtYmVycyhbIDEsIDIsIDMgXSwgWyA1LCAxLCAzIF0sICdub3Qgc2FtZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFNhbWVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZU1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5zYW1lLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5zYW1lRGVlcE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQuc2FtZURlZXBNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbeyBiOiAyIH0sIHsgYTogMSB9LCB7IGM6IDMgfV0sICdzYW1lIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBzYW1lRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lRGVlcE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaGF2ZS5zYW1lLmRlZXAubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVEZWVwTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBkb24ndCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gYW55IG9yZGVyLlxuICAgKiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RTYW1lRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFt7IGI6IDIgfSwgeyBhOiAxIH0sIHsgZjogNSB9XSwgJ25vdCBzYW1lIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lRGVlcE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5kZWVwLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5zYW1lT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnNhbWVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAxLCAyLCAzIF0sICdzYW1lIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBzYW1lT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaGF2ZS5zYW1lLm9yZGVyZWQubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVPcmRlcmVkTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBkb24ndCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gdGhlIHNhbWVcbiAgICogb3JkZXIuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDEsIDMgXSwgJ25vdCBzYW1lIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICogVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgJ3NhbWUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnNhbWVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lXG4gICAqIG9yZGVyLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogYXNzZXJ0Lm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IHo6IDUgfSBdLCAnbm90IHNhbWUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogYXNzZXJ0Lm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9LCB7IGM6IDMgfSBdLCAnbm90IHNhbWUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAyIF0sICdpbmNsdWRlIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZU1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGFcbiAgICogc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDUsIDEgXSwgJ25vdCBpbmNsdWRlIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZU1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlRGVlcE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYSBkZWVwXG4gICAqIGVxdWFsaXR5IGNoZWNrLiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGI6IDIgfSwgeyBhOiAxIH0sIHsgYjogMiB9IF0sICdpbmNsdWRlIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQuaW5jbHVkZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmluY2x1ZGUuZGVlcC5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXNuJ3QgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBkZWVwIGVxdWFsaXR5IGNoZWNrLiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGI6IDIgfSwgeyBmOiA1IH0gXSwgJ25vdCBpbmNsdWRlIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbmNsdWRlRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNsdWRlLmRlZXAubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZU9yZGVyZWRNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzIGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gdGhlIHNhbWUgb3JkZXJcbiAgICogYmVnaW5uaW5nIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQgaW4gYHN1cGVyc2V0YC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMSwgMiBdLCAnaW5jbHVkZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gdGhlIHNhbWUgb3JkZXJcbiAgICogYmVnaW5uaW5nIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQgaW4gYHN1cGVyc2V0YC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSBdLCAnbm90IGluY2x1ZGUgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDMgXSwgJ25vdCBpbmNsdWRlIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5XG4gICAqIGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBhOiAxIH0sIHsgYjogMiB9IF0sICdpbmNsdWRlIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5XG4gICAqIGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBhOiAxIH0sIHsgZjogNSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYzogMyB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNsdWRlLmRlZXAub3JkZXJlZC5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5vbmVPZihpbkxpc3QsIGxpc3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IG5vbi1vYmplY3QsIG5vbi1hcnJheSB2YWx1ZSBgaW5MaXN0YCBhcHBlYXJzIGluIHRoZSBmbGF0IGFycmF5IGBsaXN0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vbmVPZigxLCBbIDIsIDEgXSwgJ05vdCBmb3VuZCBpbiBsaXN0Jyk7XG4gICAqXG4gICAqIEBuYW1lIG9uZU9mXG4gICAqIEBwYXJhbSB7Kn0gaW5MaXN0XG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IGxpc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm9uZU9mID0gZnVuY3Rpb24gKGluTGlzdCwgbGlzdCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihpbkxpc3QsIG1zZywgYXNzZXJ0Lm9uZU9mLCB0cnVlKS50by5iZS5vbmVPZihsaXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmNoYW5nZXMoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gY2hhbmdlcyB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMjIgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgY2hhbmdlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXMgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmNoYW5nZXMsIHRydWUpLnRvLmNoYW5nZShvYmosIHByb3ApO1xuICB9XG5cbiAgIC8qKlxuICAgKiAjIyMgLmNoYW5nZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gY2hhbmdlcyB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBieSBhbiBhbW91bnQgKGRlbHRhKS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsICs9IDIgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzQnkoZm4sIG9iaiwgJ3ZhbCcsIDIpO1xuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXNCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuY2hhbmdlc0J5LCB0cnVlKVxuICAgICAgLnRvLmNoYW5nZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gICAvKipcbiAgICogIyMjIC5kb2VzTm90Q2hhbmdlKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZygnZm9vJyk7IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdENoYW5nZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RDaGFuZ2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90Q2hhbmdlID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdENoYW5nZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuY2hhbmdlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBvciBvZiBhIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGJ5IGFuIGFtb3VudCAoZGVsdGEpXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAxMCB9O1xuICAgKiAgICAgYXNzZXJ0LmNoYW5nZXNCdXROb3RCeShmbiwgb2JqLCAndmFsJywgNSk7XG4gICAqXG4gICAqIEBuYW1lIGNoYW5nZXNCdXROb3RCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuY2hhbmdlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5jaGFuZ2VzQnV0Tm90QnksIHRydWUpXG4gICAgICAudG8uY2hhbmdlKG9iaiwgcHJvcCkuYnV0Lm5vdC5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZXMoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gaW5jcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDEzIH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jcmVhc2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuaW5jcmVhc2VzLCB0cnVlKVxuICAgICAgLnRvLmluY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gaW5jcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsICs9IDEwIH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzQnkoZm4sIG9iaiwgJ3ZhbCcsIDEwKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlc0J5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5pbmNyZWFzZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RJbmNyZWFzZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBpbmNyZWFzZSBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA4IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEluY3JlYXNlKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEluY3JlYXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEluY3JlYXNlID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdEluY3JlYXNlLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNyZWFzZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgaW5jcmVhc2UgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eSBvciBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMTUgfTtcbiAgICogICAgIGFzc2VydC5pbmNyZWFzZXNCdXROb3RCeShmbiwgb2JqLCAndmFsJywgMTApO1xuICAgKlxuICAgKiBAbmFtZSBpbmNyZWFzZXNCdXROb3RCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jcmVhc2VzQnV0Tm90QnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmluY3JlYXNlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmluY3JlYXNlKG9iaiwgcHJvcCkuYnV0Lm5vdC5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXMoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDUgfTtcbiAgICogICAgIGFzc2VydC5kZWNyZWFzZXMoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWNyZWFzZXMgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXMsIHRydWUpXG4gICAgICAudG8uZGVjcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRlY3JlYXNlc0J5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eSBvciBhIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGJ5IGFuIGFtb3VudCAoZGVsdGEpXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCAtPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzQnkoZm4sIG9iaiwgJ3ZhbCcsIDUpO1xuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZXNCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRlY3JlYXNlc0J5LCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCkuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdERlY3JlYXNlKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSAxNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3REZWNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuZGVjcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3REZWNyZWFzZUJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eSBvciBhIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGJ5IGFuIGFtb3VudCAoZGVsdGEpXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDUgfTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90RGVjcmVhc2VCeShmbiwgb2JqLCAndmFsJywgMSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3REZWNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90RGVjcmVhc2VCeSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuZGVjcmVhc2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXNCdXROb3RCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDEpO1xuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZXNCdXROb3RCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzQnV0Tm90QnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCkuYnV0Lm5vdC5ieShkZWx0YSk7XG4gIH1cblxuICAvKiFcbiAgICogIyMjIC5pZkVycm9yKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyBpZiB2YWx1ZSBpcyBub3QgYSBmYWxzZSB2YWx1ZSwgYW5kIHRocm93cyBpZiBpdCBpcyBhIHRydWUgdmFsdWUuXG4gICAqIFRoaXMgaXMgYWRkZWQgdG8gYWxsb3cgZm9yIGNoYWkgdG8gYmUgYSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBOb2RlJ3NcbiAgICogYXNzZXJ0IGNsYXNzLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignSSBhbSBhIGN1c3RvbSBlcnJvcicpO1xuICAgKiAgICAgYXNzZXJ0LmlmRXJyb3IoZXJyKTsgLy8gUmV0aHJvd3MgZXJyIVxuICAgKlxuICAgKiBAbmFtZSBpZkVycm9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhyb3codmFsKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNFeHRlbnNpYmxlKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGV4dGVuc2libGUgKGNhbiBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0V4dGVuc2libGUoe30pO1xuICAgKlxuICAgKiBAbmFtZSBpc0V4dGVuc2libGVcbiAgICogQGFsaWFzIGV4dGVuc2libGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0V4dGVuc2libGUgPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNFeHRlbnNpYmxlLCB0cnVlKS50by5iZS5leHRlbnNpYmxlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RXh0ZW5zaWJsZShvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBfbm90XyBleHRlbnNpYmxlLlxuICAgKlxuICAgKiAgICAgdmFyIG5vbkV4dGVuc2libGVPYmplY3QgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pO1xuICAgKiAgICAgdmFyIHNlYWxlZE9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICogICAgIHZhciBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEV4dGVuc2libGUobm9uRXh0ZW5zaWJsZU9iamVjdCk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKHNlYWxlZE9iamVjdCk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90RXh0ZW5zaWJsZVxuICAgKiBAYWxpYXMgbm90RXh0ZW5zaWJsZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZSA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdEV4dGVuc2libGUsIHRydWUpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzU2VhbGVkKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIHNlYWxlZCAoY2Fubm90IGhhdmUgbmV3IHByb3BlcnRpZXMgYWRkZWQgdG8gaXRcbiAgICogYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbm5vdCBiZSByZW1vdmVkKS5cbiAgICpcbiAgICogICAgIHZhciBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSk7XG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzU2VhbGVkKHNlYWxlZE9iamVjdCk7XG4gICAqICAgICBhc3NlcnQuaXNTZWFsZWQoZnJvemVuT2JqZWN0KTtcbiAgICpcbiAgICogQG5hbWUgaXNTZWFsZWRcbiAgICogQGFsaWFzIHNlYWxlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzU2VhbGVkID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzU2VhbGVkLCB0cnVlKS50by5iZS5zZWFsZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RTZWFsZWQob2JqZWN0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgX25vdF8gc2VhbGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90U2VhbGVkKHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RTZWFsZWRcbiAgICogQGFsaWFzIG5vdFNlYWxlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90U2VhbGVkID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzTm90U2VhbGVkLCB0cnVlKS50by5ub3QuYmUuc2VhbGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRnJvemVuKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGZyb3plbiAoY2Fubm90IGhhdmUgbmV3IHByb3BlcnRpZXMgYWRkZWQgdG8gaXRcbiAgICogYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBtb2RpZmllZCkuXG4gICAqXG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqICAgICBhc3NlcnQuZnJvemVuKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzRnJvemVuXG4gICAqIEBhbGlhcyBmcm96ZW5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Zyb3plbiA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc0Zyb3plbiwgdHJ1ZSkudG8uYmUuZnJvemVuO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RnJvemVuKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIF9ub3RfIGZyb3plbi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEZyb3plbih7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90RnJvemVuXG4gICAqIEBhbGlhcyBub3RGcm96ZW5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZyb3plbiA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdEZyb3plbiwgdHJ1ZSkudG8ubm90LmJlLmZyb3plbjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0VtcHR5KHRhcmdldClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgZG9lcyBub3QgY29udGFpbiBhbnkgdmFsdWVzLlxuICAgKiBGb3IgYXJyYXlzIGFuZCBzdHJpbmdzLCBpdCBjaGVja3MgdGhlIGBsZW5ndGhgIHByb3BlcnR5LlxuICAgKiBGb3IgYE1hcGAgYW5kIGBTZXRgIGluc3RhbmNlcywgaXQgY2hlY2tzIHRoZSBgc2l6ZWAgcHJvcGVydHkuXG4gICAqIEZvciBub24tZnVuY3Rpb24gb2JqZWN0cywgaXQgZ2V0cyB0aGUgY291bnQgb2Ygb3duXG4gICAqIGVudW1lcmFibGUgc3RyaW5nIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNFbXB0eShbXSk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eSgnJyk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eShuZXcgTWFwKTtcbiAgICogICAgIGFzc2VydC5pc0VtcHR5KHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNFbXB0eVxuICAgKiBAYWxpYXMgZW1wdHlcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfE1hcHxTZXR9IHRhcmdldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0VtcHR5ID0gZnVuY3Rpb24odmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNFbXB0eSwgdHJ1ZSkudG8uYmUuZW1wdHk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RFbXB0eSh0YXJnZXQpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGNvbnRhaW5zIHZhbHVlcy5cbiAgICogRm9yIGFycmF5cyBhbmQgc3RyaW5ncywgaXQgY2hlY2tzIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eS5cbiAgICogRm9yIGBNYXBgIGFuZCBgU2V0YCBpbnN0YW5jZXMsIGl0IGNoZWNrcyB0aGUgYHNpemVgIHByb3BlcnR5LlxuICAgKiBGb3Igbm9uLWZ1bmN0aW9uIG9iamVjdHMsIGl0IGdldHMgdGhlIGNvdW50IG9mIG93blxuICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90RW1wdHkoWzEsIDJdKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KCczNCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RW1wdHkobmV3IFNldChbNSwgNl0pKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KHsga2V5OiA3IH0pO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEVtcHR5XG4gICAqIEBhbGlhcyBub3RFbXB0eVxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheXxTdHJpbmd8TWFwfFNldH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90RW1wdHkgPSBmdW5jdGlvbih2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdEVtcHR5LCB0cnVlKS50by5ub3QuYmUuZW1wdHk7XG4gIH07XG5cbiAgLyohXG4gICAqIEFsaWFzZXMuXG4gICAqL1xuXG4gIChmdW5jdGlvbiBhbGlhcyhuYW1lLCBhcyl7XG4gICAgYXNzZXJ0W2FzXSA9IGFzc2VydFtuYW1lXTtcbiAgICByZXR1cm4gYWxpYXM7XG4gIH0pXG4gICgnaXNPaycsICdvaycpXG4gICgnaXNOb3RPaycsICdub3RPaycpXG4gICgndGhyb3dzJywgJ3Rocm93JylcbiAgKCd0aHJvd3MnLCAnVGhyb3cnKVxuICAoJ2lzRXh0ZW5zaWJsZScsICdleHRlbnNpYmxlJylcbiAgKCdpc05vdEV4dGVuc2libGUnLCAnbm90RXh0ZW5zaWJsZScpXG4gICgnaXNTZWFsZWQnLCAnc2VhbGVkJylcbiAgKCdpc05vdFNlYWxlZCcsICdub3RTZWFsZWQnKVxuICAoJ2lzRnJvemVuJywgJ2Zyb3plbicpXG4gICgnaXNOb3RGcm96ZW4nLCAnbm90RnJvemVuJylcbiAgKCdpc0VtcHR5JywgJ2VtcHR5JylcbiAgKCdpc05vdEVtcHR5JywgJ25vdEVtcHR5Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiBDaGFpIC0gcGF0aHZhbCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbG9naWNhbHBhcmFkb3gvZmlsdHJcbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5oYXNQcm9wZXJ0eShvYmplY3QsIG5hbWUpXG4gKlxuICogVGhpcyBhbGxvd3MgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIG93blxuICogb3IgaW5oZXJpdGVkIGZyb20gcHJvdG90eXBlIGNoYWluIG5hbWVkIHByb3BlcnR5LlxuICpcbiAqIEJhc2ljYWxseSBkb2VzIHRoZSBzYW1lIHRoaW5nIGFzIHRoZSBgaW5gXG4gKiBvcGVyYXRvciBidXQgd29ya3MgcHJvcGVybHkgd2l0aCBudWxsL3VuZGVmaW5lZCB2YWx1ZXNcbiAqIGFuZCBvdGhlciBwcmltaXRpdmVzLlxuICpcbiAqICAgICB2YXIgb2JqID0ge1xuICogICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgLCBzdHI6ICdIZWxsbydcbiAqICAgICB9XG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSB0aGUgcmVzdWx0cy5cbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnc3RyJyk7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnY29uc3RydWN0b3InKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmosICdiYXInKTsgIC8vIGZhbHNlXG4gKlxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsICdsZW5ndGgnKTsgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsIDEpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsIDUpOyAgLy8gZmFsc2VcbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLmFyciwgJ2xlbmd0aCcpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsIDIpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsIDMpOyAgLy8gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufSB3aGV0aGVyIGl0IGV4aXN0c1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgaGFzUHJvcGVydHlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzUHJvcGVydHkob2JqLCBuYW1lKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fCBvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUaGUgYGluYCBvcGVyYXRvciBkb2VzIG5vdCB3b3JrIHdpdGggcHJpbWl0aXZlcy5cbiAgcmV0dXJuIG5hbWUgaW4gT2JqZWN0KG9iaik7XG59XG5cbi8qICFcbiAqICMjIHBhcnNlUGF0aChwYXRoKVxuICpcbiAqIEhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHBhcnNlIHN0cmluZyBvYmplY3RcbiAqIHBhdGhzLiBVc2UgaW4gY29uanVuY3Rpb24gd2l0aCBgaW50ZXJuYWxHZXRQYXRoVmFsdWVgLlxuICpcbiAqICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlUGF0aCgnbXlvYmplY3QucHJvcGVydHkuc3VicHJvcCcpO1xuICpcbiAqICMjIyBQYXRoczpcbiAqXG4gKiAqIENhbiBiZSBpbmZpbml0ZWx5IGRlZXAgYW5kIG5lc3RlZC5cbiAqICogQXJyYXlzIGFyZSBhbHNvIHZhbGlkIHVzaW5nIHRoZSBmb3JtYWwgYG15b2JqZWN0LmRvY3VtZW50WzNdLnByb3BlcnR5YC5cbiAqICogTGl0ZXJhbCBkb3RzIGFuZCBicmFja2V0cyAobm90IGRlbGltaXRlcikgbXVzdCBiZSBiYWNrc2xhc2gtZXNjYXBlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gcGFyc2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgc3RyID0gcGF0aC5yZXBsYWNlKC8oW15cXFxcXSlcXFsvZywgJyQxLlsnKTtcbiAgdmFyIHBhcnRzID0gc3RyLm1hdGNoKC8oXFxcXFxcLnxbXi5dKz8pKy9nKTtcbiAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbiBtYXBNYXRjaGVzKHZhbHVlKSB7XG4gICAgdmFyIHJlZ2V4cCA9IC9eXFxbKFxcZCspXFxdJC87XG4gICAgdmFyIG1BcnIgPSByZWdleHAuZXhlYyh2YWx1ZSk7XG4gICAgdmFyIHBhcnNlZCA9IG51bGw7XG4gICAgaWYgKG1BcnIpIHtcbiAgICAgIHBhcnNlZCA9IHsgaTogcGFyc2VGbG9hdChtQXJyWzFdKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWQgPSB7IHA6IHZhbHVlLnJlcGxhY2UoL1xcXFwoWy5cXFtcXF1dKS9nLCAnJDEnKSB9O1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH0pO1xufVxuXG4vKiAhXG4gKiAjIyBpbnRlcm5hbEdldFBhdGhWYWx1ZShvYmosIHBhcnNlZFssIHBhdGhEZXB0aF0pXG4gKlxuICogSGVscGVyIGNvbXBhbmlvbiBmdW5jdGlvbiBmb3IgYC5wYXJzZVBhdGhgIHRoYXQgcmV0dXJuc1xuICogdGhlIHZhbHVlIGxvY2F0ZWQgYXQgdGhlIHBhcnNlZCBhZGRyZXNzLlxuICpcbiAqICAgICAgdmFyIHZhbHVlID0gZ2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRvIHNlYXJjaCBhZ2FpbnN0XG4gKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkIGRlZmluaXRpb24gZnJvbSBgcGFyc2VQYXRoYC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCAobmVzdGluZyBsZXZlbCkgb2YgdGhlIHByb3BlcnR5IHdlIHdhbnQgdG8gcmV0cmlldmVcbiAqIEByZXR1cm5zIHtPYmplY3R8VW5kZWZpbmVkfSB2YWx1ZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQsIHBhdGhEZXB0aCkge1xuICB2YXIgdGVtcG9yYXJ5VmFsdWUgPSBvYmo7XG4gIHZhciByZXMgPSBudWxsO1xuICBwYXRoRGVwdGggPSAodHlwZW9mIHBhdGhEZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyBwYXJzZWQubGVuZ3RoIDogcGF0aERlcHRoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhEZXB0aDsgaSsrKSB7XG4gICAgdmFyIHBhcnQgPSBwYXJzZWRbaV07XG4gICAgaWYgKHRlbXBvcmFyeVZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnQucCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSB0ZW1wb3JhcnlWYWx1ZVtwYXJ0LmldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSB0ZW1wb3JhcnlWYWx1ZVtwYXJ0LnBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA9PT0gKHBhdGhEZXB0aCAtIDEpKSB7XG4gICAgICAgIHJlcyA9IHRlbXBvcmFyeVZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbi8qICFcbiAqICMjIGludGVybmFsU2V0UGF0aFZhbHVlKG9iaiwgdmFsdWUsIHBhcnNlZClcbiAqXG4gKiBDb21wYW5pb24gZnVuY3Rpb24gZm9yIGBwYXJzZVBhdGhgIHRoYXQgc2V0c1xuICogdGhlIHZhbHVlIGxvY2F0ZWQgYXQgYSBwYXJzZWQgYWRkcmVzcy5cbiAqXG4gKiAgaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCAndmFsdWUnLCBwYXJzZWQpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gc2VhcmNoIGFuZCBkZWZpbmUgb25cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdG8gdXNlIHVwb24gc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkIGRlZmluaXRpb24gZnJvbSBgcGFyc2VQYXRoYFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCB2YWwsIHBhcnNlZCkge1xuICB2YXIgdGVtcE9iaiA9IG9iajtcbiAgdmFyIHBhdGhEZXB0aCA9IHBhcnNlZC5sZW5ndGg7XG4gIHZhciBwYXJ0ID0gbnVsbDtcbiAgLy8gSGVyZSB3ZSBpdGVyYXRlIHRocm91Z2ggZXZlcnkgcGFydCBvZiB0aGUgcGF0aFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhEZXB0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gbnVsbDtcbiAgICB2YXIgcHJvcFZhbCA9IG51bGw7XG4gICAgcGFydCA9IHBhcnNlZFtpXTtcblxuICAgIC8vIElmIGl0J3MgdGhlIGxhc3QgcGFydCBvZiB0aGUgcGF0aCwgd2Ugc2V0IHRoZSAncHJvcE5hbWUnIHZhbHVlIHdpdGggdGhlIHByb3BlcnR5IG5hbWVcbiAgICBpZiAoaSA9PT0gKHBhdGhEZXB0aCAtIDEpKSB7XG4gICAgICBwcm9wTmFtZSA9IHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnID8gcGFydC5pIDogcGFydC5wO1xuICAgICAgLy8gTm93IHdlIHNldCB0aGUgcHJvcGVydHkgd2l0aCB0aGUgbmFtZSBoZWxkIGJ5ICdwcm9wTmFtZScgb24gb2JqZWN0IHdpdGggdGhlIGRlc2lyZWQgdmFsXG4gICAgICB0ZW1wT2JqW3Byb3BOYW1lXSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJ0LnAgIT09ICd1bmRlZmluZWQnICYmIHRlbXBPYmpbcGFydC5wXSkge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcGFydC5wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJ0LmkgIT09ICd1bmRlZmluZWQnICYmIHRlbXBPYmpbcGFydC5pXSkge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcGFydC5pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIG9iaiBkb2Vzbid0IGhhdmUgdGhlIHByb3BlcnR5IHdlIGNyZWF0ZSBvbmUgd2l0aCB0aGF0IG5hbWUgdG8gZGVmaW5lIGl0XG4gICAgICB2YXIgbmV4dCA9IHBhcnNlZFtpICsgMV07XG4gICAgICAvLyBIZXJlIHdlIHNldCB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2hpY2ggd2lsbCBiZSBkZWZpbmVkXG4gICAgICBwcm9wTmFtZSA9IHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnID8gcGFydC5pIDogcGFydC5wO1xuICAgICAgLy8gSGVyZSB3ZSBkZWNpZGUgaWYgdGhpcyBwcm9wZXJ0eSB3aWxsIGJlIGFuIGFycmF5IG9yIGEgbmV3IG9iamVjdFxuICAgICAgcHJvcFZhbCA9IHR5cGVvZiBuZXh0LnAgPT09ICd1bmRlZmluZWQnID8gW10gOiB7fTtcbiAgICAgIHRlbXBPYmpbcHJvcE5hbWVdID0gcHJvcFZhbDtcbiAgICAgIHRlbXBPYmogPSB0ZW1wT2JqW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiAjIyMgLmdldFBhdGhJbmZvKG9iamVjdCwgcGF0aClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHByb3BlcnR5IGluZm8gaW4gYW5cbiAqIG9iamVjdCBnaXZlbiBhIHN0cmluZyBwYXRoLlxuICpcbiAqIFRoZSBwYXRoIGluZm8gY29uc2lzdHMgb2YgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAqIHBhcmVudCAtIFRoZSBwYXJlbnQgb2JqZWN0IG9mIHRoZSBwcm9wZXJ0eSByZWZlcmVuY2VkIGJ5IGBwYXRoYFxuICogKiBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpbmFsIHByb3BlcnR5LCBhIG51bWJlciBpZiBpdCB3YXMgYW4gYXJyYXkgaW5kZXhlclxuICogKiB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHksIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKiAqIGV4aXN0cyAtIFdoZXRoZXIgdGhlIHByb3BlcnR5IGV4aXN0cyBvciBub3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gaW5mb1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0UGF0aEluZm9cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZ2V0UGF0aEluZm8ob2JqLCBwYXRoKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZVBhdGgocGF0aCk7XG4gIHZhciBsYXN0ID0gcGFyc2VkW3BhcnNlZC5sZW5ndGggLSAxXTtcbiAgdmFyIGluZm8gPSB7XG4gICAgcGFyZW50OiBwYXJzZWQubGVuZ3RoID4gMSA/IGludGVybmFsR2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkLCBwYXJzZWQubGVuZ3RoIC0gMSkgOiBvYmosXG4gICAgbmFtZTogbGFzdC5wIHx8IGxhc3QuaSxcbiAgICB2YWx1ZTogaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQpLFxuICB9O1xuICBpbmZvLmV4aXN0cyA9IGhhc1Byb3BlcnR5KGluZm8ucGFyZW50LCBpbmZvLm5hbWUpO1xuXG4gIHJldHVybiBpbmZvO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0UGF0aFZhbHVlKG9iamVjdCwgcGF0aClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHZhbHVlcyBpbiBhblxuICogb2JqZWN0IGdpdmVuIGEgc3RyaW5nIHBhdGguXG4gKlxuICogICAgIHZhciBvYmogPSB7XG4gKiAgICAgICAgIHByb3AxOiB7XG4gKiAgICAgICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgICAgICwgc3RyOiAnSGVsbG8nXG4gKiAgICAgICAgIH1cbiAqICAgICAgICwgcHJvcDI6IHtcbiAqICAgICAgICAgICAgIGFycjogWyB7IG5lc3RlZDogJ1VuaXZlcnNlJyB9IF1cbiAqICAgICAgICAgICAsIHN0cjogJ0hlbGxvIGFnYWluISdcbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHdvdWxkIGJlIHRoZSByZXN1bHRzLlxuICpcbiAqICAgICBnZXRQYXRoVmFsdWUob2JqLCAncHJvcDEuc3RyJyk7IC8vIEhlbGxvXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AxLmF0dFsyXScpOyAvLyBiXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AyLmFyclswXS5uZXN0ZWQnKTsgLy8gVW5pdmVyc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gdmFsdWUgb3IgYHVuZGVmaW5lZGBcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldFBhdGhWYWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRQYXRoVmFsdWUob2JqLCBwYXRoKSB7XG4gIHZhciBpbmZvID0gZ2V0UGF0aEluZm8ob2JqLCBwYXRoKTtcbiAgcmV0dXJuIGluZm8udmFsdWU7XG59XG5cbi8qKlxuICogIyMjIC5zZXRQYXRoVmFsdWUob2JqZWN0LCBwYXRoLCB2YWx1ZSlcbiAqXG4gKiBEZWZpbmUgdGhlIHZhbHVlIGluIGFuIG9iamVjdCBhdCBhIGdpdmVuIHN0cmluZyBwYXRoLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgb2JqID0ge1xuICogICAgIHByb3AxOiB7XG4gKiAgICAgICAgIGFycjogWydhJywgJ2InLCAnYyddXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvJ1xuICogICAgIH1cbiAqICAgLCBwcm9wMjoge1xuICogICAgICAgICBhcnI6IFsgeyBuZXN0ZWQ6ICdVbml2ZXJzZScgfSBdXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvIGFnYWluISdcbiAqICAgICB9XG4gKiB9O1xuICogYGBgXG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSBhY2NlcHRhYmxlLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcHJvcGVydGllcyA9IHJlcXVpcmUoJ3RlYS1wcm9wZXJ0aWVzJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMS5zdHInLCAnSGVsbG8gVW5pdmVyc2UhJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMS5hcnJbMl0nLCAnQicpO1xuICogcHJvcGVydGllcy5zZXQob2JqLCAncHJvcDIuYXJyWzBdLm5lc3RlZC52YWx1ZScsIHsgaGVsbG86ICd1bml2ZXJzZScgfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldFBhdGhWYWx1ZShvYmosIHBhdGgsIHZhbCkge1xuICB2YXIgcGFyc2VkID0gcGFyc2VQYXRoKHBhdGgpO1xuICBpbnRlcm5hbFNldFBhdGhWYWx1ZShvYmosIHZhbCwgcGFyc2VkKTtcbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhhc1Byb3BlcnR5OiBoYXNQcm9wZXJ0eSxcbiAgZ2V0UGF0aEluZm86IGdldFBhdGhJbmZvLFxuICBnZXRQYXRoVmFsdWU6IGdldFBhdGhWYWx1ZSxcbiAgc2V0UGF0aFZhbHVlOiBzZXRQYXRoVmFsdWUsXG59O1xuIiwiLyohXG4gKiBDaGFpIC0gdGVzdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcblxuLyoqXG4gKiAjIyMgLnRlc3Qob2JqZWN0LCBleHByZXNzaW9uKVxuICpcbiAqIFRlc3QgYW5kIG9iamVjdCBmb3IgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIHRlc3RcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRlc3Qob2JqLCBhcmdzKSB7XG4gIHZhciBuZWdhdGUgPSBmbGFnKG9iaiwgJ25lZ2F0ZScpXG4gICAgLCBleHByID0gYXJnc1swXTtcbiAgcmV0dXJuIG5lZ2F0ZSA/ICFleHByIDogZXhwcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qICFcbiAqIHR5cGUtZGV0ZWN0XG4gKiBDb3B5cmlnaHQoYykgMjAxMyBqYWtlIGx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG52YXIgcHJvbWlzZUV4aXN0cyA9IHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nO1xudmFyIGdsb2JhbE9iamVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBzZWxmOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG52YXIgaXNEb20gPSAnbG9jYXRpb24nIGluIGdsb2JhbE9iamVjdCAmJiAnZG9jdW1lbnQnIGluIGdsb2JhbE9iamVjdDtcbnZhciBzeW1ib2xFeGlzdHMgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJztcbnZhciBtYXBFeGlzdHMgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcbnZhciBzZXRFeGlzdHMgPSB0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJztcbnZhciB3ZWFrTWFwRXhpc3RzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnO1xudmFyIHdlYWtTZXRFeGlzdHMgPSB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgZGF0YVZpZXdFeGlzdHMgPSB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbEl0ZXJhdG9yRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgIT09ICd1bmRlZmluZWQnO1xudmFyIHNldEVudHJpZXNFeGlzdHMgPSBzZXRFeGlzdHMgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJztcbnZhciBtYXBFbnRyaWVzRXhpc3RzID0gbWFwRXhpc3RzICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09ICdmdW5jdGlvbic7XG52YXIgc2V0SXRlcmF0b3JQcm90b3R5cGUgPSBzZXRFbnRyaWVzRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgU2V0KCkuZW50cmllcygpKTtcbnZhciBtYXBJdGVyYXRvclByb3RvdHlwZSA9IG1hcEVudHJpZXNFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBNYXAoKS5lbnRyaWVzKCkpO1xudmFyIGFycmF5SXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG52YXIgYXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGFycmF5SXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgc3RyaW5nSXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgU3RyaW5nLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xudmFyIHN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlID0gc3RyaW5nSXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgdG9TdHJpbmdMZWZ0U2xpY2VMZW5ndGggPSA4O1xudmFyIHRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCA9IC0xO1xuLyoqXG4gKiAjIyMgdHlwZU9mIChvYmopXG4gKlxuICogVXNlcyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGFuIG9iamVjdCxcbiAqIG5vcm1hbGlzaW5nIGJlaGF2aW91ciBhY3Jvc3MgZW5naW5lIHZlcnNpb25zICYgd2VsbCBvcHRpbWlzZWQuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IG9iamVjdCB0eXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHR5cGVEZXRlY3Qob2JqKSB7XG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAqIFByZTpcbiAgICogICBzdHJpbmcgbGl0ZXJhbCAgICAgeCAzLDAzOSwwMzUgb3BzL3NlYyDCsTEuNjIlICg3OCBydW5zIHNhbXBsZWQpXG4gICAqICAgYm9vbGVhbiBsaXRlcmFsICAgIHggMSw0MjQsMTM4IG9wcy9zZWMgwrE0LjU0JSAoNzUgcnVucyBzYW1wbGVkKVxuICAgKiAgIG51bWJlciBsaXRlcmFsICAgICB4IDEsNjUzLDE1MyBvcHMvc2VjIMKxMS45MSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogICB1bmRlZmluZWQgICAgICAgICAgeCA5LDk3OCw2NjAgb3BzL3NlYyDCsTEuOTIlICg3NSBydW5zIHNhbXBsZWQpXG4gICAqICAgZnVuY3Rpb24gICAgICAgICAgIHggMiw1NTYsNzY5IG9wcy9zZWMgwrExLjczJSAoNzcgcnVucyBzYW1wbGVkKVxuICAgKiBQb3N0OlxuICAgKiAgIHN0cmluZyBsaXRlcmFsICAgICB4IDM4LDU2NCw3OTYgb3BzL3NlYyDCsTEuMTUlICg3OSBydW5zIHNhbXBsZWQpXG4gICAqICAgYm9vbGVhbiBsaXRlcmFsICAgIHggMzEsMTQ4LDk0MCBvcHMvc2VjIMKxMS4xMCUgKDc5IHJ1bnMgc2FtcGxlZClcbiAgICogICBudW1iZXIgbGl0ZXJhbCAgICAgeCAzMiw2NzksMzMwIG9wcy9zZWMgwrExLjkwJSAoNzggcnVucyBzYW1wbGVkKVxuICAgKiAgIHVuZGVmaW5lZCAgICAgICAgICB4IDMyLDM2MywzNjggb3BzL3NlYyDCsTEuMDclICg4MiBydW5zIHNhbXBsZWQpXG4gICAqICAgZnVuY3Rpb24gICAgICAgICAgIHggMzEsMjk2LDg3MCBvcHMvc2VjIMKxMC45NiUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgICovXG4gIHZhciB0eXBlb2ZPYmogPSB0eXBlb2Ygb2JqO1xuICBpZiAodHlwZW9mT2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0eXBlb2ZPYmo7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgKiBQcmU6XG4gICAqICAgbnVsbCAgICAgICAgICAgICAgIHggMjgsNjQ1LDc2NSBvcHMvc2VjIMKxMS4xNyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogUG9zdDpcbiAgICogICBudWxsICAgICAgICAgICAgICAgeCAzNiw0MjgsOTYyIG9wcy9zZWMgwrExLjM3JSAoODQgcnVucyBzYW1wbGVkKVxuICAgKi9cbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cpYGBcbiAgICogIC0gTm9kZSA9PT0gXCJbb2JqZWN0IGdsb2JhbF1cIlxuICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBnbG9iYWxdXCJcbiAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBQaGFudG9tSlMgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIElFIDExID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIElFIEVkZ2UgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKWBgXG4gICAqICAtIENocm9tZSBXb3JrZXIgPT09IFwiW29iamVjdCBnbG9iYWxdXCJcbiAgICogIC0gRmlyZWZveCBXb3JrZXIgPT09IFwiW29iamVjdCBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKiAgLSBTYWZhcmkgV29ya2VyID09PSBcIltvYmplY3QgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICogIC0gSUUgMTEgV29ya2VyID09PSBcIltvYmplY3QgV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICogIC0gSUUgRWRnZSBXb3JrZXIgPT09IFwiW29iamVjdCBXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKi9cbiAgaWYgKG9iaiA9PT0gZ2xvYmFsT2JqZWN0KSB7XG4gICAgcmV0dXJuICdnbG9iYWwnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICogUHJlOlxuICAgKiAgIGFycmF5IGxpdGVyYWwgICAgICB4IDIsODg4LDM1MiBvcHMvc2VjIMKxMC42NyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogUG9zdDpcbiAgICogICBhcnJheSBsaXRlcmFsICAgICAgeCAyMiw0NzksNjUwIG9wcy9zZWMgwrEwLjk2JSAoODEgcnVucyBzYW1wbGVkKVxuICAgKi9cbiAgaWYgKFxuICAgIEFycmF5LmlzQXJyYXkob2JqKSAmJlxuICAgIChzeW1ib2xUb1N0cmluZ1RhZ0V4aXN0cyA9PT0gZmFsc2UgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gb2JqKSlcbiAgKSB7XG4gICAgcmV0dXJuICdBcnJheSc7XG4gIH1cblxuICBpZiAoaXNEb20pIHtcbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvYnJvd3NlcnMuaHRtbCNsb2NhdGlvbilcbiAgICAgKiBXaGF0V0cgSFRNTCQ3LjcuMyAtIFRoZSBgTG9jYXRpb25gIGludGVyZmFjZVxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93LmxvY2F0aW9uKWBgXG4gICAgICogIC0gSUUgPD0xMSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqICAtIElFIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IGdsb2JhbE9iamVjdC5sb2NhdGlvbikge1xuICAgICAgcmV0dXJuICdMb2NhdGlvbic7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2RvY3VtZW50KVxuICAgICAqIFdoYXRXRyBIVE1MJDMuMS4xIC0gVGhlIGBEb2N1bWVudGAgb2JqZWN0XG4gICAgICogTm90ZTogTW9zdCBicm93c2VycyBjdXJyZW50bHkgYWRoZXIgdG8gdGhlIFczQyBET00gTGV2ZWwgMiBzcGVjXG4gICAgICogICAgICAgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1IVE1ML2h0bWwuaHRtbCNJRC0yNjgwOTI2OClcbiAgICAgKiAgICAgICB3aGljaCBzdWdnZXN0cyB0aGF0IGJyb3dzZXJzIHNob3VsZCB1c2UgSFRNTFRhYmxlQ2VsbEVsZW1lbnQgZm9yXG4gICAgICogICAgICAgYm90aCBURCBhbmQgVEggZWxlbWVudHMuIFdoYXRXRyBzZXBhcmF0ZXMgdGhlc2UuXG4gICAgICogICAgICAgV2hhdFdHIEhUTUwgc3RhdGVzOlxuICAgICAqICAgICAgICAgPiBGb3IgaGlzdG9yaWNhbCByZWFzb25zLCBXaW5kb3cgb2JqZWN0cyBtdXN0IGFsc28gaGF2ZSBhXG4gICAgICogICAgICAgICA+IHdyaXRhYmxlLCBjb25maWd1cmFibGUsIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVkXG4gICAgICogICAgICAgICA+IEhUTUxEb2N1bWVudCB3aG9zZSB2YWx1ZSBpcyB0aGUgRG9jdW1lbnQgaW50ZXJmYWNlIG9iamVjdC5cbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50KWBgXG4gICAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBEb2N1bWVudF1cIlxuICAgICAqICAtIElFIDExID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gSUUgRWRnZSA8PTEzID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiA9PT0gZ2xvYmFsT2JqZWN0LmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gJ0RvY3VtZW50JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI21pbWV0eXBlYXJyYXkpXG4gICAgICogV2hhdFdHIEhUTUwkOC42LjEuNSAtIFBsdWdpbnMgLSBJbnRlcmZhY2UgTWltZVR5cGVBcnJheVxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmF2aWdhdG9yLm1pbWVUeXBlcylgYFxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBNU01pbWVUeXBlc0NvbGxlY3Rpb25dXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSAoZ2xvYmFsT2JqZWN0Lm5hdmlnYXRvciB8fCB7fSkubWltZVR5cGVzKSB7XG4gICAgICByZXR1cm4gJ01pbWVUeXBlQXJyYXknO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjcGx1Z2luYXJyYXkpXG4gICAgICogV2hhdFdHIEhUTUwkOC42LjEuNSAtIFBsdWdpbnMgLSBJbnRlcmZhY2UgUGx1Z2luQXJyYXlcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5hdmlnYXRvci5wbHVnaW5zKWBgXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IE1TUGx1Z2luc0NvbGxlY3Rpb25dXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSAoZ2xvYmFsT2JqZWN0Lm5hdmlnYXRvciB8fCB7fSkucGx1Z2lucykge1xuICAgICAgcmV0dXJuICdQbHVnaW5BcnJheSc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNwbHVnaW5hcnJheSlcbiAgICAgKiBXaGF0V0cgSFRNTCQ0LjQuNCAtIFRoZSBgYmxvY2txdW90ZWAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFF1b3RlRWxlbWVudGBcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jsb2NrcXVvdGUnKSlgYFxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBIVE1MQmxvY2tFbGVtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG9iai50YWdOYW1lID09PSAnQkxPQ0tRVU9URScpIHtcbiAgICAgIHJldHVybiAnSFRNTFF1b3RlRWxlbWVudCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2h0bWx0YWJsZWRhdGFjZWxsZWxlbWVudClcbiAgICAgKiBXaGF0V0cgSFRNTCQ0LjkuOSAtIFRoZSBgdGRgIGVsZW1lbnQgLSBJbnRlcmZhY2UgYEhUTUxUYWJsZURhdGFDZWxsRWxlbWVudGBcbiAgICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBhZGhlciB0byB0aGUgVzNDIERPTSBMZXZlbCAyIHNwZWNcbiAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTgyOTE1MDc1KVxuICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgKiAgICAgICBib3RoIFREIGFuZCBUSCBlbGVtZW50cy4gV2hhdFdHIHNlcGFyYXRlcyB0aGVzZS5cbiAgICAgKiBUZXN0OiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKSlcbiAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG9iai50YWdOYW1lID09PSAnVEQnKSB7XG4gICAgICByZXR1cm4gJ0hUTUxUYWJsZURhdGFDZWxsRWxlbWVudCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2h0bWx0YWJsZWhlYWRlcmNlbGxlbGVtZW50KVxuICAgICAqIFdoYXRXRyBIVE1MJDQuOS45IC0gVGhlIGB0ZGAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFRhYmxlSGVhZGVyQ2VsbEVsZW1lbnRgXG4gICAgICogTm90ZTogTW9zdCBicm93c2VycyBjdXJyZW50bHkgYWRoZXIgdG8gdGhlIFczQyBET00gTGV2ZWwgMiBzcGVjXG4gICAgICogICAgICAgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1IVE1ML2h0bWwuaHRtbCNJRC04MjkxNTA3NSlcbiAgICAgKiAgICAgICB3aGljaCBzdWdnZXN0cyB0aGF0IGJyb3dzZXJzIHNob3VsZCB1c2UgSFRNTFRhYmxlQ2VsbEVsZW1lbnQgZm9yXG4gICAgICogICAgICAgYm90aCBURCBhbmQgVEggZWxlbWVudHMuIFdoYXRXRyBzZXBhcmF0ZXMgdGhlc2UuXG4gICAgICogVGVzdDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJykpXG4gICAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBvYmoudGFnTmFtZSA9PT0gJ1RIJykge1xuICAgICAgcmV0dXJuICdIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudCc7XG4gICAgfVxuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBGbG9hdDY0QXJyYXkgICAgICAgeCA2MjUsNjQ0IG9wcy9zZWMgwrExLjU4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgRmxvYXQzMkFycmF5ICAgICAgIHggMSwyNzksODUyIG9wcy9zZWMgwrEyLjkxJSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDMyQXJyYXkgICAgICAgIHggMSwxNzgsMTg1IG9wcy9zZWMgwrExLjk1JSAoODMgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDE2QXJyYXkgICAgICAgIHggMSwwMDgsMzgwIG9wcy9zZWMgwrEyLjI1JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhBcnJheSAgICAgICAgIHggMSwxMjgsMDQwIG9wcy9zZWMgwrEyLjExJSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MzJBcnJheSAgICAgICAgIHggMSwxNzAsMTE5IG9wcy9zZWMgwrEyLjg4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MTZBcnJheSAgICAgICAgIHggMSwxNzYsMzQ4IG9wcy9zZWMgwrE1Ljc5JSAoODYgcnVucyBzYW1wbGVkKVxuICAqICAgSW50OEFycmF5ICAgICAgICAgIHggMSwwNTgsNzA3IG9wcy9zZWMgwrE0Ljk0JSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhDbGFtcGVkQXJyYXkgIHggMSwxMTAsNjMzIG9wcy9zZWMgwrE0LjIwJSAoODAgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBGbG9hdDY0QXJyYXkgICAgICAgeCA3LDEwNSw2NzEgb3BzL3NlYyDCsTEzLjQ3JSAoNjQgcnVucyBzYW1wbGVkKVxuICAqICAgRmxvYXQzMkFycmF5ICAgICAgIHggNSw4ODcsOTEyIG9wcy9zZWMgwrExLjQ2JSAoODIgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDMyQXJyYXkgICAgICAgIHggNiw0OTEsNjYxIG9wcy9zZWMgwrExLjc2JSAoNzkgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDE2QXJyYXkgICAgICAgIHggNiw1NTksNzk1IG9wcy9zZWMgwrExLjY3JSAoODIgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhBcnJheSAgICAgICAgIHggNiw0NjMsOTY2IG9wcy9zZWMgwrExLjQzJSAoODUgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MzJBcnJheSAgICAgICAgIHggNSw2NDEsODQxIG9wcy9zZWMgwrEzLjQ5JSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MTZBcnJheSAgICAgICAgIHggNiw1ODMsNTExIG9wcy9zZWMgwrExLjk4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgSW50OEFycmF5ICAgICAgICAgIHggNiw2MDYsMDc4IG9wcy9zZWMgwrExLjc0JSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhDbGFtcGVkQXJyYXkgIHggNiw2MDIsMjI0IG9wcy9zZWMgwrExLjc3JSAoODMgcnVucyBzYW1wbGVkKVxuICAqL1xuICB2YXIgc3RyaW5nVGFnID0gKHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddKTtcbiAgaWYgKHR5cGVvZiBzdHJpbmdUYWcgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cmluZ1RhZztcbiAgfVxuXG4gIHZhciBvYmpQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICByZWdleCBsaXRlcmFsICAgICAgeCAxLDc3MiwzODUgb3BzL3NlYyDCsTEuODUlICg3NyBydW5zIHNhbXBsZWQpXG4gICogICByZWdleCBjb25zdHJ1Y3RvciAgeCAyLDE0Myw2MzQgb3BzL3NlYyDCsTIuNDYlICg3OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHJlZ2V4IGxpdGVyYWwgICAgICB4IDMsOTI4LDAwOSBvcHMvc2VjIMKxMC42NSUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgKiAgIHJlZ2V4IGNvbnN0cnVjdG9yICB4IDMsOTMxLDEwOCBvcHMvc2VjIMKxMC41OCUgKDg0IHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKG9ialByb3RvdHlwZSA9PT0gUmVnRXhwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnUmVnRXhwJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgZGF0ZSAgICAgICAgICAgICAgIHggMiwxMzAsMDc0IG9wcy9zZWMgwrE0LjQyJSAoNjggcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBkYXRlICAgICAgICAgICAgICAgeCAzLDk1Myw3Nzkgb3BzL3NlYyDCsTEuMzUlICg3NyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IERhdGUucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdEYXRlJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy1wcm9taXNlLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjUuNC41LjQgLSBQcm9taXNlLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJQcm9taXNlXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUHJvbWlzZS5yZXNvbHZlKCkpYGBcbiAgICogIC0gQ2hyb21lIDw9NDcgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICogIC0gRWRnZSA8PTIwID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqICAtIEZpcmVmb3ggMjktTGF0ZXN0ID09PSBcIltvYmplY3QgUHJvbWlzZV1cIlxuICAgKiAgLSBTYWZhcmkgNy4xLUxhdGVzdCA9PT0gXCJbb2JqZWN0IFByb21pc2VdXCJcbiAgICovXG4gIGlmIChwcm9taXNlRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gUHJvbWlzZS5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1Byb21pc2UnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBzZXQgICAgICAgICAgICAgICAgeCAyLDIyMiwxODYgb3BzL3NlYyDCsTEuMzElICg4MiBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHNldCAgICAgICAgICAgICAgICB4IDQsNTQ1LDg3OSBvcHMvc2VjIMKxMS4xMyUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHNldEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFNldC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1NldCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIG1hcCAgICAgICAgICAgICAgICB4IDIsMzk2LDg0MiBvcHMvc2VjIMKxMS41OSUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgbWFwICAgICAgICAgICAgICAgIHggNCwxODMsOTQ1IG9wcy9zZWMgwrE2LjU5JSAoODIgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAobWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gTWFwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnTWFwJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgd2Vha3NldCAgICAgICAgICAgIHggMSwzMjMsMjIwIG9wcy9zZWMgwrEyLjE3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICB3ZWFrc2V0ICAgICAgICAgICAgeCA0LDIzNyw1MTAgb3BzL3NlYyDCsTIuMDElICg3NyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmICh3ZWFrU2V0RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gV2Vha1NldC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1dlYWtTZXQnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICB3ZWFrbWFwICAgICAgICAgICAgeCAxLDUwMCwyNjAgb3BzL3NlYyDCsTIuMDIlICg3OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHdlYWttYXAgICAgICAgICAgICB4IDMsODgxLDM4NCBvcHMvc2VjIMKxMS40NSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHdlYWtNYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBXZWFrTWFwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnV2Vha01hcCc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtZGF0YXZpZXcucHJvdG90eXBlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyNC4yLjQuMjEgLSBEYXRhVmlldy5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiRGF0YVZpZXdcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChkYXRhVmlld0V4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IERhdGFWaWV3LnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnRGF0YVZpZXcnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVtYXBpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIzLjEuNS4yLjIgLSAlTWFwSXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIk1hcCBJdGVyYXRvclwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBNYXAoKS5lbnRyaWVzKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAobWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gbWFwSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ01hcCBJdGVyYXRvcic7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJXNldGl0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjMuMi41LjIuMiAtICVTZXRJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiU2V0IEl0ZXJhdG9yXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IFNldCgpLmVudHJpZXMoKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChzZXRFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBzZXRJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU2V0IEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIyLjEuNS4yLjIgLSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiQXJyYXkgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChbXVtTeW1ib2wuaXRlcmF0b3JdKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoYXJyYXlJdGVyYXRvckV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IGFycmF5SXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ0FycmF5IEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyMS4xLjUuMi4yIC0gJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJTdHJpbmcgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoc3RyaW5nSXRlcmF0b3JFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBzdHJpbmdJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU3RyaW5nIEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgb2JqZWN0IGZyb20gbnVsbCAgIHggMiw0MjQsMzIwIG9wcy9zZWMgwrExLjY3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBvYmplY3QgZnJvbSBudWxsICAgeCA1LDgzOCwwMDAgb3BzL3NlYyDCsTAuOTklICg4NCBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0XG4gICAgLnByb3RvdHlwZVxuICAgIC50b1N0cmluZ1xuICAgIC5jYWxsKG9iailcbiAgICAuc2xpY2UodG9TdHJpbmdMZWZ0U2xpY2VMZW5ndGgsIHRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy50eXBlRGV0ZWN0ID0gbW9kdWxlLmV4cG9ydHM7XG4iLCIvKiFcbiAqIENoYWkgLSBleHBlY3RUeXBlcyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmV4cGVjdFR5cGVzKG9iaiwgdHlwZXMpXG4gKlxuICogRW5zdXJlcyB0aGF0IHRoZSBvYmplY3QgYmVpbmcgdGVzdGVkIGFnYWluc3QgaXMgb2YgYSB2YWxpZCB0eXBlLlxuICpcbiAqICAgICB1dGlscy5leHBlY3RUeXBlcyh0aGlzLCBbJ2FycmF5JywgJ29iamVjdCcsICdzdHJpbmcnXSk7XG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqIGNvbnN0cnVjdGVkIEFzc2VydGlvblxuICogQHBhcmFtIHtBcnJheX0gdHlwZSBBIGxpc3Qgb2YgYWxsb3dlZCB0eXBlcyBmb3IgdGhpcyBhc3NlcnRpb25cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGV4cGVjdFR5cGVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciBBc3NlcnRpb25FcnJvciA9IHJlcXVpcmUoJ2Fzc2VydGlvbi1lcnJvcicpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciB0eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBlY3RUeXBlcyhvYmosIHR5cGVzKSB7XG4gIHZhciBmbGFnTXNnID0gZmxhZyhvYmosICdtZXNzYWdlJyk7XG4gIHZhciBzc2ZpID0gZmxhZyhvYmosICdzc2ZpJyk7XG5cbiAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gIG9iaiA9IGZsYWcob2JqLCAnb2JqZWN0Jyk7XG4gIHR5cGVzID0gdHlwZXMubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnRvTG93ZXJDYXNlKCk7IH0pO1xuICB0eXBlcy5zb3J0KCk7XG5cbiAgLy8gVHJhbnNmb3JtcyBbJ2xvcmVtJywgJ2lwc3VtJ10gaW50byAnYSBsb3JlbSwgb3IgYW4gaXBzdW0nXG4gIHZhciBzdHIgPSB0eXBlcy5tYXAoZnVuY3Rpb24gKHQsIGluZGV4KSB7XG4gICAgdmFyIGFydCA9IH5bICdhJywgJ2UnLCAnaScsICdvJywgJ3UnIF0uaW5kZXhPZih0LmNoYXJBdCgwKSkgPyAnYW4nIDogJ2EnO1xuICAgIHZhciBvciA9IHR5cGVzLmxlbmd0aCA+IDEgJiYgaW5kZXggPT09IHR5cGVzLmxlbmd0aCAtIDEgPyAnb3IgJyA6ICcnO1xuICAgIHJldHVybiBvciArIGFydCArICcgJyArIHQ7XG4gIH0pLmpvaW4oJywgJyk7XG5cbiAgdmFyIG9ialR5cGUgPSB0eXBlKG9iaikudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoIXR5cGVzLnNvbWUoZnVuY3Rpb24gKGV4cGVjdGVkKSB7IHJldHVybiBvYmpUeXBlID09PSBleHBlY3RlZDsgfSkpIHtcbiAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICBmbGFnTXNnICsgJ29iamVjdCB0ZXN0ZWQgbXVzdCBiZSAnICsgc3RyICsgJywgYnV0ICcgKyBvYmpUeXBlICsgJyBnaXZlbicsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBzc2ZpXG4gICAgKTtcbiAgfVxufTtcbiIsIi8qIVxuICogQ2hhaSAtIG1lc3NhZ2UgY29tcG9zaXRpb24gdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJylcbiAgLCBnZXRBY3R1YWwgPSByZXF1aXJlKCcuL2dldEFjdHVhbCcpXG4gICwgaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpXG4gICwgb2JqRGlzcGxheSA9IHJlcXVpcmUoJy4vb2JqRGlzcGxheScpO1xuXG4vKipcbiAqICMjIyAuZ2V0TWVzc2FnZShvYmplY3QsIG1lc3NhZ2UsIG5lZ2F0ZU1lc3NhZ2UpXG4gKlxuICogQ29uc3RydWN0IHRoZSBlcnJvciBtZXNzYWdlIGJhc2VkIG9uIGZsYWdzXG4gKiBhbmQgdGVtcGxhdGUgdGFncy4gVGVtcGxhdGUgdGFncyB3aWxsIHJldHVyblxuICogYSBzdHJpbmdpZmllZCBpbnNwZWN0aW9uIG9mIHRoZSBvYmplY3QgcmVmZXJlbmNlZC5cbiAqXG4gKiBNZXNzYWdlIHRlbXBsYXRlIHRhZ3M6XG4gKiAtIGAje3RoaXN9YCBjdXJyZW50IGFzc2VydGVkIG9iamVjdFxuICogLSBgI3thY3R9YCBhY3R1YWwgdmFsdWVcbiAqIC0gYCN7ZXhwfWAgZXhwZWN0ZWQgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE1lc3NhZ2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRNZXNzYWdlKG9iaiwgYXJncykge1xuICB2YXIgbmVnYXRlID0gZmxhZyhvYmosICduZWdhdGUnKVxuICAgICwgdmFsID0gZmxhZyhvYmosICdvYmplY3QnKVxuICAgICwgZXhwZWN0ZWQgPSBhcmdzWzNdXG4gICAgLCBhY3R1YWwgPSBnZXRBY3R1YWwob2JqLCBhcmdzKVxuICAgICwgbXNnID0gbmVnYXRlID8gYXJnc1syXSA6IGFyZ3NbMV1cbiAgICAsIGZsYWdNc2cgPSBmbGFnKG9iaiwgJ21lc3NhZ2UnKTtcblxuICBpZih0eXBlb2YgbXNnID09PSBcImZ1bmN0aW9uXCIpIG1zZyA9IG1zZygpO1xuICBtc2cgPSBtc2cgfHwgJyc7XG4gIG1zZyA9IG1zZ1xuICAgIC5yZXBsYWNlKC8jXFx7dGhpc1xcfS9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBvYmpEaXNwbGF5KHZhbCk7IH0pXG4gICAgLnJlcGxhY2UoLyNcXHthY3RcXH0vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JqRGlzcGxheShhY3R1YWwpOyB9KVxuICAgIC5yZXBsYWNlKC8jXFx7ZXhwXFx9L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iakRpc3BsYXkoZXhwZWN0ZWQpOyB9KTtcblxuICByZXR1cm4gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnICsgbXNnIDogbXNnO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldEFjdHVhbCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldEFjdHVhbChvYmplY3QsIFthY3R1YWxdKVxuICpcbiAqIFJldHVybnMgdGhlIGBhY3R1YWxgIHZhbHVlIGZvciBhbiBBc3NlcnRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAoY29uc3RydWN0ZWQgQXNzZXJ0aW9uKVxuICogQHBhcmFtIHtBcmd1bWVudHN9IGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZS5hc3NlcnQgYXJndW1lbnRzXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRBY3R1YWxcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEFjdHVhbChvYmosIGFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MubGVuZ3RoID4gNCA/IGFyZ3NbNF0gOiBvYmouX29iajtcbn07XG4iLCIvLyBUaGlzIGlzIChhbG1vc3QpIGRpcmVjdGx5IGZyb20gTm9kZS5qcyB1dGlsc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2Jsb2IvZjhjMzM1ZDBjYWY0N2YxNmQzMTQxM2Y4OWFhMjhlZGEzODc4ZTNhYS9saWIvdXRpbC5qc1xuXG52YXIgZ2V0TmFtZSA9IHJlcXVpcmUoJ2dldC1mdW5jLW5hbWUnKTtcbnZhciBnZXRQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXRQcm9wZXJ0aWVzJyk7XG52YXIgZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldEVudW1lcmFibGVQcm9wZXJ0aWVzJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zcGVjdDtcblxuLyoqXG4gKiAjIyMgLmluc3BlY3Qob2JqLCBbc2hvd0hpZGRlbl0sIFtkZXB0aF0sIFtjb2xvcnNdKVxuICpcbiAqIEVjaG9lcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJpZXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd0hpZGRlbiBGbGFnIHRoYXQgc2hvd3MgaGlkZGVuIChub3QgZW51bWVyYWJsZSlcbiAqICAgIHByb3BlcnRpZXMgb2Ygb2JqZWN0cy4gRGVmYXVsdCBpcyBmYWxzZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCBEZXB0aCBpbiB3aGljaCB0byBkZXNjZW5kIGluIG9iamVjdC4gRGVmYXVsdCBpcyAyLlxuICogQHBhcmFtIHtCb29sZWFufSBjb2xvcnMgRmxhZyB0byB0dXJuIG9uIEFOU0kgZXNjYXBlIGNvZGVzIHRvIGNvbG9yIHRoZVxuICogICAgb3V0cHV0LiBEZWZhdWx0IGlzIGZhbHNlIChubyBjb2xvcmluZykuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBpbnNwZWN0XG4gKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKSB7XG4gIHZhciBjdHggPSB7XG4gICAgc2hvd0hpZGRlbjogc2hvd0hpZGRlbixcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHI7IH1cbiAgfTtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCAodHlwZW9mIGRlcHRoID09PSAndW5kZWZpbmVkJyA/IDIgOiBkZXB0aCkpO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIGEgRE9NIGVsZW1lbnQuXG52YXIgaXNET01FbGVtZW50ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ25vZGVUeXBlJyBpbiBvYmplY3QgJiZcbiAgICAgIG9iamVjdC5ub2RlVHlwZSA9PT0gMSAmJlxuICAgICAgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZyc7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLmluc3BlY3QgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKHR5cGVvZiByZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gSWYgdGhpcyBpcyBhIERPTSBlbGVtZW50LCB0cnkgdG8gZ2V0IHRoZSBvdXRlciBIVE1MLlxuICBpZiAoaXNET01FbGVtZW50KHZhbHVlKSkge1xuICAgIGlmICgnb3V0ZXJIVE1MJyBpbiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm91dGVySFRNTDtcbiAgICAgIC8vIFRoaXMgdmFsdWUgZG9lcyBub3QgaGF2ZSBhbiBvdXRlckhUTUwgYXR0cmlidXRlLFxuICAgICAgLy8gICBpdCBjb3VsZCBzdGlsbCBiZSBhbiBYTUwgZWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIHNlcmlhbGl6ZSBpdFxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnhtbFZlcnNpb24pIHtcbiAgICAgICAgICB2YXIgeG1sU2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7XG4gICAgICAgICAgcmV0dXJuIHhtbFNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZpcmVmb3ggMTEtIGRvIG5vdCBzdXBwb3J0IG91dGVySFRNTFxuICAgICAgICAgIC8vICAgSXQgZG9lcywgaG93ZXZlciwgc3VwcG9ydCBpbm5lckhUTUxcbiAgICAgICAgICAvLyAgIFVzZSB0aGUgZm9sbG93aW5nIHRvIHJlbmRlciB0aGUgZWxlbWVudFxuICAgICAgICAgIHZhciBucyA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdfJyk7XG5cbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICAgICAgdmFyIGh0bWwgPSBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICAgICAgICAucmVwbGFjZSgnPjwnLCAnPicgKyB2YWx1ZS5pbm5lckhUTUwgKyAnPCcpO1xuICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIFRoaXMgY291bGQgYmUgYSBub24tbmF0aXZlIERPTSBpbXBsZW1lbnRhdGlvbixcbiAgICAgICAgLy8gICBjb250aW51ZSB3aXRoIHRoZSBub3JtYWwgZmxvdzpcbiAgICAgICAgLy8gICBwcmludGluZyB0aGUgZWxlbWVudCBhcyBpZiBpdCBpcyBhbiBvYmplY3QuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIgdmlzaWJsZUtleXMgPSBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyh2YWx1ZSk7XG4gIHZhciBrZXlzID0gY3R4LnNob3dIaWRkZW4gPyBnZXRQcm9wZXJ0aWVzKHZhbHVlKSA6IHZpc2libGVLZXlzO1xuXG4gIHZhciBuYW1lLCBuYW1lU3VmZml4O1xuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgLy8gSW4gSUUsIGVycm9ycyBoYXZlIGEgc2luZ2xlIGBzdGFja2AgcHJvcGVydHksIG9yIGlmIHRoZXkgYXJlIHZhbmlsbGEgYEVycm9yYCxcbiAgLy8gYSBgc3RhY2tgIHBsdXMgYGRlc2NyaXB0aW9uYCBwcm9wZXJ0eTsgaWdub3JlIHRob3NlIGZvciBjb25zaXN0ZW5jeS5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwIHx8IChpc0Vycm9yKHZhbHVlKSAmJiAoXG4gICAgICAoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ3N0YWNrJykgfHxcbiAgICAgIChrZXlzLmxlbmd0aCA9PT0gMiAmJiBrZXlzWzBdID09PSAnZGVzY3JpcHRpb24nICYmIGtleXNbMV0gPT09ICdzdGFjaycpXG4gICAgICkpKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbmFtZSA9IGdldE5hbWUodmFsdWUpO1xuICAgICAgbmFtZVN1ZmZpeCA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZVN1ZmZpeCArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJydcbiAgICAsIGFycmF5ID0gZmFsc2VcbiAgICAsIHR5cGVkQXJyYXkgPSBmYWxzZVxuICAgICwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICBpZiAoaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgIHR5cGVkQXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBuYW1lID0gZ2V0TmFtZSh2YWx1ZSk7XG4gICAgbmFtZVN1ZmZpeCA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuYW1lU3VmZml4ICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2UgaWYgKHR5cGVkQXJyYXkpIHtcbiAgICByZXR1cm4gZm9ybWF0VHlwZWRBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgPT09IDAgJiYgKDEvdmFsdWUpID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCctMCcsICdudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSh2YWx1ZS50b1N0cmluZygpLCAnc3ltYm9sJyk7XG4gIH1cbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHZhciBzdHIgPSAnWyAnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA+PSBjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgLSA3KSB7XG4gICAgICBzdHIgKz0gJy4uLic7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc3RyICs9IHZhbHVlW2ldICsgJywgJztcbiAgfVxuICBzdHIgKz0gJyBdJztcblxuICAvLyBSZW1vdmluZyB0cmFpbGluZyBgLCBgIGlmIHRoZSBhcnJheSB3YXMgbm90IHRydW5jYXRlZFxuICBpZiAoc3RyLmluZGV4T2YoJywgIF0nKSAhPT0gLTEpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgnLCAgXScsICcgXScpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZTtcbiAgdmFyIHByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KTtcbiAgdmFyIHN0cjtcblxuICBpZiAocHJvcERlc2NyaXB0b3IpIHtcbiAgICBpZiAocHJvcERlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICBpZiAocHJvcERlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BEZXNjcmlwdG9yLnNldCkge1xuICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodmlzaWJsZUtleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZih2YWx1ZVtrZXldKSA8IDApIHtcbiAgICAgIGlmIChyZWN1cnNlVGltZXMgPT09IG51bGwpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZVtrZXldLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgdmFsdWVba2V5XSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFyKSB7XG4gIC8vIFVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gY2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgVHlwZWRBcnJheVxuICAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGl0J3Mgb25lIG9mIHRoZXNlIHR5cGVzXG4gIHJldHVybiAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiAvXFx3K0FycmF5XSQvLnRlc3Qob2JqZWN0VG9TdHJpbmcoYXIpKSk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpIHx8XG4gICAgICAgICAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhhcikgPT09ICdbb2JqZWN0IEFycmF5XScpO1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gdHlwZW9mIHJlID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gdHlwZW9mIGQgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gdHlwZW9mIGUgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIvKiFcbiAqIENoYWkgLSBmbGFnIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRhbmNpZXNcbiAqL1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG4vKipcbiAqICMjIyAub2JqRGlzcGxheShvYmplY3QpXG4gKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgbWF0Y2hlc1xuICogY3JpdGVyaWEgdG8gYmUgaW5zcGVjdGVkIGluLWxpbmUgZm9yIGVycm9yXG4gKiBtZXNzYWdlcyBvciBzaG91bGQgYmUgdHJ1bmNhdGVkLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGphdmFzY3JpcHQgb2JqZWN0IHRvIGluc3BlY3RcbiAqIEBuYW1lIG9iakRpc3BsYXlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvYmpEaXNwbGF5KG9iaikge1xuICB2YXIgc3RyID0gaW5zcGVjdChvYmopXG4gICAgLCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG5cbiAgaWYgKGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCAmJiBzdHIubGVuZ3RoID49IGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCkge1xuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICByZXR1cm4gIW9iai5uYW1lIHx8IG9iai5uYW1lID09PSAnJ1xuICAgICAgICA/ICdbRnVuY3Rpb25dJ1xuICAgICAgICA6ICdbRnVuY3Rpb246ICcgKyBvYmoubmFtZSArICddJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybiAnWyBBcnJheSgnICsgb2JqLmxlbmd0aCArICcpIF0nO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAsIGtzdHIgPSBrZXlzLmxlbmd0aCA+IDJcbiAgICAgICAgICA/IGtleXMuc3BsaWNlKDAsIDIpLmpvaW4oJywgJykgKyAnLCAuLi4nXG4gICAgICAgICAgOiBrZXlzLmpvaW4oJywgJyk7XG4gICAgICByZXR1cm4gJ3sgT2JqZWN0ICgnICsga3N0ciArICcpIH0nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZmxhZyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmZsYWcob2JqZWN0LCBrZXksIFt2YWx1ZV0pXG4gKlxuICogR2V0IG9yIHNldCBhIGZsYWcgdmFsdWUgb24gYW4gb2JqZWN0LiBJZiBhXG4gKiB2YWx1ZSBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHNldCwgZWxzZSBpdCB3aWxsXG4gKiByZXR1cm4gdGhlIGN1cnJlbnRseSBzZXQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgaWZcbiAqIHRoZSB2YWx1ZSBpcyBub3Qgc2V0LlxuICpcbiAqICAgICB1dGlscy5mbGFnKHRoaXMsICdmb28nLCAnYmFyJyk7IC8vIHNldHRlclxuICogICAgIHV0aWxzLmZsYWcodGhpcywgJ2ZvbycpOyAvLyBnZXR0ZXIsIHJldHVybnMgYGJhcmBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IGNvbnN0cnVjdGVkIEFzc2VydGlvblxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgKG9wdGlvbmFsKVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZmxhZ1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFnKG9iaiwga2V5LCB2YWx1ZSkge1xuICB2YXIgZmxhZ3MgPSBvYmouX19mbGFncyB8fCAob2JqLl9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICBmbGFnc1trZXldID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZsYWdzW2tleV07XG4gIH1cbn07XG4iLCIvKiFcbiAqIENoYWkgLSB0cmFuc2ZlckZsYWdzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG9iamVjdCwgaW5jbHVkZUFsbCA9IHRydWUpXG4gKlxuICogVHJhbnNmZXIgYWxsIHRoZSBmbGFncyBmb3IgYGFzc2VydGlvbmAgdG8gYG9iamVjdGAuIElmXG4gKiBgaW5jbHVkZUFsbGAgaXMgc2V0IHRvIGBmYWxzZWAsIHRoZW4gdGhlIGJhc2UgQ2hhaVxuICogYXNzZXJ0aW9uIGZsYWdzIChuYW1lbHkgYG9iamVjdGAsIGBzc2ZpYCwgYGxvY2tTc2ZpYCxcbiAqIGFuZCBgbWVzc2FnZWApIHdpbGwgbm90IGJlIHRyYW5zZmVycmVkLlxuICpcbiAqXG4gKiAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBBc3NlcnRpb24oKTtcbiAqICAgICB1dGlscy50cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgbmV3QXNzZXJ0aW9uKTtcbiAqXG4gKiAgICAgdmFyIGFub3RoZXJBc3Nlcml0b24gPSBuZXcgQXNzZXJ0aW9uKG15T2JqKTtcbiAqICAgICB1dGlscy50cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgYW5vdGhlckFzc2VydGlvbiwgZmFsc2UpO1xuICpcbiAqIEBwYXJhbSB7QXNzZXJ0aW9ufSBhc3NlcnRpb24gdGhlIGFzc2VydGlvbiB0byB0cmFuc2ZlciB0aGUgZmxhZ3MgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0aGUgb2JqZWN0IHRvIHRyYW5zZmVyIHRoZSBmbGFncyB0bzsgdXN1YWxseSBhIG5ldyBhc3NlcnRpb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5jbHVkZUFsbFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgdHJhbnNmZXJGbGFnc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgb2JqZWN0LCBpbmNsdWRlQWxsKSB7XG4gIHZhciBmbGFncyA9IGFzc2VydGlvbi5fX2ZsYWdzIHx8IChhc3NlcnRpb24uX19mbGFncyA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG4gIGlmICghb2JqZWN0Ll9fZmxhZ3MpIHtcbiAgICBvYmplY3QuX19mbGFncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBpbmNsdWRlQWxsID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMyA/IGluY2x1ZGVBbGwgOiB0cnVlO1xuXG4gIGZvciAodmFyIGZsYWcgaW4gZmxhZ3MpIHtcbiAgICBpZiAoaW5jbHVkZUFsbCB8fFxuICAgICAgICAoZmxhZyAhPT0gJ29iamVjdCcgJiYgZmxhZyAhPT0gJ3NzZmknICYmIGZsYWcgIT09ICdsb2NrU3NmaScgJiYgZmxhZyAhPSAnbWVzc2FnZScpKSB7XG4gICAgICBvYmplY3QuX19mbGFnc1tmbGFnXSA9IGZsYWdzW2ZsYWddO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbHMgU3ltYm9sOiBmYWxzZSwgVWludDhBcnJheTogZmFsc2UsIFdlYWtNYXA6IGZhbHNlICovXG4vKiFcbiAqIGRlZXAtZXFsXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciB0eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcbmZ1bmN0aW9uIEZha2VNYXAoKSB7XG4gIHRoaXMuX2tleSA9ICdjaGFpL2RlZXAtZXFsX18nICsgTWF0aC5yYW5kb20oKSArIERhdGUubm93KCk7XG59XG5cbkZha2VNYXAucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIGdldE1hcChrZXkpIHtcbiAgICByZXR1cm4ga2V5W3RoaXMuX2tleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0TWFwKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIU9iamVjdC5pc0Zyb3plbihrZXkpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoa2V5LCB0aGlzLl9rZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgTWVtb2l6ZU1hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gV2Vha01hcCA6IEZha2VNYXA7XG4vKiFcbiAqIENoZWNrIHRvIHNlZSBpZiB0aGUgTWVtb2l6ZU1hcCBoYXMgcmVjb3JkZWQgYSByZXN1bHQgb2YgdGhlIHR3byBvcGVyYW5kc1xuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNZW1vaXplTWFwfSBtZW1vaXplTWFwXG4gKiBAcmV0dXJucyB7Qm9vbGVhbnxudWxsfSByZXN1bHRcbiovXG5mdW5jdGlvbiBtZW1vaXplQ29tcGFyZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG1lbW9pemVNYXApIHtcbiAgLy8gVGVjaG5pY2FsbHksIFdlYWtNYXAga2V5cyBjYW4gKm9ubHkqIGJlIG9iamVjdHMsIG5vdCBwcmltaXRpdmVzLlxuICBpZiAoIW1lbW9pemVNYXAgfHwgaXNQcmltaXRpdmUobGVmdEhhbmRPcGVyYW5kKSB8fCBpc1ByaW1pdGl2ZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBsZWZ0SGFuZE1hcCA9IG1lbW9pemVNYXAuZ2V0KGxlZnRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZE1hcCkge1xuICAgIHZhciByZXN1bHQgPSBsZWZ0SGFuZE1hcC5nZXQocmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qIVxuICogU2V0IHRoZSByZXN1bHQgb2YgdGhlIGVxdWFsaXR5IGludG8gdGhlIE1lbW9pemVNYXBcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWVtb2l6ZU1hcH0gbWVtb2l6ZU1hcFxuICogQHBhcmFtIHtCb29sZWFufSByZXN1bHRcbiovXG5mdW5jdGlvbiBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgbWVtb2l6ZU1hcCwgcmVzdWx0KSB7XG4gIC8vIFRlY2huaWNhbGx5LCBXZWFrTWFwIGtleXMgY2FuICpvbmx5KiBiZSBvYmplY3RzLCBub3QgcHJpbWl0aXZlcy5cbiAgaWYgKCFtZW1vaXplTWFwIHx8IGlzUHJpbWl0aXZlKGxlZnRIYW5kT3BlcmFuZCkgfHwgaXNQcmltaXRpdmUocmlnaHRIYW5kT3BlcmFuZCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxlZnRIYW5kTWFwID0gbWVtb2l6ZU1hcC5nZXQobGVmdEhhbmRPcGVyYW5kKTtcbiAgaWYgKGxlZnRIYW5kTWFwKSB7XG4gICAgbGVmdEhhbmRNYXAuc2V0KHJpZ2h0SGFuZE9wZXJhbmQsIHJlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgbGVmdEhhbmRNYXAgPSBuZXcgTWVtb2l6ZU1hcCgpO1xuICAgIGxlZnRIYW5kTWFwLnNldChyaWdodEhhbmRPcGVyYW5kLCByZXN1bHQpO1xuICAgIG1lbW9pemVNYXAuc2V0KGxlZnRIYW5kT3BlcmFuZCwgbGVmdEhhbmRNYXApO1xuICB9XG59XG5cbi8qIVxuICogUHJpbWFyeSBFeHBvcnRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBFcXVhbDtcbm1vZHVsZS5leHBvcnRzLk1lbW9pemVNYXAgPSBNZW1vaXplTWFwO1xuXG4vKipcbiAqIEFzc2VydCBkZWVwbHkgbmVzdGVkIHNhbWVWYWx1ZSBlcXVhbGl0eSBiZXR3ZWVuIHR3byBvYmplY3RzIG9mIGFueSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAob3B0aW9uYWwpIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuY29tcGFyYXRvcl0gKG9wdGlvbmFsKSBPdmVycmlkZSBkZWZhdWx0IGFsZ29yaXRobSwgZGV0ZXJtaW5pbmcgY3VzdG9tIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWVtb2l6ZV0gKG9wdGlvbmFsKSBQcm92aWRlIGEgY3VzdG9tIG1lbW9pemF0aW9uIG9iamVjdCB3aGljaCB3aWxsIGNhY2hlIHRoZSByZXN1bHRzIG9mXG4gICAgY29tcGxleCBvYmplY3RzIGZvciBhIHNwZWVkIGJvb3N0LiBCeSBwYXNzaW5nIGBmYWxzZWAgeW91IGNhbiBkaXNhYmxlIG1lbW9pemF0aW9uLCBidXQgdGhpcyB3aWxsIGNhdXNlIGNpcmN1bGFyXG4gICAgcmVmZXJlbmNlcyB0byBibG93IHRoZSBzdGFjay5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgLy8gSWYgd2UgaGF2ZSBhIGNvbXBhcmF0b3IsIHdlIGNhbid0IGFzc3VtZSBhbnl0aGluZzsgc28gYmFpbCB0byBpdHMgY2hlY2sgZmlyc3QuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29tcGFyYXRvcikge1xuICAgIHJldHVybiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhciBzaW1wbGVSZXN1bHQgPSBzaW1wbGVFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAoc2ltcGxlUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHNpbXBsZVJlc3VsdDtcbiAgfVxuXG4gIC8vIERlZXBlciBjb21wYXJpc29ucyBhcmUgcHVzaGVkIHRocm91Z2ggdG8gYSBsYXJnZXIgZnVuY3Rpb25cbiAgcmV0dXJuIGV4dGVuc2l2ZURlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIE1hbnkgY29tcGFyaXNvbnMgY2FuIGJlIGNhbmNlbGVkIG91dCBlYXJseSB2aWEgc2ltcGxlIGVxdWFsaXR5IG9yIHByaW1pdGl2ZSBjaGVja3MuXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEByZXR1cm4ge0Jvb2xlYW58bnVsbH0gZXF1YWwgbWF0Y2hcbiAqL1xuZnVuY3Rpb24gc2ltcGxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKSB7XG4gIC8vIEVxdWFsIHJlZmVyZW5jZXMgKGV4Y2VwdCBmb3IgTnVtYmVycykgY2FuIGJlIHJldHVybmVkIGVhcmx5XG4gIGlmIChsZWZ0SGFuZE9wZXJhbmQgPT09IHJpZ2h0SGFuZE9wZXJhbmQpIHtcbiAgICAvLyBIYW5kbGUgKy0wIGNhc2VzXG4gICAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZCAhPT0gMCB8fCAxIC8gbGVmdEhhbmRPcGVyYW5kID09PSAxIC8gcmlnaHRIYW5kT3BlcmFuZDtcbiAgfVxuXG4gIC8vIGhhbmRsZSBOYU4gY2FzZXNcbiAgaWYgKFxuICAgIGxlZnRIYW5kT3BlcmFuZCAhPT0gbGVmdEhhbmRPcGVyYW5kICYmIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmlnaHRIYW5kT3BlcmFuZCAhPT0gcmlnaHRIYW5kT3BlcmFuZCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEFueXRoaW5nIHRoYXQgaXMgbm90IGFuICdvYmplY3QnLCBpLmUuIHN5bWJvbHMsIGZ1bmN0aW9ucywgYm9vbGVhbnMsIG51bWJlcnMsXG4gIC8vIHN0cmluZ3MsIGFuZCB1bmRlZmluZWQsIGNhbiBiZSBjb21wYXJlZCBieSByZWZlcmVuY2UuXG4gIGlmIChpc1ByaW1pdGl2ZShsZWZ0SGFuZE9wZXJhbmQpIHx8IGlzUHJpbWl0aXZlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgLy8gRWFzeSBvdXQgYi9jIGl0IHdvdWxkIGhhdmUgcGFzc2VkIHRoZSBmaXJzdCBlcXVhbGl0eSBjaGVja1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyohXG4gKiBUaGUgbWFpbiBsb2dpYyBvZiB0aGUgYGRlZXBFcXVhbGAgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChvcHRpb25hbCkgQWRkaXRpb25hbCBvcHRpb25zXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5jb21wYXJhdG9yXSAob3B0aW9uYWwpIE92ZXJyaWRlIGRlZmF1bHQgYWxnb3JpdGhtLCBkZXRlcm1pbmluZyBjdXN0b20gZXF1YWxpdHkuXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5tZW1vaXplXSAob3B0aW9uYWwpIFByb3ZpZGUgYSBjdXN0b20gbWVtb2l6YXRpb24gb2JqZWN0IHdoaWNoIHdpbGwgY2FjaGUgdGhlIHJlc3VsdHMgb2ZcbiAgICBjb21wbGV4IG9iamVjdHMgZm9yIGEgc3BlZWQgYm9vc3QuIEJ5IHBhc3NpbmcgYGZhbHNlYCB5b3UgY2FuIGRpc2FibGUgbWVtb2l6YXRpb24sIGJ1dCB0aGlzIHdpbGwgY2F1c2UgY2lyY3VsYXJcbiAgICByZWZlcmVuY2VzIHRvIGJsb3cgdGhlIHN0YWNrLlxuICogQHJldHVybiB7Qm9vbGVhbn0gZXF1YWwgbWF0Y2hcbiovXG5mdW5jdGlvbiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLm1lbW9pemUgPSBvcHRpb25zLm1lbW9pemUgPT09IGZhbHNlID8gZmFsc2UgOiBvcHRpb25zLm1lbW9pemUgfHwgbmV3IE1lbW9pemVNYXAoKTtcbiAgdmFyIGNvbXBhcmF0b3IgPSBvcHRpb25zICYmIG9wdGlvbnMuY29tcGFyYXRvcjtcblxuICAvLyBDaGVjayBpZiBhIG1lbW9pemVkIHJlc3VsdCBleGlzdHMuXG4gIHZhciBtZW1vaXplUmVzdWx0TGVmdCA9IG1lbW9pemVDb21wYXJlKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplKTtcbiAgaWYgKG1lbW9pemVSZXN1bHRMZWZ0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lbW9pemVSZXN1bHRMZWZ0O1xuICB9XG4gIHZhciBtZW1vaXplUmVzdWx0UmlnaHQgPSBtZW1vaXplQ29tcGFyZShyaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSk7XG4gIGlmIChtZW1vaXplUmVzdWx0UmlnaHQgIT09IG51bGwpIHtcbiAgICByZXR1cm4gbWVtb2l6ZVJlc3VsdFJpZ2h0O1xuICB9XG5cbiAgLy8gSWYgYSBjb21wYXJhdG9yIGlzIHByZXNlbnQsIHVzZSBpdC5cbiAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgY29tcGFyYXRvclJlc3VsdCA9IGNvbXBhcmF0b3IobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKTtcbiAgICAvLyBDb21wYXJhdG9ycyBtYXkgcmV0dXJuIG51bGwsIGluIHdoaWNoIGNhc2Ugd2Ugd2FudCB0byBnbyBiYWNrIHRvIGRlZmF1bHQgYmVoYXZpb3IuXG4gICAgaWYgKGNvbXBhcmF0b3JSZXN1bHQgPT09IGZhbHNlIHx8IGNvbXBhcmF0b3JSZXN1bHQgPT09IHRydWUpIHtcbiAgICAgIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIGNvbXBhcmF0b3JSZXN1bHQpO1xuICAgICAgcmV0dXJuIGNvbXBhcmF0b3JSZXN1bHQ7XG4gICAgfVxuICAgIC8vIFRvIGFsbG93IGNvbXBhcmF0b3JzIHRvIG92ZXJyaWRlICphbnkqIGJlaGF2aW9yLCB3ZSByYW4gdGhlbSBmaXJzdC4gU2luY2UgaXQgZGlkbid0IGRlY2lkZVxuICAgIC8vIHdoYXQgdG8gZG8sIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvIHJldHVybiB0aGUgYmFzaWMgdGVzdHMgZmlyc3QgYmVmb3JlIHdlIG1vdmUgb24uXG4gICAgdmFyIHNpbXBsZVJlc3VsdCA9IHNpbXBsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgaWYgKHNpbXBsZVJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgLy8gRG9uJ3QgbWVtb2l6ZSB0aGlzLCBpdCB0YWtlcyBsb25nZXIgdG8gc2V0L3JldHJpZXZlIHRoYW4gdG8ganVzdCBjb21wYXJlLlxuICAgICAgcmV0dXJuIHNpbXBsZVJlc3VsdDtcbiAgICB9XG4gIH1cblxuICB2YXIgbGVmdEhhbmRUeXBlID0gdHlwZShsZWZ0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRUeXBlICE9PSB0eXBlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSwgZmFsc2UpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlbXBvcmFyaWx5IHNldCB0aGUgb3BlcmFuZHMgaW4gdGhlIG1lbW9pemUgb2JqZWN0IHRvIHByZXZlbnQgYmxvd2luZyB0aGUgc3RhY2tcbiAgbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSwgdHJ1ZSk7XG5cbiAgdmFyIHJlc3VsdCA9IGV4dGVuc2l2ZURlZXBFcXVhbEJ5VHlwZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kVHlwZSwgb3B0aW9ucyk7XG4gIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV4dGVuc2l2ZURlZXBFcXVhbEJ5VHlwZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kVHlwZSwgb3B0aW9ucykge1xuICBzd2l0Y2ggKGxlZnRIYW5kVHlwZSkge1xuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgY2FzZSAnTnVtYmVyJzpcbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICBjYXNlICdEYXRlJzpcbiAgICAgIC8vIElmIHRoZXNlIHR5cGVzIGFyZSB0aGVpciBpbnN0YW5jZSB0eXBlcyAoZS5nLiBgbmV3IE51bWJlcmApIHRoZW4gcmUtZGVlcEVxdWFsIGFnYWluc3QgdGhlaXIgdmFsdWVzXG4gICAgICByZXR1cm4gZGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZC52YWx1ZU9mKCksIHJpZ2h0SGFuZE9wZXJhbmQudmFsdWVPZigpKTtcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICByZXR1cm4gbGVmdEhhbmRPcGVyYW5kID09PSByaWdodEhhbmRPcGVyYW5kO1xuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnSW50OEFycmF5JzpcbiAgICBjYXNlICdVaW50OEFycmF5JzpcbiAgICBjYXNlICdVaW50OENsYW1wZWRBcnJheSc6XG4gICAgY2FzZSAnSW50MTZBcnJheSc6XG4gICAgY2FzZSAnVWludDE2QXJyYXknOlxuICAgIGNhc2UgJ0ludDMyQXJyYXknOlxuICAgIGNhc2UgJ1VpbnQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDMyQXJyYXknOlxuICAgIGNhc2UgJ0Zsb2F0NjRBcnJheSc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgcmV0dXJuIHJlZ2V4cEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgY2FzZSAnR2VuZXJhdG9yJzpcbiAgICAgIHJldHVybiBnZW5lcmF0b3JFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGNhc2UgJ0RhdGFWaWV3JzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKG5ldyBVaW50OEFycmF5KGxlZnRIYW5kT3BlcmFuZC5idWZmZXIpLCBuZXcgVWludDhBcnJheShyaWdodEhhbmRPcGVyYW5kLmJ1ZmZlciksIG9wdGlvbnMpO1xuICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKG5ldyBVaW50OEFycmF5KGxlZnRIYW5kT3BlcmFuZCksIG5ldyBVaW50OEFycmF5KHJpZ2h0SGFuZE9wZXJhbmQpLCBvcHRpb25zKTtcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGNhc2UgJ01hcCc6XG4gICAgICByZXR1cm4gZW50cmllc0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBvYmplY3RFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qIVxuICogQ29tcGFyZSB0d28gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgZXF1YWxpdHkuXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtSZWdFeHB9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIHJlZ2V4cEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCkge1xuICByZXR1cm4gbGVmdEhhbmRPcGVyYW5kLnRvU3RyaW5nKCkgPT09IHJpZ2h0SGFuZE9wZXJhbmQudG9TdHJpbmcoKTtcbn1cblxuLyohXG4gKiBDb21wYXJlIHR3byBTZXRzL01hcHMgZm9yIGVxdWFsaXR5LiBGYXN0ZXIgdGhhbiBvdGhlciBlcXVhbGl0eSBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtTZXR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtTZXR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gZW50cmllc0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICAvLyBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBTZXQjZW50cmllcyBvciBTZXQjQEBpdGVyYXRvciwgc28gd2UgbmVlZCBtYW51YWxseSBwb3B1bGF0ZSB1c2luZyBTZXQjZm9yRWFjaFxuICBpZiAobGVmdEhhbmRPcGVyYW5kLnNpemUgIT09IHJpZ2h0SGFuZE9wZXJhbmQuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobGVmdEhhbmRPcGVyYW5kLnNpemUgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgbGVmdEhhbmRJdGVtcyA9IFtdO1xuICB2YXIgcmlnaHRIYW5kSXRlbXMgPSBbXTtcbiAgbGVmdEhhbmRPcGVyYW5kLmZvckVhY2goZnVuY3Rpb24gZ2F0aGVyRW50cmllcyhrZXksIHZhbHVlKSB7XG4gICAgbGVmdEhhbmRJdGVtcy5wdXNoKFsga2V5LCB2YWx1ZSBdKTtcbiAgfSk7XG4gIHJpZ2h0SGFuZE9wZXJhbmQuZm9yRWFjaChmdW5jdGlvbiBnYXRoZXJFbnRyaWVzKGtleSwgdmFsdWUpIHtcbiAgICByaWdodEhhbmRJdGVtcy5wdXNoKFsga2V5LCB2YWx1ZSBdKTtcbiAgfSk7XG4gIHJldHVybiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kSXRlbXMuc29ydCgpLCByaWdodEhhbmRJdGVtcy5zb3J0KCksIG9wdGlvbnMpO1xufVxuXG4vKiFcbiAqIFNpbXBsZSBlcXVhbGl0eSBmb3IgZmxhdCBpdGVyYWJsZSBvYmplY3RzIHN1Y2ggYXMgQXJyYXlzLCBUeXBlZEFycmF5cyBvciBOb2RlLmpzIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtJdGVyYWJsZX0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBsZWZ0SGFuZE9wZXJhbmQubGVuZ3RoO1xuICBpZiAobGVuZ3RoICE9PSByaWdodEhhbmRPcGVyYW5kLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTE7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmRbaW5kZXhdLCByaWdodEhhbmRPcGVyYW5kW2luZGV4XSwgb3B0aW9ucykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKiFcbiAqIFNpbXBsZSBlcXVhbGl0eSBmb3IgZ2VuZXJhdG9yIG9iamVjdHMgc3VjaCBhcyB0aG9zZSByZXR1cm5lZCBieSBnZW5lcmF0b3IgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7SXRlcmFibGV9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtJdGVyYWJsZX0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBnZW5lcmF0b3JFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwoZ2V0R2VuZXJhdG9yRW50cmllcyhsZWZ0SGFuZE9wZXJhbmQpLCBnZXRHZW5lcmF0b3JFbnRyaWVzKHJpZ2h0SGFuZE9wZXJhbmQpLCBvcHRpb25zKTtcbn1cblxuLyohXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgYW4gQEBpdGVyYXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBoYXMgYW4gQEBpdGVyYXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaGFzSXRlcmF0b3JGdW5jdGlvbih0YXJnZXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0YXJnZXRbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyohXG4gKiBHZXRzIGFsbCBpdGVyYXRvciBlbnRyaWVzIGZyb20gdGhlIGdpdmVuIE9iamVjdC4gSWYgdGhlIE9iamVjdCBoYXMgbm8gQEBpdGVyYXRvciBmdW5jdGlvbiwgcmV0dXJucyBhbiBlbXB0eSBhcnJheS5cbiAqIFRoaXMgd2lsbCBjb25zdW1lIHRoZSBpdGVyYXRvciAtIHdoaWNoIGNvdWxkIGhhdmUgc2lkZSBlZmZlY3RzIGRlcGVuZGluZyBvbiB0aGUgQEBpdGVyYXRvciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7QXJyYXl9IGFuIGFycmF5IG9mIGVudHJpZXMgZnJvbSB0aGUgQEBpdGVyYXRvciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBnZXRJdGVyYXRvckVudHJpZXModGFyZ2V0KSB7XG4gIGlmIChoYXNJdGVyYXRvckZ1bmN0aW9uKHRhcmdldCkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGdldEdlbmVyYXRvckVudHJpZXModGFyZ2V0W1N5bWJvbC5pdGVyYXRvcl0oKSk7XG4gICAgfSBjYXRjaCAoaXRlcmF0b3JFcnJvcikge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW107XG59XG5cbi8qIVxuICogR2V0cyBhbGwgZW50cmllcyBmcm9tIGEgR2VuZXJhdG9yLiBUaGlzIHdpbGwgY29uc3VtZSB0aGUgZ2VuZXJhdG9yIC0gd2hpY2ggY291bGQgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gKlxuICogQHBhcmFtIHtHZW5lcmF0b3J9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBlbnRyaWVzIGZyb20gdGhlIEdlbmVyYXRvci5cbiAqL1xuZnVuY3Rpb24gZ2V0R2VuZXJhdG9yRW50cmllcyhnZW5lcmF0b3IpIHtcbiAgdmFyIGdlbmVyYXRvclJlc3VsdCA9IGdlbmVyYXRvci5uZXh0KCk7XG4gIHZhciBhY2N1bXVsYXRvciA9IFsgZ2VuZXJhdG9yUmVzdWx0LnZhbHVlIF07XG4gIHdoaWxlIChnZW5lcmF0b3JSZXN1bHQuZG9uZSA9PT0gZmFsc2UpIHtcbiAgICBnZW5lcmF0b3JSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICAgIGFjY3VtdWxhdG9yLnB1c2goZ2VuZXJhdG9yUmVzdWx0LnZhbHVlKTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qIVxuICogR2V0cyBhbGwgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBrZXlzIGZyb20gYSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIGtleXMgZnJvbSB0aGUgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlS2V5cyh0YXJnZXQpIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuXG4vKiFcbiAqIERldGVybWluZXMgaWYgdHdvIG9iamVjdHMgaGF2ZSBtYXRjaGluZyB2YWx1ZXMsIGdpdmVuIGEgc2V0IG9mIGtleXMuIERlZmVycyB0byBkZWVwRXF1YWwgZm9yIHRoZSBlcXVhbGl0eSBjaGVjayBvZlxuICogZWFjaCBrZXkuIElmIGFueSB2YWx1ZSBvZiB0aGUgZ2l2ZW4ga2V5IGlzIG5vdCBlcXVhbCwgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlIChlYXJseSkuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIEFuIGFycmF5IG9mIGtleXMgdG8gY29tcGFyZSB0aGUgdmFsdWVzIG9mIGxlZnRIYW5kT3BlcmFuZCBhbmQgcmlnaHRIYW5kT3BlcmFuZCBhZ2FpbnN0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5mdW5jdGlvbiBrZXlzRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZFtrZXlzW2ldXSwgcmlnaHRIYW5kT3BlcmFuZFtrZXlzW2ldXSwgb3B0aW9ucykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKiFcbiAqIFJlY3Vyc2l2ZWx5IGNoZWNrIHRoZSBlcXVhbGl0eSBvZiB0d28gT2JqZWN0cy4gT25jZSBiYXNpYyBzYW1lbmVzcyBoYXMgYmVlbiBlc3RhYmxpc2hlZCBpdCB3aWxsIGRlZmVyIHRvIGBkZWVwRXF1YWxgXG4gKiBmb3IgZWFjaCBlbnVtZXJhYmxlIGtleSBpbiB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBvYmplY3RFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlZnRIYW5kS2V5cyA9IGdldEVudW1lcmFibGVLZXlzKGxlZnRIYW5kT3BlcmFuZCk7XG4gIHZhciByaWdodEhhbmRLZXlzID0gZ2V0RW51bWVyYWJsZUtleXMocmlnaHRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZEtleXMubGVuZ3RoICYmIGxlZnRIYW5kS2V5cy5sZW5ndGggPT09IHJpZ2h0SGFuZEtleXMubGVuZ3RoKSB7XG4gICAgbGVmdEhhbmRLZXlzLnNvcnQoKTtcbiAgICByaWdodEhhbmRLZXlzLnNvcnQoKTtcbiAgICBpZiAoaXRlcmFibGVFcXVhbChsZWZ0SGFuZEtleXMsIHJpZ2h0SGFuZEtleXMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5c0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgbGVmdEhhbmRLZXlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhciBsZWZ0SGFuZEVudHJpZXMgPSBnZXRJdGVyYXRvckVudHJpZXMobGVmdEhhbmRPcGVyYW5kKTtcbiAgdmFyIHJpZ2h0SGFuZEVudHJpZXMgPSBnZXRJdGVyYXRvckVudHJpZXMocmlnaHRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZEVudHJpZXMubGVuZ3RoICYmIGxlZnRIYW5kRW50cmllcy5sZW5ndGggPT09IHJpZ2h0SGFuZEVudHJpZXMubGVuZ3RoKSB7XG4gICAgbGVmdEhhbmRFbnRyaWVzLnNvcnQoKTtcbiAgICByaWdodEhhbmRFbnRyaWVzLnNvcnQoKTtcbiAgICByZXR1cm4gaXRlcmFibGVFcXVhbChsZWZ0SGFuZEVudHJpZXMsIHJpZ2h0SGFuZEVudHJpZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGxlZnRIYW5kS2V5cy5sZW5ndGggPT09IDAgJiZcbiAgICAgIGxlZnRIYW5kRW50cmllcy5sZW5ndGggPT09IDAgJiZcbiAgICAgIHJpZ2h0SGFuZEtleXMubGVuZ3RoID09PSAwICYmXG4gICAgICByaWdodEhhbmRFbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiFcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYSBwcmltaXRpdmUuXG4gKlxuICogVGhpcyBpbnRlbnRpb25hbGx5IHJldHVybnMgdHJ1ZSBmb3IgYWxsIG9iamVjdHMgdGhhdCBjYW4gYmUgY29tcGFyZWQgYnkgcmVmZXJlbmNlLFxuICogaW5jbHVkaW5nIGZ1bmN0aW9ucyBhbmQgc3ltYm9scy5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiBDaGFpIC0gZ2V0RnVuY05hbWUgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRGdW5jTmFtZShjb25zdHJ1Y3RvckZuKVxuICpcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbi5cbiAqIFdoZW4gYSBub24tZnVuY3Rpb24gaW5zdGFuY2UgaXMgcGFzc2VkLCByZXR1cm5zIGBudWxsYC5cbiAqIFRoaXMgYWxzbyBpbmNsdWRlcyBhIHBvbHlmaWxsIGZ1bmN0aW9uIGlmIGBhRnVuYy5uYW1lYCBpcyBub3QgZGVmaW5lZC5cbiAqXG4gKiBAbmFtZSBnZXRGdW5jTmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudmFyIHRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uTmFtZU1hdGNoID0gL1xccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqW14oPzoqXFwvKV0rXFwqXFwvXFxzKikqKFteXFxzXFwoXFwvXSspLztcbmZ1bmN0aW9uIGdldEZ1bmNOYW1lKGFGdW5jKSB7XG4gIGlmICh0eXBlb2YgYUZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBuYW1lID0gJyc7XG4gIGlmICh0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBhRnVuYy5uYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEhlcmUgd2UgcnVuIGEgcG9seWZpbGwgaWYgRnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCB0aGUgYG5hbWVgIHByb3BlcnR5IGFuZCBpZiBhRnVuYy5uYW1lIGlzIG5vdCBkZWZpbmVkXG4gICAgdmFyIG1hdGNoID0gdG9TdHJpbmcuY2FsbChhRnVuYykubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBgbmFtZWAgcHJvcGVydHkgd2UganVzdCB1c2UgaXRcbiAgICBuYW1lID0gYUZ1bmMubmFtZTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZ1bmNOYW1lO1xuIiwiLyohXG4gKiBDaGFpIC0gYWRkUHJvcGVydHkgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBpc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5hZGRQcm9wZXJ0eShjdHgsIG5hbWUsIGdldHRlcilcbiAqXG4gKiBBZGRzIGEgcHJvcGVydHkgdG8gdGhlIHByb3RvdHlwZSBvZiBhbiBvYmplY3QuXG4gKlxuICogICAgIHV0aWxzLmFkZFByb3BlcnR5KGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmluc3RhbmNlb2YoRm9vKTtcbiAqICAgICB9KTtcbiAqXG4gKiBDYW4gYWxzbyBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIGBjaGFpLkFzc2VydGlvbmAuXG4gKlxuICogICAgIGNoYWkuQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdmb28nLCBmbik7XG4gKlxuICogVGhlbiBjYW4gYmUgdXNlZCBhcyBhbnkgb3RoZXIgYXNzZXJ0aW9uLlxuICpcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmJlLmZvbztcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB0byB3aGljaCB0aGUgcHJvcGVydHkgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHByb3BlcnR5IHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0dGVyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZFByb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpIHtcbiAgZ2V0dGVyID0gZ2V0dGVyID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IGdldHRlcjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBuYW1lLFxuICAgIHsgZ2V0OiBmdW5jdGlvbiBwcm9wZXJ0eUdldHRlcigpIHtcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYHByb3BlcnR5R2V0dGVyYCBjYXVzZXMgdGhpcyBmdW5jdGlvbiB0b1xuICAgICAgICAvLyBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tIHRoZVxuICAgICAgICAvLyBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgLy8gdGhlIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQgYW5kIHByb3h5IHByb3RlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgICAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZFxuICAgICAgICAvLyBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhlIGZpcnN0IGNhc2UsIHRoZSBgc3NmaWAgZmxhZ1xuICAgICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kXG4gICAgICAgIC8vIGNhc2UsIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBwcm94eSBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZW4gdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAgICAgLy8gc2V0IGJ5IHRoZSBwcm94eSBnZXR0ZXIuXG4gICAgICAgIGlmICghaXNQcm94eUVuYWJsZWQoKSAmJiAhZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBwcm9wZXJ0eUdldHRlcik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0dGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgfVxuICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGFkZE1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5hZGRNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QpXG4gKlxuICogQWRkcyBhIG1ldGhvZCB0byB0aGUgcHJvdG90eXBlIG9mIGFuIG9iamVjdC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmVxdWFsKHN0cik7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChmb29TdHIpLnRvLmJlLmZvbygnYmFyJyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3QgdG8gd2hpY2ggdGhlIG1ldGhvZCBpcyBhZGRlZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZE1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZE1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgbWV0aG9kV3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgbWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXMgZnVuY3Rpb24gdG8gYmUgdGhlXG4gICAgLy8gc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZlxuICAgIC8vIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgbWV0aG9kV3JhcHBlcik7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG5cbiAgYWRkTGVuZ3RoR3VhcmQobWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG1ldGhvZFdyYXBwZXIsIG5hbWUpO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZVByb3BlcnR5IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAub3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBmbilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBwcm9wZXJ0eSBnZXR0ZXIgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgdmFsdWUuIE11c3QgcmV0dXJuIGZ1bmN0aW9uIHRvIHVzZSBhcyBnZXR0ZXIuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZVByb3BlcnR5KGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ29rJywgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAqICAgICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgRm9vKSB7XG4gKiAgICAgICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iai5uYW1lKS50by5lcXVhbCgnYmFyJyk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVQcm9wZXJ0eSgnZm9vJywgZm4pO1xuICpcbiAqIFRoZW4gY2FuIGJlIHVzZWQgYXMgYW55IG90aGVyIGFzc2VydGlvbi5cbiAqXG4gKiAgICAgZXhwZWN0KG15Rm9vKS50by5iZS5vaztcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgcHJvcGVydHkgdG8gb3ZlcndyaXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZVByb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpIHtcbiAgdmFyIF9nZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN0eCwgbmFtZSlcbiAgICAsIF9zdXBlciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGlmIChfZ2V0ICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBfZ2V0LmdldClcbiAgICBfc3VwZXIgPSBfZ2V0LmdldFxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIG92ZXJ3cml0aW5nUHJvcGVydHlHZXR0ZXIoKSB7XG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lc1xuICAgICAgICAvLyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgLy8gdGhlIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQgYW5kIHByb3h5IHByb3RlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgICAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZFxuICAgICAgICAvLyBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhlIGZpcnN0IGNhc2UsIHRoZSBgc3NmaWAgZmxhZ1xuICAgICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kXG4gICAgICAgIC8vIGNhc2UsIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBwcm94eSBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZW4gdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAgICAgLy8gc2V0IGJ5IHRoZSBwcm94eSBnZXR0ZXIuXG4gICAgICAgIGlmICghaXNQcm94eUVuYWJsZWQoKSAmJiAhZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBsb2NrU3NmaWAgZmxhZyB0byBgdHJ1ZWAgcHJldmVudHMgdGhlIG92ZXJ3cml0dGVuXG4gICAgICAgIC8vIGFzc2VydGlvbiBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYFxuICAgICAgICAvLyBmbGFnIGlzIGFscmVhZHkgc2V0IHRvIHRoZSBjb3JyZWN0IHN0YXJ0aW5nIHBvaW50IGZvciB0aGlzIGFzc2VydGlvbi5cbiAgICAgICAgdmFyIG9yaWdMb2NrU3NmaSA9IGZsYWcodGhpcywgJ2xvY2tTc2ZpJyk7XG4gICAgICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZXR0ZXIoX3N1cGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIG9yaWdMb2NrU3NmaSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgfVxuICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZU1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5vdmVyd3JpdGVNZXRob2QoY3R4LCBuYW1lLCBmbilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBtZXRob2QgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgZnVuY3Rpb24uIE11c3QgcmV0dXJuIGZ1bmN0aW9uXG4gKiB0byBiZSB1c2VkIGZvciBuYW1lLlxuICpcbiAqICAgICB1dGlscy5vdmVyd3JpdGVNZXRob2QoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnZXF1YWwnLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICogICAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBGb28pIHtcbiAqICAgICAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqLnZhbHVlKS50by5lcXVhbChzdHIpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uZXF1YWwoJ2JhcicpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHdob3NlIG1ldGhvZCBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgX21ldGhvZCA9IGN0eFtuYW1lXVxuICAgICwgX3N1cGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfTtcblxuICBpZiAoX21ldGhvZCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgX21ldGhvZClcbiAgICBfc3VwZXIgPSBfbWV0aG9kO1xuXG4gIHZhciBvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXNcbiAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tXG4gICAgLy8gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgb3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyKTtcbiAgICB9XG5cbiAgICAvLyBTZXR0aW5nIHRoZSBgbG9ja1NzZmlgIGZsYWcgdG8gYHRydWVgIHByZXZlbnRzIHRoZSBvdmVyd3JpdHRlbiBhc3NlcnRpb25cbiAgICAvLyBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYCBmbGFnIGlzIGFscmVhZHlcbiAgICAvLyBzZXQgdG8gdGhlIGNvcnJlY3Qgc3RhcnRpbmcgcG9pbnQgZm9yIHRoaXMgYXNzZXJ0aW9uLlxuICAgIHZhciBvcmlnTG9ja1NzZmkgPSBmbGFnKHRoaXMsICdsb2NrU3NmaScpO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfc3VwZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZmxhZyh0aGlzLCAnbG9ja1NzZmknLCBvcmlnTG9ja1NzZmkpO1xuXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgfVxuXG4gIGFkZExlbmd0aEd1YXJkKG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gYWRkQ2hhaW5pbmdNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBhZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBwcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKiFcbiAqIE1vZHVsZSB2YXJpYWJsZXNcbiAqL1xuXG4vLyBDaGVjayB3aGV0aGVyIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGlzIHN1cHBvcnRlZFxudmFyIGNhblNldFByb3RvdHlwZSA9IHR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPT09ICdmdW5jdGlvbic7XG5cbi8vIFdpdGhvdXQgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgc3VwcG9ydCwgdGhpcyBtb2R1bGUgd2lsbCBuZWVkIHRvIGFkZCBwcm9wZXJ0aWVzIHRvIGEgZnVuY3Rpb24uXG4vLyBIb3dldmVyLCBzb21lIG9mIGZ1bmN0aW9ucycgb3duIHByb3BzIGFyZSBub3QgY29uZmlndXJhYmxlIGFuZCBzaG91bGQgYmUgc2tpcHBlZC5cbnZhciB0ZXN0Rm4gPSBmdW5jdGlvbigpIHt9O1xudmFyIGV4Y2x1ZGVOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3RGbikuZmlsdGVyKGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0ZXN0Rm4sIG5hbWUpO1xuXG4gIC8vIE5vdGU6IFBoYW50b21KUyAxLnggaW5jbHVkZXMgYGNhbGxlZWAgYXMgb25lIG9mIGB0ZXN0Rm5gJ3Mgb3duIHByb3BlcnRpZXMsXG4gIC8vIGJ1dCB0aGVuIHJldHVybnMgYHVuZGVmaW5lZGAgYXMgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIGBjYWxsZWVgLiBBcyBhXG4gIC8vIHdvcmthcm91bmQsIHdlIHBlcmZvcm0gYW4gb3RoZXJ3aXNlIHVubmVjZXNzYXJ5IHR5cGUtY2hlY2sgZm9yIGBwcm9wRGVzY2AsXG4gIC8vIGFuZCB0aGVuIGZpbHRlciBpdCBvdXQgaWYgaXQncyBub3QgYW4gb2JqZWN0IGFzIGl0IHNob3VsZCBiZS5cbiAgaWYgKHR5cGVvZiBwcm9wRGVzYyAhPT0gJ29iamVjdCcpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuICFwcm9wRGVzYy5jb25maWd1cmFibGU7XG59KTtcblxuLy8gQ2FjaGUgYEZ1bmN0aW9uYCBwcm9wZXJ0aWVzXG52YXIgY2FsbCAgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCxcbiAgICBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLyoqXG4gKiAjIyMgLmFkZENoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcilcbiAqXG4gKiBBZGRzIGEgbWV0aG9kIHRvIGFuIG9iamVjdCwgc3VjaCB0aGF0IHRoZSBtZXRob2QgY2FuIGFsc28gYmUgY2hhaW5lZC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkQ2hhaW5hYmxlTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmVxdWFsKHN0cik7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2ZvbycsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKTtcbiAqXG4gKiBUaGUgcmVzdWx0IGNhbiB0aGVuIGJlIHVzZWQgYXMgYm90aCBhIG1ldGhvZCBhc3NlcnRpb24sIGV4ZWN1dGluZyBib3RoIGBtZXRob2RgIGFuZFxuICogYGNoYWluaW5nQmVoYXZpb3JgLCBvciBhcyBhIGxhbmd1YWdlIGNoYWluLCB3aGljaCBvbmx5IGV4ZWN1dGVzIGBjaGFpbmluZ0JlaGF2aW9yYC5cbiAqXG4gKiAgICAgZXhwZWN0KGZvb1N0cikudG8uYmUuZm9vKCdiYXInKTtcbiAqICAgICBleHBlY3QoZm9vU3RyKS50by5iZS5mb28uZXF1YWwoJ2ZvbycpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBtZXRob2QgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCB0byBhZGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBgbmFtZWAsIHdoZW4gY2FsbGVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFpbmluZ0JlaGF2aW9yIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgYWRkQ2hhaW5hYmxlTWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkQ2hhaW5hYmxlTWV0aG9kKGN0eCwgbmFtZSwgbWV0aG9kLCBjaGFpbmluZ0JlaGF2aW9yKSB7XG4gIGlmICh0eXBlb2YgY2hhaW5pbmdCZWhhdmlvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gIH1cblxuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSB7XG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgICwgY2hhaW5pbmdCZWhhdmlvcjogY2hhaW5pbmdCZWhhdmlvclxuICB9O1xuXG4gIC8vIHNhdmUgdGhlIG1ldGhvZHMgc28gd2UgY2FuIG92ZXJ3cml0ZSB0aGVtIGxhdGVyLCBpZiB3ZSBuZWVkIHRvLlxuICBpZiAoIWN0eC5fX21ldGhvZHMpIHtcbiAgICBjdHguX19tZXRob2RzID0ge307XG4gIH1cbiAgY3R4Ll9fbWV0aG9kc1tuYW1lXSA9IGNoYWluYWJsZUJlaGF2aW9yO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIGNoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICAgICAgY2hhaW5hYmxlQmVoYXZpb3IuY2hhaW5pbmdCZWhhdmlvci5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHZhciBjaGFpbmFibGVNZXRob2RXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBjaGFpbmFibGVNZXRob2RXcmFwcGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAvLyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgYSBmYWlsZWQgYXNzZXJ0aW9uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIGFzIHRoZSBzdGFydGluZyBwb2ludCBpZlxuICAgICAgICAgIC8vIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXNuJ3Qgc2V0LlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRoZW4gdGhpcyBhc3NlcnRpb24gaXMgYmVpbmdcbiAgICAgICAgICAvLyBpbnZva2VkIGZyb20gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGlzIGNhc2UsIHRoZSBgc3NmaWBcbiAgICAgICAgICAvLyBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgb3ZlcndyaXRpbmcgYSBjaGFpbmFibGUgbWV0aG9kIG1lcmVseSByZXBsYWNlcyB0aGUgc2F2ZWRcbiAgICAgICAgICAvLyBtZXRob2RzIGluIGBjdHguX19tZXRob2RzYCBpbnN0ZWFkIG9mIGNvbXBsZXRlbHkgcmVwbGFjaW5nIHRoZVxuICAgICAgICAgIC8vIG92ZXJ3cml0dGVuIGFzc2VydGlvbi4gVGhlcmVmb3JlLCBhbiBvdmVyd3JpdGluZyBhc3NlcnRpb24gd29uJ3RcbiAgICAgICAgICAvLyBzZXQgdGhlIGBzc2ZpYCBvciBgbG9ja1NzZmlgIGZsYWdzLlxuICAgICAgICAgIGlmICghZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIGNoYWluYWJsZU1ldGhvZFdyYXBwZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZXN1bHQgPSBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgICAgICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZExlbmd0aEd1YXJkKGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIG5hbWUsIHRydWUpO1xuXG4gICAgICAgIC8vIFVzZSBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKGNhblNldFByb3RvdHlwZSkge1xuICAgICAgICAgIC8vIEluaGVyaXQgYWxsIHByb3BlcnRpZXMgZnJvbSB0aGUgb2JqZWN0IGJ5IHJlcGxhY2luZyB0aGUgYEZ1bmN0aW9uYCBwcm90b3R5cGVcbiAgICAgICAgICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBgY2FsbGAgYW5kIGBhcHBseWAgbWV0aG9kcyBmcm9tIGBGdW5jdGlvbmBcbiAgICAgICAgICBwcm90b3R5cGUuY2FsbCA9IGNhbGw7XG4gICAgICAgICAgcHJvdG90eXBlLmFwcGx5ID0gYXBwbHk7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIHByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCByZWRlZmluZSBhbGwgcHJvcGVydGllcyAoc2xvdyEpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBhc3NlcnRlck5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3R4KTtcbiAgICAgICAgICBhc3NlcnRlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGFzc2VydGVyTmFtZSkge1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVOYW1lcy5pbmRleE9mKGFzc2VydGVyTmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdHgsIGFzc2VydGVyTmFtZSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hhaW5hYmxlTWV0aG9kV3JhcHBlciwgYXNzZXJ0ZXJOYW1lLCBwZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIGNoYWluYWJsZU1ldGhvZFdyYXBwZXIpO1xuICAgICAgICByZXR1cm4gcHJveGlmeShjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgIH1cbiAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBvdmVyd3JpdGVDaGFpbmFibGVNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBjaGFpbmFibGUgbWV0aG9kXG4gKiBhbmQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBvclxuICogcHJvcGVydHkuICBNdXN0IHJldHVybiBmdW5jdGlvbnMgdG8gYmUgdXNlZCBmb3JcbiAqIG5hbWUuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdsZW5ndGhPZicsXG4gKiAgICAgICBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgKTtcbiAqXG4gKiBDYW4gYWxzbyBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIGBjaGFpLkFzc2VydGlvbmAuXG4gKlxuICogICAgIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCgnZm9vJywgZm4sIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3Qgd2hvc2UgbWV0aG9kIC8gcHJvcGVydHkgaXMgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCAvIHByb3BlcnR5IHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoYWluaW5nQmVoYXZpb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgcHJvcGVydHlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcikge1xuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSBjdHguX19tZXRob2RzW25hbWVdO1xuXG4gIHZhciBfY2hhaW5pbmdCZWhhdmlvciA9IGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3I7XG4gIGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2hhaW5pbmdCZWhhdmlvcihfY2hhaW5pbmdCZWhhdmlvcikuY2FsbCh0aGlzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xuXG4gIHZhciBfbWV0aG9kID0gY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kO1xuICBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZFdyYXBwZXIoKSB7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfbWV0aG9kKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gY29tcGFyZUJ5SW5zcGVjdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcblxuLyoqXG4gKiAjIyMgLmNvbXBhcmVCeUluc3BlY3QobWl4ZWQsIG1peGVkKVxuICpcbiAqIFRvIGJlIHVzZWQgYXMgYSBjb21wYXJlRnVuY3Rpb24gd2l0aCBBcnJheS5wcm90b3R5cGUuc29ydC4gQ29tcGFyZXMgZWxlbWVudHNcbiAqIHVzaW5nIGluc3BlY3QgaW5zdGVhZCBvZiBkZWZhdWx0IGJlaGF2aW9yIG9mIHVzaW5nIHRvU3RyaW5nIHNvIHRoYXQgU3ltYm9sc1xuICogYW5kIG9iamVjdHMgd2l0aCBpcnJlZ3VsYXIvbWlzc2luZyB0b1N0cmluZyBjYW4gc3RpbGwgYmUgc29ydGVkIHdpdGhvdXQgYVxuICogVHlwZUVycm9yLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGZpcnN0IGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHBhcmFtIHtNaXhlZH0gc2Vjb25kIGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gLTEgaWYgJ2EnIHNob3VsZCBjb21lIGJlZm9yZSAnYic7IG90aGVyd2lzZSAxIFxuICogQG5hbWUgY29tcGFyZUJ5SW5zcGVjdFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBhcmVCeUluc3BlY3QoYSwgYikge1xuICByZXR1cm4gaW5zcGVjdChhKSA8IGluc3BlY3QoYikgPyAtMSA6IDE7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZGlyZWN0bHktb3duZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzIG9mIGFuXG4gKiBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuICogcmV0dXJucyBib3RoIGVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybnMge0FycmF5fVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9sc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMob2JqKSB7XG4gIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaikuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzID0gcmVxdWlyZSgnLi9nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzJyk7XG5cbi8qKlxuICogIyMjIC5nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBkaXJlY3RseS1vd25lZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBhbiBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgT2JqZWN0LmtleXMgb25seVxuICogcmV0dXJucyBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzLCBub3QgZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmNvbmNhdChnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzKG9iaikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIGNoZWNrRXJyb3IgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5jaGVja0Vycm9yXG4gKlxuICogQ2hlY2tzIHRoYXQgYW4gZXJyb3IgY29uZm9ybXMgdG8gYSBnaXZlbiBzZXQgb2YgY3JpdGVyaWEgYW5kL29yIHJldHJpZXZlcyBpbmZvcm1hdGlvbiBhYm91dCBpdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlSW5zdGFuY2UodGhyb3duLCBlcnJvckxpa2UpXG4gKlxuICogQ2hlY2tzIGlmIHR3byBpbnN0YW5jZXMgYXJlIGNvbXBhdGlibGUgKHN0cmljdCBlcXVhbCkuXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGVycm9yTGlrZSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRXJyb3IsIGJlY2F1c2UgaW5zdGFuY2VzXG4gKiBjYW4gb25seSBiZSBjb21wYXRpYmxlIGlmIHRoZXkncmUgYm90aCBlcnJvciBpbnN0YW5jZXMuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUluc3RhbmNlXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUluc3RhbmNlKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIHJldHVybiBlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciAmJiB0aHJvd24gPT09IGVycm9yTGlrZTtcbn1cblxuLyoqXG4gKiAjIyMgLmNvbXBhdGlibGVDb25zdHJ1Y3Rvcih0aHJvd24sIGVycm9yTGlrZSlcbiAqXG4gKiBDaGVja3MgaWYgdHdvIGNvbnN0cnVjdG9ycyBhcmUgY29tcGF0aWJsZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FuIHJlY2VpdmUgZWl0aGVyIGFuIGVycm9yIGNvbnN0cnVjdG9yIG9yXG4gKiBhbiBlcnJvciBpbnN0YW5jZSBhcyB0aGUgYGVycm9yTGlrZWAgYXJndW1lbnQuXG4gKiBDb25zdHJ1Y3RvcnMgYXJlIGNvbXBhdGlibGUgaWYgdGhleSdyZSB0aGUgc2FtZSBvciBpZiBvbmUgaXNcbiAqIGFuIGluc3RhbmNlIG9mIGFub3RoZXIuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUNvbnN0cnVjdG9yKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIElmIGBlcnJvckxpa2VgIGlzIGFuIGluc3RhbmNlIG9mIGFueSBlcnJvciB3ZSBjb21wYXJlIHRoZWlyIGNvbnN0cnVjdG9yc1xuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZS5jb25zdHJ1Y3RvciB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2UuY29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoZXJyb3JMaWtlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yTGlrZSA9PT0gRXJyb3IpIHtcbiAgICAvLyBJZiBgZXJyb3JMaWtlYCBpcyBhIGNvbnN0cnVjdG9yIHRoYXQgaW5oZXJpdHMgZnJvbSBFcnJvciwgd2UgY29tcGFyZSBgdGhyb3duYCB0byBgZXJyb3JMaWtlYCBkaXJlY3RseVxuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZSB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2U7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpXG4gKlxuICogQ2hlY2tzIGlmIGFuIGVycm9yJ3MgbWVzc2FnZSBpcyBjb21wYXRpYmxlIHdpdGggYSBtYXRjaGVyIChTdHJpbmcgb3IgUmVnRXhwKS5cbiAqIElmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIHRoZSBTdHJpbmcgb3IgcGFzc2VzIHRoZSBSZWdFeHAgdGVzdCxcbiAqIGl0IGlzIGNvbnNpZGVyZWQgY29tcGF0aWJsZS5cbiAqXG4gKiBAbmFtZSBjb21wYXRpYmxlTWVzc2FnZVxuICogQHBhcmFtIHtFcnJvcn0gdGhyb3duIGVycm9yXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGVyck1hdGNoZXIgdG8gbG9vayBmb3IgaW50byB0aGUgbWVzc2FnZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpIHtcbiAgdmFyIGNvbXBhcmlzb25TdHJpbmcgPSB0eXBlb2YgdGhyb3duID09PSAnc3RyaW5nJyA/IHRocm93biA6IHRocm93bi5tZXNzYWdlO1xuICBpZiAoZXJyTWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBlcnJNYXRjaGVyLnRlc3QoY29tcGFyaXNvblN0cmluZyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVyck1hdGNoZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbXBhcmlzb25TdHJpbmcuaW5kZXhPZihlcnJNYXRjaGVyKSAhPT0gLTE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pXG4gKlxuICogUmV0dXJucyB0aGUgbmFtZSBvZiBhIGZ1bmN0aW9uLlxuICogVGhpcyBhbHNvIGluY2x1ZGVzIGEgcG9seWZpbGwgZnVuY3Rpb24gaWYgYGNvbnN0cnVjdG9yRm4ubmFtZWAgaXMgbm90IGRlZmluZWQuXG4gKlxuICogQG5hbWUgZ2V0RnVuY3Rpb25OYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvckZuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZnVuY3Rpb25OYW1lTWF0Y2ggPSAvXFxzKmZ1bmN0aW9uKD86XFxzfFxccypcXC9cXCpbXig/OipcXC8pXStcXCpcXC9cXHMqKSooW15cXChcXC9dKykvO1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pIHtcbiAgdmFyIG5hbWUgPSAnJztcbiAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvckZuLm5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gSGVyZSB3ZSBydW4gYSBwb2x5ZmlsbCBpZiBjb25zdHJ1Y3RvckZuLm5hbWUgaXMgbm90IGRlZmluZWRcbiAgICB2YXIgbWF0Y2ggPSBTdHJpbmcoY29uc3RydWN0b3JGbikubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuYW1lID0gY29uc3RydWN0b3JGbi5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKVxuICpcbiAqIEdldHMgdGhlIGNvbnN0cnVjdG9yIG5hbWUgZm9yIGFuIEVycm9yIGluc3RhbmNlIG9yIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAqXG4gKiBAbmFtZSBnZXRDb25zdHJ1Y3Rvck5hbWVcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpIHtcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGVycm9yTGlrZTtcbiAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZS5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yTGlrZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIElmIGBlcnJgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBFcnJvciBpdCBpcyBhbiBlcnJvciBjb25zdHJ1Y3RvciBpdHNlbGYgb3IgYW5vdGhlciBmdW5jdGlvbi5cbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBjb21tb24gZnVuY3Rpb24gd2UgZ2V0IGl0cyBuYW1lLCBvdGhlcndpc2Ugd2UgbWF5IG5lZWQgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlXG4gICAgLy8gb2YgdGhlIGVycm9yIGp1c3QgaW4gY2FzZSBpdCdzIGEgcG9vcmx5LWNvbnN0cnVjdGVkIGVycm9yLiBQbGVhc2Ugc2VlIGNoYWlqcy9jaGFpL2lzc3Vlcy80NSB0byBrbm93IG1vcmUuXG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZSkudHJpbSgpIHx8XG4gICAgICAgIGdldEZ1bmN0aW9uTmFtZShuZXcgZXJyb3JMaWtlKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRNZXNzYWdlKGVycm9yTGlrZSlcbiAqXG4gKiBHZXRzIHRoZSBlcnJvciBtZXNzYWdlIGZyb20gYW4gZXJyb3IuXG4gKiBJZiBgZXJyYCBpcyBhIFN0cmluZyBpdHNlbGYsIHdlIHJldHVybiBpdC5cbiAqIElmIHRoZSBlcnJvciBoYXMgbm8gbWVzc2FnZSwgd2UgcmV0dXJuIGFuIGVtcHR5IHN0cmluZy5cbiAqXG4gKiBAbmFtZSBnZXRNZXNzYWdlXG4gKiBAcGFyYW0ge0Vycm9yfFN0cmluZ30gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2UoZXJyb3JMaWtlKSB7XG4gIHZhciBtc2cgPSAnJztcbiAgaWYgKGVycm9yTGlrZSAmJiBlcnJvckxpa2UubWVzc2FnZSkge1xuICAgIG1zZyA9IGVycm9yTGlrZS5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvckxpa2UgPT09ICdzdHJpbmcnKSB7XG4gICAgbXNnID0gZXJyb3JMaWtlO1xuICB9XG5cbiAgcmV0dXJuIG1zZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBhdGlibGVJbnN0YW5jZTogY29tcGF0aWJsZUluc3RhbmNlLFxuICBjb21wYXRpYmxlQ29uc3RydWN0b3I6IGNvbXBhdGlibGVDb25zdHJ1Y3RvcixcbiAgY29tcGF0aWJsZU1lc3NhZ2U6IGNvbXBhdGlibGVNZXNzYWdlLFxuICBnZXRNZXNzYWdlOiBnZXRNZXNzYWdlLFxuICBnZXRDb25zdHJ1Y3Rvck5hbWU6IGdldENvbnN0cnVjdG9yTmFtZSxcbn07XG4iLCJ2YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIGdldFByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldFByb3BlcnRpZXMnKTtcbnZhciBpc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcblxuLyohXG4gKiBDaGFpIC0gcHJveGlmeSB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLnByb3hpZnkob2JqZWN0KVxuICpcbiAqIFJldHVybiBhIHByb3h5IG9mIGdpdmVuIG9iamVjdCB0aGF0IHRocm93cyBhbiBlcnJvciB3aGVuIGEgbm9uLWV4aXN0ZW50XG4gKiBwcm9wZXJ0eSBpcyByZWFkLiBCeSBkZWZhdWx0LCB0aGUgcm9vdCBjYXVzZSBpcyBhc3N1bWVkIHRvIGJlIGEgbWlzc3BlbGxlZFxuICogcHJvcGVydHksIGFuZCB0aHVzIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBvZmZlciBhIHJlYXNvbmFibGUgc3VnZ2VzdGlvbiBmcm9tXG4gKiB0aGUgbGlzdCBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBIb3dldmVyLCBpZiBhIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUgaXNcbiAqIHByb3ZpZGVkLCB0aGVuIHRoZSByb290IGNhdXNlIGlzIGluc3RlYWQgYSBmYWlsdXJlIHRvIGludm9rZSBhIG5vbi1jaGFpbmFibGVcbiAqIG1ldGhvZCBwcmlvciB0byByZWFkaW5nIHRoZSBub24tZXhpc3RlbnQgcHJvcGVydHkuXG4gKiBcbiAqIElmIHByb3hpZXMgYXJlIHVuc3VwcG9ydGVkIG9yIGRpc2FibGVkIHZpYSB0aGUgdXNlcidzIENoYWkgY29uZmlnLCB0aGVuXG4gKiByZXR1cm4gb2JqZWN0IHdpdGhvdXQgbW9kaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBub25DaGFpbmFibGVNZXRob2ROYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBwcm94aWZ5XG4gKi9cblxudmFyIGJ1aWx0aW5zID0gWydfX2ZsYWdzJywgJ19fbWV0aG9kcycsICdfb2JqJywgJ2Fzc2VydCddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByb3hpZnkob2JqLCBub25DaGFpbmFibGVNZXRob2ROYW1lKSB7XG4gIGlmICghaXNQcm94eUVuYWJsZWQoKSkgcmV0dXJuIG9iajtcblxuICByZXR1cm4gbmV3IFByb3h5KG9iaiwge1xuICAgIGdldDogZnVuY3Rpb24gcHJveHlHZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgLy8gVGhpcyBjaGVjayBpcyBoZXJlIGJlY2F1c2Ugd2Ugc2hvdWxkIG5vdCB0aHJvdyBlcnJvcnMgb24gU3ltYm9sIHByb3BlcnRpZXNcbiAgICAgIC8vIHN1Y2ggYXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AuXG4gICAgICAvLyBUaGUgdmFsdWVzIGZvciB3aGljaCBhbiBlcnJvciBzaG91bGQgYmUgdGhyb3duIGNhbiBiZSBjb25maWd1cmVkIHVzaW5nXG4gICAgICAvLyB0aGUgYGNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5c2Agc2V0dGluZy5cbiAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgY29uZmlnLnByb3h5RXhjbHVkZWRLZXlzLmluZGV4T2YocHJvcGVydHkpID09PSAtMSAmJlxuICAgICAgICAgICFSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5KSkge1xuICAgICAgICAvLyBTcGVjaWFsIG1lc3NhZ2UgZm9yIGludmFsaWQgcHJvcGVydHkgYWNjZXNzIG9mIG5vbi1jaGFpbmFibGUgbWV0aG9kcy5cbiAgICAgICAgaWYgKG5vbkNoYWluYWJsZU1ldGhvZE5hbWUpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSArICcuJyArXG4gICAgICAgICAgICBwcm9wZXJ0eSArICcuIFNlZSBkb2NzIGZvciBwcm9wZXIgdXNhZ2Ugb2YgXCInICtcbiAgICAgICAgICAgIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUgKyAnXCIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3JkZXJlZFByb3BlcnRpZXMgPSBnZXRQcm9wZXJ0aWVzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgICAgcmV0dXJuICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJlxuICAgICAgICAgICAgYnVpbHRpbnMuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xO1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nRGlzdGFuY2UocHJvcGVydHksIGEpIC0gc3RyaW5nRGlzdGFuY2UocHJvcGVydHksIGIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3JkZXJlZFByb3BlcnRpZXMubGVuZ3RoICYmXG4gICAgICAgICAgICBzdHJpbmdEaXN0YW5jZShvcmRlcmVkUHJvcGVydGllc1swXSwgcHJvcGVydHkpIDwgNCkge1xuICAgICAgICAgIC8vIElmIHRoZSBwcm9wZXJ0eSBpcyByZWFzb25hYmx5IGNsb3NlIHRvIGFuIGV4aXN0aW5nIENoYWkgcHJvcGVydHksXG4gICAgICAgICAgLy8gc3VnZ2VzdCB0aGF0IHByb3BlcnR5IHRvIHRoZSB1c2VyLlxuICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBwcm9wZXJ0eSArXG4gICAgICAgICAgICAnLiBEaWQgeW91IG1lYW4gXCInICsgb3JkZXJlZFByb3BlcnRpZXNbMF0gKyAnXCI/Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIHByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBVc2UgdGhpcyBwcm94eSBnZXR0ZXIgYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gZnJhbWVzIGZyb20gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi4gRm9yIHByb3BlcnR5XG4gICAgICAvLyBhc3NlcnRpb25zLCB0aGlzIHByZXZlbnRzIHRoZSBwcm94eSBnZXR0ZXIgZnJvbSBzaG93aW5nIHVwIGluIHRoZSBzdGFja1xuICAgICAgLy8gdHJhY2Ugc2luY2UgaXQncyBpbnZva2VkIGJlZm9yZSB0aGUgcHJvcGVydHkgZ2V0dGVyLiBGb3IgbWV0aG9kIGFuZFxuICAgICAgLy8gY2hhaW5hYmxlIG1ldGhvZCBhc3NlcnRpb25zLCB0aGlzIGZsYWcgd2lsbCBlbmQgdXAgZ2V0dGluZyBjaGFuZ2VkIHRvXG4gICAgICAvLyB0aGUgbWV0aG9kIHdyYXBwZXIsIHdoaWNoIGlzIGdvb2Qgc2luY2UgdGhpcyBmcmFtZSB3aWxsIG5vIGxvbmdlciBiZSBpblxuICAgICAgLy8gdGhlIHN0YWNrIG9uY2UgdGhlIG1ldGhvZCBpcyBpbnZva2VkLiBOb3RlIHRoYXQgQ2hhaSBidWlsdGluIGFzc2VydGlvblxuICAgICAgLy8gcHJvcGVydGllcyBzdWNoIGFzIGBfX2ZsYWdzYCBhcmUgc2tpcHBlZCBzaW5jZSB0aGlzIGlzIG9ubHkgbWVhbnQgdG9cbiAgICAgIC8vIGNhcHR1cmUgdGhlIHN0YXJ0aW5nIHBvaW50IG9mIGFuIGFzc2VydGlvbi4gVGhpcyBzdGVwIGlzIGFsc28gc2tpcHBlZFxuICAgICAgLy8gaWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRodXMgaW5kaWNhdGluZyB0aGF0IHRoaXMgYXNzZXJ0aW9uIGlzXG4gICAgICAvLyBiZWluZyBjYWxsZWQgZnJvbSB3aXRoaW4gYW5vdGhlciBhc3NlcnRpb24uIEluIHRoYXQgY2FzZSwgdGhlIGBzc2ZpYFxuICAgICAgLy8gZmxhZyBpcyBhbHJlYWR5IHNldCB0byB0aGUgb3V0ZXIgYXNzZXJ0aW9uJ3Mgc3RhcnRpbmcgcG9pbnQuXG4gICAgICBpZiAoYnVpbHRpbnMuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xICYmICFmbGFnKHRhcmdldCwgJ2xvY2tTc2ZpJykpIHtcbiAgICAgICAgZmxhZyh0YXJnZXQsICdzc2ZpJywgcHJveHlHZXR0ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogIyBzdHJpbmdEaXN0YW5jZShzdHJBLCBzdHJCKVxuICogUmV0dXJuIHRoZSBMZXZlbnNodGVpbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ckFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJCXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBzdHJpbmcgZGlzdGFuY2UgYmV0d2VlbiBzdHJBIGFuZCBzdHJCXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdEaXN0YW5jZShzdHJBLCBzdHJCLCBtZW1vKSB7XG4gIGlmICghbWVtbykge1xuICAgIC8vIGBtZW1vYCBpcyBhIHR3by1kaW1lbnNpb25hbCBhcnJheSBjb250YWluaW5nIGEgY2FjaGUgb2YgZGlzdGFuY2VzXG4gICAgLy8gbWVtb1tpXVtqXSBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBzdHJBLnNsaWNlKDAsIGkpIGFuZFxuICAgIC8vIHN0ckIuc2xpY2UoMCwgaikuXG4gICAgbWVtbyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHN0ckEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG1lbW9baV0gPSBbXTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW1lbW9bc3RyQS5sZW5ndGhdIHx8ICFtZW1vW3N0ckEubGVuZ3RoXVtzdHJCLmxlbmd0aF0pIHtcbiAgICBpZiAoc3RyQS5sZW5ndGggPT09IDAgfHwgc3RyQi5sZW5ndGggPT09IDApIHtcbiAgICAgIG1lbW9bc3RyQS5sZW5ndGhdW3N0ckIubGVuZ3RoXSA9IE1hdGgubWF4KHN0ckEubGVuZ3RoLCBzdHJCLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbW9bc3RyQS5sZW5ndGhdW3N0ckIubGVuZ3RoXSA9IE1hdGgubWluKFxuICAgICAgICBzdHJpbmdEaXN0YW5jZShzdHJBLnNsaWNlKDAsIC0xKSwgc3RyQiwgbWVtbykgKyAxLFxuICAgICAgICBzdHJpbmdEaXN0YW5jZShzdHJBLCBzdHJCLnNsaWNlKDAsIC0xKSwgbWVtbykgKyAxLFxuICAgICAgICBzdHJpbmdEaXN0YW5jZShzdHJBLnNsaWNlKDAsIC0xKSwgc3RyQi5zbGljZSgwLCAtMSksIG1lbW8pICtcbiAgICAgICAgICAoc3RyQS5zbGljZSgtMSkgPT09IHN0ckIuc2xpY2UoLTEpID8gMCA6IDEpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZW1vW3N0ckEubGVuZ3RoXVtzdHJCLmxlbmd0aF07XG59XG4iLCJ2YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG5cbnZhciBmbkxlbmd0aERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGZ1bmN0aW9uICgpIHt9LCAnbGVuZ3RoJyk7XG5cbi8qIVxuICogQ2hhaSAtIGFkZExlbmd0aEd1YXJkIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuYWRkTGVuZ3RoR3VhcmQoZm4sIGFzc2VydGlvbk5hbWUsIGlzQ2hhaW5hYmxlKVxuICpcbiAqIERlZmluZSBgbGVuZ3RoYCBhcyBhIGdldHRlciBvbiB0aGUgZ2l2ZW4gdW5pbnZva2VkIG1ldGhvZCBhc3NlcnRpb24uIFRoZVxuICogZ2V0dGVyIGFjdHMgYXMgYSBndWFyZCBhZ2FpbnN0IGNoYWluaW5nIGBsZW5ndGhgIGRpcmVjdGx5IG9mZiBvZiBhbiB1bmludm9rZWRcbiAqIG1ldGhvZCBhc3NlcnRpb24sIHdoaWNoIGlzIGEgcHJvYmxlbSBiZWNhdXNlIGl0IHJlZmVyZW5jZXMgYGZ1bmN0aW9uYCdzXG4gKiBidWlsdC1pbiBgbGVuZ3RoYCBwcm9wZXJ0eSBpbnN0ZWFkIG9mIENoYWkncyBgbGVuZ3RoYCBhc3NlcnRpb24uIFdoZW4gdGhlXG4gKiBnZXR0ZXIgY2F0Y2hlcyB0aGUgdXNlciBtYWtpbmcgdGhpcyBtaXN0YWtlLCBpdCB0aHJvd3MgYW4gZXJyb3Igd2l0aCBhXG4gKiBoZWxwZnVsIG1lc3NhZ2UuXG4gKlxuICogVGhlcmUgYXJlIHR3byB3YXlzIGluIHdoaWNoIHRoaXMgbWlzdGFrZSBjYW4gYmUgbWFkZS4gVGhlIGZpcnN0IHdheSBpcyBieVxuICogY2hhaW5pbmcgdGhlIGBsZW5ndGhgIGFzc2VydGlvbiBkaXJlY3RseSBvZmYgb2YgYW4gdW5pbnZva2VkIGNoYWluYWJsZVxuICogbWV0aG9kLiBJbiB0aGlzIGNhc2UsIENoYWkgc3VnZ2VzdHMgdGhhdCB0aGUgdXNlciB1c2UgYGxlbmd0aE9mYCBpbnN0ZWFkLiBUaGVcbiAqIHNlY29uZCB3YXkgaXMgYnkgY2hhaW5pbmcgdGhlIGBsZW5ndGhgIGFzc2VydGlvbiBkaXJlY3RseSBvZmYgb2YgYW4gdW5pbnZva2VkXG4gKiBub24tY2hhaW5hYmxlIG1ldGhvZC4gTm9uLWNoYWluYWJsZSBtZXRob2RzIG11c3QgYmUgaW52b2tlZCBwcmlvciB0b1xuICogY2hhaW5pbmcuIEluIHRoaXMgY2FzZSwgQ2hhaSBzdWdnZXN0cyB0aGF0IHRoZSB1c2VyIGNvbnN1bHQgdGhlIGRvY3MgZm9yIHRoZVxuICogZ2l2ZW4gYXNzZXJ0aW9uLlxuICpcbiAqIElmIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgaXMgdW5jb25maWd1cmFibGUsIHRoZW4gcmV0dXJuIGBmbmBcbiAqIHdpdGhvdXQgbW9kaWZpY2F0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCBpbiBFUzYsIHRoZSBmdW5jdGlvbidzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGNvbmZpZ3VyYWJsZSwgc28gb25jZVxuICogc3VwcG9ydCBmb3IgbGVnYWN5IGVudmlyb25tZW50cyBpcyBkcm9wcGVkLCBDaGFpJ3MgYGxlbmd0aGAgcHJvcGVydHkgY2FuXG4gKiByZXBsYWNlIHRoZSBidWlsdC1pbiBmdW5jdGlvbidzIGBsZW5ndGhgIHByb3BlcnR5LCBhbmQgdGhpcyBsZW5ndGggZ3VhcmQgd2lsbFxuICogbm8gbG9uZ2VyIGJlIG5lY2Vzc2FyeS4gSW4gdGhlIG1lYW4gdGltZSwgbWFpbnRhaW5pbmcgY29uc2lzdGVuY3kgYWNyb3NzIGFsbFxuICogZW52aXJvbm1lbnRzIGlzIHRoZSBwcmlvcml0eS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtTdHJpbmd9IGFzc2VydGlvbk5hbWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNDaGFpbmFibGVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZExlbmd0aEd1YXJkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRMZW5ndGhHdWFyZCAoZm4sIGFzc2VydGlvbk5hbWUsIGlzQ2hhaW5hYmxlKSB7XG4gIGlmICghZm5MZW5ndGhEZXNjLmNvbmZpZ3VyYWJsZSkgcmV0dXJuIGZuO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2xlbmd0aCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NoYWluYWJsZSkge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgYXNzZXJ0aW9uTmFtZSArICcubGVuZ3RoLiBEdWUnICtcbiAgICAgICAgICAnIHRvIGEgY29tcGF0aWJpbGl0eSBpc3N1ZSwgXCJsZW5ndGhcIiBjYW5ub3QgZGlyZWN0bHkgZm9sbG93IFwiJyArXG4gICAgICAgICAgYXNzZXJ0aW9uTmFtZSArICdcIi4gVXNlIFwiJyArIGFzc2VydGlvbk5hbWUgKyAnLmxlbmd0aE9mXCIgaW5zdGVhZC4nKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIGFzc2VydGlvbk5hbWUgKyAnLmxlbmd0aC4gU2VlJyArXG4gICAgICAgICcgZG9jcyBmb3IgcHJvcGVyIHVzYWdlIG9mIFwiJyArIGFzc2VydGlvbk5hbWUgKyAnXCIuJyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZm47XG59O1xuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG4vKiFcbiAqIENoYWkgLSBpc1Byb3h5RW5hYmxlZCBoZWxwZXJcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaXNQcm94eUVuYWJsZWQoKVxuICpcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjaGVjayBpZiBDaGFpJ3MgcHJveHkgcHJvdGVjdGlvbiBmZWF0dXJlIGlzIGVuYWJsZWQuIElmXG4gKiBwcm94aWVzIGFyZSB1bnN1cHBvcnRlZCBvciBkaXNhYmxlZCB2aWEgdGhlIHVzZXIncyBDaGFpIGNvbmZpZywgdGhlbiByZXR1cm5cbiAqIGZhbHNlLiBPdGhlcndpc2UsIHJldHVybiB0cnVlLlxuICpcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGlzUHJveHlFbmFibGVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1Byb3h5RW5hYmxlZCgpIHtcbiAgcmV0dXJuIGNvbmZpZy51c2VQcm94eSAmJiBcbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGlzTmFOIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTUgU2FrdGhpcHJpeWFuIFZhaXJhbWFuaSA8dGhlY2hhcmdpbmd2b2xjYW5vQGdtYWlsLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5pc05hTih2YWx1ZSlcbiAqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIE5hTiBvciBub3QuXG4gKlxuICogICAgIHV0aWxzLmlzTmFOKE5hTik7IC8vIHRydWVcbiAqXG4gKiBAcGFyYW0ge1ZhbHVlfSBUaGUgdmFsdWUgd2hpY2ggaGFzIHRvIGJlIGNoZWNrZWQgaWYgaXQgaXMgTmFOXG4gKiBAbmFtZSBpc05hTlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgLy8gUmVmZXIgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzbmFuLW51bWJlclxuICAvLyBzZWN0aW9uJ3MgTk9URS5cbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuLy8gSWYgRUNNQVNjcmlwdCA2J3MgTnVtYmVyLmlzTmFOIGlzIHByZXNlbnQsIHByZWZlciB0aGF0LlxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgaXNOYU47XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0UHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QsIGVudW1lcmFibGUgb3Igbm90LFxuICogaW5oZXJpdGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UHJvcGVydGllcyhvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgZnVuY3Rpb24gYWRkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICBpZiAocmVzdWx0LmluZGV4T2YocHJvcGVydHkpID09PSAtMSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJvcGVydHkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICB3aGlsZSAocHJvdG8gIT09IG51bGwpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykuZm9yRWFjaChhZGRQcm9wZXJ0eSk7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldEVudW1lcmFibGVQcm9wZXJ0aWVzKG9iamVjdClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LFxuICogaW5oZXJpdGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRFbnVtZXJhYmxlUHJvcGVydGllc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgcmVzdWx0LnB1c2gobmFtZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXX0=