(function (require, global) {
require = (function (cache, modules, cx) {
var loader = function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : ((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
};
loader.modules = modules;
return loader;
})({}, {
"entry.js": function (require, module, exports) {
var chai, checkChildStructure, creator, elementSuffix, expect, i, j, len, len1, nonElementSuffix, ref, ref1, ref2, ref3, ref4, restartSandbox, sandbox;
this.dimensions = require("simulate.coffee");
this.Dom = this.DOM = window.quickdom;
mocha.setup('tdd');
mocha.slow(400);
mocha.timeout(12000);
if (!window.location.hostname) {
mocha.bail();
}
chai = require("node_modules/chai/index.js");
chai.use(require("node_modules/chai-style/sources/index.js"));
chai.config.truncateThreshold = 1e3;
({expect} = chai);
sandbox = null;
restartSandbox = function () {
if (sandbox) {
sandbox.parentElement.removeChild(sandbox);
}
sandbox = document.createElement('div');
sandbox.id = 'sandbox';
sandbox.setAttribute('style', 'border:1px solid; padding:20px; box-sizing:border-box');
return document.body.appendChild(sandbox);
};
checkChildStructure = function (main) {
return function (...children) {
var child, i, index, len;
expect(main.children.length).to.equal(children.length);
for ((index = i = 0, len = children.length); i < len; index = ++i) {
child = children[index];
expect(main.children[index]).to.equal(child);
expect(child.el.parentNode).to.equal(main.el);
expect(child.parent).to.equal(main);
}
};
};
suite("QuickDom", function () {
setup(restartSandbox);
test("Version Property", function () {
var packageVersion;
packageVersion = "1.0.90";
return expect(Dom.version).to.equal(packageVersion);
});
suite("Element Creation", function () {
test("Basic Creation", function () {
var div;
div = Dom('div');
expect(typeof div).to.equal('object');
expect(typeof div.el).to.equal('object');
expect(div.el).to.be.instanceOf(window.HTMLDivElement);
expect(div.parent).to.be.undefined;
return expect(div.children.length).to.equal(0);
});
test("Shortcuts", function () {
var i, len, type, types;
expect(Dom.a().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.link().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.anchor().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.div().el.constructor).to.equal(Dom('div').el.constructor);
expect(Dom.text().el.constructor).to.equal(Dom('text').el.constructor);
expect(Dom.span().el.constructor).to.equal(Dom('span').el.constructor);
expect(Dom.h4().el.constructor).to.equal(Dom('h4').el.constructor);
expect(Dom.header().el.constructor).to.equal(Dom('header').el.constructor);
expect(Dom.footer().el.constructor).to.equal(Dom('footer').el.constructor);
expect(Dom.section().el.constructor).to.equal(Dom('section').el.constructor);
expect(Dom.button().el.constructor).to.equal(Dom('button').el.constructor);
expect(Dom.input().el.constructor).to.equal(Dom('input').el.constructor);
types = ['a', 'div', 'text', 'span', 'h4', 'header', 'footer', 'section', 'button', 'input'];
for ((i = 0, len = types.length); i < len; i++) {
type = types[i];
expect(Dom[type]().el.constructor.name).not.to.contain('Unknown');
}
});
test("Basic options", function () {
var A, B, C, D, E, F, G, H, I, J, obj;
A = Dom.div({
class: 'abc-123',
props: {
'abc': 123,
'def': 456
}
});
B = Dom.div({
id: 'B',
className: 'abc-123',
attrs: {
'data-abc': 123,
'data-def': 456
}
});
C = Dom.input({
type: 'text',
name: 'abc',
value: 'hello'
});
D = Dom.input({
type: 'checkbox',
checked: true
});
E = Dom.option({
name: 'abc',
value: 'hello',
selected: true
});
F = Dom.link({
href: 'https://google.com/'
});
G = Dom.anchor({
url: 'https://google.com/'
});
H = Dom.text('Some text');
I = Dom.img({
src: 'https://google.com/'
});
J = Dom.div({
relatedInstance: obj = {
a: 1
}
});
expect(A.el.className).to.equal('abc-123');
expect(A.el.abc).to.equal(123);
expect(A.el.def).to.equal(456);
expect(B.el.className).to.equal('abc-123');
expect(B.el.id).to.equal('B');
expect(B.el.getAttribute('data-abc')).to.equal('123');
expect(B.el.getAttribute('data-def')).to.equal('456');
if (B.el.dataset) {
expect(B.el.dataset.abc).to.equal('123');
}
expect(C.el.type).to.equal('text');
expect(C.el.name).to.equal('abc');
expect(C.el.value).to.equal('hello');
expect(D.el.checked).to.equal(true);
expect(E.el.name).to.equal('abc');
expect(E.el.selected).to.equal(true);
expect(F.el.href).to.equal('https://google.com/');
expect(G.el.href).to.equal('https://google.com/');
expect(H.el.nodeType).to.equal(3);
expect(H.el.textContent).to.equal('Some text');
expect(I.el.src).to.equal('https://google.com/');
expect(J.related).to.equal(obj);
return expect(J.options.related).to.equal(obj);
});
test("Creation w/ children", function () {
var A, B;
A = Dom.div(null, 'Some text');
B = Dom.div(null, Dom.span(), 'Some text', Dom.span());
expect(A.el.childNodes.length).to.equal(1);
expect(A.el.children.length).to.equal(0);
expect(A.el.childNodes[0].nodeType).to.equal(3);
expect(A.el.childNodes[0].textContent).to.equal('Some text');
expect(A.children.length).to.equal(1);
expect(B.el.childNodes.length).to.equal(3);
expect(B.el.children.length).to.equal(2);
expect(B.el.childNodes[0].nodeType).to.equal(1);
expect(B.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(B.el.childNodes[1].nodeType).to.equal(3);
expect(B.el.childNodes[1].textContent).to.equal('Some text');
expect(B.el.childNodes[2].nodeType).to.equal(1);
expect(B.el.childNodes[2].nodeName.toLowerCase()).to.equal('span');
return expect(B.children.length).to.equal(3);
});
test("Array syntax", function () {
var section;
section = Dom(['section', {
style: {
display: 'inline'
}
}, ['div', null, 'childA'], ['span', null, ['strong', null, 'childB']], ['div', null, 'childC', ['span', null, 'childC_1'], ['span', null, 'childC_2']]]).appendTo(sandbox);
expect(section).not.to.equal(void 0);
expect(section.raw).to.have.style('display', 'inline');
expect(section.children.length).to.equal(3);
expect(section.children[0].children.length).to.equal(1);
expect(section.children[1].children.length).to.equal(1);
expect(section.children[2].children.length).to.equal(3);
expect(section.children[2].children[1].children.length).to.equal(1);
expect(section.children[2].children[2].children.length).to.equal(1);
expect(section.children[0].text).to.equal('childA');
expect(section.children[1].text).to.equal('childB');
expect(section.children[2].text).to.equal('childCchildC_1childC_2');
expect(section.children[2].children[1].text).to.equal('childC_1');
return expect(section.children[2].children[2].text).to.equal('childC_2');
});
test("Existing Element", function () {
var A, B, C, divRaw;
divRaw = document.createElement('div');
A = Dom(divRaw);
B = Dom(divRaw);
C = Dom(A);
expect(A.el).to.equal(divRaw);
expect(B.el).to.equal(divRaw);
expect(C.el).to.equal(divRaw);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(divRaw._quickElement);
});
test("Existing Element w/ Options", function () {
var div, divRaw;
divRaw = document.createElement('div');
divRaw.id = 'A';
div = Dom(divRaw, {
id: 'B',
class: 'abc-123'
});
expect(divRaw.id).to.equal('B');
expect(divRaw.className).to.equal('abc-123');
div = Dom(div, {
id: 'C',
class: 'def-456'
});
expect(divRaw.id).to.equal('C');
return expect(divRaw.className).to.equal('def-456');
});
test("Existing Element from array-like objects", function () {
var A, B, C, parent, rawA, rawB, rawC;
rawA = document.createElement('div');
rawB = document.createElement('div');
rawC = document.createElement('div');
parent = document.createElement('section');
parent.appendChild(rawA);
parent.appendChild(rawB);
parent.appendChild(rawC);
A = Dom([rawA, rawB, rawC]);
B = Dom(parent.querySelectorAll('div'));
C = Dom(B);
expect(A.el).to.equal(rawA);
expect(B.el).to.equal(rawA);
expect(C.el).to.equal(rawA);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(rawA._quickElement);
});
test("Document node", function () {
var doc;
doc = Dom(document);
expect(doc).not.to.be.undefined;
expect(doc.raw).to.equal(document);
expect(doc.parent).to.equal(void 0);
expect(doc.children.length).to.equal(1);
expect(Dom(sandbox).parents).not.to.contain(doc);
return expect(Dom(sandbox).parents).to.contain(doc.children[0]);
});
test("Window object", function () {
var win;
win = Dom(window);
expect(win).not.to.be.undefined;
expect(win.raw === window).to.be.true;
expect(win.parent).to.equal(void 0);
expect(win.children).to.equal(void 0);
expect(win.append).to.equal(void 0);
expect(win.html).to.equal(void 0);
expect(win.style).to.equal(void 0);
return expect(Dom(sandbox).parents).not.to.contain(win);
});
test("Creation w/ styling", function () {
var computedStyle, div;
div = Dom.div({
style: {
'width': '10px',
'height': 15,
'lameo': '19px',
'background-color': 'blue',
'backgroundSize': 'cover'
}
});
sandbox.appendChild(div.el);
computedStyle = getComputedStyle(div.el);
expect(div.style.lameo).to.equal(void 0);
expect(computedStyle.lameo).to.equal(void 0);
expect(computedStyle.width).to.equal('10px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.backgroundColor).not.to.equal('');
return expect(computedStyle.backgroundSize).to.equal('cover');
});
test("SVG elements can be created via a '*' in the element's type string", function () {
var regDiv, svgBad, svgDiv, svgGood, svgPolyBad, svgPolyGood;
svgBad = Dom('svg').el;
svgGood = Dom('*svg').el;
svgPolyBad = Dom('polyline').el;
svgPolyGood = Dom('*polyline').el;
svgDiv = Dom('*div').el;
regDiv = Dom('div').el;
expect(svgBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgPolyBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgGood).to.be.instanceOf(SVGSVGElement);
expect(svgPolyGood).to.be.instanceOf(SVGPolylineElement);
return expect(svgDiv.constructor).not.to.equal(regDiv.constructor);
});
test("QuickDom.html() accepts an html string which would be parsed and converted into a QuickBatch instance", function () {
var htmlString;
htmlString = "<div>firstChildText</div><span>secondChildText</span> textNode <strong>abc123</strong>";
window.batch = Dom.html(htmlString);
expect(typeof batch).to.equal('object');
expect(batch.constructor.name).to.equal('QuickBatch');
expect(batch.elements.length).to.equal(4);
expect(batch.elements[0].type).to.equal('div');
expect(batch.elements[1].type).to.equal('span');
expect(batch.elements[2].type).to.equal('text');
expect(batch.elements[3].type).to.equal('strong');
expect(batch.elements[0].text).to.equal('firstChildText');
expect(batch.elements[1].text).to.equal('secondChildText');
expect(batch.elements[2].text).to.include('textNode');
return expect(batch.elements[3].text).to.equal('abc123');
});
test("Method/Property aliases", function () {
var div;
div = Dom('div');
expect(div.raw).to.equal(div.el);
expect(div[0]).to.equal(div.el);
expect(div.css).to.equal(div.style);
expect(div.replaceWith).to.equal(div.replace);
expect(div.removeListener).to.equal(div.off);
return expect(div.removeListener('eventA'));
});
return test("user-defined methdods/getters/setters", function () {
var divA, divB;
divA = Dom.div();
divB = Dom.div({
methods: {
scrollTop: {
get: function () {
return this.raw.scrollTop;
}
},
weight: {
get: function () {
return this.raw.weight;
}
},
value: {
get: function () {
return this.raw.value;
},
set: function (value) {
return this.raw.value = value;
}
},
name: true,
bigIndex: function () {
return this.index * 10;
}
}
});
sandbox.append(divA);
sandbox.append(divB);
divA.raw.value = divB.raw.value = 'abc';
expect(typeof divA.scrollTop).to.equal('undefined');
expect(typeof divB.scrollTop).to.equal('number');
expect(typeof divA.value).to.equal('undefined');
expect(typeof divB.value).to.equal('string');
expect(typeof divA.name).to.equal('undefined');
expect(typeof divB.name).to.equal('undefined');
expect(typeof divA.bigIndex).to.equal('undefined');
expect(typeof divB.bigIndex).to.equal('function');
expect(divB.scrollTop).to.equal(divB.raw.scrollTop);
divB.raw.weight = '1';
expect(divB.weight).to.equal('1');
divB.weight = '2';
expect(divB.weight).to.equal('1');
expect(divB.value).to.equal('abc');
divB.value = '123';
expect(divB.value).to.equal('123');
return expect(divB.bigIndex()).to.equal(divB.index * 10);
});
});
suite("Events", function () {
test("Events can be listened to via the .on method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myClick', function (event) {
expect(typeof event).to.equal('object');
expect(event.type).to.equal('myClick');
return emitCountA++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
div.on('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(1);
expect(emitCountA).to.equal(3);
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(2);
return expect(emitCountA).to.equal(4);
});
test("Events can be emitted via the .emit method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(2);
return expect(emitCountB).to.equal(2);
});
test("Event handlers can be manually invoked with a custom arg via the .emitPrivate method", function () {
var arg, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
arg = null;
div = Dom.div();
div.on('myEvent', function () {
emitCountA++;
return arg = arguments[0];
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(null);
div.emitPrivate('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(void 0);
div.emitPrivate('myEvent', 'abc123');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(0);
expect(arg).to.equal('abc123');
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(1);
expect(arg).not.to.equal('abc123');
return expect(typeof arg).to.equal('object');
});
test("Booleans can be passed for the 2nd and 3rd args of .emit to control event.bubbles and event.cancelable", function () {
var div, emitCountA, emitCountB, emitCountC;
emitCountA = emitCountB = emitCountC = 0;
div = Dom.div();
div.on('eventA', function (event) {
emitCountA++;
expect(event.bubbles).to.be.true;
return expect(event.cancelable).to.be.true;
});
div.on('eventB', function (event) {
emitCountB++;
expect(event.bubbles).to.be.false;
return expect(event.cancelable).to.be.true;
});
div.on('eventC', function (event) {
emitCountC++;
expect(event.bubbles).to.be.false;
return expect(event.cancelable).to.be.false;
});
div.emit('eventA');
div.emit('eventB', false);
div.emit('eventC', false, false);
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
return expect(emitCountC).to.equal(1);
});
test("A data object can be passed as the 4th arg of .emit which will be extended onto the event object", function () {
var div, event;
div = DOM.div();
event = null;
div.on('mousedown', function (e) {
return event = e;
});
expect(event).to.equal(null);
div.emit('mousedown');
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal(void 0);
div.emit('mousedown', null, null, {
custom: 'custom',
abc: 123
});
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal('custom');
expect(event.abc).to.equal(123);
div.emit('mousedown', null, null, true);
expect(event.type).to.equal('mousedown');
return expect(event.custom).to.equal(void 0);
});
test("Event listeners can be removed via the .off method", function () {
var div, emitCountA, emitCountB, emitCountC, emitCountD, eventCB;
emitCountA = emitCountB = emitCountC = emitCountD = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', eventCB = function () {
return emitCountB++;
});
div.on('anotherEvent', function () {
return emitCountC++;
});
div.el.addEventListener('myEvent', function () {
return emitCountD++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(emitCountC).to.equal(0);
expect(emitCountD).to.equal(0);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(1);
expect(emitCountD).to.equal(1);
div.off('myEvent', eventCB);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(2);
expect(emitCountD).to.equal(2);
div.on('myEvent', function () {
return emitCountB++;
});
div.off('myEvent');
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
expect(emitCountD).to.equal(3);
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', function () {
return emitCountB++;
});
div.off();
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
return expect(emitCountD).to.equal(4);
});
test("Events can be named via a '<event>.<name>' syntax which can be used to remove listeners later on without the original callbacks", function () {
var attachListeners, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div().appendTo(sandbox);
attachListeners = function () {
div.on('myEvent.someName', function () {
return emitCountA++;
});
return div.on('myEvent', function () {
return emitCountB++;
});
};
attachListeners();
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.emit('myEvent.someName');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.off('myEvent.someOtherName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(2);
div.off('myEvent.someName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(3);
div.off('myEvent');
attachListeners();
div.emit('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(4);
div.off('myEvent');
div.emit('myEvent');
expect(emitCountA).to.equal(3);
return expect(emitCountB).to.equal(4);
});
test("Multiple events can be registered/deregistered at once using whitespace separators", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div();
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(3);
div.emit('two');
expect(emitCount).to.equal(4);
div.emit('three');
expect(emitCount).to.equal(4);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.on('one two   three.someName', function () {
return emitCount++;
});
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(4);
div.emit('one');
expect(emitCount).to.equal(6);
div.emit('two');
expect(emitCount).to.equal(8);
div.emit('three');
expect(emitCount).to.equal(10);
div.off('two \tone.someName');
div.emit('one');
expect(emitCount).to.equal(11);
div.emit('two');
expect(emitCount).to.equal(12);
div.emit('three');
expect(emitCount).to.equal(14);
div.off('one three');
div.emit('one');
expect(emitCount).to.equal(14);
div.emit('two');
expect(emitCount).to.equal(15);
div.emit('three');
return expect(emitCount).to.equal(15);
});
test("Events can be listened for once via the .once method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.once('myClick', function (event) {
expect(typeof event).to.equal('object');
return expect(event.type).to.equal('myClick');
});
div.on('myClick', function () {
return emitCountA++;
});
div.once('myClick', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
div.once('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(2);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(4);
return expect(emitCountB).to.equal(2);
});
test("Pre-defined event listeners can be passed in options.events", function () {
var div, divB, emitContext, emitCount, listeners;
emitCount = 0;
emitContext = null;
listeners = {
'one two three': function () {
return emitCount++;
},
'four': function () {
return emitCount++;
},
'five': function () {
return emitContext = this;
}
};
div = Dom.div({
events: listeners
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.emit('four');
expect(emitCount).to.equal(4);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(4);
div.emit('two');
expect(emitCount).to.equal(5);
div.emit('three');
expect(emitCount).to.equal(5);
div.emit('five');
expect(emitContext).to.equal(div);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.emit('four');
expect(emitCount).to.equal(5);
divB = Dom.div({
events: listeners
});
divB.emit('one');
divB.emit('three');
expect(emitCount).to.equal(7);
expect(emitContext).to.equal(div);
divB.emit('five');
return expect(emitContext).to.equal(divB);
});
test("the inserted event will be privately emitted when the element is inserted into the DOM", function () {
var div, invokeCount, masterParentB, parentA, parentB, parentC;
invokeCount = 0;
parentA = Dom.section();
parentB = Dom.section();
masterParentB = Dom.div();
parentC = Dom.section().appendTo(sandbox);
div = Dom.div();
div.on('inserted', function (el) {
expect(this).to.equal(div);
expect(el).to.equal(div.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
div.appendTo(parentA);
expect(invokeCount).to.equal(0);
div.appendTo(parentB.appendTo(masterParentB));
expect(invokeCount).to.equal(0);
parentA.appendTo(sandbox);
expect(invokeCount).to.equal(0);
div.appendTo(parentC);
expect(invokeCount).to.equal(1);
div.detach();
div.appendTo(parentB.appendTo(sandbox));
expect(invokeCount).to.equal(1);
expect(div.parent).to.equal(parentB);
div.on('inserted', function () {
return expect(invokeCount++).to.equal(1);
});
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentB);
div.appendTo(parentC);
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentC);
div.detach();
div.appendTo(parentA);
div.on('inserted', function () {
return invokeCount++;
});
expect(invokeCount).to.equal(3);
div.detach();
div.appendTo(parentB);
return expect(invokeCount).to.equal(3);
});
return test("QuickElement.replace will trigger the inserted event", function () {
var A, B, invokeCount, parent;
invokeCount = 0;
parent = Dom.section().appendTo(sandbox);
A = Dom.div();
B = Dom.div();
B.on('inserted', function (el) {
expect(this).to.equal(B);
expect(el).to.equal(B.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
parent.append(A);
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(parent);
expect(B.parent).to.equal(void 0);
A.replace(B);
expect(invokeCount).to.equal(1);
expect(A.parent).to.equal(void 0);
return expect(B.parent).to.equal(parent);
});
});
suite("Style", function () {
test("Styles can be set via the .style/.css method with args pair of [property, value]", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
div.style('width', '25px');
expect(div.el.style.width).to.equal('25px');
expect(computedStyle.width).to.equal('25px');
div.style('width', '5vh');
expect(div.el.style.width).to.equal('5vh');
return expect(computedStyle.width).to.contain('px');
});
test("Multiple Styles can be set via the .style/.css method by passing a style object", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.style({
width: 25,
height: '33'
});
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('33px');
});
test("Styles defined in the options object will be applied via classNames and not inline style", function () {
var divA, divB;
divA = Dom.div({
style: {
width: 15,
height: 30
}
}).appendTo(sandbox);
divB = Dom.div().appendTo(sandbox).style({
width: 15,
height: 30
});
expect(divA.raw).to.have.style('width', '15px');
expect(divB.raw).to.have.style('width', '15px');
expect(divA.raw).to.have.style('height', '30px');
expect(divB.raw).to.have.style('height', '30px');
expect(divA.raw.style.width).to.equal('');
expect(divB.raw.style.width).to.equal('15px');
expect(divA.raw.style.height).to.equal('');
return expect(divB.raw.style.height).to.equal('30px');
});
test("If passed a property name without a value, the computed value for that property will be returned", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.style('width')).to.equal('15px');
expect(div.style('height')).to.equal('0px');
div.style({
width: null,
height: 55
});
expect(div.style('width')).to.equal(computedStyle.width);
expect(div.style('height')).to.equal('55px');
div.style('width', '19vw');
return expect(div.style('width')).to.contain('px');
});
test("Functions can be passed as values for properties in style objects which will be invoked with the element's options.relatedInstance as the only argument", function () {
var anotherObj, applyWidth, div;
div = Dom.div({
rate: 25
}).appendTo(sandbox);
applyWidth = function (expectedInstance) {
return div.style({
width: function (instance) {
expect(typeof instance).to.equal('object');
expect(instance).to.equal(expectedInstance);
return div.options.rate;
}
});
};
applyWidth(div);
expect(div.options.rate).to.equal(25);
expect(div.style('width')).to.equal('25px');
div.options.rate = 250;
div.related = anotherObj = {};
applyWidth(anotherObj);
expect(div.style('width')).to.equal('250px');
div = Dom.div({
style: {
width: 30,
height: (function () {
return 50;
}),
fontSize: (function () {
return 20;
})
}
}).appendTo(sandbox);
expect(div.raw).to.have.style('width', '30px');
expect(div.raw).to.have.style('height', '50px');
return expect(div.raw).to.have.style('fontSize', '20px');
});
test("If the return value of a style function is a promise, it will be awaited", async function () {
var div;
div = DOM.div({
style: {
width: 50,
height: 50
}
}).appendTo(sandbox);
expect(div.width).to.equal(50);
expect(div.height).to.equal(50);
div.style('width', function () {
return 30;
});
div.style('height', function () {
return Promise.resolve(30);
});
expect(div.width).to.equal(30);
expect(div.height).to.equal(50);
await Promise.delay(0);
expect(div.width).to.equal(30);
return expect(div.height).to.equal(30);
});
test("A null value can be passed for a property in order to delete that style", function () {
var div;
div = Dom.div({
style: {
width: '15px',
fontSize: function () {
return 30;
}
}
}).appendTo(sandbox);
div.style('height', 20);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '20px');
expect(div.el.style.width).to.equal('');
expect(div.el.style.height).to.equal('20px');
div.style({
width: null,
height: 12
});
expect(div.el).not.to.have.style('width', '15px');
expect(div.el).to.have.style('height', '12px');
expect(['unset', 'inherit', 'initial'].some(function (s) {
return s === div.el.style.width;
})).to.be.true;
expect(div.el.style.height).to.equal('12px');
div.css('height', null);
expect(div.el.style.height).to.equal('');
expect(div.el.style.width).not.to.equal('');
div.el.style.width = null;
expect(div.el.style.width).to.equal('');
expect(div.el).to.have.style('width', '15px');
div.css('width', null);
expect(div.el.style.width).not.to.equal('');
expect(div.el).not.to.have.style('width', '15px');
div.style('height', function () {
return 30;
});
expect(div.el.style.height).to.equal('30px');
div.style('height', function () {
return null;
});
expect(div.el.style.height).to.equal('');
expect(div.el.style.fontSize).to.equal('30px');
div.style('fontSize', null);
return expect(div.el.style.fontSize).to.equal('');
});
test(".styleSafe() can be used to obtain the value for a given property even for non-inserted elements or elements with options.styleAfterInsert", function () {
var divA, divB, heightA, heightB, prop, style, text;
style = {
width: '8px',
height: '9px',
zIndex: function (field) {
return field.options.theIndex;
},
$happy: {
width: '18px',
zIndex: function (field) {
return field.options.theIndex * 2;
}
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style,
theIndex: '12'
});
divB = Dom.div({
style,
theIndex: '29',
styleAfterInsert: true
});
divA.style({
fontSize: 10,
position: 'relative'
});
divB.style({
fontSize: 10,
position: 'relative'
});
prop = function (el, target) {
return {
computed: el.style(target),
inline: el.raw.style[target],
safe: '' + el.styleSafe(target)
};
};
expect(prop(divA, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divB, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '12',
safe: '12'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '29'
});
divA.state('happy', true);
divB.state('happy', true);
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '58'
});
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
divA.appendTo(sandbox);
divB.appendTo(sandbox);
heightA = getComputedStyle(divA.raw).height;
heightB = getComputedStyle(divB.raw).height;
expect(prop(divA, 'zIndex')).to.eql({
computed: '24',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '58',
inline: '58',
safe: '58'
});
expect(prop(divA, 'height')).to.eql({
computed: heightA,
inline: '',
safe: heightA
});
expect(prop(divB, 'height')).to.eql({
computed: heightB,
inline: '',
safe: heightB
});
expect(divA.styleSafe('height')).to.equal(heightA);
expect(divA.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('height')).to.equal(heightB);
expect(divB.styleSafe('height', true)).to.equal('100%');
divB.appendTo(sandbox);
expect(divB.style('height')).not.to.equal('');
expect(divB.style('height')).not.to.equal('100%');
expect(divB.style('height')).to.contain('px');
expect(divB.styleSafe('height')).to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).not.to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('margin', true)).to.equal('');
expect(divB.style('width')).to.equal('18px');
expect(divA.styleSafe('fakeProp')).to.equal(divA);
expect(divA.styleSafe(123)).to.equal(divA);
text = Dom.text('abc123').appendTo(divA);
expect(text.styleSafe('fakeProp')).to.equal(void 0);
return expect(text.styleSafe(123)).to.equal(void 0);
});
test(".styleSafe() will work with instances with no given base styles", function () {
var divA, divB;
divA = Dom.div();
divB = Dom(document.createElement('div'));
expect(function () {
divA.styleSafe('height');
return divB.styleSafe('height');
}).not.to.throw();
expect(divA.styleSafe('height')).to.equal('');
return expect(divB.styleSafe('height')).to.equal('');
});
test(".styleParsed() is a shorthand for parseFloat(.styleSafe())", function () {
var divA, divB, style;
style = {
width: '8px',
height: '9px',
$happy: {
width: '18px'
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style
});
divB = Dom.div({
style,
styleAfterInsert: true
});
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('8px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('8px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('happy', true);
divB.state('happy', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('100%');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.appendTo(sandbox);
divB.appendTo(sandbox);
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.style('width')).to.equal('18px');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('9px');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('18px');
expect(divB.styleSafe('width')).to.equal('18px');
return expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
});
test(".recalcStyle() re-applies all function-value styles", function () {
var count, div;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
div.state('relaxed', true);
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 1,
F: 1,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 0
});
div.state('funny', true);
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 1
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.state('funny', false);
expect(count).to.eql({
A: 5,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.recalcStyle();
return expect(count).to.eql({
A: 6,
B: 3,
C: 2,
D: 2,
E: 4,
F: 4,
G: 2
});
});
test(".recalcStyle() accepts a single argument to indicate if to recalc style on children", function () {
var count, div, wrapper, wrapperCount;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
wrapperCount = 0;
wrapper = Dom.div({
style: {
width: function () {
return ++wrapperCount;
}
}
});
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
div.appendTo(wrapper);
expect(wrapperCount).to.equal(1);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(2);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(true);
expect(wrapperCount).to.equal(3);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(4);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(1);
expect(wrapperCount).to.equal(5);
return expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
});
test("If options.recalcOnResize is set, .recalcStyle() will be invoked on each resize event", function () {
var count;
count = {
A: 0,
B: 0,
C: 0,
D: 0
};
Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
}
}
});
Dom.div({
recalcOnResize: true,
style: {
width: function () {
return ++count.C;
},
opacity: 1,
height: function () {
return ++count.D;
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 1
});
Dom(window).emit('resize');
expect(count).to.eql({
A: 1,
B: 1,
C: 2,
D: 2
});
Dom(window).emit('resize');
return expect(count).to.eql({
A: 1,
B: 1,
C: 3,
D: 3
});
});
test("If options.forceStyle is set, all registered styles will have the '!important' flag set", function () {
var divA, divB, style;
style = DOM.style({
props: {
innerHTML: ".theDiv {width:50px}"
}
});
divA = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
}
}).appendTo(sandbox);
divB = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
},
forceStyle: true
}).appendTo(sandbox);
expect(divA.style('width')).to.equal('100px');
expect(divB.style('width')).to.equal('100px');
style.appendTo(document.head);
expect(divA.style('width')).to.equal('50px');
expect(divB.style('width')).to.equal('100px');
expect(divA.attr('style') === '' || divA.attr('style') === null).to.be.true;
expect(divB.attr('style') === '' || divB.attr('style') === null).to.be.true;
divA.style('width', function () {
return 75;
});
divB.style('width', function () {
return 75;
});
divA.style('height', 85);
divB.style('height', 85);
expect(divA.attr('style')).not.to.equal('');
expect(divB.attr('style')).not.to.equal('');
expect(divA.attr('style')).not.to.include('75px !important');
expect(divB.attr('style')).to.include('75px !important');
expect(divA.attr('style')).not.to.include('85px !important');
expect(divB.attr('style')).to.include('85px !important');
expect(divA.style('width')).to.equal('75px');
expect(divB.style('width')).to.equal('75px');
return style.remove();
});
test(".show()/.hide() will toggle the element's visibility", function () {
var div;
div = Dom.div().appendTo(sandbox);
expect(div.style('display')).to.equal('block');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('block');
div.show();
return expect(div.style('display')).to.equal('block');
});
test(".show() will set the element's display style to the provided argument, or to the value provided in the style object", function () {
var div;
div = Dom.div({
style: {
display: 'inline'
}
}).appendTo(sandbox);
expect(div.style('display')).to.equal('inline');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('inline');
div.hide();
div.show('inline-block');
return expect(div.style('display')).to.equal('inline-block');
});
return test("SVG elements", function () {
var svg;
svg = Dom(['*svg', {
style: {
display: 'block',
width: 10,
height: 10,
$happy: {
width: 20,
height: 20
}
}
}]).appendTo(sandbox);
expect(svg.style('width')).to.equal('10px');
expect(svg.style('height')).to.equal('10px');
svg.state('happy', true);
expect(svg.style('width')).to.equal('20px');
return expect(svg.style('height')).to.equal('20px');
});
});
suite("State", function () {
test("States can be polled for a value by passing only the target state's name to .state & can be toggled on/off by passing a second argument", function () {
var div;
div = Dom.div();
expect(div.state('funny')).to.be.false;
div.state('funny', true);
expect(div.state('funny')).to.be.true;
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be.true;
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.state('funny', false);
expect(div.state('funny')).to.be.false;
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.state('$funny', true);
div.state('$base', true);
expect(div.state('funny')).to.be.true;
return expect(div.state('base')).to.be.false;
});
test("A key:value pair object can be passed to toggle state for multiple states at once", function () {
var div;
div = Dom.div();
expect(div.state('a')).to.equal(false);
expect(div.state('b')).to.equal(false);
expect(div.state('c')).to.equal(false);
div.state({
a: true,
b: 1
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(true);
expect(div.state('c')).to.equal(false);
div.state({
b: false,
c: 'y'
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(false);
return expect(div.state('c')).to.equal(true);
});
test(".state() without arguments should return an array of active states", function () {
var el;
el = DOM.div();
expect(el.state()).to.eql([]);
el.state('happy', true);
el.state('relaxed', true);
expect(el.state()).to.eql(['happy', 'relaxed']);
el.state('happy', false);
expect(el.state()).to.eql(['relaxed']);
el.state('happy', true);
return expect(el.state()).to.eql(['relaxed', 'happy']);
});
test("All states can be cleared/toggled off via .resetState", function () {
var div;
div = Dom.div();
div.state('funny', true);
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be.true;
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.resetState();
expect(div.state('funny')).to.be.false;
expect(div.state('happy')).to.be.false;
return expect(div.state('relaxed')).to.be.false;
});
test("A state can be toggled on/off via .toggleState", function () {
var div;
div = DOM.div();
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
expect(div.state('happy')).to.equal(true);
div.toggleState('happy');
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
return expect(div.state('happy')).to.equal(true);
});
test("Styles can be passed under specific states using a '$' prefix before the state name", function () {
var computedStyle, div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px'
},
$happy: {
width: '25px',
marginTop: '20px'
},
$relaxed: {
width: '35px',
marginLeft: '12px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', false);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
div.state('relaxed', true);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('12px');
div.state('happy', false);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
return expect(computedStyle.marginLeft).to.equal('12px');
});
test("A state:eventName (or state:eventOpts) map can be passed set for options.stateTriggers", function () {
var computedStyle, div;
div = Dom.div({
stateTriggers: {
happy: {
on: 'becameHappy',
off: 'becameSad'
},
relaxed: 'isRelaxed'
},
style: {
$base: {
width: '15px'
},
$happy: {
width: '25px'
},
$relaxed: {
width: '35px'
}
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.state('happy')).to.be.false;
expect(div.state('relaxed')).to.be.false;
expect(computedStyle.width).to.equal('15px');
div.emit('becameHappy');
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.false;
expect(computedStyle.width).to.equal('25px');
div.emit('isRelaxed');
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
expect(computedStyle.width).to.equal('35px');
div.emit('becameSad');
expect(div.state('happy')).to.be.false;
expect(div.state('relaxed')).to.be.true;
expect(computedStyle.width).to.equal('35px');
div.state('relaxed', false);
return expect(computedStyle.width).to.equal('15px');
});
test("options.stateTriggers won't be attached if they aren't being used in style object", function () {
var divA, divB;
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(false);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("options.stateTriggers can be forced to be attached even if they aren't being used in style object via ._attachStateEvents(true)", function () {
var attachStateEvents, divA, divB;
attachStateEvents = Dom.div()._attachStateEvents ? '_attachStateEvents' : '_ae';
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
divA[attachStateEvents](true);
divB[attachStateEvents](true);
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(true);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(true);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("The hover and focus states will be listened for and toggled by default by their appropriate events", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px',
backgroundColor: 'rgb(45, 45, 45)'
},
$hover: {
width: '25px',
marginTop: '20px',
backgroundColor: 'rgb(155, 155, 155)'
},
$focus: {
width: '35px',
backgroundColor: 'rgb(200, 200, 200)'
}
}
});
div.appendTo(sandbox);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(155, 155, 155)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
div.emit('focus');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
return expect(div.el.style.marginTop).to.equal('');
});
test("If not passed a style map under the 'base' state, all non-state properties on the style object will be considered as 'base' state properties", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
height: '20px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('20px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
return expect(computedStyle.height).to.equal('20px');
});
test("State-specific styles will be removed upon state turn off or restored to the base value", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
expect(div.el.style.height).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '30px');
expect(div.el.style.height).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
return expect(div.el.style.height).to.equal('');
});
test("Higher order state styles will have a higher precedence than the 'base' style to be used as replacments for pending-removal state-styles", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
},
$focus: {
height: '45px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('focus');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
div.emit('focus');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('30px');
});
test("State toggles will be passed to children elements unless options.passStateToChildren is off", function () {
var A, B, C, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div({
passStateToChildren: false
}).appendTo(A);
expect(Main.state('happy')).to.be.false;
expect(A.state('happy')).to.be.false;
expect(B.state('happy')).to.be.false;
expect(C.state('happy')).to.be.false;
Main.state('happy', true);
expect(Main.state('happy')).to.be.true;
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
expect(C.state('happy')).to.be.true;
Main.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be.false;
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
expect(C.state('happy')).to.be.true;
Main.state('happy', true);
Main.options.passStateToChildren = true;
A.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be.false;
expect(A.state('happy')).to.be.false;
expect(B.state('happy')).to.be.true;
return expect(C.state('happy')).to.be.true;
});
test("State styles can be nested to trigger when all states are toggled on", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '12px',
height: '12px',
fontSize: '10px'
},
$funny: {
fontSize: '15px',
height: '15px'
},
$happy: {
width: '14px',
fontSize: '14px',
$relaxed: {
height: '11px',
fontSize: '17px',
$funny: {
width: '10px',
height: '14px'
}
}
},
$relaxed: {
width: '17px'
}
}
});
div.appendTo(sandbox);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('funny', true);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('15px');
expect(div.style('fontSize')).to.equal('15px');
div.state('funny', false);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('14px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('14px');
div.state('relaxed', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('funny', true);
expect(div.style('width')).to.equal('10px');
expect(div.style('height')).to.equal('14px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('15px');
return expect(div.style('fontSize')).to.equal('15px');
});
test("QuickElement.rect should contain an updated version of the element's ClientRect", function () {
var div, rectA, rectB, rectC;
div = Dom.div().appendTo(sandbox);
rectA = div.rect;
rectB = div.rect;
expect(rectA).to.be.instanceOf(ClientRect);
expect(rectB).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
div.style('width', '7px');
rectC = div.rect;
expect(rectC).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
expect(rectA).not.to.eql(rectC);
expect(rectA.width).not.to.equal(7);
expect(rectB.width).not.to.equal(7);
return expect(rectC.width).to.equal(7);
});
test("QuickElement.width should return the updated version of an element's computed width", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px'
});
div.style({
width: '50%'
});
expect(div.width).to.equal(500);
div.style({
width: '10%'
});
expect(div.width).to.equal(100);
div.style({
width: '97px'
});
return expect(div.width).to.equal(97);
});
test("QuickElement.height should return the updated version of an element's computed height", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
height: '1000px'
});
div.style({
height: '50%'
});
expect(div.height).to.equal(500);
div.style({
height: '10%'
});
expect(div.height).to.equal(100);
div.style({
height: '97px'
});
return expect(div.height).to.equal(97);
});
test("QuickElement.width/.height setters are shortcuts for .style() setters", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px',
height: '1000px'
});
div.style({
width: '50%',
height: '50%'
});
div.width = div.height = '50%';
expect(div.width).to.equal(500);
expect(div.height).to.equal(500);
div.width = div.height = '10%';
expect(div.width).to.equal(100);
expect(div.height).to.equal(100);
div.width = div.height = '97px';
expect(div.width).to.equal(97);
return expect(div.height).to.equal(97);
});
test("QuickElement.orientation should return the updated version of an element's computed orientation", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.orientation).to.equal('landscape');
div.style({
width: 550,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 600,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 601,
height: 600
});
return expect(div.orientation).to.equal('landscape');
});
test("QuickElement.aspectRatio should return the updated version of an element's computed aspect-ratio", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.aspectRatio).to.equal(1.25);
div.style({
width: 540,
height: 600
});
expect(div.aspectRatio).to.equal(0.9);
div.style({
width: 600,
height: 600
});
expect(div.aspectRatio).to.equal(1);
div.style({
width: 300,
height: 900
});
return expect(div.aspectRatio).to.equal(0.33333333333333333333333333);
});
test("If options.styleAfterInsert is passed, function styles will be applied only after the element is inserted into the DOM", function () {
var className, divA, divB, divC, divReg, parentOpacityGetter;
parentOpacityGetter = function () {
if (this.parent) {
return this.parent.style('opacity');
} else {
return '0.5';
}
};
divReg = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
}
});
divA = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divB = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divC = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
className = divReg.raw.className || 'no className';
expect(divReg.raw.className).to.equal(className);
expect(divA.raw.className).to.equal(className);
expect(divB.raw.className).to.equal(className);
expect(divC.raw.className).to.equal(className);
expect(divReg.el.style.opacity).to.equal('0.5');
expect(divA.el.style.opacity).to.equal('');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divA.appendTo(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divB.insertBefore(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
sandbox.appendChild(divC.el);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
divC.parent;
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('1');
return divC.appendTo(sandbox);
});
test("Any styles applied by states before the element has been inserted into the DOM and when options.styleAfterInsert is on will be re-applied after insert", function () {
var divA, divReg;
divReg = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
}
});
divA = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
},
styleAfterInsert: true
});
expect(divReg.el.style.height).to.equal('19px');
expect(divA.el.style.height).to.equal('');
divReg.state('funny', true);
divA.state('funny', true);
expect(divReg.el.style.height).to.equal('29px');
expect(divA.el.style.height).to.equal('');
divReg.state('happy', true);
divA.state('happy', true);
expect(divReg.el.style.height).to.equal('39px');
expect(divA.el.style.height).to.equal('');
divReg.appendTo(sandbox);
divA.appendTo(sandbox);
expect(divReg.el.style.height).to.equal('39px');
return expect(divA.el.style.height).to.equal('39px');
});
test("If an element with options.styleAfterInsert is appended into a detached element, styles will be applied only after the parent is appended to the DOM", function () {
var detachedParent, divA, divReg;
detachedParent = Dom.div();
divReg = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
}
});
divA = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
},
styleAfterInsert: true
});
divReg.state('happy', true);
divReg.state('relaxed', true);
divA.state('happy', true);
divA.state('relaxed', true);
divA.state('relaxed', true);
divA.style('visibility', 'hidden');
expect(divReg.el.style.height).to.equal('19px');
expect(divReg.el.style.width).to.equal('31px');
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
divA.appendTo(detachedParent);
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
detachedParent.appendTo(sandbox);
expect(divA.el.style.height).to.equal('19px');
expect(divA.el.style.width).to.equal('31px');
return expect(divA.el.style.visibility).to.equal('hidden');
});
test("QuickElement.pipeState can be used to redirect all state toggles to the provided target element", function () {
var childA, childB, divA, divB, parentA, parentB;
parentA = Dom.div();
parentB = Dom.div({
passStateToChildren: false
});
divA = Dom.div(null).appendTo(parentA);
divB = Dom.div(null).appendTo(parentB);
childA = Dom.span().appendTo(divA);
childB = Dom.span().appendTo(divB);
divA.pipeState();
divA.state('1', true);
expect(parentA.state('1')).to.equal(false);
expect(divA.state('1')).to.equal(true);
expect(childA.state('1')).to.equal(true);
divA.pipeState(parentA);
divA.state('2', true);
expect(parentA.state('2')).to.equal(true);
expect(divA.state('2')).to.equal(true);
expect(childA.state('2')).to.equal(true);
divA.pipeState(false);
divA.state('2.5', true);
expect(parentA.state('2.5')).to.equal(false);
expect(divA.state('2.5')).to.equal(true);
expect(childA.state('2.5')).to.equal(true);
divB.pipeState(true);
divB.state('3', true);
expect(parentB.state('3')).to.equal(false);
expect(divB.state('3')).to.equal(true);
expect(childB.state('3')).to.equal(true);
divB.pipeState(parentB);
divB.state('4', true);
expect(parentB.state('4')).to.equal(true);
expect(divB.state('4')).to.equal(false);
expect(childB.state('4')).to.equal(false);
divA.pipeState(parentB);
divA.state('5', true);
expect(parentA.state('5')).to.equal(false);
expect(parentB.state('5')).to.equal(true);
expect(divA.state('5')).to.equal(false);
expect(divB.state('5')).to.equal(false);
expect(childA.state('5')).to.equal(false);
expect(childB.state('5')).to.equal(false);
divA.pipeState(false);
divB.pipeState(parentA);
divB.state('6', true);
expect(parentA.state('6')).to.equal(true);
expect(parentB.state('6')).to.equal(false);
expect(divA.state('6')).to.equal(true);
expect(divB.state('6')).to.equal(false);
expect(childA.state('6')).to.equal(true);
return expect(childB.state('6')).to.equal(false);
});
test("States can be marked as unpassable to avoid passing to children by including them in options.unpassableStates", function () {
var div, spanA, spanB, subSpan;
div = Dom.div({
unpassableStates: ['B', 'D']
});
spanA = Dom.span().appendTo(div);
spanB = Dom.span().appendTo(div);
subSpan = Dom.span().appendTo(spanB);
expect(div.state('A')).to.equal(false);
expect(spanA.state('A')).to.equal(false);
expect(spanB.state('A')).to.equal(false);
expect(subSpan.state('A')).to.equal(false);
div.state('A', true);
expect(div.state('A')).to.equal(true);
expect(spanA.state('A')).to.equal(true);
expect(spanB.state('A')).to.equal(true);
expect(subSpan.state('A')).to.equal(true);
div.state('B', true);
expect(div.state('B')).to.equal(true);
expect(spanA.state('B')).to.equal(false);
expect(spanB.state('B')).to.equal(false);
expect(subSpan.state('B')).to.equal(false);
div.state('C', true);
expect(div.state('C')).to.equal(true);
expect(spanA.state('C')).to.equal(true);
expect(spanB.state('C')).to.equal(true);
expect(subSpan.state('C')).to.equal(true);
div.state('D', true);
expect(div.state('D')).to.equal(true);
expect(spanA.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(false);
expect(subSpan.state('D')).to.equal(false);
spanB.state('D', true);
expect(spanB.state('D')).to.equal(true);
expect(subSpan.state('D')).to.equal(true);
div.state('D', false);
expect(div.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(true);
return expect(subSpan.state('D')).to.equal(true);
});
test("When .state() receives a truthy value as the third argument the event will bubble up to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div(null, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div(null, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.state('happy', true, true);
childB.state('happy', true);
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.state('relaxed', true, null);
childB.state('relaxed', true, 'on');
expect(parentA.state('relaxed')).to.equal(false);
expect(parentB.state('relaxed')).to.equal(true);
expect(subParentA.state('relaxed')).to.equal(false);
expect(subParentB.state('relaxed')).to.equal(true);
expect(childA.state('relaxed')).to.equal(true);
expect(childB.state('relaxed')).to.equal(true);
expect(subChildA.state('relaxed')).to.equal(true);
return expect(subChildB.state('relaxed')).to.equal(false);
});
test("options.stateTriggers config objects can specify a 'force' property which will make them get attached even if they aren't used", function () {
var divA, divB;
divA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
});
divB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF'
}
}
});
expect(divA.state('happy')).to.equal(false);
expect(divB.state('happy')).to.equal(false);
divA.raw.emitEvent('happyON');
divB.raw.emitEvent('happyON');
expect(divA.state('happy')).to.equal(true);
expect(divB.state('happy')).to.equal(false);
divB.state('happy', true);
divA.raw.emitEvent('happyOFF');
divB.raw.emitEvent('happyOFF');
expect(divA.state('happy')).to.equal(false);
return expect(divB.state('happy')).to.equal(true);
});
test("options.stateTriggers config objects can specify a 'bubbles' property which will cause the state to bubble to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
bubbles: true,
force: true
}
}
}, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
}, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.raw.emitEvent('happyON');
childB.raw.emitEvent('happyON');
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.raw.emitEvent('happyOFF');
childB.raw.emitEvent('happyOFF');
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
return expect(subChildB.state('happy')).to.equal(false);
});
test("wrappers created for existing elements should attempt to resolve if its inserted into the DOM on init", function () {
var divA, divA_, divB, divB_;
divA_ = document.createElement('div');
divB_ = document.createElement('div');
sandbox.appendChild(divB_);
divA = Dom(divA_);
divB = Dom(divB_);
divA_.style.height = '100px';
divB_.style.height = '100px';
expect(typeof divA.height).to.equal('number');
expect(typeof divB.height).to.equal('number');
expect(isNaN(divA.height)).to.be.true;
expect(isNaN(divB.height)).to.be.false;
return expect(divA.styleSafe('height')).to.equal('100px');
});
test("state-based text", function () {
var divA, divB, divC;
divA = Dom(['div', null, ['text', {
text: {
$base: 'abc123',
$happy: 'Happy',
$relaxed: 'Relaxed'
}
}]]);
divB = Dom(['div', null, ['text', {
text: {
$happy: 'Happy',
$relaxed: 'Relaxed',
'$relaxed+funny': 'Funny & Relaxed'
}
}]]);
divC = Dom.div({
text: {
$base: 'def456',
$happy: 'ghi789'
}
});
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('happy', true);
divB.state('happy', true);
divC.state('happy', true);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
expect(divC.text).to.equal('ghi789');
divA.state('happy', false);
divB.state('happy', false);
divC.state('happy', false);
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('happy', true);
divB.state('happy', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
divB.state('relaxed', true);
divB.state('funny', true);
expect(divB.text).to.equal('Relaxed');
divB.state('relaxed+funny', true);
return expect(divB.text).to.equal('Funny & Relaxed');
});
test("state changes will emit a private stateChange:<state> event", function () {
var div, results;
results = [];
div = Dom.div({
style: {
color: 'white',
opacity: 1,
$happy: {
color: 'black'
}
}
});
div.state('any', true);
div.on('stateChange:happy', function (state) {
return results.push(['happy', state]);
});
div.on('stateChange:relaxed', function (state) {
return results.push(['relaxed', state]);
});
div.on('stateChange:arbitrary', function (state) {
return results.push(['arbitrary', state]);
});
expect(results).to.deep.equal([]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true]]);
div.state('happy', false);
expect(results).to.deep.equal([['happy', true], ['happy', false]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('another', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('relaxed', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true]]);
div.state('arbitrary', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
div.state('relaxed', true);
return expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
});
test("state-based styles can be updated via QuickElement.updateStateStyles", function () {
var div, getStyles;
div = Dom.div({
style: {
width: 5,
height: 5,
marginTop: 5,
$happy: {
marginTop: 10
},
$relaxed: {
marginTop: 20,
width: 20,
$happy: {
height: 40,
marginTop: 40
}
},
$somethingElse: {
width: 60,
marginTop: 60
}
}
}).appendTo(sandbox);
getStyles = function () {
return {
width: div.style('width'),
height: div.style('height'),
marginTop: div.style('marginTop')
};
};
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '10px'
});
div.updateStateStyles({
width: 7,
height: 8,
$happy: {
marginTop: 12,
height: 12
}
});
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
expect(getStyles()).to.eql({
width: '7px',
height: '8px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
div.updateStateStyles({
$base: {
width: 2,
height: 9
},
$relaxed: {
height: 20,
$happy: {
width: 40,
marginTop: function () {
return 45;
}
}
}
});
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('relaxed', true);
expect(getStyles()).to.eql({
width: '20px',
height: '20px',
marginTop: '20px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '40px',
height: '40px',
marginTop: '45px'
});
div.state({
happy: false,
relaxed: false
});
div.el.style.marginTop = null;
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('somethingElse', true);
return expect(getStyles()).to.eql({
width: '60px',
height: '9px',
marginTop: '60px'
});
});
return test("default states to apply to an element upon creation can be specified via options.state mapping", function () {
var el1, el2, el3;
el1 = DOM.div();
el2 = DOM.div({
state: {
happy: true,
relaxed: false
}
});
el3 = DOM.div({
state: {
relaxed: true
}
});
expect(el1.state('happy')).to.equal(false);
expect(el1.state('relaxed')).to.equal(false);
expect(el2.state('happy')).to.equal(true);
expect(el2.state('relaxed')).to.equal(false);
expect(el3.state('happy')).to.equal(false);
return expect(el3.state('relaxed')).to.equal(true);
});
});
suite("Media Queries", function () {
suiteTeardown(function () {
var ref;
if ((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0) {
return dimensions.restore();
}
});
suiteSetup(function () {
var ref;
if (!((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0)) {
return this.skip();
}
});
teardown(function () {
var i, level, results1;
results1 = [];
for (level = i = 0; i <= 3; level = ++i) {
results1.push(Dom.CSS.clearRegistered(level));
}
return results1;
});
test("Window dimensions", function () {
var div;
dimensions.simulate(1000, 1000);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
width: '300px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@window(orientation:landscape)': {
marginTop: 6
},
'@window(orientation:portrait)': {
marginTop: 7
},
'@window(max-width:800)': {
zIndex: 3,
width: '280px'
},
'@window(max-width:700, max-height:1000)': {
zIndex: 4,
width: '250px',
height: '250px'
},
'@window(max-height:1000)': {
fontSize: '25px'
},
'@window(min-width:900px)': {
fontSize: '23px'
},
'@window(aspect-ratio:0.5)': {
fontSize: '21px',
lineHeight: '12px'
},
'@window(min-height:1200)': {
fontSize: '20px'
}
}
});
div.appendTo(sandbox);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('23px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(900);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(899);
expect(div.style('fontSize')).to.equal('25px');
dimensions.simulate(899, 1100);
expect(div.style('fontSize')).to.equal('30px');
dimensions.simulate(950);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(950, 1900);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('12px');
dimensions.simulate(950, 1899);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('30px');
dimensions.simulate(790);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(810);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
dimensions.simulate(791);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(701, 900);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 900);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
dimensions.simulate(700, 1001);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 1000);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(1100, 1000);
expect(div.style('marginTop')).to.equal('6px');
dimensions.simulate(1100, 1101);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Self dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div().appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '100%',
height: '100%',
fontSize: '30px',
lineHeight: '30px',
'@self(orientation:landscape)': {
marginTop: 6
},
'@self(orientation:portrait)': {
marginTop: 7
},
'@self(position:relative)': {
top: '20px'
},
'@self(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@self(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@self(zIndex:4)': {
lineHeight: '15px'
},
'@self(min-zIndex:6)': {
opacity: '0'
},
'@self(max-fontSize:20)': {
lineHeight: '19px'
},
'@self(min-width:600px)': {
fontSize: '19px'
},
'@self(aspect-ratio:2.25)': {
fontSize: '22px',
lineHeight: '12px'
},
'@self(min-height:700)': {
fontSize: '40px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginTop')).to.equal('6px');
expect(div.style('top')).to.equal('20px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
expect(div.style('opacity')).to.equal('1');
div.style('zIndex', 5);
dimensions.simulate();
expect(div.style('opacity')).to.equal('1');
expect(div.style('lineHeight')).to.equal('37px');
div.style('zIndex', 17);
expect(div.style('opacity')).to.equal('1');
dimensions.simulate();
expect(div.style('opacity')).to.equal('0');
simulateParent(900);
expect(div.style('fontSize')).to.equal('19px');
expect(div.style('lineHeight')).to.equal('30px');
simulateParent(900);
expect(div.style('lineHeight')).to.equal('19px');
simulateParent(900, 400);
expect(div.style('fontSize')).to.equal('22px');
expect(div.style('lineHeight')).to.equal('12px');
simulateParent(2025, 900);
expect(div.style('fontSize')).to.equal('40px');
expect(div.style('lineHeight')).to.equal('12px');
expect(div.style('marginTop')).to.equal('6px');
simulateParent(2025, 2026);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Parent dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div({
style: {
position: 'absolute'
}
}).appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@parent(orientation:landscape)': {
marginBottom: 6
},
'@parent(orientation:portrait)': {
marginBottom: 7
},
'@parent(position:relative)': {
top: '21px'
},
'@parent(max-width:350)': {
zIndex: 3,
fontSize: '34px'
},
'@parent(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@parent(zIndex:7)': {
lineHeight: '16px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginBottom')).to.equal('6px');
expect(div.style('top')).to.equal('30px');
parent.style('position', 'relative');
expect(div.style('top')).to.equal('30px');
simulateParent();
expect(div.style('top')).to.equal('21px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('34px');
parent.style('zIndex', '7');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('16px');
return expect(div.style('opacity')).to.equal('1');
});
test("Parent Ref dimensions/styles", function () {
var div, parent;
parent = Dom.div({
ref: 'abc'
}, Dom.div({
id: 'def'
}, Dom.div({
ref: 'ghi'
}))).appendTo(sandbox);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@#abc(orientation:landscape)': {
fontWeight: 600
},
'@#abc(orientation:portrait)': {
fontWeight: 500
},
'@#def(position:relative)': {
top: '20px'
},
'@#def(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@#ghi(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@#abc(zIndex:7)': {
lineHeight: '15px'
}
}
});
parent.style({
width: 400,
height: 300
});
parent.child.def.style({
width: 400,
height: 300
});
parent.child.ghi.style({
width: 400,
height: 300
});
div.appendTo(parent.child.ghi);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('fontWeight')).to.equal('600');
expect(div.style('top')).to.equal('30px');
parent.style({
width: 400,
height: 900,
position: 'relative'
});
dimensions.simulate();
expect(div.style('fontWeight')).to.equal('500');
expect(div.style('top')).to.equal('30px');
parent.child.def.style({
position: 'relative'
});
expect(div.style('top')).to.equal('30px');
dimensions.simulate();
expect(div.style('top')).to.equal('20px');
parent.child.def.style({
width: 349,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
parent.child.ghi.style({
width: 450,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
parent.style({
zIndex: 7
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
return expect(div.style('opacity')).to.equal('1');
});
return test("Nested media queries", function () {
var div;
dimensions.simulate(1000, 900);
div = Dom.div({
style: {
zIndex: 2,
$happy: {
marginRight: 5,
'@window(orientation:landscape)': {
marginRight: 6
}
},
'@window(orientation:portrait)': {
$relaxed: {
marginRight: 7
}
}
}
});
div.appendTo(sandbox);
expect(div.style('marginRight')).to.equal('0px');
div.state('happy', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('5px');
dimensions.simulate(1000, 900);
expect(div.style('marginRight')).to.equal('6px');
div.state('relaxed', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('7px');
dimensions.simulate(1000, 900);
return expect(div.style('marginRight')).to.equal('6px');
});
});
suite("Traversal", function () {
test("Children", function () {
var comment, div, div$, spanA, spanB, text;
div = Dom.div(null, Dom.div(), 'Some Text');
expect(div.children.length).to.equal(2);
expect(div.elementChildren.length).to.equal(1);
expect(div.el.childNodes.length).to.equal(2);
div.append(Dom.span());
expect(div.children.length).to.equal(3);
expect(div.elementChildren.length).to.equal(2);
expect(div.el.childNodes.length).to.equal(3);
div.el.appendChild(document.createElement('div'));
expect(div.children.length).to.equal(4);
expect(div.elementChildren.length).to.equal(3);
expect(div.el.childNodes.length).to.equal(4);
div = document.createElement('div');
spanA = document.createElement('span');
spanB = document.createElement('span');
text = document.createTextNode('someTextNode');
comment = document.createComment('someCommentNode');
div.appendChild(spanA);
div.appendChild(comment);
div.appendChild(spanB);
div.appendChild(text);
expect(div.childNodes.length).to.equal(4);
expect(div.children.length).to.equal(2);
div$ = Dom(div);
expect(div$.children.length).to.equal(3);
expect(div$.elementChildren.length).to.equal(2);
expect(div$.children[0].raw).to.equal(spanA);
expect(div$.children[1].raw).to.equal(spanB);
return expect(div$.children[2].raw).to.equal(text);
});
test("Parent", function () {
var A, B, C;
A = Dom.div(null, Dom.div(), 'Some Text');
B = Dom.div();
C = Dom.div();
expect(A.parent).to.equal(void 0);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
B.append(A);
expect(A.parent).to.equal(B);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(1);
expect(B.children[0]).to.equal(A);
C.append(A);
expect(A.parent).to.equal(C);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(0);
return expect(C.children[0]).to.equal(A);
});
test("Parents", function () {
var A, B, C;
A = Dom.div().appendTo(sandbox);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(B);
expect(A.parent.el).to.equal(sandbox);
expect(B.parent).to.equal(A);
expect(C.parent).to.equal(B);
expect(A.parents.length).to.equal(B.parents.length - 1);
expect(B.parents.length).to.equal(C.parents.length - 1);
expect(B.parents[0]).to.equal(A);
expect(C.parents[0]).to.equal(B);
expect(C.parents.length).to.equal(5);
return expect(C.parents.slice(-1)[0].el).to.equal(document.documentElement);
});
suite("Parent Matching", function () {
teardown(function () {
return this.els.A.detach();
});
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A,
B,
C,
D
};
});
test("function filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching(null)).to.equal(void 0);
expect(D.parentMatching(B)).to.equal(void 0);
expect(D.parentMatching(function () {
return false;
})).to.equal(void 0);
expect(D.parentMatching(function (el) {
return el === B;
})).to.equal(B);
expect(D.parentMatching(function (el) {
return el === A;
})).to.equal(A);
expect(D.parentMatching(function (el) {
return el === C;
})).to.equal(C);
A.appendTo(sandbox);
return expect(D.parentMatching(function (el) {
return el.raw === document.documentElement;
})).to.equal(Dom(document.documentElement));
});
return test("ref filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching('badRef')).to.equal(void 0);
expect(D.parentMatching('B')).to.equal(B);
expect(D.parentMatching('A')).to.equal(A);
return expect(D.parentMatching('C')).to.equal(C);
});
});
suite("Parents Until", function () {
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A,
B,
C,
D
};
});
test("function filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentsUntil(null)).to.eql([C, B, A]);
expect(D.parentsUntil()).to.eql([C, B, A]);
expect(D.parentsUntil(function (el) {
return el === A;
})).to.eql([C, B]);
expect(D.parentsUntil(function (el) {
return el === B;
})).to.eql([C]);
return expect(D.parentsUntil(function (el) {
return false;
})).to.eql([C, B, A]);
});
return test("ref filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parentsUntil('A')).to.eql([C, B]);
expect(D.parentsUntil('B')).to.eql([C]);
return expect(D.parentsUntil('badRef')).to.eql([C, B, A]);
});
});
test("Next", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(A.next).to.equal(B);
expect(C.next).to.equal(D);
expect(E.next).to.equal(void 0);
return expect(B.nextAll).to.eql([C, D, E]);
});
test("Next Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(A.next).to.equal(B);
expect(A.nextEl).to.equal(C);
expect(B.nextEl).to.equal(C);
expect(C.nextEl).to.equal(E);
expect(E.nextEl).to.equal(void 0);
return expect(A.nextElAll).to.eql([C, E]);
});
test("Prev", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(C.prev).to.equal(B);
expect(A.prev).to.equal(void 0);
return expect(D.prevAll).to.eql([C, B, A]);
});
test("Prev Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(E.prevEl).to.equal(C);
expect(D.prevEl).to.equal(C);
expect(C.prevEl).to.equal(A);
expect(A.prevEl).to.equal(void 0);
return expect(E.prevElAll).to.eql([C, A]);
});
test("Siblings", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(C.siblings).to.eql(C.prevAll.reverse().concat(C.nextAll));
expect(C.siblings).to.eql([A, B, D, E]);
expect(C.elementSiblings).to.eql([A, E]);
return expect(B.elementSiblings).to.eql([A, C, E]);
});
test("First/Last Child", function () {
var divA, divB, divBA, divBB, divC, main;
main = DOM.div({
id: 'main'
});
divA = DOM.div({
id: 'divA'
}).appendTo(main);
divB = DOM.div({
id: 'divB'
}).appendTo(main);
divC = DOM.div({
id: 'divC'
}).appendTo(main);
divBA = DOM.div({
id: 'divBA'
}).appendTo(divB);
divBB = DOM.div({
id: 'divBB'
}).appendTo(divB);
expect(main.firstChild).to.equal(divA);
expect(main.lastChild).to.equal(divC);
expect(divA.firstChild).to.equal(void 0);
expect(divA.lastChild).to.equal(void 0);
expect(divB.firstChild).to.equal(divBA);
return expect(divB.lastChild).to.equal(divBB);
});
test("Child (by ref)", function () {
var divA, divB, divC, newChild, newChildChild, newParent, sandBox;
divA = Dom.div({
id: 'divA'
}, Dom.div({
id: 'childA'
}, Dom.span({
ref: 'childA_1'
}), Dom.div({
ref: 'childA_2',
id: 'childA_2'
})), Dom.div({}, Dom.span({
ref: 'childB_1'
}), Dom.text({
id: 'childB_2'
}, 'The Text')));
divB = Dom.template(['div', {
id: 'divB'
}, ['div', {
id: 'childA',
style: {
color: 'pink'
}
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_3',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}]]]).spawn();
divC = Dom.template(['div', {
ref: 'divC'
}, ['div', {
ref: 'childA'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}]], ['div', {
ref: 'childB'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}], ['div', {
ref: 'divD'
}, ['div', {
ref: 'childB'
}]]]]).spawn();
expect(divA.child.childA).to.equal(divA.children[0]);
expect(divA.child.childA_1).to.equal(divA.children[0].children[0]);
expect(divA.child.childA_2).to.equal(divA.children[0].children[1]);
expect(divA.child.childA_3).to.equal(void 0);
expect(divA.child.childB).to.equal(void 0);
expect(divA.child.childB_1).to.equal(divA.children[1].children[0]);
expect(divA.child.childB_2).to.equal(divA.children[1].children[1]);
expect(divA.child.childB_2.type).to.equal('text');
expect(divB.child.childA).to.equal(divB.children[0]);
expect(divB.child.childA_1).to.equal(divB.children[0].children[0]);
expect(divB.child.childA_2).to.equal(divB.children[0].children[1]);
expect(divB.child.childA_3).to.equal(void 0);
expect(divB.child.childB).to.equal(void 0);
expect(divB.child.childB_1).to.equal(divB.children[1].children[0]);
expect(divB.child.childB_2).to.equal(divB.children[1].children[1]);
expect(divB.child.childA.style('color')).to.equal('');
expect(divB.child.childA.styleSafe('color')).not.to.equal('');
expect(divB.child.childA.styleSafe('color').length >= 4).to.be.true;
expect(divA.child.childA.raw.getAttribute('id')).to.equal('childA');
expect(divA.child.childA.raw.getAttribute('data-ref')).to.equal('childA');
expect(divA.child.childA_1.raw.getAttribute('id')).to.equal(null);
expect(divA.child.childA_1.raw.getAttribute('data-ref')).to.equal('childA_1');
expect(divA.child.childA_2.raw.getAttribute('id')).to.equal('childA_2');
expect(divA.child.childA_2.raw.getAttribute('data-ref')).to.equal('childA_2');
expect(divC.child.childA).to.equal(divC.children[0]);
expect(divC.child.childB).to.equal(divC.children[1]);
expect(divC.child.divB).to.equal(divC.children[0].children[0]);
expect(divC.child.divC).to.equal(divC);
expect(divC.child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[0].child.divB).to.equal(divC.children[0].children[0]);
expect(divC.children[0].child.divC).to.equal(divC.children[0].children[1]);
expect(divC.children[1].child.divB).to.equal(divC.children[1].children[0]);
expect(divC.children[1].child.divC).to.equal(divC.children[1].children[1]);
expect(divC.children[1].child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[1].child.childB).to.equal(divC.children[1]);
sandBox = Dom(sandbox);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
sandBox.append(divA);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
expect(sandBox.childf.divA).to.equal(divA);
expect(sandBox.child.childA).to.equal(divA.children[0]);
expect(sandBox.child.childB_2).to.equal(divA.children[1].children[1]);
expect(sandBox.child.divA).to.equal(divA);
newChild = Dom.div({
ref: 'newChild'
});
newChildChild = Dom.div({
ref: 'newChildChild'
});
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChildChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newChildChild.appendTo(newChild);
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChild.childf.newChildChild).to.equal(newChildChild);
expect(newChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newParent = Dom.div({
ref: 'newParent'
});
newChild.appendTo(newParent);
return expect(newParent.child.newChildChild).to.equal(newChildChild);
});
test("Index", function () {
var childA, childB, childC, childD, childE, childF, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.div());
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(3);
expect(childF.index).to.equal(5);
childC.detach();
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(2);
expect(childF.index).to.equal(4);
return expect(childC.index).to.equal(null);
});
test("Index (by type)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.text(), childG = Dom.div());
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childC.detach();
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childA.detach();
expect(childB.indexType).to.equal(0);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(1);
expect(childA.indexType).to.equal(null);
return expect(childC.indexType).to.equal(null);
});
test("Index (by ref)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div({
ref: 'abc'
}), childB = Dom.div({
ref: 'abc'
}), childC = Dom.span({
ref: 'def'
}), childD = Dom.text({
ref: 'abc'
}), childE = Dom.span({
ref: 'abc'
}), childF = Dom.text({
ref: 'def'
}), childG = Dom.div({
ref: 'abc'
}));
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(1);
expect(childG.indexRef).to.equal(4);
childC.detach();
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(4);
childA.detach();
expect(childB.indexRef).to.equal(0);
expect(childD.indexRef).to.equal(1);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(3);
expect(childA.indexRef).to.equal(null);
return expect(childC.indexRef).to.equal(null);
});
test("Query", function () {
var div, sandBox;
div = Dom.template(['div', {
class: 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
class: 'childA',
style: {
color: 'pink'
}
}, ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_1'
}], ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.query('.childA')).to.equal(div.children[0]);
expect(div.query('.childB')).to.equal(div.children[1]);
expect(div.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(div.query('.childA_1')).to.equal(div.children[0].children[0]);
expect(div.query('.childA_2')).to.equal(div.children[0].children[3]);
expect(sandBox.query('.div-one')).to.equal(div);
expect(sandBox.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(sandBox.query('div[name="abc123"]')).to.equal(div);
return expect(sandBox.query('span[name="abc123"]')).to.equal(void 0);
});
test("QueryAll", function () {
var div, sandBox;
div = Dom.template(['div', {
class: 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
class: 'childA',
style: {
color: 'pink'
}
}, ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_1'
}], ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.queryAll('.childA').elements).to.eql([div.children[0]]);
expect(div.queryAll('.childB').elements).to.eql([div.children[1], div.children[2]]);
expect(div.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(div.queryAll('.childA_1').elements).to.eql([div.children[0].children[0], div.children[0].children[1], div.children[0].children[2]]);
expect(div.queryAll('.childA_2').elements).to.eql([div.children[0].children[3]]);
expect(sandBox.queryAll('.div-one').elements).to.eql([div]);
expect(sandBox.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(sandBox.queryAll('div[name="abc123"]').elements).to.eql([div]);
expect(sandBox.queryAll('span[name="abc123"]').elements).to.eql([]);
expect(div.text).to.equal('');
expect(sandBox.queryAll('.childB_1').text('abc123').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
return expect(div.text).to.equal('abc123abc123');
});
return test("Query/QueryAll shortcuts", function () {
var allA, allB, el, i, index, len;
expect(Dom.query('head')).to.equal(Dom(document).query('head'));
expect(Dom.query('body')).to.equal(Dom(document).query('body'));
allA = Dom.queryAll('section').elements;
allB = Dom(document).queryAll('section').elements;
expect(allA.length).to.equal(allB.length);
for ((index = i = 0, len = allA.length); i < len; index = ++i) {
el = allA[index];
expect(allA[index]).to.equal(allB[index]);
}
});
});
suite("Manipulation", function () {
test(".append()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.appendTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(A, C);
});
test(".prepend()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.prepend(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.prependTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(C, A);
});
test(".after()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.after(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(B, A);
C.insertAfter(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(B, C, A);
});
test(".before()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.before(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(A, B);
C.insertBefore(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(A, C, B);
});
test(".detach()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.detach();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(2);
expect(div.state('happy')).to.be.true;
return expect(div.state('relaxed')).to.be.true;
});
test(".remove()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.remove();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be.false;
return expect(div.state('relaxed')).to.be.false;
});
test(".empty()", function () {
var A, B, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
A.state('happy', true);
B.state('happy', true);
checkChildStructure(Main)(A, B);
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
Main.empty();
checkChildStructure(Main)();
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
expect(A.state('happy')).to.be.true;
return expect(B.state('happy')).to.be.true;
});
test(".wrap()", function () {
var A, B, C, Main, wrapA, wrapB, wrapC;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div();
wrapA = Dom.section();
wrapB = Dom.section();
wrapC = Dom.section();
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
wrapA.state('relaxed', true);
wrapB.state('relaxed', true);
wrapC.state('relaxed', true);
checkChildStructure(Main)(A, B);
A.wrap(wrapA);
checkChildStructure(Main)(wrapA, B);
checkChildStructure(wrapA)(A);
B.wrap(wrapB);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A);
checkChildStructure(wrapB)(B);
B.wrap(wrapA);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)();
wrapC.appendTo(wrapB);
C.wrap(wrapC);
C.wrap();
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
C.wrap(C);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
expect(C.state('happy')).to.be.true;
expect(wrapA.state('relaxed')).to.be.true;
expect(wrapB.state('relaxed')).to.be.true;
return expect(wrapC.state('relaxed')).to.be.true;
});
test(".unwrap()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().prependTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(C);
E = Dom.div().appendTo(D);
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
D.state('happy', true);
E.state('happy', true);
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(D);
checkChildStructure(D)(E);
E.unwrap();
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
B.unwrap();
checkChildStructure(Main)(B, C);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
E.unwrap();
checkChildStructure(Main)(B, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.insertAfter(B);
C.appendTo(A);
D.appendTo(A);
checkChildStructure(Main)(B, A, E);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
D.unwrap();
checkChildStructure(Main)(B, C, D, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".replace()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(A);
E = Dom.div().appendTo(D);
A.replace();
E.replace();
checkChildStructure(Main)(A, B);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)(E);
C.replace(E).appendTo(B);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E, D);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
D.replace(E);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(C);
checkChildStructure(Main)(A, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.replace(D);
checkChildStructure(Main)(D, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(D);
checkChildStructure(Main)(C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".clone()", function () {
var A, B, childA, childB, emitCount, opts, sandBox;
emitCount = 0;
sandBox = Dom(sandbox);
opts = {
style: {
$base: {
width: '34px'
},
$happy: {
height: '99px'
},
$relaxed: {
opacity: '0.5'
}
}
};
A = Dom.div(opts, 'Some Inner Text').appendTo(sandbox);
A.state('happy', true);
A.on('privateEvent', function () {
return emitCount++;
});
childA = Dom.div().appendTo(A);
childB = Dom.span().appendTo(A);
B = A.clone();
A.state('relaxed', true);
A.emit('privateEvent');
expect(emitCount).to.equal(1);
expect(A.parent).to.equal(sandBox);
expect(A.css('width')).to.equal('34px');
expect(A.css('height')).to.equal('99px');
expect(A.css('opacity')).to.equal('0.5');
expect(A.siblings.length).to.equal(0);
expect(A.children.length).to.equal(3);
expect(A.children[0].el.textContent).to.equal('Some Inner Text');
expect(A.children[1]).to.equal(childA);
expect(A.children[2]).to.equal(childB);
expect(B).not.to.equal(A);
expect(B.parent).to.equal(void 0);
sandBox.append(B);
expect(B.parent).to.equal(sandBox);
expect(B.css('width')).to.equal('34px');
expect(B.css('height')).to.equal('99px');
expect(B.css('opacity')).to.equal('1');
expect(B.siblings.length).to.equal(1);
expect(B.children.length).to.equal(3);
expect(B.children[0].el.textContent).to.equal('Some Inner Text');
expect(B.children[0]).not.to.equal(A.children[0]);
expect(B.children[1]).not.to.equal(childA);
expect(B.children[2]).not.to.equal(childB);
expect(B.state('happy')).to.be.true;
expect(B.state('relaxed')).to.be.false;
expect(emitCount).to.equal(1);
B.emit('privateEvent');
expect(emitCount).to.equal(2);
A.off();
A.emit('privateEvent');
expect(emitCount).to.equal(2);
B.emit('privateEvent');
return expect(emitCount).to.equal(3);
});
test(".prop() - element property getter/setter", function () {
var div;
div = Dom.div();
expect(div.prop('myProp')).to.equal(void 0);
expect(div.prop('myProp', 192)).to.equal(div);
expect(div.prop('myProp')).to.equal(192);
expect(div.prop('myProp', '192')).to.equal(div);
expect(div.prop('myProp')).to.equal('192');
expect(div.prop('anotherProp', [1, 2, 3])).to.equal(div);
expect(div.prop('anotherProp')).to.eql([1, 2, 3]);
expect(div.el.myProp).to.equal('192');
expect(div.el.anotherProp).to.eql([1, 2, 3]);
div.el.lastProp = 9999;
expect(div.el.lastProp).to.equal(9999);
expect(div.prop('lastProp')).to.equal(9999);
expect(Object.keys(div.el)).not.to.contain('promiseIsLast');
div.prop('promiseIsLast', 'over9k');
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', void 0);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', null);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop({
abc: 123,
def: 456
});
expect(div.el.abc).to.equal(123);
return expect(div.el.def).to.equal(456);
});
test(".attr() - element attribute getter/setter", function () {
var div;
div = Dom.div();
expect(div.attr('myAttr')).to.equal(null);
expect(div.attr('myAttr', 192)).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('myAttr', '192')).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('anotherAttr', [1, 2, 3])).to.equal(div);
expect(div.attr('anotherAttr')).to.equal('1,2,3');
expect(div.el.getAttribute('myAttr')).to.equal('192');
expect(div.el.getAttribute('anotherAttr')).to.eql('1,2,3');
div.el.setAttribute('lastAttr', 9999);
expect(div.el.getAttribute('lastAttr')).to.equal('9999');
expect(div.attr('lastAttr')).to.equal('9999');
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr('promiseIsLast', 'over9k');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast', null);
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr({
abc: 123,
def: 456
});
expect(div.el.getAttribute('abc')).to.equal('123');
expect(div.el.getAttribute('def')).to.equal('456');
div.attr({
abc: 123,
def: null
});
expect(div.el.getAttribute('abc')).to.equal('123');
return expect(div.el.getAttribute('def')).to.equal(null);
});
test(".html - innerHTML getter/setter", function () {
var div;
div = Dom.div(null, Dom.div(), 'Some text', Dom.span(), Dom.div());
expect(div.children.length).to.equal(4);
expect(div.html).to.equal(div.el.innerHTML);
expect(div.children.length).to.equal(4);
div.html = '<section ID="test"></section>';
expect(div.html).to.equal('<section id="test"></section>');
expect(div.children.length).to.equal(1);
expect(div.children[0].el.id).to.equal('test');
return expect(div.children[0].el.nodeName.toLowerCase()).to.equal('section');
});
test(".text - textContent getter/setter", function () {
var div;
div = Dom.div(null, 'Some text', Dom.span(null, 'Inner Text'));
expect(div.children.length).to.equal(2);
expect(div.text).to.equal(div.el.textContent);
expect(div.text).to.equal('Some textInner Text');
expect(div.children.length).to.equal(2);
div.text = 'newText';
expect(div.text).to.equal('newText');
expect(div.el.textContent).to.equal('newText');
expect(div.children.length).to.equal(1);
return expect(div.children[0].el.nodeType).to.equal(3);
});
test(".addClass", function () {
var div;
div = Dom.div({
class: 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.raw.className = div.raw.className.replace('new-selector', ' ');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector  ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('.period');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('period');
return expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector period');
});
test(".removeClass", function () {
var div;
div = Dom.div({
class: 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('.period');
return expect(div.raw.className).to.equal('anotherSelector annoying-_-selector');
});
test(".toggleClass", function () {
var div;
div = Dom.div({
class: 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector');
div.toggleClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector period');
div.toggleClass('.period');
expect(div.raw.className).to.equal('anotherSelector annoying-_-selector some-selector period');
div.toggleClass('annoying-_-selector');
return expect(div.raw.className).to.equal('anotherSelector some-selector period');
});
test(".setRef", function () {
var el;
el = DOM.div({
ref: 'name1'
});
expect(el.ref).to.equal('name1');
expect(el.options.ref).to.equal('name1');
expect(el.attr('data-ref')).to.equal('name1');
el.setRef('name2');
expect(el.ref).to.equal('name2');
expect(el.options.ref).to.equal('name2');
return expect(el.attr('data-ref')).to.equal('name2');
});
return test("Appending/prepending elements to a text node should do nothing", function () {
var div, text;
text = Dom.text('abc123');
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.append(Dom.text('def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.prepend(Dom.div(null, 'def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
div = Dom.div(null, '456');
div.appendTo(text);
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
return expect(div.parent).to.equal(void 0);
});
});
suite("Batch", function () {
test("Dom.batch() takes an iterable containing an array of elements or QuickDom elements and reveals the QuickElement API which will be applied for each element", function () {
var A, B, C, div, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
checkChildStructure(sandBox)();
checkChildStructure(div)(A, B, C);
Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text');
checkChildStructure(sandBox)(A, B, C);
checkChildStructure(div)();
expect(getComputedStyle(A.el).opacity).to.equal('0.5');
expect(getComputedStyle(C.el).opacity).to.equal('0.5');
expect(getComputedStyle(B.el).height).to.equal('30px');
expect(A.children.length).to.equal(1);
expect(B.children.length).to.equal(1);
expect(C.children.length).to.equal(1);
return expect(B.children[0].el.textContent).to.equal('Some Inner Text');
});
test("If a truthy value is passed as the 2nd arg of Dom.batch(), an array will be returned for the first method invoked containing the result for each element provided", function () {
var A, B, C, batch1, batch2, sandBox;
sandBox = Dom(sandbox);
A = Dom.div().appendTo(sandBox);
B = Dom.section().appendTo(sandBox);
C = Dom.div().appendTo(sandBox);
batch1 = Dom.batch([A, B, C]);
batch2 = Dom.batch([A, B, C], true);
expect(batch1.style('width')).to.equal(batch1);
expect(batch1.style('width', 47)).to.equal(batch1);
expect(batch2.style('width')).to.eql(['47px', '47px', '47px']);
expect(batch2.style('width', 33)).to.eql([A, B, C]);
return expect(batch2.style('width')).to.eql(['33px', '33px', '33px']);
});
test("If the .return() method is invoked on the batch instance, it will return the result set from the last method invocation", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text').style('opacity').return();
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('width').return()).to.eql(['38px', '38px', '38px']);
});
test("If the .return() method is invoked with a truthy argument, it will cause the next method invocation to return the results of the invocation for each element provided", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text').return(true).style('opacity');
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('height', '28px').return(true).css('width')).to.eql(['38px', '38px', '38px']);
});
test("Invoking the .reverse() method on the batch instance will reverse the elements array in the batch and thus the execution order", function () {
var A, B, C, arr;
A = Dom.div(null, 'AAA').appendTo(sandbox);
B = Dom.div(null, 'BBB').appendTo(sandbox);
C = Dom.div(null, 'CCC').appendTo(sandbox);
arr = [A, B, C];
expect(Dom.batch(arr).elements).not.to.equal(arr);
expect(Dom.batch(arr).elements).to.eql([A, B, C]);
expect(Dom.batch(arr).reverse().elements).to.eql([C, B, A]);
expect(Dom.batch(arr, 1).text()).to.eql(['AAA', 'BBB', 'CCC']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
return expect(Dom.batch(arr, 1).reverse().reverse().text()).to.eql(['AAA', 'BBB', 'CCC']);
});
return test("Batch.text/.html are methods instead of getters/setters", function () {
var batch, divA, divB;
divA = Dom.div(null, 'The divA');
divB = Dom.div(null, 'The divB');
batch = Dom.batch([divA, divB], true);
expect(batch.html()).to.eql(['The divA', 'The divB']);
expect(batch.text()).to.eql(['The divA', 'The divB']);
batch.html('<span>The div</span>');
expect(batch.html()).to.eql(['<span>The div</span>', '<span>The div</span>']);
expect(batch.text()).to.eql(['The div', 'The div']);
batch.text('THE DIV');
expect(batch.html()).to.eql(['THE DIV', 'THE DIV']);
return expect(batch.text()).to.eql(['THE DIV', 'THE DIV']);
});
});
suite("Templates", function () {
test("A reusable template can be generated via QuickDom.template()", function () {
var template;
template = Dom.template(['span', {
id: 'theSpan'
}]);
expect(typeof template).to.equal('object');
expect(template.type).to.equal('span');
expect(template.options).to.eql({
id: 'theSpan'
});
return expect(template.children).to.eql([]);
});
test("Templates can be turned into QuickDom instances via template.spawn() or by passing as arg to QuickDom", function () {
var spawnA, spawnB, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
spawnA = template.spawn();
spawnA.state('happy', true);
spawnB = Dom(template);
expect(spawnA.el).to.be.instanceOf(HTMLDivElement);
expect(spawnB.el).to.be.instanceOf(HTMLDivElement);
expect(spawnA).not.to.equal(spawnB);
expect(spawnA.el).not.to.equal(spawnB.el);
expect(spawnA.state('happy')).to.be.true;
expect(spawnB.state('happy')).to.be.false;
expect(spawnA.el.textContent).to.equal('Some Inner Text');
expect(spawnB.el.textContent).to.equal('Some Inner Text');
return expect(spawnA.el.className).to.equal('some-div');
});
test("Templates can be created from QuickElement instances", function () {
var section, sectionTemplate, templateSpawn;
section = Dom.section({
className: 'singleSection'
}, 'Some Inner Text');
section.state('happy', true);
sectionTemplate = section.toTemplate();
templateSpawn = sectionTemplate.spawn();
expect(sectionTemplate).not.to.equal(section);
expect(templateSpawn.el).not.to.equal(section.el);
expect(templateSpawn.el.className).to.equal('singleSection');
expect(templateSpawn.text).to.equal('Some Inner Text');
expect(section.state('happy')).to.be.true;
return expect(templateSpawn.state('happy')).to.be.false;
});
test("Templates can be created from DOM Elements", function () {
var sectionEl, sectionTemplate, templateSpawn;
sectionEl = document.createElement('section');
sectionEl.className = 'singleSection';
sectionEl.appendChild(document.createTextNode('Some Inner Text'));
sectionTemplate = Dom.template(sectionEl);
templateSpawn = sectionTemplate.spawn();
expect(templateSpawn.el).not.to.equal(sectionEl);
expect(templateSpawn.el.className).to.equal('singleSection');
return expect(templateSpawn.text).to.equal('Some Inner Text');
});
test("Templates can be extended via template.extend", function () {
var spawn, spawnA, spawnB, spawnC, template, templateCopyA, templateCopyB, templateCopyC;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
templateCopyA = template.extend({
type: 'span',
options: {
className: 'some-span'
},
children: []
});
templateCopyB = template.extend({
options: {
id: 'theMainDiv'
},
children: ['The Other Inner Text']
});
templateCopyC = template.extend(['section', {
className: 'some-section'
}, ['div', null, 'Very '], ['div', null, ['span', {
style: {
fontWeight: 500
}
}, 'Nested '], 'Inner Text']]);
expect(templateCopyA).not.to.equal(template);
expect(templateCopyB).not.to.equal(template);
spawn = template.spawn();
spawnA = templateCopyA.spawn();
spawnB = templateCopyB.spawn();
spawnC = templateCopyC.spawn();
expect(spawn.el.nodeName.toLowerCase()).to.equal('div');
expect(spawn.el.className).to.equal('some-div');
expect(spawn.el.id).to.equal('');
expect(spawn.text).to.equal('Some Inner Text');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('span');
expect(spawnA.el.className).to.equal('some-span');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.equal('some-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('The Other Inner Text');
expect(spawnC.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnC.el.className).to.equal('some-section');
expect(spawnC.el.id).to.equal('');
return expect(spawnC.text).to.equal('Very Nested Inner Text');
});
test("Templates can be spawned via extended config by passing a new config object to template.spawn()", function () {
var spawnA, spawnB, spawnRaw, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text', ['strong', {
className: 'highlighted',
style: {
opacity: 0.9
}
}, ' - Bolded Text']]);
spawnRaw = template.spawn().appendTo(sandbox);
spawnA = template.spawn({
type: 'section',
options: {
className: 'some-section',
style: {
opacity: 0.7
}
}
}).appendTo(sandbox);
spawnB = template.spawn({
options: {
className: 'main-div',
id: 'theMainDiv',
style: {
opacity: 0.5
}
},
children: [{
type: 'span',
children: [{
type: 'text',
options: {
text: 'Main Inner Text'
}
}]
}, {
type: 'b',
options: {
className: 'super-highlighted',
style: {
opacity: '0.2'
}
},
children: [{
options: {
text: ' - Very Bolded Text'
}
}]
}, {
type: 'text',
options: {
text: ' + Other Text'
}
}]
}).appendTo(sandbox);
expect(spawnRaw.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnRaw.el.className).to.equal('some-div');
expect(spawnRaw.el.id).to.equal('');
expect(spawnRaw.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnRaw.el).to.have.style('opacity', '1');
expect(spawnRaw.el.childNodes.length).to.equal(2);
expect(spawnRaw.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnRaw.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnRaw.el.childNodes[1].className).to.include('highlighted');
expect(spawnRaw.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnA.el.className).to.include('some-section');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnA.el).to.have.style('opacity', '0.7');
expect(spawnA.el.childNodes.length).to.equal(2);
expect(spawnA.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnA.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnA.el.childNodes[1].className).to.include('highlighted');
expect(spawnA.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.include('main-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('Main Inner Text - Very Bolded Text + Other Text');
expect(spawnB.el).to.have.style('opacity', '0.5');
expect(spawnB.el.childNodes.length).to.equal(3);
expect(spawnB.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(spawnB.el.childNodes[0].childNodes.length).to.equal(1);
expect(spawnB.el.childNodes[1].nodeName.toLowerCase()).to.equal('b');
expect(spawnB.el.childNodes[1].className).to.include('super-highlighted');
return expect(spawnB.el.childNodes[1]).to.have.style('opacity', '0.2');
});
test("Template.extend/spawn() can accept a template tree array", function () {
var cloneA, cloneB, cloneC, spawn, template;
template = Dom.template(['div', {
style: {
'opacity': 0.5
}
}, ['span', null, 'text of span'], ['div', null, 'text of div']]);
cloneA = template.extend(['section', {
style: {
'opacity': 0.8
}
}]);
cloneB = template.extend(['span', null, ['div']]);
cloneC = template.extend(['section', {
className: 'the-section',
style: {
color: 'blue'
}
}, ['section', null, 'text of subsection'], 'just a text node']);
spawn = template.spawn(['span', {
style: {
'width': 190,
'opacity': 0.4
}
}, 'so nice']).appendTo(sandbox);
expect(template.type).to.equal('div');
expect(template.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(template.children.length).to.equal(2);
expect(template.children[0].type).to.equal('span');
expect(template.children[0].children.length).to.equal(1);
expect(template.children[0].children[0].options.text).to.equal('text of span');
expect(template.children[1].type).to.equal('div');
expect(template.children[1].children.length).to.equal(1);
expect(template.children[1].children[0].options.text).to.equal('text of div');
expect(cloneA.type).to.equal('section');
expect(cloneA.options).to.eql({
style: {
'opacity': 0.8
}
});
expect(cloneA.children.length).to.equal(2);
expect(cloneA.children[0].type).to.equal('span');
expect(cloneA.children[0].children.length).to.equal(1);
expect(cloneA.children[0].children[0].options.text).to.equal('text of span');
expect(cloneA.children[1].type).to.equal('div');
expect(cloneA.children[1].children.length).to.equal(1);
expect(cloneA.children[1].children[0].options.text).to.equal('text of div');
expect(cloneB.type).to.equal('span');
expect(cloneB.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(cloneB.children.length).to.equal(2);
expect(cloneB.children[0].type).to.equal('div');
expect(cloneB.children[0].children.length).to.equal(1);
expect(cloneB.children[0].children[0].options.text).to.equal('text of span');
expect(cloneB.children[1].type).to.equal('div');
expect(cloneB.children[1].children.length).to.equal(1);
expect(cloneB.children[1].children[0].options.text).to.equal('text of div');
expect(cloneC.type).to.equal('section');
expect(cloneC.options).to.eql({
className: 'the-section',
style: {
'opacity': 0.5,
'color': 'blue'
}
});
expect(cloneC.children.length).to.equal(2);
expect(cloneC.children[0].type).to.equal('section');
expect(cloneC.children[0].children.length).to.equal(1);
expect(cloneC.children[0].children[0].options.text).to.equal('text of subsection');
expect(cloneC.children[1].type).to.equal('text');
expect(cloneC.children[1].options.text).to.equal('just a text node');
spawn.style('display', 'block');
expect(spawn.el.nodeName.toLowerCase()).to.equal('span');
expect(spawn.el).to.have.style('opacity', '0.4');
expect(spawn.el).to.have.style('width', '190px');
expect(spawn.el.childNodes.length).to.equal(2);
expect(spawn.el.childNodes[0].nodeType).to.equal(3);
expect(spawn.el.childNodes[0].textContent).to.equal('so nice');
expect(spawn.el.childNodes[1].nodeName.toLowerCase()).to.equal('div');
return expect(spawn.el.childNodes[1].textContent).to.equal('text of div');
});
test("Template.extend/spawn() can accept other template instances as children which will replace existing children", function () {
var childA, childB, childC, spawnedA, spawnedB, spawnedC, template, templateCopy;
template = Dom.template(['div', null, ['span', {
style: {
opacity: 0.5
}
}], 'original text']);
childA = Dom.template(['div', {
style: {
fontFamily: 'pink'
}
}]);
childB = Dom.template('replaced text');
childC = Dom.template(['section']);
templateCopy = template.extend(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]);
spawnedA = template.spawn().appendTo(sandbox);
spawnedB = templateCopy.spawn().appendTo(sandbox);
spawnedC = template.spawn(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]).appendTo(sandbox);
expect(spawnedA.type).to.equal('div');
expect(spawnedA.children.length).to.equal(2);
expect(spawnedA.children[0].type).to.equal('span');
expect(spawnedA.children[0].raw).to.have.style('opacity', '0.5');
expect(spawnedA.children[0].raw).to.have.style('fontFamily', '');
expect(spawnedA.children[1].type).to.equal('text');
expect(spawnedA.text).to.equal('original text');
expect(spawnedB.type).to.equal('span');
expect(spawnedB.children.length).to.equal(3);
expect(spawnedB.children[0].type).to.equal('div');
expect(spawnedB.children[0].raw).to.have.style('opacity', '');
expect(spawnedB.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedB.children[1].type).to.equal('text');
expect(spawnedB.text).to.equal('replaced text');
expect(spawnedB.children[2].type).to.equal('section');
expect(spawnedB.raw).to.have.style('fontSize', '77px');
expect(spawnedC.type).to.equal('span');
expect(spawnedC.children.length).to.equal(3);
expect(spawnedC.children[0].type).to.equal('div');
expect(spawnedC.children[0].raw).to.have.style('opacity', '');
expect(spawnedC.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedC.children[1].type).to.equal('text');
expect(spawnedC.text).to.equal('replaced text');
expect(spawnedC.children[2].type).to.equal('section');
return expect(spawnedC.raw).to.have.style('fontSize', '77px');
});
test("Template.extend/spawn() will consider the passed object as the options object if it doesn't contain template-related props", function () {
var template;
template = DOM.template(['div', {
defaults: {
text: 'default'
},
computers: {
text: function (text) {
return this.text = text;
}
}
}, ['span', {
ref: 'theSpan'
}]]);
expect(template.options.style).to.equal(void 0);
expect(template.options.label).to.equal(void 0);
expect(template.extend({
options: {
label: 'abc123'
}
}).options.label).to.equal('abc123');
expect(template.extend({
label: 'def456'
}).options.label).to.equal('def456');
expect(template.extend({
style: 'def456'
}).options.style).to.equal('def456');
expect(template.extend({
style: 'def456',
type: 'section'
}).options.style).to.equal(void 0);
expect(template.extend({
children: {
theSpan: {
style: 'ghi789'
}
}
}).child.theSpan.options.style).to.equal('ghi789');
expect(template.extend({
children: [{
defaults: 'ghi789'
}]
}).child.theSpan.options.defaults).to.equal('ghi789');
expect(template.spawn({
children: {
theSpan: {
className: 'GHI789'
}
}
}).child.theSpan.raw.className).to.equal('GHI789');
expect(template.spawn().text).to.equal('default');
return expect(template.spawn({
defaults: {
text: 'diff'
}
}).text).to.equal('diff');
});
test("Templates can have other templates as their children", function () {
var headerTemplate, headerTemplateClone, section, sectionTemplate;
headerTemplate = Dom.template(['header', {
style: {
'height': '200px'
}
}, ['span', {
style: {
'textAlign': 'center'
}
}, 'This is bolded text'], ' while this is not']);
headerTemplateClone = Dom.template(headerTemplate);
sectionTemplate = Dom.template(['section', null, headerTemplate]);
section = sectionTemplate.spawn().appendTo(sandbox);
expect(headerTemplateClone).to.equal(headerTemplate);
expect(sectionTemplate.children.length).to.equal(1);
expect(sectionTemplate.children[0]).to.equal(headerTemplate);
expect(sectionTemplate.children[0].children.length).to.equal(2);
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
expect(section.text).to.equal('This is bolded text while this is not');
return expect(section.children[0].children[0].style('textAlign')).to.equal('center');
});
test("A global options object can be passed as the 2nd arg to template.extend/spawn() which will be applied to all templates, spawns, & their children", function () {
var dynamicHeightStyle, headerTemplate, obj, section, sectionTemplate;
obj = {
myHeight: '150px'
};
obj.obj = obj;
dynamicHeightStyle = {
'height': function (related) {
expect(related).to.equal(obj);
return related.myHeight;
}
};
headerTemplate = Dom.template(['header', {
style: {
'width': '23px'
}
}, ['div', {
style: {
'width': '23px'
}
}, 'This is bolded text'], ' while this is not']);
sectionTemplate = Dom.template(['section', {
style: {
'width': '23px'
}
}, headerTemplate]);
section = sectionTemplate.spawn({
options: {
related: window
}
}, {
related: obj,
style: dynamicHeightStyle
}).appendTo(sandbox);
expect(section.raw.style.height).to.equal('150px');
expect(section.children[0].raw.style.height).to.equal('150px');
expect(section.children[0].children[0].raw.style.height).to.equal('150px');
expect(section.raw.style.width).to.equal('');
expect(section.children[0].raw.style.width).to.equal('');
expect(section.children[0].children[0].raw.style.width).to.equal('');
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
return expect(section.text).to.equal('This is bolded text while this is not');
});
test("Template children can be navigated by ref using the .child property", function () {
var rendered, template;
template = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
expect(typeof template.child).to.equal('object');
expect(Object.keys(template.child).length).to.equal(6);
expect(template.child.divA).to.equal(template);
expect(template.child.childA.type).to.equal('div');
expect(template.child.childA).to.equal(template.children[0]);
expect(template.child.childA_1).to.equal(template.children[0].children[0]);
expect(template.child.childA_2).to.equal(template.children[0].children[1]);
expect(template.child.childB_1).to.equal(template.children[1].children[0]);
expect(template.child.childB_2).to.equal(template.children[1].children[1]);
rendered = template.spawn();
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
return expect(rendered.text).to.equal('The Text');
});
test("Template's children can be extend/spawned with a {ref:newChild} map instead of a positional array", function () {
var rendered, templateCopy, templateCopy2, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}], {
value: 'theValue'
});
templateCopy2 = templateMain.extend({
children: {
childA: {
children: {
newChild: ['div']
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}
});
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(6);
expect(Object.keys(templateCopy.child).length).to.equal(8);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA_1).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[1]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[1].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.childD).to.equal(templateCopy.children[2]);
rendered = templateCopy.spawn().appendTo(sandbox);
expect(Object.keys(rendered.child).length).to.equal(8);
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
expect(rendered.child.childA.raw).to.have.style('display', 'inline-block');
expect(rendered.child.CHILDa_2.prop('href')).to.contain('http://google.com');
expect(rendered.child.childB_1.prop('value')).to.equal('theValue');
return expect(rendered.child.childD.attr('data-ref')).to.equal('childD');
});
test("Templates can be passed as replacement/new children in {ref:newChild} extension maps", function () {
var childA, childB, childC, templateCopy, templateMain;
childA = Dom.template(['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]]);
childB = Dom.template(['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]);
childC = Dom.template(['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]);
templateMain = Dom.template(['div', {
id: 'divA'
}, childA, childB]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form'
},
childB: childB.extend({
ref: 'ChildB'
}),
childC: childC.extend({
ref: 'ChildC'
})
}], {
value: 'theValue'
});
expect(Object.keys(templateMain.child).length).to.equal(7);
expect(Object.keys(templateCopy.child).length).to.equal(10);
expect(templateMain.children.length).to.equal(2);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(2);
expect(templateCopy.child.ChildB).to.equal(templateCopy.children[1]);
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateMain.child.childC).to.equal(void 0);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.ChildC).to.equal(templateCopy.children[2]);
expect(Object.keys(templateMain.spawn().child).length).to.equal(7);
return expect(Object.keys(templateCopy.spawn().child).length).to.equal(10);
});
test("ref-children maps shouldn't be modified by the template extender", function () {
var config, spawnA, spawnB, spawnC, spawnD, templateA, templateB, templateC, templateD;
config = {
children: {
childA_1: {
type: 'div',
options: {
style: {
display: 'none'
}
}
}
}
};
templateA = Dom.template(['div', {
ref: 'divA'
}, ['div', {
ref: 'childA'
}, ['span', {
ref: 'childA_1'
}]]]);
templateA.child.childA_1;
templateB = templateA.extend();
templateC = templateA.extend(config);
templateD = templateA.extend(config);
spawnA = templateA.spawn().appendTo(sandbox);
spawnB = templateB.spawn().appendTo(sandbox);
spawnC = templateC.spawn().appendTo(sandbox);
spawnD = templateD.spawn().appendTo(sandbox);
expect(spawnA.child.childA_1.type).to.equal('span');
expect(spawnA.child.childA_1.style('display')).to.equal('inline');
expect(spawnB.child.childA_1.type).to.equal('span');
expect(spawnB.child.childA_1.style('display')).to.equal('inline');
expect(spawnC.child.childA_1.type).to.equal('div');
expect(spawnC.child.childA_1.style('display')).to.equal('none');
expect(spawnD.child.childA_1.type).to.equal('div');
return expect(spawnD.child.childA_1.style('display')).to.equal('none');
});
test("Null values in ref-children map will remove the child from the template", function () {
var templateCopy, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]], ['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_1: null,
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childB_1: null,
childC: null
}]);
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(10);
expect(Object.keys(templateCopy.child).length).to.equal(6);
expect(templateCopy.children.length).to.equal(2);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(1);
expect(templateMain.child.childA_1).to.equal(templateMain.child.childA_1);
expect(templateCopy.child.childA_1).to.equal(void 0);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[0].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(void 0);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[0]);
expect(templateMain.child.childB_1).to.equal(templateMain.children[1].children[0]);
expect(templateMain.child.childB_2).to.equal(templateMain.children[1].children[1]);
expect(templateMain.child.childC).to.equal(templateMain.children[2]);
return expect(templateCopy.child.childC).to.equal(void 0);
});
test("Null values in options object will delete keys during template extension", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
ref: 'theDiv',
computers: {
valueA: function () {
return 1;
},
valueB: function () {
return 2;
}
},
style: {
position: 'relative',
width: 100,
height: 100,
$active: {
width: 200,
height: 200
}
}
}]);
templateB = templateA.extend({
options: {
ref: null,
computers: {
valueA: null,
valueB: function () {
return 3;
}
},
style: {
height: null,
opacity: 1,
$active: {
width: null
}
}
}
});
spawnA = templateA.spawn();
spawnB = templateB.spawn();
expect(spawnA.ref).to.equal('theDiv');
expect(spawnB.ref).to.equal(void 0);
expect(typeof spawnA.options.computers.valueA).to.equal('function');
expect(typeof spawnB.options.computers.valueA).to.equal('undefined');
expect(typeof spawnA.options.computers.valueB).to.equal('function');
expect(typeof spawnB.options.computers.valueB).to.equal('function');
expect(spawnA.options.computers.valueB()).to.equal(2);
expect(spawnB.options.computers.valueB()).to.equal(3);
expect(spawnA.options.style.position).to.equal('relative');
expect(spawnB.options.style.position).to.equal('relative');
expect(spawnA.options.style.width).to.equal(100);
expect(spawnB.options.style.width).to.equal(100);
expect(spawnA.options.style.height).to.equal(100);
expect(spawnB.options.style.height).to.equal(void 0);
expect(spawnA.options.style.opacity).to.equal(void 0);
expect(spawnB.options.style.opacity).to.equal(1);
expect(spawnA.options.style.$active.width).to.equal(200);
expect(spawnB.options.style.$active.width).to.equal(void 0);
expect(spawnA.options.style.$active.height).to.equal(200);
return expect(spawnB.options.style.$active.height).to.equal(200);
});
test("When spawning elements the options object passed to the spawns should be a clone of the template's options", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
style: {
display: 'block'
}
}]);
templateB = Dom.template(['div', {
style: {
display: 'block'
}
}]);
spawnA = templateA.spawn({
ref: 'a'
});
spawnB = templateA.spawn();
expect(spawnA.options).not.to.equal(templateA.options);
expect(spawnA.options.style).not.to.equal(templateA.options.style);
expect(templateA.options.style.$base).to.equal(void 0);
expect(spawnB.options).not.to.equal(templateB.options);
expect(spawnB.options.style).not.to.equal(templateB.options.style);
return expect(templateB.options.style.$base).to.equal(void 0);
});
test("Templates will be spawned when appended to DOM elements", function () {
var div, template;
template = Dom.template(['span', {
ref: 'theSpan'
}, 'someText']);
div = Dom.div(null, 'label: ');
expect(div.children.length).to.equal(1);
expect(div.text).to.equal('label: ');
div.append(template);
expect(div.children.length).to.equal(2);
expect(div.text).to.equal('label: someText');
div.prepend(template);
expect(div.children.length).to.equal(3);
return expect(div.text).to.equal('someTextlabel: someText');
});
return suite("Data computers", function () {
test("Templates accept options.computers fn map which will be invoked with provided options.data upon spawning", function () {
var receivedData, template;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
expect(receivedData).to.equal(null);
template.spawn();
expect(receivedData).to.equal(null);
template.spawn({
data: {
'someLabel': 'works'
}
});
return expect(receivedData).to.equal('works');
});
test("Computers will be have the spawned QuickElement instance as their context", function () {
var context, instance, template;
context = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return context = this;
}
}
}]);
expect(context).to.equal(null);
template.spawn();
expect(context).to.equal(null);
instance = template.spawn({
data: {
'someLabel': void 0
}
});
return expect(context).to.equal(instance);
});
test("Values specified in options.defaults will be used if not specified in options.data upon spawning", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data.toLowerCase();
},
'second': function (data) {
return results.second = data.toLowerCase();
},
'third': function (data) {
return results.third = data.toLowerCase();
}
},
defaults: {
'first': 'firstValue here',
'third': 'thirdValue here'
}
}]);
expect(results).to.deep.equal({});
template.spawn();
expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'thirdvalue here'
});
instance = template.spawn({
data: {
'third': 'customvalue here'
}
});
return expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'customvalue here'
});
});
test("Values can be of any type", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
},
'fourth': function (data) {
return results.fourth = data;
},
'fifth': function (data) {
return results.fifth = data;
},
'sixth': function (data) {
return results.sixth = data;
}
},
defaults: {
'first': ['abc', '123'],
'third': {
a: 1,
b: 12
},
'sixth': 999
}
}]);
instance = template.spawn({
data: {
'second': null,
'fourth': 19,
'fifth': false,
'sixth': void 0
}
});
expect(results).to.deep.equal({
first: ['abc', '123'],
second: null,
third: {
a: 1,
b: 12
},
fourth: 19,
fifth: false,
sixth: void 0
});
return expect(Object.keys(results).length).to.equal(6);
});
test("Values in options.data that do not have a matching computer will be skipped", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
}
}
}]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
return expect(Object.keys(results).length).to.equal(3);
});
test("Computers in template children will receive the parent's options.data", function () {
var instance, results, template;
results = {
parent: {},
childA: {},
childB: {},
childC: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
}
}, ['div', {
computers: {
'first': function (data) {
return results.childA.first = data;
},
'second': function (data) {
return results.childA.second = data;
},
'third': function (data) {
return results.childA.third = data;
}
}
}], ['div', null, ['div', {
computers: {
'first': function (data) {
return results.childB.first = data;
},
'fourth': function (data) {
return results.childB.fourth = data;
}
}
}], ['div', {
computers: {
'first': function (data) {
return results.childC.first = data;
},
'sixth': function (data) {
return results.childC.sixth = data;
}
}
}]]]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results.parent).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childA).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childB).to.deep.equal({
'first': 'first value',
'fourth': 'fourth value'
});
return expect(results.childC).to.deep.equal({
'first': 'first value'
});
});
test("Parent defaults will not be passed to children", function () {
var instance, results, template;
results = {
parent: {},
child: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
},
defaults: {
'second': 'second value',
'fourth': 'fourth value'
}
}, ['div', {
computers: {
'first': function (data) {
return results.child.first = data;
},
'second': function (data) {
return results.child.second = data;
},
'third': function (data) {
return results.child.third = data;
},
'fourth': function (data) {
return results.child.fourth = data;
}
},
defaults: {
'first': 'first value'
}
}]]);
instance = template.spawn({
data: {
'third': 'third value'
}
});
expect(results.parent).to.deep.equal({
'second': 'second value',
'third': 'third value'
});
return expect(results.child).to.deep.equal({
'first': 'first value',
'third': 'third value'
});
});
test("Defaults should only be applied once", function () {
var count, template;
count = {
parent: 0,
child: 0,
childChild: 0
};
template = Dom.template(['div', {
ref: 'parent',
computers: {
'first': function (data) {
return count.parent++;
}
},
defaults: {
'first': 'first value'
}
}, ['div', {
ref: 'child',
computers: {
'first': function (data) {
return count.parent++;
},
'second': function (data) {
return count.child++;
}
},
defaults: {
'second': 'second value'
}
}, ['div', {
ref: 'child',
computers: {
'fourth': function (data) {
return count.childChild++;
}
},
defaults: {
'fourth': 'fourth value'
}
}]]]);
template.spawn({
data: {
'third': 'third value'
}
});
expect(count).to.eql({
parent: 1,
child: 1,
childChild: 1
});
template.spawn();
return expect(count).to.eql({
parent: 2,
child: 2,
childChild: 2
});
});
test("Data/defaults should be applied even when parent doesn't have computers", function () {
var count, template;
count = 0;
template = Dom.template(['div', null, ['section', null, ['div', {
computers: {
'first': function (data) {
return count++;
}
},
defaults: {
'first': 'first value'
}
}]]]);
template.spawn({
data: {
'first': 'second value'
}
});
expect(count).to.equal(1);
template.spawn();
return expect(count).to.equal(2);
});
test("Data can be re-applied via .applyData(data)", function () {
var count, instance, results, template;
results = {};
count = {
a: 0,
b: 0,
c: 0,
d: 0,
e: 0,
f: 0
};
template = Dom.template(['div', {
computers: {
'a': function (data) {
results.a = data;
return count.a++;
},
'b': function (data) {
results.b = data;
return count.b++;
},
'c': function (data) {
results.c = data;
return count.c++;
},
'd': function (data) {
results.d = data;
return count.d++;
},
'e': function (data) {
results.e = data;
return count.e++;
},
'f': function (data) {
results.f = data;
return count.f++;
}
},
defaults: {
'a': 1,
'c': 3,
'f': 6
}
}]);
instance = template.spawn({
data: {
b: 2,
d: 4,
e: 5,
f: 6
}
});
expect(results).to.deep.equal({
a: 1,
b: 2,
c: 3,
d: 4,
e: 5,
f: 6
});
expect(count).to.deep.equal({
a: 1,
b: 1,
c: 1,
d: 1,
e: 1,
f: 1
});
instance.applyData({
a: 11,
b: 22,
d: 44,
e: 55
});
expect(results).to.deep.equal({
a: 11,
b: 22,
c: 3,
d: 44,
e: 55,
f: 6
});
return expect(count).to.deep.equal({
a: 2,
b: 2,
c: 2,
d: 2,
e: 2,
f: 2
});
});
test("The '_init' computer will be run by default on template spawn regardless of data", function () {
var count, template;
count = {};
template = Dom.template(['div', {
ref: 'divA',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}, ['div', {
ref: 'divB',
data: {
first: '1'
},
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}], ['div', {
ref: 'divC'
}, ['div', {
ref: 'divD'
}, ['div', {
ref: 'divE',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}]]]]);
expect(count).to.eql({});
template.spawn();
expect(count).to.eql({
divA: 1,
divB: 1,
divE: 1
});
template.spawn();
expect(count).to.eql({
divA: 2,
divB: 2,
divE: 2
});
template.child.divB.spawn({
data: {
second: '2'
}
});
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 2
});
template.child.divC.spawn();
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 3
});
template.child.divC.spawn();
return expect(count).to.eql({
divA: 2,
divB: 3,
divE: 4
});
});
test("The '_init' computer will be passed all of the data the template spawn receives", function () {
var expected, result, template;
result = {
divA: {},
divB: {}
};
template = Dom.template(['div', {
ref: 'divA',
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}, ['div', {
ref: 'divProxy'
}, ['div', {
ref: 'divB',
defaults: {
first: '1'
},
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}]]]);
expected = {
href: 'abc',
name: '123',
_init: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
};
expect(result).to.eql({
divA: {},
divB: {}
});
template.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
expect(result).to.eql({
divA: expected,
divB: expected
});
delete result.divA;
({
divB: null
});
template.child.divB.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
return expect(result).to.eql({
divB: expected
});
});
test("Data can be specified via options object", function () {
var receivedData, template, templateCopy;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
templateCopy = template.extend({
options: {
data: {
'someLabel': 'works'
}
}
});
template.spawn();
expect(receivedData).to.equal(null);
templateCopy.spawn();
expect(receivedData).to.equal('works');
template.spawn({
options: {
data: {
'someLabel': 'also works'
}
}
});
return expect(receivedData).to.equal('also works');
});
test("Data specified in children's options object will be merged with the parent's data", function () {
var receivedData, template, templateCopy;
receivedData = {
abc: null,
def: null
};
template = Dom.template(['div', null, ['span', {
data: {
abc: 123
},
computers: {
'abc': function (data) {
return receivedData.abc = data || 'nothing';
},
'def': function (data) {
return receivedData.def = data || 'nothing';
}
}
}]]);
templateCopy = template.extend({
options: {
data: {
def: 456
}
}
});
template.spawn();
expect(receivedData).to.eql({
abc: 123,
def: null
});
receivedData = {
abc: null,
def: null
};
templateCopy.spawn();
expect(receivedData).to.eql({
abc: 123,
def: 456
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
def: 789
}
}
});
expect(receivedData).to.eql({
abc: 123,
def: 789
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
abc: 789
}
}
});
return expect(receivedData).to.eql({
abc: 789,
def: null
});
});
test("Data won't be passed to children if options.passDataToChildren is false", function () {
var el1, el2, receivedData, template1, template2;
receivedData = {
parent: null,
child: null
};
template1 = DOM.template(['div', {
computers: {
abc: function (data) {
return receivedData.parent = data;
}
}
}, ['span', {
computers: {
abc: function (data) {
return receivedData.child = data;
}
}
}]]);
template2 = template1.extend({
passDataToChildren: false
});
expect(receivedData).to.eql({
parent: null,
child: null
});
el1 = template1.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: 123
});
receivedData = {
parent: null,
child: null
};
el2 = template2.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: null
});
receivedData = {
parent: null,
child: null
};
el1.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: 456
});
receivedData = {
parent: null,
child: null
};
el2.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: null
});
el2.lastChild.applyData({
abc: 789
});
return expect(receivedData).to.eql({
parent: 456,
child: 789
});
});
test("Data should be invoked for parents after invoked children", function () {
var computers, el, history, template;
history = [];
computers = {
_init: function () {
return history.push(this.ref);
},
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers,
id: 'parent'
}, ['div', {
computers,
id: 'child1'
}, ['div', {
computers,
id: 'child2'
}]], ['div', {
computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn();
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
return expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
});
return test("Computers will be invoked only one time per element if options.invokeComputersOnce is on", function () {
var computers, el, history, template;
history = [];
computers = {
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers,
id: 'parent',
invokeComputersOnce: true
}, ['div', {
computers,
id: 'child1'
}, ['div', {
computers,
id: 'child2',
invokeComputersOnce: true
}]], ['div', {
computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn({
data: {
abc: 123
}
});
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
expect(history).to.eql(['child1', 'child3']);
history.length = 0;
el.applyData({
abc: 456
});
return expect(history).to.eql(['child1', 'child3']);
});
});
});
return suite("Misc", function () {
test("QuickDom.isTemplate", function () {
expect(Dom.isTemplate(Dom.template(['div']))).to.be.true;
expect(Dom.isTemplate(Dom.div())).to.be.false;
expect(Dom.isTemplate(Dom.div()[0])).to.be.false;
expect(Dom.isTemplate({})).to.be.false;
expect(Dom.isTemplate('string')).to.be.false;
expect(Dom.isTemplate(5)).to.be.false;
expect(Dom.isTemplate(false)).to.be.false;
return expect(Dom.isTemplate(true)).to.be.false;
});
test("QuickDom.isQuickEl", function () {
expect(Dom.isQuickEl(Dom.template(['div']))).to.be.false;
expect(Dom.isQuickEl(Dom.div())).to.be.true;
expect(Dom.isQuickEl(Dom.text())).to.be.true;
expect(Dom.isQuickEl(Dom.div()[0])).to.be.false;
expect(Dom.isQuickEl({})).to.be.false;
expect(Dom.isQuickEl('string')).to.be.false;
expect(Dom.isQuickEl(5)).to.be.false;
expect(Dom.isQuickEl(false)).to.be.false;
return expect(Dom.isQuickEl(true)).to.be.false;
});
test("QuickDom.isEl", function () {
expect(Dom.isEl(Dom.template(['div']))).to.be.false;
expect(Dom.isEl(Dom.div())).to.be.false;
expect(Dom.isEl(Dom.text())).to.be.false;
expect(Dom.isEl(Dom.div()[0])).to.be.true;
expect(Dom.isEl(Dom.text()[0])).to.be.false;
expect(Dom.isEl({})).to.be.false;
expect(Dom.isEl('string')).to.be.false;
expect(Dom.isEl(5)).to.be.false;
expect(Dom.isEl(false)).to.be.false;
return expect(Dom.isEl(true)).to.be.false;
});
test("Stringification", function () {
var section, sectionCopy;
section = Dom(['section', {
id: 'theSection',
className: 'theSectionClass',
style: {
'position': 'relative',
'opacity': 0.5,
'fontSize': function () {
return '29px';
},
$happy: {
fontSize: '11px',
$relaxed: {
fontSize: '8px'
}
}
}
}, ['div', {
id: 'childA',
style: {
position: 'relative'
}
}, 'childA-innertext'], 'section-innertext', ['span', {
id: 'childB',
ref: 'childB-ref!',
style: {
position: 'absolute'
}
}, 'childB-innertext', ['text', {
text: 'childB-innertext 2'
}], ['a', {
url: 'https://google.com'
}]]]).appendTo(sandbox);
window.stringified = JSON.stringify(section, null, 2);
sectionCopy = Dom(JSON.parse(stringified)).appendTo(sandbox);
expect(sectionCopy.type).to.equal(section.type);
expect(sectionCopy.ref).to.equal(section.ref);
expect(sectionCopy.el.id).to.equal(section.el.id);
expect(sectionCopy.el.className).to.equal(section.el.className);
expect(sectionCopy.style('position')).to.equal(section.style('position'));
expect(sectionCopy.style('opacity')).to.equal(section.style('opacity'));
expect(sectionCopy.style('fontSize')).not.to.equal(section.style('fontSize'));
section.style('fontSize', null);
section.state('happy', true);
sectionCopy.state('happy', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
section.state('relaxed', true);
sectionCopy.state('relaxed', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
expect(sectionCopy.children.length).to.equal(section.children.length);
expect(Object.keys(sectionCopy.child).length).to.equal(Object.keys(section.child).length);
expect(sectionCopy.text).to.equal(section.text);
expect(sectionCopy.html).to.equal(section.html);
expect(sectionCopy.children[0].style('position')).to.equal(section.children[0].style('position'));
expect(sectionCopy.children[2].style('position')).to.equal(section.children[2].style('position'));
return expect(sectionCopy.children[2].ref).to.equal(section.children[2].ref);
});
test("Chaining", function () {
var chainResult, div, head;
div = Dom.div();
chainResult = div.state('abc', true).resetState().style().css('width', 12).attr('test', 123).prop('anotherTest', 123).updateStateStyles({
height: 50
}).updateStateTexts({
$base: 'abc'
}).append().appendTo().prepend().prependTo().before().after().insertBefore().insertAfter().detach().wrap(Dom.section()).unwrap().wrap(Dom.header()).replace().appendTo(sandbox).wrap(head = Dom.header()).on('abc', function () {}).emit('abc').off('abc').off();
expect(chainResult).to.equal(div);
expect(sandbox.children[0]).to.equal(head.el);
expect(div.parent).to.equal(head);
return expect(div.css('width')).to.equal('12px');
});
return test("Invalid Arguments", function () {
var cb, div, emitCount, text;
text = Dom.text('someText', {
lostOpts: true
});
div = Dom.div({
lostOpts: true
});
expect(Dom()).to.equal(void 0);
expect(Dom(null)).to.equal(void 0);
expect(Dom({})).to.equal(void 0);
expect(div.updateOptions()).to.equal(div);
expect(text.options.lostOpts).to.equal(void 0);
expect(div.options.lostOpts).to.equal(true);
expect(div.on()).to.equal(div);
expect(div.on('abc')).to.equal(div);
expect(div.on('abc', {})).to.equal(div);
expect(div.once('abc')).to.equal(div);
expect(div.off('somethingFake')).to.equal(div);
emitCount = 0;
div.on('something', cb = function () {
return emitCount++;
});
expect(div.emit('')).to.equal(div);
expect(div.emit()).to.equal(div);
expect(div.emitPrivate('none')).to.equal(div);
expect(div.emitPrivate('')).to.equal(div);
expect(div.emitPrivate()).to.equal(div);
expect(emitCount).to.equal(0);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(1);
expect(div.off('something', function () {})).to.equal(div);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(2);
div.css(null, '129');
expect(div.el.style.null).to.equal(void 0);
expect(div.state()).to.eql([]);
expect(div.state(null, true)).to.equal(void 0);
expect(div.state(123, true)).to.equal(void 0);
expect(div.state('base', true)).to.equal(div);
expect(div.state('base')).to.be.false;
expect(div.state('$whatevs', true)).to.equal(div);
expect(div.state('whatevs')).to.be.true;
expect(div.state('another')).to.be.false;
expect(div.state('another', true)).to.equal(div);
expect(div.state('another')).to.be.true;
expect(div.state('another', void 0)).to.equal(div);
expect(div.state('another')).to.be.false;
expect(div.updateStateStyles({
$base: {
width: 1
}
})).to.equal(div);
expect(div.updateStateStyles(null)).to.equal(div);
expect(div.updateStateTexts({
$base: 'abc'
})).to.equal(div);
expect(div.updateStateTexts(null)).to.equal(div);
div.appendTo(Dom(sandbox));
expect(div.parent).to.equal(Dom(sandbox));
div.append(true);
expect(div.children.length).to.equal(0);
div.appendTo(document);
expect(div.parent).to.equal(Dom(sandbox));
div.prepend(true);
expect(div.children.length).to.equal(0);
div.prependTo(true);
expect(div.parent).to.equal(Dom(sandbox));
div.after(true);
expect(div.children.length).to.equal(0);
div.insertAfter(123);
expect(div.parent).to.equal(Dom(sandbox));
div.before(true);
expect(div.children.length).to.equal(0);
div.insertBefore(123);
expect(div.parent).to.equal(Dom(sandbox));
div.wrap(123);
expect(div.parent).to.equal(Dom(sandbox));
div.replace(123);
expect(div.parent).to.equal(Dom(sandbox));
div.detach();
expect(div.parent).to.equal(void 0);
div.unwrap();
expect(div.parent).to.equal(void 0);
expect(Dom(sandbox).children.length).to.equal(0);
div.appendTo(Dom(sandbox));
expect(Dom(sandbox).children.length).to.equal(1);
if (Dom(sandbox)._removeChild) {
Dom(sandbox)._removeChild(text);
Dom(sandbox)._removeChild(Dom.div());
expect(Dom(sandbox).children.length).to.equal(1);
}
expect(function () {
return Dom.batch();
}).to.throw();
expect(function () {
return Dom.batch({});
}).to.throw();
expect(function () {
return Dom.batch(5432);
}).to.throw();
expect(function () {
return Dom.batch([]);
}).to.throw();
expect(function () {
return Dom.batch([12]).append(Dom.div());
}).to.throw();
expect(function () {
return Dom.batch([12]);
}).not.to.throw();
expect(function () {
return Dom.template();
}).to.throw();
expect(function () {
return Dom.template(null);
}).to.throw();
expect(function () {
return Dom.template({});
}).to.throw();
expect(function () {
return Dom.template([8482, {
className: 't'
}]);
}).to.throw();
expect(function () {
return Dom.template(['div', 'someString']);
}).to.throw();
expect(function () {
return Dom.template(['div', null, 'Some Inner Text']);
}).not.to.throw();
expect(function () {
return Dom.div({
style: {
opacity: 0.5,
'@abc(max-width:390)': {
opacity: 1
}
}
}).appendTo(sandbox);
}).not.to.throw();
return expect(function () {
div = Dom.div();
div.pipeState(div);
div.state('happy', true);
return expect(div.state('happy')).to.equal(true);
}).not.to.throw();
});
});
});
HTMLElement.prototype.onEvent = function (eventName, callback) {
if (this.addEventListener) {
return this.addEventListener(eventName, callback);
} else {
return this.attachEvent(`on${eventName}`, callback);
}
};
HTMLElement.prototype.removeEvent = function (eventName, callback) {
if (this.removeEventListener) {
return this.removeEventListener(eventName, callback);
} else {
return this.detachEvent(`on${eventName}`, callback);
}
};
HTMLElement.prototype.emitEvent = function (eventName) {
var event;
event = document.createEvent('Event');
event.initEvent(eventName, true, false);
return this.dispatchEvent(event);
};
if (HTMLElement.name !== 'HTMLElement') {
HTMLElement.name = 'HTMLElement';
Text.name = 'Text';
nonElementSuffix = ['OptionsCollection', 'FormControlsCollection', 'Document', 'Collection', 'AllCollection'];
elementSuffix = ["Video", "Unknown", "UList", "Track", "Title", "TextArea", "Template", "TableSection", "TableRow", "Table", "TableCol", "TableCell", "TableCaption", "Style", "Span", "Source", "Slot", "Shadow", "Select", "Script", "Quote", "Progress", "Pre", "Picture", "Param", "Paragraph", "Output", "Option", "OptGroup", "Object", "OList", "Mod", "Meter", "Meta", "Menu", "Media", "Marquee", "Map", "Link", "Legend", "Label", "LI", "Input", "Image", "IFrame", "Html", "Heading", "Head", "HR", "FrameSet", "Frame", "Form", "Font", "FieldSet", "Embed", "Div", "Directory", "Dialog", "Details", "DataList", "DList", "Content", "Canvas", "Button", "Body", "Base", "BR", "Audio", "Area", "Anchor"];
for ((i = 0, len = nonElementSuffix.length); i < len; i++) {
creator = nonElementSuffix[i];
if ((ref = window[`HTML${creator}`]) != null) {
ref.name = `HTML${creator}`;
}
}
for ((j = 0, len1 = elementSuffix.length); j < len1; j++) {
creator = elementSuffix[j];
if ((ref1 = window[`HTML${creator}Element`]) != null) {
ref1.name = `HTML${creator}Element`;
}
}
if ((ref2 = window.SVGElement) != null) {
ref2.name = 'SVGElement';
}
if ((ref3 = window.SVGSVGElement) != null) {
ref3.name = 'SVGSVGElement';
}
if ((ref4 = window.SVGPolylineElement) != null) {
ref4.name = 'SVGPolylineElement';
}
}
if (window.ClientRect == null) {
window.ClientRect = DOMRect;
}
return module.exports;
},
"simulate.coffee": function (require, module, exports) {
var origDescriptors;
origDescriptors = {
'innerWidth': Object.getOwnPropertyDescriptor(window, 'innerWidth'),
'innerHeight': Object.getOwnPropertyDescriptor(window, 'innerHeight')
};
module.exports = new (function () {
var current, getReal, overwrite, overwritten;
overwritten = false;
current = {
width: window.innerWidth,
height: window.innerHeight
};
getReal = function (dimension) {
dimension = 'inner' + dimension.replace(/\b./, function (letter) {
return letter.toUpperCase();
});
return origDescriptors[dimension].get.call(window);
};
overwrite = function () {
if (!overwritten) {
overwritten = true;
Object.defineProperty(window, 'innerWidth', {
configurable: true,
get: function () {
return current.width;
},
set: function (newValue) {
return current.width = newValue;
}
});
return Object.defineProperty(window, 'innerHeight', {
configurable: true,
get: function () {
return current.height;
},
set: function (newValue) {
return current.height = newValue;
}
});
}
};
this.simulate = function (width, height) {
var event;
if (width) {
current.width = width;
}
if (height) {
current.height = height;
}
overwrite();
event = document.createEvent('Event');
event.initEvent('resize', true, false);
return window.dispatchEvent(event);
};
this.restore = function () {
Object.defineProperty(window, 'innerWidth', origDescriptors.innerWidth);
return Object.defineProperty(window, 'innerHeight', origDescriptors.innerHeight);
};
return this;
})();
return module.exports;
},
"node_modules/chai/index.js": function (require, module, exports) {
module.exports = require("node_modules/chai/lib/chai.js");
return module.exports;
},
"node_modules/chai-style/sources/index.js": function (require, module, exports) {
module.exports = chaiStyle;
function chaiStyle(chai, utils) {
const {Assertion} = chai;
const {flag} = utils;
let sampleDiv, sampleStyle, sampleIframe;
Assertion.addMethod('style', function (property, value = '') {
const element = flag(this, 'object');
const style = window.getComputedStyle(element);
value = value.trim();
const isNonColors = style[property] === 'rgba(0, 0, 0, 0)' || style[property] === 'transparent';
const propertyValue = isNonColors ? '' : style[property];
const assertion = value ? compareCSSValue(propertyValue, value) : Boolean(propertyValue);
const elementTag = element.tagName.toLowerCase();
const throwMessage = `expect ${elementTag} to have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
const throwMessageNegative = `expect ${elementTag} to not have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
this.assert(assertion, throwMessage, throwMessageNegative, value);
function compareCSSValue(computed, expected) {
const propertyHifenCase = property.replace(/[A-Z]/g, match => '-' + match.toLowerCase());
if (!sampleDiv) {
sampleIframe = document.createElement('iframe');
sampleDiv = document.createElement('div');
sampleStyle = window.getComputedStyle(sampleDiv);
sampleIframe.appendChild(sampleDiv);
document.body.appendChild(sampleIframe);
}
sampleDiv.style.fontSize = style.fontSize;
sampleDiv.style.setProperty(propertyHifenCase, expected, 'important');
const value = sampleStyle[property];
const hasAutoValue = value.includes('auto');
const reg = new RegExp(escapeRegExp(value).replace(/auto/g, '(\\d+(.\\d+)?px|auto)'));
sampleDiv.style.fontSize = null;
sampleDiv.style[propertyHifenCase] = null;
return hasAutoValue ? reg.test(computed) : computed === value;
}
});
}
function escapeRegExp(value) {
return String(value).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}
return module.exports;
},
"node_modules/chai/lib/chai.js": function (require, module, exports) {
var used = [];
exports.version = '4.1.2';
exports.AssertionError = require("node_modules/assertion-error/index.js");
var util = require("node_modules/chai/lib/chai/utils/index.js");
exports.use = function (fn) {
if (!~used.indexOf(fn)) {
fn(exports, util);
used.push(fn);
}
return exports;
};
exports.util = util;
var config = require("node_modules/chai/lib/chai/config.js");
exports.config = config;
var assertion = require("node_modules/chai/lib/chai/assertion.js");
exports.use(assertion);
var core = require("node_modules/chai/lib/chai/core/assertions.js");
exports.use(core);
var expect = require("node_modules/chai/lib/chai/interface/expect.js");
exports.use(expect);
var should = require("node_modules/chai/lib/chai/interface/should.js");
exports.use(should);
var assert = require("node_modules/chai/lib/chai/interface/assert.js");
exports.use(assert);
return module.exports;
},
"node_modules/assertion-error/index.js": function (require, module, exports) {
function exclude() {
var excludes = [].slice.call(arguments);
function excludeProps(res, obj) {
Object.keys(obj).forEach(function (key) {
if (!~excludes.indexOf(key)) res[key] = obj[key];
});
}
return function extendExclude() {
var args = [].slice.call(arguments), i = 0, res = {};
for (; i < args.length; i++) {
excludeProps(res, args[i]);
}
return res;
};
}
;
module.exports = AssertionError;
function AssertionError(message, _props, ssf) {
var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'), props = extend(_props || ({}));
this.message = message || 'Unspecified AssertionError';
this.showDiff = false;
for (var key in props) {
this[key] = props[key];
}
ssf = ssf || arguments.callee;
if (ssf && Error.captureStackTrace) {
Error.captureStackTrace(this, ssf);
} else {
try {
throw new Error();
} catch (e) {
this.stack = e.stack;
}
}
}
AssertionError.prototype = Object.create(Error.prototype);
AssertionError.prototype.name = 'AssertionError';
AssertionError.prototype.constructor = AssertionError;
AssertionError.prototype.toJSON = function (stack) {
var extend = exclude('constructor', 'toJSON', 'stack'), props = extend({
name: this.name
}, this);
if (false !== stack && this.stack) {
props.stack = this.stack;
}
return props;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/index.js": function (require, module, exports) {
var pathval = require("node_modules/pathval/index.js");
exports.test = require("node_modules/chai/lib/chai/utils/test.js");
exports.type = require("node_modules/type-detect/index.js");
exports.expectTypes = require("node_modules/chai/lib/chai/utils/expectTypes.js");
exports.getMessage = require("node_modules/chai/lib/chai/utils/getMessage.js");
exports.getActual = require("node_modules/chai/lib/chai/utils/getActual.js");
exports.inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
exports.objDisplay = require("node_modules/chai/lib/chai/utils/objDisplay.js");
exports.flag = require("node_modules/chai/lib/chai/utils/flag.js");
exports.transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
exports.eql = require("node_modules/deep-eql/index.js");
exports.getPathInfo = pathval.getPathInfo;
exports.hasProperty = pathval.hasProperty;
exports.getName = require("node_modules/get-func-name/index.js");
exports.addProperty = require("node_modules/chai/lib/chai/utils/addProperty.js");
exports.addMethod = require("node_modules/chai/lib/chai/utils/addMethod.js");
exports.overwriteProperty = require("node_modules/chai/lib/chai/utils/overwriteProperty.js");
exports.overwriteMethod = require("node_modules/chai/lib/chai/utils/overwriteMethod.js");
exports.addChainableMethod = require("node_modules/chai/lib/chai/utils/addChainableMethod.js");
exports.overwriteChainableMethod = require("node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");
exports.compareByInspect = require("node_modules/chai/lib/chai/utils/compareByInspect.js");
exports.getOwnEnumerablePropertySymbols = require("node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
exports.getOwnEnumerableProperties = require("node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");
exports.checkError = require("node_modules/check-error/index.js");
exports.proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
exports.addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
exports.isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
exports.isNaN = require("node_modules/chai/lib/chai/utils/isNaN.js");
return module.exports;
},
"node_modules/chai/lib/chai/config.js": function (require, module, exports) {
module.exports = {
includeStack: false,
showDiff: true,
truncateThreshold: 40,
useProxy: true,
proxyExcludedKeys: ['then', 'inspect', 'toJSON']
};
return module.exports;
},
"node_modules/chai/lib/chai/assertion.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function (_chai, util) {
var AssertionError = _chai.AssertionError, flag = util.flag;
_chai.Assertion = Assertion;
function Assertion(obj, msg, ssfi, lockSsfi) {
flag(this, 'ssfi', ssfi || Assertion);
flag(this, 'lockSsfi', lockSsfi);
flag(this, 'object', obj);
flag(this, 'message', msg);
return util.proxify(this);
}
Object.defineProperty(Assertion, 'includeStack', {
get: function () {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
return config.includeStack;
},
set: function (value) {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
config.includeStack = value;
}
});
Object.defineProperty(Assertion, 'showDiff', {
get: function () {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
return config.showDiff;
},
set: function (value) {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
config.showDiff = value;
}
});
Assertion.addProperty = function (name, fn) {
util.addProperty(this.prototype, name, fn);
};
Assertion.addMethod = function (name, fn) {
util.addMethod(this.prototype, name, fn);
};
Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.overwriteProperty = function (name, fn) {
util.overwriteProperty(this.prototype, name, fn);
};
Assertion.overwriteMethod = function (name, fn) {
util.overwriteMethod(this.prototype, name, fn);
};
Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
var ok = util.test(this, arguments);
if (false !== showDiff) showDiff = true;
if (undefined === expected && undefined === _actual) showDiff = false;
if (true !== config.showDiff) showDiff = false;
if (!ok) {
msg = util.getMessage(this, arguments);
var actual = util.getActual(this, arguments);
throw new AssertionError(msg, {
actual: actual,
expected: expected,
showDiff: showDiff
}, ((config.includeStack)) ? this.assert : flag(this, 'ssfi'));
}
};
Object.defineProperty(Assertion.prototype, '_obj', {
get: function () {
return flag(this, 'object');
},
set: function (val) {
flag(this, 'object', val);
}
});
};
return module.exports;
},
"node_modules/chai/lib/chai/core/assertions.js": function (require, module, exports) {
module.exports = function (chai, _) {
var Assertion = chai.Assertion, AssertionError = chai.AssertionError, flag = _.flag;
['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does'].forEach(function (chain) {
Assertion.addProperty(chain);
});
Assertion.addProperty('not', function () {
flag(this, 'negate', true);
});
Assertion.addProperty('deep', function () {
flag(this, 'deep', true);
});
Assertion.addProperty('nested', function () {
flag(this, 'nested', true);
});
Assertion.addProperty('own', function () {
flag(this, 'own', true);
});
Assertion.addProperty('ordered', function () {
flag(this, 'ordered', true);
});
Assertion.addProperty('any', function () {
flag(this, 'any', true);
flag(this, 'all', false);
});
Assertion.addProperty('all', function () {
flag(this, 'all', true);
flag(this, 'any', false);
});
function an(type, msg) {
if (msg) flag(this, 'message', msg);
type = type.toLowerCase();
var obj = flag(this, 'object'), article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
}
Assertion.addChainableMethod('an', an);
Assertion.addChainableMethod('a', an);
function SameValueZero(a, b) {
return (_.isNaN(a) && _.isNaN(b)) || a === b;
}
function includeChainingBehavior() {
flag(this, 'contains', true);
}
function include(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, 'message'), negate = flag(this, 'negate'), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), descriptor = isDeep ? 'deep ' : '';
flagMsg = flagMsg ? flagMsg + ': ' : '';
var included = false;
switch (objType) {
case 'string':
included = obj.indexOf(val) !== -1;
break;
case 'weakset':
if (isDeep) {
throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
}
included = obj.has(val);
break;
case 'map':
var isEql = isDeep ? _.eql : SameValueZero;
obj.forEach(function (item) {
included = included || isEql(item, val);
});
break;
case 'set':
if (isDeep) {
obj.forEach(function (item) {
included = included || _.eql(item, val);
});
} else {
included = obj.has(val);
}
break;
case 'array':
if (isDeep) {
included = obj.some(function (item) {
return _.eql(item, val);
});
} else {
included = obj.indexOf(val) !== -1;
}
break;
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,' + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
}
var props = Object.keys(val), firstErr = null, numErrs = 0;
props.forEach(function (prop) {
var propAssertion = new Assertion(obj);
_.transferFlags(this, propAssertion, true);
flag(propAssertion, 'lockSsfi', true);
if (!negate || props.length === 1) {
propAssertion.property(prop, val[prop]);
return;
}
try {
propAssertion.property(prop, val[prop]);
} catch (err) {
if (!_.checkError.compatibleConstructor(err, AssertionError)) {
throw err;
}
if (firstErr === null) firstErr = err;
numErrs++;
}
}, this);
if (negate && props.length > 1 && numErrs === props.length) {
throw firstErr;
}
return;
}
this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
}
Assertion.addChainableMethod('include', include, includeChainingBehavior);
Assertion.addChainableMethod('contain', include, includeChainingBehavior);
Assertion.addChainableMethod('contains', include, includeChainingBehavior);
Assertion.addChainableMethod('includes', include, includeChainingBehavior);
Assertion.addProperty('ok', function () {
this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
});
Assertion.addProperty('true', function () {
this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
});
Assertion.addProperty('false', function () {
this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
});
Assertion.addProperty('null', function () {
this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
});
Assertion.addProperty('undefined', function () {
this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
});
Assertion.addProperty('NaN', function () {
this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
});
Assertion.addProperty('exist', function () {
var val = flag(this, 'object');
this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
});
Assertion.addProperty('empty', function () {
var val = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), itemsCount;
flagMsg = flagMsg ? flagMsg + ': ' : '';
switch (_.type(val).toLowerCase()) {
case 'array':
case 'string':
itemsCount = val.length;
break;
case 'map':
case 'set':
itemsCount = val.size;
break;
case 'weakmap':
case 'weakset':
throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);
case 'function':
var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
throw new AssertionError(msg.trim(), undefined, ssfi);
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
}
itemsCount = Object.keys(val).length;
}
this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
});
function checkArguments() {
var obj = flag(this, 'object'), type = _.type(obj);
this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
}
Assertion.addProperty('arguments', checkArguments);
Assertion.addProperty('Arguments', checkArguments);
function assertEqual(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
if (flag(this, 'deep')) {
return this.eql(val);
} else {
this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
}
}
Assertion.addMethod('equal', assertEqual);
Assertion.addMethod('equals', assertEqual);
Assertion.addMethod('eq', assertEqual);
function assertEql(obj, msg) {
if (msg) flag(this, 'message', msg);
this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
}
Assertion.addMethod('eql', assertEql);
Assertion.addMethod('eqls', assertEql);
function assertAbove(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to above must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to above must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len > n, 'expected #{this} to have a length above #{exp} but got #{act}', 'expected #{this} to not have a length above #{exp}', n, len);
} else {
this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
}
}
Assertion.addMethod('above', assertAbove);
Assertion.addMethod('gt', assertAbove);
Assertion.addMethod('greaterThan', assertAbove);
function assertLeast(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to least must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to least must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= n, 'expected #{this} to have a length at least #{exp} but got #{act}', 'expected #{this} to have a length below #{exp}', n, len);
} else {
this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
}
}
Assertion.addMethod('least', assertLeast);
Assertion.addMethod('gte', assertLeast);
function assertBelow(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to below must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to below must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len < n, 'expected #{this} to have a length below #{exp} but got #{act}', 'expected #{this} to not have a length below #{exp}', n, len);
} else {
this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
}
}
Assertion.addMethod('below', assertBelow);
Assertion.addMethod('lt', assertBelow);
Assertion.addMethod('lessThan', assertBelow);
function assertMost(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to most must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to most must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len <= n, 'expected #{this} to have a length at most #{exp} but got #{act}', 'expected #{this} to have a length above #{exp}', n, len);
} else {
this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
}
}
Assertion.addMethod('most', assertMost);
Assertion.addMethod('lte', assertMost);
Assertion.addMethod('within', function (start, finish, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), shouldThrow = true, range = ((startType === 'date' && finishType === 'date')) ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
errorMessage = msgPrefix + 'the arguments to within must be dates';
} else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the arguments to within must be numbers';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= start && len <= finish, 'expected #{this} to have a length within ' + range, 'expected #{this} to not have a length within ' + range);
} else {
this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
}
});
function assertInstanceOf(constructor, msg) {
if (msg) flag(this, 'message', msg);
var target = flag(this, 'object');
var ssfi = flag(this, 'ssfi');
var flagMsg = flag(this, 'message');
try {
var isInstanceOf = target instanceof constructor;
} catch (err) {
if (err instanceof TypeError) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);
}
throw err;
}
var name = _.getName(constructor);
if (name === null) {
name = 'an unnamed constructor';
}
this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
}
;
Assertion.addMethod('instanceof', assertInstanceOf);
Assertion.addMethod('instanceOf', assertInstanceOf);
function assertProperty(name, val, msg) {
if (msg) flag(this, 'message', msg);
var isNested = flag(this, 'nested'), isOwn = flag(this, 'own'), flagMsg = flag(this, 'message'), obj = flag(this, 'object'), ssfi = flag(this, 'ssfi');
if (isNested && isOwn) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
}
if (obj === null || obj === undefined) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
}
var isDeep = flag(this, 'deep'), negate = flag(this, 'negate'), pathInfo = isNested ? _.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name];
var descriptor = '';
if (isDeep) descriptor += 'deep ';
if (isOwn) descriptor += 'own ';
if (isNested) descriptor += 'nested ';
descriptor += 'property ';
var hasProperty;
if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name); else if (isNested) hasProperty = pathInfo.exists; else hasProperty = _.hasProperty(obj, name);
if (!negate || arguments.length === 1) {
this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
}
if (arguments.length > 1) {
this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
}
flag(this, 'object', value);
}
Assertion.addMethod('property', assertProperty);
function assertOwnProperty(name, value, msg) {
flag(this, 'own', true);
assertProperty.apply(this, arguments);
}
Assertion.addMethod('ownProperty', assertOwnProperty);
Assertion.addMethod('haveOwnProperty', assertOwnProperty);
function assertOwnPropertyDescriptor(name, descriptor, msg) {
if (typeof descriptor === 'string') {
msg = descriptor;
descriptor = null;
}
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
if (actualDescriptor && descriptor) {
this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
} else {
this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
}
flag(this, 'object', actualDescriptor);
}
Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
function assertLengthChain() {
flag(this, 'doLength', true);
}
function assertLength(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
var len = obj.length;
this.assert(len == n, 'expected #{this} to have a length of #{exp} but got #{act}', 'expected #{this} to not have a length of #{act}', n, len);
}
Assertion.addChainableMethod('length', assertLength, assertLengthChain);
Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
function assertMatch(re, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
}
Assertion.addMethod('match', assertMatch);
Assertion.addMethod('matches', assertMatch);
Assertion.addMethod('string', function (str, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('string');
this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
});
function assertKeys(keys) {
var obj = flag(this, 'object'), objType = _.type(obj), keysType = _.type(keys), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), str, deepStr = '', ok = true, flagMsg = flag(this, 'message');
flagMsg = flagMsg ? flagMsg + ': ' : '';
var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';
if (objType === 'Map' || objType === 'Set') {
deepStr = isDeep ? 'deeply ' : '';
actual = [];
obj.forEach(function (val, key) {
actual.push(key);
});
if (keysType !== 'Array') {
keys = Array.prototype.slice.call(arguments);
}
} else {
actual = _.getOwnEnumerableProperties(obj);
switch (keysType) {
case 'Array':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
break;
case 'Object':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
keys = Object.keys(keys);
break;
default:
keys = Array.prototype.slice.call(arguments);
}
keys = keys.map(function (val) {
return typeof val === 'symbol' ? val : String(val);
});
}
if (!keys.length) {
throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
}
var len = keys.length, any = flag(this, 'any'), all = flag(this, 'all'), expected = keys, actual;
if (!any && !all) {
all = true;
}
if (any) {
ok = expected.some(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
}
if (all) {
ok = expected.every(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
if (!flag(this, 'contains')) {
ok = ok && keys.length == actual.length;
}
}
if (len > 1) {
keys = keys.map(function (key) {
return _.inspect(key);
});
var last = keys.pop();
if (all) {
str = keys.join(', ') + ', and ' + last;
}
if (any) {
str = keys.join(', ') + ', or ' + last;
}
} else {
str = _.inspect(keys[0]);
}
str = (len > 1 ? 'keys ' : 'key ') + str;
str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
}
Assertion.addMethod('keys', assertKeys);
Assertion.addMethod('key', assertKeys);
function assertThrows(errorLike, errMsgMatcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), negate = flag(this, 'negate') || false;
new Assertion(obj, flagMsg, ssfi, true).is.a('function');
if (errorLike instanceof RegExp || typeof errorLike === 'string') {
errMsgMatcher = errorLike;
errorLike = null;
}
var caughtErr;
try {
obj();
} catch (err) {
caughtErr = err;
}
var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
var errorLikeFail = false;
var errMsgMatcherFail = false;
if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
var errorLikeString = 'an error';
if (errorLike instanceof Error) {
errorLikeString = '#{exp}';
} else if (errorLike) {
errorLikeString = _.checkError.getConstructorName(errorLike);
}
this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), (caughtErr instanceof Error ? caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr))));
}
if (errorLike && caughtErr) {
if (errorLike instanceof Error) {
var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
if (isCompatibleInstance === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
}
}
}
var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
if (isCompatibleConstructor === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
}
}
if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
var placeholder = 'including';
if (errMsgMatcher instanceof RegExp) {
placeholder = 'matching';
}
var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
if (isCompatibleMessage === negate) {
if (everyArgIsDefined && negate) {
errMsgMatcherFail = true;
} else {
this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
}
}
}
if (errorLikeFail && errMsgMatcherFail) {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
flag(this, 'object', caughtErr);
}
;
Assertion.addMethod('throw', assertThrows);
Assertion.addMethod('throws', assertThrows);
Assertion.addMethod('Throw', assertThrows);
function respondTo(method, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), itself = flag(this, 'itself'), context = (('function' === typeof obj && !itself)) ? obj.prototype[method] : obj[method];
this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
}
Assertion.addMethod('respondTo', respondTo);
Assertion.addMethod('respondsTo', respondTo);
Assertion.addProperty('itself', function () {
flag(this, 'itself', true);
});
function satisfy(matcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var result = matcher(obj);
this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
}
Assertion.addMethod('satisfy', satisfy);
Assertion.addMethod('satisfies', satisfy);
function closeTo(expected, delta, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('number');
if (typeof expected !== 'number' || typeof delta !== 'number') {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
}
this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
}
Assertion.addMethod('closeTo', closeTo);
Assertion.addMethod('approximately', closeTo);
function isSubsetOf(subset, superset, cmp, contains, ordered) {
if (!contains) {
if (subset.length !== superset.length) return false;
superset = superset.slice();
}
return subset.every(function (elem, idx) {
if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
if (!cmp) {
var matchIdx = superset.indexOf(elem);
if (matchIdx === -1) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
}
return superset.some(function (elem2, matchIdx) {
if (!cmp(elem, elem2)) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
});
});
}
Assertion.addMethod('members', function (subset, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
var contains = flag(this, 'contains');
var ordered = flag(this, 'ordered');
var subject, failMsg, failNegateMsg, lengthCheck;
if (contains) {
subject = ordered ? 'an ordered superset' : 'a superset';
failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
} else {
subject = ordered ? 'ordered members' : 'members';
failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
}
var cmp = flag(this, 'deep') ? _.eql : undefined;
this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
});
function oneOf(list, msg) {
if (msg) flag(this, 'message', msg);
var expected = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
}
Assertion.addMethod('oneOf', oneOf);
function assertChanges(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'change');
flag(this, 'realDelta', final !== initial);
this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
}
Assertion.addMethod('change', assertChanges);
Assertion.addMethod('changes', assertChanges);
function assertIncreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'increase');
flag(this, 'realDelta', final - initial);
this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
}
Assertion.addMethod('increase', assertIncreases);
Assertion.addMethod('increases', assertIncreases);
function assertDecreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'decrease');
flag(this, 'realDelta', initial - final);
this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
}
Assertion.addMethod('decrease', assertDecreases);
Assertion.addMethod('decreases', assertDecreases);
function assertDelta(delta, msg) {
if (msg) flag(this, 'message', msg);
var msgObj = flag(this, 'deltaMsgObj');
var initial = flag(this, 'initialDeltaValue');
var final = flag(this, 'finalDeltaValue');
var behavior = flag(this, 'deltaBehavior');
var realDelta = flag(this, 'realDelta');
var expression;
if (behavior === 'change') {
expression = Math.abs(final - initial) === Math.abs(delta);
} else {
expression = realDelta === Math.abs(delta);
}
this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
}
Assertion.addMethod('by', assertDelta);
Assertion.addProperty('extensible', function () {
var obj = flag(this, 'object');
var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
});
Assertion.addProperty('sealed', function () {
var obj = flag(this, 'object');
var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
});
Assertion.addProperty('frozen', function () {
var obj = flag(this, 'object');
var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
});
Assertion.addProperty('finite', function (msg) {
var obj = flag(this, 'object');
this.assert(typeof obj === "number" && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
});
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/expect.js": function (require, module, exports) {
module.exports = function (chai, util) {
chai.expect = function (val, message) {
return new chai.Assertion(val, message);
};
chai.expect.fail = function (actual, expected, message, operator) {
message = message || 'expect.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, chai.expect.fail);
};
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/should.js": function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion;
function loadShould() {
function shouldGetter() {
if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {
return new Assertion(this.valueOf(), null, shouldGetter);
}
return new Assertion(this, null, shouldGetter);
}
function shouldSetter(value) {
Object.defineProperty(this, 'should', {
value: value,
enumerable: true,
configurable: true,
writable: true
});
}
Object.defineProperty(Object.prototype, 'should', {
set: shouldSetter,
get: shouldGetter,
configurable: true
});
var should = {};
should.fail = function (actual, expected, message, operator) {
message = message || 'should.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, should.fail);
};
should.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.equal(val2);
};
should.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.Throw(errt, errs);
};
should.exist = function (val, msg) {
new Assertion(val, msg).to.exist;
};
should.not = {};
should.not.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.not.equal(val2);
};
should.not.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.not.Throw(errt, errs);
};
should.not.exist = function (val, msg) {
new Assertion(val, msg).to.not.exist;
};
should['throw'] = should['Throw'];
should.not['throw'] = should.not['Throw'];
return should;
}
;
chai.should = loadShould;
chai.Should = loadShould;
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/assert.js": function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion, flag = util.flag;
var assert = chai.assert = function (express, errmsg) {
var test = new Assertion(null, null, chai.assert, true);
test.assert(express, errmsg, '[ negation message unavailable ]');
};
assert.fail = function (actual, expected, message, operator) {
message = message || 'assert.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, assert.fail);
};
assert.isOk = function (val, msg) {
new Assertion(val, msg, assert.isOk, true).is.ok;
};
assert.isNotOk = function (val, msg) {
new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
};
assert.equal = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.equal, true);
test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
};
assert.notEqual = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.notEqual, true);
test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
};
assert.strictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
};
assert.notStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
};
assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
};
assert.notDeepEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
};
assert.isAbove = function (val, abv, msg) {
new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
};
assert.isAtLeast = function (val, atlst, msg) {
new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
};
assert.isBelow = function (val, blw, msg) {
new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
};
assert.isAtMost = function (val, atmst, msg) {
new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
};
assert.isTrue = function (val, msg) {
new Assertion(val, msg, assert.isTrue, true).is['true'];
};
assert.isNotTrue = function (val, msg) {
new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
};
assert.isFalse = function (val, msg) {
new Assertion(val, msg, assert.isFalse, true).is['false'];
};
assert.isNotFalse = function (val, msg) {
new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
};
assert.isNull = function (val, msg) {
new Assertion(val, msg, assert.isNull, true).to.equal(null);
};
assert.isNotNull = function (val, msg) {
new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
};
assert.isNaN = function (val, msg) {
new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
};
assert.isNotNaN = function (val, msg) {
new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
};
assert.exists = function (val, msg) {
new Assertion(val, msg, assert.exists, true).to.exist;
};
assert.notExists = function (val, msg) {
new Assertion(val, msg, assert.notExists, true).to.not.exist;
};
assert.isUndefined = function (val, msg) {
new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
};
assert.isDefined = function (val, msg) {
new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
};
assert.isFunction = function (val, msg) {
new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
};
assert.isNotFunction = function (val, msg) {
new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
};
assert.isObject = function (val, msg) {
new Assertion(val, msg, assert.isObject, true).to.be.a('object');
};
assert.isNotObject = function (val, msg) {
new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
};
assert.isArray = function (val, msg) {
new Assertion(val, msg, assert.isArray, true).to.be.an('array');
};
assert.isNotArray = function (val, msg) {
new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
};
assert.isString = function (val, msg) {
new Assertion(val, msg, assert.isString, true).to.be.a('string');
};
assert.isNotString = function (val, msg) {
new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
};
assert.isNumber = function (val, msg) {
new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
};
assert.isNotNumber = function (val, msg) {
new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
};
assert.isFinite = function (val, msg) {
new Assertion(val, msg, assert.isFinite, true).to.be.finite;
};
assert.isBoolean = function (val, msg) {
new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
};
assert.isNotBoolean = function (val, msg) {
new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
};
assert.typeOf = function (val, type, msg) {
new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
};
assert.notTypeOf = function (val, type, msg) {
new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
};
assert.instanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
};
assert.notInstanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
};
assert.include = function (exp, inc, msg) {
new Assertion(exp, msg, assert.include, true).include(inc);
};
assert.notInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
};
assert.deepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
};
assert.notDeepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
};
assert.nestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
};
assert.notNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
};
assert.deepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
};
assert.notDeepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
};
assert.ownInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
};
assert.notOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
};
assert.deepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
};
assert.notDeepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
};
assert.match = function (exp, re, msg) {
new Assertion(exp, msg, assert.match, true).to.match(re);
};
assert.notMatch = function (exp, re, msg) {
new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
};
assert.property = function (obj, prop, msg) {
new Assertion(obj, msg, assert.property, true).to.have.property(prop);
};
assert.notProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
};
assert.propertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
};
assert.notPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
};
assert.deepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
};
assert.notDeepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
};
assert.ownProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
};
assert.notOwnProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
};
assert.ownPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
};
assert.notOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
};
assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
};
assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
};
assert.nestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
};
assert.notNestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
};
assert.nestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
};
assert.notNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
};
assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
};
assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
};
assert.lengthOf = function (exp, len, msg) {
new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
};
assert.hasAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
};
assert.hasAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
};
assert.containsAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
};
assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
};
assert.doesNotHaveAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
};
assert.hasAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
};
assert.hasAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
};
assert.containsAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
};
assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
};
assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
};
assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
return flag(assertErr, 'object');
};
assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
};
assert.operator = function (val, operator, val2, msg) {
var ok;
switch (operator) {
case '==':
ok = val == val2;
break;
case '===':
ok = val === val2;
break;
case '>':
ok = val > val2;
break;
case '>=':
ok = val >= val2;
break;
case '<':
ok = val < val2;
break;
case '<=':
ok = val <= val2;
break;
case '!=':
ok = val != val2;
break;
case '!==':
ok = val !== val2;
break;
default:
msg = msg ? msg + ': ' : msg;
throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
}
var test = new Assertion(ok, msg, assert.operator, true);
test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
};
assert.closeTo = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
};
assert.approximately = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
};
assert.sameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
};
assert.notSameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
};
assert.sameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
};
assert.notSameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
};
assert.sameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
};
assert.notSameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
};
assert.sameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
};
assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
};
assert.includeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
};
assert.notIncludeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
};
assert.includeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
};
assert.notIncludeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
};
assert.includeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
};
assert.notIncludeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
};
assert.includeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
};
assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
};
assert.oneOf = function (inList, list, msg) {
new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
};
assert.changes = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
};
assert.changesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
};
assert.doesNotChange = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
};
assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
};
assert.increases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
};
assert.increasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
};
assert.doesNotIncrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
};
assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
};
assert.decreases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
};
assert.decreasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
};
assert.doesNotDecrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
};
assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
};
assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
};
assert.ifError = function (val) {
if (val) {
throw (val);
}
};
assert.isExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
};
assert.isNotExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
};
assert.isSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
};
assert.isNotSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
};
assert.isFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
};
assert.isNotFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
};
assert.isEmpty = function (val, msg) {
new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
};
assert.isNotEmpty = function (val, msg) {
new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
};
(function alias(name, as) {
assert[as] = assert[name];
return alias;
})('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};
return module.exports;
},
"node_modules/pathval/index.js": function (require, module, exports) {
'use strict';
function hasProperty(obj, name) {
if (typeof obj === 'undefined' || obj === null) {
return false;
}
return (name in Object(obj));
}
function parsePath(path) {
var str = path.replace(/([^\\])\[/g, '$1.[');
var parts = str.match(/(\\\.|[^.]+?)+/g);
return parts.map(function mapMatches(value) {
var regexp = /^\[(\d+)\]$/;
var mArr = regexp.exec(value);
var parsed = null;
if (mArr) {
parsed = {
i: parseFloat(mArr[1])
};
} else {
parsed = {
p: value.replace(/\\([.\[\]])/g, '$1')
};
}
return parsed;
});
}
function internalGetPathValue(obj, parsed, pathDepth) {
var temporaryValue = obj;
var res = null;
pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);
for (var i = 0; i < pathDepth; i++) {
var part = parsed[i];
if (temporaryValue) {
if (typeof part.p === 'undefined') {
temporaryValue = temporaryValue[part.i];
} else {
temporaryValue = temporaryValue[part.p];
}
if (i === (pathDepth - 1)) {
res = temporaryValue;
}
}
}
return res;
}
function internalSetPathValue(obj, val, parsed) {
var tempObj = obj;
var pathDepth = parsed.length;
var part = null;
for (var i = 0; i < pathDepth; i++) {
var propName = null;
var propVal = null;
part = parsed[i];
if (i === (pathDepth - 1)) {
propName = typeof part.p === 'undefined' ? part.i : part.p;
tempObj[propName] = val;
} else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
tempObj = tempObj[part.p];
} else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
tempObj = tempObj[part.i];
} else {
var next = parsed[i + 1];
propName = typeof part.p === 'undefined' ? part.i : part.p;
propVal = typeof next.p === 'undefined' ? [] : {};
tempObj[propName] = propVal;
tempObj = tempObj[propName];
}
}
}
function getPathInfo(obj, path) {
var parsed = parsePath(path);
var last = parsed[parsed.length - 1];
var info = {
parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
name: last.p || last.i,
value: internalGetPathValue(obj, parsed)
};
info.exists = hasProperty(info.parent, info.name);
return info;
}
function getPathValue(obj, path) {
var info = getPathInfo(obj, path);
return info.value;
}
function setPathValue(obj, path, val) {
var parsed = parsePath(path);
internalSetPathValue(obj, val, parsed);
return obj;
}
module.exports = {
hasProperty: hasProperty,
getPathInfo: getPathInfo,
getPathValue: getPathValue,
setPathValue: setPathValue
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/test.js": function (require, module, exports) {
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
module.exports = function test(obj, args) {
var negate = flag(obj, 'negate'), expr = args[0];
return negate ? !expr : expr;
};
return module.exports;
},
"node_modules/type-detect/index.js": function (require, module, exports) {
'use strict';
var promiseExists = typeof Promise === 'function';
var globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self;
var isDom = ('location' in globalObject) && ('document' in globalObject);
var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(('')[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
module.exports = function typeDetect(obj) {
var typeofObj = typeof obj;
if (typeofObj !== 'object') {
return typeofObj;
}
if (obj === null) {
return 'null';
}
if (obj === globalObject) {
return 'global';
}
if (Array.isArray(obj) && (symbolToStringTagExists === false || !((Symbol.toStringTag in obj)))) {
return 'Array';
}
if (isDom) {
if (obj === globalObject.location) {
return 'Location';
}
if (obj === globalObject.document) {
return 'Document';
}
if (obj === (globalObject.navigator || ({})).mimeTypes) {
return 'MimeTypeArray';
}
if (obj === (globalObject.navigator || ({})).plugins) {
return 'PluginArray';
}
if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
return 'HTMLQuoteElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TD') {
return 'HTMLTableDataCellElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TH') {
return 'HTMLTableHeaderCellElement';
}
}
var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
if (typeof stringTag === 'string') {
return stringTag;
}
var objPrototype = Object.getPrototypeOf(obj);
if (objPrototype === RegExp.prototype) {
return 'RegExp';
}
if (objPrototype === Date.prototype) {
return 'Date';
}
if (promiseExists && objPrototype === Promise.prototype) {
return 'Promise';
}
if (setExists && objPrototype === Set.prototype) {
return 'Set';
}
if (mapExists && objPrototype === Map.prototype) {
return 'Map';
}
if (weakSetExists && objPrototype === WeakSet.prototype) {
return 'WeakSet';
}
if (weakMapExists && objPrototype === WeakMap.prototype) {
return 'WeakMap';
}
if (dataViewExists && objPrototype === DataView.prototype) {
return 'DataView';
}
if (mapExists && objPrototype === mapIteratorPrototype) {
return 'Map Iterator';
}
if (setExists && objPrototype === setIteratorPrototype) {
return 'Set Iterator';
}
if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
return 'Array Iterator';
}
if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
return 'String Iterator';
}
if (objPrototype === null) {
return 'Object';
}
return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
};
module.exports.typeDetect = module.exports;
return module.exports;
},
"node_modules/chai/lib/chai/utils/expectTypes.js": function (require, module, exports) {
var AssertionError = require("node_modules/assertion-error/index.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var type = require("node_modules/type-detect/index.js");
module.exports = function expectTypes(obj, types) {
var flagMsg = flag(obj, 'message');
var ssfi = flag(obj, 'ssfi');
flagMsg = flagMsg ? flagMsg + ': ' : '';
obj = flag(obj, 'object');
types = types.map(function (t) {
return t.toLowerCase();
});
types.sort();
var str = types.map(function (t, index) {
var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
return or + art + ' ' + t;
}).join(', ');
var objType = type(obj).toLowerCase();
if (!types.some(function (expected) {
return objType === expected;
})) {
throw new AssertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getMessage.js": function (require, module, exports) {
var flag = require("node_modules/chai/lib/chai/utils/flag.js"), getActual = require("node_modules/chai/lib/chai/utils/getActual.js"), inspect = require("node_modules/chai/lib/chai/utils/inspect.js"), objDisplay = require("node_modules/chai/lib/chai/utils/objDisplay.js");
module.exports = function getMessage(obj, args) {
var negate = flag(obj, 'negate'), val = flag(obj, 'object'), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, 'message');
if (typeof msg === "function") msg = msg();
msg = msg || '';
msg = msg.replace(/#\{this\}/g, function () {
return objDisplay(val);
}).replace(/#\{act\}/g, function () {
return objDisplay(actual);
}).replace(/#\{exp\}/g, function () {
return objDisplay(expected);
});
return flagMsg ? flagMsg + ': ' + msg : msg;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getActual.js": function (require, module, exports) {
module.exports = function getActual(obj, args) {
return args.length > 4 ? args[4] : obj._obj;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/inspect.js": function (require, module, exports) {
var getName = require("node_modules/get-func-name/index.js");
var getProperties = require("node_modules/chai/lib/chai/utils/getProperties.js");
var getEnumerableProperties = require("node_modules/chai/lib/chai/utils/getEnumerableProperties.js");
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = inspect;
function inspect(obj, showHidden, depth, colors) {
var ctx = {
showHidden: showHidden,
seen: [],
stylize: function (str) {
return str;
}
};
return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}
var isDOMElement = function (object) {
if (typeof HTMLElement === 'object') {
return object instanceof HTMLElement;
} else {
return object && typeof object === 'object' && ('nodeType' in object) && object.nodeType === 1 && typeof object.nodeName === 'string';
}
};
function formatValue(ctx, value, recurseTimes) {
if (value && typeof value.inspect === 'function' && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (typeof ret !== 'string') {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
if (isDOMElement(value)) {
if (('outerHTML' in value)) {
return value.outerHTML;
} else {
try {
if (document.xmlVersion) {
var xmlSerializer = new XMLSerializer();
return xmlSerializer.serializeToString(value);
} else {
var ns = "http://www.w3.org/1999/xhtml";
var container = document.createElementNS(ns, '_');
container.appendChild(value.cloneNode(false));
var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');
container.innerHTML = '';
return html;
}
} catch (err) {}
}
}
var visibleKeys = getEnumerableProperties(value);
var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
var name, nameSuffix;
if (keys.length === 0 || (isError(value) && ((keys.length === 1 && keys[0] === 'stack') || (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')))) {
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
return ctx.stylize('[Function' + nameSuffix + ']', 'special');
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
}
if (isError(value)) {
return formatError(value);
}
}
var base = '', array = false, typedArray = false, braces = ['{', '}'];
if (isTypedArray(value)) {
typedArray = true;
braces = ['[', ']'];
}
if (isArray(value)) {
array = true;
braces = ['[', ']'];
}
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
base = ' [Function' + nameSuffix + ']';
}
if (isRegExp(value)) {
base = ' ' + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = ' ' + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
return formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
} else {
return ctx.stylize('[Object]', 'special');
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else if (typedArray) {
return formatTypedArray(value);
} else {
output = keys.map(function (key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
switch (typeof value) {
case 'undefined':
return ctx.stylize('undefined', 'undefined');
case 'string':
var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
return ctx.stylize(simple, 'string');
case 'number':
if (value === 0 && (1 / value) === -Infinity) {
return ctx.stylize('-0', 'number');
}
return ctx.stylize('' + value, 'number');
case 'boolean':
return ctx.stylize('' + value, 'boolean');
case 'symbol':
return ctx.stylize(value.toString(), 'symbol');
}
if (value === null) {
return ctx.stylize('null', 'null');
}
}
function formatError(value) {
return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (Object.prototype.hasOwnProperty.call(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push('');
}
}
keys.forEach(function (key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatTypedArray(value) {
var str = '[ ';
for (var i = 0; i < value.length; ++i) {
if (str.length >= config.truncateThreshold - 7) {
str += '...';
break;
}
str += value[i] + ', ';
}
str += ' ]';
if (str.indexOf(',  ]') !== -1) {
str = str.replace(',  ]', ' ]');
}
return str;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name;
var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
var str;
if (propDescriptor) {
if (propDescriptor.get) {
if (propDescriptor.set) {
str = ctx.stylize('[Getter/Setter]', 'special');
} else {
str = ctx.stylize('[Getter]', 'special');
}
} else {
if (propDescriptor.set) {
str = ctx.stylize('[Setter]', 'special');
}
}
}
if (visibleKeys.indexOf(key) < 0) {
name = '[' + key + ']';
}
if (!str) {
if (ctx.seen.indexOf(value[key]) < 0) {
if (recurseTimes === null) {
str = formatValue(ctx, value[key], null);
} else {
str = formatValue(ctx, value[key], recurseTimes - 1);
}
if (str.indexOf('\n') > -1) {
if (array) {
str = str.split('\n').map(function (line) {
return '  ' + line;
}).join('\n').substr(2);
} else {
str = '\n' + str.split('\n').map(function (line) {
return '   ' + line;
}).join('\n');
}
}
} else {
str = ctx.stylize('[Circular]', 'special');
}
}
if (typeof name === 'undefined') {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify('' + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, 'name');
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, 'string');
}
}
return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function (prev, cur) {
numLinesEst++;
if (cur.indexOf('\n') >= 0) numLinesEst++;
return prev + cur.length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
}
return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
function isTypedArray(ar) {
return (typeof ar === 'object' && (/\w+Array]$/).test(objectToString(ar)));
}
function isArray(ar) {
return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}
function isRegExp(re) {
return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}
function isDate(d) {
return typeof d === 'object' && objectToString(d) === '[object Date]';
}
function isError(e) {
return typeof e === 'object' && objectToString(e) === '[object Error]';
}
function objectToString(o) {
return Object.prototype.toString.call(o);
}
return module.exports;
},
"node_modules/chai/lib/chai/utils/objDisplay.js": function (require, module, exports) {
var inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function objDisplay(obj) {
var str = inspect(obj), type = Object.prototype.toString.call(obj);
if (config.truncateThreshold && str.length >= config.truncateThreshold) {
if (type === '[object Function]') {
return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';
} else if (type === '[object Array]') {
return '[ Array(' + obj.length + ') ]';
} else if (type === '[object Object]') {
var keys = Object.keys(obj), kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');
return '{ Object (' + kstr + ') }';
} else {
return str;
}
} else {
return str;
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/flag.js": function (require, module, exports) {
module.exports = function flag(obj, key, value) {
var flags = obj.__flags || (obj.__flags = Object.create(null));
if (arguments.length === 3) {
flags[key] = value;
} else {
return flags[key];
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/transferFlags.js": function (require, module, exports) {
module.exports = function transferFlags(assertion, object, includeAll) {
var flags = assertion.__flags || (assertion.__flags = Object.create(null));
if (!object.__flags) {
object.__flags = Object.create(null);
}
includeAll = arguments.length === 3 ? includeAll : true;
for (var flag in flags) {
if (includeAll || (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
object.__flags[flag] = flags[flag];
}
}
};
return module.exports;
},
"node_modules/deep-eql/index.js": function (require, module, exports) {
'use strict';
var type = require("node_modules/type-detect/index.js");
function FakeMap() {
this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}
FakeMap.prototype = {
get: function getMap(key) {
return key[this._key];
},
set: function setMap(key, value) {
if (!Object.isFrozen(key)) {
Object.defineProperty(key, this._key, {
value: value,
configurable: true
});
}
}
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return null;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
var result = leftHandMap.get(rightHandOperand);
if (typeof result === 'boolean') {
return result;
}
}
return null;
}
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
leftHandMap.set(rightHandOperand, result);
} else {
leftHandMap = new MemoizeMap();
leftHandMap.set(rightHandOperand, result);
memoizeMap.set(leftHandOperand, leftHandMap);
}
}
module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;
function deepEqual(leftHandOperand, rightHandOperand, options) {
if (options && options.comparator) {
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
function simpleEqual(leftHandOperand, rightHandOperand) {
if (leftHandOperand === rightHandOperand) {
return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
}
if (leftHandOperand !== leftHandOperand && rightHandOperand !== rightHandOperand) {
return true;
}
if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return false;
}
return null;
}
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
options = options || ({});
options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
var comparator = options && options.comparator;
var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
if (memoizeResultLeft !== null) {
return memoizeResultLeft;
}
var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
if (memoizeResultRight !== null) {
return memoizeResultRight;
}
if (comparator) {
var comparatorResult = comparator(leftHandOperand, rightHandOperand);
if (comparatorResult === false || comparatorResult === true) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
return comparatorResult;
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
}
var leftHandType = type(leftHandOperand);
if (leftHandType !== type(rightHandOperand)) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
return false;
}
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
return result;
}
function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
switch (leftHandType) {
case 'String':
case 'Number':
case 'Boolean':
case 'Date':
return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
case 'Promise':
case 'Symbol':
case 'function':
case 'WeakMap':
case 'WeakSet':
case 'Error':
return leftHandOperand === rightHandOperand;
case 'Arguments':
case 'Int8Array':
case 'Uint8Array':
case 'Uint8ClampedArray':
case 'Int16Array':
case 'Uint16Array':
case 'Int32Array':
case 'Uint32Array':
case 'Float32Array':
case 'Float64Array':
case 'Array':
return iterableEqual(leftHandOperand, rightHandOperand, options);
case 'RegExp':
return regexpEqual(leftHandOperand, rightHandOperand);
case 'Generator':
return generatorEqual(leftHandOperand, rightHandOperand, options);
case 'DataView':
return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
case 'ArrayBuffer':
return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
case 'Set':
return entriesEqual(leftHandOperand, rightHandOperand, options);
case 'Map':
return entriesEqual(leftHandOperand, rightHandOperand, options);
default:
return objectEqual(leftHandOperand, rightHandOperand, options);
}
}
function regexpEqual(leftHandOperand, rightHandOperand) {
return leftHandOperand.toString() === rightHandOperand.toString();
}
function entriesEqual(leftHandOperand, rightHandOperand, options) {
if (leftHandOperand.size !== rightHandOperand.size) {
return false;
}
if (leftHandOperand.size === 0) {
return true;
}
var leftHandItems = [];
var rightHandItems = [];
leftHandOperand.forEach(function gatherEntries(key, value) {
leftHandItems.push([key, value]);
});
rightHandOperand.forEach(function gatherEntries(key, value) {
rightHandItems.push([key, value]);
});
return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
function iterableEqual(leftHandOperand, rightHandOperand, options) {
var length = leftHandOperand.length;
if (length !== rightHandOperand.length) {
return false;
}
if (length === 0) {
return true;
}
var index = -1;
while (++index < length) {
if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
return false;
}
}
return true;
}
function generatorEqual(leftHandOperand, rightHandOperand, options) {
return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
function hasIteratorFunction(target) {
return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
function getIteratorEntries(target) {
if (hasIteratorFunction(target)) {
try {
return getGeneratorEntries(target[Symbol.iterator]());
} catch (iteratorError) {
return [];
}
}
return [];
}
function getGeneratorEntries(generator) {
var generatorResult = generator.next();
var accumulator = [generatorResult.value];
while (generatorResult.done === false) {
generatorResult = generator.next();
accumulator.push(generatorResult.value);
}
return accumulator;
}
function getEnumerableKeys(target) {
var keys = [];
for (var key in target) {
keys.push(key);
}
return keys;
}
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
var length = keys.length;
if (length === 0) {
return true;
}
for (var i = 0; i < length; i += 1) {
if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
return false;
}
}
return true;
}
function objectEqual(leftHandOperand, rightHandOperand, options) {
var leftHandKeys = getEnumerableKeys(leftHandOperand);
var rightHandKeys = getEnumerableKeys(rightHandOperand);
if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
leftHandKeys.sort();
rightHandKeys.sort();
if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
return false;
}
return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
}
var leftHandEntries = getIteratorEntries(leftHandOperand);
var rightHandEntries = getIteratorEntries(rightHandOperand);
if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
leftHandEntries.sort();
rightHandEntries.sort();
return iterableEqual(leftHandEntries, rightHandEntries, options);
}
if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
return true;
}
return false;
}
function isPrimitive(value) {
return value === null || typeof value !== 'object';
}
return module.exports;
},
"node_modules/get-func-name/index.js": function (require, module, exports) {
'use strict';
var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
if (typeof aFunc !== 'function') {
return null;
}
var name = '';
if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
var match = toString.call(aFunc).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = aFunc.name;
}
return name;
}
module.exports = getFuncName;
return module.exports;
},
"node_modules/chai/lib/chai/utils/addProperty.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function addProperty(ctx, name, getter) {
getter = getter === undefined ? function () {} : getter;
Object.defineProperty(ctx, name, {
get: function propertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', propertyGetter);
}
var result = getter.call(this);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/addMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function addMethod(ctx, name, method) {
var methodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', methodWrapper);
}
var result = method.apply(this, arguments);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(methodWrapper, name, false);
ctx[name] = proxify(methodWrapper, name);
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteProperty.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteProperty(ctx, name, getter) {
var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function () {};
if (_get && 'function' === typeof _get.get) _super = _get.get;
Object.defineProperty(ctx, name, {
get: function overwritingPropertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingPropertyGetter);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = getter(_super).call(this);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteMethod(ctx, name, method) {
var _method = ctx[name], _super = function () {
throw new Error(name + ' is not a function');
};
if (_method && 'function' === typeof _method) _super = _method;
var overwritingMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingMethodWrapper);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = method(_super).apply(this, arguments);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(overwritingMethodWrapper, name, false);
ctx[name] = proxify(overwritingMethodWrapper, name);
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/addChainableMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
var canSetPrototype = typeof Object.setPrototypeOf === 'function';
var testFn = function () {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
if (typeof propDesc !== 'object') return true;
return !propDesc.configurable;
});
var call = Function.prototype.call, apply = Function.prototype.apply;
module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
if (typeof chainingBehavior !== 'function') {
chainingBehavior = function () {};
}
var chainableBehavior = {
method: method,
chainingBehavior: chainingBehavior
};
if (!ctx.__methods) {
ctx.__methods = {};
}
ctx.__methods[name] = chainableBehavior;
Object.defineProperty(ctx, name, {
get: function chainableMethodGetter() {
chainableBehavior.chainingBehavior.call(this);
var chainableMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', chainableMethodWrapper);
}
var result = chainableBehavior.method.apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(chainableMethodWrapper, name, true);
if (canSetPrototype) {
var prototype = Object.create(this);
prototype.call = call;
prototype.apply = apply;
Object.setPrototypeOf(chainableMethodWrapper, prototype);
} else {
var asserterNames = Object.getOwnPropertyNames(ctx);
asserterNames.forEach(function (asserterName) {
if (excludeNames.indexOf(asserterName) !== -1) {
return;
}
var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
Object.defineProperty(chainableMethodWrapper, asserterName, pd);
});
}
transferFlags(this, chainableMethodWrapper);
return proxify(chainableMethodWrapper);
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteChainableMethod.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
var chainableBehavior = ctx.__methods[name];
var _chainingBehavior = chainableBehavior.chainingBehavior;
chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
var result = chainingBehavior(_chainingBehavior).call(this);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
var _method = chainableBehavior.method;
chainableBehavior.method = function overwritingChainableMethodWrapper() {
var result = method(_method).apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/compareByInspect.js": function (require, module, exports) {
var inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
module.exports = function compareByInspect(a, b) {
return inspect(a) < inspect(b) ? -1 : 1;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js": function (require, module, exports) {
module.exports = function getOwnEnumerablePropertySymbols(obj) {
if (typeof Object.getOwnPropertySymbols !== 'function') return [];
return Object.getOwnPropertySymbols(obj).filter(function (sym) {
return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js": function (require, module, exports) {
var getOwnEnumerablePropertySymbols = require("node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
module.exports = function getOwnEnumerableProperties(obj) {
return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};
return module.exports;
},
"node_modules/check-error/index.js": function (require, module, exports) {
'use strict';
function compatibleInstance(thrown, errorLike) {
return errorLike instanceof Error && thrown === errorLike;
}
function compatibleConstructor(thrown, errorLike) {
if (errorLike instanceof Error) {
return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
} else if (errorLike.prototype instanceof Error || errorLike === Error) {
return thrown.constructor === errorLike || thrown instanceof errorLike;
}
return false;
}
function compatibleMessage(thrown, errMatcher) {
var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
if (errMatcher instanceof RegExp) {
return errMatcher.test(comparisonString);
} else if (typeof errMatcher === 'string') {
return comparisonString.indexOf(errMatcher) !== -1;
}
return false;
}
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
var name = '';
if (typeof constructorFn.name === 'undefined') {
var match = String(constructorFn).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = constructorFn.name;
}
return name;
}
function getConstructorName(errorLike) {
var constructorName = errorLike;
if (errorLike instanceof Error) {
constructorName = getFunctionName(errorLike.constructor);
} else if (typeof errorLike === 'function') {
constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike());
}
return constructorName;
}
function getMessage(errorLike) {
var msg = '';
if (errorLike && errorLike.message) {
msg = errorLike.message;
} else if (typeof errorLike === 'string') {
msg = errorLike;
}
return msg;
}
module.exports = {
compatibleInstance: compatibleInstance,
compatibleConstructor: compatibleConstructor,
compatibleMessage: compatibleMessage,
getMessage: getMessage,
getConstructorName: getConstructorName
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/proxify.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var getProperties = require("node_modules/chai/lib/chai/utils/getProperties.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var builtins = ['__flags', '__methods', '_obj', 'assert'];
module.exports = function proxify(obj, nonChainableMethodName) {
if (!isProxyEnabled()) return obj;
return new Proxy(obj, {
get: function proxyGetter(target, property) {
if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
if (nonChainableMethodName) {
throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
}
var orderedProperties = getProperties(target).filter(function (property) {
return !Object.prototype.hasOwnProperty(property) && builtins.indexOf(property) === -1;
}).sort(function (a, b) {
return stringDistance(property, a) - stringDistance(property, b);
});
if (orderedProperties.length && stringDistance(orderedProperties[0], property) < 4) {
throw Error('Invalid Chai property: ' + property + '. Did you mean "' + orderedProperties[0] + '"?');
} else {
throw Error('Invalid Chai property: ' + property);
}
}
if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
flag(target, 'ssfi', proxyGetter);
}
return Reflect.get(target, property);
}
});
};
function stringDistance(strA, strB, memo) {
if (!memo) {
memo = [];
for (var i = 0; i <= strA.length; i++) {
memo[i] = [];
}
}
if (!memo[strA.length] || !memo[strA.length][strB.length]) {
if (strA.length === 0 || strB.length === 0) {
memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
} else {
memo[strA.length][strB.length] = Math.min(stringDistance(strA.slice(0, -1), strB, memo) + 1, stringDistance(strA, strB.slice(0, -1), memo) + 1, stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) + (strA.slice(-1) === strB.slice(-1) ? 0 : 1));
}
}
return memo[strA.length][strB.length];
}
return module.exports;
},
"node_modules/chai/lib/chai/utils/addLengthGuard.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
module.exports = function addLengthGuard(fn, assertionName, isChainable) {
if (!fnLengthDesc.configurable) return fn;
Object.defineProperty(fn, 'length', {
get: function () {
if (isChainable) {
throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
}
throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of "' + assertionName + '".');
}
});
return fn;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/isProxyEnabled.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function isProxyEnabled() {
return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/isNaN.js": function (require, module, exports) {
function isNaN(value) {
return value !== value;
}
module.exports = Number.isNaN || isNaN;
return module.exports;
},
"node_modules/chai/lib/chai/utils/getProperties.js": function (require, module, exports) {
module.exports = function getProperties(object) {
var result = Object.getOwnPropertyNames(object);
function addProperty(property) {
if (result.indexOf(property) === -1) {
result.push(property);
}
}
var proto = Object.getPrototypeOf(object);
while (proto !== null) {
Object.getOwnPropertyNames(proto).forEach(addProperty);
proto = Object.getPrototypeOf(proto);
}
return result;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getEnumerableProperties.js": function (require, module, exports) {
module.exports = function getEnumerableProperties(object) {
var result = [];
for (var name in object) {
result.push(name);
}
return result;
};
return module.exports;
}
}, this);
return require("entry.js");
}).call(this, null, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : this);


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuY29mZmVlIiwiLi4vcGFja2FnZS5qc29uIiwic2ltdWxhdGUuY29mZmVlIiwibm9kZV9tb2R1bGVzL2NoYWkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS1zdHlsZS9zb3VyY2VzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkuanMiLCJub2RlX21vZHVsZXMvYXNzZXJ0aW9uLWVycm9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9jb25maWcuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9hc3NlcnRpb24uanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9jb3JlL2Fzc2VydGlvbnMuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2UvZXhwZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvaW50ZXJmYWNlL3Nob3VsZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL2ludGVyZmFjZS9hc3NlcnQuanMiLCJub2RlX21vZHVsZXMvcGF0aHZhbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Rlc3QuanMiLCJub2RlX21vZHVsZXMvdHlwZS1kZXRlY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9leHBlY3RUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE1lc3NhZ2UuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRBY3R1YWwuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9pbnNwZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb2JqRGlzcGxheS5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2ZsYWcuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy90cmFuc2ZlckZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2RlZXAtZXFsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2dldC1mdW5jLW5hbWUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2FkZE1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL292ZXJ3cml0ZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvYWRkQ2hhaW5hYmxlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvY29tcGFyZUJ5SW5zcGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jaGVjay1lcnJvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Byb3hpZnkuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRMZW5ndGhHdWFyZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2lzUHJveHlFbmFibGVkLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaXNOYU4uanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRQcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMuanMiXSwibmFtZXMiOlsiY2hhaSIsImRpbWVuc2lvbnMiLCJEb20iLCJET00iLCJ3aW5kb3ciLCJxdWlja2RvbSIsIm1vY2hhIiwic2V0dXAiLCJzbG93IiwidGltZW91dCIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJiYWlsIiwidXNlIiwiY29uZmlnIiwidHJ1bmNhdGVUaHJlc2hvbGQiLCJzYW5kYm94IiwicmVzdGFydFNhbmRib3giLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNoZWNrQ2hpbGRTdHJ1Y3R1cmUiLCJtYWluIiwiY2hpbGRyZW4iLCJjaGlsZCIsImxlbmd0aCIsInRvIiwiZXF1YWwiLCJpbmRleCIsImV4cGVjdCIsImVsIiwicGFyZW50Tm9kZSIsInBhcmVudCIsInN1aXRlIiwidGVzdCIsInBhY2thZ2VWZXJzaW9uIiwidmVyc2lvbiIsImRpdiIsImJlIiwiaW5zdGFuY2VPZiIsIkhUTUxEaXZFbGVtZW50IiwidW5kZWZpbmVkIiwiaSIsImEiLCJjb25zdHJ1Y3RvciIsImxpbmsiLCJhbmNob3IiLCJ0ZXh0Iiwic3BhbiIsImg0IiwiaGVhZGVyIiwiZm9vdGVyIiwic2VjdGlvbiIsImJ1dHRvbiIsImlucHV0IiwidHlwZXMiLCJ0eXBlIiwibmFtZSIsIm5vdCIsImNvbnRhaW4iLCJBIiwiY2xhc3MiLCJwcm9wcyIsIkIiLCJjbGFzc05hbWUiLCJhdHRycyIsIkMiLCJ2YWx1ZSIsIkQiLCJjaGVja2VkIiwiRSIsIm9wdGlvbiIsInNlbGVjdGVkIiwiRiIsImhyZWYiLCJHIiwidXJsIiwiSCIsIkkiLCJpbWciLCJzcmMiLCJKIiwicmVsYXRlZEluc3RhbmNlIiwib2JqIiwiYWJjIiwiZGVmIiwiZ2V0QXR0cmlidXRlIiwiZGF0YXNldCIsIm5vZGVUeXBlIiwidGV4dENvbnRlbnQiLCJyZWxhdGVkIiwib3B0aW9ucyIsImNoaWxkTm9kZXMiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kVG8iLCJyYXciLCJoYXZlIiwiZGl2UmF3IiwiX3F1aWNrRWxlbWVudCIsInJhd0IiLCJyYXdDIiwicmF3QSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkb2MiLCJwYXJlbnRzIiwid2luIiwidHJ1ZSIsImFwcGVuZCIsImh0bWwiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImxhbWVvIiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kU2l6ZSIsInJlZ0RpdiIsInN2Z0dvb2QiLCJzdmdQb2x5QmFkIiwic3ZnUG9seUdvb2QiLCJzdmdEaXYiLCJzdmdCYWQiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJTVkdTVkdFbGVtZW50IiwiU1ZHUG9seWxpbmVFbGVtZW50IiwiaHRtbFN0cmluZyIsImJhdGNoIiwiZWxlbWVudHMiLCJpbmNsdWRlIiwiY3NzIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlIiwicmVtb3ZlTGlzdGVuZXIiLCJvZmYiLCJkaXZBIiwiZGl2QiIsIm1ldGhvZHMiLCJzY3JvbGxUb3AiLCJnZXQiLCJ3ZWlnaHQiLCJzZXQiLCJiaWdJbmRleCIsImVtaXRDb3VudEIiLCJvbiIsImV2ZW50IiwiZW1pdENvdW50QSIsImVtaXRFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbWl0IiwiYXJnIiwiYXJndW1lbnRzIiwiZW1pdFByaXZhdGUiLCJlbWl0Q291bnRDIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJmYWxzZSIsImUiLCJjdXN0b20iLCJlbWl0Q291bnREIiwiZXZlbnRDQiIsImF0dGFjaExpc3RlbmVycyIsImVtaXRDb3VudCIsIm9uY2UiLCJlbWl0Q29udGV4dCIsImxpc3RlbmVycyIsImV2ZW50cyIsInBhcmVudEEiLCJwYXJlbnRCIiwibWFzdGVyUGFyZW50QiIsInBhcmVudEMiLCJpbnZva2VDb3VudCIsImRldGFjaCIsImFub3RoZXJPYmoiLCJyYXRlIiwiYXBwbHlXaWR0aCIsImV4cGVjdGVkSW5zdGFuY2UiLCJpbnN0YW5jZSIsImZvbnRTaXplIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkZWxheSIsInNvbWUiLCJzIiwiekluZGV4IiwiZmllbGQiLCJ0aGVJbmRleCIsIiRoYXBweSIsIiRyZWxheGVkIiwic3R5bGVBZnRlckluc2VydCIsInBvc2l0aW9uIiwicHJvcCIsInRhcmdldCIsImNvbXB1dGVkIiwiaW5saW5lIiwic2FmZSIsInN0eWxlU2FmZSIsImVxbCIsInN0YXRlIiwiaGVpZ2h0QSIsImhlaWdodEIiLCJ0aHJvdyIsInN0eWxlUGFyc2VkIiwicGFyc2VGbG9hdCIsImNvdW50Iiwib3BhY2l0eSIsIiRmdW5ueSIsInJlY2FsY1N0eWxlIiwid3JhcHBlckNvdW50Iiwid3JhcHBlciIsInJlY2FsY09uUmVzaXplIiwiaW5uZXJIVE1MIiwiZm9yY2VTdHlsZSIsImhlYWQiLCJhdHRyIiwicmVtb3ZlIiwiaGlkZSIsInNob3ciLCJzdmciLCJiIiwiYyIsInJlc2V0U3RhdGUiLCJ0b2dnbGVTdGF0ZSIsIiRiYXNlIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInN0YXRlVHJpZ2dlcnMiLCJoYXBweSIsInJlbGF4ZWQiLCIkaG92ZXIiLCIkZm9jdXMiLCJhdHRhY2hTdGF0ZUV2ZW50cyIsIl9hdHRhY2hTdGF0ZUV2ZW50cyIsIk1haW4iLCJwYXNzU3RhdGVUb0NoaWxkcmVuIiwicmVjdEEiLCJyZWN0IiwicmVjdEIiLCJDbGllbnRSZWN0IiwicmVjdEMiLCJvcmllbnRhdGlvbiIsImFzcGVjdFJhdGlvIiwiZGl2UmVnIiwicGFyZW50T3BhY2l0eUdldHRlciIsImRpdkMiLCJpbnNlcnRCZWZvcmUiLCJkZXRhY2hlZFBhcmVudCIsInZpc2liaWxpdHkiLCJjaGlsZEEiLCJjaGlsZEIiLCJwaXBlU3RhdGUiLCJ1bnBhc3NhYmxlU3RhdGVzIiwic3BhbkEiLCJzcGFuQiIsInN1YlNwYW4iLCJzdWJQYXJlbnRBIiwic3ViQ2hpbGRBIiwic3ViUGFyZW50QiIsInN1YkNoaWxkQiIsImZvcmNlIiwiZGl2Ql8iLCJkaXZBXyIsImlzTmFOIiwiY29sb3IiLCJyZXN1bHRzIiwicHVzaCIsImRlZXAiLCIkc29tZXRoaW5nRWxzZSIsImdldFN0eWxlcyIsInVwZGF0ZVN0YXRlU3R5bGVzIiwiZWwxIiwiZWwyIiwiZWwzIiwic3VpdGVUZWFyZG93biIsInJlZiIsImNvbmZpZ3VyYWJsZSIsInJlc3RvcmUiLCJzdWl0ZVNldHVwIiwic2tpcCIsInRlYXJkb3duIiwicmVzdWx0czEiLCJsZXZlbCIsIkNTUyIsImNsZWFyUmVnaXN0ZXJlZCIsInNpbXVsYXRlIiwibGluZUhlaWdodCIsInNpbXVsYXRlUGFyZW50IiwidG9wIiwibWFyZ2luQm90dG9tIiwiZm9udFdlaWdodCIsImdoaSIsIm1hcmdpblJpZ2h0IiwiY29tbWVudCIsImVsZW1lbnRDaGlsZHJlbiIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlQ29tbWVudCIsImRpdiQiLCJzbGljZSIsImRvY3VtZW50RWxlbWVudCIsImVscyIsInBhcmVudE1hdGNoaW5nIiwicGFyZW50c1VudGlsIiwibmV4dCIsIm5leHRBbGwiLCJuZXh0RWwiLCJuZXh0RWxBbGwiLCJwcmV2IiwicHJldkFsbCIsInByZXZFbCIsInByZXZFbEFsbCIsInNpYmxpbmdzIiwicmV2ZXJzZSIsImNvbmNhdCIsImVsZW1lbnRTaWJsaW5ncyIsImRpdkJBIiwiZGl2QkIiLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwidGVtcGxhdGUiLCJzcGF3biIsImNoaWxkQV8xIiwiY2hpbGRBXzIiLCJjaGlsZEFfMyIsImNoaWxkQl8xIiwiY2hpbGRCXzIiLCJkaXZEIiwic2FuZEJveCIsImNoaWxkZiIsIm5ld0NoaWxkIiwibmV3Q2hpbGRDaGlsZCIsIk9iamVjdCIsImtleXMiLCJuZXdQYXJlbnQiLCJjaGlsZEMiLCJjaGlsZEQiLCJjaGlsZEUiLCJjaGlsZEYiLCJjaGlsZEciLCJpbmRleFR5cGUiLCJpbmRleFJlZiIsInF1ZXJ5IiwicXVlcnlBbGwiLCJhbGxBIiwiYWxsQiIsIk1haW5BIiwiTWFpbkIiLCJwcmVwZW5kIiwicHJlcGVuZFRvIiwiYWZ0ZXIiLCJpbnNlcnRBZnRlciIsImJlZm9yZSIsImV4aXN0IiwiZW1wdHkiLCJ3cmFwQSIsIndyYXBCIiwid3JhcEMiLCJ3cmFwIiwidW53cmFwIiwib3B0cyIsImNsb25lIiwibXlQcm9wIiwiYW5vdGhlclByb3AiLCJsYXN0UHJvcCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInNldFJlZiIsImJhdGNoMSIsImJhdGNoMiIsInJlc3VsdCIsInJldHVybiIsImFyciIsInNwYXduQSIsInNwYXduQiIsInNlY3Rpb25UZW1wbGF0ZSIsInRvVGVtcGxhdGUiLCJ0ZW1wbGF0ZVNwYXduIiwic2VjdGlvbkVsIiwidGVtcGxhdGVDb3B5QSIsImV4dGVuZCIsInRlbXBsYXRlQ29weUIiLCJ0ZW1wbGF0ZUNvcHlDIiwic3Bhd25DIiwic3Bhd25SYXciLCJjbG9uZUEiLCJjbG9uZUIiLCJjbG9uZUMiLCJmb250RmFtaWx5IiwidGVtcGxhdGVDb3B5Iiwic3Bhd25lZEEiLCJzcGF3bmVkQiIsInNwYXduZWRDIiwiZGVmYXVsdHMiLCJjb21wdXRlcnMiLCJsYWJlbCIsInRoZVNwYW4iLCJoZWFkZXJUZW1wbGF0ZSIsImhlYWRlclRlbXBsYXRlQ2xvbmUiLCJkeW5hbWljSGVpZ2h0U3R5bGUiLCJteUhlaWdodCIsInJlbmRlcmVkIiwidGVtcGxhdGVNYWluIiwidGVtcGxhdGVDb3B5MiIsImNoaWxkQV8yXzEiLCJDSElMRGFfMiIsIkNoaWxkQiIsIkNoaWxkQyIsInRlbXBsYXRlQSIsInRlbXBsYXRlQiIsInRlbXBsYXRlQyIsInRlbXBsYXRlRCIsInNwYXduRCIsInZhbHVlQSIsInZhbHVlQiIsIiRhY3RpdmUiLCJyZWNlaXZlZERhdGEiLCJkYXRhIiwiY29udGV4dCIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJmaWZ0aCIsInNpeHRoIiwiY2hpbGRDaGlsZCIsImQiLCJmIiwiYXBwbHlEYXRhIiwiX2luaXQiLCJuYW1lMSIsImRpdkUiLCJleHBlY3RlZCIsInNpemUiLCJ0ZW1wbGF0ZTEiLCJ0ZW1wbGF0ZTIiLCJwYXNzRGF0YVRvQ2hpbGRyZW4iLCJoaXN0b3J5IiwiaW52b2tlQ29tcHV0ZXJzT25jZSIsImlzVGVtcGxhdGUiLCJpc1F1aWNrRWwiLCJpc0VsIiwic3RyaW5naWZpZWQiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VjdGlvbkNvcHkiLCJwYXJzZSIsImNoYWluUmVzdWx0IiwidXBkYXRlU3RhdGVUZXh0cyIsImNiIiwibG9zdE9wdHMiLCJ1cGRhdGVPcHRpb25zIiwibnVsbCIsIl9yZW1vdmVDaGlsZCIsIkhUTUxFbGVtZW50IiwicHJvdG90eXBlIiwib25FdmVudCIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIlRleHQiLCJub25FbGVtZW50U3VmZml4IiwiZWxlbWVudFN1ZmZpeCIsImNyZWF0b3IiLCJqIiwiRE9NUmVjdCIsIm9yaWdEZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjdXJyZW50IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0UmVhbCIsImRpbWVuc2lvbiIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FsbCIsIm92ZXJ3cml0ZSIsIm92ZXJ3cml0dGVuIiwiZGVmaW5lUHJvcGVydHkiLCJuZXdWYWx1ZSIsImNoYWlTdHlsZSIsInV0aWxzIiwiQXNzZXJ0aW9uIiwiZmxhZyIsInNhbXBsZURpdiIsInNhbXBsZVN0eWxlIiwic2FtcGxlSWZyYW1lIiwiYWRkTWV0aG9kIiwicHJvcGVydHkiLCJlbGVtZW50IiwidHJpbSIsImlzTm9uQ29sb3JzIiwicHJvcGVydHlWYWx1ZSIsImFzc2VydGlvbiIsImNvbXBhcmVDU1NWYWx1ZSIsIkJvb2xlYW4iLCJlbGVtZW50VGFnIiwidGFnTmFtZSIsInRocm93TWVzc2FnZSIsInRocm93TWVzc2FnZU5lZ2F0aXZlIiwiYXNzZXJ0IiwicHJvcGVydHlIaWZlbkNhc2UiLCJtYXRjaCIsInNldFByb3BlcnR5IiwiaGFzQXV0b1ZhbHVlIiwiaW5jbHVkZXMiLCJyZWciLCJSZWdFeHAiLCJlc2NhcGVSZWdFeHAiLCJTdHJpbmciLCJ1c2VkIiwiQXNzZXJ0aW9uRXJyb3IiLCJ1dGlsIiwiZm4iLCJpbmRleE9mIiwiY29yZSIsInNob3VsZCIsImV4Y2x1ZGVzIiwicmVzIiwiZm9yRWFjaCIsImtleSIsImFyZ3MiLCJleGNsdWRlUHJvcHMiLCJtZXNzYWdlIiwiX3Byb3BzIiwic3NmIiwiZXhjbHVkZSIsInNob3dEaWZmIiwiY2FsbGVlIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInN0YWNrIiwiY3JlYXRlIiwidG9KU09OIiwicGF0aHZhbCIsImV4cGVjdFR5cGVzIiwiZ2V0TWVzc2FnZSIsImdldEFjdHVhbCIsImluc3BlY3QiLCJvYmpEaXNwbGF5IiwidHJhbnNmZXJGbGFncyIsImdldFBhdGhJbmZvIiwiaGFzUHJvcGVydHkiLCJnZXROYW1lIiwiYWRkUHJvcGVydHkiLCJvdmVyd3JpdGVQcm9wZXJ0eSIsIm92ZXJ3cml0ZU1ldGhvZCIsImFkZENoYWluYWJsZU1ldGhvZCIsIm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCIsImNvbXBhcmVCeUluc3BlY3QiLCJnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMiLCJjaGVja0Vycm9yIiwicHJveGlmeSIsImFkZExlbmd0aEd1YXJkIiwiaXNQcm94eUVuYWJsZWQiLCJpbmNsdWRlU3RhY2siLCJ1c2VQcm94eSIsInByb3h5RXhjbHVkZWRLZXlzIiwiX2NoYWkiLCJtc2ciLCJzc2ZpIiwibG9ja1NzZmkiLCJjb25zb2xlIiwid2FybiIsImNoYWluaW5nQmVoYXZpb3IiLCJleHByIiwibmVnYXRlTXNnIiwiX2FjdHVhbCIsIm9rIiwiYWN0dWFsIiwidmFsIiwiXyIsImNoYWluIiwiYXJ0aWNsZSIsImNoYXJBdCIsImFuIiwib2JqVHlwZSIsImZsYWdNc2ciLCJuZWdhdGUiLCJpc0RlZXAiLCJkZXNjcmlwdG9yIiwiaW5jbHVkZWQiLCJoYXMiLCJpc0VxbCIsIlNhbWVWYWx1ZVplcm8iLCJpdGVtIiwiZmlyc3RFcnIiLCJudW1FcnJzIiwicHJvcEFzc2VydGlvbiIsImVyciIsImNvbXBhdGlibGVDb25zdHJ1Y3RvciIsImluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yIiwiaXRlbXNDb3VudCIsImNoZWNrQXJndW1lbnRzIiwiX29iaiIsImFzc2VydEVxdWFsIiwiYXNzZXJ0RXFsIiwibiIsImRvTGVuZ3RoIiwibXNnUHJlZml4IiwiblR5cGUiLCJzaG91bGRUaHJvdyIsImVycm9yTWVzc2FnZSIsInByaW50T2JqIiwibGVuIiwiYXNzZXJ0QWJvdmUiLCJhc3NlcnRMZWFzdCIsImFzc2VydEJlbG93IiwiYXNzZXJ0TW9zdCIsInN0YXJ0IiwiZmluaXNoIiwic3RhcnRUeXBlIiwiZmluaXNoVHlwZSIsInJhbmdlIiwidG9VVENTdHJpbmciLCJpc0luc3RhbmNlT2YiLCJUeXBlRXJyb3IiLCJhc3NlcnRJbnN0YW5jZU9mIiwiaXNOZXN0ZWQiLCJpc093biIsInBhdGhJbmZvIiwiaGFzT3duUHJvcGVydHkiLCJleGlzdHMiLCJhc3NlcnRQcm9wZXJ0eSIsImFwcGx5IiwiYXNzZXJ0T3duUHJvcGVydHkiLCJhY3R1YWxEZXNjcmlwdG9yIiwiYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXNzZXJ0TGVuZ3RoIiwiYXNzZXJ0TGVuZ3RoQ2hhaW4iLCJyZSIsImV4ZWMiLCJhc3NlcnRNYXRjaCIsInN0ciIsImlzIiwia2V5c1R5cGUiLCJkZWVwU3RyIiwibWl4ZWRBcmdzTXNnIiwiQXJyYXkiLCJtYXAiLCJhbnkiLCJhbGwiLCJleHBlY3RlZEtleSIsImFjdHVhbEtleSIsImV2ZXJ5IiwibGFzdCIsInBvcCIsImpvaW4iLCJzb3J0IiwiYXNzZXJ0S2V5cyIsImVycm9yTGlrZSIsImVyck1zZ01hdGNoZXIiLCJjYXVnaHRFcnIiLCJldmVyeUFyZ0lzVW5kZWZpbmVkIiwiZXZlcnlBcmdJc0RlZmluZWQiLCJlcnJvckxpa2VGYWlsIiwiZXJyTXNnTWF0Y2hlckZhaWwiLCJlcnJvckxpa2VTdHJpbmciLCJnZXRDb25zdHJ1Y3Rvck5hbWUiLCJ0b1N0cmluZyIsImlzQ29tcGF0aWJsZUluc3RhbmNlIiwiY29tcGF0aWJsZUluc3RhbmNlIiwiaXNDb21wYXRpYmxlQ29uc3RydWN0b3IiLCJwbGFjZWhvbGRlciIsImlzQ29tcGF0aWJsZU1lc3NhZ2UiLCJjb21wYXRpYmxlTWVzc2FnZSIsImFzc2VydFRocm93cyIsIm1ldGhvZCIsIml0c2VsZiIsInJlc3BvbmRUbyIsIm1hdGNoZXIiLCJzYXRpc2Z5IiwiZGVsdGEiLCJNYXRoIiwiYWJzIiwiY2xvc2VUbyIsInN1YnNldCIsInN1cGVyc2V0IiwiY21wIiwiY29udGFpbnMiLCJvcmRlcmVkIiwiZWxlbSIsImlkeCIsIm1hdGNoSWR4Iiwic3BsaWNlIiwiZWxlbTIiLCJzdWJqZWN0IiwiZmFpbE1zZyIsImZhaWxOZWdhdGVNc2ciLCJsZW5ndGhDaGVjayIsImlzU3Vic2V0T2YiLCJsaXN0Iiwib25lT2YiLCJpbml0aWFsIiwiZmluYWwiLCJtc2dPYmoiLCJhc3NlcnRDaGFuZ2VzIiwiYXNzZXJ0SW5jcmVhc2VzIiwiYXNzZXJ0RGVjcmVhc2VzIiwiYmVoYXZpb3IiLCJyZWFsRGVsdGEiLCJleHByZXNzaW9uIiwiYXNzZXJ0RGVsdGEiLCJpc0V4dGVuc2libGUiLCJpc1NlYWxlZCIsImlzRnJvemVuIiwiaXNGaW5pdGUiLCJmYWlsIiwib3BlcmF0b3IiLCJOdW1iZXIiLCJTeW1ib2wiLCJ2YWx1ZU9mIiwic2hvdWxkR2V0dGVyIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwic2hvdWxkU2V0dGVyIiwidmFsMSIsInZhbDIiLCJUaHJvdyIsImVycnQiLCJlcnJzIiwibG9hZFNob3VsZCIsIlNob3VsZCIsImV4cHJlc3MiLCJlcnJtc2ciLCJpc09rIiwiaXNOb3RPayIsImFjdCIsImV4cCIsIm5vdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsImRlZXBFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBFcXVhbCIsImlzQWJvdmUiLCJhYnYiLCJhYm92ZSIsImlzQXRMZWFzdCIsImF0bHN0IiwibGVhc3QiLCJpc0JlbG93IiwiYmx3IiwiYmVsb3ciLCJpc0F0TW9zdCIsImF0bXN0IiwibW9zdCIsImlzVHJ1ZSIsImlzTm90VHJ1ZSIsImlzRmFsc2UiLCJpc05vdEZhbHNlIiwiaXNOdWxsIiwiaXNOb3ROdWxsIiwiTmFOIiwiaXNOb3ROYU4iLCJub3RFeGlzdHMiLCJpc1VuZGVmaW5lZCIsImlzRGVmaW5lZCIsImlzRnVuY3Rpb24iLCJpc05vdEZ1bmN0aW9uIiwiaXNPYmplY3QiLCJpc05vdE9iamVjdCIsImlzQXJyYXkiLCJpc05vdEFycmF5IiwiaXNTdHJpbmciLCJpc05vdFN0cmluZyIsImlzTnVtYmVyIiwiaXNOb3ROdW1iZXIiLCJmaW5pdGUiLCJpc0Jvb2xlYW4iLCJpc05vdEJvb2xlYW4iLCJ0eXBlT2YiLCJub3RUeXBlT2YiLCJub3RJbnN0YW5jZU9mIiwiaW5jIiwibm90SW5jbHVkZSIsImRlZXBJbmNsdWRlIiwibm90RGVlcEluY2x1ZGUiLCJuZXN0ZWRJbmNsdWRlIiwibmVzdGVkIiwibm90TmVzdGVkSW5jbHVkZSIsImRlZXBOZXN0ZWRJbmNsdWRlIiwibm90RGVlcE5lc3RlZEluY2x1ZGUiLCJvd25JbmNsdWRlIiwib3duIiwibm90T3duSW5jbHVkZSIsImRlZXBPd25JbmNsdWRlIiwibm90RGVlcE93bkluY2x1ZGUiLCJub3RNYXRjaCIsIm5vdFByb3BlcnR5IiwicHJvcGVydHlWYWwiLCJub3RQcm9wZXJ0eVZhbCIsImRlZXBQcm9wZXJ0eVZhbCIsIm5vdERlZXBQcm9wZXJ0eVZhbCIsIm93blByb3BlcnR5Iiwibm90T3duUHJvcGVydHkiLCJvd25Qcm9wZXJ0eVZhbCIsIm5vdE93blByb3BlcnR5VmFsIiwiZGVlcE93blByb3BlcnR5VmFsIiwibm90RGVlcE93blByb3BlcnR5VmFsIiwibmVzdGVkUHJvcGVydHkiLCJub3ROZXN0ZWRQcm9wZXJ0eSIsIm5lc3RlZFByb3BlcnR5VmFsIiwibm90TmVzdGVkUHJvcGVydHlWYWwiLCJkZWVwTmVzdGVkUHJvcGVydHlWYWwiLCJub3REZWVwTmVzdGVkUHJvcGVydHlWYWwiLCJsZW5ndGhPZiIsImhhc0FueUtleXMiLCJoYXNBbGxLZXlzIiwiY29udGFpbnNBbGxLZXlzIiwiZG9lc05vdEhhdmVBbnlLZXlzIiwiZG9lc05vdEhhdmVBbGxLZXlzIiwiaGFzQW55RGVlcEtleXMiLCJoYXNBbGxEZWVwS2V5cyIsImNvbnRhaW5zQWxsRGVlcEtleXMiLCJkb2VzTm90SGF2ZUFueURlZXBLZXlzIiwiZG9lc05vdEhhdmVBbGxEZWVwS2V5cyIsInRocm93cyIsImFzc2VydEVyciIsImRvZXNOb3RUaHJvdyIsImFwcHJveGltYXRlbHkiLCJzYW1lTWVtYmVycyIsInNldDEiLCJzZXQyIiwic2FtZSIsIm1lbWJlcnMiLCJub3RTYW1lTWVtYmVycyIsInNhbWVEZWVwTWVtYmVycyIsIm5vdFNhbWVEZWVwTWVtYmVycyIsInNhbWVPcmRlcmVkTWVtYmVycyIsIm5vdFNhbWVPcmRlcmVkTWVtYmVycyIsInNhbWVEZWVwT3JkZXJlZE1lbWJlcnMiLCJub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzIiwiaW5jbHVkZU1lbWJlcnMiLCJub3RJbmNsdWRlTWVtYmVycyIsImluY2x1ZGVEZWVwTWVtYmVycyIsIm5vdEluY2x1ZGVEZWVwTWVtYmVycyIsImluY2x1ZGVPcmRlcmVkTWVtYmVycyIsIm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyIsImluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMiLCJub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzIiwiaW5MaXN0IiwiY2hhbmdlcyIsImNoYW5nZSIsImNoYW5nZXNCeSIsInRtcE1zZyIsImJ5IiwiZG9lc05vdENoYW5nZSIsImNoYW5nZXNCdXROb3RCeSIsImJ1dCIsImluY3JlYXNlcyIsImluY3JlYXNlIiwiaW5jcmVhc2VzQnkiLCJkb2VzTm90SW5jcmVhc2UiLCJpbmNyZWFzZXNCdXROb3RCeSIsImRlY3JlYXNlcyIsImRlY3JlYXNlIiwiZGVjcmVhc2VzQnkiLCJkb2VzTm90RGVjcmVhc2UiLCJkb2VzTm90RGVjcmVhc2VCeSIsImRlY3JlYXNlc0J1dE5vdEJ5IiwiaWZFcnJvciIsImV4dGVuc2libGUiLCJpc05vdEV4dGVuc2libGUiLCJzZWFsZWQiLCJpc05vdFNlYWxlZCIsImZyb3plbiIsImlzTm90RnJvemVuIiwiaXNFbXB0eSIsImlzTm90RW1wdHkiLCJhcyIsImFsaWFzIiwicGF0aCIsInBhcnRzIiwicmVnZXhwIiwibUFyciIsInBhcnNlZCIsInAiLCJwYXRoRGVwdGgiLCJ0ZW1wb3JhcnlWYWx1ZSIsInBhcnQiLCJ0ZW1wT2JqIiwicHJvcE5hbWUiLCJwcm9wVmFsIiwicGFyc2VQYXRoIiwiaW5mbyIsImludGVybmFsR2V0UGF0aFZhbHVlIiwiaW50ZXJuYWxTZXRQYXRoVmFsdWUiLCJnZXRQYXRoVmFsdWUiLCJzZXRQYXRoVmFsdWUiLCJwcm9taXNlRXhpc3RzIiwiZ2xvYmFsT2JqZWN0IiwiZ2xvYmFsIiwic2VsZiIsImlzRG9tIiwic3ltYm9sRXhpc3RzIiwibWFwRXhpc3RzIiwiTWFwIiwic2V0RXhpc3RzIiwiU2V0Iiwid2Vha01hcEV4aXN0cyIsIldlYWtNYXAiLCJ3ZWFrU2V0RXhpc3RzIiwiV2Vha1NldCIsImRhdGFWaWV3RXhpc3RzIiwiRGF0YVZpZXciLCJzeW1ib2xJdGVyYXRvckV4aXN0cyIsIml0ZXJhdG9yIiwic3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMiLCJ0b1N0cmluZ1RhZyIsInNldEVudHJpZXNFeGlzdHMiLCJlbnRyaWVzIiwibWFwRW50cmllc0V4aXN0cyIsInNldEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJtYXBJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3JFeGlzdHMiLCJhcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwic3RyaW5nSXRlcmF0b3JFeGlzdHMiLCJzdHJpbmdJdGVyYXRvclByb3RvdHlwZSIsInRvU3RyaW5nTGVmdFNsaWNlTGVuZ3RoIiwidG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoIiwidHlwZW9mT2JqIiwibmF2aWdhdG9yIiwibWltZVR5cGVzIiwicGx1Z2lucyIsInN0cmluZ1RhZyIsIm9ialByb3RvdHlwZSIsIkRhdGUiLCJ0eXBlRGV0ZWN0IiwidCIsImFydCIsIm9yIiwiZ2V0UHJvcGVydGllcyIsImdldEVudW1lcmFibGVQcm9wZXJ0aWVzIiwic2hvd0hpZGRlbiIsImRlcHRoIiwiY29sb3JzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJmb3JtYXRWYWx1ZSIsImlzRE9NRWxlbWVudCIsIm9iamVjdCIsInJlY3Vyc2VUaW1lcyIsInJldCIsInByaW1pdGl2ZSIsImZvcm1hdFByaW1pdGl2ZSIsIm91dGVySFRNTCIsInhtbFZlcnNpb24iLCJ4bWxTZXJpYWxpemVyIiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwibnMiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50TlMiLCJjbG9uZU5vZGUiLCJ2aXNpYmxlS2V5cyIsIm5hbWVTdWZmaXgiLCJpc0Vycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJmb3JtYXRFcnJvciIsImJhc2UiLCJhcnJheSIsInR5cGVkQXJyYXkiLCJicmFjZXMiLCJpc1R5cGVkQXJyYXkiLCJvdXRwdXQiLCJmb3JtYXRBcnJheSIsImZvcm1hdFR5cGVkQXJyYXkiLCJmb3JtYXRQcm9wZXJ0eSIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwic2ltcGxlIiwiSW5maW5pdHkiLCJsIiwicHJvcERlc2NyaXB0b3IiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJudW1MaW5lc0VzdCIsInJlZHVjZSIsImN1ciIsImFyIiwib2JqZWN0VG9TdHJpbmciLCJvIiwia3N0ciIsImZsYWdzIiwiX19mbGFncyIsImluY2x1ZGVBbGwiLCJfa2V5IiwicmFuZG9tIiwibm93IiwiRmFrZU1hcCIsIk1lbW9pemVNYXAiLCJsZWZ0SGFuZE9wZXJhbmQiLCJyaWdodEhhbmRPcGVyYW5kIiwibWVtb2l6ZU1hcCIsImlzUHJpbWl0aXZlIiwibGVmdEhhbmRNYXAiLCJjb21wYXJhdG9yIiwiZXh0ZW5zaXZlRGVlcEVxdWFsIiwic2ltcGxlUmVzdWx0Iiwic2ltcGxlRXF1YWwiLCJtZW1vaXplIiwibWVtb2l6ZVJlc3VsdExlZnQiLCJtZW1vaXplQ29tcGFyZSIsIm1lbW9pemVSZXN1bHRSaWdodCIsImNvbXBhcmF0b3JSZXN1bHQiLCJtZW1vaXplU2V0IiwibGVmdEhhbmRUeXBlIiwiZXh0ZW5zaXZlRGVlcEVxdWFsQnlUeXBlIiwiaXRlcmFibGVFcXVhbCIsInJlZ2V4cEVxdWFsIiwiZ2VuZXJhdG9yRXF1YWwiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiZW50cmllc0VxdWFsIiwib2JqZWN0RXF1YWwiLCJsZWZ0SGFuZEl0ZW1zIiwicmlnaHRIYW5kSXRlbXMiLCJnZXRHZW5lcmF0b3JFbnRyaWVzIiwiaGFzSXRlcmF0b3JGdW5jdGlvbiIsIml0ZXJhdG9yRXJyb3IiLCJnZW5lcmF0b3IiLCJnZW5lcmF0b3JSZXN1bHQiLCJhY2N1bXVsYXRvciIsImRvbmUiLCJsZWZ0SGFuZEtleXMiLCJnZXRFbnVtZXJhYmxlS2V5cyIsInJpZ2h0SGFuZEtleXMiLCJrZXlzRXF1YWwiLCJsZWZ0SGFuZEVudHJpZXMiLCJnZXRJdGVyYXRvckVudHJpZXMiLCJyaWdodEhhbmRFbnRyaWVzIiwiRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWVNYXRjaCIsImFGdW5jIiwiZ2V0RnVuY05hbWUiLCJnZXR0ZXIiLCJwcm9wZXJ0eUdldHRlciIsIm5ld0Fzc2VydGlvbiIsIm1ldGhvZFdyYXBwZXIiLCJfZ2V0IiwiX3N1cGVyIiwib3ZlcndyaXRpbmdQcm9wZXJ0eUdldHRlciIsIm9yaWdMb2NrU3NmaSIsIl9tZXRob2QiLCJvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIiLCJjYW5TZXRQcm90b3R5cGUiLCJzZXRQcm90b3R5cGVPZiIsInRlc3RGbiIsImV4Y2x1ZGVOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJmaWx0ZXIiLCJwcm9wRGVzYyIsImNoYWluYWJsZUJlaGF2aW9yIiwiX19tZXRob2RzIiwiY2hhaW5hYmxlTWV0aG9kV3JhcHBlciIsImFzc2VydGVyTmFtZXMiLCJhc3NlcnRlck5hbWUiLCJwZCIsIl9jaGFpbmluZ0JlaGF2aW9yIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltIiwidGhyb3duIiwiZXJyTWF0Y2hlciIsImNvbXBhcmlzb25TdHJpbmciLCJjb25zdHJ1Y3RvckZuIiwiY29uc3RydWN0b3JOYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiYnVpbHRpbnMiLCJub25DaGFpbmFibGVNZXRob2ROYW1lIiwiUHJveHkiLCJSZWZsZWN0Iiwib3JkZXJlZFByb3BlcnRpZXMiLCJzdHJpbmdEaXN0YW5jZSIsInByb3h5R2V0dGVyIiwic3RyQSIsInN0ckIiLCJtZW1vIiwibWF4IiwibWluIiwiZm5MZW5ndGhEZXNjIiwiYXNzZXJ0aW9uTmFtZSIsImlzQ2hhaW5hYmxlIiwicHJvdG8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBQTtLQUFDQyxhQUVpQjtBQURsQixLQUFDQyxNQUFNLEtBQUNDLE1BQU1DLE9BQU9DO0FBQ3JCQyxNQUFNQyxNQUFNO0FBQ1pELE1BQU1FLEtBQUs7QUFDWEYsTUFBTUcsUUFBUTtBQUNkLEtBQW9CTCxPQUFPTSxTQUFTQyxVQUFwQ0w7TUFBTU07O0FBQ05aLE9BVU87QUFUUEEsS0FBS2EsSUFXSTtBQVZUYixLQUFLYyxPQUFPQyxvQkFBb0I7QUFDaEMsRUFBQyxVQUFVZjtBQUVYZ0IsVUFBVTtBQUNWQyxpQkFBaUI7QUFDaEIsSUFBOENELFNBQTlDQTtRQUFRRSxjQUFjQyxZQUFZSDs7QUFDbENBLFVBQVVJLFNBQVNDLGNBQWM7QUFDakNMLFFBQVFNLEtBQUs7QUFDYk4sUUFBUU8sYUFBYSxTQUFTO09BQzlCSCxTQUFTSSxLQUFLQyxZQUFZVDs7QUFFM0JVLHNCQUFzQixVQUFDQyxNQUFEO09BQVMsYUFBQ0MsVUFBRDtBQUM5QkM7T0FBT0YsS0FBS0MsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTUosU0FBU0U7QUFDL0NHOztBQUNDQyxPQUFPUCxLQUFLQyxTQUFTSyxRQUFRRixHQUFHQyxNQUFNSDtBQUN0Q0ssT0FBT0wsTUFBTU0sR0FBR0MsWUFBWUwsR0FBR0MsTUFBTUwsS0FBS1E7QUFDMUNELE9BQU9MLE1BQU1RLFFBQVFOLEdBQUdDLE1BQU1MOzs7O0FBSWhDVyxNQUFNLFlBQVk7QUFDakIvQixNQUFNVTtBQUVOc0IsS0FBSyxvQkFBb0I7QUFDeEJDO2lCQ2hDRjtPRGlDRU4sT0FBT2hDLElBQUl1QyxTQUFTVixHQUFHQyxNQUFNUTs7QUFHOUJGLE1BQU0sb0JBQW9CO0FBQ3pCQyxLQUFLLGtCQUFrQjtBQUN0Qkc7TUFBTXhDLElBQUk7QUFDVmdDLE9BQU8sT0FBT1EsS0FBS1gsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTyxPQUFPUSxJQUFJUCxJQUFJSixHQUFHQyxNQUFNO0FBQy9CRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHWSxHQUFHQyxXQUFXeEMsT0FBT3lDO0FBQ3ZDWCxPQUFPUSxJQUFJTCxRQUFRTixHQUFHWSxHQUFHRztPQUN6QlosT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTs7QUFHdENPLEtBQUssYUFBYTtBQUNqQlE7T0FBTzdDLElBQUk4QyxJQUFJYixHQUFHYyxhQUFhbEIsR0FBR0MsTUFBTTlCLElBQUksS0FBS2lDLEdBQUdjO0FBQ3BEZixPQUFPaEMsSUFBSWdELE9BQU9mLEdBQUdjLGFBQWFsQixHQUFHQyxNQUFNOUIsSUFBSSxLQUFLaUMsR0FBR2M7QUFDdkRmLE9BQU9oQyxJQUFJaUQsU0FBU2hCLEdBQUdjLGFBQWFsQixHQUFHQyxNQUFNOUIsSUFBSSxLQUFLaUMsR0FBR2M7QUFDekRmLE9BQU9oQyxJQUFJd0MsTUFBTVAsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLE9BQU9pQyxHQUFHYztBQUN4RGYsT0FBT2hDLElBQUlrRCxPQUFPakIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFFBQVFpQyxHQUFHYztBQUMxRGYsT0FBT2hDLElBQUltRCxPQUFPbEIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFFBQVFpQyxHQUFHYztBQUMxRGYsT0FBT2hDLElBQUlvRCxLQUFLbkIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLE1BQU1pQyxHQUFHYztBQUN0RGYsT0FBT2hDLElBQUlxRCxTQUFTcEIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFVBQVVpQyxHQUFHYztBQUM5RGYsT0FBT2hDLElBQUlzRCxTQUFTckIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFVBQVVpQyxHQUFHYztBQUM5RGYsT0FBT2hDLElBQUl1RCxVQUFVdEIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFdBQVdpQyxHQUFHYztBQUNoRWYsT0FBT2hDLElBQUl3RCxTQUFTdkIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFVBQVVpQyxHQUFHYztBQUM5RGYsT0FBT2hDLElBQUl5RCxRQUFReEIsR0FBR2MsYUFBYWxCLEdBQUdDLE1BQU05QixJQUFJLFNBQVNpQyxHQUFHYztBQUU1RFcsUUFBUSxDQUFDLEtBQUksT0FBTSxRQUFPLFFBQU8sTUFBSyxVQUFTLFVBQVMsV0FBVSxVQUFTO0FBQzNFYjs7QUFDQ2IsT0FBT2hDLElBQUkyRCxRQUFRMUIsR0FBR2MsWUFBWWEsTUFBTUMsSUFBSWhDLEdBQUdpQyxRQUFROzs7QUFJekR6QixLQUFLLGlCQUFpQjtBQUNyQjBCO0lBQUkvRCxJQUFJd0MsSUFBSXdCO09BQU07QUFBV0MsT0FBTTtBQUFDLE9BQU07QUFBSyxPQUFNOzs7QUFDckRDLElBQUlsRSxJQUFJd0MsSUFBSXBCO0lBQUc7QUFBSytDLFdBQVU7QUFBV0MsT0FBTTtBQUFDLFlBQVc7QUFBSyxZQUFXOzs7QUFDM0VDLElBQUlyRSxJQUFJeUQsTUFBTUU7TUFBSztBQUFRQyxNQUFLO0FBQU9VLE9BQU07O0FBQzdDQyxJQUFJdkUsSUFBSXlELE1BQU1FO01BQUs7QUFBWWEsU0FBUTs7QUFDdkNDLElBQUl6RSxJQUFJMEUsT0FBT2Q7TUFBSztBQUFPVSxPQUFNO0FBQVNLLFVBQVM7O0FBQ25EQyxJQUFJNUUsSUFBSWdELEtBQUs2QjtNQUFLOztBQUNsQkMsSUFBSTlFLElBQUlpRCxPQUFPOEI7S0FBSTs7QUFDbkJDLElBQUloRixJQUFJa0QsS0FBSztBQUNiK0IsSUFBSWpGLElBQUlrRixJQUFJQztLQUFJOztBQUNoQkMsSUFBSXBGLElBQUl3QyxJQUFJNkM7aUJBQWlCQyxNQUFJO0FBQUN4QyxHQUFFOzs7QUFFcENkLE9BQU8rQixFQUFFOUIsR0FBR2tDLFdBQVd0QyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPK0IsRUFBRTlCLEdBQUdzRCxLQUFLMUQsR0FBR0MsTUFBTTtBQUMxQkUsT0FBTytCLEVBQUU5QixHQUFHdUQsS0FBSzNELEdBQUdDLE1BQU07QUFDMUJFLE9BQU9rQyxFQUFFakMsR0FBR2tDLFdBQVd0QyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPa0MsRUFBRWpDLEdBQUdiLElBQUlTLEdBQUdDLE1BQU07QUFDekJFLE9BQU9rQyxFQUFFakMsR0FBR3dELGFBQWEsYUFBYTVELEdBQUdDLE1BQU07QUFDL0NFLE9BQU9rQyxFQUFFakMsR0FBR3dELGFBQWEsYUFBYTVELEdBQUdDLE1BQU07QUFDL0MsSUFBNENvQyxFQUFFakMsR0FBR3lELFNBQWpEMUQ7T0FBT2tDLEVBQUVqQyxHQUFHeUQsUUFBUUgsS0FBSzFELEdBQUdDLE1BQU07O0FBQ2xDRSxPQUFPcUMsRUFBRXBDLEdBQUcwQixNQUFNOUIsR0FBR0MsTUFBTTtBQUMzQkUsT0FBT3FDLEVBQUVwQyxHQUFHMkIsTUFBTS9CLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9xQyxFQUFFcEMsR0FBR3FDLE9BQU96QyxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPdUMsRUFBRXRDLEdBQUd1QyxTQUFTM0MsR0FBR0MsTUFBTTtBQUM5QkUsT0FBT3lDLEVBQUV4QyxHQUFHMkIsTUFBTS9CLEdBQUdDLE1BQU07QUFDM0JFLE9BQU95QyxFQUFFeEMsR0FBRzBDLFVBQVU5QyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPNEMsRUFBRTNDLEdBQUc0QyxNQUFNaEQsR0FBR0MsTUFBTTtBQUMzQkUsT0FBTzhDLEVBQUU3QyxHQUFHNEMsTUFBTWhELEdBQUdDLE1BQU07QUFDM0JFLE9BQU9nRCxFQUFFL0MsR0FBRzBELFVBQVU5RCxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPZ0QsRUFBRS9DLEdBQUcyRCxhQUFhL0QsR0FBR0MsTUFBTTtBQUNsQ0UsT0FBT2lELEVBQUVoRCxHQUFHa0QsS0FBS3RELEdBQUdDLE1BQU07QUFDMUJFLE9BQU9vRCxFQUFFUyxTQUFTaEUsR0FBR0MsTUFBTXdEO09BQzNCdEQsT0FBT29ELEVBQUVVLFFBQVFELFNBQVNoRSxHQUFHQyxNQUFNd0Q7O0FBR3BDakQsS0FBSyx3QkFBd0I7QUFDNUIwQjtJQUFJL0QsSUFBSXdDLElBQUksTUFBTTtBQUNsQjBCLElBQUlsRSxJQUFJd0MsSUFBSSxNQUFNeEMsSUFBSW1ELFFBQVEsYUFBYW5ELElBQUltRDtBQUUvQ25CLE9BQU8rQixFQUFFOUIsR0FBRzhELFdBQVduRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPK0IsRUFBRTlCLEdBQUdQLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDdENFLE9BQU8rQixFQUFFOUIsR0FBRzhELFdBQVcsR0FBR0osVUFBVTlELEdBQUdDLE1BQU07QUFDN0NFLE9BQU8rQixFQUFFOUIsR0FBRzhELFdBQVcsR0FBR0gsYUFBYS9ELEdBQUdDLE1BQU07QUFDaERFLE9BQU8rQixFQUFFckMsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFDeENFLE9BQU9rQyxFQUFFakMsR0FBR1AsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBVyxHQUFHSixVQUFVOUQsR0FBR0MsTUFBTTtBQUM3Q0UsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBVyxHQUFHQyxTQUFTQyxlQUFlcEUsR0FBR0MsTUFBTTtBQUMzREUsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBVyxHQUFHSixVQUFVOUQsR0FBR0MsTUFBTTtBQUM3Q0UsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBVyxHQUFHSCxhQUFhL0QsR0FBR0MsTUFBTTtBQUNoREUsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBVyxHQUFHSixVQUFVOUQsR0FBR0MsTUFBTTtBQUM3Q0UsT0FBT2tDLEVBQUVqQyxHQUFHOEQsV0FBVyxHQUFHQyxTQUFTQyxlQUFlcEUsR0FBR0MsTUFBTTtPQUMzREUsT0FBT2tDLEVBQUV4QyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNOztBQUdwQ08sS0FBSyxnQkFBZ0I7QUFDcEJrQjtVQUFVdkQsSUFDVCxDQUFDLFdBQVc7QUFBQ2tHLE9BQU1DO1NBQVE7O0dBQzFCLENBQUMsT0FBTyxNQUFNLFdBQ2QsQ0FBQyxRQUFRLE1BQ1IsQ0FBQyxVQUFVLE1BQU0sWUFFbEIsQ0FBQyxPQUFPLE1BQU0sVUFDYixDQUFDLFFBQVEsTUFBTSxhQUNmLENBQUMsUUFBUSxNQUFNLGVBR2hCQyxTQUFTdEY7QUFFWGtCLE9BQU91QixTQUFTTSxJQUFJaEMsR0FBR0MsTUFBTTtBQUM3QkUsT0FBT3VCLFFBQVE4QyxLQUFLeEUsR0FBR3lFLEtBQUtKLE1BQU0sV0FBVztBQUM3Q2xFLE9BQU91QixRQUFRN0IsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUdBLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDckRFLE9BQU91QixRQUFRN0IsU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JERSxPQUFPdUIsUUFBUTdCLFNBQVMsR0FBR0EsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyREUsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUdBLFNBQVMsR0FBR0EsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNqRUUsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUdBLFNBQVMsR0FBR0EsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNqRUUsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUd3QixNQUFNckIsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUd3QixNQUFNckIsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUd3QixNQUFNckIsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUdBLFNBQVMsR0FBR3dCLE1BQU1yQixHQUFHQyxNQUFNO09BQ3RERSxPQUFPdUIsUUFBUTdCLFNBQVMsR0FBR0EsU0FBUyxHQUFHd0IsTUFBTXJCLEdBQUdDLE1BQU07O0FBR3ZETyxLQUFLLG9CQUFvQjtBQUN4QjBCO1NBQVM3QyxTQUFTQyxjQUFjO0FBQ2hDNEMsSUFBSS9ELElBQUl1RztBQUNSckMsSUFBSWxFLElBQUl1RztBQUNSbEMsSUFBSXJFLElBQUkrRDtBQUVSL0IsT0FBTytCLEVBQUU5QixJQUFJSixHQUFHQyxNQUFNeUU7QUFDdEJ2RSxPQUFPa0MsRUFBRWpDLElBQUlKLEdBQUdDLE1BQU15RTtBQUN0QnZFLE9BQU9xQyxFQUFFcEMsSUFBSUosR0FBR0MsTUFBTXlFO0FBQ3RCdkUsT0FBTytCLEdBQUdsQyxHQUFHQyxNQUFNb0M7QUFDbkJsQyxPQUFPa0MsR0FBR3JDLEdBQUdDLE1BQU11QztPQUNuQnJDLE9BQU9xQyxHQUFHeEMsR0FBR0MsTUFBTXlFLE9BQU9DOztBQUczQm5FLEtBQUssK0JBQStCO0FBQ25DRztTQUFTdEIsU0FBU0MsY0FBYztBQUNoQ29GLE9BQU9uRixLQUFLO0FBRVpvQixNQUFNeEMsSUFBSXVHLFFBQVE7QUFBQ25GLElBQUc7QUFBSzRDLE9BQU07O0FBQ2pDaEMsT0FBT3VFLE9BQU9uRixJQUFJUyxHQUFHQyxNQUFNO0FBQzNCRSxPQUFPdUUsT0FBT3BDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRWxDVSxNQUFNeEMsSUFBSXdDLEtBQUs7QUFBQ3BCLElBQUc7QUFBSzRDLE9BQU07O0FBQzlCaEMsT0FBT3VFLE9BQU9uRixJQUFJUyxHQUFHQyxNQUFNO09BQzNCRSxPQUFPdUUsT0FBT3BDLFdBQVd0QyxHQUFHQyxNQUFNOztBQUduQ08sS0FBSyw0Q0FBNEM7QUFDaEQwQjtPQUFPN0MsU0FBU0MsY0FBYztBQUM5QnNGLE9BQU92RixTQUFTQyxjQUFjO0FBQzlCdUYsT0FBT3hGLFNBQVNDLGNBQWM7QUFDOUJnQixTQUFTakIsU0FBU0MsY0FBYztBQUNoQ2dCLE9BQU9aLFlBQVlvRjtBQUFPeEUsT0FBT1osWUFBWWtGO0FBQU90RSxPQUFPWixZQUFZbUY7QUFDdkUzQyxJQUFJL0QsSUFBSSxDQUFDMkcsTUFBTUYsTUFBTUM7QUFDckJ4QyxJQUFJbEUsSUFBSW1DLE9BQU95RSxpQkFBaUI7QUFDaEN2QyxJQUFJckUsSUFBSWtFO0FBRVJsQyxPQUFPK0IsRUFBRTlCLElBQUlKLEdBQUdDLE1BQU02RTtBQUN0QjNFLE9BQU9rQyxFQUFFakMsSUFBSUosR0FBR0MsTUFBTTZFO0FBQ3RCM0UsT0FBT3FDLEVBQUVwQyxJQUFJSixHQUFHQyxNQUFNNkU7QUFDdEIzRSxPQUFPK0IsR0FBR2xDLEdBQUdDLE1BQU1vQztBQUNuQmxDLE9BQU9rQyxHQUFHckMsR0FBR0MsTUFBTXVDO09BQ25CckMsT0FBT3FDLEdBQUd4QyxHQUFHQyxNQUFNNkUsS0FBS0g7O0FBSXpCbkUsS0FBSyxpQkFBaUI7QUFDckJ3RTtNQUFNN0csSUFBSWtCO0FBQ1ZjLE9BQU82RSxLQUFLaEQsSUFBSWhDLEdBQUdZLEdBQUdHO0FBQ3RCWixPQUFPNkUsSUFBSVIsS0FBS3hFLEdBQUdDLE1BQU1aO0FBQ3pCYyxPQUFPNkUsSUFBSTFFLFFBQVFOLEdBQUdDLE1BQU07QUFDNUJFLE9BQU82RSxJQUFJbkYsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT2hDLElBQUljLFNBQVNnRyxTQUFTakQsSUFBSWhDLEdBQUdpQyxRQUFRK0M7T0FDNUM3RSxPQUFPaEMsSUFBSWMsU0FBU2dHLFNBQVNqRixHQUFHaUMsUUFBUStDLElBQUluRixTQUFTOztBQUd0RFcsS0FBSyxpQkFBaUI7QUFDckIwRTtNQUFNL0csSUFBSUU7QUFDVjhCLE9BQU8rRSxLQUFLbEQsSUFBSWhDLEdBQUdZLEdBQUdHO0FBQ3RCWixPQUFPK0UsSUFBSVYsUUFBT25HLFFBQVEyQixHQUFHWSxHQUFHdUU7QUFDaENoRixPQUFPK0UsSUFBSTVFLFFBQVFOLEdBQUdDLE1BQU07QUFDNUJFLE9BQU8rRSxJQUFJckYsVUFBVUcsR0FBR0MsTUFBTTtBQUM5QkUsT0FBTytFLElBQUlFLFFBQVFwRixHQUFHQyxNQUFNO0FBQzVCRSxPQUFPK0UsSUFBSUcsTUFBTXJGLEdBQUdDLE1BQU07QUFDMUJFLE9BQU8rRSxJQUFJYixPQUFPckUsR0FBR0MsTUFBTTtPQUMzQkUsT0FBT2hDLElBQUljLFNBQVNnRyxTQUFTakQsSUFBSWhDLEdBQUdpQyxRQUFRaUQ7O0FBRzdDMUUsS0FBSyx1QkFBdUI7QUFDM0I4RTtNQUFNbkgsSUFBSXdDLElBQUkwRDtPQUNiO1NBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUztBQUNULG9CQUFvQjtBQUNwQixrQkFBa0I7OztBQUVuQnBGLFFBQVFTLFlBQVlpQixJQUFJUDtBQUN4QmtGLGdCQUFnQkMsaUJBQWlCNUUsSUFBSVA7QUFFckNELE9BQU9RLElBQUkwRCxNQUFNbUIsT0FBT3hGLEdBQUdDLE1BQU07QUFDakNFLE9BQU9tRixjQUFjRSxPQUFPeEYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFDdENFLE9BQU9tRixjQUFjSyxpQkFBaUIzRCxJQUFJaEMsR0FBR0MsTUFBTTtPQUNuREUsT0FBT21GLGNBQWNNLGdCQUFnQjVGLEdBQUdDLE1BQU07O0FBRy9DTyxLQUFLLHNFQUFzRTtBQUMxRXFGO1NBQVMxSCxJQUFJLE9BQU9pQztBQUNwQjBGLFVBQVUzSCxJQUFJLFFBQVFpQztBQUN0QjJGLGFBQWE1SCxJQUFJLFlBQVlpQztBQUM3QjRGLGNBQWM3SCxJQUFJLGFBQWFpQztBQUMvQjZGLFNBQVM5SCxJQUFJLFFBQVFpQztBQUNyQnlGLFNBQVMxSCxJQUFJLE9BQU9pQztBQUVwQkQsT0FBTytGLFFBQVFsRyxHQUFHWSxHQUFHQyxXQUFXc0Y7QUFDaENoRyxPQUFPNEYsWUFBWS9GLEdBQUdZLEdBQUdDLFdBQVdzRjtBQUNwQ2hHLE9BQU8yRixTQUFTOUYsR0FBR1ksR0FBR0MsV0FBV3VGO0FBQ2pDakcsT0FBTzZGLGFBQWFoRyxHQUFHWSxHQUFHQyxXQUFXd0Y7T0FFckNsRyxPQUFPOEYsT0FBTy9FLGFBQWFjLElBQUloQyxHQUFHQyxNQUFNNEYsT0FBTzNFOztBQUdoRFYsS0FBSyx5R0FBeUc7QUFDN0c4RjthQUFhO0FBS2JqSSxPQUFPa0ksUUFBUXBJLElBQUlrSCxLQUFLaUI7QUFFeEJuRyxPQUFPLE9BQU9vRyxPQUFPdkcsR0FBR0MsTUFBTTtBQUM5QkUsT0FBT29HLE1BQU1yRixZQUFZYSxNQUFNL0IsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT29HLE1BQU1DLFNBQVN6RyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPb0csTUFBTUMsU0FBUyxHQUFHMUUsTUFBTTlCLEdBQUdDLE1BQU07QUFDeENFLE9BQU9vRyxNQUFNQyxTQUFTLEdBQUcxRSxNQUFNOUIsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT29HLE1BQU1DLFNBQVMsR0FBRzFFLE1BQU05QixHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPb0csTUFBTUMsU0FBUyxHQUFHMUUsTUFBTTlCLEdBQUdDLE1BQU07QUFDeENFLE9BQU9vRyxNQUFNQyxTQUFTLEdBQUduRixNQUFNckIsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT29HLE1BQU1DLFNBQVMsR0FBR25GLE1BQU1yQixHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPb0csTUFBTUMsU0FBUyxHQUFHbkYsTUFBTXJCLEdBQUd5RyxRQUFRO09BQzFDdEcsT0FBT29HLE1BQU1DLFNBQVMsR0FBR25GLE1BQU1yQixHQUFHQyxNQUFNOztBQUd6Q08sS0FBSywyQkFBMkI7QUFDL0JHO01BQU14QyxJQUFJO0FBQ1ZnQyxPQUFPUSxJQUFJNkQsS0FBS3hFLEdBQUdDLE1BQU1VLElBQUlQO0FBQzdCRCxPQUFPUSxJQUFJLElBQUlYLEdBQUdDLE1BQU1VLElBQUlQO0FBQzVCRCxPQUFPUSxJQUFJK0YsS0FBSzFHLEdBQUdDLE1BQU1VLElBQUkwRDtBQUM3QmxFLE9BQU9RLElBQUlnRyxhQUFhM0csR0FBR0MsTUFBTVUsSUFBSWlHO0FBQ3JDekcsT0FBT1EsSUFBSWtHLGdCQUFnQjdHLEdBQUdDLE1BQU1VLElBQUltRztPQUN4QzNHLE9BQU9RLElBQUlrRyxlQUFlOztPQUczQnJHLEtBQUsseUNBQXlDO0FBQzdDdUc7T0FBTzVJLElBQUl3QztBQUNYcUcsT0FBTzdJLElBQUl3QyxJQUFJc0c7U0FDZEM7V0FDQ0M7S0FBSztPQUFLLEtBQUMzQyxJQUFJMEM7OztBQUNoQkUsUUFDQ0Q7S0FBSztPQUFLLEtBQUMzQyxJQUFJNEM7OztBQUNoQjNFLE9BQ0MwRTtLQUFLO09BQUssS0FBQzNDLElBQUkvQjs7QUFDZjRFLEtBQUssVUFBQzVFLE9BQUQ7T0FBVSxLQUFDK0IsSUFBSS9CLFFBQVFBOzs7QUFDN0JWLE1BQU07QUFDTnVGLFVBQVU7T0FBSyxLQUFDcEgsUUFBUTs7OztBQUV6QmpCLFFBQVFtRyxPQUFPMkI7QUFDZjlILFFBQVFtRyxPQUFPNEI7QUFDZkQsS0FBS3ZDLElBQUkvQixRQUFRdUUsS0FBS3hDLElBQUkvQixRQUFRO0FBRWxDdEMsT0FBTyxPQUFPNEcsS0FBS0csV0FBV2xILEdBQUdDLE1BQU07QUFDdkNFLE9BQU8sT0FBTzZHLEtBQUtFLFdBQVdsSCxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPLE9BQU80RyxLQUFLdEUsT0FBT3pDLEdBQUdDLE1BQU07QUFDbkNFLE9BQU8sT0FBTzZHLEtBQUt2RSxPQUFPekMsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBTyxPQUFPNEcsS0FBS2hGLE1BQU0vQixHQUFHQyxNQUFNO0FBQ2xDRSxPQUFPLE9BQU82RyxLQUFLakYsTUFBTS9CLEdBQUdDLE1BQU07QUFDbENFLE9BQU8sT0FBTzRHLEtBQUtPLFVBQVV0SCxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPLE9BQU82RyxLQUFLTSxVQUFVdEgsR0FBR0MsTUFBTTtBQUV0Q0UsT0FBTzZHLEtBQUtFLFdBQVdsSCxHQUFHQyxNQUFNK0csS0FBS3hDLElBQUkwQztBQUV6Q0YsS0FBS3hDLElBQUk0QyxTQUFTO0FBQ2xCakgsT0FBTzZHLEtBQUtJLFFBQVFwSCxHQUFHQyxNQUFNO0FBRTdCK0csS0FBS0ksU0FBUztBQUNkakgsT0FBTzZHLEtBQUtJLFFBQVFwSCxHQUFHQyxNQUFNO0FBRTdCRSxPQUFPNkcsS0FBS3ZFLE9BQU96QyxHQUFHQyxNQUFNO0FBQzVCK0csS0FBS3ZFLFFBQVE7QUFDYnRDLE9BQU82RyxLQUFLdkUsT0FBT3pDLEdBQUdDLE1BQU07T0FFNUJFLE9BQU82RyxLQUFLTSxZQUFZdEgsR0FBR0MsTUFBTStHLEtBQUs5RyxRQUFNOzs7QUFHOUNLLE1BQU0sVUFBVTtBQUNmQyxLQUFLLGdEQUFnRDtBQUNwREc7YUFBYTRHLGFBQWE7QUFDMUI1RyxNQUFNeEMsSUFBSXdDO0FBQ1ZBLElBQUk2RyxHQUFHLFdBQVcsVUFBQ0MsT0FBRDtBQUNqQnRILE9BQU8sT0FBT3NILE9BQU96SCxHQUFHQyxNQUFNO0FBQzlCRSxPQUFPc0gsTUFBTTNGLE1BQU05QixHQUFHQyxNQUFNO09BQzVCeUg7O0FBR0QvRyxJQUFJUCxHQUFHdUgsVUFBVTtBQUNqQnhILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QlUsSUFBSVAsR0FBR3VILFVBQVU7QUFDakJ4SCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFFNUJVLElBQUk2RyxHQUFHLFdBQVcsVUFBQ0MsT0FBRDtPQUFVRjs7QUFDNUI1RyxJQUFJUCxHQUFHdUgsVUFBVTtBQUNqQnhILE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCVSxJQUFJUCxHQUFHdUgsVUFBVTtBQUNqQnhILE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtPQUM1QkUsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNOztBQUc3Qk8sS0FBSyw4Q0FBOEM7QUFDbERHO2FBQWE0RyxhQUFhO0FBQzFCNUcsTUFBTXhDLElBQUl3QztBQUNWQSxJQUFJNkcsR0FBRyxXQUFXO09BQUtFOztBQUN2Qi9HLElBQUlQLEdBQUd3SCxpQkFBaUIsV0FBVztPQUFLTDs7QUFFeENwSCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUU1QlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBRTVCVSxJQUFJUCxHQUFHdUgsVUFBVTtBQUNqQnhILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtPQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNOztBQUc3Qk8sS0FBSyx3RkFBd0Y7QUFDNUZzSDthQUFhUCxhQUFhO0FBQzFCTyxNQUFNO0FBQ05uSCxNQUFNeEMsSUFBSXdDO0FBQ1ZBLElBQUk2RyxHQUFHLFdBQVc7QUFBS0U7T0FBY0ksTUFBTUMsVUFBVTs7QUFDckRwSCxJQUFJUCxHQUFHd0gsaUJBQWlCLFdBQVc7T0FBS0w7O0FBRXhDcEgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07QUFDNUJFLE9BQU8ySCxLQUFLOUgsR0FBR0MsTUFBTTtBQUVyQlUsSUFBSXFILFlBQVk7QUFDaEI3SCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTzJILEtBQUs5SCxHQUFHQyxNQUFNO0FBRXJCVSxJQUFJcUgsWUFBWSxXQUFXO0FBQzNCN0gsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07QUFDNUJFLE9BQU8ySCxLQUFLOUgsR0FBR0MsTUFBTTtBQUVyQlUsSUFBSVAsR0FBR3VILFVBQVU7QUFDakJ4SCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTzJILEtBQUs5RixJQUFJaEMsR0FBR0MsTUFBTTtPQUN6QkUsT0FBTyxPQUFPMkgsS0FBSzlILEdBQUdDLE1BQU07O0FBRzdCTyxLQUFLLDBHQUEwRztBQUM5R0c7YUFBYTRHLGFBQWFVLGFBQWE7QUFDdkN0SCxNQUFNeEMsSUFBSXdDO0FBQ1ZBLElBQUk2RyxHQUFHLFVBQVUsVUFBQ0MsT0FBRDtBQUFVQztBQUFjdkgsT0FBT3NILE1BQU1TLFNBQVNsSSxHQUFHWSxHQUFHdUU7T0FBTWhGLE9BQU9zSCxNQUFNVSxZQUFZbkksR0FBR1ksR0FBR3VFOztBQUMxR3hFLElBQUk2RyxHQUFHLFVBQVUsVUFBQ0MsT0FBRDtBQUFVRjtBQUFjcEgsT0FBT3NILE1BQU1TLFNBQVNsSSxHQUFHWSxHQUFHd0g7T0FBT2pJLE9BQU9zSCxNQUFNVSxZQUFZbkksR0FBR1ksR0FBR3VFOztBQUMzR3hFLElBQUk2RyxHQUFHLFVBQVUsVUFBQ0MsT0FBRDtBQUFVUTtBQUFjOUgsT0FBT3NILE1BQU1TLFNBQVNsSSxHQUFHWSxHQUFHd0g7T0FBT2pJLE9BQU9zSCxNQUFNVSxZQUFZbkksR0FBR1ksR0FBR3dIOztBQUUzR3pILElBQUlrSCxLQUFLO0FBQVdsSCxJQUFJa0gsS0FBSyxVQUFVO0FBQVFsSCxJQUFJa0gsS0FBSyxVQUFVLE9BQU87QUFDekUxSCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtPQUM1QkUsT0FBTzhILFlBQVlqSSxHQUFHQyxNQUFNOztBQUc3Qk8sS0FBSyxvR0FBb0c7QUFDeEdHO01BQU12QyxJQUFJdUM7QUFDVjhHLFFBQVE7QUFDUjlHLElBQUk2RyxHQUFHLGFBQWEsVUFBQ2EsR0FBRDtPQUFNWixRQUFRWTs7QUFFbENsSSxPQUFPc0gsT0FBT3pILEdBQUdDLE1BQU07QUFDdkJVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPc0gsTUFBTTNGLE1BQU05QixHQUFHQyxNQUFNO0FBQzVCRSxPQUFPc0gsTUFBTWEsUUFBUXRJLEdBQUdDLE1BQU07QUFFOUJVLElBQUlrSCxLQUFLLGFBQWEsTUFBTSxNQUFNO0FBQUNTLFFBQU87QUFBVTVFLEtBQUk7O0FBQ3hEdkQsT0FBT3NILE1BQU0zRixNQUFNOUIsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT3NILE1BQU1hLFFBQVF0SSxHQUFHQyxNQUFNO0FBQzlCRSxPQUFPc0gsTUFBTS9ELEtBQUsxRCxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJa0gsS0FBSyxhQUFhLE1BQU0sTUFBTTtBQUNsQzFILE9BQU9zSCxNQUFNM0YsTUFBTTlCLEdBQUdDLE1BQU07T0FDNUJFLE9BQU9zSCxNQUFNYSxRQUFRdEksR0FBR0MsTUFBTTs7QUFHL0JPLEtBQUssc0RBQXNEO0FBQzFERzthQUFhNEcsYUFBYVUsYUFBYU0sYUFBYTtBQUNwRDVILE1BQU14QyxJQUFJd0M7QUFDVkEsSUFBSTZHLEdBQUcsV0FBVztPQUFLRTs7QUFDdkIvRyxJQUFJNkcsR0FBRyxXQUFXZ0IsVUFBUTtPQUFLakI7O0FBQy9CNUcsSUFBSTZHLEdBQUcsZ0JBQWdCO09BQUtTOztBQUM1QnRILElBQUlQLEdBQUd3SCxpQkFBaUIsV0FBVztPQUFLVzs7QUFFeENwSSxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTzhILFlBQVlqSSxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0ksWUFBWXZJLEdBQUdDLE1BQU07QUFFNUJVLElBQUlrSCxLQUFLO0FBQVlsSCxJQUFJa0gsS0FBSztBQUM5QjFILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPOEgsWUFBWWpJLEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSSxZQUFZdkksR0FBR0MsTUFBTTtBQUU1QlUsSUFBSW1HLElBQUksV0FBVzBCO0FBQ25CN0gsSUFBSWtILEtBQUs7QUFBWWxILElBQUlrSCxLQUFLO0FBQzlCMUgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07QUFDNUJFLE9BQU84SCxZQUFZakksR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29JLFlBQVl2SSxHQUFHQyxNQUFNO0FBRTVCVSxJQUFJNkcsR0FBRyxXQUFXO09BQUtEOztBQUN2QjVHLElBQUltRyxJQUFJO0FBQ1JuRyxJQUFJa0gsS0FBSztBQUFZbEgsSUFBSWtILEtBQUs7QUFDOUIxSCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTzhILFlBQVlqSSxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0ksWUFBWXZJLEdBQUdDLE1BQU07QUFFNUJVLElBQUk2RyxHQUFHLFdBQVc7T0FBS0U7O0FBQ3ZCL0csSUFBSTZHLEdBQUcsV0FBVztPQUFLRDs7QUFDdkI1RyxJQUFJbUc7QUFDSm5HLElBQUlrSCxLQUFLO0FBQVlsSCxJQUFJa0gsS0FBSztBQUM5QjFILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPOEgsWUFBWWpJLEdBQUdDLE1BQU07T0FDNUJFLE9BQU9vSSxZQUFZdkksR0FBR0MsTUFBTTs7QUFHN0JPLEtBQUssbUlBQW1JO0FBQ3ZJaUk7YUFBYWxCLGFBQWE7QUFDMUI1RyxNQUFNeEMsSUFBSXdDLE1BQU00RCxTQUFTdEY7QUFFekJ3SixrQkFBa0I7QUFDakI5SCxJQUFJNkcsR0FBRyxvQkFBb0I7T0FBS0U7O09BQ2hDL0csSUFBSTZHLEdBQUcsV0FBVztPQUFLRDs7O0FBRXhCa0I7QUFDQXRJLE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBRTVCVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07QUFFNUJVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUU1QlUsSUFBSW1HLElBQUk7QUFDUm5HLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUU1QlUsSUFBSW1HLElBQUk7QUFDUm5HLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUgsWUFBWTFILEdBQUdDLE1BQU07QUFDNUJFLE9BQU9vSCxZQUFZdkgsR0FBR0MsTUFBTTtBQUU1QlUsSUFBSW1HLElBQUk7QUFDUjJCO0FBQ0E5SCxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07QUFFNUJVLElBQUltRyxJQUFJO0FBQ1JuRyxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO09BQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07O0FBRzdCTyxLQUFLLHNGQUFzRjtBQUMxRkc7WUFBWTtBQUNaQSxNQUFNeEMsSUFBSXdDO0FBRVZBLElBQUk2RyxHQUFHLG1CQUFtQjtPQUFLa0I7O0FBQy9CdkksT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJbUcsSUFBSTtBQUNSbkcsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSW1HO0FBQ0puRyxJQUFJa0gsS0FBSztBQUFRbEgsSUFBSWtILEtBQUs7QUFBUWxILElBQUlrSCxLQUFLO0FBQzNDbEgsSUFBSTZHLEdBQUcsNEJBQTRCO09BQUtrQjs7QUFDeEMvSCxJQUFJNkcsR0FBRyxtQkFBbUI7T0FBS2tCOztBQUMvQnZJLE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSW1HLElBQUk7QUFDUm5HLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUltRyxJQUFJO0FBQ1JuRyxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCVSxJQUFJa0gsS0FBSztPQUNUMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNOztBQUc1Qk8sS0FBSyx3REFBd0Q7QUFDNURHO2FBQWE0RyxhQUFhO0FBQzFCNUcsTUFBTXhDLElBQUl3QztBQUNWQSxJQUFJZ0ksS0FBSyxXQUFXLFVBQUNsQixPQUFEO0FBQ25CdEgsT0FBTyxPQUFPc0gsT0FBT3pILEdBQUdDLE1BQU07T0FDOUJFLE9BQU9zSCxNQUFNM0YsTUFBTTlCLEdBQUdDLE1BQU07O0FBRTdCVSxJQUFJNkcsR0FBRyxXQUFXO09BQUtFOztBQUN2Qi9HLElBQUlnSSxLQUFLLFdBQVc7T0FBS3BCOztBQUd6QnBILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBRTVCVSxJQUFJUCxHQUFHdUgsVUFBVTtBQUNqQnhILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBRTVCVSxJQUFJUCxHQUFHdUgsVUFBVTtBQUNqQnhILE9BQU91SCxZQUFZMUgsR0FBR0MsTUFBTTtBQUM1QkUsT0FBT29ILFlBQVl2SCxHQUFHQyxNQUFNO0FBRTVCVSxJQUFJZ0ksS0FBSyxXQUFXLFVBQUNsQixPQUFEO09BQVVGOztBQUU5QjVHLElBQUlQLEdBQUd1SCxVQUFVO0FBQ2pCeEgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO0FBQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07QUFFNUJVLElBQUlQLEdBQUd1SCxVQUFVO0FBQ2pCeEgsT0FBT3VILFlBQVkxSCxHQUFHQyxNQUFNO09BQzVCRSxPQUFPb0gsWUFBWXZILEdBQUdDLE1BQU07O0FBRzdCTyxLQUFLLCtEQUErRDtBQUNuRUc7WUFBWTtBQUNaaUksY0FBYztBQUNkQyxZQUNDO2lCQUFpQjtPQUFLSDs7QUFDdEIsUUFBUTtPQUFLQTs7QUFDYixRQUFRO09BQUtFLGNBQWM7OztBQUU1QmpJLE1BQU14QyxJQUFJd0MsSUFBSW1JO1FBQU9EOztBQUNyQjFJLE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSWtILEtBQUs7QUFDVDFILE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUUzQlUsSUFBSW1HLElBQUk7QUFDUm5HLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPeUksYUFBYTVJLEdBQUdDLE1BQU1VO0FBRTdCQSxJQUFJbUc7QUFDSm5HLElBQUlrSCxLQUFLO0FBQVFsSCxJQUFJa0gsS0FBSztBQUFRbEgsSUFBSWtILEtBQUs7QUFBVWxILElBQUlrSCxLQUFLO0FBQzlEMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCK0csT0FBTzdJLElBQUl3QyxJQUFJbUk7UUFBT0Q7O0FBQ3RCN0IsS0FBS2EsS0FBSztBQUFRYixLQUFLYSxLQUFLO0FBQzVCMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBRTNCRSxPQUFPeUksYUFBYTVJLEdBQUdDLE1BQU1VO0FBQzdCcUcsS0FBS2EsS0FBSztPQUNWMUgsT0FBT3lJLGFBQWE1SSxHQUFHQyxNQUFNK0c7O0FBRzlCeEcsS0FBSywwRkFBMEY7QUFDOUZHO2NBQWM7QUFDZG9JLFVBQVU1SyxJQUFJdUQ7QUFDZHNILFVBQVU3SyxJQUFJdUQ7QUFDZHVILGdCQUFnQjlLLElBQUl3QztBQUNwQnVJLFVBQVUvSyxJQUFJdUQsVUFBVTZDLFNBQVN0RjtBQUNqQzBCLE1BQU14QyxJQUFJd0M7QUFFVkEsSUFBSTZHLEdBQUcsWUFBWSxVQUFDcEgsSUFBRDtBQUNsQkQsT0FBTyxNQUFHSCxHQUFHQyxNQUFNVTtBQUNuQlIsT0FBT0MsSUFBSUosR0FBR0MsTUFBTVUsSUFBSUw7T0FDeEJILE9BQU9nSixlQUFlbkosR0FBR0MsTUFBTTs7QUFFaENFLE9BQU9nSixhQUFhbkosR0FBR0MsTUFBTTtBQUM3QlUsSUFBSTRELFNBQVN3RTtBQUNiNUksT0FBT2dKLGFBQWFuSixHQUFHQyxNQUFNO0FBRTdCVSxJQUFJNEQsU0FBU3lFLFFBQVF6RSxTQUFTMEU7QUFDOUI5SSxPQUFPZ0osYUFBYW5KLEdBQUdDLE1BQU07QUFFN0I4SSxRQUFReEUsU0FBU3RGO0FBQ2pCa0IsT0FBT2dKLGFBQWFuSixHQUFHQyxNQUFNO0FBRTdCVSxJQUFJNEQsU0FBUzJFO0FBQ2IvSSxPQUFPZ0osYUFBYW5KLEdBQUdDLE1BQU07QUFFN0JVLElBQUl5STtBQUNKekksSUFBSTRELFNBQVN5RSxRQUFRekUsU0FBU3RGO0FBQzlCa0IsT0FBT2dKLGFBQWFuSixHQUFHQyxNQUFNO0FBQzdCRSxPQUFPUSxJQUFJTCxRQUFRTixHQUFHQyxNQUFNK0k7QUFFNUJySSxJQUFJNkcsR0FBRyxZQUFZO09BQUtySCxPQUFPZ0osZUFBZW5KLEdBQUdDLE1BQU07O0FBQ3ZERSxPQUFPZ0osYUFBYW5KLEdBQUdDLE1BQU07QUFDN0JFLE9BQU9RLElBQUlMLFFBQVFOLEdBQUdDLE1BQU0rSTtBQUU1QnJJLElBQUk0RCxTQUFTMkU7QUFDYi9JLE9BQU9nSixhQUFhbkosR0FBR0MsTUFBTTtBQUM3QkUsT0FBT1EsSUFBSUwsUUFBUU4sR0FBR0MsTUFBTWlKO0FBRTVCdkksSUFBSXlJO0FBQ0p6SSxJQUFJNEQsU0FBU3dFO0FBQ2JwSSxJQUFJNkcsR0FBRyxZQUFZO09BQUsyQjs7QUFDeEJoSixPQUFPZ0osYUFBYW5KLEdBQUdDLE1BQU07QUFFN0JVLElBQUl5STtBQUNKekksSUFBSTRELFNBQVN5RTtPQUNiN0ksT0FBT2dKLGFBQWFuSixHQUFHQyxNQUFNOztPQUc5Qk8sS0FBSyx3REFBd0Q7QUFDNUQwQjtjQUFjO0FBQ2Q1QixTQUFTbkMsSUFBSXVELFVBQVU2QyxTQUFTdEY7QUFDaENpRCxJQUFJL0QsSUFBSXdDO0FBQ1IwQixJQUFJbEUsSUFBSXdDO0FBRVIwQixFQUFFbUYsR0FBRyxZQUFZLFVBQUNwSCxJQUFEO0FBQ2hCRCxPQUFPLE1BQUdILEdBQUdDLE1BQU1vQztBQUNuQmxDLE9BQU9DLElBQUlKLEdBQUdDLE1BQU1vQyxFQUFFL0I7T0FDdEJILE9BQU9nSixlQUFlbkosR0FBR0MsTUFBTTs7QUFFaENFLE9BQU9nSixhQUFhbkosR0FBR0MsTUFBTTtBQUM3QkUsT0FBTytCLEVBQUU1QixRQUFRTixHQUFHQyxNQUFNO0FBQzFCRSxPQUFPa0MsRUFBRS9CLFFBQVFOLEdBQUdDLE1BQU07QUFFMUJLLE9BQU84RSxPQUFPbEQ7QUFDZC9CLE9BQU9nSixhQUFhbkosR0FBR0MsTUFBTTtBQUM3QkUsT0FBTytCLEVBQUU1QixRQUFRTixHQUFHQyxNQUFNSztBQUMxQkgsT0FBT2tDLEVBQUUvQixRQUFRTixHQUFHQyxNQUFNO0FBRTFCaUMsRUFBRTBFLFFBQVF2RTtBQUNWbEMsT0FBT2dKLGFBQWFuSixHQUFHQyxNQUFNO0FBQzdCRSxPQUFPK0IsRUFBRTVCLFFBQVFOLEdBQUdDLE1BQU07T0FDMUJFLE9BQU9rQyxFQUFFL0IsUUFBUU4sR0FBR0MsTUFBTUs7OztBQU81QkMsTUFBTSxTQUFTO0FBQ2RDLEtBQUssb0ZBQW9GO0FBQ3hGOEU7TUFBTW5ILElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDb0IsT0FBTTs7R0FBU2xCLFNBQVN0RjtBQUM3Q3FHLGdCQUFnQkMsaUJBQWlCNUUsSUFBSVA7QUFFckNELE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUVyQ1UsSUFBSTBELE1BQU0sU0FBUztBQUNuQmxFLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNb0IsT0FBT3pGLEdBQUdDLE1BQU07QUFDcENFLE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUVyQ1UsSUFBSTBELE1BQU0sU0FBUztBQUNuQmxFLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNb0IsT0FBT3pGLEdBQUdDLE1BQU07T0FDcENFLE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR2lDLFFBQVE7O0FBR3hDekIsS0FBSyxtRkFBbUY7QUFDdkY4RTtNQUFNbkgsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNvQixPQUFNOztHQUFTbEIsU0FBU3RGO0FBQzdDcUcsZ0JBQWdCQyxpQkFBaUI1RSxJQUFJUDtBQUVyQ0QsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFFdENVLElBQUkwRCxNQUFNO0FBQUNvQixPQUFNO0FBQUlDLFFBQU87O0FBQzVCdkYsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO09BQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07O0FBR3ZDTyxLQUFLLDRGQUE0RjtBQUNoR3VHO09BQU81SSxJQUFJd0MsSUFBSTBEO09BQU07QUFBQ29CLE9BQU07QUFBSUMsUUFBTzs7R0FBS25CLFNBQVN0RjtBQUNyRCtILE9BQU83SSxJQUFJd0MsTUFBTTRELFNBQVN0RixTQUFTb0YsTUFBTTtBQUFDb0IsT0FBTTtBQUFJQyxRQUFPOztBQUUzRHZGLE9BQU80RyxLQUFLdkMsS0FBS3hFLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDeENsRSxPQUFPNkcsS0FBS3hDLEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxTQUFTO0FBQ3hDbEUsT0FBTzRHLEtBQUt2QyxLQUFLeEUsR0FBR3lFLEtBQUtKLE1BQU0sVUFBVTtBQUN6Q2xFLE9BQU82RyxLQUFLeEMsS0FBS3hFLEdBQUd5RSxLQUFLSixNQUFNLFVBQVU7QUFFekNsRSxPQUFPNEcsS0FBS3ZDLElBQUlILE1BQU1vQixPQUFPekYsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBTzZHLEtBQUt4QyxJQUFJSCxNQUFNb0IsT0FBT3pGLEdBQUdDLE1BQU07QUFDdENFLE9BQU80RyxLQUFLdkMsSUFBSUgsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO09BQ3ZDRSxPQUFPNkcsS0FBS3hDLElBQUlILE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTs7QUFHeENPLEtBQUssb0dBQW9HO0FBQ3hHOEU7TUFBTW5ILElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDb0IsT0FBTTs7R0FBU2xCLFNBQVN0RjtBQUM3Q3FHLGdCQUFnQkMsaUJBQWlCNUUsSUFBSVA7QUFFckNELE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUVwQ1UsSUFBSTBELE1BQU1vQjtPQUFNO0FBQU1DLFFBQVE7O0FBQzlCdkYsT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU1xRixjQUFjRztBQUNqRHRGLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBRXBDVSxJQUFJMEQsTUFBTSxTQUFTO09BQ25CbEUsT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdpQyxRQUFROztBQUd0Q3pCLEtBQUssMkpBQTJKO0FBQy9KNkk7TUFBTWxMLElBQUl3QyxJQUFJMkk7TUFBSztHQUFJL0UsU0FBU3RGO0FBQ2hDc0ssYUFBYSxVQUFDQyxrQkFBRDtPQUNaN0ksSUFBSTBELE1BQU1vQjtPQUFPLFVBQUNnRSxVQUFEO0FBQ2hCdEosT0FBTyxPQUFPc0osVUFBVXpKLEdBQUdDLE1BQU07QUFDakNFLE9BQU9zSixVQUFVekosR0FBR0MsTUFBTXVKO0FBQzFCLE9BQU83SSxJQUFJc0QsUUFBUXFGOzs7O0FBRXJCQyxXQUFXNUk7QUFDWFIsT0FBT1EsSUFBSXNELFFBQVFxRixNQUFNdEosR0FBR0MsTUFBTTtBQUNsQ0UsT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFFbkNVLElBQUlzRCxRQUFRcUYsT0FBTztBQUNuQjNJLElBQUlxRCxVQUFVcUYsYUFBYTtBQUMzQkUsV0FBV0Y7QUFDWGxKLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBRW5DVSxNQUFNeEMsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNvQixPQUFNO0FBQUlDLFFBQU8sQ0FBQztPQUFFOztBQUFLZ0UsVUFBUyxDQUFDO09BQUU7OztHQUFNbkYsU0FBU3RGO0FBQ3pFa0IsT0FBT1EsSUFBSTZELEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxTQUFTO0FBQ3ZDbEUsT0FBT1EsSUFBSTZELEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxVQUFVO09BQ3hDbEUsT0FBT1EsSUFBSTZELEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxZQUFZOztBQUczQzdELEtBQUssNEVBQTRFO0FBQ2hGRztNQUFNdkMsSUFBSXVDLElBQ1QwRDtPQUFPO0FBQUNvQixPQUFNO0FBQUlDLFFBQU87O0dBQ3hCbkIsU0FBU3RGO0FBRVhrQixPQUFPUSxJQUFJOEUsT0FBT3pGLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9RLElBQUkrRSxRQUFRMUYsR0FBR0MsTUFBTTtBQUU1QlUsSUFBSTBELE1BQU0sU0FBUztPQUFLOztBQUN4QjFELElBQUkwRCxNQUFNLFVBQVU7T0FBS3NGLFFBQVFDLFFBQVE7O0FBRXpDekosT0FBT1EsSUFBSThFLE9BQU96RixHQUFHQyxNQUFNO0FBQzNCRSxPQUFPUSxJQUFJK0UsUUFBUTFGLEdBQUdDLE1BQU07QUFFNUIsTUFBTTBKLFFBQVFFLE1BQU07QUFDcEIxSixPQUFPUSxJQUFJOEUsT0FBT3pGLEdBQUdDLE1BQU07T0FDM0JFLE9BQU9RLElBQUkrRSxRQUFRMUYsR0FBR0MsTUFBTTs7QUFJN0JPLEtBQUssMkVBQTJFO0FBQy9FRztNQUFNeEMsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNvQixPQUFNO0FBQVFpRSxVQUFVO09BQUc7OztHQUFLbkYsU0FBU3RGO0FBQzlEMEIsSUFBSTBELE1BQU0sVUFBVTtBQUVwQmxFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDdENsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1vQixPQUFPekYsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUVyQ1UsSUFBSTBELE1BQU07QUFBQ29CLE9BQU07QUFBTUMsUUFBTzs7QUFDOUJ2RixPQUFPUSxJQUFJUCxJQUFJNEIsSUFBSWhDLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDMUNsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbEUsT0FBTyxDQUFDLFNBQVEsV0FBVSxXQUFXMkosS0FBSyxVQUFDQyxHQUFEO09BQU1BLE1BQUtwSixJQUFJUCxHQUFHaUUsTUFBTW9CO0lBQU96RixHQUFHWSxHQUFHdUU7QUFDL0VoRixPQUFPUSxJQUFJUCxHQUFHaUUsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO0FBRXJDVSxJQUFJK0YsSUFBSSxVQUFVO0FBQ2xCdkcsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1vQixPQUFPekQsSUFBSWhDLEdBQUdDLE1BQU07QUFFeENVLElBQUlQLEdBQUdpRSxNQUFNb0IsUUFBUTtBQUNyQnRGLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNb0IsT0FBT3pGLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFFdEMxRCxJQUFJK0YsSUFBSSxTQUFTO0FBQ2pCdkcsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1vQixPQUFPekQsSUFBSWhDLEdBQUdDLE1BQU07QUFDeENFLE9BQU9RLElBQUlQLElBQUk0QixJQUFJaEMsR0FBR3lFLEtBQUtKLE1BQU0sU0FBUztBQUUxQzFELElBQUkwRCxNQUFNLFVBQVU7T0FBRzs7QUFDdkJsRSxPQUFPUSxJQUFJUCxHQUFHaUUsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO0FBRXJDVSxJQUFJMEQsTUFBTSxVQUFVO09BQUc7O0FBQ3ZCbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUVyQ0UsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xRixVQUFVMUosR0FBR0MsTUFBTTtBQUN2Q1UsSUFBSTBELE1BQU0sWUFBWTtPQUN0QmxFLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNcUYsVUFBVTFKLEdBQUdDLE1BQU07O0FBR3hDTyxLQUFLLDhJQUE4STtBQUNsSnVHO1FBQ0N0QjtPQUFPO0FBQ1BDLFFBQVE7QUFDUnNFLFFBQVEsVUFBQ0MsT0FBRDtPQUFVQSxNQUFNaEcsUUFBUWlHOztBQUNoQ0MsUUFDQzFFO09BQU87QUFDUHVFLFFBQVEsVUFBQ0MsT0FBRDtPQUFVQSxNQUFNaEcsUUFBUWlHLFdBQVM7OztBQUMxQ0UsVUFDQzFFO1FBQVE7OztBQUNWcUIsT0FBTzVJLElBQUl3QyxJQUFJO0FBQUMsQUFuR04wRDtBQW1HYTZGLFVBQVM7O0FBQ2hDbEQsT0FBTzdJLElBQUl3QyxJQUFJO0FBQUMsQUFwR04wRDtBQW9HYTZGLFVBQVM7QUFBTUcsa0JBQWlCOztBQUN2RHRELEtBQUsxQyxNQUFNcUY7VUFBUztBQUFJWSxVQUFTOztBQUNqQ3RELEtBQUszQyxNQUFNcUY7VUFBUztBQUFJWSxVQUFTOztBQUNqQ0MsT0FBTyxVQUFDbkssSUFBR29LLFFBQUo7T0FBY0M7VUFBU3JLLEdBQUdpRSxNQUFNbUc7QUFBU0UsUUFBT3RLLEdBQUdvRSxJQUFJSCxNQUFNbUc7QUFBU0csTUFBSyxLQUFHdkssR0FBR3dLLFVBQVVKOzs7QUFFbEdySyxPQUFPb0ssS0FBS3hELE1BQU0sYUFBWS9HLEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBSUMsUUFBTztBQUFRQyxNQUFLOztBQUN2RXhLLE9BQU9vSyxLQUFLdkQsTUFBTSxhQUFZaEgsR0FBRzZLLElBQUk7QUFBQ0osVUFBUztBQUFJQyxRQUFPO0FBQVFDLE1BQUs7O0FBQ3ZFeEssT0FBT29LLEtBQUt4RCxNQUFNLFVBQVMvRyxHQUFHNkssSUFBSTtBQUFDSixVQUFTO0FBQUlDLFFBQU87QUFBSUMsTUFBSzs7QUFDaEV4SyxPQUFPb0ssS0FBS3ZELE1BQU0sVUFBU2hILEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBSUMsUUFBTztBQUFJQyxNQUFLOztBQUNoRXhLLE9BQU9vSyxLQUFLeEQsTUFBTSxXQUFVL0csR0FBRzZLLElBQUk7QUFBQ0osVUFBUztBQUFJQyxRQUFPO0FBQUlDLE1BQUs7O0FBQ2pFeEssT0FBT29LLEtBQUt2RCxNQUFNLFdBQVVoSCxHQUFHNkssSUFBSTtBQUFDSixVQUFTO0FBQUlDLFFBQU87QUFBSUMsTUFBSzs7QUFDakV4SyxPQUFPb0ssS0FBS3hELE1BQU0sV0FBVS9HLEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBSUMsUUFBTztBQUFNQyxNQUFLOztBQUNuRXhLLE9BQU9vSyxLQUFLdkQsTUFBTSxXQUFVaEgsR0FBRzZLLElBQUk7QUFBQ0osVUFBUztBQUFJQyxRQUFPO0FBQUlDLE1BQUs7O0FBRWpFNUQsS0FBSytELE1BQU0sU0FBUztBQUNwQjlELEtBQUs4RCxNQUFNLFNBQVM7QUFDcEIzSyxPQUFPb0ssS0FBS3hELE1BQU0sVUFBUy9HLEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBSUMsUUFBTztBQUFJQyxNQUFLOztBQUNoRXhLLE9BQU9vSyxLQUFLdkQsTUFBTSxVQUFTaEgsR0FBRzZLLElBQUk7QUFBQ0osVUFBUztBQUFJQyxRQUFPO0FBQUlDLE1BQUs7O0FBQ2hFeEssT0FBT29LLEtBQUt4RCxNQUFNLFdBQVUvRyxHQUFHNkssSUFBSTtBQUFDSixVQUFTO0FBQUlDLFFBQU87QUFBTUMsTUFBSzs7QUFDbkV4SyxPQUFPb0ssS0FBS3ZELE1BQU0sV0FBVWhILEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBSUMsUUFBTztBQUFJQyxNQUFLOztBQUVqRTVELEtBQUsrRCxNQUFNLFdBQVc7QUFDdEI5RCxLQUFLOEQsTUFBTSxXQUFXO0FBQ3RCM0ssT0FBT29LLEtBQUt4RCxNQUFNLFdBQVUvRyxHQUFHNkssSUFBSTtBQUFDSixVQUFTO0FBQUlDLFFBQU87QUFBSUMsTUFBSzs7QUFDakV4SyxPQUFPb0ssS0FBS3ZELE1BQU0sV0FBVWhILEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBSUMsUUFBTztBQUFJQyxNQUFLOztBQUVqRTVELEtBQUt4QyxTQUFTdEY7QUFDZCtILEtBQUt6QyxTQUFTdEY7QUFDZDhMLFVBQVV4RixpQkFBaUJ3QixLQUFLdkMsS0FBS2tCO0FBQ3JDc0YsVUFBVXpGLGlCQUFpQnlCLEtBQUt4QyxLQUFLa0I7QUFDckN2RixPQUFPb0ssS0FBS3hELE1BQU0sV0FBVS9HLEdBQUc2SyxJQUFJO0FBQUNKLFVBQVM7QUFBTUMsUUFBTztBQUFNQyxNQUFLOztBQUNyRXhLLE9BQU9vSyxLQUFLdkQsTUFBTSxXQUFVaEgsR0FBRzZLLElBQUk7QUFBQ0osVUFBUztBQUFNQyxRQUFPO0FBQU1DLE1BQUs7O0FBQ3JFeEssT0FBT29LLEtBQUt4RCxNQUFNLFdBQVUvRyxHQUFHNkssSUFBSTtBQUFDSixVQUFTTTtBQUFTTCxRQUFPO0FBQUlDLE1BQUtJOztBQUN0RTVLLE9BQU9vSyxLQUFLdkQsTUFBTSxXQUFVaEgsR0FBRzZLLElBQUk7QUFBQ0osVUFBU087QUFBU04sUUFBTztBQUFJQyxNQUFLSzs7QUFFdEU3SyxPQUFPNEcsS0FBSzZELFVBQVUsV0FBVTVLLEdBQUdDLE1BQU04SztBQUN6QzVLLE9BQU80RyxLQUFLNkQsVUFBVSxVQUFVLE9BQU01SyxHQUFHQyxNQUFNO0FBQy9DRSxPQUFPNkcsS0FBSzRELFVBQVUsV0FBVTVLLEdBQUdDLE1BQU0rSztBQUN6QzdLLE9BQU82RyxLQUFLNEQsVUFBVSxVQUFVLE9BQU01SyxHQUFHQyxNQUFNO0FBRS9DK0csS0FBS3pDLFNBQVN0RjtBQUNka0IsT0FBTzZHLEtBQUszQyxNQUFNLFdBQVdyQyxJQUFJaEMsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBTzZHLEtBQUszQyxNQUFNLFdBQVdyQyxJQUFJaEMsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBTzZHLEtBQUszQyxNQUFNLFdBQVdyRSxHQUFHaUMsUUFBUTtBQUN4QzlCLE9BQU82RyxLQUFLNEQsVUFBVSxXQUFXNUssR0FBR0MsTUFBTStHLEtBQUszQyxNQUFNO0FBQ3JEbEUsT0FBTzZHLEtBQUs0RCxVQUFVLFVBQVUsT0FBTzVJLElBQUloQyxHQUFHQyxNQUFNK0csS0FBSzNDLE1BQU07QUFDL0RsRSxPQUFPNkcsS0FBSzRELFVBQVUsVUFBVSxPQUFPNUssR0FBR0MsTUFBTTtBQUNoREUsT0FBTzZHLEtBQUs0RCxVQUFVLFVBQVUsT0FBTzVLLEdBQUdDLE1BQU07QUFDaERFLE9BQU82RyxLQUFLM0MsTUFBTSxVQUFVckUsR0FBR0MsTUFBTTtBQUVyQ0UsT0FBTzRHLEtBQUs2RCxVQUFVLGFBQWE1SyxHQUFHQyxNQUFNOEc7QUFDNUM1RyxPQUFPNEcsS0FBSzZELFVBQVUsTUFBTTVLLEdBQUdDLE1BQU04RztBQUVyQzFGLE9BQU9sRCxJQUFJa0QsS0FBSyxVQUFVa0QsU0FBU3dDO0FBQ25DNUcsT0FBT2tCLEtBQUt1SixVQUFVLGFBQWE1SyxHQUFHQyxNQUFNO09BQzVDRSxPQUFPa0IsS0FBS3VKLFVBQVUsTUFBTTVLLEdBQUdDLE1BQU07O0FBR3RDTyxLQUFLLG1FQUFtRTtBQUN2RXVHO09BQU81SSxJQUFJd0M7QUFDWHFHLE9BQU83SSxJQUFJa0IsU0FBU0MsY0FBYztBQUVsQ2EsT0FBTztBQUNONEcsS0FBSzZELFVBQVU7T0FDZjVELEtBQUs0RCxVQUFVO0dBQ2Y1SSxJQUFJaEMsR0FBR2lMO0FBRVI5SyxPQUFPNEcsS0FBSzZELFVBQVUsV0FBVTVLLEdBQUdDLE1BQU07T0FDekNFLE9BQU82RyxLQUFLNEQsVUFBVSxXQUFVNUssR0FBR0MsTUFBTTs7QUFHMUNPLEtBQUssOERBQThEO0FBQ2xFdUc7UUFDQ3RCO09BQU87QUFDUEMsUUFBUTtBQUNSeUUsUUFDQzFFO09BQU87O0FBQ1IyRSxVQUNDMUU7UUFBUTs7O0FBQ1ZxQixPQUFPNUksSUFBSXdDLElBQUk7QUFBQyxBQTFISDBEOztBQTJIYjJDLE9BQU83SSxJQUFJd0MsSUFBSTtBQUFDLEFBMUhIMEQ7QUEwSFVnRyxrQkFBaUI7O0FBRXhDbEssT0FBTzRHLEtBQUsxQyxNQUFNLFVBQVVyRSxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPNEcsS0FBSzZELFVBQVUsVUFBVTVLLEdBQUdDLE1BQU07QUFDekNFLE9BQU80RyxLQUFLbUUsWUFBWSxVQUFVbEwsR0FBR0MsTUFBTWtMLFdBQVdwRSxLQUFLNkQsVUFBVTtBQUVyRXpLLE9BQU80RyxLQUFLMUMsTUFBTSxXQUFXckUsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBTzRHLEtBQUs2RCxVQUFVLFdBQVc1SyxHQUFHQyxNQUFNO0FBQzFDRSxPQUFPNEcsS0FBS21FLFlBQVksV0FBV2xMLEdBQUdDLE1BQU1rTCxXQUFXcEUsS0FBSzZELFVBQVU7QUFFdEV6SyxPQUFPNkcsS0FBSzNDLE1BQU0sVUFBVXJFLEdBQUdDLE1BQU07QUFDckNFLE9BQU82RyxLQUFLNEQsVUFBVSxVQUFVNUssR0FBR0MsTUFBTTtBQUN6Q0UsT0FBTzZHLEtBQUtrRSxZQUFZLFVBQVVsTCxHQUFHQyxNQUFNa0wsV0FBV25FLEtBQUs0RCxVQUFVO0FBRXJFN0QsS0FBSytELE1BQU0sU0FBUztBQUNwQjlELEtBQUs4RCxNQUFNLFNBQVM7QUFDcEIzSyxPQUFPNEcsS0FBSzFDLE1BQU0sVUFBVXJFLEdBQUdDLE1BQU07QUFDckNFLE9BQU80RyxLQUFLNkQsVUFBVSxVQUFVNUssR0FBR0MsTUFBTTtBQUN6Q0UsT0FBTzRHLEtBQUttRSxZQUFZLFVBQVVsTCxHQUFHQyxNQUFNa0wsV0FBV3BFLEtBQUs2RCxVQUFVO0FBRXJFekssT0FBTzRHLEtBQUsxQyxNQUFNLFdBQVdyRSxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPNEcsS0FBSzZELFVBQVUsV0FBVzVLLEdBQUdDLE1BQU07QUFDMUNFLE9BQU80RyxLQUFLbUUsWUFBWSxXQUFXbEwsR0FBR0MsTUFBTWtMLFdBQVdwRSxLQUFLNkQsVUFBVTtBQUV0RXpLLE9BQU82RyxLQUFLM0MsTUFBTSxVQUFVckUsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBTzZHLEtBQUs0RCxVQUFVLFVBQVU1SyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPNkcsS0FBS2tFLFlBQVksVUFBVWxMLEdBQUdDLE1BQU1rTCxXQUFXbkUsS0FBSzRELFVBQVU7QUFFckU3RCxLQUFLK0QsTUFBTSxXQUFXO0FBQ3RCOUQsS0FBSzhELE1BQU0sV0FBVztBQUN0QjNLLE9BQU80RyxLQUFLMUMsTUFBTSxVQUFVckUsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBTzRHLEtBQUs2RCxVQUFVLFVBQVU1SyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPNEcsS0FBS21FLFlBQVksVUFBVWxMLEdBQUdDLE1BQU1rTCxXQUFXcEUsS0FBSzZELFVBQVU7QUFFckV6SyxPQUFPNEcsS0FBSzFDLE1BQU0sV0FBV3JFLEdBQUdDLE1BQU07QUFDdENFLE9BQU80RyxLQUFLNkQsVUFBVSxXQUFXNUssR0FBR0MsTUFBTTtBQUMxQ0UsT0FBTzRHLEtBQUttRSxZQUFZLFdBQVdsTCxHQUFHQyxNQUFNa0wsV0FBV3BFLEtBQUs2RCxVQUFVO0FBRXRFekssT0FBTzZHLEtBQUszQyxNQUFNLFVBQVVyRSxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPNkcsS0FBSzRELFVBQVUsVUFBVTVLLEdBQUdDLE1BQU07QUFDekNFLE9BQU82RyxLQUFLa0UsWUFBWSxVQUFVbEwsR0FBR0MsTUFBTWtMLFdBQVduRSxLQUFLNEQsVUFBVTtBQUVyRTdELEtBQUt4QyxTQUFTdEY7QUFDZCtILEtBQUt6QyxTQUFTdEY7QUFDZDhILEtBQUsrRCxNQUFNLFdBQVc7QUFDdEI5RCxLQUFLOEQsTUFBTSxXQUFXO0FBQ3RCM0ssT0FBTzRHLEtBQUsxQyxNQUFNLFVBQVVyRSxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPNEcsS0FBSzZELFVBQVUsVUFBVTVLLEdBQUdDLE1BQU07QUFDekNFLE9BQU80RyxLQUFLbUUsWUFBWSxVQUFVbEwsR0FBR0MsTUFBTWtMLFdBQVdwRSxLQUFLNkQsVUFBVTtBQUVyRXpLLE9BQU80RyxLQUFLMUMsTUFBTSxXQUFXckUsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBTzRHLEtBQUs2RCxVQUFVLFdBQVc1SyxHQUFHQyxNQUFNO0FBQzFDRSxPQUFPNEcsS0FBS21FLFlBQVksV0FBV2xMLEdBQUdDLE1BQU1rTCxXQUFXcEUsS0FBSzZELFVBQVU7QUFFdEV6SyxPQUFPNkcsS0FBSzNDLE1BQU0sVUFBVXJFLEdBQUdDLE1BQU07QUFDckNFLE9BQU82RyxLQUFLNEQsVUFBVSxVQUFVNUssR0FBR0MsTUFBTTtPQUN6Q0UsT0FBTzZHLEtBQUtrRSxZQUFZLFVBQVVsTCxHQUFHQyxNQUFNa0wsV0FBV25FLEtBQUs0RCxVQUFVOztBQUd0RXBLLEtBQUssdURBQXVEO0FBQzNENEs7UUFBUWxKO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBQ2xDdEMsTUFBTXhDLElBQUl3QyxJQUFJMEQ7T0FDYm9CO09BQU87T0FBSyxFQUFFMkYsTUFBTWxKOztBQUNwQm1KLFNBQVM7QUFDVDNGLFFBQVE7T0FBSyxFQUFFMEYsTUFBTS9JOztBQUNyQnFILFVBQVU7T0FBSyxFQUFFMEIsTUFBTTVJOztBQUN2QjJILFFBQ0NrQjtTQUFTO0FBQ1QzQixVQUFVO09BQUssRUFBRTBCLE1BQU0xSTs7O0FBQ3hCMEgsVUFDQzFFO1FBQVE7T0FBSyxFQUFFMEYsTUFBTXhJOztBQUNyQjhHLFVBQVU7T0FBSyxFQUFFMEIsTUFBTXJJOztBQUN2QnVJLFFBQ0M3RjtPQUFPO09BQUssRUFBRTJGLE1BQU1uSTs7Ozs7O0FBRXZCOUMsT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9DdEMsSUFBSTRLO0FBQ0pwTCxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N0QyxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9DdEMsSUFBSTRLO0FBQ0pwTCxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N0QyxJQUFJbUssTUFBTSxXQUFXO0FBQ3JCM0ssT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9DdEMsSUFBSTRLO0FBQ0pwTCxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N0QyxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9DdEMsSUFBSTRLO0FBQ0pwTCxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N0QyxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9DdEMsSUFBSTRLO09BQ0pwTCxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7O0FBR2hEekMsS0FBSyx1RkFBdUY7QUFDM0Y0SztRQUFRbEo7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFDbEN1SSxlQUFlO0FBQ2ZDLFVBQVV0TixJQUFJd0MsSUFBSTBEO09BQ2pCb0I7T0FBTztPQUFLLEVBQUUrRjs7OztBQUVmN0ssTUFBTXhDLElBQUl3QyxJQUFJMEQ7T0FDYm9CO09BQU87T0FBSyxFQUFFMkYsTUFBTWxKOztBQUNwQm1KLFNBQVM7QUFDVDNGLFFBQVE7T0FBSyxFQUFFMEYsTUFBTS9JOztBQUNyQnFILFVBQVU7T0FBSyxFQUFFMEIsTUFBTTVJOztBQUN2QjJILFFBQ0NrQjtTQUFTO0FBQ1QzQixVQUFVO09BQUssRUFBRTBCLE1BQU0xSTs7O0FBQ3hCMEgsVUFDQzFFO1FBQVE7T0FBSyxFQUFFMEYsTUFBTXhJOztBQUNyQjhHLFVBQVU7T0FBSyxFQUFFMEIsTUFBTXJJOztBQUN2QnVJLFFBQ0M3RjtPQUFPO09BQUssRUFBRTJGLE1BQU1uSTs7Ozs7O0FBRXZCdEMsSUFBSTRELFNBQVNrSDtBQUNidEwsT0FBT3FMLGNBQWN4TCxHQUFHQyxNQUFNO0FBQzlCRSxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N3SSxRQUFRRjtBQUNScEwsT0FBT3FMLGNBQWN4TCxHQUFHQyxNQUFNO0FBQzlCRSxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N3SSxRQUFRRixZQUFZO0FBQ3BCcEwsT0FBT3FMLGNBQWN4TCxHQUFHQyxNQUFNO0FBQzlCRSxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTtBQUFFRSxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7QUFFL0N0QyxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9Dd0ksUUFBUUY7QUFDUnBMLE9BQU9xTCxjQUFjeEwsR0FBR0MsTUFBTTtBQUM5QkUsT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRS9Dd0ksUUFBUUYsWUFBWTtBQUNwQnBMLE9BQU9xTCxjQUFjeEwsR0FBR0MsTUFBTTtPQUM5QkUsT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7QUFBRUUsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7OztBQUdoRHpDLEtBQUsseUZBQXlGO0FBQzdGNEs7UUFBUWxKO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBQ3RCdkUsSUFBSXdDLElBQ0gwRDtPQUNDb0I7T0FBTztPQUFLLEVBQUUyRixNQUFNbEo7O0FBQ3BCbUosU0FBUztBQUNUM0YsUUFBUTtPQUFLLEVBQUUwRixNQUFNL0k7Ozs7QUFFdkJsRSxJQUFJd0MsSUFDSCtLO2dCQUFnQjtBQUNoQnJILE9BQ0NvQjtPQUFPO09BQUssRUFBRTJGLE1BQU01STs7QUFDcEI2SSxTQUFTO0FBQ1QzRixRQUFRO09BQUssRUFBRTBGLE1BQU0xSTs7OztBQUV2QnZDLE9BQU9pTCxPQUFPcEwsR0FBRzZLLElBQUkzSTtHQUFFO0FBQUVHLEdBQUU7QUFBRUcsR0FBRTtBQUFFRSxHQUFFOztBQUVuQ3ZFLElBQUlFLFFBQVF3SixLQUFLO0FBQ2pCMUgsT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTNJO0dBQUU7QUFBRUcsR0FBRTtBQUFFRyxHQUFFO0FBQUVFLEdBQUU7O0FBRW5DdkUsSUFBSUUsUUFBUXdKLEtBQUs7T0FDakIxSCxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJM0k7R0FBRTtBQUFFRyxHQUFFO0FBQUVHLEdBQUU7QUFBRUUsR0FBRTs7O0FBR3BDbEMsS0FBSywyRkFBMkY7QUFDL0Z1RztRQUFRM0ksSUFBSWlHLE1BQU1qQztPQUFNdUo7V0FBVTs7O0FBQ2xDNUUsT0FBTzNJLElBQUl1QyxJQUFJMkI7V0FBVTtBQUFVK0IsT0FBTTtBQUFDb0IsT0FBTTtBQUFLQyxRQUFPOztHQUFNbkIsU0FBU3RGO0FBQzNFK0gsT0FBTzVJLElBQUl1QyxJQUFJMkI7V0FBVTtBQUFVK0IsT0FBTTtBQUFDb0IsT0FBTTtBQUFLQyxRQUFPOztBQUFNa0csWUFBVztHQUFNckgsU0FBU3RGO0FBRTVGa0IsT0FBTzRHLEtBQUsxQyxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPNkcsS0FBSzNDLE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFFcENvRSxNQUFNRSxTQUFTbEYsU0FBU3dNO0FBQ3hCMUwsT0FBTzRHLEtBQUsxQyxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPNkcsS0FBSzNDLE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFFcENFLE9BQU80RyxLQUFLK0UsS0FBSyxhQUFZLE1BQU0vRSxLQUFLK0UsS0FBSyxhQUFZLE1BQU05TCxHQUFHWSxHQUFHdUU7QUFDckVoRixPQUFPNkcsS0FBSzhFLEtBQUssYUFBWSxNQUFNOUUsS0FBSzhFLEtBQUssYUFBWSxNQUFNOUwsR0FBR1ksR0FBR3VFO0FBRXJFNEIsS0FBSzFDLE1BQU0sU0FBUztPQUFLOztBQUN6QjJDLEtBQUszQyxNQUFNLFNBQVM7T0FBSzs7QUFDekIwQyxLQUFLMUMsTUFBTSxVQUFVO0FBQ3JCMkMsS0FBSzNDLE1BQU0sVUFBVTtBQUNyQmxFLE9BQU80RyxLQUFLK0UsS0FBSyxVQUFTOUosSUFBSWhDLEdBQUdDLE1BQU07QUFDdkNFLE9BQU82RyxLQUFLOEUsS0FBSyxVQUFTOUosSUFBSWhDLEdBQUdDLE1BQU07QUFDdkNFLE9BQU80RyxLQUFLK0UsS0FBSyxVQUFTOUosSUFBSWhDLEdBQUd5RyxRQUFRO0FBQ3pDdEcsT0FBTzZHLEtBQUs4RSxLQUFLLFVBQVM5TCxHQUFHeUcsUUFBUTtBQUNyQ3RHLE9BQU80RyxLQUFLK0UsS0FBSyxVQUFTOUosSUFBSWhDLEdBQUd5RyxRQUFRO0FBQ3pDdEcsT0FBTzZHLEtBQUs4RSxLQUFLLFVBQVM5TCxHQUFHeUcsUUFBUTtBQUNyQ3RHLE9BQU80RyxLQUFLMUMsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBTzZHLEtBQUszQyxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO09BQ3BDb0UsTUFBTTBIOztBQUdQdkwsS0FBSyx3REFBd0Q7QUFDNURHO01BQU14QyxJQUFJd0MsTUFBTTRELFNBQVN0RjtBQUN6QmtCLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJcUw7QUFDSjdMLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJc0w7QUFDSjlMLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJc0w7T0FDSjlMLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNOztBQUd2Q08sS0FBSyx1SEFBdUg7QUFDM0hHO01BQU14QyxJQUFJd0MsSUFBSTBEO09BQU1DO1NBQVE7O0dBQVVDLFNBQVN0RjtBQUMvQ2tCLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJcUw7QUFDSjdMLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJc0w7QUFDSjlMLE9BQU9RLElBQUkwRCxNQUFNLFlBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJcUw7QUFDSnJMLElBQUlzTCxLQUFLO09BQ1Q5TCxPQUFPUSxJQUFJMEQsTUFBTSxZQUFZckUsR0FBR0MsTUFBTTs7T0FFdkNPLEtBQUssZ0JBQWdCO0FBQ3BCMEw7TUFBTS9OLElBQ0wsQ0FBQyxRQUNBa0c7T0FDQ0M7U0FBUztBQUNUbUIsT0FBTztBQUNQQyxRQUFRO0FBQ1J5RSxRQUNDMUU7T0FBTztBQUNQQyxRQUFROzs7SUFFVm5CLFNBQVN0RjtBQUVYa0IsT0FBTytMLElBQUk3SCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPK0wsSUFBSTdILE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFFcENpTSxJQUFJcEIsTUFBTSxTQUFTO0FBQ25CM0ssT0FBTytMLElBQUk3SCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO09BQ25DRSxPQUFPK0wsSUFBSTdILE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07OztBQUt0Q00sTUFBTSxTQUFTO0FBQ2RDLEtBQUssMklBQTJJO0FBQy9JRztNQUFNeEMsSUFBSXdDO0FBRVZSLE9BQU9RLElBQUltSyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHd0g7QUFFaEN6SCxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUVoQ3hFLElBQUltSyxNQUFNLFNBQVM7QUFDbkJuSyxJQUFJbUssTUFBTSxXQUFXO0FBQ3JCM0ssT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUNoQ2hGLE9BQU9RLElBQUltSyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFDaENoRixPQUFPUSxJQUFJbUssTUFBTSxZQUFXOUssR0FBR1ksR0FBR3VFO0FBRWxDeEUsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU9RLElBQUltSyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHd0g7QUFDaENqSSxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ2hDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd1RTtBQUVsQ3hFLElBQUltSyxNQUFNLFVBQVU7QUFDcEJuSyxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtPQUNoQ2hGLE9BQU9RLElBQUltSyxNQUFNLFNBQVE5SyxHQUFHWSxHQUFHd0g7O0FBR2hDNUgsS0FBSyxxRkFBcUY7QUFDekZHO01BQU14QyxJQUFJd0M7QUFFVlIsT0FBT1EsSUFBSW1LLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDL0JFLE9BQU9RLElBQUltSyxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPUSxJQUFJbUssTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUUvQlUsSUFBSW1LLE1BQU03SjtHQUFFO0FBQUtrTCxHQUFFOztBQUNuQmhNLE9BQU9RLElBQUltSyxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPUSxJQUFJbUssTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUMvQkUsT0FBT1EsSUFBSW1LLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFFL0JVLElBQUltSyxNQUFNcUI7R0FBRTtBQUFNQyxHQUFFOztBQUNwQmpNLE9BQU9RLElBQUltSyxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPUSxJQUFJbUssTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtPQUMvQkUsT0FBT1EsSUFBSW1LLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07O0FBR2hDTyxLQUFLLHNFQUFzRTtBQUMxRUo7S0FBS2hDLElBQUl1QztBQUNUUixPQUFPQyxHQUFHMEssU0FBUzlLLEdBQUc2SyxJQUFJO0FBRTFCekssR0FBRzBLLE1BQU0sU0FBUztBQUNsQjFLLEdBQUcwSyxNQUFNLFdBQVc7QUFDcEIzSyxPQUFPQyxHQUFHMEssU0FBUzlLLEdBQUc2SyxJQUFJLENBQUMsU0FBUTtBQUVuQ3pLLEdBQUcwSyxNQUFNLFNBQVM7QUFDbEIzSyxPQUFPQyxHQUFHMEssU0FBUzlLLEdBQUc2SyxJQUFJLENBQUM7QUFFM0J6SyxHQUFHMEssTUFBTSxTQUFTO09BQ2xCM0ssT0FBT0MsR0FBRzBLLFNBQVM5SyxHQUFHNkssSUFBSSxDQUFDLFdBQVU7O0FBR3RDckssS0FBSyx5REFBeUQ7QUFDN0RHO01BQU14QyxJQUFJd0M7QUFFVkEsSUFBSW1LLE1BQU0sU0FBUztBQUNuQm5LLElBQUltSyxNQUFNLFNBQVM7QUFDbkJuSyxJQUFJbUssTUFBTSxXQUFXO0FBQ3JCM0ssT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUNoQ2hGLE9BQU9RLElBQUltSyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFDaENoRixPQUFPUSxJQUFJbUssTUFBTSxZQUFXOUssR0FBR1ksR0FBR3VFO0FBRWxDeEUsSUFBSTBMO0FBQ0psTSxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3dIO0FBQ2hDakksT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDtPQUNoQ2pJLE9BQU9RLElBQUltSyxNQUFNLFlBQVc5SyxHQUFHWSxHQUFHd0g7O0FBR25DNUgsS0FBSyxrREFBa0Q7QUFDdERHO01BQU12QyxJQUFJdUM7QUFDVlIsT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFbkNVLElBQUkyTCxZQUFZO0FBQ2hCbk0sT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFbkNVLElBQUkyTCxZQUFZO0FBQ2hCbk0sT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFbkNVLElBQUkyTCxZQUFZO09BQ2hCbk0sT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07O0FBR3BDTyxLQUFLLHVGQUF1RjtBQUMzRjhFO01BQU1uSCxJQUFJd0MsSUFBSTBEO09BQ2JrSTtPQUNDOUc7T0FBTztBQUNQQyxRQUFROztBQUNUeUUsUUFDQzFFO09BQU87QUFDUCtHLFdBQVc7O0FBQ1pwQyxVQUNDM0U7T0FBTztBQUNQZ0gsWUFBWTs7OztBQUVkOUwsSUFBSTRELFNBQVN0RjtBQUNicUcsZ0JBQWdCQyxpQkFBaUI1RSxJQUFJUDtBQUNyQ0QsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFDdENFLE9BQU9tRixjQUFja0gsV0FBV3hNLEdBQUdDLE1BQU07QUFDekNFLE9BQU9tRixjQUFjbUgsWUFBWXpNLEdBQUdDLE1BQU07QUFFMUNVLElBQUltSyxNQUFNLFNBQVM7QUFDbkIzSyxPQUFPbUYsY0FBY0csT0FBT3pGLEdBQUdDLE1BQU07QUFDckNFLE9BQU9tRixjQUFjSSxRQUFRMUYsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBT21GLGNBQWNrSCxXQUFXeE0sR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT21GLGNBQWNtSCxZQUFZek0sR0FBR0MsTUFBTTtBQUUxQ1UsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT21GLGNBQWNJLFFBQVExRixHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPbUYsY0FBY2tILFdBQVd4TSxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPbUYsY0FBY21ILFlBQVl6TSxHQUFHQyxNQUFNO0FBRTFDVSxJQUFJbUssTUFBTSxTQUFTO0FBQ25CbkssSUFBSW1LLE1BQU0sV0FBVztBQUNyQjNLLE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT21GLGNBQWNJLFFBQVExRixHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPbUYsY0FBY2tILFdBQVd4TSxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPbUYsY0FBY21ILFlBQVl6TSxHQUFHQyxNQUFNO0FBRTFDVSxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFDdENFLE9BQU9tRixjQUFja0gsV0FBV3hNLEdBQUdDLE1BQU07T0FDekNFLE9BQU9tRixjQUFjbUgsWUFBWXpNLEdBQUdDLE1BQU07O0FBRzNDTyxLQUFLLDBGQUEwRjtBQUM5RjhFO01BQU1uSCxJQUFJd0MsSUFDVCtMO2VBQ0NDO09BQU87QUFBQ25GLElBQUc7QUFBZVYsS0FBSTs7QUFDOUI4RixTQUFTOztBQUNWdkksT0FDQ2tJO09BQVE5RztPQUFPOztBQUNmMEUsUUFBUzFFO09BQU87O0FBQ2hCMkUsVUFBVTNFO09BQU87OztHQUNqQmxCLFNBQVN0RjtBQUNYcUcsZ0JBQWdCQyxpQkFBaUI1RSxJQUFJUDtBQUVyQ0QsT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDtBQUNoQ2pJLE9BQU9RLElBQUltSyxNQUFNLFlBQVc5SyxHQUFHWSxHQUFHd0g7QUFDbENqSSxPQUFPbUYsY0FBY0csT0FBT3pGLEdBQUdDLE1BQU07QUFFckNVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ2hDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd3SDtBQUNsQ2pJLE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUVyQ1UsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9RLElBQUltSyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFDaENoRixPQUFPUSxJQUFJbUssTUFBTSxZQUFXOUssR0FBR1ksR0FBR3VFO0FBQ2xDaEYsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBRXJDVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDtBQUNoQ2pJLE9BQU9RLElBQUltSyxNQUFNLFlBQVc5SyxHQUFHWSxHQUFHdUU7QUFDbENoRixPQUFPbUYsY0FBY0csT0FBT3pGLEdBQUdDLE1BQU07QUFFckNVLElBQUltSyxNQUFNLFdBQVc7T0FDckIzSyxPQUFPbUYsY0FBY0csT0FBT3pGLEdBQUdDLE1BQU07O0FBR3RDTyxLQUFLLHFGQUFxRjtBQUN6RnVHO09BQU81SSxJQUFJd0MsSUFBSTBEO09BQU07QUFBQ3dJLFFBQVF2STtTQUFROzs7O0FBQ3RDMEMsT0FBTzdJLElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDeUksUUFBUXhJO1NBQVE7Ozs7QUFFdENuRSxPQUFPNEcsS0FBSytELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDcENFLE9BQU82RyxLQUFLOEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUVwQzhHLEtBQUszRyxHQUFHdUgsVUFBVTtBQUNsQlgsS0FBSzVHLEdBQUd1SCxVQUFVO0FBQ2xCeEgsT0FBTzRHLEtBQUsrRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPNkcsS0FBSzhELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFcEM4RyxLQUFLM0csR0FBR3VILFVBQVU7QUFDbEJYLEtBQUs1RyxHQUFHdUgsVUFBVTtBQUNsQnhILE9BQU80RyxLQUFLK0QsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUNwQ0UsT0FBTzZHLEtBQUs4RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBRXBDOEcsS0FBSzNHLEdBQUd1SCxVQUFVO0FBQ2xCWCxLQUFLNUcsR0FBR3VILFVBQVU7QUFDbEJ4SCxPQUFPNEcsS0FBSytELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDcENFLE9BQU82RyxLQUFLOEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUVwQzhHLEtBQUszRyxHQUFHdUgsVUFBVTtBQUNsQlgsS0FBSzVHLEdBQUd1SCxVQUFVO0FBQ2xCeEgsT0FBTzRHLEtBQUsrRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO09BQ3BDRSxPQUFPNkcsS0FBSzhELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07O0FBR3JDTyxLQUFLLG1JQUFtSTtBQUN2SXVNO29CQUF1QjVPLElBQUl3QyxNQUFNcU0scUJBQXdCLHVCQUEwQjtBQUNuRmpHLE9BQU81SSxJQUFJd0MsSUFBSTBEO09BQU07QUFBQ3dJLFFBQVF2STtTQUFROzs7O0FBQ3RDMEMsT0FBTzdJLElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDeUksUUFBUXhJO1NBQVE7Ozs7QUFDdEN5QyxLQUFLZ0csbUJBQW1CO0FBQ3hCL0YsS0FBSytGLG1CQUFtQjtBQUV4QjVNLE9BQU80RyxLQUFLK0QsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUNwQ0UsT0FBTzZHLEtBQUs4RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBRXBDOEcsS0FBSzNHLEdBQUd1SCxVQUFVO0FBQ2xCWCxLQUFLNUcsR0FBR3VILFVBQVU7QUFDbEJ4SCxPQUFPNEcsS0FBSytELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDcENFLE9BQU82RyxLQUFLOEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUVwQzhHLEtBQUszRyxHQUFHdUgsVUFBVTtBQUNsQlgsS0FBSzVHLEdBQUd1SCxVQUFVO0FBQ2xCeEgsT0FBTzRHLEtBQUsrRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPNkcsS0FBSzhELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFcEM4RyxLQUFLM0csR0FBR3VILFVBQVU7QUFDbEJYLEtBQUs1RyxHQUFHdUgsVUFBVTtBQUNsQnhILE9BQU80RyxLQUFLK0QsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUNwQ0UsT0FBTzZHLEtBQUs4RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBRXBDOEcsS0FBSzNHLEdBQUd1SCxVQUFVO0FBQ2xCWCxLQUFLNUcsR0FBR3VILFVBQVU7QUFDbEJ4SCxPQUFPNEcsS0FBSytELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07T0FDcENFLE9BQU82RyxLQUFLOEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTs7QUFHckNPLEtBQUssc0dBQXNHO0FBQzFHRztNQUFNeEMsSUFBSXdDLElBQUkwRDtPQUNia0k7T0FDQzlHO09BQU87QUFDUEMsUUFBUTtBQUNSQyxpQkFBaUI7O0FBQ2xCa0gsUUFDQ3BIO09BQU87QUFDUCtHLFdBQVc7QUFDWDdHLGlCQUFpQjs7QUFDbEJtSCxRQUNDckg7T0FBTztBQUNQRSxpQkFBaUI7Ozs7QUFFbkJoRixJQUFJNEQsU0FBU3RGO0FBQ2JrQixPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxTQUFTO0FBQ3RDbEUsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sVUFBVTtBQUN2Q2xFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLGFBQWE7QUFDMUNsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxtQkFBbUI7QUFDaERsRSxPQUFPUSxJQUFJUCxHQUFHaUUsTUFBTW1JLFdBQVd4TSxHQUFHQyxNQUFNO0FBRXhDVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sU0FBUztBQUN0Q2xFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFVBQVU7QUFDdkNsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxhQUFhO0FBQzFDbEUsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sbUJBQW1CO0FBQ2hEbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1tSSxXQUFXeE0sR0FBR0MsTUFBTTtBQUV4Q1UsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDdENsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbEUsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sYUFBYTtBQUMxQ2xFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLG1CQUFtQjtBQUNoRGxFLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNbUksV0FBV3hNLEdBQUdDLE1BQU07QUFFeENVLElBQUlrSCxLQUFLO0FBQ1RsSCxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sU0FBUztBQUN0Q2xFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFVBQVU7QUFDdkNsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxhQUFhO0FBQzFDbEUsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sbUJBQW1CO0FBQ2hEbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1tSSxXQUFXeE0sR0FBR0MsTUFBTTtBQUV4Q1UsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDdENsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbEUsT0FBT1EsSUFBSVAsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sYUFBYTtBQUMxQ2xFLE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLG1CQUFtQjtPQUNoRGxFLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNbUksV0FBV3hNLEdBQUdDLE1BQU07O0FBR3pDTyxLQUFLLGdKQUFnSjtBQUNwSjhFO01BQU1uSCxJQUFJd0MsSUFBSTBEO09BQ2JvQjtPQUFPO0FBQ1BDLFFBQVE7QUFDUm1ILFFBQ0NwSDtPQUFPO0FBQ1BDLFFBQVE7Ozs7QUFFVi9FLElBQUk0RCxTQUFTdEY7QUFDYnFHLGdCQUFnQkMsaUJBQWlCNUUsSUFBSVA7QUFDckNELE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT21GLGNBQWNJLFFBQVExRixHQUFHQyxNQUFNO0FBRXRDVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFFdENVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPbUYsY0FBY0csT0FBT3pGLEdBQUdDLE1BQU07T0FDckNFLE9BQU9tRixjQUFjSSxRQUFRMUYsR0FBR0MsTUFBTTs7QUFHdkNPLEtBQUssMkZBQTJGO0FBQy9GOEU7TUFBTW5ILElBQUl3QyxJQUFJMEQ7T0FDYm9CO09BQU87QUFDUG9ILFFBQ0NwSDtPQUFPO0FBQ1BDLFFBQVE7Ozs7QUFFVi9FLElBQUk0RCxTQUFTdEY7QUFDYnFHLGdCQUFnQkMsaUJBQWlCNUUsSUFBSVA7QUFDckNELE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDdENsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUVyQ1UsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDdENsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO0FBQ3ZDbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUVyQ1UsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9RLElBQUlQLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFNBQVM7QUFDdENsRSxPQUFPUSxJQUFJUCxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxVQUFVO09BQ3ZDbEUsT0FBT1EsSUFBSVAsR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTs7QUFHdENPLEtBQUssNElBQTRJO0FBQ2hKOEU7TUFBTW5ILElBQUl3QyxJQUFJMEQ7T0FDYm9CO09BQU87QUFDUG9ILFFBQ0NwSDtPQUFPO0FBQ1BDLFFBQVE7O0FBQ1RvSCxRQUNDcEg7UUFBUTs7OztBQUVWL0UsSUFBSTRELFNBQVN0RjtBQUNicUcsZ0JBQWdCQyxpQkFBaUI1RSxJQUFJUDtBQUNyQ0QsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFFdENVLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPbUYsY0FBY0csT0FBT3pGLEdBQUdDLE1BQU07QUFDckNFLE9BQU9tRixjQUFjSSxRQUFRMUYsR0FBR0MsTUFBTTtBQUV0Q1UsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT21GLGNBQWNJLFFBQVExRixHQUFHQyxNQUFNO0FBRXRDVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07QUFFdENVLElBQUlrSCxLQUFLO0FBQ1RsSCxJQUFJa0gsS0FBSztBQUNUbEgsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9tRixjQUFjRyxPQUFPekYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT21GLGNBQWNJLFFBQVExRixHQUFHQyxNQUFNO0FBRXRDVSxJQUFJa0gsS0FBSztBQUNUMUgsT0FBT21GLGNBQWNHLE9BQU96RixHQUFHQyxNQUFNO09BQ3JDRSxPQUFPbUYsY0FBY0ksUUFBUTFGLEdBQUdDLE1BQU07O0FBR3ZDTyxLQUFLLCtGQUErRjtBQUNuRzBCO09BQU8vRCxJQUFJd0M7QUFDWHVCLElBQUkvRCxJQUFJd0MsTUFBTTRELFNBQVMwSTtBQUN2QjVLLElBQUlsRSxJQUFJd0MsTUFBTTRELFNBQVNyQztBQUN2Qk0sSUFBSXJFLElBQUl3QyxJQUFJdU07cUJBQW9CO0dBQU8zSSxTQUFTckM7QUFFaEQvQixPQUFPOE0sS0FBS25DLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDtBQUNqQ2pJLE9BQU8rQixFQUFFNEksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3dIO0FBQzlCakksT0FBT2tDLEVBQUV5SSxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHd0g7QUFDOUJqSSxPQUFPcUMsRUFBRXNJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDtBQUU5QjZFLEtBQUtuQyxNQUFNLFNBQVM7QUFDcEIzSyxPQUFPOE0sS0FBS25DLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUNqQ2hGLE9BQU8rQixFQUFFNEksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQzlCaEYsT0FBT2tDLEVBQUV5SSxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFDOUJoRixPQUFPcUMsRUFBRXNJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUU5QjhILEtBQUtoSixRQUFRaUosc0JBQXNCO0FBQ25DRCxLQUFLbkMsTUFBTSxTQUFTO0FBQ3BCM0ssT0FBTzhNLEtBQUtuQyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHd0g7QUFDakNqSSxPQUFPK0IsRUFBRTRJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUM5QmhGLE9BQU9rQyxFQUFFeUksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQzlCaEYsT0FBT3FDLEVBQUVzSSxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFFOUI4SCxLQUFLbkMsTUFBTSxTQUFTO0FBQ3BCbUMsS0FBS2hKLFFBQVFpSixzQkFBc0I7QUFDbkNoTCxFQUFFK0IsUUFBUWlKLHNCQUFzQjtBQUNoQ0QsS0FBS25DLE1BQU0sU0FBUztBQUNwQjNLLE9BQU84TSxLQUFLbkMsTUFBTSxVQUFTOUssR0FBR1ksR0FBR3dIO0FBQ2pDakksT0FBTytCLEVBQUU0SSxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHd0g7QUFDOUJqSSxPQUFPa0MsRUFBRXlJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtPQUM5QmhGLE9BQU9xQyxFQUFFc0ksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFOztBQUcvQjNFLEtBQUssd0VBQXdFO0FBQzVFRztNQUFNeEMsSUFBSXdDLElBQUkwRDtPQUNia0k7T0FDQzlHO09BQU87QUFDUEMsUUFBUTtBQUNSZ0UsVUFBVTs7QUFDWDRCLFFBQ0M1QjtVQUFVO0FBQ1ZoRSxRQUFROztBQUVUeUUsUUFDQzFFO09BQU87QUFDUGlFLFVBQVU7QUFDVlUsVUFDQzFFO1FBQVE7QUFDUmdFLFVBQVU7QUFDVjRCLFFBQ0M3RjtPQUFPO0FBQ1BDLFFBQVE7Ozs7QUFDWDBFLFVBQ0MzRTtPQUFPOzs7O0FBRVQ5RSxJQUFJNEQsU0FBU3RGO0FBQ2JrQixPQUFPUSxJQUFJMEQsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUV0Q1UsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFFdENVLElBQUltSyxNQUFNLFNBQVM7QUFDbkIzSyxPQUFPUSxJQUFJMEQsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJbUssTUFBTSxXQUFXO0FBQ3JCM0ssT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUV0Q1UsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFFdENVLElBQUltSyxNQUFNLFNBQVM7QUFDbkIzSyxPQUFPUSxJQUFJMEQsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBRXRDVSxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUV0Q1UsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtPQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07O0FBR3ZDTyxLQUFLLG1GQUFtRjtBQUN2Rkc7TUFBTXhDLElBQUl3QyxNQUFNNEQsU0FBU3RGO0FBQ3pCa08sUUFBUXhNLElBQUl5TTtBQUNaQyxRQUFRMU0sSUFBSXlNO0FBRVpqTixPQUFPZ04sT0FBT25OLEdBQUdZLEdBQUdDLFdBQVd5TTtBQUMvQm5OLE9BQU9rTixPQUFPck4sR0FBR1ksR0FBR0MsV0FBV3lNO0FBQy9Cbk4sT0FBT2dOLE9BQU9uTixHQUFHNkssSUFBSXdDO0FBR3JCMU0sSUFBSTBELE1BQU0sU0FBUztBQUNuQmtKLFFBQVE1TSxJQUFJeU07QUFDWmpOLE9BQU9vTixPQUFPdk4sR0FBR1ksR0FBR0MsV0FBV3lNO0FBQy9Cbk4sT0FBT2dOLE9BQU9uTixHQUFHNkssSUFBSXdDO0FBQ3JCbE4sT0FBT2dOLE9BQU9uTCxJQUFJaEMsR0FBRzZLLElBQUkwQztBQUN6QnBOLE9BQU9nTixNQUFNMUgsT0FBT3pELElBQUloQyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPa04sTUFBTTVILE9BQU96RCxJQUFJaEMsR0FBR0MsTUFBTTtPQUNqQ0UsT0FBT29OLE1BQU05SCxPQUFPekYsR0FBR0MsTUFBTTs7QUFHOUJPLEtBQUssdUZBQXVGO0FBQzNGRztTQUFTeEMsSUFBSXdDLE1BQU00RCxTQUFTdEY7QUFDNUIwQixNQUFNeEMsSUFBSXdDLE1BQU00RCxTQUFTakU7QUFFekJBLE9BQU8rRCxNQUFNb0I7T0FBTTs7QUFDbkI5RSxJQUFJMEQsTUFBTW9CO09BQU07O0FBQ2hCdEYsT0FBT1EsSUFBSThFLE9BQU96RixHQUFHQyxNQUFNO0FBRTNCVSxJQUFJMEQsTUFBTW9CO09BQU07O0FBQ2hCdEYsT0FBT1EsSUFBSThFLE9BQU96RixHQUFHQyxNQUFNO0FBRTNCVSxJQUFJMEQsTUFBTW9CO09BQU07O09BQ2hCdEYsT0FBT1EsSUFBSThFLE9BQU96RixHQUFHQyxNQUFNOztBQUc1Qk8sS0FBSyx5RkFBeUY7QUFDN0ZHO1NBQVN4QyxJQUFJd0MsTUFBTTRELFNBQVN0RjtBQUM1QjBCLE1BQU14QyxJQUFJd0MsTUFBTTRELFNBQVNqRTtBQUV6QkEsT0FBTytELE1BQU1xQjtRQUFPOztBQUNwQi9FLElBQUkwRCxNQUFNcUI7UUFBTzs7QUFDakJ2RixPQUFPUSxJQUFJK0UsUUFBUTFGLEdBQUdDLE1BQU07QUFFNUJVLElBQUkwRCxNQUFNcUI7UUFBTzs7QUFDakJ2RixPQUFPUSxJQUFJK0UsUUFBUTFGLEdBQUdDLE1BQU07QUFFNUJVLElBQUkwRCxNQUFNcUI7UUFBTzs7T0FDakJ2RixPQUFPUSxJQUFJK0UsUUFBUTFGLEdBQUdDLE1BQU07O0FBRzdCTyxLQUFLLHlFQUF5RTtBQUM3RUc7U0FBU3hDLElBQUl3QyxNQUFNNEQsU0FBU3RGO0FBQzVCMEIsTUFBTXhDLElBQUl3QyxNQUFNNEQsU0FBU2pFO0FBRXpCQSxPQUFPK0QsTUFBTW9CO09BQU07QUFBVUMsUUFBTzs7QUFDcEMvRSxJQUFJMEQsTUFBTW9CO09BQU07QUFBT0MsUUFBTzs7QUFDOUIvRSxJQUFJOEUsUUFBUTlFLElBQUkrRSxTQUFTO0FBQ3pCdkYsT0FBT1EsSUFBSThFLE9BQU96RixHQUFHQyxNQUFNO0FBQzNCRSxPQUFPUSxJQUFJK0UsUUFBUTFGLEdBQUdDLE1BQU07QUFFNUJVLElBQUk4RSxRQUFROUUsSUFBSStFLFNBQVM7QUFDekJ2RixPQUFPUSxJQUFJOEUsT0FBT3pGLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9RLElBQUkrRSxRQUFRMUYsR0FBR0MsTUFBTTtBQUU1QlUsSUFBSThFLFFBQVE5RSxJQUFJK0UsU0FBUztBQUN6QnZGLE9BQU9RLElBQUk4RSxPQUFPekYsR0FBR0MsTUFBTTtPQUMzQkUsT0FBT1EsSUFBSStFLFFBQVExRixHQUFHQyxNQUFNOztBQUc3Qk8sS0FBSyxtR0FBbUc7QUFDdkdHO1NBQVN4QyxJQUFJd0MsTUFBTTRELFNBQVN0RjtBQUM1QjBCLE1BQU14QyxJQUFJd0MsTUFBTTRELFNBQVNqRTtBQUV6QkssSUFBSTBELE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87O0FBQzVCdkYsT0FBT1EsSUFBSTZNLGFBQWF4TixHQUFHQyxNQUFNO0FBRWpDVSxJQUFJMEQsTUFBTW9CO09BQU07QUFBS0MsUUFBTzs7QUFDNUJ2RixPQUFPUSxJQUFJNk0sYUFBYXhOLEdBQUdDLE1BQU07QUFFakNVLElBQUkwRCxNQUFNb0I7T0FBTTtBQUFLQyxRQUFPOztBQUM1QnZGLE9BQU9RLElBQUk2TSxhQUFheE4sR0FBR0MsTUFBTTtBQUVqQ1UsSUFBSTBELE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87O09BQzVCdkYsT0FBT1EsSUFBSTZNLGFBQWF4TixHQUFHQyxNQUFNOztBQUdsQ08sS0FBSyxvR0FBb0c7QUFDeEdHO1NBQVN4QyxJQUFJd0MsTUFBTTRELFNBQVN0RjtBQUM1QjBCLE1BQU14QyxJQUFJd0MsTUFBTTRELFNBQVNqRTtBQUV6QkssSUFBSTBELE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87O0FBQzVCdkYsT0FBT1EsSUFBSThNLGFBQWF6TixHQUFHQyxNQUFNO0FBRWpDVSxJQUFJMEQsTUFBTW9CO09BQU07QUFBS0MsUUFBTzs7QUFDNUJ2RixPQUFPUSxJQUFJOE0sYUFBYXpOLEdBQUdDLE1BQU07QUFFakNVLElBQUkwRCxNQUFNb0I7T0FBTTtBQUFLQyxRQUFPOztBQUM1QnZGLE9BQU9RLElBQUk4TSxhQUFhek4sR0FBR0MsTUFBTTtBQUVqQ1UsSUFBSTBELE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87O09BQzVCdkYsT0FBT1EsSUFBSThNLGFBQWF6TixHQUFHQyxNQUFNOztBQUdsQ08sS0FBSywwSEFBMEg7QUFDOUg4QjtzQkFBc0I7QUFBSyxJQUFHLEtBQUNoQyxRQUFKO09BQWdCLEtBQUNBLE9BQU8rRCxNQUFNO09BQTlCO09BQThDOzs7QUFDekVxSixTQUFTdlAsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNxQixRQUFPO0FBQVEyRixTQUFRc0M7OztBQUMvQzVHLE9BQU81SSxJQUFJd0MsSUFBSTBEO09BQU07QUFBQ3FCLFFBQU87QUFBUTJGLFNBQVFzQzs7QUFBc0J0RCxrQkFBaUI7O0FBQ3BGckQsT0FBTzdJLElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDcUIsUUFBTztBQUFRMkYsU0FBUXNDOztBQUFzQnRELGtCQUFpQjs7QUFDcEZ1RCxPQUFPelAsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNxQixRQUFPO0FBQVEyRixTQUFRc0M7O0FBQXNCdEQsa0JBQWlCOztBQUVwRi9ILFlBQVlvTCxPQUFPbEosSUFBSWxDLGFBQWE7QUFDcENuQyxPQUFPdU4sT0FBT2xKLElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTXFDO0FBQ3RDbkMsT0FBTzRHLEtBQUt2QyxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU1xQztBQUNwQ25DLE9BQU82RyxLQUFLeEMsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNcUM7QUFDcENuQyxPQUFPeU4sS0FBS3BKLElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTXFDO0FBQ3BDbkMsT0FBT3VOLE9BQU90TixHQUFHaUUsTUFBTWdILFNBQVNyTCxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNZ0gsU0FBU3JMLEdBQUdDLE1BQU07QUFDdkNFLE9BQU82RyxLQUFLNUcsR0FBR2lFLE1BQU1nSCxTQUFTckwsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT3lOLEtBQUt4TixHQUFHaUUsTUFBTWdILFNBQVNyTCxHQUFHQyxNQUFNO0FBRXZDOEcsS0FBS3hDLFNBQVN0RjtBQUNka0IsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTWdILFNBQVNyTCxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPNkcsS0FBSzVHLEdBQUdpRSxNQUFNZ0gsU0FBU3JMLEdBQUdDLE1BQU07QUFDdkNFLE9BQU95TixLQUFLeE4sR0FBR2lFLE1BQU1nSCxTQUFTckwsR0FBR0MsTUFBTTtBQUV2QytHLEtBQUs2RyxhQUFhNU87QUFDbEJrQixPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNZ0gsU0FBU3JMLEdBQUdDLE1BQU07QUFDdkNFLE9BQU82RyxLQUFLNUcsR0FBR2lFLE1BQU1nSCxTQUFTckwsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT3lOLEtBQUt4TixHQUFHaUUsTUFBTWdILFNBQVNyTCxHQUFHQyxNQUFNO0FBRXZDaEIsUUFBUVMsWUFBWWtPLEtBQUt4TjtBQUN6QkQsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTWdILFNBQVNyTCxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPNkcsS0FBSzVHLEdBQUdpRSxNQUFNZ0gsU0FBU3JMLEdBQUdDLE1BQU07QUFDdkNFLE9BQU95TixLQUFLeE4sR0FBR2lFLE1BQU1nSCxTQUFTckwsR0FBR0MsTUFBTTtBQUV2QzJOLEtBQUt0TjtBQUNMSCxPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNZ0gsU0FBU3JMLEdBQUdDLE1BQU07QUFDdkNFLE9BQU82RyxLQUFLNUcsR0FBR2lFLE1BQU1nSCxTQUFTckwsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT3lOLEtBQUt4TixHQUFHaUUsTUFBTWdILFNBQVNyTCxHQUFHQyxNQUFNO09BQ3ZDMk4sS0FBS3JKLFNBQVN0Rjs7QUFHZnVCLEtBQUssMEpBQTBKO0FBQzlKdUc7U0FBUzVJLElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDa0ksT0FBTTtBQUFDN0csUUFBTztPQUFFOzs7QUFBUzRGLFFBQU87QUFBQzVGLFFBQU87T0FBRTs7O0FBQVN5RSxRQUFPO0FBQUN6RSxRQUFPO09BQUU7Ozs7O0FBQzVGcUIsT0FBTzVJLElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDa0ksT0FBTTtBQUFDN0csUUFBTztPQUFFOzs7QUFBUzRGLFFBQU87QUFBQzVGLFFBQU87T0FBRTs7O0FBQVN5RSxRQUFPO0FBQUN6RSxRQUFPO09BQUU7Ozs7QUFBVTJFLGtCQUFpQjs7QUFFckhsSyxPQUFPdU4sT0FBT3ROLEdBQUdpRSxNQUFNcUIsUUFBUTFGLEdBQUdDLE1BQU07QUFDeENFLE9BQU80RyxLQUFLM0csR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUV0Q3lOLE9BQU81QyxNQUFNLFNBQVM7QUFDdEIvRCxLQUFLK0QsTUFBTSxTQUFTO0FBQ3BCM0ssT0FBT3VOLE9BQU90TixHQUFHaUUsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNcUIsUUFBUTFGLEdBQUdDLE1BQU07QUFFdEN5TixPQUFPNUMsTUFBTSxTQUFTO0FBQ3RCL0QsS0FBSytELE1BQU0sU0FBUztBQUNwQjNLLE9BQU91TixPQUFPdE4sR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO0FBRXRDeU4sT0FBT25KLFNBQVN0RjtBQUNoQjhILEtBQUt4QyxTQUFTdEY7QUFDZGtCLE9BQU91TixPQUFPdE4sR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtPQUN4Q0UsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNOztBQUd2Q08sS0FBSyx3SkFBd0o7QUFDNUpzTjtpQkFBaUIzUCxJQUFJd0M7QUFDckIrTSxTQUFTdlAsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNxQixRQUFPLENBQUM7T0FBRTs7QUFBU3lFLFFBQU9DO1VBQVM7QUFBQzNFLE9BQU07T0FBRTs7Ozs7O0FBQ3BFc0IsT0FBTzVJLElBQUl3QyxJQUFJMEQ7T0FBTTtBQUFDcUIsUUFBTyxDQUFDO09BQUU7O0FBQVN5RSxRQUFPQztVQUFTO0FBQUMzRSxPQUFNO09BQUU7Ozs7O0FBQVU0RSxrQkFBaUI7O0FBRTdGcUQsT0FBTzVDLE1BQU0sU0FBUztBQUN0QjRDLE9BQU81QyxNQUFNLFdBQVc7QUFDeEIvRCxLQUFLK0QsTUFBTSxTQUFTO0FBQ3BCL0QsS0FBSytELE1BQU0sV0FBVztBQUN0Qi9ELEtBQUsrRCxNQUFNLFdBQVc7QUFDdEIvRCxLQUFLMUMsTUFBTSxjQUFjO0FBRXpCbEUsT0FBT3VOLE9BQU90TixHQUFHaUUsTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPdU4sT0FBT3ROLEdBQUdpRSxNQUFNb0IsT0FBT3pGLEdBQUdDLE1BQU07QUFDdkNFLE9BQU80RyxLQUFLM0csR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTW9CLE9BQU96RixHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNMEosWUFBWS9OLEdBQUdDLE1BQU07QUFFMUM4RyxLQUFLeEMsU0FBU3VKO0FBQ2QzTixPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNcUIsUUFBUTFGLEdBQUdDLE1BQU07QUFDdENFLE9BQU80RyxLQUFLM0csR0FBR2lFLE1BQU1vQixPQUFPekYsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTTBKLFlBQVkvTixHQUFHQyxNQUFNO0FBRTFDNk4sZUFBZXZKLFNBQVN0RjtBQUN4QmtCLE9BQU80RyxLQUFLM0csR0FBR2lFLE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBTzRHLEtBQUszRyxHQUFHaUUsTUFBTW9CLE9BQU96RixHQUFHQyxNQUFNO09BQ3JDRSxPQUFPNEcsS0FBSzNHLEdBQUdpRSxNQUFNMEosWUFBWS9OLEdBQUdDLE1BQU07O0FBRzNDTyxLQUFLLG1HQUFtRztBQUN2R3dOO1VBQVU3UCxJQUFJd0M7QUFDZHFJLFVBQVU3SyxJQUFJd0MsSUFBSXVNO3FCQUFvQjs7QUFDdENuRyxPQUFPNUksSUFBSXdDLElBQUksTUFBTTRELFNBQVN3RTtBQUM5Qi9CLE9BQU83SSxJQUFJd0MsSUFBSSxNQUFNNEQsU0FBU3lFO0FBQzlCZ0YsU0FBUzdQLElBQUltRCxPQUFPaUQsU0FBU3dDO0FBQzdCa0gsU0FBUzlQLElBQUltRCxPQUFPaUQsU0FBU3lDO0FBRTdCRCxLQUFLbUg7QUFDTG5ILEtBQUsrRCxNQUFNLEtBQUs7QUFDaEIzSyxPQUFPNEksUUFBUStCLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDbkNFLE9BQU80RyxLQUFLK0QsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNoQ0UsT0FBTzZOLE9BQU9sRCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBRWxDOEcsS0FBS21ILFVBQVVuRjtBQUNmaEMsS0FBSytELE1BQU0sS0FBSztBQUNoQjNLLE9BQU80SSxRQUFRK0IsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNuQ0UsT0FBTzRHLEtBQUsrRCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPNk4sT0FBT2xELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFFbEM4RyxLQUFLbUgsVUFBVTtBQUNmbkgsS0FBSytELE1BQU0sT0FBTztBQUNsQjNLLE9BQU80SSxRQUFRK0IsTUFBTSxRQUFPOUssR0FBR0MsTUFBTTtBQUNyQ0UsT0FBTzRHLEtBQUsrRCxNQUFNLFFBQU85SyxHQUFHQyxNQUFNO0FBQ2xDRSxPQUFPNk4sT0FBT2xELE1BQU0sUUFBTzlLLEdBQUdDLE1BQU07QUFFcEMrRyxLQUFLa0gsVUFBVTtBQUNmbEgsS0FBSzhELE1BQU0sS0FBSztBQUNoQjNLLE9BQU82SSxRQUFROEIsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNuQ0UsT0FBTzZHLEtBQUs4RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPOE4sT0FBT25ELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFFbEMrRyxLQUFLa0gsVUFBVWxGO0FBQ2ZoQyxLQUFLOEQsTUFBTSxLQUFLO0FBQ2hCM0ssT0FBTzZJLFFBQVE4QixNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPNkcsS0FBSzhELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDaENFLE9BQU84TixPQUFPbkQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUVsQzhHLEtBQUttSCxVQUFVbEY7QUFDZmpDLEtBQUsrRCxNQUFNLEtBQUs7QUFDaEIzSyxPQUFPNEksUUFBUStCLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDbkNFLE9BQU82SSxRQUFROEIsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNuQ0UsT0FBTzRHLEtBQUsrRCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPNkcsS0FBSzhELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDaENFLE9BQU82TixPQUFPbEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNsQ0UsT0FBTzhOLE9BQU9uRCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBRWxDOEcsS0FBS21ILFVBQVU7QUFDZmxILEtBQUtrSCxVQUFVbkY7QUFDZi9CLEtBQUs4RCxNQUFNLEtBQUs7QUFDaEIzSyxPQUFPNEksUUFBUStCLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDbkNFLE9BQU82SSxRQUFROEIsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNuQ0UsT0FBTzRHLEtBQUsrRCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPNkcsS0FBSzhELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDaENFLE9BQU82TixPQUFPbEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtPQUNsQ0UsT0FBTzhOLE9BQU9uRCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNOztBQUduQ08sS0FBSyxpSEFBaUg7QUFDckhHO01BQU14QyxJQUFJd0MsSUFBSXdOO2tCQUFrQixDQUFDLEtBQUk7O0FBQ3JDQyxRQUFRalEsSUFBSW1ELE9BQU9pRCxTQUFTNUQ7QUFDNUIwTixRQUFRbFEsSUFBSW1ELE9BQU9pRCxTQUFTNUQ7QUFDNUIyTixVQUFVblEsSUFBSW1ELE9BQU9pRCxTQUFTOEo7QUFFOUJsTyxPQUFPUSxJQUFJbUssTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUMvQkUsT0FBT2lPLE1BQU10RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPa08sTUFBTXZELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDakNFLE9BQU9tTyxRQUFReEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSW1LLE1BQU0sS0FBSztBQUNmM0ssT0FBT1EsSUFBSW1LLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDL0JFLE9BQU9pTyxNQUFNdEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT2tPLE1BQU12RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPbU8sUUFBUXhELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFFbkNVLElBQUltSyxNQUFNLEtBQUs7QUFDZjNLLE9BQU9RLElBQUltSyxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPaU8sTUFBTXRELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDakNFLE9BQU9rTyxNQUFNdkQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT21PLFFBQVF4RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJbUssTUFBTSxLQUFLO0FBQ2YzSyxPQUFPUSxJQUFJbUssTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUMvQkUsT0FBT2lPLE1BQU10RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPa08sTUFBTXZELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDakNFLE9BQU9tTyxRQUFReEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSW1LLE1BQU0sS0FBSztBQUNmM0ssT0FBT1EsSUFBSW1LLE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFDL0JFLE9BQU9pTyxNQUFNdEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT2tPLE1BQU12RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPbU8sUUFBUXhELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFFbkNvTyxNQUFNdkQsTUFBTSxLQUFLO0FBQ2pCM0ssT0FBT2tPLE1BQU12RCxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPbU8sUUFBUXhELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07QUFFbkNVLElBQUltSyxNQUFNLEtBQUs7QUFDZjNLLE9BQU9RLElBQUltSyxNQUFNLE1BQUs5SyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPa08sTUFBTXZELE1BQU0sTUFBSzlLLEdBQUdDLE1BQU07T0FDakNFLE9BQU9tTyxRQUFReEQsTUFBTSxNQUFLOUssR0FBR0MsTUFBTTs7QUFHcENPLEtBQUssa0lBQWtJO0FBQ3RJd047VUFBVTdQLElBQUl1RCxRQUFRLE1BQ3JCNk0sYUFBYXBRLElBQUl3QyxJQUFJLE1BQ3BCcU4sU0FBUzdQLElBQUl3QyxJQUFJLE1BQ2hCNk4sWUFBWXJRLElBQUl3QztBQUVuQnFJLFVBQVU3SyxJQUFJdUQsUUFBUSxNQUNyQitNLGFBQWF0USxJQUFJd0MsSUFBSSxNQUNwQnNOLFNBQVM5UCxJQUFJd0MsSUFBSSxNQUNoQitOLFlBQVl2USxJQUFJd0M7QUFFbkJSLE9BQU80SSxRQUFRK0IsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN2Q0UsT0FBTzZJLFFBQVE4QixNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPb08sV0FBV3pELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDMUNFLE9BQU9zTyxXQUFXM0QsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUMxQ0UsT0FBTzZOLE9BQU9sRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPOE4sT0FBT25ELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDdENFLE9BQU9xTyxVQUFVMUQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT3VPLFVBQVU1RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBRXpDK04sT0FBT2xELE1BQU0sU0FBUyxNQUFJO0FBQzFCbUQsT0FBT25ELE1BQU0sU0FBUztBQUV0QjNLLE9BQU80SSxRQUFRK0IsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN2Q0UsT0FBTzZJLFFBQVE4QixNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPb08sV0FBV3pELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDMUNFLE9BQU9zTyxXQUFXM0QsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUMxQ0UsT0FBTzZOLE9BQU9sRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPOE4sT0FBT25ELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDdENFLE9BQU9xTyxVQUFVMUQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT3VPLFVBQVU1RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBRXpDK04sT0FBT2xELE1BQU0sV0FBVyxNQUFJO0FBQzVCbUQsT0FBT25ELE1BQU0sV0FBVyxNQUFJO0FBRTVCM0ssT0FBTzRJLFFBQVErQixNQUFNLFlBQVc5SyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPNkksUUFBUThCLE1BQU0sWUFBVzlLLEdBQUdDLE1BQU07QUFDekNFLE9BQU9vTyxXQUFXekQsTUFBTSxZQUFXOUssR0FBR0MsTUFBTTtBQUM1Q0UsT0FBT3NPLFdBQVczRCxNQUFNLFlBQVc5SyxHQUFHQyxNQUFNO0FBQzVDRSxPQUFPNk4sT0FBT2xELE1BQU0sWUFBVzlLLEdBQUdDLE1BQU07QUFDeENFLE9BQU84TixPQUFPbkQsTUFBTSxZQUFXOUssR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT3FPLFVBQVUxRCxNQUFNLFlBQVc5SyxHQUFHQyxNQUFNO09BQzNDRSxPQUFPdU8sVUFBVTVELE1BQU0sWUFBVzlLLEdBQUdDLE1BQU07O0FBRzVDTyxLQUFLLGtJQUFrSTtBQUN0SXVHO09BQU81SSxJQUFJd0MsSUFBSStMO2VBQWM7QUFBQyxTQUFTbEY7SUFBRztBQUFXVixLQUFJO0FBQVk2SCxPQUFNOzs7O0FBQzNFM0gsT0FBTzdJLElBQUl3QyxJQUFJK0w7ZUFBYztBQUFDLFNBQVNsRjtJQUFHO0FBQVdWLEtBQUk7Ozs7QUFFekQzRyxPQUFPNEcsS0FBSytELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDcENFLE9BQU82RyxLQUFLOEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUVwQzhHLEtBQUt2QyxJQUFJbUQsVUFBVTtBQUNuQlgsS0FBS3hDLElBQUltRCxVQUFVO0FBRW5CeEgsT0FBTzRHLEtBQUsrRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPNkcsS0FBSzhELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFcEMrRyxLQUFLOEQsTUFBTSxTQUFTO0FBQ3BCL0QsS0FBS3ZDLElBQUltRCxVQUFVO0FBQ25CWCxLQUFLeEMsSUFBSW1ELFVBQVU7QUFFbkJ4SCxPQUFPNEcsS0FBSytELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07T0FDcENFLE9BQU82RyxLQUFLOEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTs7QUFHckNPLEtBQUssd0pBQXdKO0FBQzVKd047VUFBVTdQLElBQUl1RCxRQUFRLE1BQ3JCNk0sYUFBYXBRLElBQUl3QyxJQUFJLE1BQ3BCcU4sU0FBUzdQLElBQUl3QyxJQUFJK0w7ZUFBYztBQUFDLFNBQVNsRjtJQUFHO0FBQVdWLEtBQUk7QUFBWW9CLFNBQVE7QUFBTXlHLE9BQU07OztHQUMxRkgsWUFBWXJRLElBQUl3QztBQUVuQnFJLFVBQVU3SyxJQUFJdUQsUUFBUSxNQUNyQitNLGFBQWF0USxJQUFJd0MsSUFBSSxNQUNwQnNOLFNBQVM5UCxJQUFJd0MsSUFBSStMO2VBQWM7QUFBQyxTQUFTbEY7SUFBRztBQUFXVixLQUFJO0FBQVk2SCxPQUFNOzs7R0FDNUVELFlBQVl2USxJQUFJd0M7QUFFbkJSLE9BQU80SSxRQUFRK0IsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN2Q0UsT0FBTzZJLFFBQVE4QixNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPb08sV0FBV3pELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDMUNFLE9BQU9zTyxXQUFXM0QsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUMxQ0UsT0FBTzZOLE9BQU9sRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPOE4sT0FBT25ELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDdENFLE9BQU9xTyxVQUFVMUQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT3VPLFVBQVU1RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBRXpDK04sT0FBT3hKLElBQUltRCxVQUFVO0FBQ3JCc0csT0FBT3pKLElBQUltRCxVQUFVO0FBRXJCeEgsT0FBTzRJLFFBQVErQixNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPNkksUUFBUThCLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDdkNFLE9BQU9vTyxXQUFXekQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT3NPLFdBQVczRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQzFDRSxPQUFPNk4sT0FBT2xELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDdENFLE9BQU84TixPQUFPbkQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN0Q0UsT0FBT3FPLFVBQVUxRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPdU8sVUFBVTVELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFFekMrTixPQUFPeEosSUFBSW1ELFVBQVU7QUFDckJzRyxPQUFPekosSUFBSW1ELFVBQVU7QUFFckJ4SCxPQUFPNEksUUFBUStCLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDdkNFLE9BQU82SSxRQUFROEIsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT29PLFdBQVd6RCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQzFDRSxPQUFPc08sV0FBVzNELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDMUNFLE9BQU82TixPQUFPbEQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtBQUN0Q0UsT0FBTzhOLE9BQU9uRCxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPcU8sVUFBVTFELE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07T0FDekNFLE9BQU91TyxVQUFVNUQsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTs7QUFHMUNPLEtBQUsseUdBQXlHO0FBQzdHdUc7UUFBUTFILFNBQVNDLGNBQWM7QUFDL0JzUCxRQUFRdlAsU0FBU0MsY0FBYztBQUMvQkwsUUFBUVMsWUFBWWtQO0FBQ3BCN0gsT0FBTzVJLElBQUkwUTtBQUNYN0gsT0FBTzdJLElBQUl5UTtBQUVYQyxNQUFNeEssTUFBTXFCLFNBQVM7QUFDckJrSixNQUFNdkssTUFBTXFCLFNBQVM7QUFFckJ2RixPQUFPLE9BQU80RyxLQUFLckIsUUFBUTFGLEdBQUdDLE1BQU07QUFDcENFLE9BQU8sT0FBTzZHLEtBQUt0QixRQUFRMUYsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBTzJPLE1BQU0vSCxLQUFLckIsU0FBUTFGLEdBQUdZLEdBQUd1RTtBQUNoQ2hGLE9BQU8yTyxNQUFNOUgsS0FBS3RCLFNBQVExRixHQUFHWSxHQUFHd0g7T0FDaENqSSxPQUFPNEcsS0FBSzZELFVBQVUsV0FBVTVLLEdBQUdDLE1BQU07O0FBRzFDTyxLQUFLLG9CQUFvQjtBQUN4QnVHO09BQU81SSxJQUNOLENBQUMsT0FBTyxNQUNQLENBQUMsUUFDQWtEO01BQ0NrTDtPQUFPO0FBQ1BwQyxRQUFRO0FBQ1JDLFVBQVU7OztBQUlkcEQsT0FBTzdJLElBQ04sQ0FBQyxPQUFPLE1BQ1AsQ0FBQyxRQUNBa0Q7TUFDQzhJO1FBQVE7QUFDUkMsVUFBVTtBQUNWLGtCQUFrQjs7O0FBSXRCd0QsT0FBT3pQLElBQUl3QyxJQUFJVTtNQUFLO0FBQUNrTCxPQUFNO0FBQVVwQyxRQUFPOzs7QUFFNUNoSyxPQUFPNEcsS0FBSzFGLE1BQU1yQixHQUFHQyxNQUFNO0FBQzNCRSxPQUFPNkcsS0FBSzNGLE1BQU1yQixHQUFHQyxNQUFNO0FBQzNCRSxPQUFPeU4sS0FBS3ZNLE1BQU1yQixHQUFHQyxNQUFNO0FBRTNCOEcsS0FBSytELE1BQU0sU0FBUztBQUNwQjlELEtBQUs4RCxNQUFNLFNBQVM7QUFDcEI4QyxLQUFLOUMsTUFBTSxTQUFTO0FBQ3BCM0ssT0FBTzRHLEtBQUsxRixNQUFNckIsR0FBR0MsTUFBTTtBQUMzQkUsT0FBTzZHLEtBQUszRixNQUFNckIsR0FBR0MsTUFBTTtBQUMzQkUsT0FBT3lOLEtBQUt2TSxNQUFNckIsR0FBR0MsTUFBTTtBQUUzQjhHLEtBQUsrRCxNQUFNLFNBQVM7QUFDcEI5RCxLQUFLOEQsTUFBTSxTQUFTO0FBQ3BCOEMsS0FBSzlDLE1BQU0sU0FBUztBQUNwQjNLLE9BQU80RyxLQUFLMUYsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU82RyxLQUFLM0YsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU95TixLQUFLdk0sTUFBTXJCLEdBQUdDLE1BQU07QUFFM0I4RyxLQUFLK0QsTUFBTSxXQUFXO0FBQ3RCOUQsS0FBSzhELE1BQU0sV0FBVztBQUN0QjNLLE9BQU80RyxLQUFLMUYsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU82RyxLQUFLM0YsTUFBTXJCLEdBQUdDLE1BQU07QUFFM0I4RyxLQUFLK0QsTUFBTSxTQUFTO0FBQ3BCOUQsS0FBSzhELE1BQU0sU0FBUztBQUNwQjNLLE9BQU80RyxLQUFLMUYsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU82RyxLQUFLM0YsTUFBTXJCLEdBQUdDLE1BQU07QUFFM0I4RyxLQUFLK0QsTUFBTSxXQUFXO0FBQ3RCOUQsS0FBSzhELE1BQU0sV0FBVztBQUN0QjNLLE9BQU80RyxLQUFLMUYsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU82RyxLQUFLM0YsTUFBTXJCLEdBQUdDLE1BQU07QUFFM0IrRyxLQUFLOEQsTUFBTSxXQUFXO0FBQ3RCOUQsS0FBSzhELE1BQU0sU0FBUztBQUNwQjNLLE9BQU82RyxLQUFLM0YsTUFBTXJCLEdBQUdDLE1BQU07QUFFM0IrRyxLQUFLOEQsTUFBTSxpQkFBaUI7T0FDNUIzSyxPQUFPNkcsS0FBSzNGLE1BQU1yQixHQUFHQyxNQUFNOztBQUc1Qk8sS0FBSywrREFBK0Q7QUFDbkVHO1VBQVU7QUFDVkEsTUFBTXhDLElBQUl3QyxJQUFJMEQ7T0FDYjBLO09BQU87QUFDUDFELFNBQVM7QUFDVGxCLFFBQVE0RTtPQUFPOzs7O0FBR2hCcE8sSUFBSW1LLE1BQU0sT0FBTztBQUNqQm5LLElBQUk2RyxHQUFHLHFCQUFxQixVQUFDc0QsT0FBRDtPQUFVa0UsUUFBUUMsS0FBSyxDQUFDLFNBQVNuRTs7QUFDN0RuSyxJQUFJNkcsR0FBRyx1QkFBdUIsVUFBQ3NELE9BQUQ7T0FBVWtFLFFBQVFDLEtBQUssQ0FBQyxXQUFXbkU7O0FBQ2pFbkssSUFBSTZHLEdBQUcseUJBQXlCLFVBQUNzRCxPQUFEO09BQVVrRSxRQUFRQyxLQUFLLENBQUMsYUFBYW5FOztBQUNyRTNLLE9BQU82TyxTQUFTaFAsR0FBR2tQLEtBQUtqUCxNQUFNO0FBRTlCVSxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU0sQ0FBQyxDQUFDLFNBQVE7QUFFeENVLElBQUltSyxNQUFNLFNBQVM7QUFDbkIzSyxPQUFPNk8sU0FBU2hQLEdBQUdrUCxLQUFLalAsTUFBTSxDQUFDLENBQUMsU0FBUSxPQUFLLENBQUMsU0FBUTtBQUV0RFUsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU82TyxTQUFTaFAsR0FBR2tQLEtBQUtqUCxNQUFNLENBQUMsQ0FBQyxTQUFRLE9BQUssQ0FBQyxTQUFRLFFBQU0sQ0FBQyxTQUFRO0FBRXJFVSxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU0sQ0FBQyxDQUFDLFNBQVEsT0FBSyxDQUFDLFNBQVEsUUFBTSxDQUFDLFNBQVE7QUFFckVVLElBQUltSyxNQUFNLFdBQVc7QUFDckIzSyxPQUFPNk8sU0FBU2hQLEdBQUdrUCxLQUFLalAsTUFBTSxDQUFDLENBQUMsU0FBUSxPQUFLLENBQUMsU0FBUSxRQUFNLENBQUMsU0FBUTtBQUVyRVUsSUFBSW1LLE1BQU0sV0FBVztBQUNyQjNLLE9BQU82TyxTQUFTaFAsR0FBR2tQLEtBQUtqUCxNQUFNLENBQUMsQ0FBQyxTQUFRLE9BQUssQ0FBQyxTQUFRLFFBQU0sQ0FBQyxTQUFRLE9BQUssQ0FBQyxXQUFVO0FBRXJGVSxJQUFJbUssTUFBTSxhQUFhO0FBQ3ZCM0ssT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU0sQ0FBQyxDQUFDLFNBQVEsT0FBSyxDQUFDLFNBQVEsUUFBTSxDQUFDLFNBQVEsT0FBSyxDQUFDLFdBQVUsT0FBSyxDQUFDLGFBQVk7QUFFdkdVLElBQUltSyxNQUFNLFdBQVc7T0FDckIzSyxPQUFPNk8sU0FBU2hQLEdBQUdrUCxLQUFLalAsTUFBTSxDQUFDLENBQUMsU0FBUSxPQUFLLENBQUMsU0FBUSxRQUFNLENBQUMsU0FBUSxPQUFLLENBQUMsV0FBVSxPQUFLLENBQUMsYUFBWTs7QUFHeEdPLEtBQUssd0VBQXdFO0FBQzVFRztNQUFNeEMsSUFBSXdDLElBQUkwRDtPQUNib0I7T0FBTztBQUNQQyxRQUFRO0FBQ1I4RyxXQUFXO0FBQ1hyQyxRQUNDcUM7V0FBVzs7QUFDWnBDLFVBQ0NvQztXQUFXO0FBQ1gvRyxPQUFPO0FBQ1AwRSxRQUNDekU7UUFBUTtBQUNSOEcsV0FBVzs7O0FBQ2IyQyxnQkFDQzFKO09BQU87QUFDUCtHLFdBQVc7OztHQUNYakksU0FBU3RGO0FBQ1htUSxZQUFZO09BQUszSjtPQUFNOUUsSUFBSTBELE1BQU07QUFBVXFCLFFBQU8vRSxJQUFJMEQsTUFBTTtBQUFXbUksV0FBVTdMLElBQUkwRCxNQUFNOzs7QUFFM0ZsRSxPQUFPaVAsYUFBYXBQLEdBQUc2SyxJQUFJcEY7T0FBTTtBQUFPQyxRQUFPO0FBQU84RyxXQUFVOztBQUVoRTdMLElBQUltSyxNQUFNLFNBQVM7QUFDbkIzSyxPQUFPaVAsYUFBYXBQLEdBQUc2SyxJQUFJcEY7T0FBTTtBQUFPQyxRQUFPO0FBQU84RyxXQUFVOztBQUVoRTdMLElBQUkwTyxrQkFBa0I7QUFBQzVKLE9BQU07QUFBR0MsUUFBTztBQUFHeUUsUUFBTztBQUFDcUMsV0FBVTtBQUFJOUcsUUFBTzs7O0FBQ3ZFdkYsT0FBT2lQLGFBQWFwUCxHQUFHNkssSUFBSXBGO09BQU07QUFBT0MsUUFBTztBQUFROEcsV0FBVTs7QUFFakU3TCxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT2lQLGFBQWFwUCxHQUFHNkssSUFBSXBGO09BQU07QUFBT0MsUUFBTztBQUFPOEcsV0FBVTs7QUFFaEU3TCxJQUFJbUssTUFBTSxTQUFTO0FBQ25CM0ssT0FBT2lQLGFBQWFwUCxHQUFHNkssSUFBSXBGO09BQU07QUFBT0MsUUFBTztBQUFROEcsV0FBVTs7QUFDakU3TCxJQUFJbUssTUFBTSxTQUFTO0FBRW5CbkssSUFBSTBPLGtCQUNIOUM7T0FDQzlHO09BQU87QUFDUEMsUUFBUTs7QUFDVDBFLFVBQ0MxRTtRQUFRO0FBQ1J5RSxRQUNDMUU7T0FBTztBQUNQK0csV0FBVztPQUFHOzs7OztBQUVqQnJNLE9BQU9pUCxhQUFhcFAsR0FBRzZLLElBQUlwRjtPQUFNO0FBQU9DLFFBQU87QUFBTzhHLFdBQVU7O0FBRWhFN0wsSUFBSW1LLE1BQU0sV0FBVztBQUNyQjNLLE9BQU9pUCxhQUFhcFAsR0FBRzZLLElBQUlwRjtPQUFNO0FBQVFDLFFBQU87QUFBUThHLFdBQVU7O0FBRWxFN0wsSUFBSW1LLE1BQU0sU0FBUztBQUNuQjNLLE9BQU9pUCxhQUFhcFAsR0FBRzZLLElBQUlwRjtPQUFNO0FBQVFDLFFBQU87QUFBUThHLFdBQVU7O0FBRWxFN0wsSUFBSW1LLE1BQU07QUFBQzZCLE9BQU07QUFBS0MsU0FBUTs7QUFDOUJqTSxJQUFJUCxHQUFHaUUsTUFBTW1JLFlBQVk7QUFDekJyTSxPQUFPaVAsYUFBYXBQLEdBQUc2SyxJQUFJcEY7T0FBTTtBQUFPQyxRQUFPO0FBQU84RyxXQUFVOztBQUVoRTdMLElBQUltSyxNQUFNLGlCQUFpQjtPQUMzQjNLLE9BQU9pUCxhQUFhcFAsR0FBRzZLLElBQUlwRjtPQUFNO0FBQVFDLFFBQU87QUFBTzhHLFdBQVU7OztPQUdsRWhNLEtBQUssa0dBQWtHO0FBQ3RHOE87TUFBTWxSLElBQUl1QztBQUNWNE8sTUFBTW5SLElBQUl1QyxJQUFJbUs7T0FBTTtBQUFDNkIsT0FBTTtBQUFJQyxTQUFROzs7QUFDdkM0QyxNQUFNcFIsSUFBSXVDLElBQUltSztPQUFNO0FBQUM4QixTQUFROzs7QUFDN0J6TSxPQUFPbVAsSUFBSXhFLE1BQU0sVUFBUzlLLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9tUCxJQUFJeEUsTUFBTSxZQUFXOUssR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT29QLElBQUl6RSxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPb1AsSUFBSXpFLE1BQU0sWUFBVzlLLEdBQUdDLE1BQU07QUFDckNFLE9BQU9xUCxJQUFJMUUsTUFBTSxVQUFTOUssR0FBR0MsTUFBTTtPQUNuQ0UsT0FBT3FQLElBQUkxRSxNQUFNLFlBQVc5SyxHQUFHQyxNQUFNOzs7QUFJdkNNLE1BQU0saUJBQWlCO0FBQ3RCa1AsY0FBYztBQUFLQztnRkFBK0VDLHVCQUEvRXpSO2tCQUFXMFI7OztBQUM5QkMsV0FBVztBQUFLSDtJQUFXQSw4RUFBMkRDLHdCQUF0RTtZQUFDRzs7O0FBQ2pCQyxTQUFTO0FBQUsvTztBQUErQmdQO0tBQWFDLG9DQUFiO2NBQS9COVIsSUFBSStSLElBQUlDLGdCQUFnQkY7Ozs7QUFHdEN6UCxLQUFLLHFCQUFxQjtBQUN6Qkc7V0FBV3lQLFNBQVMsTUFBTTtBQUMxQnpQLE1BQU14QyxJQUFJd0MsSUFBSTBEO09BQ2JpRztVQUFVO0FBQ1ZOLFFBQVE7QUFDUnZFLE9BQU87QUFDUEMsUUFBUTtBQUNSZ0UsVUFBVTtBQUNWMkcsWUFBWTtBQUVaLGtDQUNDN0Q7V0FBVzs7QUFFWixpQ0FDQ0E7V0FBVzs7QUFFWiwwQkFDQ3hDO1FBQVE7QUFDUnZFLE9BQU87O0FBRVIsMkNBQ0N1RTtRQUFRO0FBQ1J2RSxPQUFPO0FBQ1BDLFFBQVE7O0FBRVQsNEJBQ0NnRTtVQUFVOztBQUVYLDRCQUNDQTtVQUFVOztBQUVYLDZCQUNDQTtVQUFVO0FBQ1YyRyxZQUFZOztBQUViLDRCQUNDM0c7VUFBVTs7OztBQUVaL0ksSUFBSTRELFNBQVN0RjtBQUVia0IsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGNBQWFyRSxHQUFHQyxNQUFNO0FBRXZDL0IsV0FBV2tTLFNBQVM7QUFDcEJqUSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUV0Qy9CLFdBQVdrUyxTQUFTO0FBQ3BCalEsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFFdEMvQixXQUFXa1MsU0FBUyxLQUFLO0FBQ3pCalEsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFFdEMvQixXQUFXa1MsU0FBUztBQUNwQmpRLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBRXRDL0IsV0FBV2tTLFNBQVMsS0FBSztBQUN6QmpRLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPUSxJQUFJMEQsTUFBTSxlQUFjckUsR0FBR0MsTUFBTTtBQUV4Qy9CLFdBQVdrUyxTQUFTLEtBQUs7QUFDekJqUSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBT1EsSUFBSTBELE1BQU0sZUFBY3JFLEdBQUdDLE1BQU07QUFFeEMvQixXQUFXa1MsU0FBUztBQUNwQmpRLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUVuQy9CLFdBQVdrUyxTQUFTO0FBQ3BCalEsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBRW5DL0IsV0FBV2tTLFNBQVM7QUFDcEJqUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFFbkMvQixXQUFXa1MsU0FBUyxLQUFLO0FBQ3pCalEsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUVwQy9CLFdBQVdrUyxTQUFTLEtBQUs7QUFDekJqUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBRXBDL0IsV0FBV2tTLFNBQVMsS0FBSztBQUN6QmpRLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFFcEMvQixXQUFXa1MsU0FBUyxLQUFLO0FBQ3pCalEsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sY0FBYXJFLEdBQUdDLE1BQU07QUFFdkMvQixXQUFXa1MsU0FBUyxNQUFNO0FBQzFCalEsT0FBT1EsSUFBSTBELE1BQU0sY0FBYXJFLEdBQUdDLE1BQU07QUFFdkMvQixXQUFXa1MsU0FBUyxNQUFNO09BQzFCalEsT0FBT1EsSUFBSTBELE1BQU0sY0FBYXJFLEdBQUdDLE1BQU07O0FBR3hDTyxLQUFLLDBCQUEwQjtBQUM5Qkc7U0FBU3hDLElBQUl3QyxNQUFNNEQsU0FBU3RGO0FBQzVCcVIsaUJBQWlCLFVBQUM3SyxPQUFPQyxRQUFSO0FBQ2hCLElBQStCRCxPQUEvQm5GO09BQU8rRCxNQUFNLFNBQVNvQjs7QUFDdEIsSUFBaUNDLFFBQWpDcEY7T0FBTytELE1BQU0sVUFBVXFCOztPQUN2QnhILFdBQVdrUzs7QUFFWnpQLE1BQU14QyxJQUFJd0MsSUFBSTBEO09BQ2JpRztVQUFVO0FBQ1ZOLFFBQVE7QUFDUnVHLEtBQUs7QUFDTDlLLE9BQU87QUFDUEMsUUFBUTtBQUNSZ0UsVUFBVTtBQUNWMkcsWUFBWTtBQUVaLGdDQUNDN0Q7V0FBVzs7QUFFWiwrQkFDQ0E7V0FBVzs7QUFFWiw0QkFDQytEO0tBQUs7O0FBRU4sd0JBQ0N2RztRQUFRO0FBQ1JOLFVBQVU7O0FBRVgsd0NBQ0NNO1FBQVE7QUFDUk4sVUFBVTtBQUNWMkcsWUFBWTs7QUFFYixtQkFDQ0E7WUFBWTs7QUFFYix1QkFDQ2hGO1NBQVM7O0FBRVYsMEJBQ0NnRjtZQUFZOztBQUViLDBCQUNDM0c7VUFBVTs7QUFFWCw0QkFDQ0E7VUFBVTtBQUNWMkcsWUFBWTs7QUFFYix5QkFDQzNHO1VBQVU7Ozs7QUFFWjRHLGVBQWUsS0FBSztBQUNwQjNQLElBQUk0RCxTQUFTakU7QUFDYkgsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLFVBQVNyRSxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPUSxJQUFJMEQsTUFBTSxjQUFhckUsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT1EsSUFBSTBELE1BQU0sUUFBT3JFLEdBQUdDLE1BQU07QUFFakNxUSxlQUFlLEtBQUs7QUFDcEJuUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBRXhDcVEsZUFBZSxLQUFLO0FBQ3BCblEsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBRXRDcVEsZUFBZSxLQUFLO0FBQ3BCblEsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPUSxJQUFJMEQsTUFBTSxlQUFjckUsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT1EsSUFBSTBELE1BQU0sWUFBV3JFLEdBQUdDLE1BQU07QUFFckNVLElBQUkwRCxNQUFNLFVBQVU7QUFDcEJuRyxXQUFXa1M7QUFDWGpRLE9BQU9RLElBQUkwRCxNQUFNLFlBQVdyRSxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPUSxJQUFJMEQsTUFBTSxlQUFjckUsR0FBR0MsTUFBTTtBQUV4Q1UsSUFBSTBELE1BQU0sVUFBVTtBQUNwQmxFLE9BQU9RLElBQUkwRCxNQUFNLFlBQVdyRSxHQUFHQyxNQUFNO0FBRXJDL0IsV0FBV2tTO0FBQ1hqUSxPQUFPUSxJQUFJMEQsTUFBTSxZQUFXckUsR0FBR0MsTUFBTTtBQUVyQ3FRLGVBQWU7QUFDZm5RLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPUSxJQUFJMEQsTUFBTSxlQUFjckUsR0FBR0MsTUFBTTtBQUV4Q3FRLGVBQWU7QUFDZm5RLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBRXhDcVEsZUFBZSxLQUFLO0FBQ3BCblEsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBRXhDcVEsZUFBZSxNQUFNO0FBQ3JCblEsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPUSxJQUFJMEQsTUFBTSxjQUFhckUsR0FBR0MsTUFBTTtBQUV2Q3FRLGVBQWUsTUFBTTtPQUNyQm5RLE9BQU9RLElBQUkwRCxNQUFNLGNBQWFyRSxHQUFHQyxNQUFNOztBQUd4Q08sS0FBSyw0QkFBNEI7QUFDaENHO1NBQVN4QyxJQUFJd0MsSUFBSTBEO09BQU07QUFBQ2lHLFVBQVM7O0dBQWEvRixTQUFTdEY7QUFDdkRxUixpQkFBaUIsVUFBQzdLLE9BQU9DLFFBQVI7QUFDaEIsSUFBK0JELE9BQS9CbkY7T0FBTytELE1BQU0sU0FBU29COztBQUN0QixJQUFpQ0MsUUFBakNwRjtPQUFPK0QsTUFBTSxVQUFVcUI7O09BQ3ZCeEgsV0FBV2tTOztBQUVaelAsTUFBTXhDLElBQUl3QyxJQUFJMEQ7T0FDYmlHO1VBQVU7QUFDVk4sUUFBUTtBQUNSdUcsS0FBSztBQUNMOUssT0FBTztBQUNQQyxRQUFRO0FBQ1JnRSxVQUFVO0FBQ1YyRyxZQUFZO0FBRVosa0NBQ0NHO2NBQWM7O0FBRWYsaUNBQ0NBO2NBQWM7O0FBRWYsOEJBQ0NEO0tBQUs7O0FBRU4sMEJBQ0N2RztRQUFRO0FBQ1JOLFVBQVU7O0FBRVgsMENBQ0NNO1FBQVE7QUFDUk4sVUFBVTtBQUNWMkcsWUFBWTs7QUFFYixxQkFDQ0E7WUFBWTs7OztBQUdkQyxlQUFlLEtBQUs7QUFDcEIzUCxJQUFJNEQsU0FBU2pFO0FBQ2JILE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxVQUFTckUsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPUSxJQUFJMEQsTUFBTSxlQUFjckUsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT1EsSUFBSTBELE1BQU0saUJBQWdCckUsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT1EsSUFBSTBELE1BQU0sUUFBT3JFLEdBQUdDLE1BQU07QUFFakNLLE9BQU8rRCxNQUFNLFlBQVk7QUFDekJsRSxPQUFPUSxJQUFJMEQsTUFBTSxRQUFPckUsR0FBR0MsTUFBTTtBQUVqQ3FRO0FBQ0FuUSxPQUFPUSxJQUFJMEQsTUFBTSxRQUFPckUsR0FBR0MsTUFBTTtBQUVqQ3FRLGVBQWUsS0FBSztBQUNwQm5RLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBT1EsSUFBSTBELE1BQU0sZUFBY3JFLEdBQUdDLE1BQU07QUFFeENxUSxlQUFlLEtBQUs7QUFDcEJuUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFFdENLLE9BQU8rRCxNQUFNLFVBQVU7QUFDdkJpTSxlQUFlLEtBQUs7QUFDcEJuUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO09BQ3hDRSxPQUFPUSxJQUFJMEQsTUFBTSxZQUFXckUsR0FBR0MsTUFBTTs7QUFHdENPLEtBQUssZ0NBQWdDO0FBQ3BDRztTQUNDeEMsSUFBSXdDLElBQUk7QUFBQytPLEtBQUk7R0FDWnZSLElBQUl3QyxJQUFJO0FBQUNwQixJQUFHO0dBQ1hwQixJQUFJd0MsSUFBSTtBQUFDK08sS0FBSTtLQUNibkwsU0FBU3RGO0FBRVowQixNQUFNeEMsSUFBSXdDLElBQUkwRDtPQUNiaUc7VUFBVTtBQUNWTixRQUFRO0FBQ1J1RyxLQUFLO0FBQ0w5SyxPQUFPO0FBQ1BDLFFBQVE7QUFDUmdFLFVBQVU7QUFDVjJHLFlBQVk7QUFFWixnQ0FDQ0k7WUFBWTs7QUFFYiwrQkFDQ0E7WUFBWTs7QUFFYiw0QkFDQ0Y7S0FBSzs7QUFFTix3QkFDQ3ZHO1FBQVE7QUFDUk4sVUFBVTs7QUFFWCx3Q0FDQ007UUFBUTtBQUNSTixVQUFVO0FBQ1YyRyxZQUFZOztBQUViLG1CQUNDQTtZQUFZOzs7O0FBR2QvUCxPQUFPK0QsTUFBTW9CO09BQU07QUFBS0MsUUFBTzs7QUFDL0JwRixPQUFPUixNQUFNNkQsSUFBSVUsTUFBTW9CO09BQU07QUFBS0MsUUFBTzs7QUFDekNwRixPQUFPUixNQUFNNFEsSUFBSXJNLE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87O0FBQ3pDL0UsSUFBSTRELFNBQVNqRSxPQUFPUixNQUFNNFE7QUFDMUJ2USxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sVUFBU3JFLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUkwRCxNQUFNLFdBQVVyRSxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJMEQsTUFBTSxhQUFZckUsR0FBR0MsTUFBTTtBQUN0Q0UsT0FBT1EsSUFBSTBELE1BQU0sZUFBY3JFLEdBQUdDLE1BQU07QUFDeENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPUSxJQUFJMEQsTUFBTSxRQUFPckUsR0FBR0MsTUFBTTtBQUVqQ0ssT0FBTytELE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87QUFBSzRFLFVBQVM7O0FBQzdDcE0sV0FBV2tTO0FBQ1hqUSxPQUFPUSxJQUFJMEQsTUFBTSxlQUFjckUsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT1EsSUFBSTBELE1BQU0sUUFBT3JFLEdBQUdDLE1BQU07QUFFakNLLE9BQU9SLE1BQU02RCxJQUFJVSxNQUFNaUc7VUFBUzs7QUFDaENuSyxPQUFPUSxJQUFJMEQsTUFBTSxRQUFPckUsR0FBR0MsTUFBTTtBQUVqQy9CLFdBQVdrUztBQUNYalEsT0FBT1EsSUFBSTBELE1BQU0sUUFBT3JFLEdBQUdDLE1BQU07QUFFakNLLE9BQU9SLE1BQU02RCxJQUFJVSxNQUFNb0I7T0FBTTtBQUFLQyxRQUFPOztBQUN6Q3hILFdBQVdrUztBQUNYalEsT0FBT1EsSUFBSTBELE1BQU0sV0FBVXJFLEdBQUdDLE1BQU07QUFDcENFLE9BQU9RLElBQUkwRCxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNO0FBRXRDSyxPQUFPUixNQUFNNFEsSUFBSXJNLE1BQU1vQjtPQUFNO0FBQUtDLFFBQU87O0FBQ3pDeEgsV0FBV2tTO0FBQ1hqUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO0FBRXhDSyxPQUFPK0QsTUFBTTJGO1FBQU87O0FBQ3BCOUwsV0FBV2tTO0FBQ1hqUSxPQUFPUSxJQUFJMEQsTUFBTSxXQUFVckUsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT1EsSUFBSTBELE1BQU0sYUFBWXJFLEdBQUdDLE1BQU07QUFDdENFLE9BQU9RLElBQUkwRCxNQUFNLGVBQWNyRSxHQUFHQyxNQUFNO09BQ3hDRSxPQUFPUSxJQUFJMEQsTUFBTSxZQUFXckUsR0FBR0MsTUFBTTs7T0FHdENPLEtBQUssd0JBQXdCO0FBQzVCRztXQUFXeVAsU0FBUyxNQUFNO0FBQzFCelAsTUFBTXhDLElBQUl3QyxJQUFJMEQ7T0FDYjJGO1FBQVE7QUFFUkcsUUFDQ3dHO2FBQWE7QUFDYixrQ0FDQ0E7YUFBYTs7O0FBRWYsaUNBQ0N2RztVQUNDdUc7YUFBYTs7Ozs7QUFHaEJoUSxJQUFJNEQsU0FBU3RGO0FBRWJrQixPQUFPUSxJQUFJMEQsTUFBTSxnQkFBZXJFLEdBQUdDLE1BQU07QUFFekNVLElBQUltSyxNQUFNLFNBQVM7QUFDbkIzSyxPQUFPUSxJQUFJMEQsTUFBTSxnQkFBZXJFLEdBQUdDLE1BQU07QUFFekMvQixXQUFXa1MsU0FBUyxLQUFLO0FBQ3pCalEsT0FBT1EsSUFBSTBELE1BQU0sZ0JBQWVyRSxHQUFHQyxNQUFNO0FBRXpDL0IsV0FBV2tTLFNBQVMsTUFBTTtBQUMxQmpRLE9BQU9RLElBQUkwRCxNQUFNLGdCQUFlckUsR0FBR0MsTUFBTTtBQUd6Q1UsSUFBSW1LLE1BQU0sV0FBVztBQUNyQjNLLE9BQU9RLElBQUkwRCxNQUFNLGdCQUFlckUsR0FBR0MsTUFBTTtBQUV6Qy9CLFdBQVdrUyxTQUFTLEtBQUs7QUFDekJqUSxPQUFPUSxJQUFJMEQsTUFBTSxnQkFBZXJFLEdBQUdDLE1BQU07QUFFekMvQixXQUFXa1MsU0FBUyxNQUFNO09BQzFCalEsT0FBT1EsSUFBSTBELE1BQU0sZ0JBQWVyRSxHQUFHQyxNQUFNOzs7QUFPM0NNLE1BQU0sYUFBYTtBQUNsQkMsS0FBSyxZQUFZO0FBQ2hCb1E7TUFBTXpTLElBQUl3QyxJQUFJLE1BQU14QyxJQUFJd0MsT0FBTztBQUUvQlIsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT1EsSUFBSWtRLGdCQUFnQjlRLFFBQVFDLEdBQUdDLE1BQU07QUFDNUNFLE9BQU9RLElBQUlQLEdBQUc4RCxXQUFXbkUsUUFBUUMsR0FBR0MsTUFBTTtBQUUxQ1UsSUFBSXlFLE9BQU9qSCxJQUFJbUQ7QUFDZm5CLE9BQU9RLElBQUlkLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDckNFLE9BQU9RLElBQUlrUSxnQkFBZ0I5USxRQUFRQyxHQUFHQyxNQUFNO0FBQzVDRSxPQUFPUSxJQUFJUCxHQUFHOEQsV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFFMUNVLElBQUlQLEdBQUdWLFlBQVlMLFNBQVNDLGNBQWM7QUFDMUNhLE9BQU9RLElBQUlkLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDckNFLE9BQU9RLElBQUlrUSxnQkFBZ0I5USxRQUFRQyxHQUFHQyxNQUFNO0FBQzVDRSxPQUFPUSxJQUFJUCxHQUFHOEQsV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFFMUNVLE1BQU10QixTQUFTQyxjQUFjO0FBQzdCOE8sUUFBUS9PLFNBQVNDLGNBQWM7QUFDL0IrTyxRQUFRaFAsU0FBU0MsY0FBYztBQUMvQitCLE9BQU9oQyxTQUFTeVIsZUFBZTtBQUMvQkYsVUFBVXZSLFNBQVMwUixjQUFjO0FBRWpDcFEsSUFBSWpCLFlBQVkwTztBQUNoQnpOLElBQUlqQixZQUFZa1I7QUFDaEJqUSxJQUFJakIsWUFBWTJPO0FBQ2hCMU4sSUFBSWpCLFlBQVkyQjtBQUNoQmxCLE9BQU9RLElBQUl1RCxXQUFXbkUsUUFBUUMsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUVyQytRLE9BQU83UyxJQUFJd0M7QUFDWFIsT0FBTzZRLEtBQUtuUixTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPNlEsS0FBS0gsZ0JBQWdCOVEsUUFBUUMsR0FBR0MsTUFBTTtBQUM3Q0UsT0FBTzZRLEtBQUtuUixTQUFTLEdBQUcyRSxLQUFLeEUsR0FBR0MsTUFBTW1PO0FBQ3RDak8sT0FBTzZRLEtBQUtuUixTQUFTLEdBQUcyRSxLQUFLeEUsR0FBR0MsTUFBTW9PO09BQ3RDbE8sT0FBTzZRLEtBQUtuUixTQUFTLEdBQUcyRSxLQUFLeEUsR0FBR0MsTUFBTW9COztBQUd2Q2IsS0FBSyxVQUFVO0FBQ2QwQjtJQUFJL0QsSUFBSXdDLElBQUksTUFBTXhDLElBQUl3QyxPQUFPO0FBQzdCMEIsSUFBSWxFLElBQUl3QztBQUNSNkIsSUFBSXJFLElBQUl3QztBQUVSUixPQUFPK0IsRUFBRTVCLFFBQVFOLEdBQUdDLE1BQU07QUFDMUJFLE9BQU8rQixFQUFFckMsU0FBUyxHQUFHUyxRQUFRTixHQUFHQyxNQUFNaUM7QUFDdEMvQixPQUFPK0IsRUFBRXJDLFNBQVMsR0FBR08sR0FBR0MsWUFBWUwsR0FBR0MsTUFBTWlDLEVBQUU5QjtBQUUvQ2lDLEVBQUUrQyxPQUFPbEQ7QUFDVC9CLE9BQU8rQixFQUFFNUIsUUFBUU4sR0FBR0MsTUFBTW9DO0FBQzFCbEMsT0FBTytCLEVBQUVyQyxTQUFTLEdBQUdTLFFBQVFOLEdBQUdDLE1BQU1pQztBQUN0Qy9CLE9BQU8rQixFQUFFckMsU0FBUyxHQUFHTyxHQUFHQyxZQUFZTCxHQUFHQyxNQUFNaUMsRUFBRTlCO0FBQy9DRCxPQUFPa0MsRUFBRXhDLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9rQyxFQUFFeEMsU0FBUyxJQUFJRyxHQUFHQyxNQUFNaUM7QUFFL0JNLEVBQUU0QyxPQUFPbEQ7QUFDVC9CLE9BQU8rQixFQUFFNUIsUUFBUU4sR0FBR0MsTUFBTXVDO0FBQzFCckMsT0FBTytCLEVBQUVyQyxTQUFTLEdBQUdTLFFBQVFOLEdBQUdDLE1BQU1pQztBQUN0Qy9CLE9BQU8rQixFQUFFckMsU0FBUyxHQUFHTyxHQUFHQyxZQUFZTCxHQUFHQyxNQUFNaUMsRUFBRTlCO0FBQy9DRCxPQUFPa0MsRUFBRXhDLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07T0FDbkNFLE9BQU9xQyxFQUFFM0MsU0FBUyxJQUFJRyxHQUFHQyxNQUFNaUM7O0FBR2hDMUIsS0FBSyxXQUFXO0FBQ2YwQjtJQUFJL0QsSUFBSXdDLE1BQU00RCxTQUFTdEY7QUFDdkJvRCxJQUFJbEUsSUFBSXdDLE1BQU00RCxTQUFTckM7QUFDdkJNLElBQUlyRSxJQUFJd0MsTUFBTTRELFNBQVNsQztBQUV2QmxDLE9BQU8rQixFQUFFNUIsT0FBT0YsSUFBSUosR0FBR0MsTUFBTWhCO0FBQzdCa0IsT0FBT2tDLEVBQUUvQixRQUFRTixHQUFHQyxNQUFNaUM7QUFDMUIvQixPQUFPcUMsRUFBRWxDLFFBQVFOLEdBQUdDLE1BQU1vQztBQUUxQmxDLE9BQU8rQixFQUFFK0MsUUFBUWxGLFFBQVFDLEdBQUdDLE1BQU1vQyxFQUFFNEMsUUFBUWxGLFNBQU87QUFDbkRJLE9BQU9rQyxFQUFFNEMsUUFBUWxGLFFBQVFDLEdBQUdDLE1BQU11QyxFQUFFeUMsUUFBUWxGLFNBQU87QUFDbkRJLE9BQU9rQyxFQUFFNEMsUUFBUSxJQUFJakYsR0FBR0MsTUFBTWlDO0FBQzlCL0IsT0FBT3FDLEVBQUV5QyxRQUFRLElBQUlqRixHQUFHQyxNQUFNb0M7QUFDOUJsQyxPQUFPcUMsRUFBRXlDLFFBQVFsRixRQUFRQyxHQUFHQyxNQUFNO09BQ2xDRSxPQUFPcUMsRUFBRXlDLFFBQVFnTSxNQUFNLENBQUMsR0FBRyxHQUFHN1EsSUFBSUosR0FBR0MsTUFBTVosU0FBUzZSOztBQUdyRDNRLE1BQU0sbUJBQW1CO0FBQ3hCd1AsU0FBUztPQUFLLEtBQUNvQixJQUFJalAsRUFBRWtIOztBQUNyQnlHLFdBQVc7QUFDVjNOO0lBQUkvRCxJQUFJdUQsUUFBUWdPO0tBQUk7O0FBQ3BCck4sSUFBSWxFLElBQUl3QyxJQUFJK087S0FBSTtHQUFLbkwsU0FBU3JDO0FBQzlCTSxJQUFJckUsSUFBSXdDLElBQUkrTztLQUFJO0dBQUtuTCxTQUFTbEM7QUFDOUJLLElBQUl2RSxJQUFJbUQsS0FBS29PO0tBQUk7R0FBS25MLFNBQVMvQjtPQUMvQixLQUFDMk8sTUFBTTtBQUFDLEFBemlCNkNqUDtBQXlpQjNDLEFBemlCMkNHO0FBeWlCekMsQUF6aUJ5Q0c7QUF5aUJ2QyxBQXppQnVDRTs7O0FBMmlCdERsQyxLQUFLLG1CQUFtQjtBQUN2QjBCO0VBQUMsR0FBRSxHQUFFLEFBMWlCaUJNLEdBMGlCZixBQTFpQmVFLEtBMGlCVixLQUFDeU87QUFDYmhSLE9BQU91QyxFQUFFdUMsU0FBU2pGLEdBQUc2SyxJQUFJLENBQUNySSxHQUFFSCxHQUFFSDtBQUM5Qi9CLE9BQU91QyxFQUFFME8sZUFBZSxPQUFPcFIsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT3VDLEVBQUUwTyxlQUFlL08sSUFBSXJDLEdBQUdDLE1BQU07QUFDckNFLE9BQU91QyxFQUFFME8sZUFBZTtPQUFLO0lBQU9wUixHQUFHQyxNQUFNO0FBQzdDRSxPQUFPdUMsRUFBRTBPLGVBQWUsVUFBQ2hSLElBQUQ7T0FBT0EsT0FBTWlDO0lBQUdyQyxHQUFHQyxNQUFNb0M7QUFDakRsQyxPQUFPdUMsRUFBRTBPLGVBQWUsVUFBQ2hSLElBQUQ7T0FBT0EsT0FBTThCO0lBQUdsQyxHQUFHQyxNQUFNaUM7QUFDakQvQixPQUFPdUMsRUFBRTBPLGVBQWUsVUFBQ2hSLElBQUQ7T0FBT0EsT0FBTW9DO0lBQUd4QyxHQUFHQyxNQUFNdUM7QUFFakROLEVBQUVxQyxTQUFTdEY7T0FDWGtCLE9BQU91QyxFQUFFME8sZUFBZSxVQUFDaFIsSUFBRDtPQUFPQSxHQUFHb0UsUUFBT25GLFNBQVM2UjtJQUFpQmxSLEdBQUdDLE1BQU05QixJQUFJa0IsU0FBUzZSOztPQUUxRjFRLEtBQUssY0FBYztBQUNsQjBCO0VBQUMsR0FBRSxBQW5qQkpHLEdBbWpCTSxBQW5qQk5HLEdBbWpCUSxBQW5qQlJFLEtBbWpCYSxLQUFDeU87QUFDYmhSLE9BQU91QyxFQUFFdUMsU0FBU2pGLEdBQUc2SyxJQUFJLENBQUNySSxHQUFFSCxHQUFFSDtBQUM5Qi9CLE9BQU91QyxFQUFFME8sZUFBZSxXQUFVcFIsR0FBR0MsTUFBTTtBQUMzQ0UsT0FBT3VDLEVBQUUwTyxlQUFlLE1BQUtwUixHQUFHQyxNQUFNb0M7QUFDdENsQyxPQUFPdUMsRUFBRTBPLGVBQWUsTUFBS3BSLEdBQUdDLE1BQU1pQztPQUN0Qy9CLE9BQU91QyxFQUFFME8sZUFBZSxNQUFLcFIsR0FBR0MsTUFBTXVDOzs7QUFHeENqQyxNQUFNLGlCQUFpQjtBQUN0QnNQLFdBQVc7QUFDVjNOO0lBQUkvRCxJQUFJdUQsUUFBUWdPO0tBQUk7O0FBQ3BCck4sSUFBSWxFLElBQUl3QyxJQUFJK087S0FBSTtHQUFLbkwsU0FBU3JDO0FBQzlCTSxJQUFJckUsSUFBSXdDLElBQUkrTztLQUFJO0dBQUtuTCxTQUFTbEM7QUFDOUJLLElBQUl2RSxJQUFJbUQsS0FBS29PO0tBQUk7R0FBS25MLFNBQVMvQjtPQUMvQixLQUFDMk8sTUFBTTtBQUFDLEFBempCUGpQO0FBeWpCUyxBQXpqQlRHO0FBeWpCVyxBQXpqQlhHO0FBeWpCYSxBQXpqQmJFOzs7QUEyakJGbEMsS0FBSyxtQkFBbUI7QUFDdkIwQjtFQUFDLEdBQUUsR0FBRSxBQTFqQkxNLEdBMGpCTyxBQTFqQlBFLEtBMGpCWSxLQUFDeU87QUFDYmhSLE9BQU91QyxFQUFFdUMsU0FBU2pGLEdBQUc2SyxJQUFJLENBQUNySSxHQUFFSCxHQUFFSDtBQUM5Qi9CLE9BQU91QyxFQUFFMk8sYUFBYSxPQUFPclIsR0FBRzZLLElBQUksQ0FBQ3JJLEdBQUVILEdBQUVIO0FBQ3pDL0IsT0FBT3VDLEVBQUUyTyxnQkFBZ0JyUixHQUFHNkssSUFBSSxDQUFDckksR0FBRUgsR0FBRUg7QUFDckMvQixPQUFPdUMsRUFBRTJPLGFBQWEsVUFBQ2pSLElBQUQ7T0FBT0EsT0FBTThCO0lBQUdsQyxHQUFHNkssSUFBSSxDQUFDckksR0FBRUg7QUFDaERsQyxPQUFPdUMsRUFBRTJPLGFBQWEsVUFBQ2pSLElBQUQ7T0FBT0EsT0FBTWlDO0lBQUdyQyxHQUFHNkssSUFBSSxDQUFDckk7T0FDOUNyQyxPQUFPdUMsRUFBRTJPLGFBQWEsVUFBQ2pSLElBQUQ7T0FBTztJQUFPSixHQUFHNkssSUFBSSxDQUFDckksR0FBRUgsR0FBRUg7O09BR2pEMUIsS0FBSyxjQUFjO0FBQ2xCMEI7RUFBQyxHQUFFLEFBOWpCSkcsR0E4akJNLEFBOWpCTkcsR0E4akJRLEFBOWpCUkUsS0E4akJhLEtBQUN5TztBQUNiaFIsT0FBT3VDLEVBQUUyTyxhQUFhLE1BQUtyUixHQUFHNkssSUFBSSxDQUFDckksR0FBRUg7QUFDckNsQyxPQUFPdUMsRUFBRTJPLGFBQWEsTUFBS3JSLEdBQUc2SyxJQUFJLENBQUNySTtPQUNuQ3JDLE9BQU91QyxFQUFFMk8sYUFBYSxXQUFVclIsR0FBRzZLLElBQUksQ0FBQ3JJLEdBQUVILEdBQUVIOzs7QUFHOUMxQixLQUFLLFFBQVE7QUFDWjBCO01BQU0vRCxJQUFJd0MsSUFBSSxNQUFNdUIsSUFBRS9ELElBQUl3QyxPQUFPMEIsSUFBRWxFLElBQUl3QyxPQUFPNkIsSUFBRXJFLElBQUl3QyxPQUFPK0IsSUFBRXZFLElBQUl3QyxPQUFPaUMsSUFBRXpFLElBQUl3QztBQUU5RVIsT0FBTytCLEVBQUVvUCxNQUFNdFIsR0FBR0MsTUFBTW9DO0FBQ3hCbEMsT0FBT3FDLEVBQUU4TyxNQUFNdFIsR0FBR0MsTUFBTXlDO0FBQ3hCdkMsT0FBT3lDLEVBQUUwTyxNQUFNdFIsR0FBR0MsTUFBTTtPQUN4QkUsT0FBT2tDLEVBQUVrUCxTQUFTdlIsR0FBRzZLLElBQUksQ0FBQ3JJLEdBQUVFLEdBQUVFOztBQUcvQnBDLEtBQUssZ0JBQWdCO0FBQ3BCMEI7TUFBTS9ELElBQUl3QyxJQUFJLE1BQU11QixJQUFFL0QsSUFBSXdDLE9BQU8wQixJQUFFbEUsSUFBSWtELFFBQVFtQixJQUFFckUsSUFBSXdDLE9BQU8rQixJQUFFdkUsSUFBSWtELFFBQVF1QixJQUFFekUsSUFBSXdDO0FBRWhGUixPQUFPK0IsRUFBRW9QLE1BQU10UixHQUFHQyxNQUFNb0M7QUFDeEJsQyxPQUFPK0IsRUFBRXNQLFFBQVF4UixHQUFHQyxNQUFNdUM7QUFDMUJyQyxPQUFPa0MsRUFBRW1QLFFBQVF4UixHQUFHQyxNQUFNdUM7QUFDMUJyQyxPQUFPcUMsRUFBRWdQLFFBQVF4UixHQUFHQyxNQUFNMkM7QUFDMUJ6QyxPQUFPeUMsRUFBRTRPLFFBQVF4UixHQUFHQyxNQUFNO09BQzFCRSxPQUFPK0IsRUFBRXVQLFdBQVd6UixHQUFHNkssSUFBSSxDQUFDckksR0FBRUk7O0FBRy9CcEMsS0FBSyxRQUFRO0FBQ1owQjtNQUFNL0QsSUFBSXdDLElBQUksTUFBTXVCLElBQUUvRCxJQUFJd0MsT0FBTzBCLElBQUVsRSxJQUFJd0MsT0FBTzZCLElBQUVyRSxJQUFJd0MsT0FBTytCLElBQUV2RSxJQUFJd0MsT0FBT2lDLElBQUV6RSxJQUFJd0M7QUFFOUVSLE9BQU95QyxFQUFFOE8sTUFBTTFSLEdBQUdDLE1BQU15QztBQUN4QnZDLE9BQU9xQyxFQUFFa1AsTUFBTTFSLEdBQUdDLE1BQU1vQztBQUN4QmxDLE9BQU8rQixFQUFFd1AsTUFBTTFSLEdBQUdDLE1BQU07T0FDeEJFLE9BQU91QyxFQUFFaVAsU0FBUzNSLEdBQUc2SyxJQUFJLENBQUNySSxHQUFFSCxHQUFFSDs7QUFHL0IxQixLQUFLLGdCQUFnQjtBQUNwQjBCO01BQU0vRCxJQUFJd0MsSUFBSSxNQUFNdUIsSUFBRS9ELElBQUl3QyxPQUFPMEIsSUFBRWxFLElBQUlrRCxRQUFRbUIsSUFBRXJFLElBQUl3QyxPQUFPK0IsSUFBRXZFLElBQUlrRCxRQUFRdUIsSUFBRXpFLElBQUl3QztBQUVoRlIsT0FBT3lDLEVBQUU4TyxNQUFNMVIsR0FBR0MsTUFBTXlDO0FBQ3hCdkMsT0FBT3lDLEVBQUVnUCxRQUFRNVIsR0FBR0MsTUFBTXVDO0FBQzFCckMsT0FBT3VDLEVBQUVrUCxRQUFRNVIsR0FBR0MsTUFBTXVDO0FBQzFCckMsT0FBT3FDLEVBQUVvUCxRQUFRNVIsR0FBR0MsTUFBTWlDO0FBQzFCL0IsT0FBTytCLEVBQUUwUCxRQUFRNVIsR0FBR0MsTUFBTTtPQUMxQkUsT0FBT3lDLEVBQUVpUCxXQUFXN1IsR0FBRzZLLElBQUksQ0FBQ3JJLEdBQUVOOztBQUcvQjFCLEtBQUssWUFBWTtBQUNoQjBCO01BQU0vRCxJQUFJd0MsSUFBSSxNQUFNdUIsSUFBRS9ELElBQUl3QyxPQUFPMEIsSUFBRWxFLElBQUlrRCxRQUFRbUIsSUFBRXJFLElBQUl3QyxPQUFPK0IsSUFBRXZFLElBQUlrRCxRQUFRdUIsSUFBRXpFLElBQUl3QztBQUVoRlIsT0FBT3FDLEVBQUVzUCxVQUFVOVIsR0FBRzZLLElBQUlySSxFQUFFbVAsUUFBUUksVUFBVUMsT0FBT3hQLEVBQUUrTztBQUN2RHBSLE9BQU9xQyxFQUFFc1AsVUFBVTlSLEdBQUc2SyxJQUFJLENBQUMzSSxHQUFFRyxHQUFFSyxHQUFFRTtBQUNqQ3pDLE9BQU9xQyxFQUFFeVAsaUJBQWlCalMsR0FBRzZLLElBQUksQ0FBQzNJLEdBQUVVO09BQ3BDekMsT0FBT2tDLEVBQUU0UCxpQkFBaUJqUyxHQUFHNkssSUFBSSxDQUFDM0ksR0FBRU0sR0FBRUk7O0FBR3ZDcEMsS0FBSyxvQkFBb0I7QUFDeEJ1RztPQUFPM0ksSUFBSXVDLElBQUlwQjtJQUFHOztBQUNsQndILE9BQU8zSSxJQUFJdUMsSUFBSXBCO0lBQUc7R0FBUWdGLFNBQVMzRTtBQUNuQ29ILE9BQU81SSxJQUFJdUMsSUFBSXBCO0lBQUc7R0FBUWdGLFNBQVMzRTtBQUNuQ2dPLE9BQU94UCxJQUFJdUMsSUFBSXBCO0lBQUc7R0FBUWdGLFNBQVMzRTtBQUNuQ3NTLFFBQVE5VCxJQUFJdUMsSUFBSXBCO0lBQUc7R0FBU2dGLFNBQVN5QztBQUNyQ21MLFFBQVEvVCxJQUFJdUMsSUFBSXBCO0lBQUc7R0FBU2dGLFNBQVN5QztBQUVyQzdHLE9BQU9QLEtBQUt3UyxZQUFZcFMsR0FBR0MsTUFBTThHO0FBQ2pDNUcsT0FBT1AsS0FBS3lTLFdBQVdyUyxHQUFHQyxNQUFNMk47QUFDaEN6TixPQUFPNEcsS0FBS3FMLFlBQVlwUyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPNEcsS0FBS3NMLFdBQVdyUyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPNkcsS0FBS29MLFlBQVlwUyxHQUFHQyxNQUFNaVM7T0FDakMvUixPQUFPNkcsS0FBS3FMLFdBQVdyUyxHQUFHQyxNQUFNa1M7O0FBR2pDM1IsS0FBSyxrQkFBa0I7QUFDdEJ1RztPQUNDNUksSUFBSXdDLElBQUk7QUFBQ3BCLElBQUc7R0FDWHBCLElBQUl3QyxJQUFJO0FBQUNwQixJQUFHO0dBQ1hwQixJQUFJbUQsS0FBSztBQUFDb08sS0FBSTtJQUNkdlIsSUFBSXdDLElBQUk7QUFBQytPLEtBQUk7QUFBWW5RLElBQUc7S0FDN0JwQixJQUFJd0MsSUFBSSxJQUNQeEMsSUFBSW1ELEtBQUs7QUFBQ29PLEtBQUk7SUFDZHZSLElBQUlrRCxLQUFLO0FBQUM5QixJQUFHO0dBQWE7QUFHN0J5SCxPQUFPN0ksSUFBSW1VLFNBQ1YsQ0FBQyxPQUFPO0FBQUMvUyxJQUFHO0dBQ1gsQ0FBQyxPQUFPO0FBQUNBLElBQUc7QUFBVThFLE9BQU07QUFBQzBLLE9BQU07O0dBQ2xDLENBQUMsUUFBUTtBQUFDVyxLQUFJO0lBQ2QsQ0FBQyxPQUFPO0FBQUNBLEtBQUk7QUFBWW5RLElBQUc7S0FFN0IsQ0FBQyxPQUFPLE1BQ1AsQ0FBQyxRQUFRO0FBQUNtUSxLQUFJO01BR2Y2QztBQUVGM0UsT0FBT3pQLElBQUltVSxTQUNWLENBQUMsT0FBTzVDO0tBQUk7R0FDWCxDQUFDLE9BQU9BO0tBQUk7R0FDWCxDQUFDLE9BQU9BO0tBQUk7SUFDWixDQUFDLE9BQU9BO0tBQUk7S0FFYixDQUFDLE9BQU9BO0tBQUk7R0FDWCxDQUFDLE9BQU9BO0tBQUk7SUFDWixDQUFDLE9BQU9BO0tBQUk7SUFDWixDQUFDLE9BQU9BO0tBQUk7R0FDWCxDQUFDLE9BQU9BO0tBQUk7T0FJZDZDO0FBR0ZwUyxPQUFPNEcsS0FBS2pILE1BQU1rTyxRQUFRaE8sR0FBR0MsTUFBTThHLEtBQUtsSCxTQUFTO0FBQ2pETSxPQUFPNEcsS0FBS2pILE1BQU0wUyxVQUFVeFMsR0FBR0MsTUFBTThHLEtBQUtsSCxTQUFTLEdBQUdBLFNBQVM7QUFDL0RNLE9BQU80RyxLQUFLakgsTUFBTTJTLFVBQVV6UyxHQUFHQyxNQUFNOEcsS0FBS2xILFNBQVMsR0FBR0EsU0FBUztBQUMvRE0sT0FBTzRHLEtBQUtqSCxNQUFNNFMsVUFBVTFTLEdBQUdDLE1BQU07QUFDckNFLE9BQU80RyxLQUFLakgsTUFBTW1PLFFBQVFqTyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPNEcsS0FBS2pILE1BQU02UyxVQUFVM1MsR0FBR0MsTUFBTThHLEtBQUtsSCxTQUFTLEdBQUdBLFNBQVM7QUFDL0RNLE9BQU80RyxLQUFLakgsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNOEcsS0FBS2xILFNBQVMsR0FBR0EsU0FBUztBQUMvRE0sT0FBTzRHLEtBQUtqSCxNQUFNOFMsU0FBUzlRLE1BQU05QixHQUFHQyxNQUFNO0FBRzFDRSxPQUFPNkcsS0FBS2xILE1BQU1rTyxRQUFRaE8sR0FBR0MsTUFBTStHLEtBQUtuSCxTQUFTO0FBQ2pETSxPQUFPNkcsS0FBS2xILE1BQU0wUyxVQUFVeFMsR0FBR0MsTUFBTStHLEtBQUtuSCxTQUFTLEdBQUdBLFNBQVM7QUFDL0RNLE9BQU82RyxLQUFLbEgsTUFBTTJTLFVBQVV6UyxHQUFHQyxNQUFNK0csS0FBS25ILFNBQVMsR0FBR0EsU0FBUztBQUMvRE0sT0FBTzZHLEtBQUtsSCxNQUFNNFMsVUFBVTFTLEdBQUdDLE1BQU07QUFDckNFLE9BQU82RyxLQUFLbEgsTUFBTW1PLFFBQVFqTyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPNkcsS0FBS2xILE1BQU02UyxVQUFVM1MsR0FBR0MsTUFBTStHLEtBQUtuSCxTQUFTLEdBQUdBLFNBQVM7QUFDL0RNLE9BQU82RyxLQUFLbEgsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNK0csS0FBS25ILFNBQVMsR0FBR0EsU0FBUztBQUMvRE0sT0FBTzZHLEtBQUtsSCxNQUFNa08sT0FBTzNKLE1BQU0sVUFBVXJFLEdBQUdDLE1BQU07QUFDbERFLE9BQU82RyxLQUFLbEgsTUFBTWtPLE9BQU9wRCxVQUFVLFVBQVU1SSxJQUFJaEMsR0FBR0MsTUFBTTtBQUMxREUsT0FBTzZHLEtBQUtsSCxNQUFNa08sT0FBT3BELFVBQVUsU0FBUzdLLFVBQVUsR0FBR0MsR0FBR1ksR0FBR3VFO0FBRy9EaEYsT0FBTzRHLEtBQUtqSCxNQUFNa08sT0FBT3hKLElBQUlaLGFBQWEsT0FBTzVELEdBQUdDLE1BQU07QUFDMURFLE9BQU80RyxLQUFLakgsTUFBTWtPLE9BQU94SixJQUFJWixhQUFhLGFBQWE1RCxHQUFHQyxNQUFNO0FBQ2hFRSxPQUFPNEcsS0FBS2pILE1BQU0wUyxTQUFTaE8sSUFBSVosYUFBYSxPQUFPNUQsR0FBR0MsTUFBTTtBQUM1REUsT0FBTzRHLEtBQUtqSCxNQUFNMFMsU0FBU2hPLElBQUlaLGFBQWEsYUFBYTVELEdBQUdDLE1BQU07QUFDbEVFLE9BQU80RyxLQUFLakgsTUFBTTJTLFNBQVNqTyxJQUFJWixhQUFhLE9BQU81RCxHQUFHQyxNQUFNO0FBQzVERSxPQUFPNEcsS0FBS2pILE1BQU0yUyxTQUFTak8sSUFBSVosYUFBYSxhQUFhNUQsR0FBR0MsTUFBTTtBQUVsRUUsT0FBT3lOLEtBQUs5TixNQUFNa08sUUFBUWhPLEdBQUdDLE1BQU0yTixLQUFLL04sU0FBUztBQUNqRE0sT0FBT3lOLEtBQUs5TixNQUFNbU8sUUFBUWpPLEdBQUdDLE1BQU0yTixLQUFLL04sU0FBUztBQUNqRE0sT0FBT3lOLEtBQUs5TixNQUFNa0gsTUFBTWhILEdBQUdDLE1BQU0yTixLQUFLL04sU0FBUyxHQUFHQSxTQUFTO0FBQzNETSxPQUFPeU4sS0FBSzlOLE1BQU04TixNQUFNNU4sR0FBR0MsTUFBTTJOO0FBQ2pDek4sT0FBT3lOLEtBQUs5TixNQUFNK1MsTUFBTTdTLEdBQUdDLE1BQU0yTixLQUFLL04sU0FBUyxHQUFHQSxTQUFTO0FBQzNETSxPQUFPeU4sS0FBSy9OLFNBQVMsR0FBR0MsTUFBTWtILE1BQU1oSCxHQUFHQyxNQUFNMk4sS0FBSy9OLFNBQVMsR0FBR0EsU0FBUztBQUN2RU0sT0FBT3lOLEtBQUsvTixTQUFTLEdBQUdDLE1BQU04TixNQUFNNU4sR0FBR0MsTUFBTTJOLEtBQUsvTixTQUFTLEdBQUdBLFNBQVM7QUFDdkVNLE9BQU95TixLQUFLL04sU0FBUyxHQUFHQyxNQUFNa0gsTUFBTWhILEdBQUdDLE1BQU0yTixLQUFLL04sU0FBUyxHQUFHQSxTQUFTO0FBQ3ZFTSxPQUFPeU4sS0FBSy9OLFNBQVMsR0FBR0MsTUFBTThOLE1BQU01TixHQUFHQyxNQUFNMk4sS0FBSy9OLFNBQVMsR0FBR0EsU0FBUztBQUN2RU0sT0FBT3lOLEtBQUsvTixTQUFTLEdBQUdDLE1BQU0rUyxNQUFNN1MsR0FBR0MsTUFBTTJOLEtBQUsvTixTQUFTLEdBQUdBLFNBQVM7QUFDdkVNLE9BQU95TixLQUFLL04sU0FBUyxHQUFHQyxNQUFNbU8sUUFBUWpPLEdBQUdDLE1BQU0yTixLQUFLL04sU0FBUztBQUU3RGlULFVBQVUzVSxJQUFJYztBQUNka0IsT0FBTzJTLFFBQVFoVCxNQUFNa08sUUFBUWhPLEdBQUdDLE1BQU07QUFDdENFLE9BQU8yUyxRQUFRaFQsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNO0FBQ3hDRSxPQUFPMlMsUUFBUWhULE1BQU1pSCxNQUFNL0csR0FBR0MsTUFBTTtBQUVwQzZTLFFBQVExTixPQUFPMkI7QUFDZjVHLE9BQU8yUyxRQUFRaFQsTUFBTWtPLFFBQVFoTyxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPMlMsUUFBUWhULE1BQU04UyxVQUFVNVMsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBTzJTLFFBQVFoVCxNQUFNaUgsTUFBTS9HLEdBQUdDLE1BQU07QUFDcENFLE9BQU8yUyxRQUFRQyxPQUFPaE0sTUFBTS9HLEdBQUdDLE1BQU04RztBQUNyQzVHLE9BQU8yUyxRQUFRaFQsTUFBTWtPLFFBQVFoTyxHQUFHQyxNQUFNOEcsS0FBS2xILFNBQVM7QUFDcERNLE9BQU8yUyxRQUFRaFQsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNOEcsS0FBS2xILFNBQVMsR0FBR0EsU0FBUztBQUNsRU0sT0FBTzJTLFFBQVFoVCxNQUFNaUgsTUFBTS9HLEdBQUdDLE1BQU04RztBQUVwQ2lNLFdBQVc3VSxJQUFJd0MsSUFBSStPO0tBQUk7O0FBQ3ZCdUQsZ0JBQWdCOVUsSUFBSXdDLElBQUkrTztLQUFJOztBQUM1QnZQLE9BQU82UyxTQUFTbFQsTUFBTW1ULGVBQWVqVCxHQUFHQyxNQUFNO0FBQzlDRSxPQUFPOFMsY0FBY25ULE1BQU1tVCxlQUFlalQsR0FBR0MsTUFBTWdUO0FBQ25EOVMsT0FBTytTLE9BQU9DLEtBQUtGLGNBQWNuVCxPQUFPQyxRQUFRQyxHQUFHQyxNQUFNO0FBRXpEZ1QsY0FBYzFPLFNBQVN5TztBQUN2QjdTLE9BQU82UyxTQUFTbFQsTUFBTW1ULGVBQWVqVCxHQUFHQyxNQUFNO0FBQzlDRSxPQUFPNlMsU0FBU0QsT0FBT0UsZUFBZWpULEdBQUdDLE1BQU1nVDtBQUMvQzlTLE9BQU82UyxTQUFTbFQsTUFBTW1ULGVBQWVqVCxHQUFHQyxNQUFNZ1Q7QUFDOUM5UyxPQUFPK1MsT0FBT0MsS0FBS0YsY0FBY25ULE9BQU9DLFFBQVFDLEdBQUdDLE1BQU07QUFFekRtVCxZQUFZalYsSUFBSXdDLElBQUkrTztLQUFJOztBQUN4QnNELFNBQVN6TyxTQUFTNk87T0FDbEJqVCxPQUFPaVQsVUFBVXRULE1BQU1tVCxlQUFlalQsR0FBR0MsTUFBTWdUOztBQUdoRHpTLEtBQUssU0FBUztBQUNid047VUFDQzdQLElBQUl1RCxRQUFRLE1BQ1hzTSxTQUFTN1AsSUFBSXdDLE9BQ2JzTixTQUFTOVAsSUFBSXdDLE9BQ2IwUyxTQUFTbFYsSUFBSW1ELFFBQ2JnUyxTQUFTblYsSUFBSWtELFFBQ2JrUyxTQUFTcFYsSUFBSW1ELFFBQ2JrUyxTQUFTclYsSUFBSXdDO0FBR2ZSLE9BQU84TixPQUFPL04sT0FBT0YsR0FBR0MsTUFBTTtBQUM5QkUsT0FBT21ULE9BQU9wVCxPQUFPRixHQUFHQyxNQUFNO0FBQzlCRSxPQUFPcVQsT0FBT3RULE9BQU9GLEdBQUdDLE1BQU07QUFFOUJvVCxPQUFPaks7QUFDUGpKLE9BQU84TixPQUFPL04sT0FBT0YsR0FBR0MsTUFBTTtBQUM5QkUsT0FBT21ULE9BQU9wVCxPQUFPRixHQUFHQyxNQUFNO0FBQzlCRSxPQUFPcVQsT0FBT3RULE9BQU9GLEdBQUdDLE1BQU07T0FDOUJFLE9BQU9rVCxPQUFPblQsT0FBT0YsR0FBR0MsTUFBTTs7QUFHL0JPLEtBQUssbUJBQW1CO0FBQ3ZCd047VUFDQzdQLElBQUl1RCxRQUFRLE1BQ1hzTSxTQUFTN1AsSUFBSXdDLE9BQ2JzTixTQUFTOVAsSUFBSXdDLE9BQ2IwUyxTQUFTbFYsSUFBSW1ELFFBQ2JnUyxTQUFTblYsSUFBSWtELFFBQ2JrUyxTQUFTcFYsSUFBSW1ELFFBQ2JrUyxTQUFTclYsSUFBSWtELFFBQ2JvUyxTQUFTdFYsSUFBSXdDO0FBR2ZSLE9BQU84TixPQUFPeUYsV0FBVzFULEdBQUdDLE1BQU07QUFDbENFLE9BQU9tVCxPQUFPSSxXQUFXMVQsR0FBR0MsTUFBTTtBQUNsQ0UsT0FBT3FULE9BQU9FLFdBQVcxVCxHQUFHQyxNQUFNO0FBQ2xDRSxPQUFPc1QsT0FBT0MsV0FBVzFULEdBQUdDLE1BQU07QUFFbENvVCxPQUFPaks7QUFDUGpKLE9BQU84TixPQUFPeUYsV0FBVzFULEdBQUdDLE1BQU07QUFDbENFLE9BQU9tVCxPQUFPSSxXQUFXMVQsR0FBR0MsTUFBTTtBQUNsQ0UsT0FBT3FULE9BQU9FLFdBQVcxVCxHQUFHQyxNQUFNO0FBQ2xDRSxPQUFPc1QsT0FBT0MsV0FBVzFULEdBQUdDLE1BQU07QUFFbEMrTixPQUFPNUU7QUFDUGpKLE9BQU84TixPQUFPeUYsV0FBVzFULEdBQUdDLE1BQU07QUFDbENFLE9BQU9tVCxPQUFPSSxXQUFXMVQsR0FBR0MsTUFBTTtBQUNsQ0UsT0FBT3FULE9BQU9FLFdBQVcxVCxHQUFHQyxNQUFNO0FBQ2xDRSxPQUFPc1QsT0FBT0MsV0FBVzFULEdBQUdDLE1BQU07QUFDbENFLE9BQU82TixPQUFPMEYsV0FBVzFULEdBQUdDLE1BQU07T0FDbENFLE9BQU9rVCxPQUFPSyxXQUFXMVQsR0FBR0MsTUFBTTs7QUFHbkNPLEtBQUssa0JBQWtCO0FBQ3RCd047VUFDQzdQLElBQUl1RCxRQUFRLE1BQ1hzTSxTQUFTN1AsSUFBSXdDLElBQUkrTztLQUFJO0lBQ3JCekIsU0FBUzlQLElBQUl3QyxJQUFJK087S0FBSTtJQUNyQjJELFNBQVNsVixJQUFJbUQsS0FBS29PO0tBQUk7SUFDdEI0RCxTQUFTblYsSUFBSWtELEtBQUtxTztLQUFJO0lBQ3RCNkQsU0FBU3BWLElBQUltRCxLQUFLb087S0FBSTtJQUN0QjhELFNBQVNyVixJQUFJa0QsS0FBS3FPO0tBQUk7SUFDdEIrRCxTQUFTdFYsSUFBSXdDLElBQUkrTztLQUFJOztBQUd2QnZQLE9BQU84TixPQUFPMEYsVUFBVTNULEdBQUdDLE1BQU07QUFDakNFLE9BQU9tVCxPQUFPSyxVQUFVM1QsR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT3FULE9BQU9HLFVBQVUzVCxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPc1QsT0FBT0UsVUFBVTNULEdBQUdDLE1BQU07QUFFakNvVCxPQUFPaks7QUFDUGpKLE9BQU84TixPQUFPMEYsVUFBVTNULEdBQUdDLE1BQU07QUFDakNFLE9BQU9tVCxPQUFPSyxVQUFVM1QsR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT3FULE9BQU9HLFVBQVUzVCxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPc1QsT0FBT0UsVUFBVTNULEdBQUdDLE1BQU07QUFFakMrTixPQUFPNUU7QUFDUGpKLE9BQU84TixPQUFPMEYsVUFBVTNULEdBQUdDLE1BQU07QUFDakNFLE9BQU9tVCxPQUFPSyxVQUFVM1QsR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT3FULE9BQU9HLFVBQVUzVCxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPc1QsT0FBT0UsVUFBVTNULEdBQUdDLE1BQU07QUFDakNFLE9BQU82TixPQUFPMkYsVUFBVTNULEdBQUdDLE1BQU07T0FDakNFLE9BQU9rVCxPQUFPTSxVQUFVM1QsR0FBR0MsTUFBTTs7QUFHbENPLEtBQUssU0FBUztBQUNiRztNQUFNeEMsSUFBSW1VLFNBQ1QsQ0FBQyxPQUFPO0FBQUNuUSxPQUFNO0FBQVdJLE9BQU1SO01BQUs7O0dBQ3BDLENBQUMsT0FBTztBQUFDSSxPQUFNO0FBQVVrQyxPQUFNO0FBQUMwSyxPQUFNOztHQUNyQyxDQUFDLFFBQVE7QUFBQzVNLE9BQU07SUFDaEIsQ0FBQyxPQUFPO0FBQUNBLE9BQU07SUFDZixDQUFDLFFBQVE7QUFBQ0EsT0FBTTtJQUNoQixDQUFDLE9BQU87QUFBQ0EsT0FBTTtLQUVoQixDQUFDLE9BQU9HO1dBQVU7R0FDakIsQ0FBQyxRQUFRO0FBQUNILE9BQU07S0FFakIsQ0FBQyxXQUFXRztXQUFVO0dBQ3JCLENBQUMsUUFBUTtBQUFDSCxPQUFNO01BR2pCb1EsUUFBUWhPLFNBQVN1TyxVQUFVM1UsSUFBSWM7QUFFakNrQixPQUFPUSxJQUFJaVQsTUFBTSxZQUFXNVQsR0FBR0MsTUFBTVUsSUFBSWQsU0FBUztBQUNsRE0sT0FBT1EsSUFBSWlULE1BQU0sWUFBVzVULEdBQUdDLE1BQU1VLElBQUlkLFNBQVM7QUFDbERNLE9BQU9RLElBQUlpVCxNQUFNLGNBQWE1VCxHQUFHQyxNQUFNVSxJQUFJZCxTQUFTLEdBQUdBLFNBQVM7QUFDaEVNLE9BQU9RLElBQUlpVCxNQUFNLGNBQWE1VCxHQUFHQyxNQUFNVSxJQUFJZCxTQUFTLEdBQUdBLFNBQVM7QUFDaEVNLE9BQU9RLElBQUlpVCxNQUFNLGNBQWE1VCxHQUFHQyxNQUFNVSxJQUFJZCxTQUFTLEdBQUdBLFNBQVM7QUFDaEVNLE9BQU8yUyxRQUFRYyxNQUFNLGFBQVk1VCxHQUFHQyxNQUFNVTtBQUMxQ1IsT0FBTzJTLFFBQVFjLE1BQU0sY0FBYTVULEdBQUdDLE1BQU1VLElBQUlkLFNBQVMsR0FBR0EsU0FBUztBQUNwRU0sT0FBTzJTLFFBQVFjLE1BQU0sdUJBQXNCNVQsR0FBR0MsTUFBTVU7T0FDcERSLE9BQU8yUyxRQUFRYyxNQUFNLHdCQUF1QjVULEdBQUdDLE1BQU07O0FBR3RETyxLQUFLLFlBQVk7QUFDaEJHO01BQU14QyxJQUFJbVUsU0FDVCxDQUFDLE9BQU87QUFBQ25RLE9BQU07QUFBV0ksT0FBTVI7TUFBSzs7R0FDcEMsQ0FBQyxPQUFPO0FBQUNJLE9BQU07QUFBVWtDLE9BQU07QUFBQzBLLE9BQU07O0dBQ3JDLENBQUMsUUFBUTtBQUFDNU0sT0FBTTtJQUNoQixDQUFDLE9BQU87QUFBQ0EsT0FBTTtJQUNmLENBQUMsUUFBUTtBQUFDQSxPQUFNO0lBQ2hCLENBQUMsT0FBTztBQUFDQSxPQUFNO0tBRWhCLENBQUMsT0FBT0c7V0FBVTtHQUNqQixDQUFDLFFBQVE7QUFBQ0gsT0FBTTtLQUVqQixDQUFDLFdBQVdHO1dBQVU7R0FDckIsQ0FBQyxRQUFRO0FBQUNILE9BQU07TUFHakJvUSxRQUFRaE8sU0FBU3VPLFVBQVUzVSxJQUFJYztBQUVqQ2tCLE9BQU9RLElBQUlrVCxTQUFTLFdBQVdyTixVQUFVeEcsR0FBRzZLLElBQUksQ0FBQ2xLLElBQUlkLFNBQVM7QUFDOURNLE9BQU9RLElBQUlrVCxTQUFTLFdBQVdyTixVQUFVeEcsR0FBRzZLLElBQUksQ0FBQ2xLLElBQUlkLFNBQVMsSUFBSWMsSUFBSWQsU0FBUztBQUMvRU0sT0FBT1EsSUFBSWtULFNBQVMsYUFBYXJOLFVBQVV4RyxHQUFHNkssSUFBSSxDQUFDbEssSUFBSWQsU0FBUyxHQUFHQSxTQUFTLElBQUljLElBQUlkLFNBQVMsR0FBR0EsU0FBUztBQUN6R00sT0FBT1EsSUFBSWtULFNBQVMsYUFBYXJOLFVBQVV4RyxHQUFHNkssSUFBSSxDQUFDbEssSUFBSWQsU0FBUyxHQUFHQSxTQUFTLElBQUljLElBQUlkLFNBQVMsR0FBR0EsU0FBUyxJQUFJYyxJQUFJZCxTQUFTLEdBQUdBLFNBQVM7QUFDdElNLE9BQU9RLElBQUlrVCxTQUFTLGFBQWFyTixVQUFVeEcsR0FBRzZLLElBQUksQ0FBQ2xLLElBQUlkLFNBQVMsR0FBR0EsU0FBUztBQUM1RU0sT0FBTzJTLFFBQVFlLFNBQVMsWUFBWXJOLFVBQVV4RyxHQUFHNkssSUFBSSxDQUFDbEs7QUFDdERSLE9BQU8yUyxRQUFRZSxTQUFTLGFBQWFyTixVQUFVeEcsR0FBRzZLLElBQUksQ0FBQ2xLLElBQUlkLFNBQVMsR0FBR0EsU0FBUyxJQUFJYyxJQUFJZCxTQUFTLEdBQUdBLFNBQVM7QUFDN0dNLE9BQU8yUyxRQUFRZSxTQUFTLHNCQUFzQnJOLFVBQVV4RyxHQUFHNkssSUFBSSxDQUFDbEs7QUFDaEVSLE9BQU8yUyxRQUFRZSxTQUFTLHVCQUF1QnJOLFVBQVV4RyxHQUFHNkssSUFBSTtBQUNoRTFLLE9BQU9RLElBQUlVLE1BQU1yQixHQUFHQyxNQUFNO0FBQzFCRSxPQUFPMlMsUUFBUWUsU0FBUyxhQUFheFMsS0FBSyxVQUFVbUYsVUFBVXhHLEdBQUc2SyxJQUFJLENBQUNsSyxJQUFJZCxTQUFTLEdBQUdBLFNBQVMsSUFBSWMsSUFBSWQsU0FBUyxHQUFHQSxTQUFTO09BQzVITSxPQUFPUSxJQUFJVSxNQUFNckIsR0FBR0MsTUFBTTs7T0FHM0JPLEtBQUssNEJBQTRCO0FBQ2hDc1Q7T0FBTzNWLElBQUl5VixNQUFNLFNBQVM1VCxHQUFHQyxNQUFNOUIsSUFBSWtCLFVBQVV1VSxNQUFNO0FBQ3ZEelQsT0FBT2hDLElBQUl5VixNQUFNLFNBQVM1VCxHQUFHQyxNQUFNOUIsSUFBSWtCLFVBQVV1VSxNQUFNO0FBRXZERSxPQUFPM1YsSUFBSTBWLFNBQVMsV0FBV3JOO0FBQy9CdU4sT0FBTzVWLElBQUlrQixVQUFVd1UsU0FBUyxXQUFXck47QUFDekNyRyxPQUFPMlQsS0FBSy9ULFFBQVFDLEdBQUdDLE1BQU04VCxLQUFLaFU7QUFDbENHOztBQUNDQyxPQUFPMlQsS0FBSzVULFFBQVFGLEdBQUdDLE1BQU04VCxLQUFLN1Q7Ozs7QUFLckNLLE1BQU0sZ0JBQWdCO0FBQ3JCQyxLQUFLLGFBQWE7QUFDakIwQjtJQUFJL0QsSUFBSXdDO0FBQ1IwQixJQUFJbEUsSUFBSXdDO0FBQ1I2QixJQUFJckUsSUFBSWtEO0FBQ1JxQixJQUFJdkUsSUFBSXdDO0FBQ1JxVCxRQUFRN1YsSUFBSXdDLElBQUksTUFBTXVCLEdBQUdHLEdBQUdHLEdBQUdFO0FBQy9CdVIsUUFBUTlWLElBQUl3QztBQUVaaEIsb0JBQW9CcVUsT0FBTzlSLEdBQUdHLEdBQUdHLEdBQUdFO0FBQ3BDL0Msb0JBQW9Cc1U7QUFFcEJBLE1BQU03TyxPQUFPbEQ7QUFDYnZDLG9CQUFvQnFVLE9BQU8zUixHQUFHRyxHQUFHRTtBQUNqQy9DLG9CQUFvQnNVLE9BQU8vUjtBQUUzQk0sRUFBRStCLFNBQVMwUDtBQUNYdFUsb0JBQW9CcVUsT0FBTzNSLEdBQUdLO09BQzlCL0Msb0JBQW9Cc1UsT0FBTy9SLEdBQUdNOztBQUkvQmhDLEtBQUssY0FBYztBQUNsQjBCO0lBQUkvRCxJQUFJd0M7QUFDUjBCLElBQUlsRSxJQUFJd0M7QUFDUjZCLElBQUlyRSxJQUFJa0Q7QUFDUnFCLElBQUl2RSxJQUFJd0M7QUFDUnFULFFBQVE3VixJQUFJd0MsSUFBSSxNQUFNdUIsR0FBR0csR0FBR0csR0FBR0U7QUFDL0J1UixRQUFROVYsSUFBSXdDO0FBRVpoQixvQkFBb0JxVSxPQUFPOVIsR0FBR0csR0FBR0csR0FBR0U7QUFDcEMvQyxvQkFBb0JzVTtBQUVwQkEsTUFBTUMsUUFBUWhTO0FBQ2R2QyxvQkFBb0JxVSxPQUFPM1IsR0FBR0csR0FBR0U7QUFDakMvQyxvQkFBb0JzVSxPQUFPL1I7QUFFM0JNLEVBQUUyUixVQUFVRjtBQUNadFUsb0JBQW9CcVUsT0FBTzNSLEdBQUdLO09BQzlCL0Msb0JBQW9Cc1UsT0FBT3pSLEdBQUdOOztBQUcvQjFCLEtBQUssWUFBWTtBQUNoQjBCO0lBQUkvRCxJQUFJd0M7QUFDUjBCLElBQUlsRSxJQUFJd0M7QUFDUjZCLElBQUlyRSxJQUFJa0Q7QUFDUnFCLElBQUl2RSxJQUFJd0M7QUFDUnFULFFBQVE3VixJQUFJd0MsSUFBSSxNQUFNdUIsR0FBR0csR0FBR0csR0FBR0U7QUFDL0J1UixRQUFROVYsSUFBSXdDO0FBRVpoQixvQkFBb0JxVSxPQUFPOVIsR0FBR0csR0FBR0csR0FBR0U7QUFDcEMvQyxvQkFBb0JzVTtBQUVwQkEsTUFBTTdPLE9BQU8vQztBQUNiQSxFQUFFK1IsTUFBTWxTO0FBQ1J2QyxvQkFBb0JxVSxPQUFPeFIsR0FBR0U7QUFDOUIvQyxvQkFBb0JzVSxPQUFPNVIsR0FBR0g7QUFFOUJNLEVBQUU2UixZQUFZaFM7QUFDZDFDLG9CQUFvQnFVLE9BQU90UjtPQUMzQi9DLG9CQUFvQnNVLE9BQU81UixHQUFHRyxHQUFHTjs7QUFHbEMxQixLQUFLLGFBQWE7QUFDakIwQjtJQUFJL0QsSUFBSXdDO0FBQ1IwQixJQUFJbEUsSUFBSXdDO0FBQ1I2QixJQUFJckUsSUFBSWtEO0FBQ1JxQixJQUFJdkUsSUFBSXdDO0FBQ1JxVCxRQUFRN1YsSUFBSXdDLElBQUksTUFBTXVCLEdBQUdHLEdBQUdHLEdBQUdFO0FBQy9CdVIsUUFBUTlWLElBQUl3QztBQUVaaEIsb0JBQW9CcVUsT0FBTzlSLEdBQUdHLEdBQUdHLEdBQUdFO0FBQ3BDL0Msb0JBQW9Cc1U7QUFFcEJBLE1BQU03TyxPQUFPL0M7QUFDYkEsRUFBRWlTLE9BQU9wUztBQUNUdkMsb0JBQW9CcVUsT0FBT3hSLEdBQUdFO0FBQzlCL0Msb0JBQW9Cc1UsT0FBTy9SLEdBQUdHO0FBRTlCRyxFQUFFcUwsYUFBYXhMO0FBQ2YxQyxvQkFBb0JxVSxPQUFPdFI7T0FDM0IvQyxvQkFBb0JzVSxPQUFPL1IsR0FBR00sR0FBR0g7O0FBR2xDN0IsS0FBSyxhQUFhO0FBQ2pCRztZQUFZO0FBQ1pBLE1BQU14QyxJQUFJd0MsSUFBSSxNQUFNO0FBQ3BCQSxJQUFJNkcsR0FBRyxRQUFRO09BQUtrQjs7QUFDcEIvSCxJQUFJbUssTUFBTSxTQUFTO0FBQ25CbkssSUFBSW1LLE1BQU0sV0FBVztBQUVyQjNLLE9BQU9RLElBQUlMLFFBQVEwQixJQUFJaEMsR0FBR3VVO0FBQzFCcFUsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBQzNCRSxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ2hDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd1RTtBQUVsQ3hFLElBQUk0RCxTQUFTdEY7QUFDYjBCLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPbEIsUUFBUVksU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT1EsSUFBSUwsT0FBT0YsSUFBSUosR0FBR0MsTUFBTWhCO0FBQy9Ca0IsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBQzNCRSxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ2hDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd1RTtBQUVsQ3hFLElBQUl5STtBQUNKekksSUFBSWtILEtBQUs7QUFDVDFILE9BQU9sQixRQUFRWSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPUSxJQUFJTCxRQUFRMEIsSUFBSWhDLEdBQUd1VTtBQUMxQnBVLE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUMzQkUsT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtPQUNoQ2hGLE9BQU9RLElBQUltSyxNQUFNLFlBQVc5SyxHQUFHWSxHQUFHdUU7O0FBR25DM0UsS0FBSyxhQUFhO0FBQ2pCRztZQUFZO0FBQ1pBLE1BQU14QyxJQUFJd0MsSUFBSSxNQUFNO0FBQ3BCQSxJQUFJNkcsR0FBRyxRQUFRO09BQUtrQjs7QUFDcEIvSCxJQUFJbUssTUFBTSxTQUFTO0FBQ25CbkssSUFBSW1LLE1BQU0sV0FBVztBQUVyQjNLLE9BQU9RLElBQUlMLFFBQVEwQixJQUFJaEMsR0FBR3VVO0FBQzFCcFUsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBQzNCRSxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ2hDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd1RTtBQUVsQ3hFLElBQUk0RCxTQUFTdEY7QUFDYjBCLElBQUlrSCxLQUFLO0FBQ1QxSCxPQUFPbEIsUUFBUVksU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT1EsSUFBSUwsT0FBT0YsSUFBSUosR0FBR0MsTUFBTWhCO0FBQy9Ca0IsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNO0FBQzNCRSxPQUFPUSxJQUFJbUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ2hDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd1RTtBQUVsQ3hFLElBQUlvTDtBQUNKcEwsSUFBSWtILEtBQUs7QUFDVDFILE9BQU9sQixRQUFRWSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPUSxJQUFJTCxRQUFRMEIsSUFBSWhDLEdBQUd1VTtBQUMxQnBVLE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUMzQkUsT0FBT1EsSUFBSW1LLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDtPQUNoQ2pJLE9BQU9RLElBQUltSyxNQUFNLFlBQVc5SyxHQUFHWSxHQUFHd0g7O0FBR25DNUgsS0FBSyxZQUFZO0FBQ2hCMEI7T0FBTy9ELElBQUl3QztBQUNYdUIsSUFBSS9ELElBQUl3QyxNQUFNNEQsU0FBUzBJO0FBQ3ZCNUssSUFBSWxFLElBQUl3QyxNQUFNNEQsU0FBUzBJO0FBQ3ZCL0ssRUFBRTRJLE1BQU0sU0FBUztBQUNqQnpJLEVBQUV5SSxNQUFNLFNBQVM7QUFFakJuTCxvQkFBb0JzTixNQUFNL0ssR0FBR0c7QUFDN0JsQyxPQUFPK0IsRUFBRTRJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUM5QmhGLE9BQU9rQyxFQUFFeUksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBRTlCOEgsS0FBS3VIO0FBQ0w3VSxvQkFBb0JzTjtBQUNwQjlNLE9BQU8rQixFQUFFNUIsUUFBUU4sR0FBR0MsTUFBTTtBQUMxQkUsT0FBT2tDLEVBQUUvQixRQUFRTixHQUFHQyxNQUFNO0FBQzFCRSxPQUFPK0IsRUFBRTRJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtPQUM5QmhGLE9BQU9rQyxFQUFFeUksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFOztBQUcvQjNFLEtBQUssV0FBVztBQUNmMEI7T0FBTy9ELElBQUl3QztBQUNYdUIsSUFBSS9ELElBQUl3QyxNQUFNNEQsU0FBUzBJO0FBQ3ZCNUssSUFBSWxFLElBQUl3QyxNQUFNNEQsU0FBUzBJO0FBQ3ZCekssSUFBSXJFLElBQUl3QztBQUNSOFQsUUFBUXRXLElBQUl1RDtBQUNaZ1QsUUFBUXZXLElBQUl1RDtBQUNaaVQsUUFBUXhXLElBQUl1RDtBQUNaUSxFQUFFNEksTUFBTSxTQUFTO0FBQ2pCekksRUFBRXlJLE1BQU0sU0FBUztBQUNqQnRJLEVBQUVzSSxNQUFNLFNBQVM7QUFDakIySixNQUFNM0osTUFBTSxXQUFXO0FBQ3ZCNEosTUFBTTVKLE1BQU0sV0FBVztBQUN2QjZKLE1BQU03SixNQUFNLFdBQVc7QUFDdkJuTCxvQkFBb0JzTixNQUFNL0ssR0FBR0c7QUFFN0JILEVBQUUwUyxLQUFLSDtBQUNQOVUsb0JBQW9Cc04sTUFBTXdILE9BQU9wUztBQUNqQzFDLG9CQUFvQjhVLE9BQU92UztBQUUzQkcsRUFBRXVTLEtBQUtGO0FBQ1AvVSxvQkFBb0JzTixNQUFNd0gsT0FBT0M7QUFDakMvVSxvQkFBb0I4VSxPQUFPdlM7QUFDM0J2QyxvQkFBb0IrVSxPQUFPclM7QUFFM0JBLEVBQUV1UyxLQUFLSDtBQUNQOVUsb0JBQW9Cc04sTUFBTXdILE9BQU9DO0FBQ2pDL1Usb0JBQW9COFUsT0FBT3ZTLEdBQUdHO0FBQzlCMUMsb0JBQW9CK1U7QUFFcEJDLE1BQU1wUSxTQUFTbVE7QUFDZmxTLEVBQUVvUyxLQUFLRDtBQUNQblMsRUFBRW9TO0FBQ0ZqVixvQkFBb0JzTixNQUFNd0gsT0FBT0M7QUFDakMvVSxvQkFBb0I4VSxPQUFPdlMsR0FBR0c7QUFDOUIxQyxvQkFBb0IrVSxPQUFPQztBQUMzQmhWLG9CQUFvQmdWLE9BQU9uUztBQUUzQkEsRUFBRW9TLEtBQUtwUztBQUNQN0Msb0JBQW9Cc04sTUFBTXdILE9BQU9DO0FBQ2pDL1Usb0JBQW9COFUsT0FBT3ZTLEdBQUdHO0FBQzlCMUMsb0JBQW9CK1UsT0FBT0M7QUFDM0JoVixvQkFBb0JnVixPQUFPblM7QUFFM0JyQyxPQUFPK0IsRUFBRTRJLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd1RTtBQUM5QmhGLE9BQU9rQyxFQUFFeUksTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQzlCaEYsT0FBT3FDLEVBQUVzSSxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFDOUJoRixPQUFPc1UsTUFBTTNKLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd1RTtBQUNwQ2hGLE9BQU91VSxNQUFNNUosTUFBTSxZQUFXOUssR0FBR1ksR0FBR3VFO09BQ3BDaEYsT0FBT3dVLE1BQU03SixNQUFNLFlBQVc5SyxHQUFHWSxHQUFHdUU7O0FBR3JDM0UsS0FBSyxhQUFhO0FBQ2pCMEI7T0FBTy9ELElBQUl3QztBQUNYdUIsSUFBSS9ELElBQUl3QyxNQUFNd1QsVUFBVWxIO0FBQ3hCNUssSUFBSWxFLElBQUl3QyxNQUFNNEQsU0FBU3JDO0FBQ3ZCTSxJQUFJckUsSUFBSXdDLE1BQU00RCxTQUFTckM7QUFDdkJRLElBQUl2RSxJQUFJd0MsTUFBTTRELFNBQVMvQjtBQUN2QkksSUFBSXpFLElBQUl3QyxNQUFNNEQsU0FBUzdCO0FBQ3ZCUixFQUFFNEksTUFBTSxTQUFTO0FBQ2pCekksRUFBRXlJLE1BQU0sU0FBUztBQUNqQnRJLEVBQUVzSSxNQUFNLFNBQVM7QUFDakJwSSxFQUFFb0ksTUFBTSxTQUFTO0FBQ2pCbEksRUFBRWtJLE1BQU0sU0FBUztBQUVqQm5MLG9CQUFvQnNOLE1BQU0vSztBQUMxQnZDLG9CQUFvQnVDLEdBQUdHLEdBQUdHO0FBQzFCN0Msb0JBQW9CMEM7QUFDcEIxQyxvQkFBb0I2QyxHQUFHRTtBQUN2Qi9DLG9CQUFvQitDLEdBQUdFO0FBRXZCQSxFQUFFaVM7QUFDRmxWLG9CQUFvQnNOLE1BQU0vSztBQUMxQnZDLG9CQUFvQnVDLEdBQUdHLEdBQUdHO0FBQzFCN0Msb0JBQW9CMEM7QUFDcEIxQyxvQkFBb0I2QyxHQUFHSTtBQUN2QmpELG9CQUFvQitDO0FBRXBCTCxFQUFFd1M7QUFDRmxWLG9CQUFvQnNOLE1BQU01SyxHQUFHRztBQUM3QjdDLG9CQUFvQnVDO0FBQ3BCdkMsb0JBQW9CMEM7QUFDcEIxQyxvQkFBb0I2QyxHQUFHSTtBQUN2QmpELG9CQUFvQitDO0FBRXBCRSxFQUFFaVM7QUFDRmxWLG9CQUFvQnNOLE1BQU01SyxHQUFHTztBQUM3QmpELG9CQUFvQnVDO0FBQ3BCdkMsb0JBQW9CMEM7QUFDcEIxQyxvQkFBb0I2QztBQUNwQjdDLG9CQUFvQitDO0FBRXBCUixFQUFFbVMsWUFBWWhTO0FBQ2RHLEVBQUUrQixTQUFTckM7QUFDWFEsRUFBRTZCLFNBQVNyQztBQUNYdkMsb0JBQW9Cc04sTUFBTTVLLEdBQUdILEdBQUdVO0FBQ2hDakQsb0JBQW9CdUMsR0FBR00sR0FBR0U7QUFDMUIvQyxvQkFBb0IwQztBQUNwQjFDLG9CQUFvQjZDO0FBQ3BCN0Msb0JBQW9CK0M7QUFFcEJBLEVBQUVtUztBQUNGbFYsb0JBQW9Cc04sTUFBTTVLLEdBQUdHLEdBQUdFLEdBQUdFO0FBQ25DakQsb0JBQW9CdUM7QUFDcEJ2QyxvQkFBb0IwQztBQUNwQjFDLG9CQUFvQjZDO09BQ3BCN0Msb0JBQW9CK0M7O0FBSXJCbEMsS0FBSyxjQUFjO0FBQ2xCMEI7T0FBTy9ELElBQUl3QztBQUNYdUIsSUFBSS9ELElBQUl3QyxNQUFNNEQsU0FBUzBJO0FBQ3ZCNUssSUFBSWxFLElBQUl3QyxNQUFNNEQsU0FBUzBJO0FBQ3ZCekssSUFBSXJFLElBQUl3QyxNQUFNNEQsU0FBU3JDO0FBQ3ZCUSxJQUFJdkUsSUFBSXdDLE1BQU00RCxTQUFTckM7QUFDdkJVLElBQUl6RSxJQUFJd0MsTUFBTTRELFNBQVM3QjtBQUV2QlIsRUFBRTBFO0FBQVdoRSxFQUFFZ0U7QUFDZmpILG9CQUFvQnNOLE1BQU0vSyxHQUFHRztBQUM3QjFDLG9CQUFvQnVDLEdBQUdNLEdBQUdFO0FBQzFCL0Msb0JBQW9CMEM7QUFDcEIxQyxvQkFBb0I2QztBQUNwQjdDLG9CQUFvQitDLEdBQUdFO0FBRXZCSixFQUFFb0UsUUFBUWhFLEdBQUcyQixTQUFTbEM7QUFDdEIxQyxvQkFBb0JzTixNQUFNL0ssR0FBR0c7QUFDN0IxQyxvQkFBb0J1QyxHQUFHVSxHQUFHRjtBQUMxQi9DLG9CQUFvQjBDLEdBQUdHO0FBQ3ZCN0Msb0JBQW9CNkM7QUFDcEI3QyxvQkFBb0IrQztBQUVwQkEsRUFBRWtFLFFBQVFoRTtBQUNWakQsb0JBQW9Cc04sTUFBTS9LLEdBQUdHO0FBQzdCMUMsb0JBQW9CdUMsR0FBR1U7QUFDdkJqRCxvQkFBb0IwQyxHQUFHRztBQUN2QjdDLG9CQUFvQjZDO0FBQ3BCN0Msb0JBQW9CK0M7QUFFcEJMLEVBQUV1RSxRQUFRcEU7QUFDVjdDLG9CQUFvQnNOLE1BQU0vSyxHQUFHTTtBQUM3QjdDLG9CQUFvQnVDLEdBQUdVO0FBQ3ZCakQsb0JBQW9CMEM7QUFDcEIxQyxvQkFBb0I2QztBQUNwQjdDLG9CQUFvQitDO0FBRXBCUixFQUFFMEUsUUFBUWxFO0FBQ1YvQyxvQkFBb0JzTixNQUFNdkssR0FBR0Y7QUFDN0I3QyxvQkFBb0J1QyxHQUFHVTtBQUN2QmpELG9CQUFvQjBDO0FBQ3BCMUMsb0JBQW9CNkM7QUFDcEI3QyxvQkFBb0IrQztBQUVwQkwsRUFBRXVFLFFBQVFsRTtBQUNWL0Msb0JBQW9Cc04sTUFBTXpLO0FBQzFCN0Msb0JBQW9CdUMsR0FBR1U7QUFDdkJqRCxvQkFBb0IwQztBQUNwQjFDLG9CQUFvQjZDO09BQ3BCN0Msb0JBQW9CK0M7O0FBR3JCbEMsS0FBSyxZQUFZO0FBQ2hCMEI7WUFBWTtBQUNaNFEsVUFBVTNVLElBQUljO0FBQ2Q2VixPQUFPO0FBQUN6USxPQUFPa0k7T0FBTTtBQUFDOUcsT0FBTTs7QUFBUzBFLFFBQU87QUFBQ3pFLFFBQU87O0FBQVMwRSxVQUFTO0FBQUNpQixTQUFROzs7O0FBQy9FbkosSUFBSS9ELElBQUl3QyxJQUFJbVUsTUFBTSxtQkFBbUJ2USxTQUFTdEY7QUFDOUNpRCxFQUFFNEksTUFBTSxTQUFTO0FBQ2pCNUksRUFBRXNGLEdBQUcsZ0JBQWdCO09BQUtrQjs7QUFDMUJzRixTQUFTN1AsSUFBSXdDLE1BQU00RCxTQUFTckM7QUFDNUIrTCxTQUFTOVAsSUFBSW1ELE9BQU9pRCxTQUFTckM7QUFDN0JHLElBQUlILEVBQUU2UztBQUVON1MsRUFBRTRJLE1BQU0sV0FBVztBQUNuQjVJLEVBQUUyRixLQUFLO0FBQ1AxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFDM0JFLE9BQU8rQixFQUFFNUIsUUFBUU4sR0FBR0MsTUFBTTZTO0FBQzFCM1MsT0FBTytCLEVBQUV3RSxJQUFJLFVBQVMxRyxHQUFHQyxNQUFNO0FBQy9CRSxPQUFPK0IsRUFBRXdFLElBQUksV0FBVTFHLEdBQUdDLE1BQU07QUFDaENFLE9BQU8rQixFQUFFd0UsSUFBSSxZQUFXMUcsR0FBR0MsTUFBTTtBQUNqQ0UsT0FBTytCLEVBQUU0UCxTQUFTL1IsUUFBUUMsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBTytCLEVBQUVyQyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPK0IsRUFBRXJDLFNBQVMsR0FBR08sR0FBRzJELGFBQWEvRCxHQUFHQyxNQUFNO0FBQzlDRSxPQUFPK0IsRUFBRXJDLFNBQVMsSUFBSUcsR0FBR0MsTUFBTStOO0FBQy9CN04sT0FBTytCLEVBQUVyQyxTQUFTLElBQUlHLEdBQUdDLE1BQU1nTztBQUMvQjlOLE9BQU9rQyxHQUFHTCxJQUFJaEMsR0FBR0MsTUFBTWlDO0FBQ3ZCL0IsT0FBT2tDLEVBQUUvQixRQUFRTixHQUFHQyxNQUFNO0FBQzFCNlMsUUFBUTFOLE9BQU8vQztBQUVmbEMsT0FBT2tDLEVBQUUvQixRQUFRTixHQUFHQyxNQUFNNlM7QUFDMUIzUyxPQUFPa0MsRUFBRXFFLElBQUksVUFBUzFHLEdBQUdDLE1BQU07QUFDL0JFLE9BQU9rQyxFQUFFcUUsSUFBSSxXQUFVMUcsR0FBR0MsTUFBTTtBQUNoQ0UsT0FBT2tDLEVBQUVxRSxJQUFJLFlBQVcxRyxHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPa0MsRUFBRXlQLFNBQVMvUixRQUFRQyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPa0MsRUFBRXhDLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9rQyxFQUFFeEMsU0FBUyxHQUFHTyxHQUFHMkQsYUFBYS9ELEdBQUdDLE1BQU07QUFDOUNFLE9BQU9rQyxFQUFFeEMsU0FBUyxJQUFJbUMsSUFBSWhDLEdBQUdDLE1BQU1pQyxFQUFFckMsU0FBUztBQUM5Q00sT0FBT2tDLEVBQUV4QyxTQUFTLElBQUltQyxJQUFJaEMsR0FBR0MsTUFBTStOO0FBQ25DN04sT0FBT2tDLEVBQUV4QyxTQUFTLElBQUltQyxJQUFJaEMsR0FBR0MsTUFBTWdPO0FBQ25DOU4sT0FBT2tDLEVBQUV5SSxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7QUFDOUJoRixPQUFPa0MsRUFBRXlJLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd3SDtBQUVoQ2pJLE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUMzQm9DLEVBQUV3RixLQUFLO0FBQ1AxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JpQyxFQUFFNEU7QUFDRjVFLEVBQUUyRixLQUFLO0FBQ1AxSCxPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFDM0JvQyxFQUFFd0YsS0FBSztPQUNQMUgsT0FBT3VJLFdBQVcxSSxHQUFHQyxNQUFNOztBQUc1Qk8sS0FBSyw0Q0FBNEM7QUFDaERHO01BQU14QyxJQUFJd0M7QUFFVlIsT0FBT1EsSUFBSTRKLEtBQUssV0FBVXZLLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUk0SixLQUFLLFVBQVUsTUFBS3ZLLEdBQUdDLE1BQU1VO0FBQ3hDUixPQUFPUSxJQUFJNEosS0FBSyxXQUFVdkssR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSTRKLEtBQUssVUFBVSxRQUFPdkssR0FBR0MsTUFBTVU7QUFDMUNSLE9BQU9RLElBQUk0SixLQUFLLFdBQVV2SyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJNEosS0FBSyxlQUFlLENBQUMsR0FBRSxHQUFFLEtBQUl2SyxHQUFHQyxNQUFNVTtBQUNqRFIsT0FBT1EsSUFBSTRKLEtBQUssZ0JBQWV2SyxHQUFHNkssSUFBSSxDQUFDLEdBQUUsR0FBRTtBQUMzQzFLLE9BQU9RLElBQUlQLEdBQUc0VSxRQUFRaFYsR0FBR0MsTUFBTTtBQUMvQkUsT0FBT1EsSUFBSVAsR0FBRzZVLGFBQWFqVixHQUFHNkssSUFBSSxDQUFDLEdBQUUsR0FBRTtBQUV2Q2xLLElBQUlQLEdBQUc4VSxXQUFXO0FBQ2xCL1UsT0FBT1EsSUFBSVAsR0FBRzhVLFVBQVVsVixHQUFHQyxNQUFNO0FBQ2pDRSxPQUFPUSxJQUFJNEosS0FBSyxhQUFZdkssR0FBR0MsTUFBTTtBQUVyQ0UsT0FBTytTLE9BQU9DLEtBQUt4UyxJQUFJUCxLQUFLNEIsSUFBSWhDLEdBQUdpQyxRQUFRO0FBRTNDdEIsSUFBSTRKLEtBQUssaUJBQWlCO0FBQzFCcEssT0FBTytTLE9BQU9DLEtBQUt4UyxJQUFJUCxLQUFLSixHQUFHaUMsUUFBUTtBQUV2Q3RCLElBQUk0SixLQUFLLGlCQUFpQjtBQUMxQnBLLE9BQU8rUyxPQUFPQyxLQUFLeFMsSUFBSVAsS0FBS0osR0FBR2lDLFFBQVE7QUFFdkN0QixJQUFJNEosS0FBSyxpQkFBaUI7QUFDMUJwSyxPQUFPK1MsT0FBT0MsS0FBS3hTLElBQUlQLEtBQUtKLEdBQUdpQyxRQUFRO0FBRXZDdEIsSUFBSTRKLEtBQUs7QUFBQzdHLEtBQUk7QUFBS0MsS0FBSTs7QUFDdkJ4RCxPQUFPUSxJQUFJUCxHQUFHc0QsS0FBSzFELEdBQUdDLE1BQU07T0FDNUJFLE9BQU9RLElBQUlQLEdBQUd1RCxLQUFLM0QsR0FBR0MsTUFBTTs7QUFHN0JPLEtBQUssNkNBQTZDO0FBQ2pERztNQUFNeEMsSUFBSXdDO0FBRVZSLE9BQU9RLElBQUltTCxLQUFLLFdBQVU5TCxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPUSxJQUFJbUwsS0FBSyxVQUFVLE1BQUs5TCxHQUFHQyxNQUFNVTtBQUN4Q1IsT0FBT1EsSUFBSW1MLEtBQUssV0FBVTlMLEdBQUdDLE1BQU07QUFDbkNFLE9BQU9RLElBQUltTCxLQUFLLFVBQVUsUUFBTzlMLEdBQUdDLE1BQU1VO0FBQzFDUixPQUFPUSxJQUFJbUwsS0FBSyxXQUFVOUwsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT1EsSUFBSW1MLEtBQUssZUFBZSxDQUFDLEdBQUUsR0FBRSxLQUFJOUwsR0FBR0MsTUFBTVU7QUFDakRSLE9BQU9RLElBQUltTCxLQUFLLGdCQUFlOUwsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT1EsSUFBSVAsR0FBR3dELGFBQWEsV0FBVTVELEdBQUdDLE1BQU07QUFDOUNFLE9BQU9RLElBQUlQLEdBQUd3RCxhQUFhLGdCQUFlNUQsR0FBRzZLLElBQUk7QUFFakRsSyxJQUFJUCxHQUFHWixhQUFhLFlBQVk7QUFDaENXLE9BQU9RLElBQUlQLEdBQUd3RCxhQUFhLGFBQVk1RCxHQUFHQyxNQUFNO0FBQ2hERSxPQUFPUSxJQUFJbUwsS0FBSyxhQUFZOUwsR0FBR0MsTUFBTTtBQUVyQ0UsT0FBT1EsSUFBSVAsR0FBR3dELGFBQWEsa0JBQWlCNUQsR0FBR0MsTUFBTTtBQUVyRFUsSUFBSW1MLEtBQUssaUJBQWlCO0FBQzFCM0wsT0FBT1EsSUFBSVAsR0FBR3dELGFBQWEsa0JBQWlCNUQsR0FBR0MsTUFBTTtBQUVyRFUsSUFBSW1MLEtBQUs7QUFDVDNMLE9BQU9RLElBQUlQLEdBQUd3RCxhQUFhLGtCQUFpQjVELEdBQUdDLE1BQU07QUFFckRVLElBQUltTCxLQUFLLGlCQUFpQjtBQUMxQjNMLE9BQU9RLElBQUlQLEdBQUd3RCxhQUFhLGtCQUFpQjVELEdBQUdDLE1BQU07QUFFckRVLElBQUltTCxLQUFLO0FBQUNwSSxLQUFJO0FBQUtDLEtBQUk7O0FBQ3ZCeEQsT0FBT1EsSUFBSVAsR0FBR3dELGFBQWEsUUFBTzVELEdBQUdDLE1BQU07QUFDM0NFLE9BQU9RLElBQUlQLEdBQUd3RCxhQUFhLFFBQU81RCxHQUFHQyxNQUFNO0FBRTNDVSxJQUFJbUwsS0FBSztBQUFDcEksS0FBSTtBQUFLQyxLQUFJOztBQUN2QnhELE9BQU9RLElBQUlQLEdBQUd3RCxhQUFhLFFBQU81RCxHQUFHQyxNQUFNO09BQzNDRSxPQUFPUSxJQUFJUCxHQUFHd0QsYUFBYSxRQUFPNUQsR0FBR0MsTUFBTTs7QUFHNUNPLEtBQUssbUNBQW1DO0FBQ3ZDRztNQUFNeEMsSUFBSXdDLElBQUksTUFBTXhDLElBQUl3QyxPQUFPLGFBQWF4QyxJQUFJbUQsUUFBUW5ELElBQUl3QztBQUU1RFIsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT1EsSUFBSTBFLE1BQU1yRixHQUFHQyxNQUFNVSxJQUFJUCxHQUFHdUw7QUFDakN4TCxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBRXJDVSxJQUFJMEUsT0FBTztBQUNYbEYsT0FBT1EsSUFBSTBFLE1BQU1yRixHQUFHQyxNQUFNO0FBQzFCRSxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPUSxJQUFJZCxTQUFTLEdBQUdPLEdBQUdiLElBQUlTLEdBQUdDLE1BQU07T0FDdkNFLE9BQU9RLElBQUlkLFNBQVMsR0FBR08sR0FBRytELFNBQVNDLGVBQWVwRSxHQUFHQyxNQUFNOztBQUc1RE8sS0FBSyxxQ0FBcUM7QUFDekNHO01BQU14QyxJQUFJd0MsSUFBSSxNQUFNLGFBQWF4QyxJQUFJbUQsS0FBSyxNQUFNO0FBRWhEbkIsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBT1EsSUFBSVUsTUFBTXJCLEdBQUdDLE1BQU1VLElBQUlQLEdBQUcyRDtBQUNqQzVELE9BQU9RLElBQUlVLE1BQU1yQixHQUFHQyxNQUFNO0FBQzFCRSxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBRXJDVSxJQUFJVSxPQUFPO0FBQ1hsQixPQUFPUSxJQUFJVSxNQUFNckIsR0FBR0MsTUFBTTtBQUMxQkUsT0FBT1EsSUFBSVAsR0FBRzJELGFBQWEvRCxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO09BQ3JDRSxPQUFPUSxJQUFJZCxTQUFTLEdBQUdPLEdBQUcwRCxVQUFVOUQsR0FBR0MsTUFBTTs7QUFHOUNPLEtBQUssYUFBYTtBQUNqQkc7TUFBTXhDLElBQUl3QyxJQUFJd0I7T0FBTTs7QUFFcEJoQyxPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJd1UsU0FBUztBQUNiaFYsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSXdVLFNBQVM7QUFDYmhWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUk2RCxJQUFJbEMsWUFBWTNCLElBQUk2RCxJQUFJbEMsVUFBVXNFLFFBQVEsZ0JBQWdCO0FBQzlEekcsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSXdVLFNBQVM7QUFDYmhWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUl3VSxTQUFTO0FBQ2JoVixPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJd1UsU0FBUztPQUNiaFYsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTs7QUFHcENPLEtBQUssZ0JBQWdCO0FBQ3BCRztNQUFNeEMsSUFBSXdDLElBQUl3QjtPQUFNOztBQUVwQmhDLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUl3VSxTQUFTO0FBQ2JoVixPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJeVUsWUFBWTtBQUNoQmpWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUl5VSxZQUFZO0FBQ2hCalYsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSXlVLFlBQVk7QUFDaEJqVixPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJeVUsWUFBWTtBQUNoQmpWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUl5VSxZQUFZO09BQ2hCalYsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTs7QUFHcENPLEtBQUssZ0JBQWdCO0FBQ3BCRztNQUFNeEMsSUFBSXdDLElBQUl3QjtPQUFNOztBQUVwQmhDLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUkwVSxZQUFZO0FBQ2hCbFYsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSTBVLFlBQVk7QUFDaEJsVixPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJMFUsWUFBWTtBQUNoQmxWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUkwVSxZQUFZO0FBQ2hCMVUsSUFBSTBVLFlBQVk7QUFDaEJsVixPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJMFUsWUFBWTtBQUNoQmxWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07QUFFbkNVLElBQUkwVSxZQUFZO0FBQ2hCbFYsT0FBT1EsSUFBSTZELElBQUlsQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUVuQ1UsSUFBSTBVLFlBQVk7QUFDaEJsVixPQUFPUSxJQUFJNkQsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBRW5DVSxJQUFJMFUsWUFBWTtPQUNoQmxWLE9BQU9RLElBQUk2RCxJQUFJbEMsV0FBV3RDLEdBQUdDLE1BQU07O0FBR3BDTyxLQUFLLFdBQVc7QUFDZko7S0FBS2hDLElBQUl1QyxJQUFJK087S0FBSTs7QUFDakJ2UCxPQUFPQyxHQUFHc1AsS0FBSzFQLEdBQUdDLE1BQU07QUFDeEJFLE9BQU9DLEdBQUc2RCxRQUFReUwsS0FBSzFQLEdBQUdDLE1BQU07QUFDaENFLE9BQU9DLEdBQUcwTCxLQUFLLGFBQVk5TCxHQUFHQyxNQUFNO0FBRXBDRyxHQUFHa1YsT0FBTztBQUNWblYsT0FBT0MsR0FBR3NQLEtBQUsxUCxHQUFHQyxNQUFNO0FBQ3hCRSxPQUFPQyxHQUFHNkQsUUFBUXlMLEtBQUsxUCxHQUFHQyxNQUFNO09BQ2hDRSxPQUFPQyxHQUFHMEwsS0FBSyxhQUFZOUwsR0FBR0MsTUFBTTs7T0FLckNPLEtBQUssa0VBQWtFO0FBQ3RFRztPQUFPeEMsSUFBSWtELEtBQUs7QUFDaEJsQixPQUFPa0IsS0FBS0EsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9rQixLQUFLbUQsSUFBSU4sV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFFNUNvQixLQUFLK0QsT0FBT2pILElBQUlrRCxLQUFLO0FBQ3JCbEIsT0FBT2tCLEtBQUtBLE1BQU1yQixHQUFHQyxNQUFNO0FBQzNCRSxPQUFPa0IsS0FBS21ELElBQUlOLFdBQVduRSxRQUFRQyxHQUFHQyxNQUFNO0FBRTVDb0IsS0FBSzZTLFFBQVEvVixJQUFJd0MsSUFBSSxNQUFNO0FBQzNCUixPQUFPa0IsS0FBS0EsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9rQixLQUFLbUQsSUFBSU4sV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFFNUNVLE1BQU14QyxJQUFJd0MsSUFBSSxNQUFNO0FBQ3BCQSxJQUFJNEQsU0FBU2xEO0FBQ2JsQixPQUFPa0IsS0FBS0EsTUFBTXJCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9rQixLQUFLbUQsSUFBSU4sV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07T0FDNUNFLE9BQU9RLElBQUlMLFFBQVFOLEdBQUdDLE1BQU07OztBQUs5Qk0sTUFBTSxTQUFTO0FBQ2RDLEtBQUssOEpBQThKO0FBQ2xLMEI7VUFBVS9ELElBQUljO0FBQ2QwQixNQUFNeEMsSUFBSXdDO0FBQ1Z1QixJQUFJL0QsSUFBSXdDLE1BQU00RCxTQUFTNUQ7QUFDdkIwQixJQUFJbEUsSUFBSXVELFVBQVU2QyxTQUFTNUQ7QUFDM0I2QixJQUFJckUsSUFBSXdDLE1BQU00RCxTQUFTNUQ7QUFFdkJoQixvQkFBb0JtVDtBQUNwQm5ULG9CQUFvQmdCLEtBQUt1QixHQUFHRyxHQUFHRztBQUUvQnJFLElBQUlvSSxNQUFNLENBQUNyRSxHQUFFRyxHQUFFRyxJQUNiK0IsU0FBU3VPLFNBQ1R6TyxNQUFNLFdBQVcsS0FDakJxQyxJQUFJO0FBQUNoQixRQUFPO0FBQUlDLGlCQUFnQjtHQUNoQ1AsT0FBTztBQUVUekYsb0JBQW9CbVQsU0FBUzVRLEdBQUdHLEdBQUdHO0FBQ25DN0Msb0JBQW9CZ0I7QUFFcEJSLE9BQU9vRixpQkFBaUJyRCxFQUFFOUIsSUFBSWlMLFNBQVNyTCxHQUFHQyxNQUFNO0FBQ2hERSxPQUFPb0YsaUJBQWlCL0MsRUFBRXBDLElBQUlpTCxTQUFTckwsR0FBR0MsTUFBTTtBQUNoREUsT0FBT29GLGlCQUFpQmxELEVBQUVqQyxJQUFJc0YsUUFBUTFGLEdBQUdDLE1BQU07QUFDL0NFLE9BQU8rQixFQUFFckMsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNuQ0UsT0FBT2tDLEVBQUV4QyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ25DRSxPQUFPcUMsRUFBRTNDLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07T0FDbkNFLE9BQU9rQyxFQUFFeEMsU0FBUyxHQUFHTyxHQUFHMkQsYUFBYS9ELEdBQUdDLE1BQU07O0FBRy9DTyxLQUFLLHFLQUFxSztBQUN6SzBCO1VBQVUvRCxJQUFJYztBQUNkaUQsSUFBSS9ELElBQUl3QyxNQUFNNEQsU0FBU3VPO0FBQ3ZCelEsSUFBSWxFLElBQUl1RCxVQUFVNkMsU0FBU3VPO0FBQzNCdFEsSUFBSXJFLElBQUl3QyxNQUFNNEQsU0FBU3VPO0FBRXZCeUMsU0FBU3BYLElBQUlvSSxNQUFNLENBQUNyRSxHQUFFRyxHQUFFRztBQUN4QmdULFNBQVNyWCxJQUFJb0ksTUFBTSxDQUFDckUsR0FBRUcsR0FBRUcsSUFBSTtBQUU1QnJDLE9BQU9vVixPQUFPbFIsTUFBTSxVQUFVckUsR0FBR0MsTUFBTXNWO0FBQ3ZDcFYsT0FBT29WLE9BQU9sUixNQUFNLFNBQVMsS0FBS3JFLEdBQUdDLE1BQU1zVjtBQUMzQ3BWLE9BQU9xVixPQUFPblIsTUFBTSxVQUFVckUsR0FBRzZLLElBQUksQ0FBQyxRQUFRLFFBQVE7QUFDdEQxSyxPQUFPcVYsT0FBT25SLE1BQU0sU0FBUyxLQUFLckUsR0FBRzZLLElBQUksQ0FBQzNJLEdBQUVHLEdBQUVHO09BQzlDckMsT0FBT3FWLE9BQU9uUixNQUFNLFVBQVVyRSxHQUFHNkssSUFBSSxDQUFDLFFBQVEsUUFBUTs7QUFHdkRySyxLQUFLLDJIQUEySDtBQUMvSDBCO1VBQVUvRCxJQUFJYztBQUNkMEIsTUFBTXhDLElBQUl3QztBQUNWdUIsSUFBSS9ELElBQUl3QyxNQUFNNEQsU0FBUzVEO0FBQ3ZCMEIsSUFBSWxFLElBQUl1RCxVQUFVNkMsU0FBUzVEO0FBQzNCNkIsSUFBSXJFLElBQUl3QyxNQUFNNEQsU0FBUzVEO0FBRXZCOFUsU0FBU3RYLElBQUlvSSxNQUFNLENBQUNyRSxHQUFFRyxHQUFFRyxJQUN0QitCLFNBQVN1TyxTQUNUek8sTUFBTSxXQUFXLEtBQ2pCcUMsSUFBSTtBQUFDaEIsUUFBTztBQUFJQyxpQkFBZ0I7R0FDaENQLE9BQU8sbUJBQ1BmLE1BQU0sV0FDTnFSO0FBRUZ2VixPQUFPc1YsUUFBUXpWLEdBQUc2SyxJQUFJLENBQUMsT0FBTSxPQUFNO09BQ25DMUssT0FBT2hDLElBQUlvSSxNQUFNLENBQUNyRSxHQUFFRyxHQUFFRyxJQUFJa0UsSUFBSSxTQUFTLFFBQVFBLElBQUksU0FBU2dQLFVBQVUxVixHQUFHNkssSUFBSSxDQUFDLFFBQU8sUUFBTzs7QUFHN0ZySyxLQUFLLHlLQUF5SztBQUM3SzBCO1VBQVUvRCxJQUFJYztBQUNkMEIsTUFBTXhDLElBQUl3QztBQUNWdUIsSUFBSS9ELElBQUl3QyxNQUFNNEQsU0FBUzVEO0FBQ3ZCMEIsSUFBSWxFLElBQUl1RCxVQUFVNkMsU0FBUzVEO0FBQzNCNkIsSUFBSXJFLElBQUl3QyxNQUFNNEQsU0FBUzVEO0FBRXZCOFUsU0FBU3RYLElBQUlvSSxNQUFNLENBQUNyRSxHQUFFRyxHQUFFRyxJQUN0QitCLFNBQVN1TyxTQUNUek8sTUFBTSxXQUFXLEtBQ2pCcUMsSUFBSTtBQUFDaEIsUUFBTztBQUFJQyxpQkFBZ0I7R0FDaENQLE9BQU8sbUJBQ1BzUSxPQUFPLE1BQ1ByUixNQUFNO0FBRVJsRSxPQUFPc1YsUUFBUXpWLEdBQUc2SyxJQUFJLENBQUMsT0FBTSxPQUFNO09BQ25DMUssT0FBT2hDLElBQUlvSSxNQUFNLENBQUNyRSxHQUFFRyxHQUFFRyxJQUFJa0UsSUFBSSxTQUFTLFFBQVFBLElBQUksVUFBVSxRQUFRZ1AsT0FBTyxNQUFNaFAsSUFBSSxVQUFVMUcsR0FBRzZLLElBQUksQ0FBQyxRQUFPLFFBQU87O0FBR3ZIckssS0FBSyxrSUFBa0k7QUFDdEkwQjtJQUFJL0QsSUFBSXdDLElBQUksTUFBTSxPQUFPNEQsU0FBU3RGO0FBQ2xDb0QsSUFBSWxFLElBQUl3QyxJQUFJLE1BQU0sT0FBTzRELFNBQVN0RjtBQUNsQ3VELElBQUlyRSxJQUFJd0MsSUFBSSxNQUFNLE9BQU80RCxTQUFTdEY7QUFDbEMwVyxNQUFNLENBQUN6VCxHQUFFRyxHQUFFRztBQUNYckMsT0FBT2hDLElBQUlvSSxNQUFNb1AsS0FBS25QLFVBQVV4RSxJQUFJaEMsR0FBR0MsTUFBTTBWO0FBQzdDeFYsT0FBT2hDLElBQUlvSSxNQUFNb1AsS0FBS25QLFVBQVV4RyxHQUFHNkssSUFBSSxDQUFDM0ksR0FBRUcsR0FBRUc7QUFDNUNyQyxPQUFPaEMsSUFBSW9JLE1BQU1vUCxLQUFLNUQsVUFBVXZMLFVBQVV4RyxHQUFHNkssSUFBSSxDQUFDckksR0FBRUgsR0FBRUg7QUFDdEQvQixPQUFPaEMsSUFBSW9JLE1BQU1vUCxLQUFJLEdBQUd0VSxRQUFRckIsR0FBRzZLLElBQUksQ0FBQyxPQUFNLE9BQU07QUFDcEQxSyxPQUFPaEMsSUFBSW9JLE1BQU1vUCxLQUFJLEdBQUc1RCxVQUFVMVEsUUFBUXJCLEdBQUc2SyxJQUFJLENBQUMsT0FBTSxPQUFNO0FBQzlEMUssT0FBT2hDLElBQUlvSSxNQUFNb1AsS0FBSSxHQUFHNUQsVUFBVTFRLFFBQVFyQixHQUFHNkssSUFBSSxDQUFDLE9BQU0sT0FBTTtPQUM5RDFLLE9BQU9oQyxJQUFJb0ksTUFBTW9QLEtBQUksR0FBRzVELFVBQVVBLFVBQVUxUSxRQUFRckIsR0FBRzZLLElBQUksQ0FBQyxPQUFNLE9BQU07O09BR3pFckssS0FBSywyREFBMkQ7QUFDL0QrRjtPQUFPcEksSUFBSXdDLElBQUksTUFBTTtBQUNyQnFHLE9BQU83SSxJQUFJd0MsSUFBSSxNQUFNO0FBQ3JCNEYsUUFBUXBJLElBQUlvSSxNQUFNLENBQUNRLE1BQU1DLE9BQU87QUFFaEM3RyxPQUFPb0csTUFBTWxCLFFBQVFyRixHQUFHNkssSUFBSSxDQUFDLFlBQVk7QUFDekMxSyxPQUFPb0csTUFBTWxGLFFBQVFyQixHQUFHNkssSUFBSSxDQUFDLFlBQVk7QUFFekN0RSxNQUFNbEIsS0FBSztBQUNYbEYsT0FBT29HLE1BQU1sQixRQUFRckYsR0FBRzZLLElBQUksQ0FBQyx3QkFBd0I7QUFDckQxSyxPQUFPb0csTUFBTWxGLFFBQVFyQixHQUFHNkssSUFBSSxDQUFDLFdBQVc7QUFFeEN0RSxNQUFNbEYsS0FBSztBQUNYbEIsT0FBT29HLE1BQU1sQixRQUFRckYsR0FBRzZLLElBQUksQ0FBQyxXQUFXO09BQ3hDMUssT0FBT29HLE1BQU1sRixRQUFRckIsR0FBRzZLLElBQUksQ0FBQyxXQUFXOzs7QUFJMUN0SyxNQUFNLGFBQWE7QUFDbEJDLEtBQUssZ0VBQWdFO0FBQ3BFOFI7V0FBV25VLElBQUltVSxTQUFTLENBQUMsUUFBUS9TO0lBQUc7O0FBRXBDWSxPQUFPLE9BQU9tUyxVQUFVdFMsR0FBR0MsTUFBTTtBQUNqQ0UsT0FBT21TLFNBQVN4USxNQUFNOUIsR0FBR0MsTUFBTTtBQUMvQkUsT0FBT21TLFNBQVNyTyxTQUFTakUsR0FBRzZLLElBQUl0TDtJQUFHOztPQUNuQ1ksT0FBT21TLFNBQVN6UyxVQUFVRyxHQUFHNkssSUFBSTs7QUFHbENySyxLQUFLLHlHQUF5RztBQUM3R29WO1dBQVd6WCxJQUFJbVUsU0FBUyxDQUFDLE9BQU9oUTtXQUFVO0dBQVk7QUFDdERzVCxTQUFTdEQsU0FBU0M7QUFDbEJxRCxPQUFPOUssTUFBTSxTQUFTO0FBQ3RCK0ssU0FBUzFYLElBQUltVTtBQUViblMsT0FBT3lWLE9BQU94VixJQUFJSixHQUFHWSxHQUFHQyxXQUFXQztBQUNuQ1gsT0FBTzBWLE9BQU96VixJQUFJSixHQUFHWSxHQUFHQyxXQUFXQztBQUNuQ1gsT0FBT3lWLFFBQVE1VCxJQUFJaEMsR0FBR0MsTUFBTTRWO0FBQzVCMVYsT0FBT3lWLE9BQU94VixJQUFJNEIsSUFBSWhDLEdBQUdDLE1BQU00VixPQUFPelY7QUFDdENELE9BQU95VixPQUFPOUssTUFBTSxVQUFTOUssR0FBR1ksR0FBR3VFO0FBQ25DaEYsT0FBTzBWLE9BQU8vSyxNQUFNLFVBQVM5SyxHQUFHWSxHQUFHd0g7QUFDbkNqSSxPQUFPeVYsT0FBT3hWLEdBQUcyRCxhQUFhL0QsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBTzBWLE9BQU96VixHQUFHMkQsYUFBYS9ELEdBQUdDLE1BQU07T0FDdkNFLE9BQU95VixPQUFPeFYsR0FBR2tDLFdBQVd0QyxHQUFHQyxNQUFNOztBQUd0Q08sS0FBSyx3REFBd0Q7QUFDNURrQjtVQUFVdkQsSUFBSXVELFFBQVFZO1dBQVU7R0FBaUI7QUFDakRaLFFBQVFvSixNQUFNLFNBQVM7QUFDdkJnTCxrQkFBa0JwVSxRQUFRcVU7QUFDMUJDLGdCQUFnQkYsZ0JBQWdCdkQ7QUFFaENwUyxPQUFPMlYsaUJBQWlCOVQsSUFBSWhDLEdBQUdDLE1BQU15QjtBQUNyQ3ZCLE9BQU82VixjQUFjNVYsSUFBSTRCLElBQUloQyxHQUFHQyxNQUFNeUIsUUFBUXRCO0FBQzlDRCxPQUFPNlYsY0FBYzVWLEdBQUdrQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUM1Q0UsT0FBTzZWLGNBQWMzVSxNQUFNckIsR0FBR0MsTUFBTTtBQUNwQ0UsT0FBT3VCLFFBQVFvSixNQUFNLFVBQVM5SyxHQUFHWSxHQUFHdUU7T0FDcENoRixPQUFPNlYsY0FBY2xMLE1BQU0sVUFBUzlLLEdBQUdZLEdBQUd3SDs7QUFHM0M1SCxLQUFLLDhDQUE4QztBQUNsRHlWO1lBQVk1VyxTQUFTQyxjQUFjO0FBQ25DMlcsVUFBVTNULFlBQVk7QUFDdEIyVCxVQUFVdlcsWUFBWUwsU0FBU3lSLGVBQWU7QUFDOUNnRixrQkFBa0IzWCxJQUFJbVUsU0FBUzJEO0FBQy9CRCxnQkFBZ0JGLGdCQUFnQnZEO0FBRWhDcFMsT0FBTzZWLGNBQWM1VixJQUFJNEIsSUFBSWhDLEdBQUdDLE1BQU1nVztBQUN0QzlWLE9BQU82VixjQUFjNVYsR0FBR2tDLFdBQVd0QyxHQUFHQyxNQUFNO09BQzVDRSxPQUFPNlYsY0FBYzNVLE1BQU1yQixHQUFHQyxNQUFNOztBQUdyQ08sS0FBSyxpREFBaUQ7QUFDckQrUjtXQUFXcFUsSUFBSW1VLFNBQVMsQ0FBQyxPQUFPaFE7V0FBVTtHQUFZO0FBQ3RENFQsZ0JBQWdCNUQsU0FBUzZELE9BQU87QUFBQ3JVLE1BQUs7QUFBUW1DLFNBQVE7QUFBQzNCLFdBQVU7O0FBQWN6QyxVQUFTOztBQUN4RnVXLGdCQUFnQjlELFNBQVM2RCxPQUFPO0FBQUNsUyxTQUFRO0FBQUMxRSxJQUFHOztBQUFlTSxVQUFTLENBQUM7O0FBQ3RFd1csZ0JBQWdCL0QsU0FBUzZELE9BQ3hCLENBQUMsV0FDQTdUO1dBQVU7R0FDVixDQUFDLE9BQU8sTUFBTSxVQUNkLENBQUMsT0FBTyxNQUNQLENBQUMsUUFBUTtBQUFDK0IsT0FBTW9NO1lBQVc7O0dBQUssWUFDaEM7QUFLSHRRLE9BQU8rVixlQUFlbFUsSUFBSWhDLEdBQUdDLE1BQU1xUztBQUNuQ25TLE9BQU9pVyxlQUFlcFUsSUFBSWhDLEdBQUdDLE1BQU1xUztBQUNuQ0MsUUFBUUQsU0FBU0M7QUFDakJxRCxTQUFTTSxjQUFjM0Q7QUFDdkJzRCxTQUFTTyxjQUFjN0Q7QUFDdkIrRCxTQUFTRCxjQUFjOUQ7QUFFdkJwUyxPQUFPb1MsTUFBTW5TLEdBQUcrRCxTQUFTQyxlQUFlcEUsR0FBR0MsTUFBTTtBQUNqREUsT0FBT29TLE1BQU1uUyxHQUFHa0MsV0FBV3RDLEdBQUdDLE1BQU07QUFDcENFLE9BQU9vUyxNQUFNblMsR0FBR2IsSUFBSVMsR0FBR0MsTUFBTTtBQUM3QkUsT0FBT29TLE1BQU1sUixNQUFNckIsR0FBR0MsTUFBTTtBQUU1QkUsT0FBT3lWLE9BQU94VixHQUFHK0QsU0FBU0MsZUFBZXBFLEdBQUdDLE1BQU07QUFDbERFLE9BQU95VixPQUFPeFYsR0FBR2tDLFdBQVd0QyxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPeVYsT0FBT3hWLEdBQUdiLElBQUlTLEdBQUdDLE1BQU07QUFDOUJFLE9BQU95VixPQUFPdlUsTUFBTXJCLEdBQUdDLE1BQU07QUFFN0JFLE9BQU8wVixPQUFPelYsR0FBRytELFNBQVNDLGVBQWVwRSxHQUFHQyxNQUFNO0FBQ2xERSxPQUFPMFYsT0FBT3pWLEdBQUdrQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUNyQ0UsT0FBTzBWLE9BQU96VixHQUFHYixJQUFJUyxHQUFHQyxNQUFNO0FBQzlCRSxPQUFPMFYsT0FBT3hVLE1BQU1yQixHQUFHQyxNQUFNO0FBRTdCRSxPQUFPbVcsT0FBT2xXLEdBQUcrRCxTQUFTQyxlQUFlcEUsR0FBR0MsTUFBTTtBQUNsREUsT0FBT21XLE9BQU9sVyxHQUFHa0MsV0FBV3RDLEdBQUdDLE1BQU07QUFDckNFLE9BQU9tVyxPQUFPbFcsR0FBR2IsSUFBSVMsR0FBR0MsTUFBTTtPQUM5QkUsT0FBT21XLE9BQU9qVixNQUFNckIsR0FBR0MsTUFBTTs7QUFHOUJPLEtBQUssbUdBQW1HO0FBQ3ZHb1Y7V0FBV3pYLElBQUltVSxTQUNkLENBQUMsT0FBT2hRO1dBQVU7R0FDakIsbUJBQ0EsQ0FBQyxVQUFVO0FBQUNBLFdBQVU7QUFBZStCLE9BQU07QUFBQ2dILFNBQVE7O0dBQU87QUFHN0RrTCxXQUFXakUsU0FBU0MsUUFBUWhPLFNBQVN0RjtBQUNyQzJXLFNBQVN0RCxTQUFTQyxNQUFNelE7TUFBSztBQUFXbUMsU0FBUTtBQUFDM0IsV0FBVTtBQUFnQitCLE9BQU07QUFBQ2dILFNBQVE7OztHQUFPOUcsU0FBU3RGO0FBQzFHNFcsU0FBU3ZELFNBQVNDLE1BQ2pCdE87U0FDQzNCO1dBQVc7QUFDWC9DLElBQUk7QUFDSjhFLE9BQU9nSDtTQUFTOzs7QUFDakJ4TCxVQUFVLENBQ1Q7QUFDQ2lDLE1BQU07QUFDTmpDLFVBQVUsQ0FDVGlDO01BQUs7QUFDTG1DLFNBQVM7QUFBQzVDLE1BQU07OztHQUdsQjtBQUNDUyxNQUFNO0FBQ05tQyxTQUNDM0I7V0FBVztBQUNYK0IsT0FBT2dIO1NBQVM7OztBQUNqQnhMLFVBQVUsQ0FDVG9FO1NBQVM7QUFBQzVDLE1BQU07OztHQUdsQjtBQUNDUyxNQUFNO0FBQ05tQyxTQUFTO0FBQUM1QyxNQUFNOzs7R0FHakJrRCxTQUFTdEY7QUFFWGtCLE9BQU9vVyxTQUFTblcsR0FBRytELFNBQVNDLGVBQWVwRSxHQUFHQyxNQUFNO0FBQ3BERSxPQUFPb1csU0FBU25XLEdBQUdrQyxXQUFXdEMsR0FBR0MsTUFBTTtBQUN2Q0UsT0FBT29XLFNBQVNuVyxHQUFHYixJQUFJUyxHQUFHQyxNQUFNO0FBQ2hDRSxPQUFPb1csU0FBU2xWLE1BQU1yQixHQUFHQyxNQUFNO0FBQy9CRSxPQUFPb1csU0FBU25XLElBQUlKLEdBQUd5RSxLQUFLSixNQUFNLFdBQVU7QUFDNUNsRSxPQUFPb1csU0FBU25XLEdBQUc4RCxXQUFXbkUsUUFBUUMsR0FBR0MsTUFBTTtBQUMvQ0UsT0FBT29XLFNBQVNuVyxHQUFHOEQsV0FBVyxHQUFHQyxVQUFVbkUsR0FBR0MsTUFBTTtBQUNwREUsT0FBT29XLFNBQVNuVyxHQUFHOEQsV0FBVyxHQUFHQyxTQUFTQyxlQUFlcEUsR0FBR0MsTUFBTTtBQUNsRUUsT0FBT29XLFNBQVNuVyxHQUFHOEQsV0FBVyxHQUFHNUIsV0FBV3RDLEdBQUd5RyxRQUFRO0FBQ3ZEdEcsT0FBT29XLFNBQVNuVyxHQUFHOEQsV0FBVyxJQUFJbEUsR0FBR3lFLEtBQUtKLE1BQU0sV0FBVztBQUUzRGxFLE9BQU95VixPQUFPeFYsR0FBRytELFNBQVNDLGVBQWVwRSxHQUFHQyxNQUFNO0FBQ2xERSxPQUFPeVYsT0FBT3hWLEdBQUdrQyxXQUFXdEMsR0FBR3lHLFFBQVE7QUFDdkN0RyxPQUFPeVYsT0FBT3hWLEdBQUdiLElBQUlTLEdBQUdDLE1BQU07QUFDOUJFLE9BQU95VixPQUFPdlUsTUFBTXJCLEdBQUdDLE1BQU07QUFDN0JFLE9BQU95VixPQUFPeFYsSUFBSUosR0FBR3lFLEtBQUtKLE1BQU0sV0FBVTtBQUMxQ2xFLE9BQU95VixPQUFPeFYsR0FBRzhELFdBQVduRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzdDRSxPQUFPeVYsT0FBT3hWLEdBQUc4RCxXQUFXLEdBQUdDLFVBQVVuRSxHQUFHQyxNQUFNO0FBQ2xERSxPQUFPeVYsT0FBT3hWLEdBQUc4RCxXQUFXLEdBQUdDLFNBQVNDLGVBQWVwRSxHQUFHQyxNQUFNO0FBQ2hFRSxPQUFPeVYsT0FBT3hWLEdBQUc4RCxXQUFXLEdBQUc1QixXQUFXdEMsR0FBR3lHLFFBQVE7QUFDckR0RyxPQUFPeVYsT0FBT3hWLEdBQUc4RCxXQUFXLElBQUlsRSxHQUFHeUUsS0FBS0osTUFBTSxXQUFXO0FBRXpEbEUsT0FBTzBWLE9BQU96VixHQUFHK0QsU0FBU0MsZUFBZXBFLEdBQUdDLE1BQU07QUFDbERFLE9BQU8wVixPQUFPelYsR0FBR2tDLFdBQVd0QyxHQUFHeUcsUUFBUTtBQUN2Q3RHLE9BQU8wVixPQUFPelYsR0FBR2IsSUFBSVMsR0FBR0MsTUFBTTtBQUM5QkUsT0FBTzBWLE9BQU94VSxNQUFNckIsR0FBR0MsTUFBTTtBQUM3QkUsT0FBTzBWLE9BQU96VixJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxXQUFVO0FBQzFDbEUsT0FBTzBWLE9BQU96VixHQUFHOEQsV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFDN0NFLE9BQU8wVixPQUFPelYsR0FBRzhELFdBQVcsR0FBR0MsU0FBU0MsZUFBZXBFLEdBQUdDLE1BQU07QUFDaEVFLE9BQU8wVixPQUFPelYsR0FBRzhELFdBQVcsR0FBR0EsV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFDM0RFLE9BQU8wVixPQUFPelYsR0FBRzhELFdBQVcsR0FBR0MsU0FBU0MsZUFBZXBFLEdBQUdDLE1BQU07QUFDaEVFLE9BQU8wVixPQUFPelYsR0FBRzhELFdBQVcsR0FBRzVCLFdBQVd0QyxHQUFHeUcsUUFBUTtPQUNyRHRHLE9BQU8wVixPQUFPelYsR0FBRzhELFdBQVcsSUFBSWxFLEdBQUd5RSxLQUFLSixNQUFNLFdBQVc7O0FBRzFEN0QsS0FBSyw0REFBNEQ7QUFDaEVnVztXQUFXclksSUFBSW1VLFNBQVMsQ0FBQyxPQUFPak87T0FBTTtBQUFDLFdBQVU7O0dBQU0sQ0FBQyxRQUFRLE1BQU0saUJBQWlCLENBQUMsT0FBTyxNQUFNO0FBQ3JHbVMsU0FBU2xFLFNBQVM2RCxPQUFPLENBQUMsV0FBVzlSO09BQU07QUFBQyxXQUFVOzs7QUFDdERvUyxTQUFTbkUsU0FBUzZELE9BQU8sQ0FBQyxRQUFRLE1BQU0sQ0FBQztBQUN6Q08sU0FBU3BFLFNBQVM2RCxPQUFPLENBQUMsV0FBVztBQUFDN1QsV0FBVTtBQUFlK0IsT0FBTTtBQUFDMEssT0FBTTs7R0FBVSxDQUFDLFdBQVcsTUFBTSx1QkFBdUI7QUFDL0h3RCxRQUFRRCxTQUFTQyxNQUFNLENBQUMsUUFBUWxPO09BQU07QUFBQyxTQUFRO0FBQUssV0FBVTs7R0FBTSxZQUFZRSxTQUFTdEY7QUFFekZrQixPQUFPbVMsU0FBU3hRLE1BQU05QixHQUFHQyxNQUFNO0FBQy9CRSxPQUFPbVMsU0FBU3JPLFNBQVNqRSxHQUFHNkssSUFBSTtBQUFDeEcsT0FBTTtBQUFDLFdBQVU7OztBQUNsRGxFLE9BQU9tUyxTQUFTelMsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT21TLFNBQVN6UyxTQUFTLEdBQUdpQyxNQUFNOUIsR0FBR0MsTUFBTTtBQUMzQ0UsT0FBT21TLFNBQVN6UyxTQUFTLEdBQUdBLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDdERFLE9BQU9tUyxTQUFTelMsU0FBUyxHQUFHQSxTQUFTLEdBQUdvRSxRQUFRNUMsTUFBTXJCLEdBQUdDLE1BQU07QUFDL0RFLE9BQU9tUyxTQUFTelMsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDM0NFLE9BQU9tUyxTQUFTelMsU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3RERSxPQUFPbVMsU0FBU3pTLFNBQVMsR0FBR0EsU0FBUyxHQUFHb0UsUUFBUTVDLE1BQU1yQixHQUFHQyxNQUFNO0FBRS9ERSxPQUFPcVcsT0FBTzFVLE1BQU05QixHQUFHQyxNQUFNO0FBQzdCRSxPQUFPcVcsT0FBT3ZTLFNBQVNqRSxHQUFHNkssSUFBSTtBQUFDeEcsT0FBTTtBQUFDLFdBQVU7OztBQUNoRGxFLE9BQU9xVyxPQUFPM1csU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT3FXLE9BQU8zVyxTQUFTLEdBQUdpQyxNQUFNOUIsR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT3FXLE9BQU8zVyxTQUFTLEdBQUdBLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDcERFLE9BQU9xVyxPQUFPM1csU0FBUyxHQUFHQSxTQUFTLEdBQUdvRSxRQUFRNUMsTUFBTXJCLEdBQUdDLE1BQU07QUFDN0RFLE9BQU9xVyxPQUFPM1csU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDekNFLE9BQU9xVyxPQUFPM1csU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3BERSxPQUFPcVcsT0FBTzNXLFNBQVMsR0FBR0EsU0FBUyxHQUFHb0UsUUFBUTVDLE1BQU1yQixHQUFHQyxNQUFNO0FBRTdERSxPQUFPc1csT0FBTzNVLE1BQU05QixHQUFHQyxNQUFNO0FBQzdCRSxPQUFPc1csT0FBT3hTLFNBQVNqRSxHQUFHNkssSUFBSTtBQUFDeEcsT0FBTTtBQUFDLFdBQVU7OztBQUNoRGxFLE9BQU9zVyxPQUFPNVcsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT3NXLE9BQU81VyxTQUFTLEdBQUdpQyxNQUFNOUIsR0FBR0MsTUFBTTtBQUN6Q0UsT0FBT3NXLE9BQU81VyxTQUFTLEdBQUdBLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDcERFLE9BQU9zVyxPQUFPNVcsU0FBUyxHQUFHQSxTQUFTLEdBQUdvRSxRQUFRNUMsTUFBTXJCLEdBQUdDLE1BQU07QUFDN0RFLE9BQU9zVyxPQUFPNVcsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDekNFLE9BQU9zVyxPQUFPNVcsU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3BERSxPQUFPc1csT0FBTzVXLFNBQVMsR0FBR0EsU0FBUyxHQUFHb0UsUUFBUTVDLE1BQU1yQixHQUFHQyxNQUFNO0FBRTdERSxPQUFPdVcsT0FBTzVVLE1BQU05QixHQUFHQyxNQUFNO0FBQzdCRSxPQUFPdVcsT0FBT3pTLFNBQVNqRSxHQUFHNkssSUFBSTtBQUFDdkksV0FBVTtBQUFlK0IsT0FBTTtBQUFDLFdBQVU7QUFBSyxTQUFROzs7QUFDdEZsRSxPQUFPdVcsT0FBTzdXLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDeENFLE9BQU91VyxPQUFPN1csU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDekNFLE9BQU91VyxPQUFPN1csU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3BERSxPQUFPdVcsT0FBTzdXLFNBQVMsR0FBR0EsU0FBUyxHQUFHb0UsUUFBUTVDLE1BQU1yQixHQUFHQyxNQUFNO0FBQzdERSxPQUFPdVcsT0FBTzdXLFNBQVMsR0FBR2lDLE1BQU05QixHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPdVcsT0FBTzdXLFNBQVMsR0FBR29FLFFBQVE1QyxNQUFNckIsR0FBR0MsTUFBTTtBQUVqRHNTLE1BQU1sTyxNQUFNLFdBQVc7QUFDdkJsRSxPQUFPb1MsTUFBTW5TLEdBQUcrRCxTQUFTQyxlQUFlcEUsR0FBR0MsTUFBTTtBQUNqREUsT0FBT29TLE1BQU1uUyxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxXQUFXO0FBQzFDbEUsT0FBT29TLE1BQU1uUyxJQUFJSixHQUFHeUUsS0FBS0osTUFBTSxTQUFTO0FBQ3hDbEUsT0FBT29TLE1BQU1uUyxHQUFHOEQsV0FBV25FLFFBQVFDLEdBQUdDLE1BQU07QUFDNUNFLE9BQU9vUyxNQUFNblMsR0FBRzhELFdBQVcsR0FBR0osVUFBVTlELEdBQUdDLE1BQU07QUFDakRFLE9BQU9vUyxNQUFNblMsR0FBRzhELFdBQVcsR0FBR0gsYUFBYS9ELEdBQUdDLE1BQU07QUFDcERFLE9BQU9vUyxNQUFNblMsR0FBRzhELFdBQVcsR0FBR0MsU0FBU0MsZUFBZXBFLEdBQUdDLE1BQU07T0FDL0RFLE9BQU9vUyxNQUFNblMsR0FBRzhELFdBQVcsR0FBR0gsYUFBYS9ELEdBQUdDLE1BQU07O0FBT3JETyxLQUFLLGdIQUFnSDtBQUNwSHdOO1dBQVc3UCxJQUFJbVUsU0FBUyxDQUFDLE9BQU8sTUFBTSxDQUFDLFFBQVE7QUFBQ2pPLE9BQU1nSDtTQUFROztJQUFPO0FBQ3JFMkMsU0FBUzdQLElBQUltVSxTQUFTLENBQUMsT0FBTztBQUFDak8sT0FBTXNTO1lBQVc7OztBQUNoRDFJLFNBQVM5UCxJQUFJbVUsU0FBUztBQUN0QmUsU0FBU2xWLElBQUltVSxTQUFTLENBQUM7QUFDdkJzRSxlQUFldEUsU0FBUzZELE9BQU8sQ0FBQyxRQUFRO0FBQUM5UixPQUFNcUY7VUFBUzs7R0FBU3NFLFFBQVFDLFFBQVFvRjtBQUNqRndELFdBQVd2RSxTQUFTQyxRQUFRaE8sU0FBU3RGO0FBQ3JDNlgsV0FBV0YsYUFBYXJFLFFBQVFoTyxTQUFTdEY7QUFDekM4WCxXQUFXekUsU0FBU0MsTUFBTSxDQUFDLFFBQVE7QUFBQ2xPLE9BQU1xRjtVQUFTOztHQUFTc0UsUUFBUUMsUUFBUW9GLFNBQVM5TyxTQUFTdEY7QUFFOUZrQixPQUFPMFcsU0FBUy9VLE1BQU05QixHQUFHQyxNQUFNO0FBQy9CRSxPQUFPMFcsU0FBU2hYLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDMUNFLE9BQU8wVyxTQUFTaFgsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDM0NFLE9BQU8wVyxTQUFTaFgsU0FBUyxHQUFHMkUsS0FBS3hFLEdBQUd5RSxLQUFLSixNQUFNLFdBQVc7QUFDMURsRSxPQUFPMFcsU0FBU2hYLFNBQVMsR0FBRzJFLEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxjQUFjO0FBQzdEbEUsT0FBTzBXLFNBQVNoWCxTQUFTLEdBQUdpQyxNQUFNOUIsR0FBR0MsTUFBTTtBQUMzQ0UsT0FBTzBXLFNBQVN4VixNQUFNckIsR0FBR0MsTUFBTTtBQUUvQkUsT0FBTzJXLFNBQVNoVixNQUFNOUIsR0FBR0MsTUFBTTtBQUMvQkUsT0FBTzJXLFNBQVNqWCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzFDRSxPQUFPMlcsU0FBU2pYLFNBQVMsR0FBR2lDLE1BQU05QixHQUFHQyxNQUFNO0FBQzNDRSxPQUFPMlcsU0FBU2pYLFNBQVMsR0FBRzJFLEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxXQUFXO0FBQzFEbEUsT0FBTzJXLFNBQVNqWCxTQUFTLEdBQUcyRSxLQUFLeEUsR0FBR3lFLEtBQUtKLE1BQU0sY0FBYztBQUM3RGxFLE9BQU8yVyxTQUFTalgsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDM0NFLE9BQU8yVyxTQUFTelYsTUFBTXJCLEdBQUdDLE1BQU07QUFDL0JFLE9BQU8yVyxTQUFTalgsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDM0NFLE9BQU8yVyxTQUFTdFMsS0FBS3hFLEdBQUd5RSxLQUFLSixNQUFNLFlBQVk7QUFFL0NsRSxPQUFPNFcsU0FBU2pWLE1BQU05QixHQUFHQyxNQUFNO0FBQy9CRSxPQUFPNFcsU0FBU2xYLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDMUNFLE9BQU80VyxTQUFTbFgsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDM0NFLE9BQU80VyxTQUFTbFgsU0FBUyxHQUFHMkUsS0FBS3hFLEdBQUd5RSxLQUFLSixNQUFNLFdBQVc7QUFDMURsRSxPQUFPNFcsU0FBU2xYLFNBQVMsR0FBRzJFLEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxjQUFjO0FBQzdEbEUsT0FBTzRXLFNBQVNsWCxTQUFTLEdBQUdpQyxNQUFNOUIsR0FBR0MsTUFBTTtBQUMzQ0UsT0FBTzRXLFNBQVMxVixNQUFNckIsR0FBR0MsTUFBTTtBQUMvQkUsT0FBTzRXLFNBQVNsWCxTQUFTLEdBQUdpQyxNQUFNOUIsR0FBR0MsTUFBTTtPQUMzQ0UsT0FBTzRXLFNBQVN2UyxLQUFLeEUsR0FBR3lFLEtBQUtKLE1BQU0sWUFBWTs7QUFHaEQ3RCxLQUFLLDhIQUE4SDtBQUNsSThSO1dBQVdsVSxJQUFJa1UsU0FDZCxDQUFDLE9BQ0EwRTtVQUFVM1Y7TUFBTTs7QUFDaEI0VixXQUFXNVY7TUFBTSxVQUFDQSxNQUFEO09BQVMsS0FBQ0EsT0FBT0E7OztHQUVsQyxDQUFDLFFBQVFxTztLQUFJOztBQUlmdlAsT0FBT21TLFNBQVNyTyxRQUFRSSxPQUFPckUsR0FBR0MsTUFBTTtBQUN4Q0UsT0FBT21TLFNBQVNyTyxRQUFRaVQsT0FBT2xYLEdBQUdDLE1BQU07QUFDeENFLE9BQU9tUyxTQUFTNkQsT0FBT2xTO1NBQVFpVDtPQUFNOztHQUFValQsUUFBUWlULE9BQU9sWCxHQUFHQyxNQUFNO0FBQ3ZFRSxPQUFPbVMsU0FBUzZELE9BQU9lO09BQU07R0FBVWpULFFBQVFpVCxPQUFPbFgsR0FBR0MsTUFBTTtBQUMvREUsT0FBT21TLFNBQVM2RCxPQUFPOVI7T0FBTTtHQUFVSixRQUFRSSxPQUFPckUsR0FBR0MsTUFBTTtBQUMvREUsT0FBT21TLFNBQVM2RCxPQUFPOVI7T0FBTTtBQUFVdkMsTUFBSztHQUFXbUMsUUFBUUksT0FBT3JFLEdBQUdDLE1BQU07QUFDL0VFLE9BQU9tUyxTQUFTNkQsT0FBT3RXO1VBQVNzWDtTQUFROVM7T0FBTTs7O0dBQVV2RSxNQUFNcVgsUUFBUWxULFFBQVFJLE9BQU9yRSxHQUFHQyxNQUFNO0FBQzlGRSxPQUFPbVMsU0FBUzZELE9BQU90VztVQUFTLENBQUNtWDtVQUFTOztHQUFXbFgsTUFBTXFYLFFBQVFsVCxRQUFRK1MsVUFBVWhYLEdBQUdDLE1BQU07QUFDOUZFLE9BQU9tUyxTQUFTQyxNQUFNMVM7VUFBU3NYO1NBQVE3VTtXQUFVOzs7R0FBVXhDLE1BQU1xWCxRQUFRM1MsSUFBSWxDLFdBQVd0QyxHQUFHQyxNQUFNO0FBQ2pHRSxPQUFPbVMsU0FBU0MsUUFBUWxSLE1BQU1yQixHQUFHQyxNQUFNO09BQ3ZDRSxPQUFPbVMsU0FBU0MsTUFBTXlFO1VBQVMzVjtNQUFLOztHQUFRQSxNQUFNckIsR0FBR0MsTUFBTTs7QUFHNURPLEtBQUssd0RBQXdEO0FBQzVENFc7aUJBQWlCalosSUFBSW1VLFNBQVMsQ0FBQyxVQUFVO0FBQUNqTyxPQUFNO1VBQVM7O0dBQ3hELENBQUMsUUFBUTtBQUFDQSxPQUFNO2FBQVk7O0dBQVcsd0JBQ3ZDO0FBRURnVCxzQkFBc0JsWixJQUFJbVUsU0FBUzhFO0FBQ25DdEIsa0JBQWtCM1gsSUFBSW1VLFNBQVMsQ0FBQyxXQUFXLE1BQU04RTtBQUNqRDFWLFVBQVVvVSxnQkFBZ0J2RCxRQUFRaE8sU0FBU3RGO0FBRTNDa0IsT0FBT2tYLHFCQUFxQnJYLEdBQUdDLE1BQU1tWDtBQUNyQ2pYLE9BQU8yVixnQkFBZ0JqVyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ2pERSxPQUFPMlYsZ0JBQWdCalcsU0FBUyxJQUFJRyxHQUFHQyxNQUFNbVg7QUFDN0NqWCxPQUFPMlYsZ0JBQWdCalcsU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzdERSxPQUFPdUIsUUFBUTdCLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDekNFLE9BQU91QixRQUFRN0IsU0FBUyxHQUFHaUMsTUFBTTlCLEdBQUdDLE1BQU07QUFDMUNFLE9BQU91QixRQUFRN0IsU0FBUyxHQUFHQSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JERSxPQUFPdUIsUUFBUUwsTUFBTXJCLEdBQUdDLE1BQU07T0FDOUJFLE9BQU91QixRQUFRN0IsU0FBUyxHQUFHQSxTQUFTLEdBQUd3RSxNQUFNLGNBQWNyRSxHQUFHQyxNQUFNOztBQUdyRU8sS0FBSyxvSkFBb0o7QUFDeEo4VztNQUFNQztVQUFTOztBQUNmOVQsSUFBSUEsTUFBTUE7QUFDVjZULHFCQUFxQjtVQUFVLFVBQUN0VCxTQUFEO0FBQVk3RCxPQUFPNkQsU0FBU2hFLEdBQUdDLE1BQU13RDtPQUFNTyxRQUFRdVQ7OztBQUVsRkgsaUJBQWlCalosSUFBSW1VLFNBQVMsQ0FBQyxVQUFVO0FBQUNqTyxPQUFNO1NBQVE7O0dBQ3ZELENBQUMsT0FBTztBQUFDQSxPQUFNO1NBQVE7O0dBQVMsd0JBQ2hDO0FBRUR5UixrQkFBa0IzWCxJQUFJbVUsU0FBUyxDQUFDLFdBQVc7QUFBQ2pPLE9BQU07U0FBUTs7R0FBUytTO0FBQ25FMVYsVUFBVW9VLGdCQUFnQnZELE1BQU07QUFBQ3RPLFNBQVE7QUFBQ0QsU0FBUTNGOztHQUFVO0FBQUMyRixTQUFRUDtBQUFLWSxPQUFNaVQ7R0FBcUIvUyxTQUFTdEY7QUFFOUdrQixPQUFPdUIsUUFBUThDLElBQUlILE1BQU1xQixRQUFRMUYsR0FBR0MsTUFBTTtBQUMxQ0UsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUcyRSxJQUFJSCxNQUFNcUIsUUFBUTFGLEdBQUdDLE1BQU07QUFDdERFLE9BQU91QixRQUFRN0IsU0FBUyxHQUFHQSxTQUFTLEdBQUcyRSxJQUFJSCxNQUFNcUIsUUFBUTFGLEdBQUdDLE1BQU07QUFDbEVFLE9BQU91QixRQUFROEMsSUFBSUgsTUFBTW9CLE9BQU96RixHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPdUIsUUFBUTdCLFNBQVMsR0FBRzJFLElBQUlILE1BQU1vQixPQUFPekYsR0FBR0MsTUFBTTtBQUNyREUsT0FBT3VCLFFBQVE3QixTQUFTLEdBQUdBLFNBQVMsR0FBRzJFLElBQUlILE1BQU1vQixPQUFPekYsR0FBR0MsTUFBTTtBQUNqRUUsT0FBT3VCLFFBQVE3QixTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3pDRSxPQUFPdUIsUUFBUTdCLFNBQVMsR0FBR2lDLE1BQU05QixHQUFHQyxNQUFNO0FBQzFDRSxPQUFPdUIsUUFBUTdCLFNBQVMsR0FBR0EsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtPQUNyREUsT0FBT3VCLFFBQVFMLE1BQU1yQixHQUFHQyxNQUFNOztBQUcvQk8sS0FBSyx1RUFBdUU7QUFDM0VnWDtXQUNDclosSUFBSW1VLFNBQVMsQ0FBQyxPQUFPO0FBQUMvUyxJQUFHO0dBQ3hCLENBQUMsT0FBTztBQUFDQSxJQUFHO0dBQ1gsQ0FBQyxRQUFRO0FBQUNtUSxLQUFJO0lBQ2QsQ0FBQyxPQUFPO0FBQUNBLEtBQUk7QUFBWW5RLElBQUc7S0FFN0IsQ0FBQyxPQUFPLE1BQ1AsQ0FBQyxRQUFRO0FBQUNtUSxLQUFJO0lBQ2QsQ0FBQyxRQUFRO0FBQUNuUSxJQUFHO0FBQVk4QixNQUFLOztBQUlqQ2xCLE9BQU8sT0FBT21TLFNBQVN4UyxPQUFPRSxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPK1MsT0FBT0MsS0FBS2IsU0FBU3hTLE9BQU9DLFFBQVFDLEdBQUdDLE1BQU07QUFDcERFLE9BQU9tUyxTQUFTeFMsTUFBTWlILE1BQU0vRyxHQUFHQyxNQUFNcVM7QUFDckNuUyxPQUFPbVMsU0FBU3hTLE1BQU1rTyxPQUFPbE0sTUFBTTlCLEdBQUdDLE1BQU07QUFDNUNFLE9BQU9tUyxTQUFTeFMsTUFBTWtPLFFBQVFoTyxHQUFHQyxNQUFNcVMsU0FBU3pTLFNBQVM7QUFDekRNLE9BQU9tUyxTQUFTeFMsTUFBTTBTLFVBQVV4UyxHQUFHQyxNQUFNcVMsU0FBU3pTLFNBQVMsR0FBR0EsU0FBUztBQUN2RU0sT0FBT21TLFNBQVN4UyxNQUFNMlMsVUFBVXpTLEdBQUdDLE1BQU1xUyxTQUFTelMsU0FBUyxHQUFHQSxTQUFTO0FBQ3ZFTSxPQUFPbVMsU0FBU3hTLE1BQU02UyxVQUFVM1MsR0FBR0MsTUFBTXFTLFNBQVN6UyxTQUFTLEdBQUdBLFNBQVM7QUFDdkVNLE9BQU9tUyxTQUFTeFMsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNcVMsU0FBU3pTLFNBQVMsR0FBR0EsU0FBUztBQUV2RTJYLFdBQVdsRixTQUFTQztBQUNwQnBTLE9BQU9xWCxTQUFTMVgsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNdVgsU0FBUzNYLFNBQVMsR0FBR0EsU0FBUztPQUN2RU0sT0FBT3FYLFNBQVNuVyxNQUFNckIsR0FBR0MsTUFBTTs7QUFHaENPLEtBQUsscUdBQXFHO0FBQ3pHZ1g7ZUFDQ3JaLElBQUltVSxTQUFTLENBQUMsT0FBTztBQUFDL1MsSUFBRztHQUN4QixDQUFDLE9BQU87QUFBQ0EsSUFBRztHQUNYLENBQUMsUUFBUTtBQUFDbVEsS0FBSTtJQUNkLENBQUMsT0FBTztBQUFDQSxLQUFJO0FBQVluUSxJQUFHO0tBRTdCLENBQUMsT0FBTyxNQUNQLENBQUMsUUFBUTtBQUFDbVEsS0FBSTtJQUNkLENBQUMsUUFBUTtBQUFDblEsSUFBRztBQUFZOEIsTUFBSzs7QUFHakN1VixlQUFlYSxhQUFhdEIsT0FBTyxDQUFDLFdBQVcsTUFDOUNuSTtRQUNDbE07TUFBTTtBQUNObUMsU0FDQ0k7T0FBT0M7U0FBUzs7OztBQUNsQm1PLFVBQ0MsQ0FBQyxLQUFLO0FBQUNsVCxJQUFHO0FBQVl5RCxNQUFLO0dBQzFCLENBQUMsUUFBUTtBQUFDME0sS0FBSTtBQUFjck8sTUFBSzs7QUFFbkNnUyxRQUNDLENBQUMsT0FBTzNEO0tBQUk7O0lBQ1g7QUFBQ2pOLE9BQU07O0FBRVZpVixnQkFBZ0JELGFBQWF0QixPQUFPdFc7VUFDbkNtTztRQUNDbk87VUFBVW1UO1VBQVUsQ0FBQzs7O0FBQ3RCUCxVQUNDLENBQUMsS0FBSztBQUFDbFQsSUFBRztBQUFZeUQsTUFBSztHQUMxQixDQUFDLFFBQVE7QUFBQzBNLEtBQUk7QUFBY3JPLE1BQUs7O0FBRW5DZ1MsUUFDQyxDQUFDLE9BQU8zRDtLQUFJOzs7O0FBRWR2UCxPQUFPLE9BQU95VyxhQUFhOVcsTUFBTTZYLFlBQVkzVixJQUFJaEMsR0FBR0MsTUFBTTtBQUMxREUsT0FBTytTLE9BQU9DLEtBQUtzRSxhQUFhM1gsT0FBT0MsUUFBUUMsR0FBR0MsTUFBTTtBQUN4REUsT0FBTytTLE9BQU9DLEtBQUt5RCxhQUFhOVcsT0FBT0MsUUFBUUMsR0FBR0MsTUFBTTtBQUN4REUsT0FBT3lXLGFBQWEvVyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzlDRSxPQUFPeVcsYUFBYTlXLE1BQU1pSCxNQUFNL0csR0FBR0MsTUFBTTJXO0FBQ3pDelcsT0FBT3lXLGFBQWE5VyxNQUFNa08sUUFBUWhPLEdBQUdDLE1BQU0yVyxhQUFhL1csU0FBUztBQUNqRU0sT0FBT3lXLGFBQWE5VyxNQUFNa08sT0FBT2xNLE1BQU05QixHQUFHQyxNQUFNO0FBQ2hERSxPQUFPeVcsYUFBYTlXLE1BQU0wUyxVQUFVeFMsR0FBR0MsTUFBTTJXLGFBQWEvVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VNLE9BQU95VyxhQUFhOVcsTUFBTTJTLFVBQVV6UyxHQUFHQyxNQUFNO0FBQzdDRSxPQUFPeVcsYUFBYTlXLE1BQU04WCxVQUFVNVgsR0FBR0MsTUFBTTJXLGFBQWEvVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VNLE9BQU95VyxhQUFhOVcsTUFBTTZYLFlBQVkzWCxHQUFHQyxNQUFNMlcsYUFBYS9XLFNBQVMsR0FBR0EsU0FBUyxHQUFHQSxTQUFTO0FBQzdGTSxPQUFPeVcsYUFBYTlXLE1BQU02WCxXQUFXMVQsUUFBUTVDLE1BQU1yQixHQUFHQyxNQUFNO0FBQzVERSxPQUFPeVcsYUFBYTlXLE1BQU02UyxVQUFVM1MsR0FBR0MsTUFBTTJXLGFBQWEvVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VNLE9BQU95VyxhQUFhOVcsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNMlcsYUFBYS9XLFNBQVMsR0FBR0EsU0FBUztBQUMvRU0sT0FBT3lXLGFBQWE5VyxNQUFNdVQsUUFBUXJULEdBQUdDLE1BQU07QUFDM0NFLE9BQU95VyxhQUFhOVcsTUFBTXdULFFBQVF0VCxHQUFHQyxNQUFNMlcsYUFBYS9XLFNBQVM7QUFFakUyWCxXQUFXWixhQUFhckUsUUFBUWhPLFNBQVN0RjtBQUN6Q2tCLE9BQU8rUyxPQUFPQyxLQUFLcUUsU0FBUzFYLE9BQU9DLFFBQVFDLEdBQUdDLE1BQU07QUFDcERFLE9BQU9xWCxTQUFTMVgsTUFBTThTLFVBQVU1UyxHQUFHQyxNQUFNdVgsU0FBUzNYLFNBQVMsR0FBR0EsU0FBUztBQUN2RU0sT0FBT3FYLFNBQVMxWCxNQUFNa08sT0FBT3hKLEtBQUt4RSxHQUFHeUUsS0FBS0osTUFBTSxXQUFXO0FBQzNEbEUsT0FBT3FYLFNBQVMxWCxNQUFNOFgsU0FBU3JOLEtBQUssU0FBU3ZLLEdBQUdpQyxRQUFRO0FBQ3hEOUIsT0FBT3FYLFNBQVMxWCxNQUFNNlMsU0FBU3BJLEtBQUssVUFBVXZLLEdBQUdDLE1BQU07T0FDdkRFLE9BQU9xWCxTQUFTMVgsTUFBTXdULE9BQU94SCxLQUFLLGFBQWE5TCxHQUFHQyxNQUFNOztBQUd6RE8sS0FBSyx3RkFBd0Y7QUFDNUZ3TjtTQUFTN1AsSUFBSW1VLFNBQ1osQ0FBQyxPQUFPO0FBQUMvUyxJQUFHO0dBQ1gsQ0FBQyxRQUFRO0FBQUNtUSxLQUFJO0lBQ2QsQ0FBQyxPQUFPO0FBQUNBLEtBQUk7QUFBWW5RLElBQUc7O0FBRzlCME8sU0FBUzlQLElBQUltVSxTQUNaLENBQUMsT0FBTzVDO0tBQUk7R0FDWCxDQUFDLFFBQVE7QUFBQ0EsS0FBSTtJQUNkLENBQUMsUUFBUTtBQUFDblEsSUFBRztBQUFZOEIsTUFBSzs7QUFHaENnUyxTQUFTbFYsSUFBSW1VLFNBQ1osQ0FBQyxPQUFPO0FBQUMvUyxJQUFHO0dBQ1gsQ0FBQyxRQUFRO0FBQUNtUSxLQUFJO0lBQ2QsQ0FBQyxRQUFRO0FBQUNuUSxJQUFHO0FBQVk4QixNQUFLOztBQUdoQ29XLGVBQ0N0WixJQUFJbVUsU0FBUyxDQUFDLE9BQU87QUFBQy9TLElBQUc7R0FDeEJ5TyxRQUNBQztBQUVGMkksZUFBZWEsYUFBYXRCLE9BQU8sQ0FBQyxXQUFXLE1BQzlDbkk7UUFBUWxNO01BQU07O0FBQ2RtTSxRQUFRQSxPQUFPa0ksT0FBT3pHO0tBQUk7O0FBQzFCMkQsUUFBUUEsT0FBTzhDLE9BQU96RztLQUFJOztJQUN4QjtBQUFDak4sT0FBTTs7QUFFVnRDLE9BQU8rUyxPQUFPQyxLQUFLc0UsYUFBYTNYLE9BQU9DLFFBQVFDLEdBQUdDLE1BQU07QUFDeERFLE9BQU8rUyxPQUFPQyxLQUFLeUQsYUFBYTlXLE9BQU9DLFFBQVFDLEdBQUdDLE1BQU07QUFDeERFLE9BQU9zWCxhQUFhNVgsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUM5Q0UsT0FBT3lXLGFBQWEvVyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzlDRSxPQUFPeVcsYUFBYTlXLE1BQU1pSCxNQUFNL0csR0FBR0MsTUFBTTJXO0FBQ3pDelcsT0FBT3lXLGFBQWE5VyxNQUFNa08sUUFBUWhPLEdBQUdDLE1BQU0yVyxhQUFhL1csU0FBUztBQUNqRU0sT0FBT3lXLGFBQWE5VyxNQUFNa08sT0FBT2xNLE1BQU05QixHQUFHQyxNQUFNO0FBQ2hERSxPQUFPeVcsYUFBYTlXLE1BQU1rTyxPQUFPbk8sU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUMzREUsT0FBT3lXLGFBQWE5VyxNQUFNK1gsUUFBUTdYLEdBQUdDLE1BQU0yVyxhQUFhL1csU0FBUztBQUNqRU0sT0FBT3lXLGFBQWE5VyxNQUFNNlMsVUFBVTNTLEdBQUdDLE1BQU0yVyxhQUFhL1csU0FBUyxHQUFHQSxTQUFTO0FBQy9FTSxPQUFPeVcsYUFBYTlXLE1BQU04UyxVQUFVNVMsR0FBR0MsTUFBTTJXLGFBQWEvVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VNLE9BQU9zWCxhQUFhM1gsTUFBTXVULFFBQVFyVCxHQUFHQyxNQUFNO0FBQzNDRSxPQUFPeVcsYUFBYTlXLE1BQU11VCxRQUFRclQsR0FBR0MsTUFBTTtBQUMzQ0UsT0FBT3lXLGFBQWE5VyxNQUFNZ1ksUUFBUTlYLEdBQUdDLE1BQU0yVyxhQUFhL1csU0FBUztBQUNqRU0sT0FBTytTLE9BQU9DLEtBQUtzRSxhQUFhbEYsUUFBUXpTLE9BQU9DLFFBQVFDLEdBQUdDLE1BQU07T0FDaEVFLE9BQU8rUyxPQUFPQyxLQUFLeUQsYUFBYXJFLFFBQVF6UyxPQUFPQyxRQUFRQyxHQUFHQyxNQUFNOztBQUdqRU8sS0FBSyxvRUFBb0U7QUFDeEV6QjtTQUFTYztVQUFVMlM7VUFBVTtBQUFDMVEsTUFBSztBQUFPbUMsU0FBUztBQUFDSSxPQUFPO0FBQUNDLFNBQVE7Ozs7OztBQUNwRXlULFlBQVk1WixJQUFJbVUsU0FDZixDQUFDLE9BQU87QUFBQzVDLEtBQUk7R0FDWixDQUFDLE9BQU87QUFBQ0EsS0FBSTtHQUNaLENBQUMsUUFBUTtBQUFDQSxLQUFJOztBQUlqQnFJLFVBQVVqWSxNQUFNMFM7QUFDaEJ3RixZQUFZRCxVQUFVNUI7QUFDdEI4QixZQUFZRixVQUFVNUIsT0FBT3BYO0FBQzdCbVosWUFBWUgsVUFBVTVCLE9BQU9wWDtBQUM3QjZXLFNBQVNtQyxVQUFVeEYsUUFBUWhPLFNBQVN0RjtBQUNwQzRXLFNBQVNtQyxVQUFVekYsUUFBUWhPLFNBQVN0RjtBQUNwQ3FYLFNBQVMyQixVQUFVMUYsUUFBUWhPLFNBQVN0RjtBQUNwQ2taLFNBQVNELFVBQVUzRixRQUFRaE8sU0FBU3RGO0FBQ3BDa0IsT0FBT3lWLE9BQU85VixNQUFNMFMsU0FBUzFRLE1BQU05QixHQUFHQyxNQUFNO0FBQzVDRSxPQUFPeVYsT0FBTzlWLE1BQU0wUyxTQUFTbk8sTUFBTSxZQUFXckUsR0FBR0MsTUFBTTtBQUN2REUsT0FBTzBWLE9BQU8vVixNQUFNMFMsU0FBUzFRLE1BQU05QixHQUFHQyxNQUFNO0FBQzVDRSxPQUFPMFYsT0FBTy9WLE1BQU0wUyxTQUFTbk8sTUFBTSxZQUFXckUsR0FBR0MsTUFBTTtBQUN2REUsT0FBT21XLE9BQU94VyxNQUFNMFMsU0FBUzFRLE1BQU05QixHQUFHQyxNQUFNO0FBQzVDRSxPQUFPbVcsT0FBT3hXLE1BQU0wUyxTQUFTbk8sTUFBTSxZQUFXckUsR0FBR0MsTUFBTTtBQUN2REUsT0FBT2dZLE9BQU9yWSxNQUFNMFMsU0FBUzFRLE1BQU05QixHQUFHQyxNQUFNO09BQzVDRSxPQUFPZ1ksT0FBT3JZLE1BQU0wUyxTQUFTbk8sTUFBTSxZQUFXckUsR0FBR0MsTUFBTTs7QUFFeERPLEtBQUssMkVBQTJFO0FBQy9Fb1c7ZUFDQ3pZLElBQUltVSxTQUFTLENBQUMsT0FBTztBQUFDL1MsSUFBRztHQUN4QixDQUFDLE9BQU87QUFBQ0EsSUFBRztHQUNYLENBQUMsUUFBUTtBQUFDbVEsS0FBSTtJQUNkLENBQUMsT0FBTztBQUFDQSxLQUFJO0FBQVluUSxJQUFHO0tBRTdCLENBQUMsT0FBTztBQUFDbVEsS0FBSTtHQUNaLENBQUMsUUFBUTtBQUFDQSxLQUFJO0lBQ2QsQ0FBQyxRQUFRO0FBQUNuUSxJQUFHO0FBQVk4QixNQUFLO0tBRS9CLENBQUMsT0FBTztBQUFDOUIsSUFBRztHQUNYLENBQUMsUUFBUTtBQUFDbVEsS0FBSTtJQUNkLENBQUMsUUFBUTtBQUFDblEsSUFBRztBQUFZOEIsTUFBSzs7QUFHakN1VixlQUFlYSxhQUFhdEIsT0FBTyxDQUFDLFdBQVcsTUFDOUNuSTtRQUNDbE07TUFBTTtBQUNObUMsU0FDQ0k7T0FBT0M7U0FBUzs7OztBQUVsQmtPLFVBQVU7QUFDVkMsVUFDQyxDQUFDLEtBQUs7QUFBQ2xULElBQUc7QUFBWXlELE1BQUs7R0FDMUIsQ0FBQyxRQUFRO0FBQUMwTSxLQUFJO0FBQWNyTyxNQUFLOztBQUVuQ3NSLFVBQVU7QUFDVlUsUUFBUTs7QUFHVGxULE9BQU8sT0FBT3lXLGFBQWE5VyxNQUFNNlgsWUFBWTNWLElBQUloQyxHQUFHQyxNQUFNO0FBQzFERSxPQUFPK1MsT0FBT0MsS0FBS3NFLGFBQWEzWCxPQUFPQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hERSxPQUFPK1MsT0FBT0MsS0FBS3lELGFBQWE5VyxPQUFPQyxRQUFRQyxHQUFHQyxNQUFNO0FBQ3hERSxPQUFPeVcsYUFBYS9XLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDOUNFLE9BQU95VyxhQUFhOVcsTUFBTWlILE1BQU0vRyxHQUFHQyxNQUFNMlc7QUFDekN6VyxPQUFPeVcsYUFBYTlXLE1BQU1rTyxRQUFRaE8sR0FBR0MsTUFBTTJXLGFBQWEvVyxTQUFTO0FBQ2pFTSxPQUFPeVcsYUFBYTlXLE1BQU1rTyxPQUFPbE0sTUFBTTlCLEdBQUdDLE1BQU07QUFDaERFLE9BQU95VyxhQUFhOVcsTUFBTWtPLE9BQU9uTyxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQzNERSxPQUFPc1gsYUFBYTNYLE1BQU0wUyxVQUFVeFMsR0FBR0MsTUFBTXdYLGFBQWEzWCxNQUFNMFM7QUFDaEVyUyxPQUFPeVcsYUFBYTlXLE1BQU0wUyxVQUFVeFMsR0FBR0MsTUFBTTtBQUM3Q0UsT0FBT3lXLGFBQWE5VyxNQUFNMlMsVUFBVXpTLEdBQUdDLE1BQU07QUFDN0NFLE9BQU95VyxhQUFhOVcsTUFBTThYLFVBQVU1WCxHQUFHQyxNQUFNMlcsYUFBYS9XLFNBQVMsR0FBR0EsU0FBUztBQUMvRU0sT0FBT3lXLGFBQWE5VyxNQUFNNlgsWUFBWTNYLEdBQUdDLE1BQU0yVyxhQUFhL1csU0FBUyxHQUFHQSxTQUFTLEdBQUdBLFNBQVM7QUFDN0ZNLE9BQU95VyxhQUFhOVcsTUFBTTZYLFdBQVcxVCxRQUFRNUMsTUFBTXJCLEdBQUdDLE1BQU07QUFDNURFLE9BQU95VyxhQUFhOVcsTUFBTTZTLFVBQVUzUyxHQUFHQyxNQUFNO0FBQzdDRSxPQUFPeVcsYUFBYTlXLE1BQU04UyxVQUFVNVMsR0FBR0MsTUFBTTJXLGFBQWEvVyxTQUFTLEdBQUdBLFNBQVM7QUFDL0VNLE9BQU9zWCxhQUFhM1gsTUFBTTZTLFVBQVUzUyxHQUFHQyxNQUFNd1gsYUFBYTVYLFNBQVMsR0FBR0EsU0FBUztBQUMvRU0sT0FBT3NYLGFBQWEzWCxNQUFNOFMsVUFBVTVTLEdBQUdDLE1BQU13WCxhQUFhNVgsU0FBUyxHQUFHQSxTQUFTO0FBQy9FTSxPQUFPc1gsYUFBYTNYLE1BQU11VCxRQUFRclQsR0FBR0MsTUFBTXdYLGFBQWE1WCxTQUFTO09BQ2pFTSxPQUFPeVcsYUFBYTlXLE1BQU11VCxRQUFRclQsR0FBR0MsTUFBTTs7QUFHNUNPLEtBQUssNEVBQTRFO0FBQ2hGb1Y7WUFBWXpYLElBQUltVSxTQUNmLENBQUMsT0FDQTVDO0tBQUs7QUFDTHVILFdBQ0NtQjtRQUFRO09BQUs7O0FBQ2JDLFFBQVE7T0FBSzs7O0FBRWRoVSxPQUNDaUc7VUFBVTtBQUNWN0UsT0FBTztBQUNQQyxRQUFRO0FBQ1I0UyxTQUNDN1M7T0FBTztBQUNQQyxRQUFROzs7O0FBR1pzUyxZQUFZRCxVQUFVNUIsT0FDckJsUztTQUNDeUw7S0FBSztBQUNMdUgsV0FDQ21CO1FBQVE7QUFDUkMsUUFBUTtPQUFLOzs7QUFFZGhVLE9BQ0NxQjtRQUFRO0FBQ1IyRixTQUFTO0FBQ1RpTixTQUNDN1M7T0FBTzs7Ozs7QUFHWG1RLFNBQVNtQyxVQUFVeEY7QUFDbkJzRCxTQUFTbUMsVUFBVXpGO0FBRW5CcFMsT0FBT3lWLE9BQU9sRyxLQUFLMVAsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTzBWLE9BQU9uRyxLQUFLMVAsR0FBR0MsTUFBTTtBQUM1QkUsT0FBTyxPQUFPeVYsT0FBTzNSLFFBQVFnVCxVQUFVbUIsUUFBUXBZLEdBQUdDLE1BQU07QUFDeERFLE9BQU8sT0FBTzBWLE9BQU81UixRQUFRZ1QsVUFBVW1CLFFBQVFwWSxHQUFHQyxNQUFNO0FBQ3hERSxPQUFPLE9BQU95VixPQUFPM1IsUUFBUWdULFVBQVVvQixRQUFRclksR0FBR0MsTUFBTTtBQUN4REUsT0FBTyxPQUFPMFYsT0FBTzVSLFFBQVFnVCxVQUFVb0IsUUFBUXJZLEdBQUdDLE1BQU07QUFDeERFLE9BQU95VixPQUFPM1IsUUFBUWdULFVBQVVvQixVQUFVclksR0FBR0MsTUFBTTtBQUNuREUsT0FBTzBWLE9BQU81UixRQUFRZ1QsVUFBVW9CLFVBQVVyWSxHQUFHQyxNQUFNO0FBQ25ERSxPQUFPeVYsT0FBTzNSLFFBQVFJLE1BQU1pRyxVQUFVdEssR0FBR0MsTUFBTTtBQUMvQ0UsT0FBTzBWLE9BQU81UixRQUFRSSxNQUFNaUcsVUFBVXRLLEdBQUdDLE1BQU07QUFDL0NFLE9BQU95VixPQUFPM1IsUUFBUUksTUFBTW9CLE9BQU96RixHQUFHQyxNQUFNO0FBQzVDRSxPQUFPMFYsT0FBTzVSLFFBQVFJLE1BQU1vQixPQUFPekYsR0FBR0MsTUFBTTtBQUM1Q0UsT0FBT3lWLE9BQU8zUixRQUFRSSxNQUFNcUIsUUFBUTFGLEdBQUdDLE1BQU07QUFDN0NFLE9BQU8wVixPQUFPNVIsUUFBUUksTUFBTXFCLFFBQVExRixHQUFHQyxNQUFNO0FBQzdDRSxPQUFPeVYsT0FBTzNSLFFBQVFJLE1BQU1nSCxTQUFTckwsR0FBR0MsTUFBTTtBQUM5Q0UsT0FBTzBWLE9BQU81UixRQUFRSSxNQUFNZ0gsU0FBU3JMLEdBQUdDLE1BQU07QUFDOUNFLE9BQU95VixPQUFPM1IsUUFBUUksTUFBTWlVLFFBQVE3UyxPQUFPekYsR0FBR0MsTUFBTTtBQUNwREUsT0FBTzBWLE9BQU81UixRQUFRSSxNQUFNaVUsUUFBUTdTLE9BQU96RixHQUFHQyxNQUFNO0FBQ3BERSxPQUFPeVYsT0FBTzNSLFFBQVFJLE1BQU1pVSxRQUFRNVMsUUFBUTFGLEdBQUdDLE1BQU07T0FDckRFLE9BQU8wVixPQUFPNVIsUUFBUUksTUFBTWlVLFFBQVE1UyxRQUFRMUYsR0FBR0MsTUFBTTs7QUFHdERPLEtBQUssOEdBQThHO0FBQ2xIb1Y7WUFBWXpYLElBQUltVSxTQUFTLENBQUMsT0FBT2pPO09BQU07QUFBQ0MsU0FBUTs7O0FBQ2hEMFQsWUFBWTdaLElBQUltVSxTQUFTLENBQUMsT0FBT2pPO09BQU07QUFBQ0MsU0FBUTs7O0FBQ2hEc1IsU0FBU21DLFVBQVV4RixNQUFNN0M7S0FBSTs7QUFDN0JtRyxTQUFTa0MsVUFBVXhGO0FBRW5CcFMsT0FBT3lWLE9BQU8zUixTQUFTakMsSUFBSWhDLEdBQUdDLE1BQU04WCxVQUFVOVQ7QUFDOUM5RCxPQUFPeVYsT0FBTzNSLFFBQVFJLE9BQU9yQyxJQUFJaEMsR0FBR0MsTUFBTThYLFVBQVU5VCxRQUFRSTtBQUM1RGxFLE9BQU80WCxVQUFVOVQsUUFBUUksTUFBTWtJLE9BQU92TSxHQUFHQyxNQUFNO0FBRS9DRSxPQUFPMFYsT0FBTzVSLFNBQVNqQyxJQUFJaEMsR0FBR0MsTUFBTStYLFVBQVUvVDtBQUM5QzlELE9BQU8wVixPQUFPNVIsUUFBUUksT0FBT3JDLElBQUloQyxHQUFHQyxNQUFNK1gsVUFBVS9ULFFBQVFJO09BQzVEbEUsT0FBTzZYLFVBQVUvVCxRQUFRSSxNQUFNa0ksT0FBT3ZNLEdBQUdDLE1BQU07O0FBR2hETyxLQUFLLDJEQUEyRDtBQUMvREc7V0FBV3hDLElBQUltVSxTQUFTLENBQUMsUUFBUTtBQUFDNUMsS0FBSTtHQUFZO0FBQ2xEL08sTUFBTXhDLElBQUl3QyxJQUFJLE1BQU07QUFFcEJSLE9BQU9RLElBQUlkLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDckNFLE9BQU9RLElBQUlVLE1BQU1yQixHQUFHQyxNQUFNO0FBQzFCVSxJQUFJeUUsT0FBT2tOO0FBQ1huUyxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPUSxJQUFJVSxNQUFNckIsR0FBR0MsTUFBTTtBQUMxQlUsSUFBSXVULFFBQVE1QjtBQUNablMsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtPQUNyQ0UsT0FBT1EsSUFBSVUsTUFBTXJCLEdBQUdDLE1BQU07O09BRzNCTSxNQUFNLGtCQUFrQjtBQUN2QkMsS0FBSyw0R0FBNEc7QUFDaEgrWDtlQUFlO0FBQ2ZqRyxXQUFXblUsSUFBSW1VLFNBQ2QsQ0FBQyxPQUNBMkU7V0FBVzthQUFhLFVBQUN1QixNQUFEO09BQVNELGVBQWVDLFFBQVE7Ozs7QUFJMURyWSxPQUFPb1ksY0FBY3ZZLEdBQUdDLE1BQU07QUFDOUJxUyxTQUFTQztBQUNUcFMsT0FBT29ZLGNBQWN2WSxHQUFHQyxNQUFNO0FBRTlCcVMsU0FBU0MsTUFBTTtBQUFDaUcsTUFBSzthQUFZOzs7T0FDakNyWSxPQUFPb1ksY0FBY3ZZLEdBQUdDLE1BQU07O0FBRy9CTyxLQUFLLDZFQUE2RTtBQUNqRmlZO1VBQVU7QUFDVm5HLFdBQVduVSxJQUFJbVUsU0FDZCxDQUFDLE9BQ0EyRTtXQUFXO2FBQWEsVUFBQ3VCLE1BQUQ7T0FBU0MsVUFBVTs7OztBQUk3Q3RZLE9BQU9zWSxTQUFTelksR0FBR0MsTUFBTTtBQUN6QnFTLFNBQVNDO0FBQ1RwUyxPQUFPc1ksU0FBU3pZLEdBQUdDLE1BQU07QUFFekJ3SixXQUFXNkksU0FBU0MsTUFBTTtBQUFDaUcsTUFBSzthQUFZOzs7T0FDNUNyWSxPQUFPc1ksU0FBU3pZLEdBQUdDLE1BQU13Sjs7QUFHMUJqSixLQUFLLG9HQUFvRztBQUN4R2lKO1VBQVU7QUFDVjZJLFdBQVduVSxJQUFJbVUsU0FDZCxDQUFDLE9BQ0EyRTtXQUNDO1NBQVMsVUFBQ3VCLE1BQUQ7T0FBU3hKLFFBQVEwSixRQUFRRixLQUFLcFU7O0FBQ3ZDLFVBQVUsVUFBQ29VLE1BQUQ7T0FBU3hKLFFBQVEySixTQUFTSCxLQUFLcFU7O0FBQ3pDLFNBQVMsVUFBQ29VLE1BQUQ7T0FBU3hKLFFBQVE0SixRQUFRSixLQUFLcFU7OztBQUN4QzRTLFVBQ0M7U0FBUztBQUNULFNBQVM7OztBQUdaN1csT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU07QUFDOUJxUyxTQUFTQztBQUNUcFMsT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU07QUFBQ3lZLE9BQU07QUFBbUJFLE9BQU07O0FBRTlEblAsV0FBVzZJLFNBQVNDLE1BQU07QUFBQ2lHLE1BQUs7U0FBUTs7O09BQ3hDclksT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU07QUFBQ3lZLE9BQU07QUFBbUJFLE9BQU07OztBQUcvRHBZLEtBQUssNkJBQTZCO0FBQ2pDaUo7VUFBVTtBQUNWNkksV0FBV25VLElBQUltVSxTQUNkLENBQUMsT0FDQTJFO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTeEosUUFBUTBKLFFBQVFGOztBQUNsQyxVQUFVLFVBQUNBLE1BQUQ7T0FBU3hKLFFBQVEySixTQUFTSDs7QUFDcEMsU0FBUyxVQUFDQSxNQUFEO09BQVN4SixRQUFRNEosUUFBUUo7O0FBQ2xDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTeEosUUFBUTZKLFNBQVNMOztBQUNwQyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3hKLFFBQVE4SixRQUFRTjs7QUFDbEMsU0FBUyxVQUFDQSxNQUFEO09BQVN4SixRQUFRK0osUUFBUVA7OztBQUNuQ3hCLFVBQ0M7U0FBUyxDQUFDLE9BQU87QUFDakIsU0FBUztBQUFDL1YsR0FBRTtBQUFHa0wsR0FBRTs7QUFDakIsU0FBUzs7O0FBS1oxQyxXQUFXNkksU0FBU0MsTUFBTWlHO01BQ3pCO1VBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7OztBQUVWclksT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQ3ZCeVk7T0FBTyxDQUFDLE9BQU87QUFDZkMsUUFBUTtBQUNSQyxPQUFPO0FBQUMzWCxHQUFFO0FBQUdrTCxHQUFFOztBQUNmME0sUUFBUTtBQUNSQyxPQUFPO0FBQ1BDLE9BQU87O09BRVI1WSxPQUFPK1MsT0FBT0MsS0FBS25FLFNBQVNqUCxRQUFRQyxHQUFHQyxNQUFNOztBQUc5Q08sS0FBSywrRUFBK0U7QUFDbkZpSjtVQUFVO0FBQ1Y2SSxXQUFXblUsSUFBSW1VLFNBQ2QsQ0FBQyxPQUNBMkU7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN4SixRQUFRMEosUUFBUUY7O0FBQ2xDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTeEosUUFBUTJKLFNBQVNIOztBQUNwQyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3hKLFFBQVE0SixRQUFRSjs7OztBQUtyQy9PLFdBQVc2SSxTQUFTQyxNQUFNaUc7TUFDekI7U0FBUztBQUNULFVBQVU7QUFDVixTQUFTO0FBQ1QsVUFBVTs7O0FBRVhyWSxPQUFPNk8sU0FBU2hQLEdBQUdrUCxLQUFLalAsTUFDdkI7U0FBUztBQUNULFVBQVU7QUFDVixTQUFTOztPQUVWRSxPQUFPK1MsT0FBT0MsS0FBS25FLFNBQVNqUCxRQUFRQyxHQUFHQyxNQUFNOztBQUc5Q08sS0FBSyx5RUFBeUU7QUFDN0VpSjtVQUFVbko7UUFBTztBQUFJME4sUUFBTztBQUFJQyxRQUFPO0FBQUlvRixRQUFPOztBQUNsRGYsV0FBV25VLElBQUltVSxTQUNkLENBQUMsT0FDQTJFO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTeEosUUFBUTFPLE9BQU9vWSxRQUFRRjs7QUFDekMsVUFBVSxVQUFDQSxNQUFEO09BQVN4SixRQUFRMU8sT0FBT3FZLFNBQVNIOztBQUMzQyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3hKLFFBQVExTyxPQUFPc1ksUUFBUUo7OztHQUUxQyxDQUFDLE9BQ0F2QjtXQUNDO1NBQVMsVUFBQ3VCLE1BQUQ7T0FBU3hKLFFBQVFoQixPQUFPMEssUUFBUUY7O0FBQ3pDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTeEosUUFBUWhCLE9BQU8ySyxTQUFTSDs7QUFDM0MsU0FBUyxVQUFDQSxNQUFEO09BQVN4SixRQUFRaEIsT0FBTzRLLFFBQVFKOzs7SUFFM0MsQ0FBQyxPQUFPLE1BQ1AsQ0FBQyxPQUNBdkI7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN4SixRQUFRZixPQUFPeUssUUFBUUY7O0FBQ3pDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTeEosUUFBUWYsT0FBTzRLLFNBQVNMOzs7SUFFN0MsQ0FBQyxPQUNBdkI7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN4SixRQUFRcUUsT0FBT3FGLFFBQVFGOztBQUN6QyxTQUFTLFVBQUNBLE1BQUQ7T0FBU3hKLFFBQVFxRSxPQUFPMEYsUUFBUVA7Ozs7QUFPOUMvTyxXQUFXNkksU0FBU0MsTUFBTWlHO01BQ3pCO1NBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUztBQUNULFVBQVU7OztBQUVYclksT0FBTzZPLFFBQVExTyxRQUFRTixHQUFHa1AsS0FBS2pQLE1BQzlCO1NBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUzs7QUFFVkUsT0FBTzZPLFFBQVFoQixRQUFRaE8sR0FBR2tQLEtBQUtqUCxNQUM5QjtTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7O0FBRVZFLE9BQU82TyxRQUFRZixRQUFRak8sR0FBR2tQLEtBQUtqUCxNQUM5QjtTQUFTO0FBQ1QsVUFBVTs7T0FFWEUsT0FBTzZPLFFBQVFxRSxRQUFRclQsR0FBR2tQLEtBQUtqUCxNQUM5QjtTQUFTOzs7QUFHWE8sS0FBSyxrREFBa0Q7QUFDdERpSjtVQUFVbko7UUFBTztBQUFJUixPQUFNOztBQUMzQndTLFdBQVduVSxJQUFJbVUsU0FDZCxDQUFDLE9BQ0EyRTtXQUNDO1NBQVMsVUFBQ3VCLE1BQUQ7T0FBU3hKLFFBQVExTyxPQUFPb1ksUUFBUUY7O0FBQ3pDLFVBQVUsVUFBQ0EsTUFBRDtPQUFTeEosUUFBUTFPLE9BQU9xWSxTQUFTSDs7QUFDM0MsU0FBUyxVQUFDQSxNQUFEO09BQVN4SixRQUFRMU8sT0FBT3NZLFFBQVFKOzs7QUFDMUN4QixVQUNDO1VBQVU7QUFDVixVQUFVOztHQUVYLENBQUMsT0FDQUM7V0FDQztTQUFTLFVBQUN1QixNQUFEO09BQVN4SixRQUFRbFAsTUFBTTRZLFFBQVFGOztBQUN4QyxVQUFVLFVBQUNBLE1BQUQ7T0FBU3hKLFFBQVFsUCxNQUFNNlksU0FBU0g7O0FBQzFDLFNBQVMsVUFBQ0EsTUFBRDtPQUFTeEosUUFBUWxQLE1BQU04WSxRQUFRSjs7QUFDeEMsVUFBVSxVQUFDQSxNQUFEO09BQVN4SixRQUFRbFAsTUFBTStZLFNBQVNMOzs7QUFDM0N4QixVQUNDO1NBQVM7OztBQUtidk4sV0FBVzZJLFNBQVNDLE1BQU1pRztNQUN6QjtTQUFTOzs7QUFFVnJZLE9BQU82TyxRQUFRMU8sUUFBUU4sR0FBR2tQLEtBQUtqUCxNQUM5QjtVQUFVO0FBQ1YsU0FBUzs7T0FFVkUsT0FBTzZPLFFBQVFsUCxPQUFPRSxHQUFHa1AsS0FBS2pQLE1BQzdCO1NBQVM7QUFDVCxTQUFTOzs7QUFHWE8sS0FBSyx3Q0FBd0M7QUFDNUM0SztRQUFROUs7UUFBTztBQUFHUixPQUFNO0FBQUdrWixZQUFXOztBQUN0QzFHLFdBQVduVSxJQUFJbVUsU0FDZCxDQUFDLE9BQ0E1QztLQUFLO0FBQ0x1SCxXQUNDO1NBQVMsVUFBQ3VCLE1BQUQ7T0FBU3BOLE1BQU05Szs7O0FBQ3pCMFcsVUFDQztTQUFTOztHQUVWLENBQUMsT0FDQXRIO0tBQUs7QUFDTHVILFdBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTcE4sTUFBTTlLOztBQUN4QixVQUFVLFVBQUNrWSxNQUFEO09BQVNwTixNQUFNdEw7OztBQUMxQmtYLFVBQ0M7VUFBVTs7R0FFWCxDQUFDLE9BQ0F0SDtLQUFLO0FBQ0x1SCxXQUNDO1VBQVUsVUFBQ3VCLE1BQUQ7T0FBU3BOLE1BQU00Tjs7O0FBQzFCaEMsVUFDQztVQUFVOzs7QUFNZjFFLFNBQVNDLE1BQU1pRztNQUFLO1NBQVE7OztBQUM1QnJZLE9BQU9pTCxPQUFPcEwsR0FBRzZLLElBQUl2SztRQUFPO0FBQUdSLE9BQU07QUFBR2taLFlBQVc7O0FBRW5EMUcsU0FBU0M7T0FDVHBTLE9BQU9pTCxPQUFPcEwsR0FBRzZLLElBQUl2SztRQUFPO0FBQUdSLE9BQU07QUFBR2taLFlBQVc7OztBQUdwRHhZLEtBQUssMkVBQTJFO0FBQy9FNEs7UUFBUTtBQUNSa0gsV0FBV25VLElBQUltVSxTQUNkLENBQUMsT0FBTyxNQUNQLENBQUMsV0FBVyxNQUNYLENBQUMsT0FDQTJFO1dBQ0M7U0FBUyxVQUFDdUIsTUFBRDtPQUFTcE47OztBQUNuQjRMLFVBQ0M7U0FBUzs7O0FBTWQxRSxTQUFTQyxNQUFNaUc7TUFBSztTQUFROzs7QUFDNUJyWSxPQUFPaUwsT0FBT3BMLEdBQUdDLE1BQU07QUFFdkJxUyxTQUFTQztPQUNUcFMsT0FBT2lMLE9BQU9wTCxHQUFHQyxNQUFNOztBQUd4Qk8sS0FBSywrQ0FBK0M7QUFDbkQ0SztVQUFVO0FBQUlBLFFBQVE7QUFBQ25LLEdBQUU7QUFBR2tMLEdBQUU7QUFBR0MsR0FBRTtBQUFHNk0sR0FBRTtBQUFHNVEsR0FBRTtBQUFHNlEsR0FBRTs7QUFDbEQ1RyxXQUFXblUsSUFBSW1VLFNBQ2QsQ0FBQyxPQUNBMkU7V0FDQztLQUFLLFVBQUN1QixNQUFEO0FBQVN4SixRQUFRL04sSUFBSXVYO09BQU1wTixNQUFNbks7O0FBQ3RDLEtBQUssVUFBQ3VYLE1BQUQ7QUFBU3hKLFFBQVE3QyxJQUFJcU07T0FBTXBOLE1BQU1lOztBQUN0QyxLQUFLLFVBQUNxTSxNQUFEO0FBQVN4SixRQUFRNUMsSUFBSW9NO09BQU1wTixNQUFNZ0I7O0FBQ3RDLEtBQUssVUFBQ29NLE1BQUQ7QUFBU3hKLFFBQVFpSyxJQUFJVDtPQUFNcE4sTUFBTTZOOztBQUN0QyxLQUFLLFVBQUNULE1BQUQ7QUFBU3hKLFFBQVEzRyxJQUFJbVE7T0FBTXBOLE1BQU0vQzs7QUFDdEMsS0FBSyxVQUFDbVEsTUFBRDtBQUFTeEosUUFBUWtLLElBQUlWO09BQU1wTixNQUFNOE47OztBQUN2Q2xDLFVBQ0M7S0FBSztBQUNMLEtBQUs7QUFDTCxLQUFLOzs7QUFLUnZOLFdBQVc2SSxTQUFTQyxNQUFNaUc7TUFBTTtBQUFDck0sR0FBRTtBQUFHOE0sR0FBRTtBQUFHNVEsR0FBRTtBQUFHNlEsR0FBRTs7O0FBQ2xEL1ksT0FBTzZPLFNBQVNoUCxHQUFHa1AsS0FBS2pQLE1BQU07QUFBQ2dCLEdBQUU7QUFBR2tMLEdBQUU7QUFBR0MsR0FBRTtBQUFHNk0sR0FBRTtBQUFHNVEsR0FBRTtBQUFHNlEsR0FBRTs7QUFDMUQvWSxPQUFPaUwsT0FBT3BMLEdBQUdrUCxLQUFLalAsTUFBTTtBQUFDZ0IsR0FBRTtBQUFHa0wsR0FBRTtBQUFHQyxHQUFFO0FBQUc2TSxHQUFFO0FBQUc1USxHQUFFO0FBQUc2USxHQUFFOztBQUV4RHpQLFNBQVMwUCxVQUFVbFk7R0FBRTtBQUFJa0wsR0FBRTtBQUFJOE0sR0FBRTtBQUFJNVEsR0FBRTs7QUFDdkNsSSxPQUFPNk8sU0FBU2hQLEdBQUdrUCxLQUFLalAsTUFBTTtBQUFDZ0IsR0FBRTtBQUFJa0wsR0FBRTtBQUFJQyxHQUFFO0FBQUc2TSxHQUFFO0FBQUk1USxHQUFFO0FBQUk2USxHQUFFOztPQUM5RC9ZLE9BQU9pTCxPQUFPcEwsR0FBR2tQLEtBQUtqUCxNQUFNO0FBQUNnQixHQUFFO0FBQUdrTCxHQUFFO0FBQUdDLEdBQUU7QUFBRzZNLEdBQUU7QUFBRzVRLEdBQUU7QUFBRzZRLEdBQUU7OztBQUd6RDFZLEtBQUssb0ZBQW9GO0FBQ3hGNEs7UUFBUTtBQUNSa0gsV0FBV25VLElBQUltVSxTQUNkLENBQUMsT0FDQTVDO0tBQUs7QUFDTHVILFdBQVdtQztPQUFPO0FBQUtDOztlQUFhOztPQUFHak8sTUFBTSxLQUFDc0U7OztHQUU5QyxDQUFDLE9BQ0FBO0tBQUs7QUFDTDhJLE1BQU1FO09BQU87O0FBQ2J6QixXQUFXbUM7T0FBTztBQUFLQzs7ZUFBYTs7T0FBR2pPLE1BQU0sS0FBQ3NFOzs7SUFHL0MsQ0FBQyxPQUNBQTtLQUFLO0dBQ0wsQ0FBQyxPQUNBQTtLQUFLO0dBRUwsQ0FBQyxPQUNBQTtLQUFLO0FBQ0x1SCxXQUFXbUM7T0FBTztBQUFLQzs7ZUFBYTs7T0FBR2pPLE1BQU0sS0FBQ3NFOzs7O0FBT25EdlAsT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTtBQUNyQnlILFNBQVNDO0FBQ1RwUyxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJOUQ7TUFBSztBQUFHQyxNQUFLO0FBQUdzUyxNQUFLOztBQUUxQ2hILFNBQVNDO0FBQ1RwUyxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJOUQ7TUFBSztBQUFHQyxNQUFLO0FBQUdzUyxNQUFLOztBQUUxQ2hILFNBQVN4UyxNQUFNa0gsS0FBS3VMLE1BQU1pRztNQUFLRztRQUFPOzs7QUFDdEN4WSxPQUFPaUwsT0FBT3BMLEdBQUc2SyxJQUFJOUQ7TUFBSztBQUFHQyxNQUFLO0FBQUdzUyxNQUFLOztBQUUxQ2hILFNBQVN4UyxNQUFNOE4sS0FBSzJFO0FBQ3BCcFMsT0FBT2lMLE9BQU9wTCxHQUFHNkssSUFBSTlEO01BQUs7QUFBR0MsTUFBSztBQUFHc1MsTUFBSzs7QUFFMUNoSCxTQUFTeFMsTUFBTThOLEtBQUsyRTtPQUNwQnBTLE9BQU9pTCxPQUFPcEwsR0FBRzZLLElBQUk5RDtNQUFLO0FBQUdDLE1BQUs7QUFBR3NTLE1BQUs7OztBQUczQzlZLEtBQUssbUZBQW1GO0FBQ3ZGK1k7U0FBU3hTO01BQUs7QUFBSUMsTUFBSzs7QUFDdkJzTCxXQUFXblUsSUFBSW1VLFNBQ2QsQ0FBQyxPQUNBNUM7S0FBSztBQUNMdUgsV0FDQ2pVO01BQU0sVUFBQ0EsTUFBRDtPQUFTeVMsT0FBTyxLQUFDL0YsS0FBSzFNLE9BQU9BOztBQUNuQ2pCLE1BQU0sVUFBQ0EsTUFBRDtPQUFTMFQsT0FBTyxLQUFDL0YsS0FBSzNOLE9BQU9BOztBQUNuQ3FYLE9BQU87T0FBSzNELE9BQU8sS0FBQy9GLEtBQUswSixRQUFRclIsVUFBVTs7O0dBRTVDLENBQUMsT0FDQTJIO0tBQUs7R0FFTCxDQUFDLE9BQ0FBO0tBQUs7QUFDTHNILFVBQVUwQjtPQUFPOztBQUNqQnpCLFdBQ0NqVTtNQUFNLFVBQUNBLE1BQUQ7T0FBU3lTLE9BQU8sS0FBQy9GLEtBQUsxTSxPQUFPQTs7QUFDbkNqQixNQUFNLFVBQUNBLE1BQUQ7T0FBUzBULE9BQU8sS0FBQy9GLEtBQUszTixPQUFPQTs7QUFDbkNxWCxPQUFPO09BQUszRCxPQUFPLEtBQUMvRixLQUFLMEosUUFBUXJSLFVBQVU7Ozs7QUFLaER3UixXQUNDdlc7TUFBTTtBQUNOakIsTUFBTTtBQUNOcVgsT0FBTztBQUFDcFcsTUFBSztBQUFPakIsTUFBSztBQUFPVSxPQUFNO0FBQU8rVyxNQUFLOzs7QUFHbkRyWixPQUFPc1YsUUFBUXpWLEdBQUc2SyxJQUFJOUQ7TUFBSztBQUFJQyxNQUFLOztBQUVwQ3NMLFNBQVNDLE1BQU1pRztNQUFLO0FBQUN4VixNQUFLO0FBQU9qQixNQUFLO0FBQU9VLE9BQU07QUFBTytXLE1BQUs7OztBQUMvRHJaLE9BQU9zVixRQUFRelYsR0FBRzZLLElBQUk7QUFBQzlELE1BQUt3UztBQUFVdlMsTUFBS3VTOztBQUUzQyxPQUFPOUQsT0FBTzFPO0FBQ2RDO01BQU07O0FBQ05zTCxTQUFTeFMsTUFBTWtILEtBQUt1TCxNQUFNaUc7TUFBSztBQUFDeFYsTUFBSztBQUFPakIsTUFBSztBQUFPVSxPQUFNO0FBQU8rVyxNQUFLOzs7T0FDMUVyWixPQUFPc1YsUUFBUXpWLEdBQUc2SyxJQUFJO0FBQUM3RCxNQUFLdVM7OztBQUc3Qi9ZLEtBQUssNENBQTRDO0FBQ2hEK1g7ZUFBZTtBQUNmakcsV0FBV25VLElBQUltVSxTQUNkLENBQUMsT0FDQTJFO1dBQVc7YUFBYSxVQUFDdUIsTUFBRDtPQUFTRCxlQUFlQyxRQUFROzs7O0FBRzFENUIsZUFBZXRFLFNBQVM2RCxPQUFPbFM7U0FBUXVVO01BQUs7QUFBQyxhQUFZOzs7O0FBRXpEbEcsU0FBU0M7QUFDVHBTLE9BQU9vWSxjQUFjdlksR0FBR0MsTUFBTTtBQUM5QjJXLGFBQWFyRTtBQUNicFMsT0FBT29ZLGNBQWN2WSxHQUFHQyxNQUFNO0FBRTlCcVMsU0FBU0MsTUFBTXRPO1NBQVF1VTtNQUFLO0FBQUMsYUFBWTs7OztPQUN6Q3JZLE9BQU9vWSxjQUFjdlksR0FBR0MsTUFBTTs7QUFHL0JPLEtBQUsscUZBQXFGO0FBQ3pGK1g7ZUFBZTdVO0tBQUk7QUFBTUMsS0FBSTs7QUFDN0IyTyxXQUFXblUsSUFBSW1VLFNBQ2QsQ0FBQyxPQUFPLE1BRVAsQ0FBQyxRQUNBa0c7TUFBTTlVO0tBQUs7O0FBQ1h1VCxXQUNDO09BQU8sVUFBQ3VCLE1BQUQ7T0FBU0QsYUFBYTdVLE1BQU04VSxRQUFROztBQUMzQyxPQUFPLFVBQUNBLE1BQUQ7T0FBU0QsYUFBYTVVLE1BQU02VSxRQUFROzs7O0FBSS9DNUIsZUFBZXRFLFNBQVM2RCxPQUFPbFM7U0FBUXVVO01BQUs7QUFBQzdVLEtBQUk7Ozs7QUFFakQyTyxTQUFTQztBQUNUcFMsT0FBT29ZLGNBQWN2WSxHQUFHNkssSUFBSW5IO0tBQUk7QUFBS0MsS0FBSTs7QUFDekM0VSxlQUFlN1U7S0FBSTtBQUFNQyxLQUFJOztBQUU3QmlULGFBQWFyRTtBQUNicFMsT0FBT29ZLGNBQWN2WSxHQUFHNkssSUFBSW5IO0tBQUk7QUFBS0MsS0FBSTs7QUFDekM0VSxlQUFlN1U7S0FBSTtBQUFNQyxLQUFJOztBQUU3QjJPLFNBQVNDLE1BQU10TztTQUFRdVU7TUFBSztBQUFDN1UsS0FBSTs7OztBQUNqQ3hELE9BQU9vWSxjQUFjdlksR0FBRzZLLElBQUluSDtLQUFJO0FBQUtDLEtBQUk7O0FBQ3pDNFUsZUFBZTdVO0tBQUk7QUFBTUMsS0FBSTs7QUFFN0IyTyxTQUFTQyxNQUFNdE87U0FBUXVVO01BQUs7QUFBQzlVLEtBQUk7Ozs7T0FDakN2RCxPQUFPb1ksY0FBY3ZZLEdBQUc2SyxJQUFJbkg7S0FBSTtBQUFLQyxLQUFJOzs7QUFHMUNuRCxLQUFLLDJFQUEyRTtBQUMvRThPO2VBQWVoUDtRQUFPO0FBQU1SLE9BQU07O0FBQ2xDMlosWUFBWXJiLElBQUlrVSxTQUNmLENBQUMsT0FDQTJFO1dBQVd2VDtLQUFLLFVBQUM4VSxNQUFEO09BQVNELGFBQWFqWSxTQUFTa1k7OztHQUUvQyxDQUFDLFFBQ0F2QjtXQUFXdlQ7S0FBSyxVQUFDOFUsTUFBRDtPQUFTRCxhQUFhelksUUFBUTBZOzs7O0FBSWpEa0IsWUFBWUQsVUFBVXRELE9BQU93RDtvQkFBbUI7O0FBRWhEeFosT0FBT29ZLGNBQWN2WSxHQUFHNkssSUFBSXZLO1FBQU87QUFBTVIsT0FBTTs7QUFFL0N3UCxNQUFNbUssVUFBVWxILE1BQU1pRztNQUFLO0FBQUM5VSxLQUFJOzs7QUFDaEN2RCxPQUFPb1ksY0FBY3ZZLEdBQUc2SyxJQUFJdks7UUFBTztBQUFLUixPQUFNOztBQUU5Q3lZLGVBQWVqWTtRQUFPO0FBQU1SLE9BQU07O0FBQ2xDeVAsTUFBTW1LLFVBQVVuSCxNQUFNaUc7TUFBSztBQUFDOVUsS0FBSTs7O0FBQ2hDdkQsT0FBT29ZLGNBQWN2WSxHQUFHNkssSUFBSXZLO1FBQU87QUFBS1IsT0FBTTs7QUFFOUN5WSxlQUFlalk7UUFBTztBQUFNUixPQUFNOztBQUNsQ3dQLElBQUk2SixVQUFVO0FBQUN6VixLQUFJOztBQUNuQnZELE9BQU9vWSxjQUFjdlksR0FBRzZLLElBQUl2SztRQUFPO0FBQUtSLE9BQU07O0FBRTlDeVksZUFBZWpZO1FBQU87QUFBTVIsT0FBTTs7QUFDbEN5UCxJQUFJNEosVUFBVTtBQUFDelYsS0FBSTs7QUFDbkJ2RCxPQUFPb1ksY0FBY3ZZLEdBQUc2SyxJQUFJdks7UUFBTztBQUFLUixPQUFNOztBQUU5Q3lQLElBQUk4QyxVQUFVOEcsVUFBVTtBQUFDelYsS0FBSTs7T0FDN0J2RCxPQUFPb1ksY0FBY3ZZLEdBQUc2SyxJQUFJdks7UUFBTztBQUFLUixPQUFNOzs7QUFHL0NVLEtBQUssNkRBQTZEO0FBQ2pFeVc7VUFBVTtBQUNWQSxZQUNDbUM7T0FBTztPQUFLUSxRQUFRM0ssS0FBSyxLQUFDUzs7QUFDMUJoTSxLQUFLO09BQUtrVyxRQUFRM0ssS0FBSyxLQUFDUzs7O0FBRXpCNEMsV0FBV2xVLElBQUlrVSxTQUNkLENBQUMsT0FDQTtBQUFDO0FBQVcvUyxJQUFHO0dBQ2YsQ0FBQyxPQUNBO0FBQUMsQUF0MkIrRTBYO0FBczJCcEUxWCxJQUFHO0dBQ2YsQ0FBQyxPQUNBO0FBQUMsQUFyMkJOMFg7QUFxMkJpQjFYLElBQUc7S0FHakIsQ0FBQyxPQUNBO0FBQUMsQUFyMkJMMFg7QUFxMkJnQjFYLElBQUc7O0FBSWxCWSxPQUFPeVosU0FBUzVaLEdBQUc2SyxJQUFJO0FBQ3ZCekssS0FBS2tTLFNBQVNDO0FBQ2RwUyxPQUFPeVosU0FBUzVaLEdBQUc2SyxJQUFJLENBQUMsVUFBVSxVQUFVLFVBQVU7QUFFdEQrTyxRQUFRN1osU0FBUztBQUNqQkssR0FBRytZLFVBQVV6VjtLQUFJOztPQUNqQnZELE9BQU95WixTQUFTNVosR0FBRzZLLElBQUksQ0FBQyxVQUFVLFVBQVUsVUFBVTs7T0FHdkRySyxLQUFLLDRGQUE0RjtBQUNoR3lXO1VBQVU7QUFDVkEsWUFBYXZUO0tBQUs7T0FBS2tXLFFBQVEzSyxLQUFLLEtBQUNTOzs7QUFFckM0QyxXQUFXbFUsSUFBSWtVLFNBQ2QsQ0FBQyxPQUNBO0FBQUM7QUFBVy9TLElBQUc7QUFBVXNhLHFCQUFvQjtHQUM3QyxDQUFDLE9BQ0E7QUFBQyxBQWwyQk41QztBQWsyQmlCMVgsSUFBRztHQUNmLENBQUMsT0FDQTtBQUFDLEFBbjJCTjBYO0FBbTJCaUIxWCxJQUFHO0FBQVVzYSxxQkFBb0I7S0FHL0MsQ0FBQyxPQUNBO0FBQUM7QUFBV3RhLElBQUc7O0FBSWxCWSxPQUFPeVosU0FBUzVaLEdBQUc2SyxJQUFJO0FBQ3ZCekssS0FBS2tTLFNBQVNDLE1BQU1pRztNQUFLOVU7S0FBSTs7O0FBQzdCdkQsT0FBT3laLFNBQVM1WixHQUFHNkssSUFBSSxDQUFDLFVBQVUsVUFBVSxVQUFVO0FBRXREK08sUUFBUTdaLFNBQVM7QUFDakJLLEdBQUcrWSxVQUFVelY7S0FBSTs7QUFDakJ2RCxPQUFPeVosU0FBUzVaLEdBQUc2SyxJQUFJLENBQUMsVUFBVTtBQUVsQytPLFFBQVE3WixTQUFTO0FBQ2pCSyxHQUFHK1ksVUFBVXpWO0tBQUk7O09BQ2pCdkQsT0FBT3laLFNBQVM1WixHQUFHNkssSUFBSSxDQUFDLFVBQVU7Ozs7T0FJckN0SyxNQUFNLFFBQVE7QUFDYkMsS0FBSyx1QkFBdUI7QUFDM0JMLE9BQU9oQyxJQUFJMmIsV0FBVzNiLElBQUltVSxTQUFTLENBQUMsVUFBU3RTLEdBQUdZLEdBQUd1RTtBQUNuRGhGLE9BQU9oQyxJQUFJMmIsV0FBVzNiLElBQUl3QyxRQUFPWCxHQUFHWSxHQUFHd0g7QUFDdkNqSSxPQUFPaEMsSUFBSTJiLFdBQVczYixJQUFJd0MsTUFBTSxLQUFJWCxHQUFHWSxHQUFHd0g7QUFDMUNqSSxPQUFPaEMsSUFBSTJiLFdBQVcsS0FBSTlaLEdBQUdZLEdBQUd3SDtBQUNoQ2pJLE9BQU9oQyxJQUFJMmIsV0FBVyxXQUFVOVosR0FBR1ksR0FBR3dIO0FBQ3RDakksT0FBT2hDLElBQUkyYixXQUFXLElBQUc5WixHQUFHWSxHQUFHd0g7QUFDL0JqSSxPQUFPaEMsSUFBSTJiLFdBQVcsUUFBTzlaLEdBQUdZLEdBQUd3SDtPQUNuQ2pJLE9BQU9oQyxJQUFJMmIsV0FBVyxPQUFNOVosR0FBR1ksR0FBR3dIOztBQUduQzVILEtBQUssc0JBQXNCO0FBQzFCTCxPQUFPaEMsSUFBSTRiLFVBQVU1YixJQUFJbVUsU0FBUyxDQUFDLFVBQVN0UyxHQUFHWSxHQUFHd0g7QUFDbERqSSxPQUFPaEMsSUFBSTRiLFVBQVU1YixJQUFJd0MsUUFBT1gsR0FBR1ksR0FBR3VFO0FBQ3RDaEYsT0FBT2hDLElBQUk0YixVQUFVNWIsSUFBSWtELFNBQVFyQixHQUFHWSxHQUFHdUU7QUFDdkNoRixPQUFPaEMsSUFBSTRiLFVBQVU1YixJQUFJd0MsTUFBTSxLQUFJWCxHQUFHWSxHQUFHd0g7QUFDekNqSSxPQUFPaEMsSUFBSTRiLFVBQVUsS0FBSS9aLEdBQUdZLEdBQUd3SDtBQUMvQmpJLE9BQU9oQyxJQUFJNGIsVUFBVSxXQUFVL1osR0FBR1ksR0FBR3dIO0FBQ3JDakksT0FBT2hDLElBQUk0YixVQUFVLElBQUcvWixHQUFHWSxHQUFHd0g7QUFDOUJqSSxPQUFPaEMsSUFBSTRiLFVBQVUsUUFBTy9aLEdBQUdZLEdBQUd3SDtPQUNsQ2pJLE9BQU9oQyxJQUFJNGIsVUFBVSxPQUFNL1osR0FBR1ksR0FBR3dIOztBQUdsQzVILEtBQUssaUJBQWlCO0FBQ3JCTCxPQUFPaEMsSUFBSTZiLEtBQUs3YixJQUFJbVUsU0FBUyxDQUFDLFVBQVN0UyxHQUFHWSxHQUFHd0g7QUFDN0NqSSxPQUFPaEMsSUFBSTZiLEtBQUs3YixJQUFJd0MsUUFBT1gsR0FBR1ksR0FBR3dIO0FBQ2pDakksT0FBT2hDLElBQUk2YixLQUFLN2IsSUFBSWtELFNBQVFyQixHQUFHWSxHQUFHd0g7QUFDbENqSSxPQUFPaEMsSUFBSTZiLEtBQUs3YixJQUFJd0MsTUFBTSxLQUFJWCxHQUFHWSxHQUFHdUU7QUFDcENoRixPQUFPaEMsSUFBSTZiLEtBQUs3YixJQUFJa0QsT0FBTyxLQUFJckIsR0FBR1ksR0FBR3dIO0FBQ3JDakksT0FBT2hDLElBQUk2YixLQUFLLEtBQUloYSxHQUFHWSxHQUFHd0g7QUFDMUJqSSxPQUFPaEMsSUFBSTZiLEtBQUssV0FBVWhhLEdBQUdZLEdBQUd3SDtBQUNoQ2pJLE9BQU9oQyxJQUFJNmIsS0FBSyxJQUFHaGEsR0FBR1ksR0FBR3dIO0FBQ3pCakksT0FBT2hDLElBQUk2YixLQUFLLFFBQU9oYSxHQUFHWSxHQUFHd0g7T0FDN0JqSSxPQUFPaEMsSUFBSTZiLEtBQUssT0FBTWhhLEdBQUdZLEdBQUd3SDs7QUFHN0I1SCxLQUFLLG1CQUFtQjtBQUN2QmtCO1VBQVV2RCxJQUNULENBQUMsV0FBVTtBQUNWb0IsSUFBSTtBQUNKK0MsV0FBVztBQUNYK0IsT0FDQztZQUFZO0FBQ1osV0FBVztBQUNYLFlBQVk7T0FBSzs7QUFDakI4RixRQUNDVDtVQUFVO0FBQ1ZVLFVBQ0NWO1VBQVU7Ozs7R0FFYixDQUFDLE9BQU87QUFBQ25LLElBQUc7QUFBVThFLE9BQU1pRztVQUFTOztHQUFhLHFCQUNsRCxxQkFDQSxDQUFDLFFBQVE7QUFBQy9LLElBQUc7QUFBVW1RLEtBQUk7QUFBZXJMLE9BQU1pRztVQUFTOztHQUN4RCxvQkFDQSxDQUFDLFFBQVE7QUFBQ2pKLE1BQUs7SUFDZixDQUFDLEtBQUs7QUFBQzZCLEtBQUk7TUFHWnFCLFNBQVN0RjtBQUNYWixPQUFPNGIsY0FBY0MsS0FBS0MsVUFBVXpZLFNBQVMsTUFBTTtBQUNuRDBZLGNBQWNqYyxJQUFJK2IsS0FBS0csTUFBTUosY0FBYzFWLFNBQVN0RjtBQUVwRGtCLE9BQU9pYSxZQUFZdFksTUFBTTlCLEdBQUdDLE1BQU15QixRQUFRSTtBQUMxQzNCLE9BQU9pYSxZQUFZMUssS0FBSzFQLEdBQUdDLE1BQU15QixRQUFRZ087QUFDekN2UCxPQUFPaWEsWUFBWWhhLEdBQUdiLElBQUlTLEdBQUdDLE1BQU15QixRQUFRdEIsR0FBR2I7QUFDOUNZLE9BQU9pYSxZQUFZaGEsR0FBR2tDLFdBQVd0QyxHQUFHQyxNQUFNeUIsUUFBUXRCLEdBQUdrQztBQUNyRG5DLE9BQU9pYSxZQUFZL1YsTUFBTSxhQUFZckUsR0FBR0MsTUFBTXlCLFFBQVEyQyxNQUFNO0FBQzVEbEUsT0FBT2lhLFlBQVkvVixNQUFNLFlBQVdyRSxHQUFHQyxNQUFNeUIsUUFBUTJDLE1BQU07QUFDM0RsRSxPQUFPaWEsWUFBWS9WLE1BQU0sYUFBWXJDLElBQUloQyxHQUFHQyxNQUFNeUIsUUFBUTJDLE1BQU07QUFFaEUzQyxRQUFRMkMsTUFBTSxZQUFZO0FBQzFCM0MsUUFBUW9KLE1BQU0sU0FBUztBQUN2QnNQLFlBQVl0UCxNQUFNLFNBQVM7QUFDM0IzSyxPQUFPaWEsWUFBWS9WLE1BQU0sYUFBWXJFLEdBQUdDLE1BQU15QixRQUFRMkMsTUFBTTtBQUU1RDNDLFFBQVFvSixNQUFNLFdBQVc7QUFDekJzUCxZQUFZdFAsTUFBTSxXQUFXO0FBQzdCM0ssT0FBT2lhLFlBQVkvVixNQUFNLGFBQVlyRSxHQUFHQyxNQUFNeUIsUUFBUTJDLE1BQU07QUFFNURsRSxPQUFPaWEsWUFBWXZhLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU15QixRQUFRN0IsU0FBU0U7QUFDOURJLE9BQU8rUyxPQUFPQyxLQUFLaUgsWUFBWXRhLE9BQU9DLFFBQVFDLEdBQUdDLE1BQU1pVCxPQUFPQyxLQUFLelIsUUFBUTVCLE9BQU9DO0FBQ2xGSSxPQUFPaWEsWUFBWS9ZLE1BQU1yQixHQUFHQyxNQUFNeUIsUUFBUUw7QUFDMUNsQixPQUFPaWEsWUFBWS9VLE1BQU1yRixHQUFHQyxNQUFNeUIsUUFBUTJEO0FBQzFDbEYsT0FBT2lhLFlBQVl2YSxTQUFTLEdBQUd3RSxNQUFNLGFBQVlyRSxHQUFHQyxNQUFNeUIsUUFBUTdCLFNBQVMsR0FBR3dFLE1BQU07QUFDcEZsRSxPQUFPaWEsWUFBWXZhLFNBQVMsR0FBR3dFLE1BQU0sYUFBWXJFLEdBQUdDLE1BQU15QixRQUFRN0IsU0FBUyxHQUFHd0UsTUFBTTtPQUNwRmxFLE9BQU9pYSxZQUFZdmEsU0FBUyxHQUFHNlAsS0FBSzFQLEdBQUdDLE1BQU15QixRQUFRN0IsU0FBUyxHQUFHNlA7O0FBR2xFbFAsS0FBSyxZQUFZO0FBQ2hCOFo7TUFBTW5jLElBQUl3QztBQUNWMlosY0FBYzNaLElBQ1ptSyxNQUFNLE9BQU8sTUFDYnVCLGFBQ0FoSSxRQUNBcUMsSUFBSSxTQUFTLElBQ2JvRixLQUFLLFFBQVEsS0FDYnZCLEtBQUssZUFBZSxLQUNwQjhFLGtCQUFrQjtBQUFDM0osUUFBTztHQUMxQjZVLGlCQUFpQjtBQUFDaE8sT0FBTTtHQUN4Qm5ILFNBQ0FiLFdBQ0EyUCxVQUNBQyxZQUNBRyxTQUNBRixRQUNBdkcsZUFDQXdHLGNBQ0FqTCxTQUNBd0wsS0FBS3pXLElBQUl1RCxXQUNUbVQsU0FDQUQsS0FBS3pXLElBQUlxRCxVQUNUb0YsVUFDQXJDLFNBQVN0RixTQUNUMlYsS0FBSy9JLE9BQUsxTixJQUFJcUQsVUFDZGdHLEdBQUcsT0FBTyxnQkFDVkssS0FBSyxPQUNMZixJQUFJLE9BQ0pBO0FBRUYzRyxPQUFPbWEsYUFBYXRhLEdBQUdDLE1BQU1VO0FBQzdCUixPQUFPbEIsUUFBUVksU0FBUyxJQUFJRyxHQUFHQyxNQUFNNEwsS0FBS3pMO0FBQzFDRCxPQUFPUSxJQUFJTCxRQUFRTixHQUFHQyxNQUFNNEw7T0FDNUIxTCxPQUFPUSxJQUFJK0YsSUFBSSxVQUFTMUcsR0FBR0MsTUFBTTs7T0FHbENPLEtBQUsscUJBQXFCO0FBQ3pCZ2E7T0FBT3JjLElBQUlrRCxLQUFLLFlBQVk7QUFBQ29aLFVBQVM7O0FBQ3RDOVosTUFBTXhDLElBQUl3QyxJQUFJO0FBQUM4WixVQUFTOztBQUV4QnRhLE9BQU9oQyxPQUFPNkIsR0FBR0MsTUFBTTtBQUN2QkUsT0FBT2hDLElBQUksT0FBTzZCLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9oQyxJQUFJLEtBQUs2QixHQUFHQyxNQUFNO0FBQ3pCRSxPQUFPUSxJQUFJK1osaUJBQWlCMWEsR0FBR0MsTUFBTVU7QUFDckNSLE9BQU9rQixLQUFLNEMsUUFBUXdXLFVBQVV6YSxHQUFHQyxNQUFNO0FBQ3ZDRSxPQUFPUSxJQUFJc0QsUUFBUXdXLFVBQVV6YSxHQUFHQyxNQUFNO0FBQ3RDRSxPQUFPUSxJQUFJNkcsTUFBTXhILEdBQUdDLE1BQU1VO0FBQzFCUixPQUFPUSxJQUFJNkcsR0FBRyxRQUFReEgsR0FBR0MsTUFBTVU7QUFDL0JSLE9BQU9RLElBQUk2RyxHQUFHLE9BQU8sS0FBS3hILEdBQUdDLE1BQU1VO0FBQ25DUixPQUFPUSxJQUFJZ0ksS0FBSyxRQUFRM0ksR0FBR0MsTUFBTVU7QUFDakNSLE9BQU9RLElBQUltRyxJQUFJLGtCQUFrQjlHLEdBQUdDLE1BQU1VO0FBRTFDK0gsWUFBWTtBQUFHL0gsSUFBSTZHLEdBQUcsYUFBYWdULEtBQUc7T0FBSzlSOztBQUMzQ3ZJLE9BQU9RLElBQUlrSCxLQUFLLEtBQUs3SCxHQUFHQyxNQUFNVTtBQUM5QlIsT0FBT1EsSUFBSWtILFFBQVE3SCxHQUFHQyxNQUFNVTtBQUM1QlIsT0FBT1EsSUFBSXFILFlBQVksU0FBU2hJLEdBQUdDLE1BQU1VO0FBQ3pDUixPQUFPUSxJQUFJcUgsWUFBWSxLQUFLaEksR0FBR0MsTUFBTVU7QUFDckNSLE9BQU9RLElBQUlxSCxlQUFlaEksR0FBR0MsTUFBTVU7QUFDbkNSLE9BQU91SSxXQUFXMUksR0FBR0MsTUFBTTtBQUMzQkUsT0FBT1EsSUFBSWtILEtBQUssY0FBYzdILEdBQUdDLE1BQU1VO0FBQ3ZDUixPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFDM0JFLE9BQU9RLElBQUltRyxJQUFJLGFBQWEsaUJBQU85RyxHQUFHQyxNQUFNVTtBQUM1Q1IsT0FBT1EsSUFBSWtILEtBQUssY0FBYzdILEdBQUdDLE1BQU1VO0FBQ3ZDUixPQUFPdUksV0FBVzFJLEdBQUdDLE1BQU07QUFFM0JVLElBQUkrRixJQUFJLE1BQU07QUFDZHZHLE9BQU9RLElBQUlQLEdBQUdpRSxNQUFNc1csTUFBTTNhLEdBQUdDLE1BQU07QUFFbkNFLE9BQU9RLElBQUltSyxTQUFTOUssR0FBRzZLLElBQUk7QUFDM0IxSyxPQUFPUSxJQUFJbUssTUFBTSxNQUFNLE9BQUs5SyxHQUFHQyxNQUFNO0FBQ3JDRSxPQUFPUSxJQUFJbUssTUFBTSxLQUFLLE9BQUs5SyxHQUFHQyxNQUFNO0FBQ3BDRSxPQUFPUSxJQUFJbUssTUFBTSxRQUFRLE9BQUk5SyxHQUFHQyxNQUFNVTtBQUN0Q1IsT0FBT1EsSUFBSW1LLE1BQU0sU0FBUTlLLEdBQUdZLEdBQUd3SDtBQUMvQmpJLE9BQU9RLElBQUltSyxNQUFNLFlBQVksT0FBSTlLLEdBQUdDLE1BQU1VO0FBQzFDUixPQUFPUSxJQUFJbUssTUFBTSxZQUFXOUssR0FBR1ksR0FBR3VFO0FBQ2xDaEYsT0FBT1EsSUFBSW1LLE1BQU0sWUFBVzlLLEdBQUdZLEdBQUd3SDtBQUNsQ2pJLE9BQU9RLElBQUltSyxNQUFNLFdBQVcsT0FBSTlLLEdBQUdDLE1BQU1VO0FBQ3pDUixPQUFPUSxJQUFJbUssTUFBTSxZQUFXOUssR0FBR1ksR0FBR3VFO0FBQ2xDaEYsT0FBT1EsSUFBSW1LLE1BQU0sV0FBVyxTQUFXOUssR0FBR0MsTUFBTVU7QUFDaERSLE9BQU9RLElBQUltSyxNQUFNLFlBQVc5SyxHQUFHWSxHQUFHd0g7QUFFbENqSSxPQUFPUSxJQUFJME8sa0JBQWtCO0FBQUM5QyxPQUFNO0FBQUM5RyxPQUFNOztJQUFLekYsR0FBR0MsTUFBTVU7QUFDekRSLE9BQU9RLElBQUkwTyxrQkFBa0IsT0FBTXJQLEdBQUdDLE1BQU1VO0FBQzVDUixPQUFPUSxJQUFJNFosaUJBQWlCO0FBQUNoTyxPQUFNO0lBQVF2TSxHQUFHQyxNQUFNVTtBQUNwRFIsT0FBT1EsSUFBSTRaLGlCQUFpQixPQUFNdmEsR0FBR0MsTUFBTVU7QUFFM0NBLElBQUk0RCxTQUFTcEcsSUFBSWM7QUFDakJrQixPQUFPUSxJQUFJTCxRQUFRTixHQUFHQyxNQUFNOUIsSUFBSWM7QUFFaEMwQixJQUFJeUUsT0FBTztBQUNYakYsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ1UsSUFBSTRELFNBQVNsRjtBQUNiYyxPQUFPUSxJQUFJTCxRQUFRTixHQUFHQyxNQUFNOUIsSUFBSWM7QUFDaEMwQixJQUFJdVQsUUFBUTtBQUNaL1QsT0FBT1EsSUFBSWQsU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTtBQUNyQ1UsSUFBSXdULFVBQVU7QUFDZGhVLE9BQU9RLElBQUlMLFFBQVFOLEdBQUdDLE1BQU05QixJQUFJYztBQUNoQzBCLElBQUl5VCxNQUFNO0FBQ1ZqVSxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDVSxJQUFJMFQsWUFBWTtBQUNoQmxVLE9BQU9RLElBQUlMLFFBQVFOLEdBQUdDLE1BQU05QixJQUFJYztBQUNoQzBCLElBQUkyVCxPQUFPO0FBQ1huVSxPQUFPUSxJQUFJZCxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBQ3JDVSxJQUFJa04sYUFBYTtBQUNqQjFOLE9BQU9RLElBQUlMLFFBQVFOLEdBQUdDLE1BQU05QixJQUFJYztBQUNoQzBCLElBQUlpVSxLQUFLO0FBQ1R6VSxPQUFPUSxJQUFJTCxRQUFRTixHQUFHQyxNQUFNOUIsSUFBSWM7QUFDaEMwQixJQUFJaUcsUUFBUTtBQUNaekcsT0FBT1EsSUFBSUwsUUFBUU4sR0FBR0MsTUFBTTlCLElBQUljO0FBQ2hDMEIsSUFBSXlJO0FBQ0pqSixPQUFPUSxJQUFJTCxRQUFRTixHQUFHQyxNQUFNO0FBQzVCVSxJQUFJa1U7QUFDSjFVLE9BQU9RLElBQUlMLFFBQVFOLEdBQUdDLE1BQU07QUFDNUJFLE9BQU9oQyxJQUFJYyxTQUFTWSxTQUFTRSxRQUFRQyxHQUFHQyxNQUFNO0FBRTlDVSxJQUFJNEQsU0FBU3BHLElBQUljO0FBQ2pCa0IsT0FBT2hDLElBQUljLFNBQVNZLFNBQVNFLFFBQVFDLEdBQUdDLE1BQU07QUFDOUMsSUFBRzlCLElBQUljLFNBQVMyYixjQUFoQjtBQUNDemMsSUFBSWMsU0FBUzJiLGFBQWF2WjtBQUMxQmxELElBQUljLFNBQVMyYixhQUFhemMsSUFBSXdDO0FBQzlCUixPQUFPaEMsSUFBSWMsU0FBU1ksU0FBU0UsUUFBUUMsR0FBR0MsTUFBTTs7QUFFL0NFLE9BQU87T0FBS2hDLElBQUlvSTtHQUNkdkcsR0FBR2lMO0FBRUw5SyxPQUFPO09BQUtoQyxJQUFJb0ksTUFBTTtHQUNwQnZHLEdBQUdpTDtBQUVMOUssT0FBTztPQUFLaEMsSUFBSW9JLE1BQU07R0FDcEJ2RyxHQUFHaUw7QUFFTDlLLE9BQU87T0FBS2hDLElBQUlvSSxNQUFNO0dBQ3BCdkcsR0FBR2lMO0FBRUw5SyxPQUFPO09BQUtoQyxJQUFJb0ksTUFBTSxDQUFDLEtBQUtuQixPQUFPakgsSUFBSXdDO0dBQ3JDWCxHQUFHaUw7QUFFTDlLLE9BQU87T0FBS2hDLElBQUlvSSxNQUFNLENBQUM7R0FDckJ2RSxJQUFJaEMsR0FBR2lMO0FBS1Q5SyxPQUFPO09BQUtoQyxJQUFJbVU7R0FDZHRTLEdBQUdpTDtBQUVMOUssT0FBTztPQUFLaEMsSUFBSW1VLFNBQVM7R0FDdkJ0UyxHQUFHaUw7QUFFTDlLLE9BQU87T0FBS2hDLElBQUltVSxTQUFTO0dBQ3ZCdFMsR0FBR2lMO0FBRUw5SyxPQUFPO09BQUtoQyxJQUFJbVUsU0FBUyxDQUFDLE1BQU07QUFBQ2hRLFdBQVU7O0dBQ3pDdEMsR0FBR2lMO0FBRUw5SyxPQUFPO09BQUtoQyxJQUFJbVUsU0FBUyxDQUFDLE9BQU87R0FDL0J0UyxHQUFHaUw7QUFFTDlLLE9BQU87T0FBS2hDLElBQUltVSxTQUFTLENBQUMsT0FBTyxNQUFNO0dBQ3JDdFEsSUFBSWhDLEdBQUdpTDtBQUVUOUssT0FBTztPQUFLaEMsSUFBSXdDLElBQUkwRDtPQUFNO0FBQUNnSCxTQUFRO0FBQUssdUJBQXNCO0FBQUNBLFNBQVE7OztHQUFLOUcsU0FBU3RGO0dBQ25GK0MsSUFBSWhDLEdBQUdpTDtPQUVUOUssT0FBTztBQUNOUSxNQUFNeEMsSUFBSXdDO0FBQ1ZBLElBQUl1TixVQUFVdk47QUFDZEEsSUFBSW1LLE1BQU0sU0FBUztPQUNuQjNLLE9BQU9RLElBQUltSyxNQUFNLFVBQVM5SyxHQUFHQyxNQUFNO0dBQ2xDK0IsSUFBSWhDLEdBQUdpTDs7OztBQWdCWjRQLFlBQVdDLFVBQUVDLFVBQVUsVUFBQ0MsV0FBV0MsVUFBWjtBQUN0QixJQUFHLEtBQUNyVCxrQkFBSjtPQUNDLEtBQUNBLGlCQUFpQm9ULFdBQVdDO09BRDlCO09BR0MsS0FBQ0MsaUJBQWlCRixhQUFhQzs7O0FBR2pDSixZQUFXQyxVQUFFSyxjQUFjLFVBQUNILFdBQVdDLFVBQVo7QUFDMUIsSUFBRyxLQUFDRyxxQkFBSjtPQUNDLEtBQUNBLG9CQUFvQkosV0FBV0M7T0FEakM7T0FHQyxLQUFDSSxpQkFBaUJMLGFBQWFDOzs7QUFHakNKLFlBQVdDLFVBQUVuVCxZQUFZLFVBQUNxVCxXQUFEO0FBQ3hCdlQ7UUFBUXBJLFNBQVNpYyxZQUFZO0FBQzdCN1QsTUFBTThULFVBQVVQLFdBQVcsTUFBTTtPQUNqQyxLQUFDUSxjQUFjL1Q7O0FBR2hCLElBQUdvVCxZQUFZOVksU0FBVSxlQUF6QjtBQUNDOFksWUFBWTlZLE9BQU87QUFDbkIwWixLQUFLMVosT0FBTztBQUNaMlosbUJBQW1CLENBQ2xCLHFCQUNBLDBCQUNBLFlBQ0EsY0FDQTtBQUVEQyxnQkFBZ0IsQ0FDZixTQUFRLFdBQVUsU0FBUSxTQUFRLFNBQ2xDLFlBQVcsWUFBVyxnQkFBZSxZQUNyQyxTQUFRLFlBQVcsYUFBWSxnQkFDL0IsU0FBUSxRQUFPLFVBQVMsUUFBTyxVQUFTLFVBQ3hDLFVBQVMsU0FBUSxZQUFXLE9BQU0sV0FDbEMsU0FBUSxhQUFZLFVBQVMsVUFBUyxZQUN0QyxVQUFTLFNBQVEsT0FBTSxTQUFRLFFBQU8sUUFDdEMsU0FBUSxXQUFVLE9BQU0sUUFBTyxVQUFTLFNBQ3hDLE1BQUssU0FBUSxTQUFRLFVBQVMsUUFBTyxXQUNyQyxRQUFPLE1BQUssWUFBVyxTQUFRLFFBQU8sUUFDdEMsWUFBVyxTQUFRLE9BQU0sYUFBWSxVQUNyQyxXQUFVLFlBQVcsU0FBUSxXQUFVLFVBQ3ZDLFVBQVMsUUFBTyxRQUFPLE1BQUssU0FBUSxRQUFPO0FBRzVDM2E7OztJQUMyQmUsY0FBYzZaOzs7QUFFekNDOzs7S0FDa0M5WixjQUFjNlo7Ozs7S0FFN0I3WixPQUFPOzs7S0FDSkEsT0FBTzs7O0tBQ0ZBLE9BQU87Ozs7QUFFbkMxRCxPQUFPaVAsYUFBY3dPOzs7OztBRXR2S3JCQztrQkFDQztjQUFjN0ksT0FBTzhJLHlCQUF5QjNkLFFBQVE7QUFDdEQsZUFBZTZVLE9BQU84SSx5QkFBeUIzZCxRQUFROztBQUV4RDRkLE9BQU9DLFVBQVUsS0FBSTtBQUNwQkM7Y0FBYztBQUNkQSxVQUFVMVc7T0FBTXBILE9BQU8rZDtBQUFZMVcsUUFBT3JILE9BQU9nZTs7QUFFakRDLFVBQVUsVUFBQ0MsV0FBRDtBQUNUQSxZQUFZLFVBQVFBLFVBQVUzVixRQUFRLE9BQU8sVUFBQzRWLFFBQUQ7T0FBV0EsT0FBT0M7O09BQy9EVixnQkFBZ0JRLFdBQVdwVixJQUFJdVYsS0FBS3JlOztBQUVyQ3NlLFlBQVk7QUFBSyxLQUFPQyxhQUFQO0FBQ2hCQSxjQUFjO0FBRWQxSixPQUFPMkosZUFBZXhlLFFBQVEsY0FDN0JzUjtjQUFjO0FBQ2R4SSxLQUFLO09BQUtnVixRQUFRMVc7O0FBQ2xCNEIsS0FBSyxVQUFDeVYsVUFBRDtPQUFhWCxRQUFRMVcsUUFBUXFYOzs7T0FFbkM1SixPQUFPMkosZUFBZXhlLFFBQVEsZUFDN0JzUjtjQUFjO0FBQ2R4SSxLQUFLO09BQUtnVixRQUFRelc7O0FBQ2xCMkIsS0FBSyxVQUFDeVYsVUFBRDtPQUFhWCxRQUFRelcsU0FBU29YOzs7OztBQUdyQyxLQUFDMU0sV0FBVyxVQUFDM0ssT0FBT0MsUUFBUjtBQUNYK0I7SUFBeUJoQyxPQUF6QjBXO1FBQVExVyxRQUFRQTs7QUFDaEIsSUFBMkJDLFFBQTNCeVc7UUFBUXpXLFNBQVNBOztBQUVqQmlYO0FBQ0FsVixRQUFRcEksU0FBU2ljLFlBQVk7QUFDN0I3VCxNQUFNOFQsVUFBVSxVQUFVLE1BQU07T0FDaENsZCxPQUFPbWQsY0FBYy9UOztBQUd0QixLQUFDbUksVUFBVTtBQUNWc0QsT0FBTzJKLGVBQWV4ZSxRQUFRLGNBQWMwZCxnQkFBZ0JLO09BQzVEbEosT0FBTzJKLGVBQWV4ZSxRQUFRLGVBQWUwZCxnQkFBZ0JNOztBQUc5RCxPQUFPOzs7OztBQ3pDUkosT0FBT0MsVUFBVTs7OztBQ0FqQkQsT0FBT0MsVUFBVWE7QUFFakIsbUJBQW1COWUsTUFBTStlLE9BQU87QUFDOUIsTUFBTSxDQUFDQyxhQUFhaGY7QUFDcEIsTUFBTSxDQUFDaWYsUUFBUUY7QUFDZixJQUFJRyxXQUFXQyxhQUFhQztBQUU1QkosVUFBVUssVUFBVSxTQUFTLFVBQVNDLFVBQVU5YSxRQUFRLElBQUk7QUFDMUQsTUFBTSthLFVBQVVOLEtBQUssTUFBTTtBQUMzQixNQUFNN1ksUUFBUWhHLE9BQU9rSCxpQkFBaUJpWTtBQUN0Qy9hLFFBQVFBLE1BQU1nYjtBQUVkLE1BQU1DLGNBQWNyWixNQUFNa1osY0FBYyxzQkFDbkNsWixNQUFNa1osY0FBYztBQUV6QixNQUFNSSxnQkFBZ0JELGNBQ2xCLEtBQ0FyWixNQUFNa1o7QUFFVixNQUFNSyxZQUFZbmIsUUFDZG9iLGdCQUFnQkYsZUFBZWxiLFNBQy9CcWIsUUFBUUg7QUFFWixNQUFNSSxhQUFhUCxRQUFRUSxRQUFRNVo7QUFFbkMsTUFBTTZaLHlCQUF5QkYsdUJBQXVCUixhQUFhOWEseUJBQXlCOGEsYUFBYUk7QUFDekcsTUFBTU8saUNBQWlDSCwyQkFBMkJSLGFBQWE5YSx5QkFBeUI4YSxhQUFhSTtBQUVySCxLQUFLUSxPQUFPUCxXQUFXSyxjQUFjQyxzQkFBc0J6YjtBQUUzRCx5QkFBeUJnSSxVQUFVOE8sVUFBVTtBQUMzQyxNQUFNNkUsb0JBQW9CYixTQUFTM1csUUFBUSxVQUFVLEFBQUN5WCxTQUFVLE1BQU1BLE1BQU1qYTtBQUM1RSxJQUFJLENBQUMrWSxXQUFXO0FBQ2RFLGVBQWVoZSxTQUFTQyxjQUFjO0FBQ3RDNmQsWUFBWTlkLFNBQVNDLGNBQWM7QUFDbkM4ZCxjQUFjL2UsT0FBT2tILGlCQUFpQjRYO0FBRXRDRSxhQUFhM2QsWUFBWXlkO0FBQ3pCOWQsU0FBU0ksS0FBS0MsWUFBWTJkOztBQUU1QkYsVUFBVTlZLE1BQU1xRixXQUFXckYsTUFBTXFGO0FBQ2pDeVQsVUFBVTlZLE1BQU1pYSxZQUFZRixtQkFBbUI3RSxVQUFVO0FBQ3pELE1BQU05VyxRQUFRMmEsWUFBWUc7QUFFMUIsTUFBTWdCLGVBQWU5YixNQUFNK2IsU0FBUztBQUNwQyxNQUFNQyxNQUFNLElBQUlDLE9BQU9DLGFBQWFsYyxPQUFPbUUsUUFBUSxTQUFTO0FBQzVEdVcsVUFBVTlZLE1BQU1xRixXQUFXO0FBQzNCeVQsVUFBVTlZLE1BQU0rWixxQkFBcUI7QUFFckMsT0FBT0csZUFDSEUsSUFBSWplLEtBQUtpSyxZQUNUQSxhQUFhaEk7Ozs7QUFNdkIsc0JBQXNCQSxPQUFPO0FBQ3pCLE9BQU9tYyxPQUFPbmMsT0FBT21FLFFBQVEsdUJBQXVCOzs7OztBQ3BEeEQsSUFBSWlZLE9BQU87QUFNWDNDLFFBQVF4YixVQUFVO0FBTWxCd2IsUUFBUTRDLGlCQUFpQjtBQU16QixJQUFJQyxPQUFPO0FBWVg3QyxRQUFRcGQsTUFBTSxVQUFVa2dCLElBQUk7QUFDMUIsSUFBSSxDQUFDLENBQUNILEtBQUtJLFFBQVFELEtBQUs7QUFDdEJBLEdBQUc5QyxTQUFTNkM7QUFDWkYsS0FBSzVQLEtBQUsrUDs7QUFHWixPQUFPOUM7O0FBT1RBLFFBQVE2QyxPQUFPQTtBQU1mLElBQUloZ0IsU0FBUztBQUNibWQsUUFBUW5kLFNBQVNBO0FBTWpCLElBQUk2ZSxZQUFZO0FBQ2hCMUIsUUFBUXBkLElBQUk4ZTtBQU1aLElBQUlzQixPQUFPO0FBQ1hoRCxRQUFRcGQsSUFBSW9nQjtBQU1aLElBQUkvZSxTQUFTO0FBQ2IrYixRQUFRcGQsSUFBSXFCO0FBTVosSUFBSWdmLFNBQVM7QUFDYmpELFFBQVFwZCxJQUFJcWdCO0FBTVosSUFBSWhCLFNBQVM7QUFDYmpDLFFBQVFwZCxJQUFJcWY7Ozs7QUM1RVosbUJBQW9CO0FBQ2xCLElBQUlpQixXQUFXLEdBQUduTyxNQUFNeUwsS0FBSzNVO0FBRTdCLHNCQUF1QnNYLEtBQUs1YixLQUFLO0FBQy9CeVAsT0FBT0MsS0FBSzFQLEtBQUs2YixRQUFRLFVBQVVDLEtBQUs7QUFDdEMsSUFBSSxDQUFDLENBQUNILFNBQVNILFFBQVFNLE1BQU1GLElBQUlFLE9BQU85YixJQUFJOGI7OztBQUloRCxPQUFPLHlCQUEwQjtBQUMvQixJQUFJQyxPQUFPLEdBQUd2TyxNQUFNeUwsS0FBSzNVLFlBQ3JCL0csSUFBSSxHQUNKcWUsTUFBTTtBQUVWLE9BQU9yZSxJQUFJd2UsS0FBS3pmLFFBQVFpQixLQUFLO0FBQzNCeWUsYUFBYUosS0FBS0csS0FBS3hlOztBQUd6QixPQUFPcWU7OztBQUVWO0FBTURwRCxPQUFPQyxVQUFVNEM7QUFhakIsd0JBQXlCWSxTQUFTQyxRQUFRQyxLQUFLO0FBQzdDLElBQUl6SixTQUFTMEosUUFBUSxRQUFRLFdBQVcsU0FBUyxlQUFlLFdBQzVEemQsUUFBUStULE9BQU93SixXQUFVO0FBRzdCLEtBQUtELFVBQVVBLFdBQVc7QUFDMUIsS0FBS0ksV0FBVztBQUdoQixTQUFTUCxPQUFPbmQsT0FBTztBQUNyQixLQUFLbWQsT0FBT25kLE1BQU1tZDs7QUFJcEJLLE1BQU1BLE9BQU83WCxVQUFVZ1k7QUFDdkIsSUFBSUgsT0FBT0ksTUFBTUMsbUJBQW1CO0FBQ2xDRCxNQUFNQyxrQkFBa0IsTUFBTUw7T0FDekI7QUFDTCxJQUFJO0FBQ0YsTUFBTSxJQUFJSTtTQUNKM1gsR0FBRztBQUNULEtBQUs2WCxRQUFRN1gsRUFBRTZYOzs7O0FBU3JCcEIsZUFBZWhFLFlBQVk1SCxPQUFPaU4sT0FBT0gsTUFBTWxGO0FBTS9DZ0UsZUFBZWhFLFVBQVUvWSxPQUFPO0FBTWhDK2MsZUFBZWhFLFVBQVU1WixjQUFjNGQ7QUFTdkNBLGVBQWVoRSxVQUFVc0YsU0FBUyxVQUFVRixPQUFPO0FBQ2pELElBQUkvSixTQUFTMEosUUFBUSxlQUFlLFVBQVUsVUFDMUN6ZCxRQUFRK1QsT0FBTztBQUFFcFUsTUFBTSxLQUFLQTtHQUFRO0FBR3hDLElBQUksVUFBVW1lLFNBQVMsS0FBS0EsT0FBTztBQUNqQzlkLE1BQU04ZCxRQUFRLEtBQUtBOztBQUdyQixPQUFPOWQ7Ozs7O0FDeEdULElBQUlpZSxVQUFVO0FBTWRuRSxRQUFRMWIsT0FBTztBQU1mMGIsUUFBUXBhLE9BQU87QUFLZm9hLFFBQVFvRSxjQUFjO0FBTXRCcEUsUUFBUXFFLGFBQWE7QUFNckJyRSxRQUFRc0UsWUFBWTtBQU1wQnRFLFFBQVF1RSxVQUFVO0FBTWxCdkUsUUFBUXdFLGFBQWE7QUFNckJ4RSxRQUFRZ0IsT0FBTztBQU1maEIsUUFBUXlFLGdCQUFnQjtBQU14QnpFLFFBQVFyUixNQUFNO0FBTWRxUixRQUFRMEUsY0FBY1AsUUFBUU87QUFNOUIxRSxRQUFRMkUsY0FBY1IsUUFBUVE7QUFNOUIzRSxRQUFRNEUsVUFBVTtBQU1sQjVFLFFBQVE2RSxjQUFjO0FBTXRCN0UsUUFBUW9CLFlBQVk7QUFNcEJwQixRQUFROEUsb0JBQW9CO0FBTTVCOUUsUUFBUStFLGtCQUFrQjtBQU0xQi9FLFFBQVFnRixxQkFBcUI7QUFNN0JoRixRQUFRaUYsMkJBQTJCO0FBTW5DakYsUUFBUWtGLG1CQUFtQjtBQU0zQmxGLFFBQVFtRixrQ0FBa0M7QUFNMUNuRixRQUFRb0YsNkJBQTZCO0FBTXJDcEYsUUFBUXFGLGFBQWE7QUFNckJyRixRQUFRc0YsVUFBVTtBQU1sQnRGLFFBQVF1RixpQkFBaUI7QUFNekJ2RixRQUFRd0YsaUJBQWlCO0FBTXpCeEYsUUFBUXBOLFFBQVE7Ozs7QUMzS2hCbU4sT0FBT0MsVUFBVTtBQWVmeUYsY0FBYztBQWVkN0IsVUFBVTtBQXNCVjlnQixtQkFBbUI7QUFvQm5CNGlCLFVBQVU7QUFvQlZDLG1CQUFtQixDQUFDLFFBQVEsV0FBVzs7Ozs7QUNyRnpDLElBQUk5aUIsU0FBUztBQUVia2QsT0FBT0MsVUFBVSxVQUFVNEYsT0FBTy9DLE1BQU07QUFLdEMsSUFBSUQsaUJBQWlCZ0QsTUFBTWhELGdCQUN2QjVCLE9BQU82QixLQUFLN0I7QUFNaEI0RSxNQUFNN0UsWUFBWUE7QUF3Q2xCLG1CQUFvQnhaLEtBQUtzZSxLQUFLQyxNQUFNQyxVQUFVO0FBQzVDL0UsS0FBSyxNQUFNLFFBQVE4RSxRQUFRL0U7QUFDM0JDLEtBQUssTUFBTSxZQUFZK0U7QUFDdkIvRSxLQUFLLE1BQU0sVUFBVXpaO0FBQ3JCeVosS0FBSyxNQUFNLFdBQVc2RTtBQUV0QixPQUFPaEQsS0FBS3lDLFFBQVE7O0FBR3RCdE8sT0FBTzJKLGVBQWVJLFdBQVcsZ0JBQWdCO0FBQy9DOVYsS0FBSyxZQUFXO0FBQ2QrYSxRQUFRQyxLQUFLO0FBQ2IsT0FBT3BqQixPQUFPNGlCOztBQUVoQnRhLEtBQUssVUFBUzVFLE9BQU87QUFDbkJ5ZixRQUFRQyxLQUFLO0FBQ2JwakIsT0FBTzRpQixlQUFlbGY7OztBQUkxQnlRLE9BQU8ySixlQUFlSSxXQUFXLFlBQVk7QUFDM0M5VixLQUFLLFlBQVc7QUFDZCthLFFBQVFDLEtBQUs7QUFDYixPQUFPcGpCLE9BQU8rZ0I7O0FBRWhCelksS0FBSyxVQUFTNUUsT0FBTztBQUNuQnlmLFFBQVFDLEtBQUs7QUFDYnBqQixPQUFPK2dCLFdBQVdyZDs7O0FBSXRCd2EsVUFBVThELGNBQWMsVUFBVWhmLE1BQU1pZCxJQUFJO0FBQzFDRCxLQUFLZ0MsWUFBWSxLQUFLakcsV0FBVy9ZLE1BQU1pZDs7QUFHekMvQixVQUFVSyxZQUFZLFVBQVV2YixNQUFNaWQsSUFBSTtBQUN4Q0QsS0FBS3pCLFVBQVUsS0FBS3hDLFdBQVcvWSxNQUFNaWQ7O0FBR3ZDL0IsVUFBVWlFLHFCQUFxQixVQUFVbmYsTUFBTWlkLElBQUlvRCxrQkFBa0I7QUFDbkVyRCxLQUFLbUMsbUJBQW1CLEtBQUtwRyxXQUFXL1ksTUFBTWlkLElBQUlvRDs7QUFHcERuRixVQUFVK0Qsb0JBQW9CLFVBQVVqZixNQUFNaWQsSUFBSTtBQUNoREQsS0FBS2lDLGtCQUFrQixLQUFLbEcsV0FBVy9ZLE1BQU1pZDs7QUFHL0MvQixVQUFVZ0Usa0JBQWtCLFVBQVVsZixNQUFNaWQsSUFBSTtBQUM5Q0QsS0FBS2tDLGdCQUFnQixLQUFLbkcsV0FBVy9ZLE1BQU1pZDs7QUFHN0MvQixVQUFVa0UsMkJBQTJCLFVBQVVwZixNQUFNaWQsSUFBSW9ELGtCQUFrQjtBQUN6RXJELEtBQUtvQyx5QkFBeUIsS0FBS3JHLFdBQVcvWSxNQUFNaWQsSUFBSW9EOztBQWtCMURuRixVQUFVbkMsVUFBVXFELFNBQVMsVUFBVWtFLE1BQU1OLEtBQUtPLFdBQVcvSSxVQUFVZ0osU0FBU3pDLFVBQVU7QUFDeEYsSUFBSTBDLEtBQUt6RCxLQUFLdmUsS0FBSyxNQUFNdUg7QUFDekIsSUFBSSxVQUFVK1gsVUFBVUEsV0FBVztBQUNuQyxJQUFJL2UsY0FBY3dZLFlBQVl4WSxjQUFjd2hCLFNBQVN6QyxXQUFXO0FBQ2hFLElBQUksU0FBUy9nQixPQUFPK2dCLFVBQVVBLFdBQVc7QUFFekMsSUFBSSxDQUFDMEMsSUFBSTtBQUNQVCxNQUFNaEQsS0FBS3dCLFdBQVcsTUFBTXhZO0FBQzVCLElBQUkwYSxTQUFTMUQsS0FBS3lCLFVBQVUsTUFBTXpZO0FBQ2xDLE1BQU0sSUFBSStXLGVBQWVpRCxLQUFLO0FBQzFCVSxRQUFRQTtBQUNSbEosVUFBVUE7QUFDVnVHLFVBQVVBO0dBQ1gsRUFBQy9nQixPQUFPNGlCLGlCQUFnQixLQUFLeEQsU0FBU2pCLEtBQUssTUFBTTs7O0FBWXhEaEssT0FBTzJKLGVBQWVJLFVBQVVuQyxXQUFXLFFBQ3pDO0FBQUUzVCxLQUFLLFlBQVk7QUFDZixPQUFPK1YsS0FBSyxNQUFNOztBQUVwQjdWLEtBQUssVUFBVXFiLEtBQUs7QUFDbEJ4RixLQUFLLE1BQU0sVUFBVXdGOzs7Ozs7O0FDMUo3QnpHLE9BQU9DLFVBQVUsVUFBVWplLE1BQU0wa0IsR0FBRztBQUNsQyxJQUFJMUYsWUFBWWhmLEtBQUtnZixXQUNqQjZCLGlCQUFpQjdnQixLQUFLNmdCLGdCQUN0QjVCLE9BQU95RixFQUFFekY7QUErQmIsQ0FBRSxNQUFNLE1BQU0sUUFDWixNQUFNLE9BQU8sT0FBTyxRQUNwQixRQUFRLFFBQVEsU0FBUyxNQUN6QixNQUFNLFFBQVEsT0FBTyxRQUFTb0MsUUFBUSxVQUFVc0QsT0FBTztBQUN2RDNGLFVBQVU4RCxZQUFZNkI7O0FBMEJ4QjNGLFVBQVU4RCxZQUFZLE9BQU8sWUFBWTtBQUN2QzdELEtBQUssTUFBTSxVQUFVOztBQXdDdkJELFVBQVU4RCxZQUFZLFFBQVEsWUFBWTtBQUN4QzdELEtBQUssTUFBTSxRQUFROztBQXlCckJELFVBQVU4RCxZQUFZLFVBQVUsWUFBWTtBQUMxQzdELEtBQUssTUFBTSxVQUFVOztBQXdCdkJELFVBQVU4RCxZQUFZLE9BQU8sWUFBWTtBQUN2QzdELEtBQUssTUFBTSxPQUFPOztBQXVCcEJELFVBQVU4RCxZQUFZLFdBQVcsWUFBWTtBQUMzQzdELEtBQUssTUFBTSxXQUFXOztBQW1CeEJELFVBQVU4RCxZQUFZLE9BQU8sWUFBWTtBQUN2QzdELEtBQUssTUFBTSxPQUFPO0FBQ2xCQSxLQUFLLE1BQU0sT0FBTzs7QUF3QnBCRCxVQUFVOEQsWUFBWSxPQUFPLFlBQVk7QUFDdkM3RCxLQUFLLE1BQU0sT0FBTztBQUNsQkEsS0FBSyxNQUFNLE9BQU87O0FBK0RwQixZQUFhcGIsTUFBTWlnQixLQUFLO0FBQ3RCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CamdCLE9BQU9BLEtBQUtzQztBQUNaLElBQUlYLE1BQU15WixLQUFLLE1BQU0sV0FDakIyRixVQUFVLENBQUMsQ0FBRSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQU01RCxRQUFRbmQsS0FBS2doQixPQUFPLE1BQU0sUUFBUTtBQUU3RSxLQUFLM0UsT0FDRHJjLFNBQVM2Z0IsRUFBRTdnQixLQUFLMkIsS0FBS1csZUFDckIsNEJBQTRCeWUsVUFBVS9nQixNQUN0QyxnQ0FBZ0MrZ0IsVUFBVS9nQjs7QUFJaERtYixVQUFVaUUsbUJBQW1CLE1BQU02QjtBQUNuQzlGLFVBQVVpRSxtQkFBbUIsS0FBSzZCO0FBcUpsQyx1QkFBdUI5aEIsR0FBR2tMLEdBQUc7QUFDM0IsT0FBTyxDQUFDd1csRUFBRTdULE1BQU03TixNQUFNMGhCLEVBQUU3VCxNQUFNM0MsT0FBT2xMLE1BQU1rTDs7QUFHN0MsbUNBQW9DO0FBQ2xDK1EsS0FBSyxNQUFNLFlBQVk7O0FBR3pCLGlCQUFrQndGLEtBQUtYLEtBQUs7QUFDMUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFFL0IsSUFBSXRlLE1BQU15WixLQUFLLE1BQU0sV0FDakI4RixVQUFVTCxFQUFFN2dCLEtBQUsyQixLQUFLVyxlQUN0QjZlLFVBQVUvRixLQUFLLE1BQU0sWUFDckJnRyxTQUFTaEcsS0FBSyxNQUFNLFdBQ3BCOEUsT0FBTzlFLEtBQUssTUFBTSxTQUNsQmlHLFNBQVNqRyxLQUFLLE1BQU0sU0FDcEJrRyxhQUFhRCxTQUFTLFVBQVU7QUFFcENGLFVBQVVBLFVBQVVBLFVBQVUsT0FBTztBQUVyQyxJQUFJSSxXQUFXO0FBRWYsUUFBUUw7S0FDRDtBQUNISyxXQUFXNWYsSUFBSXdiLFFBQVF5RCxTQUFTLENBQUM7QUFDakM7S0FFRztBQUNILElBQUlTLFFBQVE7QUFDVixNQUFNLElBQUlyRSxlQUNSbUUsVUFBVSw0Q0FDVmxpQixXQUNBaWhCOztBQUlKcUIsV0FBVzVmLElBQUk2ZixJQUFJWjtBQUNuQjtLQUVHO0FBQ0gsSUFBSWEsUUFBUUosU0FBU1IsRUFBRTlYLE1BQU0yWTtBQUM3Qi9mLElBQUk2YixRQUFRLFVBQVVtRSxNQUFNO0FBQzFCSixXQUFXQSxZQUFZRSxNQUFNRSxNQUFNZjs7QUFFckM7S0FFRztBQUNILElBQUlTLFFBQVE7QUFDVjFmLElBQUk2YixRQUFRLFVBQVVtRSxNQUFNO0FBQzFCSixXQUFXQSxZQUFZVixFQUFFOVgsSUFBSTRZLE1BQU1mOztPQUVoQztBQUNMVyxXQUFXNWYsSUFBSTZmLElBQUlaOztBQUVyQjtLQUVHO0FBQ0gsSUFBSVMsUUFBUTtBQUNWRSxXQUFXNWYsSUFBSXFHLEtBQUssVUFBVTJaLE1BQU07QUFDbEMsT0FBT2QsRUFBRTlYLElBQUk0WSxNQUFNZjs7T0FFaEI7QUFDTFcsV0FBVzVmLElBQUl3YixRQUFReUQsU0FBUyxDQUFDOztBQUVuQzs7QUFNQSxJQUFJQSxRQUFReFAsT0FBT3dQLE1BQU07QUFDdkIsTUFBTSxJQUFJNUQsZUFDUm1FLFVBQVUsc0RBQ04seUNBQXlDRCxVQUFVLFVBQ3ZEamlCLFdBQ0FpaEI7O0FBSUosSUFBSTVmLFFBQVE4USxPQUFPQyxLQUFLdVAsTUFDcEJnQixXQUFXLE1BQ1hDLFVBQVU7QUFFZHZoQixNQUFNa2QsUUFBUSxVQUFVL1UsTUFBTTtBQUM1QixJQUFJcVosZ0JBQWdCLElBQUkzRyxVQUFVeFo7QUFDbENrZixFQUFFaEMsY0FBYyxNQUFNaUQsZUFBZTtBQUNyQzFHLEtBQUswRyxlQUFlLFlBQVk7QUFFaEMsSUFBSSxDQUFDVixVQUFVOWdCLE1BQU1yQyxXQUFXLEdBQUc7QUFDakM2akIsY0FBY3JHLFNBQVNoVCxNQUFNbVksSUFBSW5ZO0FBQ2pDOztBQUdGLElBQUk7QUFDRnFaLGNBQWNyRyxTQUFTaFQsTUFBTW1ZLElBQUluWTtTQUMxQnNaLEtBQUs7QUFDWixJQUFJLENBQUNsQixFQUFFcEIsV0FBV3VDLHNCQUFzQkQsS0FBSy9FLGlCQUFpQjtBQUM1RCxNQUFNK0U7O0FBRVIsSUFBSUgsYUFBYSxNQUFNQSxXQUFXRztBQUNsQ0Y7O0dBRUQ7QUFNSCxJQUFJVCxVQUFVOWdCLE1BQU1yQyxTQUFTLEtBQUs0akIsWUFBWXZoQixNQUFNckMsUUFBUTtBQUMxRCxNQUFNMmpCOztBQUVSOztBQUlKLEtBQUt2RixPQUNIa0YsVUFDRSx5QkFBeUJELGFBQWEsYUFBYVQsRUFBRWxDLFFBQVFpQyxNQUM3RCw2QkFBNkJVLGFBQWEsYUFBYVQsRUFBRWxDLFFBQVFpQzs7QUFHdkV6RixVQUFVaUUsbUJBQW1CLFdBQVd6YSxTQUFTc2Q7QUFDakQ5RyxVQUFVaUUsbUJBQW1CLFdBQVd6YSxTQUFTc2Q7QUFDakQ5RyxVQUFVaUUsbUJBQW1CLFlBQVl6YSxTQUFTc2Q7QUFDbEQ5RyxVQUFVaUUsbUJBQW1CLFlBQVl6YSxTQUFTc2Q7QUFzQ2xEOUcsVUFBVThELFlBQVksTUFBTSxZQUFZO0FBQ3RDLEtBQUs1QyxPQUNEakIsS0FBSyxNQUFNLFdBQ1gsaUNBQ0E7O0FBNkJORCxVQUFVOEQsWUFBWSxRQUFRLFlBQVk7QUFDeEMsS0FBSzVDLE9BQ0QsU0FBU2pCLEtBQUssTUFBTSxXQUNwQiwrQkFDQSxnQ0FDQUEsS0FBSyxNQUFNLFlBQVksUUFBUTs7QUE4QnJDRCxVQUFVOEQsWUFBWSxTQUFTLFlBQVk7QUFDekMsS0FBSzVDLE9BQ0QsVUFBVWpCLEtBQUssTUFBTSxXQUNyQixnQ0FDQSwrQkFDQUEsS0FBSyxNQUFNLFlBQVksT0FBTzs7QUEyQnBDRCxVQUFVOEQsWUFBWSxRQUFRLFlBQVk7QUFDeEMsS0FBSzVDLE9BQ0QsU0FBU2pCLEtBQUssTUFBTSxXQUNwQiwrQkFDQTs7QUEyQk5ELFVBQVU4RCxZQUFZLGFBQWEsWUFBWTtBQUM3QyxLQUFLNUMsT0FDRHBkLGNBQWNtYyxLQUFLLE1BQU0sV0FDekIsb0NBQ0E7O0FBMkJORCxVQUFVOEQsWUFBWSxPQUFPLFlBQVk7QUFDdkMsS0FBSzVDLE9BQ0R3RSxFQUFFN1QsTUFBTW9PLEtBQUssTUFBTSxZQUNqQiw4QkFDQTs7QUFrQ1JELFVBQVU4RCxZQUFZLFNBQVMsWUFBWTtBQUN6QyxJQUFJMkIsTUFBTXhGLEtBQUssTUFBTTtBQUNyQixLQUFLaUIsT0FDRHVFLFFBQVEsUUFBUUEsUUFBUTNoQixXQUN4Qiw2QkFDQTs7QUFxRE5rYyxVQUFVOEQsWUFBWSxTQUFTLFlBQVk7QUFDekMsSUFBSTJCLE1BQU14RixLQUFLLE1BQU0sV0FDakI4RSxPQUFPOUUsS0FBSyxNQUFNLFNBQ2xCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhHO0FBRUpmLFVBQVVBLFVBQVVBLFVBQVUsT0FBTztBQUVyQyxRQUFRTixFQUFFN2dCLEtBQUs0Z0IsS0FBS3RlO0tBQ2I7S0FDQTtBQUNINGYsYUFBYXRCLElBQUkzaUI7QUFDakI7S0FDRztLQUNBO0FBQ0hpa0IsYUFBYXRCLElBQUlsSjtBQUNqQjtLQUNHO0tBQ0E7QUFDSCxNQUFNLElBQUlzRixlQUNSbUUsVUFBVSx1Q0FDVmxpQixXQUNBaWhCO0tBRUM7QUFDSCxJQUFJRCxNQUFNa0IsVUFBVSxrQ0FBa0NOLEVBQUU3QixRQUFRNEI7QUFDaEUsTUFBTSxJQUFJNUQsZUFBZWlELElBQUl0RSxRQUFRMWMsV0FBV2loQjs7QUFFaEQsSUFBSVUsUUFBUXhQLE9BQU93UCxNQUFNO0FBQ3ZCLE1BQU0sSUFBSTVELGVBQ1JtRSxVQUFVLDRDQUE0Q04sRUFBRWxDLFFBQVFpQyxNQUNoRTNoQixXQUNBaWhCOztBQUdKZ0MsYUFBYTlRLE9BQU9DLEtBQUt1UCxLQUFLM2lCOztBQUdsQyxLQUFLb2UsT0FDRCxNQUFNNkYsWUFDTixnQ0FDQTs7QUFrQ04sMEJBQTJCO0FBQ3pCLElBQUl2Z0IsTUFBTXlaLEtBQUssTUFBTSxXQUNqQnBiLE9BQU82Z0IsRUFBRTdnQixLQUFLMkI7QUFDbEIsS0FBSzBhLE9BQ0QsZ0JBQWdCcmMsTUFDaEIsOENBQThDQSxNQUM5Qzs7QUFJTm1iLFVBQVU4RCxZQUFZLGFBQWFrRDtBQUNuQ2hILFVBQVU4RCxZQUFZLGFBQWFrRDtBQStDbkMscUJBQXNCdkIsS0FBS1gsS0FBSztBQUM5QixJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixJQUFJdGUsTUFBTXlaLEtBQUssTUFBTTtBQUNyQixJQUFJQSxLQUFLLE1BQU0sU0FBUztBQUN0QixPQUFPLEtBQUtyUyxJQUFJNlg7T0FDWDtBQUNMLEtBQUt2RSxPQUNEdUUsUUFBUWpmLEtBQ1Isb0NBQ0Esd0NBQ0FpZixLQUNBLEtBQUt3QixNQUNMOzs7QUFLUmpILFVBQVVLLFVBQVUsU0FBUzZHO0FBQzdCbEgsVUFBVUssVUFBVSxVQUFVNkc7QUFDOUJsSCxVQUFVSyxVQUFVLE1BQU02RztBQTJDMUIsbUJBQW1CMWdCLEtBQUtzZSxLQUFLO0FBQzNCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLEtBQUs1RCxPQUNEd0UsRUFBRTlYLElBQUlwSCxLQUFLeVosS0FBSyxNQUFNLFlBQ3RCLDJDQUNBLCtDQUNBelosS0FDQSxLQUFLeWdCLE1BQ0w7O0FBSU5qSCxVQUFVSyxVQUFVLE9BQU84RztBQUMzQm5ILFVBQVVLLFVBQVUsUUFBUThHO0FBNkM1QixxQkFBc0JDLEdBQUd0QyxLQUFLO0FBQzVCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNLFdBQ2pCb0gsV0FBV3BILEtBQUssTUFBTSxhQUN0QitGLFVBQVUvRixLQUFLLE1BQU0sWUFDckJxSCxZQUFZLENBQUMsRUFBQ3RCLFlBQVdBLFVBQVUsT0FBTyxLQUMxQ2pCLE9BQU85RSxLQUFLLE1BQU0sU0FDbEI4RixVQUFVTCxFQUFFN2dCLEtBQUsyQixLQUFLVyxlQUN0Qm9nQixRQUFRN0IsRUFBRTdnQixLQUFLdWlCLEdBQUdqZ0IsZUFDbEJxZ0IsY0FBYztBQUVsQixJQUFJSCxVQUFVO0FBQ1osSUFBSXJILFVBQVV4WixLQUFLd2YsU0FBU2pCLE1BQU0sTUFBTWhpQixHQUFHeUUsS0FBSzhZLFNBQVM7O0FBRzNELElBQUksQ0FBQytHLFlBQVksQ0FBQ3RCLFlBQVksVUFBVXdCLFVBQVUsU0FBUztBQUN6REUsZUFBZUgsWUFBWTtPQUN0QixJQUFJQyxVQUFVLFlBQVksQ0FBQ0YsWUFBWXRCLFlBQVksV0FBVztBQUNuRTBCLGVBQWVILFlBQVk7T0FDdEIsSUFBSSxDQUFDRCxZQUFZLENBQUN0QixZQUFZLFVBQVVBLFlBQVksV0FBVztBQUNwRSxJQUFJMkIsV0FBVyxFQUFDM0IsWUFBWSxhQUFZLE1BQU12ZixNQUFNLE1BQU1BO0FBQzFEaWhCLGVBQWVILFlBQVksY0FBY0ksV0FBVztPQUMvQztBQUNMRixjQUFjOztBQUdoQixJQUFJQSxhQUFhO0FBQ2YsTUFBTSxJQUFJM0YsZUFBZTRGLGNBQWMzakIsV0FBV2loQjs7QUFHcEQsSUFBSXNDLFVBQVU7QUFDWixJQUFJTSxNQUFNbmhCLElBQUkxRDtBQUNkLEtBQUtvZSxPQUNEeUcsTUFBTVAsR0FDTixpRUFDQSxzREFDQUEsR0FDQU87T0FFQztBQUNMLEtBQUt6RyxPQUNEMWEsTUFBTTRnQixHQUNOLHVDQUNBLHlDQUNBQTs7O0FBS1JwSCxVQUFVSyxVQUFVLFNBQVN1SDtBQUM3QjVILFVBQVVLLFVBQVUsTUFBTXVIO0FBQzFCNUgsVUFBVUssVUFBVSxlQUFldUg7QUE2Q25DLHFCQUFzQlIsR0FBR3RDLEtBQUs7QUFDNUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSXRlLE1BQU15WixLQUFLLE1BQU0sV0FDakJvSCxXQUFXcEgsS0FBSyxNQUFNLGFBQ3RCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQnFILFlBQVksQ0FBQyxFQUFDdEIsWUFBV0EsVUFBVSxPQUFPLEtBQzFDakIsT0FBTzlFLEtBQUssTUFBTSxTQUNsQjhGLFVBQVVMLEVBQUU3Z0IsS0FBSzJCLEtBQUtXLGVBQ3RCb2dCLFFBQVE3QixFQUFFN2dCLEtBQUt1aUIsR0FBR2pnQixlQUNsQnFnQixjQUFjO0FBRWxCLElBQUlILFVBQVU7QUFDWixJQUFJckgsVUFBVXhaLEtBQUt3ZixTQUFTakIsTUFBTSxNQUFNaGlCLEdBQUd5RSxLQUFLOFksU0FBUzs7QUFHM0QsSUFBSSxDQUFDK0csWUFBWSxDQUFDdEIsWUFBWSxVQUFVd0IsVUFBVSxTQUFTO0FBQ3pERSxlQUFlSCxZQUFZO09BQ3RCLElBQUlDLFVBQVUsWUFBWSxDQUFDRixZQUFZdEIsWUFBWSxXQUFXO0FBQ25FMEIsZUFBZUgsWUFBWTtPQUN0QixJQUFJLENBQUNELFlBQVksQ0FBQ3RCLFlBQVksVUFBVUEsWUFBWSxXQUFXO0FBQ3BFLElBQUkyQixXQUFXLEVBQUMzQixZQUFZLGFBQVksTUFBTXZmLE1BQU0sTUFBTUE7QUFDMURpaEIsZUFBZUgsWUFBWSxjQUFjSSxXQUFXO09BQy9DO0FBQ0xGLGNBQWM7O0FBR2hCLElBQUlBLGFBQWE7QUFDZixNQUFNLElBQUkzRixlQUFlNEYsY0FBYzNqQixXQUFXaWhCOztBQUdwRCxJQUFJc0MsVUFBVTtBQUNaLElBQUlNLE1BQU1uaEIsSUFBSTFEO0FBQ2QsS0FBS29lLE9BQ0R5RyxPQUFPUCxHQUNQLG9FQUNBLGtEQUNBQSxHQUNBTztPQUVDO0FBQ0wsS0FBS3pHLE9BQ0QxYSxPQUFPNGdCLEdBQ1AsMENBQ0EsdUNBQ0FBOzs7QUFLUnBILFVBQVVLLFVBQVUsU0FBU3dIO0FBQzdCN0gsVUFBVUssVUFBVSxPQUFPd0g7QUE2QzNCLHFCQUFzQlQsR0FBR3RDLEtBQUs7QUFDNUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSXRlLE1BQU15WixLQUFLLE1BQU0sV0FDakJvSCxXQUFXcEgsS0FBSyxNQUFNLGFBQ3RCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQnFILFlBQVksQ0FBQyxFQUFDdEIsWUFBV0EsVUFBVSxPQUFPLEtBQzFDakIsT0FBTzlFLEtBQUssTUFBTSxTQUNsQjhGLFVBQVVMLEVBQUU3Z0IsS0FBSzJCLEtBQUtXLGVBQ3RCb2dCLFFBQVE3QixFQUFFN2dCLEtBQUt1aUIsR0FBR2pnQixlQUNsQnFnQixjQUFjO0FBRWxCLElBQUlILFVBQVU7QUFDWixJQUFJckgsVUFBVXhaLEtBQUt3ZixTQUFTakIsTUFBTSxNQUFNaGlCLEdBQUd5RSxLQUFLOFksU0FBUzs7QUFHM0QsSUFBSSxDQUFDK0csWUFBWSxDQUFDdEIsWUFBWSxVQUFVd0IsVUFBVSxTQUFTO0FBQ3pERSxlQUFlSCxZQUFZO09BQ3RCLElBQUlDLFVBQVUsWUFBWSxDQUFDRixZQUFZdEIsWUFBWSxXQUFXO0FBQ25FMEIsZUFBZUgsWUFBWTtPQUN0QixJQUFJLENBQUNELFlBQVksQ0FBQ3RCLFlBQVksVUFBVUEsWUFBWSxXQUFXO0FBQ3BFLElBQUkyQixXQUFXLEVBQUMzQixZQUFZLGFBQVksTUFBTXZmLE1BQU0sTUFBTUE7QUFDMURpaEIsZUFBZUgsWUFBWSxjQUFjSSxXQUFXO09BQy9DO0FBQ0xGLGNBQWM7O0FBR2hCLElBQUlBLGFBQWE7QUFDZixNQUFNLElBQUkzRixlQUFlNEYsY0FBYzNqQixXQUFXaWhCOztBQUdwRCxJQUFJc0MsVUFBVTtBQUNaLElBQUlNLE1BQU1uaEIsSUFBSTFEO0FBQ2QsS0FBS29lLE9BQ0R5RyxNQUFNUCxHQUNOLGlFQUNBLHNEQUNBQSxHQUNBTztPQUVDO0FBQ0wsS0FBS3pHLE9BQ0QxYSxNQUFNNGdCLEdBQ04sdUNBQ0EsMENBQ0FBOzs7QUFLUnBILFVBQVVLLFVBQVUsU0FBU3lIO0FBQzdCOUgsVUFBVUssVUFBVSxNQUFNeUg7QUFDMUI5SCxVQUFVSyxVQUFVLFlBQVl5SDtBQTRDaEMsb0JBQXFCVixHQUFHdEMsS0FBSztBQUMzQixJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixJQUFJdGUsTUFBTXlaLEtBQUssTUFBTSxXQUNqQm9ILFdBQVdwSCxLQUFLLE1BQU0sYUFDdEIrRixVQUFVL0YsS0FBSyxNQUFNLFlBQ3JCcUgsWUFBWSxDQUFDLEVBQUN0QixZQUFXQSxVQUFVLE9BQU8sS0FDMUNqQixPQUFPOUUsS0FBSyxNQUFNLFNBQ2xCOEYsVUFBVUwsRUFBRTdnQixLQUFLMkIsS0FBS1csZUFDdEJvZ0IsUUFBUTdCLEVBQUU3Z0IsS0FBS3VpQixHQUFHamdCLGVBQ2xCcWdCLGNBQWM7QUFFbEIsSUFBSUgsVUFBVTtBQUNaLElBQUlySCxVQUFVeFosS0FBS3dmLFNBQVNqQixNQUFNLE1BQU1oaUIsR0FBR3lFLEtBQUs4WSxTQUFTOztBQUczRCxJQUFJLENBQUMrRyxZQUFZLENBQUN0QixZQUFZLFVBQVV3QixVQUFVLFNBQVM7QUFDekRFLGVBQWVILFlBQVk7T0FDdEIsSUFBSUMsVUFBVSxZQUFZLENBQUNGLFlBQVl0QixZQUFZLFdBQVc7QUFDbkUwQixlQUFlSCxZQUFZO09BQ3RCLElBQUksQ0FBQ0QsWUFBWSxDQUFDdEIsWUFBWSxVQUFVQSxZQUFZLFdBQVc7QUFDcEUsSUFBSTJCLFdBQVcsRUFBQzNCLFlBQVksYUFBWSxNQUFNdmYsTUFBTSxNQUFNQTtBQUMxRGloQixlQUFlSCxZQUFZLGNBQWNJLFdBQVc7T0FDL0M7QUFDTEYsY0FBYzs7QUFHaEIsSUFBSUEsYUFBYTtBQUNmLE1BQU0sSUFBSTNGLGVBQWU0RixjQUFjM2pCLFdBQVdpaEI7O0FBR3BELElBQUlzQyxVQUFVO0FBQ1osSUFBSU0sTUFBTW5oQixJQUFJMUQ7QUFDZCxLQUFLb2UsT0FDRHlHLE9BQU9QLEdBQ1AsbUVBQ0Esa0RBQ0FBLEdBQ0FPO09BRUM7QUFDTCxLQUFLekcsT0FDRDFhLE9BQU80Z0IsR0FDUCx5Q0FDQSx1Q0FDQUE7OztBQUtScEgsVUFBVUssVUFBVSxRQUFRMEg7QUFDNUIvSCxVQUFVSyxVQUFVLE9BQU8wSDtBQTZDM0IvSCxVQUFVSyxVQUFVLFVBQVUsVUFBVTJILE9BQU9DLFFBQVFuRCxLQUFLO0FBQzFELElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNLFdBQ2pCb0gsV0FBV3BILEtBQUssTUFBTSxhQUN0QitGLFVBQVUvRixLQUFLLE1BQU0sWUFDckJxSCxZQUFZLENBQUMsRUFBQ3RCLFlBQVdBLFVBQVUsT0FBTyxLQUMxQ2pCLE9BQU85RSxLQUFLLE1BQU0sU0FDbEI4RixVQUFVTCxFQUFFN2dCLEtBQUsyQixLQUFLVyxlQUN0QitnQixZQUFZeEMsRUFBRTdnQixLQUFLbWpCLE9BQU83Z0IsZUFDMUJnaEIsYUFBYXpDLEVBQUU3Z0IsS0FBS29qQixRQUFROWdCLGVBQzVCcWdCLGNBQWMsTUFDZFksUUFBUSxFQUFDRixjQUFjLFVBQVVDLGVBQWUsV0FDNUNILE1BQU1LLGdCQUFnQixPQUFPSixPQUFPSSxnQkFDcENMLFFBQVEsT0FBT0M7QUFFdkIsSUFBSVosVUFBVTtBQUNaLElBQUlySCxVQUFVeFosS0FBS3dmLFNBQVNqQixNQUFNLE1BQU1oaUIsR0FBR3lFLEtBQUs4WSxTQUFTOztBQUczRCxJQUFJLENBQUMrRyxZQUFZLENBQUN0QixZQUFZLFVBQVUsQ0FBQ21DLGNBQWMsVUFBVUMsZUFBZSxVQUFVO0FBQ3hGVixlQUFlSCxZQUFZO09BQ3RCLElBQUksQ0FBQ1ksY0FBYyxZQUFZQyxlQUFlLGFBQWEsQ0FBQ2QsWUFBWXRCLFlBQVksV0FBVztBQUNwRzBCLGVBQWVILFlBQVk7T0FDdEIsSUFBSSxDQUFDRCxZQUFZLENBQUN0QixZQUFZLFVBQVVBLFlBQVksV0FBVztBQUNwRSxJQUFJMkIsV0FBVyxFQUFDM0IsWUFBWSxhQUFZLE1BQU12ZixNQUFNLE1BQU1BO0FBQzFEaWhCLGVBQWVILFlBQVksY0FBY0ksV0FBVztPQUMvQztBQUNMRixjQUFjOztBQUdoQixJQUFJQSxhQUFhO0FBQ2YsTUFBTSxJQUFJM0YsZUFBZTRGLGNBQWMzakIsV0FBV2loQjs7QUFHcEQsSUFBSXNDLFVBQVU7QUFDWixJQUFJTSxNQUFNbmhCLElBQUkxRDtBQUNkLEtBQUtvZSxPQUNEeUcsT0FBT0ssU0FBU0wsT0FBT00sUUFDdkIsOENBQThDRyxPQUM5QyxrREFBa0RBO09BRWpEO0FBQ0wsS0FBS2xILE9BQ0QxYSxPQUFPd2hCLFNBQVN4aEIsT0FBT3loQixRQUN2QixtQ0FBbUNHLE9BQ25DLHVDQUF1Q0E7OztBQTRDL0MsMEJBQTJCbmtCLGFBQWE2Z0IsS0FBSztBQUMzQyxJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUUvQixJQUFJdlgsU0FBUzBTLEtBQUssTUFBTTtBQUN4QixJQUFJOEUsT0FBTzlFLEtBQUssTUFBTTtBQUN0QixJQUFJK0YsVUFBVS9GLEtBQUssTUFBTTtBQUV6QixJQUFJO0FBQ0YsSUFBSXFJLGVBQWUvYSxrQkFBa0J0SjtTQUM5QjJpQixLQUFLO0FBQ1osSUFBSUEsZUFBZTJCLFdBQVc7QUFDNUJ2QyxVQUFVQSxVQUFVQSxVQUFVLE9BQU87QUFDckMsTUFBTSxJQUFJbkUsZUFDUm1FLFVBQVUsc0RBQ05OLEVBQUU3Z0IsS0FBS1osZUFBZSxlQUMxQkgsV0FDQWloQjs7QUFHSixNQUFNNkI7O0FBR1IsSUFBSTloQixPQUFPNGdCLEVBQUU3QixRQUFRNWY7QUFDckIsSUFBSWEsU0FBUyxNQUFNO0FBQ2pCQSxPQUFPOztBQUdULEtBQUtvYyxPQUNEb0gsY0FDQSwyQ0FBMkN4akIsTUFDM0MsK0NBQStDQTs7QUFFcEQ7QUFFRGtiLFVBQVVLLFVBQVUsY0FBY21JO0FBQ2xDeEksVUFBVUssVUFBVSxjQUFjbUk7QUFpSGxDLHdCQUF5QjFqQixNQUFNMmdCLEtBQUtYLEtBQUs7QUFDdkMsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFFL0IsSUFBSTJELFdBQVd4SSxLQUFLLE1BQU0sV0FDdEJ5SSxRQUFRekksS0FBSyxNQUFNLFFBQ25CK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQnpaLE1BQU15WixLQUFLLE1BQU0sV0FDakI4RSxPQUFPOUUsS0FBSyxNQUFNO0FBRXRCLElBQUl3SSxZQUFZQyxPQUFPO0FBQ3JCMUMsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBQ3JDLE1BQU0sSUFBSW5FLGVBQ1JtRSxVQUFVLG9EQUNWbGlCLFdBQ0FpaEI7O0FBSUosSUFBSXZlLFFBQVEsUUFBUUEsUUFBUTFDLFdBQVc7QUFDckNraUIsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBQ3JDLE1BQU0sSUFBSW5FLGVBQ1JtRSxVQUFVLHVDQUNWbGlCLFdBQ0FpaEI7O0FBSUosSUFBSW1CLFNBQVNqRyxLQUFLLE1BQU0sU0FDcEJnRyxTQUFTaEcsS0FBSyxNQUFNLFdBQ3BCMEksV0FBV0YsV0FBVy9DLEVBQUUvQixZQUFZbmQsS0FBSzFCLFFBQVEsTUFDakRVLFFBQVFpakIsV0FBV0UsU0FBU25qQixRQUFRZ0IsSUFBSTFCO0FBRTVDLElBQUlxaEIsYUFBYTtBQUNqQixJQUFJRCxRQUFRQyxjQUFjO0FBQzFCLElBQUl1QyxPQUFPdkMsY0FBYztBQUN6QixJQUFJc0MsVUFBVXRDLGNBQWM7QUFDNUJBLGNBQWM7QUFFZCxJQUFJdkM7QUFDSixJQUFJOEUsT0FBTzlFLGNBQWMzTixPQUFPNEgsVUFBVStLLGVBQWVuSixLQUFLalosS0FBSzFCLFlBQzlELElBQUkyakIsVUFBVTdFLGNBQWMrRSxTQUFTRSxhQUNyQ2pGLGNBQWM4QixFQUFFOUIsWUFBWXBkLEtBQUsxQjtBQU90QyxJQUFJLENBQUNtaEIsVUFBVW5iLFVBQVVoSSxXQUFXLEdBQUc7QUFDckMsS0FBS29lLE9BQ0QwQyxhQUNBLDhCQUE4QnVDLGFBQWFULEVBQUVsQyxRQUFRMWUsT0FDckQsa0NBQWtDcWhCLGFBQWFULEVBQUVsQyxRQUFRMWU7O0FBRy9ELElBQUlnRyxVQUFVaEksU0FBUyxHQUFHO0FBQ3hCLEtBQUtvZSxPQUNEMEMsZUFBZSxDQUFDc0MsU0FBU1IsRUFBRTlYLElBQUk2WCxLQUFLamdCLFNBQVNpZ0IsUUFBUWpnQixRQUNyRCw4QkFBOEIyZ0IsYUFBYVQsRUFBRWxDLFFBQVExZSxRQUFRLDhCQUM3RCxrQ0FBa0NxaEIsYUFBYVQsRUFBRWxDLFFBQVExZSxRQUFRLGNBQ2pFMmdCLEtBQ0FqZ0I7O0FBSU55YSxLQUFLLE1BQU0sVUFBVXphOztBQUd2QndhLFVBQVVLLFVBQVUsWUFBWXlJO0FBRWhDLDJCQUE0QmhrQixNQUFNVSxPQUFPc2YsS0FBSztBQUM1QzdFLEtBQUssTUFBTSxPQUFPO0FBQ2xCNkksZUFBZUMsTUFBTSxNQUFNamU7O0FBRzdCa1YsVUFBVUssVUFBVSxlQUFlMkk7QUFDbkNoSixVQUFVSyxVQUFVLG1CQUFtQjJJO0FBeUh2QyxxQ0FBc0Nsa0IsTUFBTXFoQixZQUFZckIsS0FBSztBQUMzRCxJQUFJLE9BQU9xQixlQUFlLFVBQVU7QUFDbENyQixNQUFNcUI7QUFDTkEsYUFBYTs7QUFFZixJQUFJckIsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSXRlLE1BQU15WixLQUFLLE1BQU07QUFDckIsSUFBSWdKLG1CQUFtQmhULE9BQU84SSx5QkFBeUI5SSxPQUFPelAsTUFBTTFCO0FBQ3BFLElBQUlta0Isb0JBQW9COUMsWUFBWTtBQUNsQyxLQUFLakYsT0FDRHdFLEVBQUU5WCxJQUFJdVksWUFBWThDLG1CQUNsQiw4Q0FBOEN2RCxFQUFFbEMsUUFBUTFlLFFBQVEsMEJBQTBCNGdCLEVBQUVsQyxRQUFRMkMsY0FBYyxXQUFXVCxFQUFFbEMsUUFBUXlGLG1CQUN2SSw4Q0FBOEN2RCxFQUFFbEMsUUFBUTFlLFFBQVEsOEJBQThCNGdCLEVBQUVsQyxRQUFRMkMsYUFDeEdBLFlBQ0E4QyxrQkFDQTtPQUVDO0FBQ0wsS0FBSy9ILE9BQ0QrSCxrQkFDQSw2REFBNkR2RCxFQUFFbEMsUUFBUTFlLE9BQ3ZFLGlFQUFpRTRnQixFQUFFbEMsUUFBUTFlOztBQUdqRm1iLEtBQUssTUFBTSxVQUFVZ0o7O0FBR3ZCakosVUFBVUssVUFBVSx5QkFBeUI2STtBQUM3Q2xKLFVBQVVLLFVBQVUsNkJBQTZCNkk7QUEwRGpELDZCQUE4QjtBQUM1QmpKLEtBQUssTUFBTSxZQUFZOztBQUd6QixzQkFBdUJtSCxHQUFHdEMsS0FBSztBQUM3QixJQUFJQSxLQUFLN0UsS0FBSyxNQUFNLFdBQVc2RTtBQUMvQixJQUFJdGUsTUFBTXlaLEtBQUssTUFBTSxXQUNqQitGLFVBQVUvRixLQUFLLE1BQU0sWUFDckI4RSxPQUFPOUUsS0FBSyxNQUFNO0FBQ3RCLElBQUlELFVBQVV4WixLQUFLd2YsU0FBU2pCLE1BQU0sTUFBTWhpQixHQUFHeUUsS0FBSzhZLFNBQVM7QUFDekQsSUFBSXFILE1BQU1uaEIsSUFBSTFEO0FBRWQsS0FBS29lLE9BQ0R5RyxPQUFPUCxHQUNQLDhEQUNBLG1EQUNBQSxHQUNBTzs7QUFJTjNILFVBQVVpRSxtQkFBbUIsVUFBVWtGLGNBQWNDO0FBQ3JEcEosVUFBVWlFLG1CQUFtQixZQUFZa0YsY0FBY0M7QUE2QnZELHFCQUFxQkMsSUFBSXZFLEtBQUs7QUFDNUIsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSXRlLE1BQU15WixLQUFLLE1BQU07QUFDckIsS0FBS2lCLE9BQ0RtSSxHQUFHQyxLQUFLOWlCLE1BQ1IsK0JBQStCNmlCLElBQy9CLG1DQUFtQ0E7O0FBSXpDckosVUFBVUssVUFBVSxTQUFTa0o7QUFDN0J2SixVQUFVSyxVQUFVLFdBQVdrSjtBQTJCL0J2SixVQUFVSyxVQUFVLFVBQVUsVUFBVW1KLEtBQUsxRSxLQUFLO0FBQ2hELElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNLFdBQ2pCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVXhaLEtBQUt3ZixTQUFTakIsTUFBTSxNQUFNMEUsR0FBR3psQixFQUFFO0FBRTdDLEtBQUtrZCxPQUNELENBQUMxYSxJQUFJd2IsUUFBUXdILE1BQ2IsaUNBQWlDOUQsRUFBRWxDLFFBQVFnRyxNQUMzQyxxQ0FBcUM5RCxFQUFFbEMsUUFBUWdHOztBQTRHckQsb0JBQXFCdFQsTUFBTTtBQUN6QixJQUFJMVAsTUFBTXlaLEtBQUssTUFBTSxXQUNqQjhGLFVBQVVMLEVBQUU3Z0IsS0FBSzJCLE1BQ2pCa2pCLFdBQVdoRSxFQUFFN2dCLEtBQUtxUixPQUNsQjZPLE9BQU85RSxLQUFLLE1BQU0sU0FDbEJpRyxTQUFTakcsS0FBSyxNQUFNLFNBQ3BCdUosS0FDQUcsVUFBVSxJQUNWcEUsS0FBSyxNQUNMUyxVQUFVL0YsS0FBSyxNQUFNO0FBRXpCK0YsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBQ3JDLElBQUk0RCxlQUFlNUQsVUFBVTtBQUU3QixJQUFJRCxZQUFZLFNBQVNBLFlBQVksT0FBTztBQUMxQzRELFVBQVV6RCxTQUFTLFlBQVk7QUFDL0JWLFNBQVM7QUFHVGhmLElBQUk2YixRQUFRLFVBQVVvRCxLQUFLbkQsS0FBSztBQUFFa0QsT0FBT3hULEtBQUtzUTs7QUFFOUMsSUFBSW9ILGFBQWEsU0FBUztBQUN4QnhULE9BQU8yVCxNQUFNaE0sVUFBVTdKLE1BQU15TCxLQUFLM1U7O09BRy9CO0FBQ0wwYSxTQUFTRSxFQUFFckIsMkJBQTJCN2Q7QUFFdEMsUUFBUWtqQjtLQUNEO0FBQ0gsSUFBSTVlLFVBQVVoSSxTQUFTLEdBQUc7QUFDeEIsTUFBTSxJQUFJK2UsZUFBZStILGNBQWM5bEIsV0FBV2loQjs7QUFFcEQ7S0FDRztBQUNILElBQUlqYSxVQUFVaEksU0FBUyxHQUFHO0FBQ3hCLE1BQU0sSUFBSStlLGVBQWUrSCxjQUFjOWxCLFdBQVdpaEI7O0FBRXBEN08sT0FBT0QsT0FBT0MsS0FBS0E7QUFDbkI7O0FBRUFBLE9BQU8yVCxNQUFNaE0sVUFBVTdKLE1BQU15TCxLQUFLM1U7O0FBSXRDb0wsT0FBT0EsS0FBSzRULElBQUksVUFBVXJFLEtBQUs7QUFDN0IsT0FBTyxPQUFPQSxRQUFRLFdBQVdBLE1BQU05RCxPQUFPOEQ7OztBQUlsRCxJQUFJLENBQUN2UCxLQUFLcFQsUUFBUTtBQUNoQixNQUFNLElBQUkrZSxlQUFlbUUsVUFBVSxpQkFBaUJsaUIsV0FBV2loQjs7QUFHakUsSUFBSTRDLE1BQU16UixLQUFLcFQsUUFDWGluQixNQUFNOUosS0FBSyxNQUFNLFFBQ2pCK0osTUFBTS9KLEtBQUssTUFBTSxRQUNqQjNELFdBQVdwRyxNQUNYc1A7QUFFSixJQUFJLENBQUN1RSxPQUFPLENBQUNDLEtBQUs7QUFDaEJBLE1BQU07O0FBSVIsSUFBSUQsS0FBSztBQUNQeEUsS0FBS2pKLFNBQVN6UCxLQUFLLFVBQVNvZCxhQUFhO0FBQ3ZDLE9BQU96RSxPQUFPM1ksS0FBSyxVQUFTcWQsV0FBVztBQUNyQyxJQUFJaEUsUUFBUTtBQUNWLE9BQU9SLEVBQUU5WCxJQUFJcWMsYUFBYUM7T0FDckI7QUFDTCxPQUFPRCxnQkFBZ0JDOzs7OztBQU8vQixJQUFJRixLQUFLO0FBQ1B6RSxLQUFLakosU0FBUzZOLE1BQU0sVUFBU0YsYUFBYTtBQUN4QyxPQUFPekUsT0FBTzNZLEtBQUssVUFBU3FkLFdBQVc7QUFDckMsSUFBSWhFLFFBQVE7QUFDVixPQUFPUixFQUFFOVgsSUFBSXFjLGFBQWFDO09BQ3JCO0FBQ0wsT0FBT0QsZ0JBQWdCQzs7OztBQUs3QixJQUFJLENBQUNqSyxLQUFLLE1BQU0sYUFBYTtBQUMzQnNGLEtBQUtBLE1BQU1yUCxLQUFLcFQsVUFBVTBpQixPQUFPMWlCOzs7QUFLckMsSUFBSTZrQixNQUFNLEdBQUc7QUFDWHpSLE9BQU9BLEtBQUs0VCxJQUFJLFVBQVN4SCxLQUFLO0FBQzVCLE9BQU9vRCxFQUFFbEMsUUFBUWxCOztBQUVuQixJQUFJOEgsT0FBT2xVLEtBQUttVTtBQUNoQixJQUFJTCxLQUFLO0FBQ1BSLE1BQU10VCxLQUFLb1UsS0FBSyxRQUFRLFdBQVdGOztBQUVyQyxJQUFJTCxLQUFLO0FBQ1BQLE1BQU10VCxLQUFLb1UsS0FBSyxRQUFRLFVBQVVGOztPQUUvQjtBQUNMWixNQUFNOUQsRUFBRWxDLFFBQVF0TixLQUFLOztBQUl2QnNULE1BQU0sQ0FBQzdCLE1BQU0sSUFBSSxVQUFVLFVBQVU2QjtBQUdyQ0EsTUFBTSxDQUFDdkosS0FBSyxNQUFNLGNBQWMsYUFBYSxXQUFXdUo7QUFHeEQsS0FBS3RJLE9BQ0RxRSxJQUNBLHlCQUF5Qm9FLFVBQVVILEtBQ25DLDZCQUE2QkcsVUFBVUgsS0FDdkNsTixTQUFTdEksTUFBTSxHQUFHdVcsS0FBSzdFLEVBQUV2QixtQkFDekJxQixPQUFPK0UsS0FBSzdFLEVBQUV2QixtQkFDZDs7QUFJTm5FLFVBQVVLLFVBQVUsUUFBUW1LO0FBQzVCeEssVUFBVUssVUFBVSxPQUFPbUs7QUF1SzNCLHNCQUF1QkMsV0FBV0MsZUFBZTVGLEtBQUs7QUFDcEQsSUFBSUEsS0FBSzdFLEtBQUssTUFBTSxXQUFXNkU7QUFDL0IsSUFBSXRlLE1BQU15WixLQUFLLE1BQU0sV0FDakI4RSxPQUFPOUUsS0FBSyxNQUFNLFNBQ2xCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQmdHLFNBQVNoRyxLQUFLLE1BQU0sYUFBYTtBQUNyQyxJQUFJRCxVQUFVeFosS0FBS3dmLFNBQVNqQixNQUFNLE1BQU0wRSxHQUFHemxCLEVBQUU7QUFFN0MsSUFBSXltQixxQkFBcUJoSixVQUFVLE9BQU9nSixjQUFjLFVBQVU7QUFDaEVDLGdCQUFnQkQ7QUFDaEJBLFlBQVk7O0FBR2QsSUFBSUU7QUFDSixJQUFJO0FBQ0Zua0I7U0FDT29nQixLQUFLO0FBQ1orRCxZQUFZL0Q7O0FBS2QsSUFBSWdFLHNCQUFzQkgsY0FBYzNtQixhQUFhNG1CLGtCQUFrQjVtQjtBQUl2RSxJQUFJK21CLG9CQUFvQmhLLFFBQVE0SixhQUFhQztBQUM3QyxJQUFJSSxnQkFBZ0I7QUFDcEIsSUFBSUMsb0JBQW9CO0FBR3hCLElBQUlILHVCQUF1QixDQUFDQSx1QkFBdUIsQ0FBQzNFLFFBQVE7QUFFMUQsSUFBSStFLGtCQUFrQjtBQUN0QixJQUFJUCxxQkFBcUIxSCxPQUFPO0FBQzlCaUksa0JBQWtCO09BQ2IsSUFBSVAsV0FBVztBQUNwQk8sa0JBQWtCdEYsRUFBRXBCLFdBQVcyRyxtQkFBbUJSOztBQUdwRCxLQUFLdkosT0FDRHlKLFdBQ0EsK0JBQStCSyxpQkFDL0IsZ0VBQ0FQLGFBQWFBLFVBQVVTLFlBQ3ZCLENBQUNQLHFCQUFxQjVILFFBQ3BCNEgsVUFBVU8sYUFBYSxDQUFDLE9BQU9QLGNBQWMsV0FBV0EsWUFBWUEsYUFDNUNqRixFQUFFcEIsV0FBVzJHLG1CQUFtQk47O0FBSWhFLElBQUlGLGFBQWFFLFdBQVc7QUFFMUIsSUFBSUYscUJBQXFCMUgsT0FBTztBQUM5QixJQUFJb0ksdUJBQXVCekYsRUFBRXBCLFdBQVc4RyxtQkFBbUJULFdBQVdGO0FBRXRFLElBQUlVLHlCQUF5QmxGLFFBQVE7QUFHbkMsSUFBSTRFLHFCQUFxQjVFLFFBQVE7QUFDL0I2RSxnQkFBZ0I7T0FDWDtBQUNMLEtBQUs1SixPQUNEK0UsUUFDQSwwREFDQSx5Q0FBeUMsQ0FBQzBFLGFBQWEsQ0FBQzFFLFNBQVMsMkJBQTJCLEtBQzVGd0UsVUFBVVMsWUFDVlAsVUFBVU87Ozs7QUFNcEIsSUFBSUcsMEJBQTBCM0YsRUFBRXBCLFdBQVd1QyxzQkFBc0I4RCxXQUFXRjtBQUM1RSxJQUFJWSw0QkFBNEJwRixRQUFRO0FBQ3RDLElBQUk0RSxxQkFBcUI1RSxRQUFRO0FBQzdCNkUsZ0JBQWdCO09BQ2I7QUFDTCxLQUFLNUosT0FDRCtFLFFBQ0EsMERBQ0EseUNBQXlDLENBQUMwRSxZQUFZLDJCQUEyQixLQUNqRixDQUFDRixxQkFBcUIxSCxRQUFRMEgsVUFBVVMsYUFBYVQsYUFBYS9FLEVBQUVwQixXQUFXMkcsbUJBQW1CUixhQUNsRyxDQUFDRSxxQkFBcUI1SCxRQUFRNEgsVUFBVU8sYUFBYVAsYUFBYWpGLEVBQUVwQixXQUFXMkcsbUJBQW1CTjs7OztBQU01RyxJQUFJQSxhQUFhRCxrQkFBa0I1bUIsYUFBYTRtQixrQkFBa0IsTUFBTTtBQUV0RSxJQUFJWSxjQUFjO0FBQ2xCLElBQUlaLHlCQUF5QmpKLFFBQVE7QUFDbkM2SixjQUFjOztBQUdoQixJQUFJQyxzQkFBc0I3RixFQUFFcEIsV0FBV2tILGtCQUFrQmIsV0FBV0Q7QUFDcEUsSUFBSWEsd0JBQXdCdEYsUUFBUTtBQUNsQyxJQUFJNEUscUJBQXFCNUUsUUFBUTtBQUM3QjhFLG9CQUFvQjtPQUNqQjtBQUNMLEtBQUs3SixPQUNIK0UsUUFDRSxxQ0FBcUNxRixjQUFjLDBCQUNuRCx5Q0FBeUNBLGNBQWMsV0FDdERaLGVBQ0FoRixFQUFFcEIsV0FBV2hCLFdBQVdxSDs7OztBQU9uQyxJQUFJRyxpQkFBaUJDLG1CQUFtQjtBQUN0QyxLQUFLN0osT0FDSCtFLFFBQ0UsMERBQ0EseUNBQXlDLENBQUMwRSxZQUFZLDJCQUEyQixLQUNqRixDQUFDRixxQkFBcUIxSCxRQUFRMEgsVUFBVVMsYUFBYVQsYUFBYS9FLEVBQUVwQixXQUFXMkcsbUJBQW1CUixhQUNsRyxDQUFDRSxxQkFBcUI1SCxRQUFRNEgsVUFBVU8sYUFBYVAsYUFBYWpGLEVBQUVwQixXQUFXMkcsbUJBQW1CTjs7QUFJeEcxSyxLQUFLLE1BQU0sVUFBVTBLOztBQUN0QjtBQUVEM0ssVUFBVUssVUFBVSxTQUFTb0w7QUFDN0J6TCxVQUFVSyxVQUFVLFVBQVVvTDtBQUM5QnpMLFVBQVVLLFVBQVUsU0FBU29MO0FBbUU3QixtQkFBb0JDLFFBQVE1RyxLQUFLO0FBQy9CLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNLFdBQ2pCMEwsU0FBUzFMLEtBQUssTUFBTSxXQUNwQnpFLFVBQVUsRUFBQyxlQUFlLE9BQU9oVixPQUFPLENBQUNtbEIsV0FDdkNubEIsSUFBSXFYLFVBQVU2TixVQUNkbGxCLElBQUlrbEI7QUFFVixLQUFLeEssT0FDRCxlQUFlLE9BQU8xRixTQUN0QixvQ0FBb0NrSyxFQUFFbEMsUUFBUWtJLFNBQzlDLHdDQUF3Q2hHLEVBQUVsQyxRQUFRa0k7O0FBSXhEMUwsVUFBVUssVUFBVSxhQUFhdUw7QUFDakM1TCxVQUFVSyxVQUFVLGNBQWN1TDtBQXNCbEM1TCxVQUFVOEQsWUFBWSxVQUFVLFlBQVk7QUFDMUM3RCxLQUFLLE1BQU0sVUFBVTs7QUF5Q3ZCLGlCQUFrQjRMLFNBQVMvRyxLQUFLO0FBQzlCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNO0FBQ3JCLElBQUl6SCxTQUFTcVQsUUFBUXJsQjtBQUNyQixLQUFLMGEsT0FDRDFJLFFBQ0EsaUNBQWlDa04sRUFBRWpDLFdBQVdvSSxVQUM5QyxvQ0FBb0NuRyxFQUFFakMsV0FBV29JLFVBQ2pENUwsS0FBSyxNQUFNLFlBQVksUUFBUSxNQUMvQnpIOztBQUlOd0gsVUFBVUssVUFBVSxXQUFXeUw7QUFDL0I5TCxVQUFVSyxVQUFVLGFBQWF5TDtBQXdDakMsaUJBQWlCeFAsVUFBVXlQLE9BQU9qSCxLQUFLO0FBQ3JDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNLFdBQ2pCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFFdEIsSUFBSUQsVUFBVXhaLEtBQUt3ZixTQUFTakIsTUFBTSxNQUFNMEUsR0FBR3psQixFQUFFO0FBQzdDLElBQUksT0FBT3NZLGFBQWEsWUFBWSxPQUFPeVAsVUFBVSxVQUFVO0FBQzdEL0YsVUFBVUEsVUFBVUEsVUFBVSxPQUFPO0FBQ3JDLE1BQU0sSUFBSW5FLGVBQ05tRSxVQUFVLDZEQUNWbGlCLFdBQ0FpaEI7O0FBSU4sS0FBSzdELE9BQ0Q4SyxLQUFLQyxJQUFJemxCLE1BQU04VixhQUFheVAsT0FDNUIscUNBQXFDelAsV0FBVyxVQUFVeVAsT0FDMUQseUNBQXlDelAsV0FBVyxVQUFVeVA7O0FBSXBFL0wsVUFBVUssVUFBVSxXQUFXNkw7QUFDL0JsTSxVQUFVSyxVQUFVLGlCQUFpQjZMO0FBR3JDLG9CQUFvQkMsUUFBUUMsVUFBVUMsS0FBS0MsVUFBVUMsU0FBUztBQUM1RCxJQUFJLENBQUNELFVBQVU7QUFDYixJQUFJSCxPQUFPcnBCLFdBQVdzcEIsU0FBU3RwQixRQUFRLE9BQU87QUFDOUNzcEIsV0FBV0EsU0FBU3BZOztBQUd0QixPQUFPbVksT0FBT2hDLE1BQU0sVUFBU3FDLE1BQU1DLEtBQUs7QUFDdEMsSUFBSUYsU0FBUyxPQUFPRixNQUFNQSxJQUFJRyxNQUFNSixTQUFTSyxRQUFRRCxTQUFTSixTQUFTSztBQUV2RSxJQUFJLENBQUNKLEtBQUs7QUFDUixJQUFJSyxXQUFXTixTQUFTcEssUUFBUXdLO0FBQ2hDLElBQUlFLGFBQWEsQ0FBQyxHQUFHLE9BQU87QUFHNUIsSUFBSSxDQUFDSixVQUFVRixTQUFTTyxPQUFPRCxVQUFVO0FBQ3pDLE9BQU87O0FBR1QsT0FBT04sU0FBU3ZmLEtBQUssVUFBUytmLE9BQU9GLFVBQVU7QUFDN0MsSUFBSSxDQUFDTCxJQUFJRyxNQUFNSSxRQUFRLE9BQU87QUFHOUIsSUFBSSxDQUFDTixVQUFVRixTQUFTTyxPQUFPRCxVQUFVO0FBQ3pDLE9BQU87Ozs7QUEwRWIxTSxVQUFVSyxVQUFVLFdBQVcsVUFBVThMLFFBQVFySCxLQUFLO0FBQ3BELElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl0ZSxNQUFNeVosS0FBSyxNQUFNLFdBQ2pCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFFdEIsSUFBSUQsVUFBVXhaLEtBQUt3ZixTQUFTakIsTUFBTSxNQUFNaGlCLEdBQUdZLEdBQUdtaUIsR0FBRztBQUNqRCxJQUFJOUYsVUFBVW1NLFFBQVFuRyxTQUFTakIsTUFBTSxNQUFNaGlCLEdBQUdZLEdBQUdtaUIsR0FBRztBQUVwRCxJQUFJd0csV0FBV3JNLEtBQUssTUFBTTtBQUMxQixJQUFJc00sVUFBVXRNLEtBQUssTUFBTTtBQUV6QixJQUFJNE0sU0FBU0MsU0FBU0MsZUFBZUM7QUFFckMsSUFBSVYsVUFBVTtBQUNaTyxVQUFVTixVQUFVLHdCQUF3QjtBQUM1Q08sVUFBVSw0QkFBNEJELFVBQVU7QUFDaERFLGdCQUFnQixnQ0FBZ0NGLFVBQVU7T0FDckQ7QUFDTEEsVUFBVU4sVUFBVSxvQkFBb0I7QUFDeENPLFVBQVUsdUNBQXVDRCxVQUFVO0FBQzNERSxnQkFBZ0IsMkNBQTJDRixVQUFVOztBQUd2RSxJQUFJUixNQUFNcE0sS0FBSyxNQUFNLFVBQVV5RixFQUFFOVgsTUFBTTlKO0FBRXZDLEtBQUtvZCxPQUNEK0wsV0FBV2QsUUFBUTNsQixLQUFLNmxCLEtBQUtDLFVBQVVDLFVBQ3ZDTyxTQUNBQyxlQUNBWixRQUNBM2xCLEtBQ0E7O0FBa0NOLGVBQWdCMG1CLE1BQU1wSSxLQUFLO0FBQ3pCLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUl4SSxXQUFXMkQsS0FBSyxNQUFNLFdBQ3RCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVWtOLE1BQU1sSCxTQUFTakIsTUFBTSxNQUFNaGlCLEdBQUdZLEdBQUdtaUIsR0FBRztBQUVsRCxLQUFLNUUsT0FDRGdNLEtBQUtsTCxRQUFRMUYsWUFBWSxDQUFDLEdBQzFCLHdDQUNBLDRDQUNBNFEsTUFDQTVROztBQUlOMEQsVUFBVUssVUFBVSxTQUFTOE07QUFrRzdCLHVCQUF3Qk4sU0FBU3ZmLE1BQU13WCxLQUFLO0FBQzFDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUkvQyxLQUFLOUIsS0FBSyxNQUFNLFdBQ2hCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVStCLElBQUlpRSxTQUFTakIsTUFBTSxNQUFNMEUsR0FBR3psQixFQUFFO0FBRTVDLElBQUlvcEI7QUFDSixJQUFJLENBQUM5ZixNQUFNO0FBQ1QsSUFBSTBTLFVBQVU2TSxTQUFTN0csU0FBU2pCLE1BQU0sTUFBTTBFLEdBQUd6bEIsRUFBRTtBQUNqRG9wQixVQUFVUDtPQUNMO0FBQ0wsSUFBSTdNLFVBQVU2TSxTQUFTN0csU0FBU2pCLE1BQU0sTUFBTWhpQixHQUFHeUUsS0FBSzhZLFNBQVNoVDtBQUM3RDhmLFVBQVVQLFFBQVF2Zjs7QUFHcEJ5VTtBQUVBLElBQUlzTCxRQUFRL2YsU0FBU3hKLGFBQWF3SixTQUFTLE9BQU91ZixZQUFZQSxRQUFRdmY7QUFDdEUsSUFBSWdnQixTQUFTaGdCLFNBQVN4SixhQUFhd0osU0FBUyxPQUFPOGYsVUFBVSxNQUFNOWY7QUFHbkUyUyxLQUFLLE1BQU0sZUFBZXFOO0FBQzFCck4sS0FBSyxNQUFNLHFCQUFxQm1OO0FBQ2hDbk4sS0FBSyxNQUFNLG1CQUFtQm9OO0FBQzlCcE4sS0FBSyxNQUFNLGlCQUFpQjtBQUM1QkEsS0FBSyxNQUFNLGFBQWFvTixVQUFVRDtBQUVsQyxLQUFLbE0sT0FDSGtNLFlBQVlDLE9BQ1YsY0FBY0MsU0FBUyxjQUN2QixjQUFjQSxTQUFTOztBQUk3QnROLFVBQVVLLFVBQVUsVUFBVWtOO0FBQzlCdk4sVUFBVUssVUFBVSxXQUFXa047QUFpRi9CLHlCQUEwQlYsU0FBU3ZmLE1BQU13WCxLQUFLO0FBQzVDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUkvQyxLQUFLOUIsS0FBSyxNQUFNLFdBQ2hCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVStCLElBQUlpRSxTQUFTakIsTUFBTSxNQUFNMEUsR0FBR3psQixFQUFFO0FBRTVDLElBQUlvcEI7QUFDSixJQUFJLENBQUM5ZixNQUFNO0FBQ1QsSUFBSTBTLFVBQVU2TSxTQUFTN0csU0FBU2pCLE1BQU0sTUFBTTBFLEdBQUd6bEIsRUFBRTtBQUNqRG9wQixVQUFVUDtPQUNMO0FBQ0wsSUFBSTdNLFVBQVU2TSxTQUFTN0csU0FBU2pCLE1BQU0sTUFBTWhpQixHQUFHeUUsS0FBSzhZLFNBQVNoVDtBQUM3RDhmLFVBQVVQLFFBQVF2Zjs7QUFJcEIsSUFBSTBTLFVBQVVvTixTQUFTcEgsU0FBU2pCLE1BQU0sTUFBTTBFLEdBQUd6bEIsRUFBRTtBQUVqRCtkO0FBRUEsSUFBSXNMLFFBQVEvZixTQUFTeEosYUFBYXdKLFNBQVMsT0FBT3VmLFlBQVlBLFFBQVF2ZjtBQUN0RSxJQUFJZ2dCLFNBQVNoZ0IsU0FBU3hKLGFBQWF3SixTQUFTLE9BQU84ZixVQUFVLE1BQU05ZjtBQUVuRTJTLEtBQUssTUFBTSxlQUFlcU47QUFDMUJyTixLQUFLLE1BQU0scUJBQXFCbU47QUFDaENuTixLQUFLLE1BQU0sbUJBQW1Cb047QUFDOUJwTixLQUFLLE1BQU0saUJBQWlCO0FBQzVCQSxLQUFLLE1BQU0sYUFBYW9OLFFBQVFEO0FBRWhDLEtBQUtsTSxPQUNIbU0sUUFBUUQsVUFBVSxHQUNoQixjQUFjRSxTQUFTLGdCQUN2QixjQUFjQSxTQUFTOztBQUk3QnROLFVBQVVLLFVBQVUsWUFBWW1OO0FBQ2hDeE4sVUFBVUssVUFBVSxhQUFhbU47QUFpRmpDLHlCQUEwQlgsU0FBU3ZmLE1BQU13WCxLQUFLO0FBQzVDLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBQy9CLElBQUkvQyxLQUFLOUIsS0FBSyxNQUFNLFdBQ2hCK0YsVUFBVS9GLEtBQUssTUFBTSxZQUNyQjhFLE9BQU85RSxLQUFLLE1BQU07QUFDdEIsSUFBSUQsVUFBVStCLElBQUlpRSxTQUFTakIsTUFBTSxNQUFNMEUsR0FBR3psQixFQUFFO0FBRTVDLElBQUlvcEI7QUFDSixJQUFJLENBQUM5ZixNQUFNO0FBQ1QsSUFBSTBTLFVBQVU2TSxTQUFTN0csU0FBU2pCLE1BQU0sTUFBTTBFLEdBQUd6bEIsRUFBRTtBQUNqRG9wQixVQUFVUDtPQUNMO0FBQ0wsSUFBSTdNLFVBQVU2TSxTQUFTN0csU0FBU2pCLE1BQU0sTUFBTWhpQixHQUFHeUUsS0FBSzhZLFNBQVNoVDtBQUM3RDhmLFVBQVVQLFFBQVF2Zjs7QUFJcEIsSUFBSTBTLFVBQVVvTixTQUFTcEgsU0FBU2pCLE1BQU0sTUFBTTBFLEdBQUd6bEIsRUFBRTtBQUVqRCtkO0FBRUEsSUFBSXNMLFFBQVEvZixTQUFTeEosYUFBYXdKLFNBQVMsT0FBT3VmLFlBQVlBLFFBQVF2ZjtBQUN0RSxJQUFJZ2dCLFNBQVNoZ0IsU0FBU3hKLGFBQWF3SixTQUFTLE9BQU84ZixVQUFVLE1BQU05ZjtBQUVuRTJTLEtBQUssTUFBTSxlQUFlcU47QUFDMUJyTixLQUFLLE1BQU0scUJBQXFCbU47QUFDaENuTixLQUFLLE1BQU0sbUJBQW1Cb047QUFDOUJwTixLQUFLLE1BQU0saUJBQWlCO0FBQzVCQSxLQUFLLE1BQU0sYUFBYW1OLFVBQVVDO0FBRWxDLEtBQUtuTSxPQUNIbU0sUUFBUUQsVUFBVSxHQUNoQixjQUFjRSxTQUFTLGdCQUN2QixjQUFjQSxTQUFTOztBQUk3QnROLFVBQVVLLFVBQVUsWUFBWW9OO0FBQ2hDek4sVUFBVUssVUFBVSxhQUFhb047QUFvRWpDLHFCQUFxQjFCLE9BQU9qSCxLQUFLO0FBQy9CLElBQUlBLEtBQUs3RSxLQUFLLE1BQU0sV0FBVzZFO0FBRS9CLElBQUl3SSxTQUFTck4sS0FBSyxNQUFNO0FBQ3hCLElBQUltTixVQUFVbk4sS0FBSyxNQUFNO0FBQ3pCLElBQUlvTixRQUFRcE4sS0FBSyxNQUFNO0FBQ3ZCLElBQUl5TixXQUFXek4sS0FBSyxNQUFNO0FBQzFCLElBQUkwTixZQUFZMU4sS0FBSyxNQUFNO0FBRTNCLElBQUkyTjtBQUNKLElBQUlGLGFBQWEsVUFBVTtBQUN6QkUsYUFBYTVCLEtBQUtDLElBQUlvQixRQUFRRCxhQUFhcEIsS0FBS0MsSUFBSUY7T0FDL0M7QUFDTDZCLGFBQWFELGNBQWMzQixLQUFLQyxJQUFJRjs7QUFHdEMsS0FBSzdLLE9BQ0gwTSxZQUNFLGNBQWNOLFNBQVMsU0FBU0ksV0FBVyxTQUFTM0IsT0FDcEQsY0FBY3VCLFNBQVMsYUFBYUksV0FBVyxTQUFTM0I7O0FBSTlEL0wsVUFBVUssVUFBVSxNQUFNd047QUE4QjFCN04sVUFBVThELFlBQVksY0FBYyxZQUFXO0FBQzdDLElBQUl0ZCxNQUFNeVosS0FBSyxNQUFNO0FBT3JCLElBQUk2TixlQUFldG5CLFFBQVF5UCxPQUFPelAsUUFBUXlQLE9BQU82WCxhQUFhdG5CO0FBRTlELEtBQUswYSxPQUNINE0sY0FDRSxxQ0FDQTs7QUFnQ045TixVQUFVOEQsWUFBWSxVQUFVLFlBQVc7QUFDekMsSUFBSXRkLE1BQU15WixLQUFLLE1BQU07QUFPckIsSUFBSThOLFdBQVd2bkIsUUFBUXlQLE9BQU96UCxPQUFPeVAsT0FBTzhYLFNBQVN2bkIsT0FBTztBQUU1RCxLQUFLMGEsT0FDSDZNLFVBQ0UsaUNBQ0E7O0FBNkJOL04sVUFBVThELFlBQVksVUFBVSxZQUFXO0FBQ3pDLElBQUl0ZCxNQUFNeVosS0FBSyxNQUFNO0FBT3JCLElBQUkrTixXQUFXeG5CLFFBQVF5UCxPQUFPelAsT0FBT3lQLE9BQU8rWCxTQUFTeG5CLE9BQU87QUFFNUQsS0FBSzBhLE9BQ0g4TSxVQUNFLGlDQUNBOztBQXFETmhPLFVBQVU4RCxZQUFZLFVBQVUsVUFBU2dCLEtBQUs7QUFDNUMsSUFBSXRlLE1BQU15WixLQUFLLE1BQU07QUFFckIsS0FBS2lCLE9BQ0QsT0FBTzFhLFFBQVEsWUFBWXluQixTQUFTem5CLE1BQ3BDLDBDQUNBOzs7Ozs7QUN2b0hSd1ksT0FBT0MsVUFBVSxVQUFVamUsTUFBTThnQixNQUFNO0FBQ3JDOWdCLEtBQUtrQyxTQUFTLFVBQVV1aUIsS0FBS2hELFNBQVM7QUFDcEMsT0FBTyxJQUFJemhCLEtBQUtnZixVQUFVeUYsS0FBS2hEOztBQWlCakN6aEIsS0FBS2tDLE9BQU9nckIsT0FBTyxVQUFVMUksUUFBUWxKLFVBQVVtRyxTQUFTMEwsVUFBVTtBQUNoRTFMLFVBQVVBLFdBQVc7QUFDckIsTUFBTSxJQUFJemhCLEtBQUs2Z0IsZUFBZVksU0FBUztBQUNuQytDLFFBQVFBO0FBQ1JsSixVQUFVQTtBQUNWNlIsVUFBVUE7R0FDWG50QixLQUFLa0MsT0FBT2dyQjs7Ozs7O0FDekJuQmxQLE9BQU9DLFVBQVUsVUFBVWplLE1BQU04Z0IsTUFBTTtBQUNyQyxJQUFJOUIsWUFBWWhmLEtBQUtnZjtBQUVyQixzQkFBdUI7QUFFckIsd0JBQXdCO0FBQ3RCLElBQUksZ0JBQWdCMkIsVUFDYixnQkFBZ0J5TSxVQUNoQixnQkFBZ0J2TixXQUNoQixPQUFPd04sV0FBVyxjQUFjLGdCQUFnQkEsUUFBUTtBQUM3RCxPQUFPLElBQUlyTyxVQUFVLEtBQUtzTyxXQUFXLE1BQU1DOztBQUU3QyxPQUFPLElBQUl2TyxVQUFVLE1BQU0sTUFBTXVPOztBQUVuQyxzQkFBc0Ivb0IsT0FBTztBQU8zQnlRLE9BQU8ySixlQUFlLE1BQU0sVUFBVTtBQUNwQ3BhLE9BQU9BO0FBQ1BncEIsWUFBWTtBQUNaOWIsY0FBYztBQUNkK2IsVUFBVTs7O0FBSWR4WSxPQUFPMkosZUFBZTNKLE9BQU80SCxXQUFXLFVBQVU7QUFDaER6VCxLQUFLc2tCO0FBQ0h4a0IsS0FBS3FrQjtBQUNMN2IsY0FBYzs7QUFHbEIsSUFBSXdQLFNBQVM7QUFnQmJBLE9BQU9nTSxPQUFPLFVBQVUxSSxRQUFRbEosVUFBVW1HLFNBQVMwTCxVQUFVO0FBQzNEMUwsVUFBVUEsV0FBVztBQUNyQixNQUFNLElBQUl6aEIsS0FBSzZnQixlQUFlWSxTQUFTO0FBQ25DK0MsUUFBUUE7QUFDUmxKLFVBQVVBO0FBQ1Y2UixVQUFVQTtHQUNYak0sT0FBT2dNOztBQWtCWmhNLE9BQU9sZixRQUFRLFVBQVUyckIsTUFBTUMsTUFBTTlKLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVUyTyxNQUFNN0osS0FBSy9oQixHQUFHQyxNQUFNNHJCOztBQTJCcEMxTSxPQUFPMk0sUUFBUSxVQUFVOU0sSUFBSStNLE1BQU1DLE1BQU1qSyxLQUFLO0FBQzVDLElBQUk5RSxVQUFVK0IsSUFBSStDLEtBQUsvaEIsR0FBRzhyQixNQUFNQyxNQUFNQzs7QUFpQnhDN00sT0FBTzVLLFFBQVEsVUFBVW1PLEtBQUtYLEtBQUs7QUFDakMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLL2hCLEdBQUd1VTs7QUFJN0I0SyxPQUFPbmQsTUFBTTtBQWlCYm1kLE9BQU9uZCxJQUFJL0IsUUFBUSxVQUFVMnJCLE1BQU1DLE1BQU05SixLQUFLO0FBQzVDLElBQUk5RSxVQUFVMk8sTUFBTTdKLEtBQUsvaEIsR0FBR2dDLElBQUkvQixNQUFNNHJCOztBQXVCeEMxTSxPQUFPbmQsSUFBSThwQixRQUFRLFVBQVU5TSxJQUFJK00sTUFBTUMsTUFBTWpLLEtBQUs7QUFDaEQsSUFBSTlFLFVBQVUrQixJQUFJK0MsS0FBSy9oQixHQUFHZ0MsSUFBSThwQixNQUFNQyxNQUFNQzs7QUFpQjVDN00sT0FBT25kLElBQUl1UyxRQUFRLFVBQVVtTyxLQUFLWCxLQUFLO0FBQ3JDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSy9oQixHQUFHZ0MsSUFBSXVTOztBQUdqQzRLLE9BQU8sV0FBV0EsT0FBTztBQUN6QkEsT0FBT25kLElBQUksV0FBV21kLE9BQU9uZCxJQUFJO0FBRWpDLE9BQU9tZDs7QUFDUjtBQUVEbGhCLEtBQUtraEIsU0FBUzhNO0FBQ2RodUIsS0FBS2l1QixTQUFTRDs7Ozs7QUNuTWhCaFEsT0FBT0MsVUFBVSxVQUFVamUsTUFBTThnQixNQUFNO0FBTXJDLElBQUk5QixZQUFZaGYsS0FBS2dmLFdBQ2pCQyxPQUFPNkIsS0FBSzdCO0FBcUJoQixJQUFJaUIsU0FBU2xnQixLQUFLa2dCLFNBQVMsVUFBVWdPLFNBQVNDLFFBQVE7QUFDcEQsSUFBSTVyQixPQUFPLElBQUl5YyxVQUFVLE1BQU0sTUFBTWhmLEtBQUtrZ0IsUUFBUTtBQUNsRDNkLEtBQUsyZCxPQUNEZ08sU0FDQUMsUUFDQTs7QUFrQk5qTyxPQUFPZ04sT0FBTyxVQUFVMUksUUFBUWxKLFVBQVVtRyxTQUFTMEwsVUFBVTtBQUMzRDFMLFVBQVVBLFdBQVc7QUFDckIsTUFBTSxJQUFJemhCLEtBQUs2Z0IsZUFBZVksU0FBUztBQUNuQytDLFFBQVFBO0FBQ1JsSixVQUFVQTtBQUNWNlIsVUFBVUE7R0FDWGpOLE9BQU9nTjs7QUFtQlpoTixPQUFPa08sT0FBTyxVQUFVM0osS0FBS1gsS0FBSztBQUNoQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPa08sTUFBTSxNQUFNM0YsR0FBR2xFOztBQW1CaERyRSxPQUFPbU8sVUFBVSxVQUFVNUosS0FBS1gsS0FBSztBQUNuQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPbU8sU0FBUyxNQUFNNUYsR0FBRzFrQixJQUFJd2dCOztBQWtCdkRyRSxPQUFPbGUsUUFBUSxVQUFVc3NCLEtBQUtDLEtBQUt6SyxLQUFLO0FBQ3RDLElBQUl2aEIsT0FBTyxJQUFJeWMsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBT2xlLE9BQU87QUFFakRPLEtBQUsyZCxPQUNEcU8sT0FBT3RQLEtBQUsxYyxNQUFNLFdBQ2xCLG9DQUNBLHdDQUNBZ3NCLEtBQ0FELEtBQ0E7O0FBbUJOcE8sT0FBT3NPLFdBQVcsVUFBVUYsS0FBS0MsS0FBS3pLLEtBQUs7QUFDekMsSUFBSXZoQixPQUFPLElBQUl5YyxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPc08sVUFBVTtBQUVwRGpzQixLQUFLMmQsT0FDRHFPLE9BQU90UCxLQUFLMWMsTUFBTSxXQUNsQix3Q0FDQSxvQ0FDQWdzQixLQUNBRCxLQUNBOztBQW1CTnBPLE9BQU91TyxjQUFjLFVBQVVILEtBQUtDLEtBQUt6SyxLQUFLO0FBQzVDLElBQUk5RSxVQUFVc1AsS0FBS3hLLEtBQUs1RCxPQUFPdU8sYUFBYSxNQUFNMXNCLEdBQUdDLE1BQU11c0I7O0FBa0I3RHJPLE9BQU93TyxpQkFBaUIsVUFBVUosS0FBS0MsS0FBS3pLLEtBQUs7QUFDL0MsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU93TyxnQkFBZ0IsTUFBTTNzQixHQUFHZ0MsSUFBSS9CLE1BQU11c0I7O0FBbUJwRXJPLE9BQU95TyxZQUFZek8sT0FBTzBPLGtCQUFrQixVQUFVTixLQUFLQyxLQUFLekssS0FBSztBQUNuRSxJQUFJOUUsVUFBVXNQLEtBQUt4SyxLQUFLNUQsT0FBT3lPLFdBQVcsTUFBTTVzQixHQUFHNkssSUFBSTJoQjs7QUFrQnpEck8sT0FBTzJPLGVBQWUsVUFBVVAsS0FBS0MsS0FBS3pLLEtBQUs7QUFDN0MsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU8yTyxjQUFjLE1BQU05c0IsR0FBR2dDLElBQUk2SSxJQUFJMmhCOztBQWtCaEVyTyxPQUFPNE8sVUFBVSxVQUFVckssS0FBS3NLLEtBQUtqTCxLQUFLO0FBQ3hDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU80TyxTQUFTLE1BQU0vc0IsR0FBR1ksR0FBR3FzQixNQUFNRDs7QUFtQjVEN08sT0FBTytPLFlBQVksVUFBVXhLLEtBQUt5SyxPQUFPcEwsS0FBSztBQUM1QyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPK08sV0FBVyxNQUFNbHRCLEdBQUdZLEdBQUd3c0IsTUFBTUQ7O0FBa0I5RGhQLE9BQU9rUCxVQUFVLFVBQVUzSyxLQUFLNEssS0FBS3ZMLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT2tQLFNBQVMsTUFBTXJ0QixHQUFHWSxHQUFHMnNCLE1BQU1EOztBQW1CNURuUCxPQUFPcVAsV0FBVyxVQUFVOUssS0FBSytLLE9BQU8xTCxLQUFLO0FBQzNDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU9xUCxVQUFVLE1BQU14dEIsR0FBR1ksR0FBRzhzQixLQUFLRDs7QUFrQjVEdFAsT0FBT3dQLFNBQVMsVUFBVWpMLEtBQUtYLEtBQUs7QUFDbEMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT3dQLFFBQVEsTUFBTWpILEdBQUc7O0FBa0JsRHZJLE9BQU95UCxZQUFZLFVBQVVsTCxLQUFLWCxLQUFLO0FBQ3JDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU95UCxXQUFXLE1BQU01dEIsR0FBR2dDLElBQUkvQixNQUFNOztBQWtCL0RrZSxPQUFPMFAsVUFBVSxVQUFVbkwsS0FBS1gsS0FBSztBQUNuQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPMFAsU0FBUyxNQUFNbkgsR0FBRzs7QUFrQm5EdkksT0FBTzJQLGFBQWEsVUFBVXBMLEtBQUtYLEtBQUs7QUFDdEMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBTzJQLFlBQVksTUFBTTl0QixHQUFHZ0MsSUFBSS9CLE1BQU07O0FBaUJoRWtlLE9BQU80UCxTQUFTLFVBQVVyTCxLQUFLWCxLQUFLO0FBQ2xDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU80UCxRQUFRLE1BQU0vdEIsR0FBR0MsTUFBTTs7QUFrQnhEa2UsT0FBTzZQLFlBQVksVUFBVXRMLEtBQUtYLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBTzZQLFdBQVcsTUFBTWh1QixHQUFHZ0MsSUFBSS9CLE1BQU07O0FBaUIvRGtlLE9BQU9yUCxRQUFRLFVBQVU0VCxLQUFLWCxLQUFLO0FBQ2pDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU9yUCxPQUFPLE1BQU05TyxHQUFHWSxHQUFHcXRCOztBQWdCcEQ5UCxPQUFPK1AsV0FBVyxVQUFVeEwsS0FBS1gsS0FBSztBQUNwQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPK1AsVUFBVSxNQUFNbHNCLElBQUloQyxHQUFHWSxHQUFHcXRCOztBQW1CM0Q5UCxPQUFPMkgsU0FBUyxVQUFVcEQsS0FBS1gsS0FBSztBQUNsQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPMkgsUUFBUSxNQUFNOWxCLEdBQUd1VTs7QUFxQmxENEosT0FBT2dRLFlBQVksVUFBVXpMLEtBQUtYLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT2dRLFdBQVcsTUFBTW51QixHQUFHZ0MsSUFBSXVTOztBQWtCekQ0SixPQUFPaVEsY0FBYyxVQUFVMUwsS0FBS1gsS0FBSztBQUN2QyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPaVEsYUFBYSxNQUFNcHVCLEdBQUdDLE1BQU1jOztBQWtCN0RvZCxPQUFPa1EsWUFBWSxVQUFVM0wsS0FBS1gsS0FBSztBQUNyQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPa1EsV0FBVyxNQUFNcnVCLEdBQUdnQyxJQUFJL0IsTUFBTWM7O0FBa0IvRG9kLE9BQU9tUSxhQUFhLFVBQVU1TCxLQUFLWCxLQUFLO0FBQ3RDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU9tUSxZQUFZLE1BQU10dUIsR0FBR1ksR0FBR0ssRUFBRTs7QUFrQjNEa2QsT0FBT29RLGdCQUFnQixVQUFVN0wsS0FBS1gsS0FBSztBQUN6QyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPb1EsZUFBZSxNQUFNdnVCLEdBQUdnQyxJQUFJcEIsR0FBR0ssRUFBRTs7QUFtQmxFa2QsT0FBT3FRLFdBQVcsVUFBVTlMLEtBQUtYLEtBQUs7QUFDcEMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT3FRLFVBQVUsTUFBTXh1QixHQUFHWSxHQUFHSyxFQUFFOztBQW1CekRrZCxPQUFPc1EsY0FBYyxVQUFVL0wsS0FBS1gsS0FBSztBQUN2QyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPc1EsYUFBYSxNQUFNenVCLEdBQUdnQyxJQUFJcEIsR0FBR0ssRUFBRTs7QUFrQmhFa2QsT0FBT3VRLFVBQVUsVUFBVWhNLEtBQUtYLEtBQUs7QUFDbkMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT3VRLFNBQVMsTUFBTTF1QixHQUFHWSxHQUFHbWlCLEdBQUc7O0FBa0J6RDVFLE9BQU93USxhQUFhLFVBQVVqTSxLQUFLWCxLQUFLO0FBQ3RDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU93USxZQUFZLE1BQU0zdUIsR0FBR2dDLElBQUlwQixHQUFHbWlCLEdBQUc7O0FBa0JoRTVFLE9BQU95USxXQUFXLFVBQVVsTSxLQUFLWCxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU95USxVQUFVLE1BQU01dUIsR0FBR1ksR0FBR0ssRUFBRTs7QUFrQnpEa2QsT0FBTzBRLGNBQWMsVUFBVW5NLEtBQUtYLEtBQUs7QUFDdkMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBTzBRLGFBQWEsTUFBTTd1QixHQUFHZ0MsSUFBSXBCLEdBQUdLLEVBQUU7O0FBa0JoRWtkLE9BQU8yUSxXQUFXLFVBQVVwTSxLQUFLWCxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU8yUSxVQUFVLE1BQU05dUIsR0FBR1ksR0FBR0ssRUFBRTs7QUFrQnpEa2QsT0FBTzRRLGNBQWMsVUFBVXJNLEtBQUtYLEtBQUs7QUFDdkMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBTzRRLGFBQWEsTUFBTS91QixHQUFHZ0MsSUFBSXBCLEdBQUdLLEVBQUU7O0FBb0JoRWtkLE9BQU8rTSxXQUFXLFVBQVV4SSxLQUFLWCxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU8rTSxVQUFVLE1BQU1sckIsR0FBR1ksR0FBR291Qjs7QUFxQnZEN1EsT0FBTzhRLFlBQVksVUFBVXZNLEtBQUtYLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBTzhRLFdBQVcsTUFBTWp2QixHQUFHWSxHQUFHSyxFQUFFOztBQXFCMURrZCxPQUFPK1EsZUFBZSxVQUFVeE0sS0FBS1gsS0FBSztBQUN4QyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPK1EsY0FBYyxNQUFNbHZCLEdBQUdnQyxJQUFJcEIsR0FBR0ssRUFBRTs7QUF3QmpFa2QsT0FBT2dSLFNBQVMsVUFBVXpNLEtBQUs1Z0IsTUFBTWlnQixLQUFLO0FBQ3hDLElBQUk5RSxVQUFVeUYsS0FBS1gsS0FBSzVELE9BQU9nUixRQUFRLE1BQU1udkIsR0FBR1ksR0FBR0ssRUFBRWE7O0FBbUJ2RHFjLE9BQU9pUixZQUFZLFVBQVUxTSxLQUFLNWdCLE1BQU1pZ0IsS0FBSztBQUMzQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPaVIsV0FBVyxNQUFNcHZCLEdBQUdnQyxJQUFJcEIsR0FBR0ssRUFBRWE7O0FBcUI5RHFjLE9BQU90ZCxhQUFhLFVBQVU2aEIsS0FBSzVnQixNQUFNaWdCLEtBQUs7QUFDNUMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT3RkLFlBQVksTUFBTWIsR0FBR1ksR0FBR0MsV0FBV2lCOztBQXFCcEVxYyxPQUFPa1IsZ0JBQWdCLFVBQVUzTSxLQUFLNWdCLE1BQU1pZ0IsS0FBSztBQUMvQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPa1IsZUFBZSxNQUMzQ3J2QixHQUFHZ0MsSUFBSXBCLEdBQUdDLFdBQVdpQjs7QUFrQzFCcWMsT0FBTzFYLFVBQVUsVUFBVStsQixLQUFLOEMsS0FBS3ZOLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU8xWCxTQUFTLE1BQU1BLFFBQVE2b0I7O0FBbUN4RG5SLE9BQU9vUixhQUFhLFVBQVUvQyxLQUFLOEMsS0FBS3ZOLEtBQUs7QUFDM0MsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU9vUixZQUFZLE1BQU12dEIsSUFBSXlFLFFBQVE2b0I7O0FBd0IvRG5SLE9BQU9xUixjQUFjLFVBQVVoRCxLQUFLOEMsS0FBS3ZOLEtBQUs7QUFDNUMsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU9xUixhQUFhLE1BQU10Z0IsS0FBS3pJLFFBQVE2b0I7O0FBd0JqRW5SLE9BQU9zUixpQkFBaUIsVUFBVWpELEtBQUs4QyxLQUFLdk4sS0FBSztBQUMvQyxJQUFJOUUsVUFBVXVQLEtBQUt6SyxLQUFLNUQsT0FBT3NSLGdCQUFnQixNQUFNenRCLElBQUlrTixLQUFLekksUUFBUTZvQjs7QUF3QnhFblIsT0FBT3VSLGdCQUFnQixVQUFVbEQsS0FBSzhDLEtBQUt2TixLQUFLO0FBQzlDLElBQUk5RSxVQUFVdVAsS0FBS3pLLEtBQUs1RCxPQUFPdVIsZUFBZSxNQUFNQyxPQUFPbHBCLFFBQVE2b0I7O0FBd0JyRW5SLE9BQU95UixtQkFBbUIsVUFBVXBELEtBQUs4QyxLQUFLdk4sS0FBSztBQUNqRCxJQUFJOUUsVUFBVXVQLEtBQUt6SyxLQUFLNUQsT0FBT3lSLGtCQUFrQixNQUM5QzV0QixJQUFJMnRCLE9BQU9scEIsUUFBUTZvQjs7QUF3QnhCblIsT0FBTzBSLG9CQUFvQixVQUFTckQsS0FBSzhDLEtBQUt2TixLQUFLO0FBQ2pELElBQUk5RSxVQUFVdVAsS0FBS3pLLEtBQUs1RCxPQUFPMFIsbUJBQW1CLE1BQy9DM2dCLEtBQUt5Z0IsT0FBT2xwQixRQUFRNm9COztBQXdCekJuUixPQUFPMlIsdUJBQXVCLFVBQVN0RCxLQUFLOEMsS0FBS3ZOLEtBQUs7QUFDcEQsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU8yUixzQkFBc0IsTUFDbEQ5dEIsSUFBSWtOLEtBQUt5Z0IsT0FBT2xwQixRQUFRNm9COztBQW9CN0JuUixPQUFPNFIsYUFBYSxVQUFTdkQsS0FBSzhDLEtBQUt2TixLQUFLO0FBQzFDLElBQUk5RSxVQUFVdVAsS0FBS3pLLEtBQUs1RCxPQUFPNFIsWUFBWSxNQUFNQyxJQUFJdnBCLFFBQVE2b0I7O0FBc0IvRG5SLE9BQU84UixnQkFBZ0IsVUFBU3pELEtBQUs4QyxLQUFLdk4sS0FBSztBQUM3QyxJQUFJOUUsVUFBVXVQLEtBQUt6SyxLQUFLNUQsT0FBTzhSLGVBQWUsTUFBTWp1QixJQUFJZ3VCLElBQUl2cEIsUUFBUTZvQjs7QUFvQnRFblIsT0FBTytSLGlCQUFpQixVQUFTMUQsS0FBSzhDLEtBQUt2TixLQUFLO0FBQzlDLElBQUk5RSxVQUFVdVAsS0FBS3pLLEtBQUs1RCxPQUFPK1IsZ0JBQWdCLE1BQzVDaGhCLEtBQUs4Z0IsSUFBSXZwQixRQUFRNm9COztBQW9CdEJuUixPQUFPZ1Msb0JBQW9CLFVBQVMzRCxLQUFLOEMsS0FBS3ZOLEtBQUs7QUFDakQsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU9nUyxtQkFBbUIsTUFDL0NudUIsSUFBSWtOLEtBQUs4Z0IsSUFBSXZwQixRQUFRNm9COztBQWtCMUJuUixPQUFPRSxRQUFRLFVBQVVtTyxLQUFLbEcsSUFBSXZFLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU9FLE9BQU8sTUFBTXJlLEdBQUdxZSxNQUFNaUk7O0FBa0J2RG5JLE9BQU9pUyxXQUFXLFVBQVU1RCxLQUFLbEcsSUFBSXZFLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVV1UCxLQUFLekssS0FBSzVELE9BQU9pUyxVQUFVLE1BQU1wd0IsR0FBR2dDLElBQUlxYyxNQUFNaUk7O0FBb0I5RG5JLE9BQU9aLFdBQVcsVUFBVTlaLEtBQUs4RyxNQUFNd1gsS0FBSztBQUMxQyxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT1osVUFBVSxNQUFNdmQsR0FBR3lFLEtBQUs4WSxTQUFTaFQ7O0FBbUJsRTRULE9BQU9rUyxjQUFjLFVBQVU1c0IsS0FBSzhHLE1BQU13WCxLQUFLO0FBQzdDLElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPa1MsYUFBYSxNQUN6Q3J3QixHQUFHZ0MsSUFBSXlDLEtBQUs4WSxTQUFTaFQ7O0FBcUIxQjRULE9BQU9tUyxjQUFjLFVBQVU3c0IsS0FBSzhHLE1BQU1tWSxLQUFLWCxLQUFLO0FBQ2xELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPbVMsYUFBYSxNQUN6Q3R3QixHQUFHeUUsS0FBSzhZLFNBQVNoVCxNQUFNbVk7O0FBc0I1QnZFLE9BQU9vUyxpQkFBaUIsVUFBVTlzQixLQUFLOEcsTUFBTW1ZLEtBQUtYLEtBQUs7QUFDckQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU9vUyxnQkFBZ0IsTUFDNUN2d0IsR0FBR2dDLElBQUl5QyxLQUFLOFksU0FBU2hULE1BQU1tWTs7QUFvQmhDdkUsT0FBT3FTLGtCQUFrQixVQUFVL3NCLEtBQUs4RyxNQUFNbVksS0FBS1gsS0FBSztBQUN0RCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT3FTLGlCQUFpQixNQUM3Q3h3QixHQUFHeUUsS0FBS3lLLEtBQUtxTyxTQUFTaFQsTUFBTW1ZOztBQXNCakN2RSxPQUFPc1MscUJBQXFCLFVBQVVodEIsS0FBSzhHLE1BQU1tWSxLQUFLWCxLQUFLO0FBQ3pELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPc1Msb0JBQW9CLE1BQ2hEendCLEdBQUdnQyxJQUFJeUMsS0FBS3lLLEtBQUtxTyxTQUFTaFQsTUFBTW1ZOztBQWtCckN2RSxPQUFPdVMsY0FBYyxVQUFVanRCLEtBQUs4RyxNQUFNd1gsS0FBSztBQUM3QyxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT3VTLGFBQWEsTUFDekMxd0IsR0FBR3lFLEtBQUt1ckIsSUFBSXpTLFNBQVNoVDs7QUFtQjFCNFQsT0FBT3dTLGlCQUFpQixVQUFVbHRCLEtBQUs4RyxNQUFNd1gsS0FBSztBQUNoRCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT3dTLGdCQUFnQixNQUM1QzN3QixHQUFHZ0MsSUFBSXlDLEtBQUt1ckIsSUFBSXpTLFNBQVNoVDs7QUFvQjlCNFQsT0FBT3lTLGlCQUFpQixVQUFVbnRCLEtBQUs4RyxNQUFNOUgsT0FBT3NmLEtBQUs7QUFDdkQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU95UyxnQkFBZ0IsTUFDNUM1d0IsR0FBR3lFLEtBQUt1ckIsSUFBSXpTLFNBQVNoVCxNQUFNOUg7O0FBcUJoQzBiLE9BQU8wUyxvQkFBb0IsVUFBVXB0QixLQUFLOEcsTUFBTTlILE9BQU9zZixLQUFLO0FBQzFELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPMFMsbUJBQW1CLE1BQy9DN3dCLEdBQUdnQyxJQUFJeUMsS0FBS3VyQixJQUFJelMsU0FBU2hULE1BQU05SDs7QUFvQnBDMGIsT0FBTzJTLHFCQUFxQixVQUFVcnRCLEtBQUs4RyxNQUFNOUgsT0FBT3NmLEtBQUs7QUFDM0QsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU8yUyxvQkFBb0IsTUFDaEQ5d0IsR0FBR3lFLEtBQUt5SyxLQUFLOGdCLElBQUl6UyxTQUFTaFQsTUFBTTlIOztBQXVCckMwYixPQUFPNFMsd0JBQXdCLFVBQVV0dEIsS0FBSzhHLE1BQU05SCxPQUFPc2YsS0FBSztBQUM5RCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBTzRTLHVCQUF1QixNQUNuRC93QixHQUFHZ0MsSUFBSXlDLEtBQUt5SyxLQUFLOGdCLElBQUl6UyxTQUFTaFQsTUFBTTlIOztBQW9CekMwYixPQUFPNlMsaUJBQWlCLFVBQVV2dEIsS0FBSzhHLE1BQU13WCxLQUFLO0FBQ2hELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPNlMsZ0JBQWdCLE1BQzVDaHhCLEdBQUd5RSxLQUFLa3JCLE9BQU9wUyxTQUFTaFQ7O0FBb0I3QjRULE9BQU84UyxvQkFBb0IsVUFBVXh0QixLQUFLOEcsTUFBTXdYLEtBQUs7QUFDbkQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU84UyxtQkFBbUIsTUFDL0NqeEIsR0FBR2dDLElBQUl5QyxLQUFLa3JCLE9BQU9wUyxTQUFTaFQ7O0FBcUJqQzRULE9BQU8rUyxvQkFBb0IsVUFBVXp0QixLQUFLOEcsTUFBTW1ZLEtBQUtYLEtBQUs7QUFDeEQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU8rUyxtQkFBbUIsTUFDL0NseEIsR0FBR3lFLEtBQUtrckIsT0FBT3BTLFNBQVNoVCxNQUFNbVk7O0FBc0JuQ3ZFLE9BQU9nVCx1QkFBdUIsVUFBVTF0QixLQUFLOEcsTUFBTW1ZLEtBQUtYLEtBQUs7QUFDM0QsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU9nVCxzQkFBc0IsTUFDbERueEIsR0FBR2dDLElBQUl5QyxLQUFLa3JCLE9BQU9wUyxTQUFTaFQsTUFBTW1ZOztBQXFCdkN2RSxPQUFPaVQsd0JBQXdCLFVBQVUzdEIsS0FBSzhHLE1BQU1tWSxLQUFLWCxLQUFLO0FBQzVELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPaVQsdUJBQXVCLE1BQ25EcHhCLEdBQUd5RSxLQUFLeUssS0FBS3lnQixPQUFPcFMsU0FBU2hULE1BQU1tWTs7QUF1QnhDdkUsT0FBT2tULDJCQUEyQixVQUFVNXRCLEtBQUs4RyxNQUFNbVksS0FBS1gsS0FBSztBQUMvRCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT2tULDBCQUEwQixNQUN0RHJ4QixHQUFHZ0MsSUFBSXlDLEtBQUt5SyxLQUFLeWdCLE9BQU9wUyxTQUFTaFQsTUFBTW1ZOztBQW1CNUN2RSxPQUFPbVQsV0FBVyxVQUFVOUUsS0FBSzVILEtBQUs3QyxLQUFLO0FBQ3pDLElBQUk5RSxVQUFVdVAsS0FBS3pLLEtBQUs1RCxPQUFPbVQsVUFBVSxNQUFNdHhCLEdBQUd5RSxLQUFLNnNCLFNBQVMxTTs7QUF1QmxFekcsT0FBT29ULGFBQWEsVUFBVTl0QixLQUFLMFAsTUFBTTRPLEtBQUs7QUFDNUMsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU9vVCxZQUFZLE1BQU12eEIsR0FBR3lFLEtBQUt1aUIsSUFBSTdULEtBQUtBOztBQXVCcEVnTCxPQUFPcVQsYUFBYSxVQUFVL3RCLEtBQUswUCxNQUFNNE8sS0FBSztBQUM1QyxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT3FULFlBQVksTUFBTXh4QixHQUFHeUUsS0FBS3dpQixJQUFJOVQsS0FBS0E7O0FBMkJwRWdMLE9BQU9zVCxrQkFBa0IsVUFBVWh1QixLQUFLMFAsTUFBTTRPLEtBQUs7QUFDakQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU9zVCxpQkFBaUIsTUFDN0N6eEIsR0FBR2lDLFFBQVFnbEIsSUFBSTlULEtBQUtBOztBQXVCekJnTCxPQUFPdVQscUJBQXFCLFVBQVVqdUIsS0FBSzBQLE1BQU00TyxLQUFLO0FBQ3BELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPdVQsb0JBQW9CLE1BQ2hEMXhCLEdBQUdnQyxJQUFJeUMsS0FBS3VpQixJQUFJN1QsS0FBS0E7O0FBdUIxQmdMLE9BQU93VCxxQkFBcUIsVUFBVWx1QixLQUFLMFAsTUFBTTRPLEtBQUs7QUFDcEQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU93VCxvQkFBb0IsTUFDaEQzeEIsR0FBR2dDLElBQUl5QyxLQUFLd2lCLElBQUk5VCxLQUFLQTs7QUEyQjFCZ0wsT0FBT3lULGlCQUFpQixVQUFVbnVCLEtBQUswUCxNQUFNNE8sS0FBSztBQUNoRCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBT3lULGdCQUFnQixNQUM1QzV4QixHQUFHeUUsS0FBS3VpQixJQUFJOVgsS0FBS2lFLEtBQUtBOztBQXlCM0JnTCxPQUFPMFQsaUJBQWlCLFVBQVVwdUIsS0FBSzBQLE1BQU00TyxLQUFLO0FBQ2hELElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPMFQsZ0JBQWdCLE1BQzVDN3hCLEdBQUd5RSxLQUFLd2lCLElBQUkvWCxLQUFLaUUsS0FBS0E7O0FBeUIzQmdMLE9BQU8yVCxzQkFBc0IsVUFBVXJ1QixLQUFLMFAsTUFBTTRPLEtBQUs7QUFDckQsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU8yVCxxQkFBcUIsTUFDakQ5eEIsR0FBR2lDLFFBQVFnbEIsSUFBSS9YLEtBQUtpRSxLQUFLQTs7QUF5QjlCZ0wsT0FBTzRULHlCQUF5QixVQUFVdHVCLEtBQUswUCxNQUFNNE8sS0FBSztBQUN4RCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBTzRULHdCQUF3QixNQUNwRC94QixHQUFHZ0MsSUFBSXlDLEtBQUt1aUIsSUFBSTlYLEtBQUtpRSxLQUFLQTs7QUF5Qi9CZ0wsT0FBTzZULHlCQUF5QixVQUFVdnVCLEtBQUswUCxNQUFNNE8sS0FBSztBQUN4RCxJQUFJOUUsVUFBVXhaLEtBQUtzZSxLQUFLNUQsT0FBTzZULHdCQUF3QixNQUNwRGh5QixHQUFHZ0MsSUFBSXlDLEtBQUt3aUIsSUFBSS9YLEtBQUtpRSxLQUFLQTs7QUFrQy9CZ0wsT0FBTzhULFNBQVMsVUFBVWpULElBQUkwSSxXQUFXQyxlQUFlNUYsS0FBSztBQUMzRCxJQUFJLGFBQWEsT0FBTzJGLGFBQWFBLHFCQUFxQmhKLFFBQVE7QUFDaEVpSixnQkFBZ0JEO0FBQ2hCQSxZQUFZOztBQUdkLElBQUl3SyxZQUFZLElBQUlqVixVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPOFQsUUFBUSxNQUNuRGp5QixHQUFHaUwsTUFBTXljLFdBQVdDO0FBQ3ZCLE9BQU96SyxLQUFLZ1YsV0FBVzs7QUFnQ3pCL1QsT0FBT2dVLGVBQWUsVUFBVW5ULElBQUkwSSxXQUFXQyxlQUFlNUYsS0FBSztBQUNqRSxJQUFJLGFBQWEsT0FBTzJGLGFBQWFBLHFCQUFxQmhKLFFBQVE7QUFDaEVpSixnQkFBZ0JEO0FBQ2hCQSxZQUFZOztBQUdkLElBQUl6SyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPZ1UsY0FBYyxNQUN6Q255QixHQUFHZ0MsSUFBSWlKLE1BQU15YyxXQUFXQzs7QUFvQjdCeEosT0FBT2lOLFdBQVcsVUFBVTFJLEtBQUswSSxVQUFVUyxNQUFNOUosS0FBSztBQUNwRCxJQUFJUztBQUNKLFFBQU80STtLQUNBO0FBQ0g1SSxLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxRQUFRbUo7QUFDYjtLQUNHO0FBQ0hySixLQUFLRSxNQUFNbUo7QUFDWDtLQUNHO0FBQ0hySixLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxNQUFNbUo7QUFDWDtLQUNHO0FBQ0hySixLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxPQUFPbUo7QUFDWjtLQUNHO0FBQ0hySixLQUFLRSxRQUFRbUo7QUFDYjs7QUFFQTlKLE1BQU1BLE1BQU1BLE1BQU0sT0FBT0E7QUFDekIsTUFBTSxJQUFJOWpCLEtBQUs2Z0IsZUFDYmlELE1BQU0sdUJBQXVCcUosV0FBVyxLQUN4Q3JxQixXQUNBb2QsT0FBT2lOOztBQUdiLElBQUk1cUIsT0FBTyxJQUFJeWMsVUFBVXVGLElBQUlULEtBQUs1RCxPQUFPaU4sVUFBVTtBQUNuRDVxQixLQUFLMmQsT0FDRCxTQUFTakIsS0FBSzFjLE1BQU0sV0FDcEIsY0FBY3VlLEtBQUswQixRQUFRaUMsT0FBTyxZQUFZMEksV0FBVyxNQUFNck0sS0FBSzBCLFFBQVFvTCxPQUM1RSxjQUFjOU0sS0FBSzBCLFFBQVFpQyxPQUFPLGdCQUFnQjBJLFdBQVcsTUFBTXJNLEtBQUswQixRQUFRb0w7O0FBbUJ0RjFOLE9BQU9nTCxVQUFVLFVBQVVvRCxLQUFLQyxLQUFLeEQsT0FBT2pILEtBQUs7QUFDL0MsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU9nTCxTQUFTLE1BQU1ucEIsR0FBR1ksR0FBR3VvQixRQUFRcUQsS0FBS3hEOztBQW1CbkU3SyxPQUFPaVUsZ0JBQWdCLFVBQVU3RixLQUFLQyxLQUFLeEQsT0FBT2pILEtBQUs7QUFDckQsSUFBSTlFLFVBQVVzUCxLQUFLeEssS0FBSzVELE9BQU9pVSxlQUFlLE1BQzNDcHlCLEdBQUdZLEdBQUd3eEIsY0FBYzVGLEtBQUt4RDs7QUFtQjlCN0ssT0FBT2tVLGNBQWMsVUFBVUMsTUFBTUMsTUFBTXhRLEtBQUs7QUFDOUMsSUFBSTlFLFVBQVVxVixNQUFNdlEsS0FBSzVELE9BQU9rVSxhQUFhLE1BQzFDcnlCLEdBQUd5RSxLQUFLK3RCLEtBQUtDLFFBQVFGOztBQW1CMUJwVSxPQUFPdVUsaUJBQWlCLFVBQVVKLE1BQU1DLE1BQU14USxLQUFLO0FBQ2pELElBQUk5RSxVQUFVcVYsTUFBTXZRLEtBQUs1RCxPQUFPdVUsZ0JBQWdCLE1BQzdDMXlCLEdBQUdnQyxJQUFJeUMsS0FBSyt0QixLQUFLQyxRQUFRRjs7QUFtQjlCcFUsT0FBT3dVLGtCQUFrQixVQUFVTCxNQUFNQyxNQUFNeFEsS0FBSztBQUNsRCxJQUFJOUUsVUFBVXFWLE1BQU12USxLQUFLNUQsT0FBT3dVLGlCQUFpQixNQUM5QzN5QixHQUFHeUUsS0FBSyt0QixLQUFLdGpCLEtBQUt1akIsUUFBUUY7O0FBbUIvQnBVLE9BQU95VSxxQkFBcUIsVUFBVU4sTUFBTUMsTUFBTXhRLEtBQUs7QUFDckQsSUFBSTlFLFVBQVVxVixNQUFNdlEsS0FBSzVELE9BQU95VSxvQkFBb0IsTUFDakQ1eUIsR0FBR2dDLElBQUl5QyxLQUFLK3RCLEtBQUt0akIsS0FBS3VqQixRQUFRRjs7QUFtQm5DcFUsT0FBTzBVLHFCQUFxQixVQUFVUCxNQUFNQyxNQUFNeFEsS0FBSztBQUNyRCxJQUFJOUUsVUFBVXFWLE1BQU12USxLQUFLNUQsT0FBTzBVLG9CQUFvQixNQUNqRDd5QixHQUFHeUUsS0FBSyt0QixLQUFLaEosUUFBUWlKLFFBQVFGOztBQW1CbENwVSxPQUFPMlUsd0JBQXdCLFVBQVVSLE1BQU1DLE1BQU14USxLQUFLO0FBQ3hELElBQUk5RSxVQUFVcVYsTUFBTXZRLEtBQUs1RCxPQUFPMlUsdUJBQXVCLE1BQ3BEOXlCLEdBQUdnQyxJQUFJeUMsS0FBSyt0QixLQUFLaEosUUFBUWlKLFFBQVFGOztBQW1CdENwVSxPQUFPNFUseUJBQXlCLFVBQVVULE1BQU1DLE1BQU14USxLQUFLO0FBQ3pELElBQUk5RSxVQUFVcVYsTUFBTXZRLEtBQUs1RCxPQUFPNFUsd0JBQXdCLE1BQ3JEL3lCLEdBQUd5RSxLQUFLK3RCLEtBQUt0akIsS0FBS3NhLFFBQVFpSixRQUFRRjs7QUFvQnZDcFUsT0FBTzZVLDRCQUE0QixVQUFVVixNQUFNQyxNQUFNeFEsS0FBSztBQUM1RCxJQUFJOUUsVUFBVXFWLE1BQU12USxLQUFLNUQsT0FBTzZVLDJCQUEyQixNQUN4RGh6QixHQUFHZ0MsSUFBSXlDLEtBQUsrdEIsS0FBS3RqQixLQUFLc2EsUUFBUWlKLFFBQVFGOztBQW1CM0NwVSxPQUFPOFUsaUJBQWlCLFVBQVU1SixVQUFVRCxRQUFRckgsS0FBSztBQUN2RCxJQUFJOUUsVUFBVW9NLFVBQVV0SCxLQUFLNUQsT0FBTzhVLGdCQUFnQixNQUNqRGp6QixHQUFHeUcsUUFBUWdzQixRQUFRcko7O0FBbUJ4QmpMLE9BQU8rVSxvQkFBb0IsVUFBVTdKLFVBQVVELFFBQVFySCxLQUFLO0FBQzFELElBQUk5RSxVQUFVb00sVUFBVXRILEtBQUs1RCxPQUFPK1UsbUJBQW1CLE1BQ3BEbHpCLEdBQUdnQyxJQUFJeUUsUUFBUWdzQixRQUFRcko7O0FBbUI1QmpMLE9BQU9nVixxQkFBcUIsVUFBVTlKLFVBQVVELFFBQVFySCxLQUFLO0FBQzNELElBQUk5RSxVQUFVb00sVUFBVXRILEtBQUs1RCxPQUFPZ1Ysb0JBQW9CLE1BQ3JEbnpCLEdBQUd5RyxRQUFReUksS0FBS3VqQixRQUFRcko7O0FBbUI3QmpMLE9BQU9pVix3QkFBd0IsVUFBVS9KLFVBQVVELFFBQVFySCxLQUFLO0FBQzlELElBQUk5RSxVQUFVb00sVUFBVXRILEtBQUs1RCxPQUFPaVYsdUJBQXVCLE1BQ3hEcHpCLEdBQUdnQyxJQUFJeUUsUUFBUXlJLEtBQUt1akIsUUFBUXJKOztBQW9CakNqTCxPQUFPa1Ysd0JBQXdCLFVBQVVoSyxVQUFVRCxRQUFRckgsS0FBSztBQUM5RCxJQUFJOUUsVUFBVW9NLFVBQVV0SCxLQUFLNUQsT0FBT2tWLHVCQUF1QixNQUN4RHJ6QixHQUFHeUcsUUFBUStpQixRQUFRaUosUUFBUXJKOztBQXFCaENqTCxPQUFPbVYsMkJBQTJCLFVBQVVqSyxVQUFVRCxRQUFRckgsS0FBSztBQUNqRSxJQUFJOUUsVUFBVW9NLFVBQVV0SCxLQUFLNUQsT0FBT21WLDBCQUEwQixNQUMzRHR6QixHQUFHZ0MsSUFBSXlFLFFBQVEraUIsUUFBUWlKLFFBQVFySjs7QUFvQnBDakwsT0FBT29WLDRCQUE0QixVQUFVbEssVUFBVUQsUUFBUXJILEtBQUs7QUFDbEUsSUFBSTlFLFVBQVVvTSxVQUFVdEgsS0FBSzVELE9BQU9vViwyQkFBMkIsTUFDNUR2ekIsR0FBR3lHLFFBQVF5SSxLQUFLc2EsUUFBUWlKLFFBQVFySjs7QUFzQnJDakwsT0FBT3FWLCtCQUErQixVQUFVbkssVUFBVUQsUUFBUXJILEtBQUs7QUFDckUsSUFBSTlFLFVBQVVvTSxVQUFVdEgsS0FBSzVELE9BQU9xViw4QkFBOEIsTUFDL0R4ekIsR0FBR2dDLElBQUl5RSxRQUFReUksS0FBS3NhLFFBQVFpSixRQUFRcko7O0FBa0J6Q2pMLE9BQU9pTSxRQUFRLFVBQVVxSixRQUFRdEosTUFBTXBJLEtBQUs7QUFDMUMsSUFBSTlFLFVBQVV3VyxRQUFRMVIsS0FBSzVELE9BQU9pTSxPQUFPLE1BQU1wcUIsR0FBR1ksR0FBR3dwQixNQUFNRDs7QUFxQjdEaE0sT0FBT3VWLFVBQVUsVUFBVTFVLElBQUl2YixLQUFLOEcsTUFBTXdYLEtBQUs7QUFDN0MsSUFBSWhhLFVBQVVoSSxXQUFXLEtBQUssT0FBTzBELFFBQVEsWUFBWTtBQUN2RHNlLE1BQU14WDtBQUNOQSxPQUFPOztBQUdULElBQUkwUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPdVYsU0FBUyxNQUFNMXpCLEdBQUcyekIsT0FBT2x3QixLQUFLOEc7O0FBc0I5RDRULE9BQU95VixZQUFZLFVBQVU1VSxJQUFJdmIsS0FBSzhHLE1BQU15ZSxPQUFPakgsS0FBSztBQUN0RCxJQUFJaGEsVUFBVWhJLFdBQVcsS0FBSyxPQUFPMEQsUUFBUSxZQUFZO0FBQ3ZELElBQUlvd0IsU0FBUzdLO0FBQ2JBLFFBQVF6ZTtBQUNSd1gsTUFBTThSO09BQ0QsSUFBSTlyQixVQUFVaEksV0FBVyxHQUFHO0FBQ2pDaXBCLFFBQVF6ZTtBQUNSQSxPQUFPOztBQUdULElBQUkwUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPeVYsV0FBVyxNQUN0QzV6QixHQUFHMnpCLE9BQU9sd0IsS0FBSzhHLE1BQU11cEIsR0FBRzlLOztBQXFCN0I3SyxPQUFPNFYsZ0JBQWdCLFVBQVUvVSxJQUFJdmIsS0FBSzhHLE1BQU13WCxLQUFLO0FBQ25ELElBQUloYSxVQUFVaEksV0FBVyxLQUFLLE9BQU8wRCxRQUFRLFlBQVk7QUFDdkRzZSxNQUFNeFg7QUFDTkEsT0FBTzs7QUFHVCxPQUFPLElBQUkwUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPNFYsZUFBZSxNQUNqRC96QixHQUFHZ0MsSUFBSTJ4QixPQUFPbHdCLEtBQUs4Rzs7QUFzQnhCNFQsT0FBTzZWLGtCQUFrQixVQUFVaFYsSUFBSXZiLEtBQUs4RyxNQUFNeWUsT0FBT2pILEtBQUs7QUFDNUQsSUFBSWhhLFVBQVVoSSxXQUFXLEtBQUssT0FBTzBELFFBQVEsWUFBWTtBQUN2RCxJQUFJb3dCLFNBQVM3SztBQUNiQSxRQUFRemU7QUFDUndYLE1BQU04UjtPQUNELElBQUk5ckIsVUFBVWhJLFdBQVcsR0FBRztBQUNqQ2lwQixRQUFRemU7QUFDUkEsT0FBTzs7QUFHVCxJQUFJMFMsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBTzZWLGlCQUFpQixNQUM1Q2gwQixHQUFHMnpCLE9BQU9sd0IsS0FBSzhHLE1BQU0wcEIsSUFBSWp5QixJQUFJOHhCLEdBQUc5Szs7QUFxQnJDN0ssT0FBTytWLFlBQVksVUFBVWxWLElBQUl2YixLQUFLOEcsTUFBTXdYLEtBQUs7QUFDL0MsSUFBSWhhLFVBQVVoSSxXQUFXLEtBQUssT0FBTzBELFFBQVEsWUFBWTtBQUN2RHNlLE1BQU14WDtBQUNOQSxPQUFPOztBQUdULE9BQU8sSUFBSTBTLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU8rVixXQUFXLE1BQzdDbDBCLEdBQUdtMEIsU0FBUzF3QixLQUFLOEc7O0FBc0J0QjRULE9BQU9pVyxjQUFjLFVBQVVwVixJQUFJdmIsS0FBSzhHLE1BQU15ZSxPQUFPakgsS0FBSztBQUN4RCxJQUFJaGEsVUFBVWhJLFdBQVcsS0FBSyxPQUFPMEQsUUFBUSxZQUFZO0FBQ3ZELElBQUlvd0IsU0FBUzdLO0FBQ2JBLFFBQVF6ZTtBQUNSd1gsTUFBTThSO09BQ0QsSUFBSTlyQixVQUFVaEksV0FBVyxHQUFHO0FBQ2pDaXBCLFFBQVF6ZTtBQUNSQSxPQUFPOztBQUdULElBQUkwUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPaVcsYUFBYSxNQUN4Q3AwQixHQUFHbTBCLFNBQVMxd0IsS0FBSzhHLE1BQU11cEIsR0FBRzlLOztBQXFCL0I3SyxPQUFPa1csa0JBQWtCLFVBQVVyVixJQUFJdmIsS0FBSzhHLE1BQU13WCxLQUFLO0FBQ3JELElBQUloYSxVQUFVaEksV0FBVyxLQUFLLE9BQU8wRCxRQUFRLFlBQVk7QUFDdkRzZSxNQUFNeFg7QUFDTkEsT0FBTzs7QUFHVCxPQUFPLElBQUkwUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPa1csaUJBQWlCLE1BQ25EcjBCLEdBQUdnQyxJQUFJbXlCLFNBQVMxd0IsS0FBSzhHOztBQXNCMUI0VCxPQUFPbVcsb0JBQW9CLFVBQVV0VixJQUFJdmIsS0FBSzhHLE1BQU15ZSxPQUFPakgsS0FBSztBQUM5RCxJQUFJaGEsVUFBVWhJLFdBQVcsS0FBSyxPQUFPMEQsUUFBUSxZQUFZO0FBQ3ZELElBQUlvd0IsU0FBUzdLO0FBQ2JBLFFBQVF6ZTtBQUNSd1gsTUFBTThSO09BQ0QsSUFBSTlyQixVQUFVaEksV0FBVyxHQUFHO0FBQ2pDaXBCLFFBQVF6ZTtBQUNSQSxPQUFPOztBQUdULElBQUkwUyxVQUFVK0IsSUFBSStDLEtBQUs1RCxPQUFPbVcsbUJBQW1CLE1BQzlDdDBCLEdBQUdtMEIsU0FBUzF3QixLQUFLOEcsTUFBTTBwQixJQUFJanlCLElBQUk4eEIsR0FBRzlLOztBQXFCdkM3SyxPQUFPb1csWUFBWSxVQUFVdlYsSUFBSXZiLEtBQUs4RyxNQUFNd1gsS0FBSztBQUMvQyxJQUFJaGEsVUFBVWhJLFdBQVcsS0FBSyxPQUFPMEQsUUFBUSxZQUFZO0FBQ3ZEc2UsTUFBTXhYO0FBQ05BLE9BQU87O0FBR1QsT0FBTyxJQUFJMFMsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBT29XLFdBQVcsTUFDN0N2MEIsR0FBR3cwQixTQUFTL3dCLEtBQUs4Rzs7QUFzQnRCNFQsT0FBT3NXLGNBQWMsVUFBVXpWLElBQUl2YixLQUFLOEcsTUFBTXllLE9BQU9qSCxLQUFLO0FBQ3hELElBQUloYSxVQUFVaEksV0FBVyxLQUFLLE9BQU8wRCxRQUFRLFlBQVk7QUFDdkQsSUFBSW93QixTQUFTN0s7QUFDYkEsUUFBUXplO0FBQ1J3WCxNQUFNOFI7T0FDRCxJQUFJOXJCLFVBQVVoSSxXQUFXLEdBQUc7QUFDakNpcEIsUUFBUXplO0FBQ1JBLE9BQU87O0FBR1QsSUFBSTBTLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU9zVyxhQUFhLE1BQ3hDejBCLEdBQUd3MEIsU0FBUy93QixLQUFLOEcsTUFBTXVwQixHQUFHOUs7O0FBcUIvQjdLLE9BQU91VyxrQkFBa0IsVUFBVTFWLElBQUl2YixLQUFLOEcsTUFBTXdYLEtBQUs7QUFDckQsSUFBSWhhLFVBQVVoSSxXQUFXLEtBQUssT0FBTzBELFFBQVEsWUFBWTtBQUN2RHNlLE1BQU14WDtBQUNOQSxPQUFPOztBQUdULE9BQU8sSUFBSTBTLFVBQVUrQixJQUFJK0MsS0FBSzVELE9BQU91VyxpQkFBaUIsTUFDbkQxMEIsR0FBR2dDLElBQUl3eUIsU0FBUy93QixLQUFLOEc7O0FBc0IxQjRULE9BQU93VyxvQkFBb0IsVUFBVTNWLElBQUl2YixLQUFLOEcsTUFBTXllLE9BQU9qSCxLQUFLO0FBQzlELElBQUloYSxVQUFVaEksV0FBVyxLQUFLLE9BQU8wRCxRQUFRLFlBQVk7QUFDdkQsSUFBSW93QixTQUFTN0s7QUFDYkEsUUFBUXplO0FBQ1J3WCxNQUFNOFI7T0FDRCxJQUFJOXJCLFVBQVVoSSxXQUFXLEdBQUc7QUFDakNpcEIsUUFBUXplO0FBQ1JBLE9BQU87O0FBR1QsT0FBTyxJQUFJMFMsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBT3dXLG1CQUFtQixNQUNyRDMwQixHQUFHZ0MsSUFBSXd5QixTQUFTL3dCLEtBQUs4RyxNQUFNdXBCLEdBQUc5Szs7QUFzQm5DN0ssT0FBT3lXLG9CQUFvQixVQUFVNVYsSUFBSXZiLEtBQUs4RyxNQUFNeWUsT0FBT2pILEtBQUs7QUFDOUQsSUFBSWhhLFVBQVVoSSxXQUFXLEtBQUssT0FBTzBELFFBQVEsWUFBWTtBQUN2RCxJQUFJb3dCLFNBQVM3SztBQUNiQSxRQUFRemU7QUFDUndYLE1BQU04UjtPQUNELElBQUk5ckIsVUFBVWhJLFdBQVcsR0FBRztBQUNqQ2lwQixRQUFRemU7QUFDUkEsT0FBTzs7QUFHVCxJQUFJMFMsVUFBVStCLElBQUkrQyxLQUFLNUQsT0FBT3lXLG1CQUFtQixNQUM5QzUwQixHQUFHdzBCLFNBQVMvd0IsS0FBSzhHLE1BQU0wcEIsSUFBSWp5QixJQUFJOHhCLEdBQUc5Szs7QUFtQnZDN0ssT0FBTzBXLFVBQVUsVUFBVW5TLEtBQUs7QUFDOUIsSUFBSUEsS0FBSztBQUNQLE1BQUssQ0FBQ0E7OztBQW1CVnZFLE9BQU80TSxlQUFlLFVBQVV0bkIsS0FBS3NlLEtBQUs7QUFDeEMsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU80TSxjQUFjLE1BQU0vcUIsR0FBR1ksR0FBR2swQjs7QUF3QjNEM1csT0FBTzRXLGtCQUFrQixVQUFVdHhCLEtBQUtzZSxLQUFLO0FBQzNDLElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPNFcsaUJBQWlCLE1BQU0vMEIsR0FBR2dDLElBQUlwQixHQUFHazBCOztBQXVCbEUzVyxPQUFPNk0sV0FBVyxVQUFVdm5CLEtBQUtzZSxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPNk0sVUFBVSxNQUFNaHJCLEdBQUdZLEdBQUdvMEI7O0FBa0J2RDdXLE9BQU84VyxjQUFjLFVBQVV4eEIsS0FBS3NlLEtBQUs7QUFDdkMsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU84VyxhQUFhLE1BQU1qMUIsR0FBR2dDLElBQUlwQixHQUFHbzBCOztBQW9COUQ3VyxPQUFPOE0sV0FBVyxVQUFVeG5CLEtBQUtzZSxLQUFLO0FBQ3BDLElBQUk5RSxVQUFVeFosS0FBS3NlLEtBQUs1RCxPQUFPOE0sVUFBVSxNQUFNanJCLEdBQUdZLEdBQUdzMEI7O0FBa0J2RC9XLE9BQU9nWCxjQUFjLFVBQVUxeEIsS0FBS3NlLEtBQUs7QUFDdkMsSUFBSTlFLFVBQVV4WixLQUFLc2UsS0FBSzVELE9BQU9nWCxhQUFhLE1BQU1uMUIsR0FBR2dDLElBQUlwQixHQUFHczBCOztBQXlCOUQvVyxPQUFPaVgsVUFBVSxVQUFTMVMsS0FBS1gsS0FBSztBQUNsQyxJQUFJOUUsVUFBVXlGLEtBQUtYLEtBQUs1RCxPQUFPaVgsU0FBUyxNQUFNcDFCLEdBQUdZLEdBQUc0VDs7QUF5QnREMkosT0FBT2tYLGFBQWEsVUFBUzNTLEtBQUtYLEtBQUs7QUFDckMsSUFBSTlFLFVBQVV5RixLQUFLWCxLQUFLNUQsT0FBT2tYLFlBQVksTUFBTXIxQixHQUFHZ0MsSUFBSXBCLEdBQUc0VDs7QUFPN0QsQ0FBQyxlQUFlelMsTUFBTXV6QixJQUFHO0FBQ3ZCblgsT0FBT21YLE1BQU1uWCxPQUFPcGM7QUFDcEIsT0FBT3d6QjtHQUVSLFFBQVEsTUFDUixXQUFXLFNBQ1gsVUFBVSxTQUNWLFVBQVUsU0FDVixnQkFBZ0IsY0FDaEIsbUJBQW1CLGlCQUNuQixZQUFZLFVBQ1osZUFBZSxhQUNmLFlBQVksVUFDWixlQUFlLGFBQ2YsV0FBVyxTQUNYLGNBQWM7Ozs7O0FDeGhHakI7QUE4Q0EscUJBQXFCOXhCLEtBQUsxQixNQUFNO0FBQzlCLElBQUksT0FBTzBCLFFBQVEsZUFBZUEsUUFBUSxNQUFNO0FBQzlDLE9BQU87O0FBSVQsT0FBTzFCLFNBQVFtUixPQUFPelA7O0FBc0J4QixtQkFBbUIreEIsTUFBTTtBQUN2QixJQUFJL08sTUFBTStPLEtBQUs1dUIsUUFBUSxjQUFjO0FBQ3JDLElBQUk2dUIsUUFBUWhQLElBQUlwSSxNQUFNO0FBQ3RCLE9BQU9vWCxNQUFNMU8sSUFBSSxvQkFBb0J0a0IsT0FBTztBQUMxQyxJQUFJaXpCLFNBQVM7QUFDYixJQUFJQyxPQUFPRCxPQUFPblAsS0FBSzlqQjtBQUN2QixJQUFJbXpCLFNBQVM7QUFDYixJQUFJRCxNQUFNO0FBQ1JDLFNBQVM7QUFBRTUwQixHQUFHbUssV0FBV3dxQixLQUFLOztPQUN6QjtBQUNMQyxTQUFTO0FBQUVDLEdBQUdwekIsTUFBTW1FLFFBQVEsZ0JBQWdCOzs7QUFHOUMsT0FBT2d2Qjs7O0FBbUJYLDhCQUE4Qm55QixLQUFLbXlCLFFBQVFFLFdBQVc7QUFDcEQsSUFBSUMsaUJBQWlCdHlCO0FBQ3JCLElBQUk0YixNQUFNO0FBQ1Z5VyxZQUFZLENBQUMsT0FBT0EsY0FBYyxjQUFjRixPQUFPNzFCLFNBQVMrMUI7QUFFaEUsU0FBUzkwQixJQUFJLEdBQUdBLElBQUk4MEIsV0FBVzkwQixLQUFLO0FBQ2xDLElBQUlnMUIsT0FBT0osT0FBTzUwQjtBQUNsQixJQUFJKzBCLGdCQUFnQjtBQUNsQixJQUFJLE9BQU9DLEtBQUtILE1BQU0sYUFBYTtBQUNqQ0UsaUJBQWlCQSxlQUFlQyxLQUFLaDFCO09BQ2hDO0FBQ0wrMEIsaUJBQWlCQSxlQUFlQyxLQUFLSDs7QUFHdkMsSUFBSTcwQixNQUFNLENBQUM4MEIsWUFBWSxJQUFJO0FBQ3pCelcsTUFBTTBXOzs7O0FBS1osT0FBTzFXOztBQWlCVCw4QkFBOEI1YixLQUFLaWYsS0FBS2tULFFBQVE7QUFDOUMsSUFBSUssVUFBVXh5QjtBQUNkLElBQUlxeUIsWUFBWUYsT0FBTzcxQjtBQUN2QixJQUFJaTJCLE9BQU87QUFFWCxTQUFTaDFCLElBQUksR0FBR0EsSUFBSTgwQixXQUFXOTBCLEtBQUs7QUFDbEMsSUFBSWsxQixXQUFXO0FBQ2YsSUFBSUMsVUFBVTtBQUNkSCxPQUFPSixPQUFPNTBCO0FBR2QsSUFBSUEsTUFBTSxDQUFDODBCLFlBQVksSUFBSTtBQUN6QkksV0FBVyxPQUFPRixLQUFLSCxNQUFNLGNBQWNHLEtBQUtoMUIsSUFBSWcxQixLQUFLSDtBQUV6REksUUFBUUMsWUFBWXhUO09BQ2YsSUFBSSxPQUFPc1QsS0FBS0gsTUFBTSxlQUFlSSxRQUFRRCxLQUFLSCxJQUFJO0FBQzNESSxVQUFVQSxRQUFRRCxLQUFLSDtPQUNsQixJQUFJLE9BQU9HLEtBQUtoMUIsTUFBTSxlQUFlaTFCLFFBQVFELEtBQUtoMUIsSUFBSTtBQUMzRGkxQixVQUFVQSxRQUFRRCxLQUFLaDFCO09BQ2xCO0FBRUwsSUFBSXNRLE9BQU9za0IsT0FBTzUwQixJQUFJO0FBRXRCazFCLFdBQVcsT0FBT0YsS0FBS0gsTUFBTSxjQUFjRyxLQUFLaDFCLElBQUlnMUIsS0FBS0g7QUFFekRNLFVBQVUsT0FBTzdrQixLQUFLdWtCLE1BQU0sY0FBYyxLQUFLO0FBQy9DSSxRQUFRQyxZQUFZQztBQUNwQkYsVUFBVUEsUUFBUUM7Ozs7QUEyQnhCLHFCQUFxQnp5QixLQUFLK3hCLE1BQU07QUFDOUIsSUFBSUksU0FBU1EsVUFBVVo7QUFDdkIsSUFBSW5PLE9BQU91TyxPQUFPQSxPQUFPNzFCLFNBQVM7QUFDbEMsSUFBSXMyQixPQUFPO0FBQ1QvMUIsUUFBUXMxQixPQUFPNzFCLFNBQVMsSUFBSXUyQixxQkFBcUI3eUIsS0FBS215QixRQUFRQSxPQUFPNzFCLFNBQVMsS0FBSzBEO0FBQ25GMUIsTUFBTXNsQixLQUFLd08sS0FBS3hPLEtBQUtybUI7QUFDckJ5QixPQUFPNnpCLHFCQUFxQjd5QixLQUFLbXlCOztBQUVuQ1MsS0FBS3ZRLFNBQVNqRixZQUFZd1YsS0FBSy8xQixRQUFRKzFCLEtBQUt0MEI7QUFFNUMsT0FBT3MwQjs7QUFrQ1Qsc0JBQXNCNXlCLEtBQUsreEIsTUFBTTtBQUMvQixJQUFJYSxPQUFPelYsWUFBWW5kLEtBQUsreEI7QUFDNUIsT0FBT2EsS0FBSzV6Qjs7QUFvQ2Qsc0JBQXNCZ0IsS0FBSyt4QixNQUFNOVMsS0FBSztBQUNwQyxJQUFJa1QsU0FBU1EsVUFBVVo7QUFDdkJlLHFCQUFxQjl5QixLQUFLaWYsS0FBS2tUO0FBQy9CLE9BQU9ueUI7O0FBR1R3WSxPQUFPQyxVQUFVO0FBQ2YyRSxhQUFhQTtBQUNiRCxhQUFhQTtBQUNiNFYsY0FBY0E7QUFDZEMsY0FBY0E7Ozs7O0FDdlJoQixJQUFJdlosT0FBTztBQWFYakIsT0FBT0MsVUFBVSxjQUFjelksS0FBSytiLE1BQU07QUFDeEMsSUFBSTBELFNBQVNoRyxLQUFLelosS0FBSyxXQUNuQjRlLE9BQU83QyxLQUFLO0FBQ2hCLE9BQU8wRCxTQUFTLENBQUNiLE9BQU9BOzs7OztBQzFCMUI7QUFPQSxJQUFJcVUsZ0JBQWdCLE9BQU8vc0IsWUFBWTtBQUN2QyxJQUFJZ3RCLGVBQWUsT0FBT3Q0QixXQUFXLGNBQWNBLFNBQVMsT0FBT3U0QixXQUFXLGNBQWNBLFNBQVNDO0FBQ3JHLElBQUlDLFFBQVEsZUFBY0gsaUJBQWdCLGVBQWNBO0FBQ3hELElBQUlJLGVBQWUsT0FBT3pMLFdBQVc7QUFDckMsSUFBSTBMLFlBQVksT0FBT0MsUUFBUTtBQUMvQixJQUFJQyxZQUFZLE9BQU9DLFFBQVE7QUFDL0IsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVk7QUFDdkMsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVk7QUFDdkMsSUFBSUMsaUJBQWlCLE9BQU9DLGFBQWE7QUFDekMsSUFBSUMsdUJBQXVCWCxnQkFBZ0IsT0FBT3pMLE9BQU9xTSxhQUFhO0FBQ3RFLElBQUlDLDBCQUEwQmIsZ0JBQWdCLE9BQU96TCxPQUFPdU0sZ0JBQWdCO0FBQzVFLElBQUlDLG1CQUFtQlosYUFBYSxPQUFPQyxJQUFJcmMsVUFBVWlkLFlBQVk7QUFDckUsSUFBSUMsbUJBQW1CaEIsYUFBYSxPQUFPQyxJQUFJbmMsVUFBVWlkLFlBQVk7QUFDckUsSUFBSUUsdUJBQXVCSCxvQkFBb0I1a0IsT0FBT2dsQixlQUFlLElBQUlmLE1BQU1ZO0FBQy9FLElBQUlJLHVCQUF1Qkgsb0JBQW9COWtCLE9BQU9nbEIsZUFBZSxJQUFJakIsTUFBTWM7QUFDL0UsSUFBSUssc0JBQXNCVix3QkFBd0IsT0FBTzVRLE1BQU1oTSxVQUFVd1EsT0FBT3FNLGNBQWM7QUFDOUYsSUFBSVUseUJBQXlCRCx1QkFBdUJsbEIsT0FBT2dsQixlQUFlLEdBQUc1TSxPQUFPcU07QUFDcEYsSUFBSVcsdUJBQXVCWix3QkFBd0IsT0FBTzlZLE9BQU85RCxVQUFVd1EsT0FBT3FNLGNBQWM7QUFDaEcsSUFBSVksMEJBQTBCRCx3QkFBd0JwbEIsT0FBT2dsQixlQUFlLEtBQUc1TSxPQUFPcU07QUFDdEYsSUFBSWEsMEJBQTBCO0FBQzlCLElBQUlDLDJCQUEyQixDQUFDO0FBV2hDeGMsT0FBT0MsVUFBVSxvQkFBb0J6WSxLQUFLO0FBZXhDLElBQUlpMUIsWUFBWSxPQUFPajFCO0FBQ3ZCLElBQUlpMUIsY0FBYyxVQUFVO0FBQzFCLE9BQU9BOztBQVNULElBQUlqMUIsUUFBUSxNQUFNO0FBQ2hCLE9BQU87O0FBbUJULElBQUlBLFFBQVFrekIsY0FBYztBQUN4QixPQUFPOztBQVNULElBQ0U3UCxNQUFNNEgsUUFBUWpyQixRQUNkLENBQUNtMEIsNEJBQTRCLFNBQVMsQ0FBQyxDQUFDdE0sUUFBT3VNLGVBQWVwMEIsUUFDOUQ7QUFDQSxPQUFPOztBQUdULElBQUlxekIsT0FBTztBQVFULElBQUlyekIsUUFBUWt6QixhQUFhaDRCLFVBQVU7QUFDakMsT0FBTzs7QUFzQlQsSUFBSThFLFFBQVFrekIsYUFBYXQzQixVQUFVO0FBQ2pDLE9BQU87O0FBU1QsSUFBSW9FLFFBQVEsQ0FBQ2t6QixhQUFhZ0MsY0FBYSxLQUFJQyxXQUFXO0FBQ3BELE9BQU87O0FBU1QsSUFBSW4xQixRQUFRLENBQUNrekIsYUFBYWdDLGNBQWEsS0FBSUUsU0FBUztBQUNsRCxPQUFPOztBQVNULElBQUlwMUIsZUFBZW9YLGVBQWVwWCxJQUFJdWEsWUFBWSxjQUFjO0FBQzlELE9BQU87O0FBZVQsSUFBSXZhLGVBQWVvWCxlQUFlcFgsSUFBSXVhLFlBQVksTUFBTTtBQUN0RCxPQUFPOztBQWVULElBQUl2YSxlQUFlb1gsZUFBZXBYLElBQUl1YSxZQUFZLE1BQU07QUFDdEQsT0FBTzs7O0FBMEJYLElBQUk4YSxZQUFZLENBQUNsQiwyQkFBMkJuMEIsSUFBSTZuQixPQUFPdU07QUFDdkQsSUFBSSxPQUFPaUIsY0FBYyxVQUFVO0FBQ2pDLE9BQU9BOztBQUdULElBQUlDLGVBQWU3bEIsT0FBT2dsQixlQUFlejBCO0FBU3pDLElBQUlzMUIsaUJBQWlCcmEsT0FBTzVELFdBQVc7QUFDckMsT0FBTzs7QUFTVCxJQUFJaWUsaUJBQWlCQyxLQUFLbGUsV0FBVztBQUNuQyxPQUFPOztBQVlULElBQUk0YixpQkFBaUJxQyxpQkFBaUJwdkIsUUFBUW1SLFdBQVc7QUFDdkQsT0FBTzs7QUFTVCxJQUFJb2MsYUFBYTZCLGlCQUFpQjVCLElBQUlyYyxXQUFXO0FBQy9DLE9BQU87O0FBU1QsSUFBSWtjLGFBQWErQixpQkFBaUI5QixJQUFJbmMsV0FBVztBQUMvQyxPQUFPOztBQVNULElBQUl3YyxpQkFBaUJ5QixpQkFBaUJ4QixRQUFRemMsV0FBVztBQUN2RCxPQUFPOztBQVNULElBQUlzYyxpQkFBaUIyQixpQkFBaUIxQixRQUFRdmMsV0FBVztBQUN2RCxPQUFPOztBQVNULElBQUkwYyxrQkFBa0J1QixpQkFBaUJ0QixTQUFTM2MsV0FBVztBQUN6RCxPQUFPOztBQVNULElBQUlrYyxhQUFhK0IsaUJBQWlCWixzQkFBc0I7QUFDdEQsT0FBTzs7QUFTVCxJQUFJakIsYUFBYTZCLGlCQUFpQmQsc0JBQXNCO0FBQ3RELE9BQU87O0FBU1QsSUFBSUcsdUJBQXVCVyxpQkFBaUJWLHdCQUF3QjtBQUNsRSxPQUFPOztBQVNULElBQUlDLHdCQUF3QlMsaUJBQWlCUix5QkFBeUI7QUFDcEUsT0FBTzs7QUFTVCxJQUFJUSxpQkFBaUIsTUFBTTtBQUN6QixPQUFPOztBQUdULE9BQU83bEIsT0FDSjRILFVBQ0FxTixTQUNBekwsS0FBS2paLEtBQ0x3TixNQUFNdW5CLHlCQUF5QkM7O0FBR3BDeGMsT0FBT0MsUUFBUStjLGFBQWFoZCxPQUFPQzs7OztBQzdWbkMsSUFBSTRDLGlCQUFpQjtBQUNyQixJQUFJNUIsT0FBTztBQUNYLElBQUlwYixPQUFPO0FBRVhtYSxPQUFPQyxVQUFVLHFCQUFxQnpZLEtBQUs1QixPQUFPO0FBQ2hELElBQUlvaEIsVUFBVS9GLEtBQUt6WixLQUFLO0FBQ3hCLElBQUl1ZSxPQUFPOUUsS0FBS3paLEtBQUs7QUFFckJ3ZixVQUFVQSxVQUFVQSxVQUFVLE9BQU87QUFFckN4ZixNQUFNeVosS0FBS3paLEtBQUs7QUFDaEI1QixRQUFRQSxNQUFNa2xCLElBQUksVUFBVW1TLEdBQUc7QUFBRSxPQUFPQSxFQUFFOTBCOztBQUMxQ3ZDLE1BQU0ybEI7QUFHTixJQUFJZixNQUFNNWtCLE1BQU1rbEIsSUFBSSxVQUFVbVMsR0FBR2g1QixPQUFPO0FBQ3RDLElBQUlpNUIsTUFBTSxDQUFDLENBQUUsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFNbGEsUUFBUWlhLEVBQUVwVyxPQUFPLE1BQU0sT0FBTztBQUNyRSxJQUFJc1csS0FBS3YzQixNQUFNOUIsU0FBUyxLQUFLRyxVQUFVMkIsTUFBTTlCLFNBQVMsSUFBSSxRQUFRO0FBQ2xFLE9BQU9xNUIsS0FBS0QsTUFBTSxNQUFNRDtHQUN2QjNSLEtBQUs7QUFFUixJQUFJdkUsVUFBVWxoQixLQUFLMkIsS0FBS1c7QUFFeEIsSUFBSSxDQUFDdkMsTUFBTWlJLEtBQUssVUFBVXlQLFVBQVU7QUFBRSxPQUFPeUosWUFBWXpKO0lBQWM7QUFDckUsTUFBTSxJQUFJdUYsZUFDUm1FLFVBQVUsMkJBQTJCd0QsTUFBTSxXQUFXekQsVUFBVSxVQUNoRWppQixXQUNBaWhCOzs7Ozs7QUNyQ04sSUFBSTlFLE9BQU8scURBQ1BzRCxZQUFZLDBEQUNaQyxVQUFVLHdEQUNWQyxhQUFhO0FBcUJqQnpFLE9BQU9DLFVBQVUsb0JBQW9CelksS0FBSytiLE1BQU07QUFDOUMsSUFBSTBELFNBQVNoRyxLQUFLelosS0FBSyxXQUNuQmlmLE1BQU14RixLQUFLelosS0FBSyxXQUNoQjhWLFdBQVdpRyxLQUFLLElBQ2hCaUQsU0FBU2pDLFVBQVUvYyxLQUFLK2IsT0FDeEJ1QyxNQUFNbUIsU0FBUzFELEtBQUssS0FBS0EsS0FBSyxJQUM5QnlELFVBQVUvRixLQUFLelosS0FBSztBQUV4QixJQUFHLE9BQU9zZSxRQUFRLFlBQVlBLE1BQU1BO0FBQ3BDQSxNQUFNQSxPQUFPO0FBQ2JBLE1BQU1BLElBQ0huYixRQUFRLGNBQWMsWUFBWTtBQUFFLE9BQU84WixXQUFXZ0M7R0FDdEQ5YixRQUFRLGFBQWEsWUFBWTtBQUFFLE9BQU84WixXQUFXK0I7R0FDckQ3YixRQUFRLGFBQWEsWUFBWTtBQUFFLE9BQU84WixXQUFXbkg7O0FBRXhELE9BQU8wSixVQUFVQSxVQUFVLE9BQU9sQixNQUFNQTs7Ozs7QUNoQzFDOUYsT0FBT0MsVUFBVSxtQkFBbUJ6WSxLQUFLK2IsTUFBTTtBQUM3QyxPQUFPQSxLQUFLemYsU0FBUyxJQUFJeWYsS0FBSyxLQUFLL2IsSUFBSXlnQjs7Ozs7QUNmekMsSUFBSXBELFVBQVU7QUFDZCxJQUFJdVksZ0JBQWdCO0FBQ3BCLElBQUlDLDBCQUEwQjtBQUM5QixJQUFJdjZCLFNBQVM7QUFFYmtkLE9BQU9DLFVBQVV1RTtBQWlCakIsaUJBQWlCaGQsS0FBSzgxQixZQUFZQyxPQUFPQyxRQUFRO0FBQy9DLElBQUlDLE1BQU07QUFDUkgsWUFBWUE7QUFDWkksTUFBTTtBQUNOQyxTQUFTLFVBQVVuVCxLQUFLO0FBQUUsT0FBT0E7OztBQUVuQyxPQUFPb1QsWUFBWUgsS0FBS2oyQixLQUFLLENBQUMsT0FBTysxQixVQUFVLGNBQWMsSUFBSUE7O0FBSW5FLElBQUlNLGVBQWUsVUFBVUMsUUFBUTtBQUNuQyxJQUFJLE9BQU9sZixnQkFBZ0IsVUFBVTtBQUNuQyxPQUFPa2Ysa0JBQWtCbGY7T0FDcEI7QUFDTCxPQUFPa2YsVUFDTCxPQUFPQSxXQUFXLFlBQ2xCLGVBQWNBLFdBQ2RBLE9BQU9qMkIsYUFBYSxLQUNwQixPQUFPaTJCLE9BQU81MUIsYUFBYTs7O0FBSWpDLHFCQUFxQnUxQixLQUFLajNCLE9BQU91M0IsY0FBYztBQUc3QyxJQUFJdjNCLFNBQVMsT0FBT0EsTUFBTWdlLFlBQVksY0FFbENoZSxNQUFNZ2UsWUFBWXZFLFFBQVF1RSxXQUUxQixDQUFDLENBQUNoZSxNQUFNdkIsZUFBZXVCLE1BQU12QixZQUFZNFosY0FBY3JZLFFBQVE7QUFDakUsSUFBSXczQixNQUFNeDNCLE1BQU1nZSxRQUFRdVosY0FBY047QUFDdEMsSUFBSSxPQUFPTyxRQUFRLFVBQVU7QUFDM0JBLE1BQU1KLFlBQVlILEtBQUtPLEtBQUtEOztBQUU5QixPQUFPQzs7QUFJVCxJQUFJQyxZQUFZQyxnQkFBZ0JULEtBQUtqM0I7QUFDckMsSUFBSXkzQixXQUFXO0FBQ2IsT0FBT0E7O0FBSVQsSUFBSUosYUFBYXIzQixRQUFRO0FBQ3ZCLElBQUksZ0JBQWVBLFFBQU87QUFDeEIsT0FBT0EsTUFBTTIzQjtPQUdSO0FBRUwsSUFBSTtBQUNGLElBQUkvNkIsU0FBU2c3QixZQUFZO0FBQ3ZCLElBQUlDLGdCQUFnQixJQUFJQztBQUN4QixPQUFPRCxjQUFjRSxrQkFBa0IvM0I7T0FDbEM7QUFJTCxJQUFJZzRCLEtBQUs7QUFDVCxJQUFJQyxZQUFZcjdCLFNBQVNzN0IsZ0JBQWdCRixJQUFJO0FBRTdDQyxVQUFVaDdCLFlBQVkrQyxNQUFNbTRCLFVBQVU7QUFDdEMsSUFBSXYxQixPQUFPcTFCLFVBQVUvdUIsVUFDbEIvRSxRQUFRLE1BQU0sTUFBTW5FLE1BQU1rSixZQUFZO0FBQ3pDK3VCLFVBQVUvdUIsWUFBWTtBQUN0QixPQUFPdEc7O1NBRUZ3ZSxLQUFLOzs7QUFTbEIsSUFBSWdYLGNBQWN2Qix3QkFBd0I3MkI7QUFDMUMsSUFBSTBRLE9BQU91bUIsSUFBSUgsYUFBYUYsY0FBYzUyQixTQUFTbzRCO0FBRW5ELElBQUk5NEIsTUFBTSs0QjtBQUtWLElBQUkzbkIsS0FBS3BULFdBQVcsS0FBSyxDQUFDZzdCLFFBQVF0NEIsVUFBVSxDQUN4QyxDQUFDMFEsS0FBS3BULFdBQVcsS0FBS29ULEtBQUssT0FBTyxZQUNsQyxDQUFDQSxLQUFLcFQsV0FBVyxLQUFLb1QsS0FBSyxPQUFPLGlCQUFpQkEsS0FBSyxPQUFPLFlBQzVEO0FBQ0wsSUFBSSxPQUFPMVEsVUFBVSxZQUFZO0FBQy9CVixPQUFPK2UsUUFBUXJlO0FBQ2ZxNEIsYUFBYS80QixPQUFPLE9BQU9BLE9BQU87QUFDbEMsT0FBTzIzQixJQUFJRSxRQUFRLGNBQWNrQixhQUFhLEtBQUs7O0FBRXJELElBQUlFLFNBQVN2NEIsUUFBUTtBQUNuQixPQUFPaTNCLElBQUlFLFFBQVFsYixPQUFPNUQsVUFBVXFOLFNBQVN6TCxLQUFLamEsUUFBUTs7QUFFNUQsSUFBSXc0QixPQUFPeDRCLFFBQVE7QUFDakIsT0FBT2kzQixJQUFJRSxRQUFRWixLQUFLbGUsVUFBVXdLLFlBQVk1SSxLQUFLamEsUUFBUTs7QUFFN0QsSUFBSXM0QixRQUFRdDRCLFFBQVE7QUFDbEIsT0FBT3k0QixZQUFZejRCOzs7QUFJdkIsSUFBSTA0QixPQUFPLElBQ1BDLFFBQVEsT0FDUkMsYUFBYSxPQUNiQyxTQUFTLENBQUMsS0FBSztBQUVuQixJQUFJQyxhQUFhOTRCLFFBQVE7QUFDdkI0NEIsYUFBYTtBQUNiQyxTQUFTLENBQUMsS0FBSzs7QUFJakIsSUFBSTVNLFFBQVFqc0IsUUFBUTtBQUNsQjI0QixRQUFRO0FBQ1JFLFNBQVMsQ0FBQyxLQUFLOztBQUlqQixJQUFJLE9BQU83NEIsVUFBVSxZQUFZO0FBQy9CVixPQUFPK2UsUUFBUXJlO0FBQ2ZxNEIsYUFBYS80QixPQUFPLE9BQU9BLE9BQU87QUFDbENvNUIsT0FBTyxlQUFlTCxhQUFhOztBQUlyQyxJQUFJRSxTQUFTdjRCLFFBQVE7QUFDbkIwNEIsT0FBTyxNQUFNemMsT0FBTzVELFVBQVVxTixTQUFTekwsS0FBS2phOztBQUk5QyxJQUFJdzRCLE9BQU94NEIsUUFBUTtBQUNqQjA0QixPQUFPLE1BQU1uQyxLQUFLbGUsVUFBVXdLLFlBQVk1SSxLQUFLamE7O0FBSS9DLElBQUlzNEIsUUFBUXQ0QixRQUFRO0FBQ2xCLE9BQU95NEIsWUFBWXo0Qjs7QUFHckIsSUFBSTBRLEtBQUtwVCxXQUFXLEtBQUssQ0FBQyxDQUFDcTdCLFNBQVMzNEIsTUFBTTFDLFVBQVUsSUFBSTtBQUN0RCxPQUFPdTdCLE9BQU8sS0FBS0gsT0FBT0csT0FBTzs7QUFHbkMsSUFBSXRCLGVBQWUsR0FBRztBQUNwQixJQUFJZ0IsU0FBU3Y0QixRQUFRO0FBQ25CLE9BQU9pM0IsSUFBSUUsUUFBUWxiLE9BQU81RCxVQUFVcU4sU0FBU3pMLEtBQUtqYSxRQUFRO09BQ3JEO0FBQ0wsT0FBT2kzQixJQUFJRSxRQUFRLFlBQVk7OztBQUluQ0YsSUFBSUMsS0FBSzFxQixLQUFLeE07QUFFZCxJQUFJKzRCO0FBQ0osSUFBSUosT0FBTztBQUNUSSxTQUFTQyxZQUFZL0IsS0FBS2ozQixPQUFPdTNCLGNBQWNhLGFBQWExbkI7T0FDdkQsSUFBSWtvQixZQUFZO0FBQ3JCLE9BQU9LLGlCQUFpQmo1QjtPQUNuQjtBQUNMKzRCLFNBQVNyb0IsS0FBSzRULElBQUksVUFBU3hILEtBQUs7QUFDOUIsT0FBT29jLGVBQWVqQyxLQUFLajNCLE9BQU91M0IsY0FBY2EsYUFBYXRiLEtBQUs2Yjs7O0FBSXRFMUIsSUFBSUMsS0FBS3JTO0FBRVQsT0FBT3NVLHFCQUFxQkosUUFBUUwsTUFBTUc7O0FBSTVDLHlCQUF5QjVCLEtBQUtqM0IsT0FBTztBQUNuQyxRQUFRLE9BQU9BO0tBQ1I7QUFDSCxPQUFPaTNCLElBQUlFLFFBQVEsYUFBYTtLQUU3QjtBQUNILElBQUlpQyxTQUFTLE9BQU8zaEIsS0FBS0MsVUFBVTFYLE9BQU9tRSxRQUFRLFVBQVUsSUFDbEJBLFFBQVEsTUFBTSxPQUNkQSxRQUFRLFFBQVEsT0FBTztBQUNqRSxPQUFPOHlCLElBQUlFLFFBQVFpQyxRQUFRO0tBRXhCO0FBQ0gsSUFBSXA1QixVQUFVLEtBQUssQ0FBQyxJQUFFQSxXQUFXLENBQUNxNUIsVUFBVTtBQUMxQyxPQUFPcEMsSUFBSUUsUUFBUSxNQUFNOztBQUUzQixPQUFPRixJQUFJRSxRQUFRLEtBQUtuM0IsT0FBTztLQUU1QjtBQUNILE9BQU9pM0IsSUFBSUUsUUFBUSxLQUFLbjNCLE9BQU87S0FFNUI7QUFDSCxPQUFPaTNCLElBQUlFLFFBQVFuM0IsTUFBTTBsQixZQUFZOztBQUd6QyxJQUFJMWxCLFVBQVUsTUFBTTtBQUNsQixPQUFPaTNCLElBQUlFLFFBQVEsUUFBUTs7O0FBSy9CLHFCQUFxQm4zQixPQUFPO0FBQzFCLE9BQU8sTUFBTXVkLE1BQU1sRixVQUFVcU4sU0FBU3pMLEtBQUtqYSxTQUFTOztBQUl0RCxxQkFBcUJpM0IsS0FBS2ozQixPQUFPdTNCLGNBQWNhLGFBQWExbkIsTUFBTTtBQUNoRSxJQUFJcW9CLFNBQVM7QUFDYixTQUFTeDZCLElBQUksR0FBRys2QixJQUFJdDVCLE1BQU0xQyxRQUFRaUIsSUFBSSs2QixHQUFHLEVBQUUvNkIsR0FBRztBQUM1QyxJQUFJa1MsT0FBTzRILFVBQVUrSyxlQUFlbkosS0FBS2phLE9BQU9tYyxPQUFPNWQsS0FBSztBQUMxRHc2QixPQUFPdnNCLEtBQUswc0IsZUFBZWpDLEtBQUtqM0IsT0FBT3UzQixjQUFjYSxhQUNqRGpjLE9BQU81ZCxJQUFJO09BQ1Y7QUFDTHc2QixPQUFPdnNCLEtBQUs7OztBQUloQmtFLEtBQUttTSxRQUFRLFVBQVNDLEtBQUs7QUFDekIsSUFBSSxDQUFDQSxJQUFJbEIsTUFBTSxVQUFVO0FBQ3ZCbWQsT0FBT3ZzQixLQUFLMHNCLGVBQWVqQyxLQUFLajNCLE9BQU91M0IsY0FBY2EsYUFDakR0YixLQUFLOzs7QUFHYixPQUFPaWM7O0FBR1QsMEJBQTBCLzRCLE9BQU87QUFDL0IsSUFBSWdrQixNQUFNO0FBRVYsU0FBU3psQixJQUFJLEdBQUdBLElBQUl5QixNQUFNMUMsUUFBUSxFQUFFaUIsR0FBRztBQUNyQyxJQUFJeWxCLElBQUkxbUIsVUFBVWhCLE9BQU9DLG9CQUFvQixHQUFHO0FBQzlDeW5CLE9BQU87QUFDUDs7QUFFRkEsT0FBT2hrQixNQUFNekIsS0FBSzs7QUFFcEJ5bEIsT0FBTztBQUdQLElBQUlBLElBQUl4SCxRQUFRLFlBQVksQ0FBQyxHQUFHO0FBQzlCd0gsTUFBTUEsSUFBSTdmLFFBQVEsUUFBUTs7QUFHNUIsT0FBTzZmOztBQUdULHdCQUF3QmlULEtBQUtqM0IsT0FBT3UzQixjQUFjYSxhQUFhdGIsS0FBSzZiLE9BQU87QUFDekUsSUFBSXI1QjtBQUNKLElBQUlpNkIsaUJBQWlCOW9CLE9BQU84SSx5QkFBeUJ2WixPQUFPOGM7QUFDNUQsSUFBSWtIO0FBRUosSUFBSXVWLGdCQUFnQjtBQUNsQixJQUFJQSxlQUFlNzBCLEtBQUs7QUFDdEIsSUFBSTYwQixlQUFlMzBCLEtBQUs7QUFDdEJvZixNQUFNaVQsSUFBSUUsUUFBUSxtQkFBbUI7T0FDaEM7QUFDTG5ULE1BQU1pVCxJQUFJRSxRQUFRLFlBQVk7O09BRTNCO0FBQ0wsSUFBSW9DLGVBQWUzMEIsS0FBSztBQUN0Qm9mLE1BQU1pVCxJQUFJRSxRQUFRLFlBQVk7Ozs7QUFJcEMsSUFBSWlCLFlBQVk1YixRQUFRTSxPQUFPLEdBQUc7QUFDaEN4ZCxPQUFPLE1BQU13ZCxNQUFNOztBQUVyQixJQUFJLENBQUNrSCxLQUFLO0FBQ1IsSUFBSWlULElBQUlDLEtBQUsxYSxRQUFReGMsTUFBTThjLFFBQVEsR0FBRztBQUNwQyxJQUFJeWEsaUJBQWlCLE1BQU07QUFDekJ2VCxNQUFNb1QsWUFBWUgsS0FBS2ozQixNQUFNOGMsTUFBTTtPQUM5QjtBQUNMa0gsTUFBTW9ULFlBQVlILEtBQUtqM0IsTUFBTThjLE1BQU15YSxlQUFlOztBQUVwRCxJQUFJdlQsSUFBSXhILFFBQVEsUUFBUSxDQUFDLEdBQUc7QUFDMUIsSUFBSW1jLE9BQU87QUFDVDNVLE1BQU1BLElBQUl3VixNQUFNLE1BQU1sVixJQUFJLFVBQVNtVixNQUFNO0FBQ3ZDLE9BQU8sT0FBT0E7R0FDYjNVLEtBQUssTUFBTTRVLE9BQU87T0FDaEI7QUFDTDFWLE1BQU0sT0FBT0EsSUFBSXdWLE1BQU0sTUFBTWxWLElBQUksVUFBU21WLE1BQU07QUFDOUMsT0FBTyxRQUFRQTtHQUNkM1UsS0FBSzs7O09BR1A7QUFDTGQsTUFBTWlULElBQUlFLFFBQVEsY0FBYzs7O0FBR3BDLElBQUksT0FBTzczQixTQUFTLGFBQWE7QUFDL0IsSUFBSXE1QixTQUFTN2IsSUFBSWxCLE1BQU0sVUFBVTtBQUMvQixPQUFPb0k7O0FBRVQxa0IsT0FBT21ZLEtBQUtDLFVBQVUsS0FBS29GO0FBQzNCLElBQUl4ZCxLQUFLc2MsTUFBTSxpQ0FBaUM7QUFDOUN0YyxPQUFPQSxLQUFLbzZCLE9BQU8sR0FBR3A2QixLQUFLaEMsU0FBUztBQUNwQ2dDLE9BQU8yM0IsSUFBSUUsUUFBUTczQixNQUFNO09BQ3BCO0FBQ0xBLE9BQU9BLEtBQUs2RSxRQUFRLE1BQU0sT0FDZEEsUUFBUSxRQUFRLEtBQ2hCQSxRQUFRLFlBQVk7QUFDaEM3RSxPQUFPMjNCLElBQUlFLFFBQVE3M0IsTUFBTTs7O0FBSTdCLE9BQU9BLE9BQU8sT0FBTzBrQjs7QUFJdkIsOEJBQThCK1UsUUFBUUwsTUFBTUcsUUFBUTtBQUNsRCxJQUFJYyxjQUFjO0FBQ2xCLElBQUlyOEIsU0FBU3k3QixPQUFPYSxPQUFPLFVBQVMzcUIsTUFBTTRxQixLQUFLO0FBQzdDRjtBQUNBLElBQUlFLElBQUlyZCxRQUFRLFNBQVMsR0FBR21kO0FBQzVCLE9BQU8xcUIsT0FBTzRxQixJQUFJdjhCLFNBQVM7R0FDMUI7QUFFSCxJQUFJQSxTQUFTLElBQUk7QUFDZixPQUFPdTdCLE9BQU8sS0FDUCxDQUFDSCxTQUFTLEtBQUssS0FBS0EsT0FBTyxTQUMzQixNQUNBSyxPQUFPalUsS0FBSyxXQUNaLE1BQ0ErVCxPQUFPOztBQUdoQixPQUFPQSxPQUFPLEtBQUtILE9BQU8sTUFBTUssT0FBT2pVLEtBQUssUUFBUSxNQUFNK1QsT0FBTzs7QUFHbkUsc0JBQXNCaUIsSUFBSTtBQUd4QixPQUFPLENBQUMsT0FBT0EsT0FBTyxZQUFZLGVBQWEvN0IsS0FBS2c4QixlQUFlRDs7QUFHckUsaUJBQWlCQSxJQUFJO0FBQ25CLE9BQU96VixNQUFNNEgsUUFBUTZOLE9BQ2QsQ0FBQyxPQUFPQSxPQUFPLFlBQVlDLGVBQWVELFFBQVE7O0FBRzNELGtCQUFrQmpXLElBQUk7QUFDcEIsT0FBTyxPQUFPQSxPQUFPLFlBQVlrVyxlQUFlbFcsUUFBUTs7QUFHMUQsZ0JBQWdCck4sR0FBRztBQUNqQixPQUFPLE9BQU9BLE1BQU0sWUFBWXVqQixlQUFldmpCLE9BQU87O0FBR3hELGlCQUFpQjVRLEdBQUc7QUFDbEIsT0FBTyxPQUFPQSxNQUFNLFlBQVltMEIsZUFBZW4wQixPQUFPOztBQUd4RCx3QkFBd0JvMEIsR0FBRztBQUN6QixPQUFPdnBCLE9BQU80SCxVQUFVcU4sU0FBU3pMLEtBQUsrZjs7Ozs7QUNuWHhDLElBQUloYyxVQUFVO0FBQ2QsSUFBSTFoQixTQUFTO0FBZWJrZCxPQUFPQyxVQUFVLG9CQUFvQnpZLEtBQUs7QUFDeEMsSUFBSWdqQixNQUFNaEcsUUFBUWhkLE1BQ2QzQixPQUFPb1IsT0FBTzRILFVBQVVxTixTQUFTekwsS0FBS2paO0FBRTFDLElBQUkxRSxPQUFPQyxxQkFBcUJ5bkIsSUFBSTFtQixVQUFVaEIsT0FBT0MsbUJBQW1CO0FBQ3RFLElBQUk4QyxTQUFTLHFCQUFxQjtBQUNoQyxPQUFPLENBQUMyQixJQUFJMUIsUUFBUTBCLElBQUkxQixTQUFTLEtBQzdCLGVBQ0EsZ0JBQWdCMEIsSUFBSTFCLE9BQU87T0FDMUIsSUFBSUQsU0FBUyxrQkFBa0I7QUFDcEMsT0FBTyxhQUFhMkIsSUFBSTFELFNBQVM7T0FDNUIsSUFBSStCLFNBQVMsbUJBQW1CO0FBQ3JDLElBQUlxUixPQUFPRCxPQUFPQyxLQUFLMVAsTUFDbkJpNUIsT0FBT3ZwQixLQUFLcFQsU0FBUyxJQUNuQm9ULEtBQUt5VyxPQUFPLEdBQUcsR0FBR3JDLEtBQUssUUFBUSxVQUMvQnBVLEtBQUtvVSxLQUFLO0FBQ2hCLE9BQU8sZUFBZW1WLE9BQU87T0FDeEI7QUFDTCxPQUFPalc7O09BRUo7QUFDTCxPQUFPQTs7Ozs7O0FDdEJYeEssT0FBT0MsVUFBVSxjQUFjelksS0FBSzhiLEtBQUs5YyxPQUFPO0FBQzlDLElBQUlrNkIsUUFBUWw1QixJQUFJbTVCLFdBQVcsQ0FBQ241QixJQUFJbTVCLFVBQVUxcEIsT0FBT2lOLE9BQU87QUFDeEQsSUFBSXBZLFVBQVVoSSxXQUFXLEdBQUc7QUFDMUI0OEIsTUFBTXBkLE9BQU85YztPQUNSO0FBQ0wsT0FBT2s2QixNQUFNcGQ7Ozs7OztBQ0RqQnRELE9BQU9DLFVBQVUsdUJBQXVCMEIsV0FBV21jLFFBQVE4QyxZQUFZO0FBQ3JFLElBQUlGLFFBQVEvZSxVQUFVZ2YsV0FBVyxDQUFDaGYsVUFBVWdmLFVBQVUxcEIsT0FBT2lOLE9BQU87QUFFcEUsSUFBSSxDQUFDNFosT0FBTzZDLFNBQVM7QUFDbkI3QyxPQUFPNkMsVUFBVTFwQixPQUFPaU4sT0FBTzs7QUFHakMwYyxhQUFhOTBCLFVBQVVoSSxXQUFXLElBQUk4OEIsYUFBYTtBQUVuRCxTQUFTM2YsUUFBUXlmLE9BQU87QUFDdEIsSUFBSUUsY0FDQSxDQUFDM2YsU0FBUyxZQUFZQSxTQUFTLFVBQVVBLFNBQVMsY0FBY0EsUUFBUSxZQUFZO0FBQ3RGNmMsT0FBTzZDLFFBQVExZixRQUFReWYsTUFBTXpmOzs7Ozs7O0FDekNuQztBQVFBLElBQUlwYixPQUFPO0FBQ1gsbUJBQW1CO0FBQ2pCLEtBQUtnN0IsT0FBTyxvQkFBb0I3VCxLQUFLOFQsV0FBVy9ELEtBQUtnRTs7QUFHdkRDLFFBQVFuaUIsWUFBWTtBQUNsQjNULEtBQUssZ0JBQWdCb1ksS0FBSztBQUN4QixPQUFPQSxJQUFJLEtBQUt1ZDs7QUFFbEJ6MUIsS0FBSyxnQkFBZ0JrWSxLQUFLOWMsT0FBTztBQUMvQixJQUFJLENBQUN5USxPQUFPK1gsU0FBUzFMLE1BQU07QUFDekJyTSxPQUFPMkosZUFBZTBDLEtBQUssS0FBS3VkLE1BQU07QUFDcENyNkIsT0FBT0E7QUFDUGtOLGNBQWM7Ozs7O0FBTXRCLElBQUl1dEIsYUFBYSxPQUFPN0YsWUFBWSxhQUFhQSxVQUFVNEY7QUFTM0Qsd0JBQXdCRSxpQkFBaUJDLGtCQUFrQkMsWUFBWTtBQUVyRSxJQUFJLENBQUNBLGNBQWNDLFlBQVlILG9CQUFvQkcsWUFBWUYsbUJBQW1CO0FBQ2hGLE9BQU87O0FBRVQsSUFBSUcsY0FBY0YsV0FBV2wyQixJQUFJZzJCO0FBQ2pDLElBQUlJLGFBQWE7QUFDZixJQUFJOW5CLFNBQVM4bkIsWUFBWXAyQixJQUFJaTJCO0FBQzdCLElBQUksT0FBTzNuQixXQUFXLFdBQVc7QUFDL0IsT0FBT0E7OztBQUdYLE9BQU87O0FBV1Qsb0JBQW9CMG5CLGlCQUFpQkMsa0JBQWtCQyxZQUFZNW5CLFFBQVE7QUFFekUsSUFBSSxDQUFDNG5CLGNBQWNDLFlBQVlILG9CQUFvQkcsWUFBWUYsbUJBQW1CO0FBQ2hGOztBQUVGLElBQUlHLGNBQWNGLFdBQVdsMkIsSUFBSWcyQjtBQUNqQyxJQUFJSSxhQUFhO0FBQ2ZBLFlBQVlsMkIsSUFBSSsxQixrQkFBa0IzbkI7T0FDN0I7QUFDTDhuQixjQUFjLElBQUlMO0FBQ2xCSyxZQUFZbDJCLElBQUkrMUIsa0JBQWtCM25CO0FBQ2xDNG5CLFdBQVdoMkIsSUFBSTgxQixpQkFBaUJJOzs7QUFRcEN0aEIsT0FBT0MsVUFBVTBRO0FBQ2pCM1EsT0FBT0MsUUFBUWdoQixhQUFhQTtBQWM1QixtQkFBbUJDLGlCQUFpQkMsa0JBQWtCbjVCLFNBQVM7QUFFN0QsSUFBSUEsV0FBV0EsUUFBUXU1QixZQUFZO0FBQ2pDLE9BQU9DLG1CQUFtQk4saUJBQWlCQyxrQkFBa0JuNUI7O0FBRy9ELElBQUl5NUIsZUFBZUMsWUFBWVIsaUJBQWlCQztBQUNoRCxJQUFJTSxpQkFBaUIsTUFBTTtBQUN6QixPQUFPQTs7QUFJVCxPQUFPRCxtQkFBbUJOLGlCQUFpQkMsa0JBQWtCbjVCOztBQVMvRCxxQkFBcUJrNUIsaUJBQWlCQyxrQkFBa0I7QUFFdEQsSUFBSUQsb0JBQW9CQyxrQkFBa0I7QUFFeEMsT0FBT0Qsb0JBQW9CLEtBQUssSUFBSUEsb0JBQW9CLElBQUlDOztBQUk5RCxJQUNFRCxvQkFBb0JBLG1CQUNwQkMscUJBQXFCQSxrQkFDckI7QUFDQSxPQUFPOztBQUtULElBQUlFLFlBQVlILG9CQUFvQkcsWUFBWUYsbUJBQW1CO0FBRWpFLE9BQU87O0FBRVQsT0FBTzs7QUFlVCw0QkFBNEJELGlCQUFpQkMsa0JBQWtCbjVCLFNBQVM7QUFDdEVBLFVBQVVBLFlBQVc7QUFDckJBLFFBQVEyNUIsVUFBVTM1QixRQUFRMjVCLFlBQVksUUFBUSxRQUFRMzVCLFFBQVEyNUIsV0FBVyxJQUFJVjtBQUM3RSxJQUFJTSxhQUFhdjVCLFdBQVdBLFFBQVF1NUI7QUFHcEMsSUFBSUssb0JBQW9CQyxlQUFlWCxpQkFBaUJDLGtCQUFrQm41QixRQUFRMjVCO0FBQ2xGLElBQUlDLHNCQUFzQixNQUFNO0FBQzlCLE9BQU9BOztBQUVULElBQUlFLHFCQUFxQkQsZUFBZVYsa0JBQWtCRCxpQkFBaUJsNUIsUUFBUTI1QjtBQUNuRixJQUFJRyx1QkFBdUIsTUFBTTtBQUMvQixPQUFPQTs7QUFJVCxJQUFJUCxZQUFZO0FBQ2QsSUFBSVEsbUJBQW1CUixXQUFXTCxpQkFBaUJDO0FBRW5ELElBQUlZLHFCQUFxQixTQUFTQSxxQkFBcUIsTUFBTTtBQUMzREMsV0FBV2QsaUJBQWlCQyxrQkFBa0JuNUIsUUFBUTI1QixTQUFTSTtBQUMvRCxPQUFPQTs7QUFJVCxJQUFJTixlQUFlQyxZQUFZUixpQkFBaUJDO0FBQ2hELElBQUlNLGlCQUFpQixNQUFNO0FBRXpCLE9BQU9BOzs7QUFJWCxJQUFJUSxlQUFlcDhCLEtBQUtxN0I7QUFDeEIsSUFBSWUsaUJBQWlCcDhCLEtBQUtzN0IsbUJBQW1CO0FBQzNDYSxXQUFXZCxpQkFBaUJDLGtCQUFrQm41QixRQUFRMjVCLFNBQVM7QUFDL0QsT0FBTzs7QUFJVEssV0FBV2QsaUJBQWlCQyxrQkFBa0JuNUIsUUFBUTI1QixTQUFTO0FBRS9ELElBQUlub0IsU0FBUzBvQix5QkFBeUJoQixpQkFBaUJDLGtCQUFrQmMsY0FBY2o2QjtBQUN2Rmc2QixXQUFXZCxpQkFBaUJDLGtCQUFrQm41QixRQUFRMjVCLFNBQVNub0I7QUFDL0QsT0FBT0E7O0FBR1Qsa0NBQWtDMG5CLGlCQUFpQkMsa0JBQWtCYyxjQUFjajZCLFNBQVM7QUFDMUYsUUFBUWk2QjtLQUNEO0tBQ0E7S0FDQTtLQUNBO0FBRUgsT0FBT3RSLFVBQVV1USxnQkFBZ0I1UixXQUFXNlIsaUJBQWlCN1I7S0FDMUQ7S0FDQTtLQUNBO0tBQ0E7S0FDQTtLQUNBO0FBQ0gsT0FBTzRSLG9CQUFvQkM7S0FDeEI7S0FDQTtLQUNBO0tBQ0E7S0FDQTtLQUNBO0tBQ0E7S0FDQTtLQUNBO0tBQ0E7S0FDQTtBQUNILE9BQU9nQixjQUFjakIsaUJBQWlCQyxrQkFBa0JuNUI7S0FDckQ7QUFDSCxPQUFPbzZCLFlBQVlsQixpQkFBaUJDO0tBQ2pDO0FBQ0gsT0FBT2tCLGVBQWVuQixpQkFBaUJDLGtCQUFrQm41QjtLQUN0RDtBQUNILE9BQU9tNkIsY0FBYyxJQUFJRyxXQUFXcEIsZ0JBQWdCcUIsU0FBUyxJQUFJRCxXQUFXbkIsaUJBQWlCb0IsU0FBU3Y2QjtLQUNuRztBQUNILE9BQU9tNkIsY0FBYyxJQUFJRyxXQUFXcEIsa0JBQWtCLElBQUlvQixXQUFXbkIsbUJBQW1CbjVCO0tBQ3JGO0FBQ0gsT0FBT3c2QixhQUFhdEIsaUJBQWlCQyxrQkFBa0JuNUI7S0FDcEQ7QUFDSCxPQUFPdzZCLGFBQWF0QixpQkFBaUJDLGtCQUFrQm41Qjs7QUFFdkQsT0FBT3k2QixZQUFZdkIsaUJBQWlCQyxrQkFBa0JuNUI7OztBQVk1RCxxQkFBcUJrNUIsaUJBQWlCQyxrQkFBa0I7QUFDdEQsT0FBT0QsZ0JBQWdCaFYsZUFBZWlWLGlCQUFpQmpWOztBQVl6RCxzQkFBc0JnVixpQkFBaUJDLGtCQUFrQm41QixTQUFTO0FBRWhFLElBQUlrNUIsZ0JBQWdCM2pCLFNBQVM0akIsaUJBQWlCNWpCLE1BQU07QUFDbEQsT0FBTzs7QUFFVCxJQUFJMmpCLGdCQUFnQjNqQixTQUFTLEdBQUc7QUFDOUIsT0FBTzs7QUFFVCxJQUFJbWxCLGdCQUFnQjtBQUNwQixJQUFJQyxpQkFBaUI7QUFDckJ6QixnQkFBZ0I3ZCxRQUFRLHVCQUF1QkMsS0FBSzljLE9BQU87QUFDekRrOEIsY0FBYzF2QixLQUFLLENBQUVzUSxLQUFLOWM7O0FBRTVCMjZCLGlCQUFpQjlkLFFBQVEsdUJBQXVCQyxLQUFLOWMsT0FBTztBQUMxRG04QixlQUFlM3ZCLEtBQUssQ0FBRXNRLEtBQUs5Yzs7QUFFN0IsT0FBTzI3QixjQUFjTyxjQUFjblgsUUFBUW9YLGVBQWVwWCxRQUFRdmpCOztBQVlwRSx1QkFBdUJrNUIsaUJBQWlCQyxrQkFBa0JuNUIsU0FBUztBQUNqRSxJQUFJbEUsU0FBU285QixnQkFBZ0JwOUI7QUFDN0IsSUFBSUEsV0FBV3E5QixpQkFBaUJyOUIsUUFBUTtBQUN0QyxPQUFPOztBQUVULElBQUlBLFdBQVcsR0FBRztBQUNoQixPQUFPOztBQUVULElBQUlHLFFBQVEsQ0FBQztBQUNiLE9BQU8sRUFBRUEsUUFBUUgsUUFBUTtBQUN2QixJQUFJNnNCLFVBQVV1USxnQkFBZ0JqOUIsUUFBUWs5QixpQkFBaUJsOUIsUUFBUStELGFBQWEsT0FBTztBQUNqRixPQUFPOzs7QUFHWCxPQUFPOztBQVlULHdCQUF3Qms1QixpQkFBaUJDLGtCQUFrQm41QixTQUFTO0FBQ2xFLE9BQU9tNkIsY0FBY1Msb0JBQW9CMUIsa0JBQWtCMEIsb0JBQW9CekIsbUJBQW1CbjVCOztBQVNwRyw2QkFBNkJ1RyxRQUFRO0FBQ25DLE9BQU8sT0FBTzhnQixXQUFXLGVBQ3ZCLE9BQU85Z0IsV0FBVyxZQUNsQixPQUFPOGdCLE9BQU9xTSxhQUFhLGVBQzNCLE9BQU9udEIsT0FBTzhnQixPQUFPcU0sY0FBYzs7QUFVdkMsNEJBQTRCbnRCLFFBQVE7QUFDbEMsSUFBSXMwQixvQkFBb0J0MEIsU0FBUztBQUMvQixJQUFJO0FBQ0YsT0FBT3EwQixvQkFBb0JyMEIsT0FBTzhnQixPQUFPcU07U0FDbENvSCxlQUFlO0FBQ3RCLE9BQU87OztBQUdYLE9BQU87O0FBU1QsNkJBQTZCQyxXQUFXO0FBQ3RDLElBQUlDLGtCQUFrQkQsVUFBVTF0QjtBQUNoQyxJQUFJNHRCLGNBQWMsQ0FBRUQsZ0JBQWdCeDhCO0FBQ3BDLE9BQU93OEIsZ0JBQWdCRSxTQUFTLE9BQU87QUFDckNGLGtCQUFrQkQsVUFBVTF0QjtBQUM1QjR0QixZQUFZandCLEtBQUtnd0IsZ0JBQWdCeDhCOztBQUVuQyxPQUFPeThCOztBQVNULDJCQUEyQjEwQixRQUFRO0FBQ2pDLElBQUkySSxPQUFPO0FBQ1gsU0FBU29NLE9BQU8vVSxRQUFRO0FBQ3RCMkksS0FBS2xFLEtBQUtzUTs7QUFFWixPQUFPcE07O0FBYVQsbUJBQW1CZ3FCLGlCQUFpQkMsa0JBQWtCanFCLE1BQU1sUCxTQUFTO0FBQ25FLElBQUlsRSxTQUFTb1QsS0FBS3BUO0FBQ2xCLElBQUlBLFdBQVcsR0FBRztBQUNoQixPQUFPOztBQUVULFNBQVNpQixJQUFJLEdBQUdBLElBQUlqQixRQUFRaUIsS0FBSyxHQUFHO0FBQ2xDLElBQUk0ckIsVUFBVXVRLGdCQUFnQmhxQixLQUFLblMsS0FBS284QixpQkFBaUJqcUIsS0FBS25TLEtBQUtpRCxhQUFhLE9BQU87QUFDckYsT0FBTzs7O0FBR1gsT0FBTzs7QUFhVCxxQkFBcUJrNUIsaUJBQWlCQyxrQkFBa0JuNUIsU0FBUztBQUMvRCxJQUFJbTdCLGVBQWVDLGtCQUFrQmxDO0FBQ3JDLElBQUltQyxnQkFBZ0JELGtCQUFrQmpDO0FBQ3RDLElBQUlnQyxhQUFhci9CLFVBQVVxL0IsYUFBYXIvQixXQUFXdS9CLGNBQWN2L0IsUUFBUTtBQUN2RXEvQixhQUFhNVg7QUFDYjhYLGNBQWM5WDtBQUNkLElBQUk0VyxjQUFjZ0IsY0FBY0UsbUJBQW1CLE9BQU87QUFDeEQsT0FBTzs7QUFFVCxPQUFPQyxVQUFVcEMsaUJBQWlCQyxrQkFBa0JnQyxjQUFjbjdCOztBQUdwRSxJQUFJdTdCLGtCQUFrQkMsbUJBQW1CdEM7QUFDekMsSUFBSXVDLG1CQUFtQkQsbUJBQW1CckM7QUFDMUMsSUFBSW9DLGdCQUFnQnovQixVQUFVeS9CLGdCQUFnQnovQixXQUFXMi9CLGlCQUFpQjMvQixRQUFRO0FBQ2hGeS9CLGdCQUFnQmhZO0FBQ2hCa1ksaUJBQWlCbFk7QUFDakIsT0FBTzRXLGNBQWNvQixpQkFBaUJFLGtCQUFrQno3Qjs7QUFHMUQsSUFBSW03QixhQUFhci9CLFdBQVcsS0FDeEJ5L0IsZ0JBQWdCei9CLFdBQVcsS0FDM0J1L0IsY0FBY3YvQixXQUFXLEtBQ3pCMi9CLGlCQUFpQjMvQixXQUFXLEdBQUc7QUFDakMsT0FBTzs7QUFHVCxPQUFPOztBQVlULHFCQUFxQjBDLE9BQU87QUFDMUIsT0FBT0EsVUFBVSxRQUFRLE9BQU9BLFVBQVU7Ozs7O0FDcmM1QztBQXFCQSxJQUFJMGxCLFdBQVd3WCxTQUFTN2tCLFVBQVVxTjtBQUNsQyxJQUFJeVgsb0JBQW9CO0FBQ3hCLHFCQUFxQkMsT0FBTztBQUMxQixJQUFJLE9BQU9BLFVBQVUsWUFBWTtBQUMvQixPQUFPOztBQUdULElBQUk5OUIsT0FBTztBQUNYLElBQUksT0FBTzQ5QixTQUFTN2tCLFVBQVUvWSxTQUFTLGVBQWUsT0FBTzg5QixNQUFNOTlCLFNBQVMsYUFBYTtBQUV2RixJQUFJc2MsUUFBUThKLFNBQVN6TCxLQUFLbWpCLE9BQU94aEIsTUFBTXVoQjtBQUN2QyxJQUFJdmhCLE9BQU87QUFDVHRjLE9BQU9zYyxNQUFNOztPQUVWO0FBRUx0YyxPQUFPODlCLE1BQU05OUI7O0FBR2YsT0FBT0E7O0FBR1RrYSxPQUFPQyxVQUFVNGpCOzs7O0FDckNqQixJQUFJN2hDLE9BQU87QUFDWCxJQUFJaWYsT0FBTztBQUNYLElBQUl3RSxpQkFBaUI7QUFDckIsSUFBSWYsZ0JBQWdCO0FBNEJwQjFFLE9BQU9DLFVBQVUscUJBQXFCd2QsS0FBSzMzQixNQUFNZytCLFFBQVE7QUFDdkRBLFNBQVNBLFdBQVdoL0IsWUFBWSxZQUFZLEtBQUtnL0I7QUFFakQ3c0IsT0FBTzJKLGVBQWU2YyxLQUFLMzNCLE1BQ3pCO0FBQUVvRixLQUFLLDBCQUEwQjtBQWdCN0IsSUFBSSxDQUFDdWEsb0JBQW9CLENBQUN4RSxLQUFLLE1BQU0sYUFBYTtBQUNoREEsS0FBSyxNQUFNLFFBQVE4aUI7O0FBR3JCLElBQUl2cUIsU0FBU3NxQixPQUFPcmpCLEtBQUs7QUFDekIsSUFBSWpILFdBQVcxVSxXQUNiLE9BQU8wVTtBQUVULElBQUl3cUIsZUFBZSxJQUFJaGlDLEtBQUtnZjtBQUM1QjBELGNBQWMsTUFBTXNmO0FBQ3BCLE9BQU9BOztBQUVUdHdCLGNBQWM7Ozs7OztBQy9EcEIsSUFBSThSLGlCQUFpQjtBQUNyQixJQUFJeGpCLE9BQU87QUFDWCxJQUFJaWYsT0FBTztBQUNYLElBQUlzRSxVQUFVO0FBQ2QsSUFBSWIsZ0JBQWdCO0FBNEJwQjFFLE9BQU9DLFVBQVUsbUJBQW1Cd2QsS0FBSzMzQixNQUFNNG1CLFFBQVE7QUFDckQsSUFBSXVYLGdCQUFnQixZQUFZO0FBYTlCLElBQUksQ0FBQ2hqQixLQUFLLE1BQU0sYUFBYTtBQUMzQkEsS0FBSyxNQUFNLFFBQVFnakI7O0FBR3JCLElBQUl6cUIsU0FBU2tULE9BQU8zQyxNQUFNLE1BQU1qZTtBQUNoQyxJQUFJME4sV0FBVzFVLFdBQ2IsT0FBTzBVO0FBRVQsSUFBSXdxQixlQUFlLElBQUloaUMsS0FBS2dmO0FBQzVCMEQsY0FBYyxNQUFNc2Y7QUFDcEIsT0FBT0E7O0FBR1R4ZSxlQUFleWUsZUFBZW4rQixNQUFNO0FBQ3BDMjNCLElBQUkzM0IsUUFBUXlmLFFBQVEwZSxlQUFlbitCOzs7OztBQzVEckMsSUFBSTlELE9BQU87QUFDWCxJQUFJaWYsT0FBTztBQUNYLElBQUl3RSxpQkFBaUI7QUFDckIsSUFBSWYsZ0JBQWdCO0FBb0NwQjFFLE9BQU9DLFVBQVUsMkJBQTJCd2QsS0FBSzMzQixNQUFNZytCLFFBQVE7QUFDN0QsSUFBSUksT0FBT2p0QixPQUFPOEkseUJBQXlCMGQsS0FBSzMzQixPQUM1Q3ErQixTQUFTLFlBQVk7QUFFekIsSUFBSUQsUUFBUSxlQUFlLE9BQU9BLEtBQUtoNUIsS0FDckNpNUIsU0FBU0QsS0FBS2g1QjtBQUVoQitMLE9BQU8ySixlQUFlNmMsS0FBSzMzQixNQUN6QjtBQUFFb0YsS0FBSyxxQ0FBcUM7QUFnQnhDLElBQUksQ0FBQ3VhLG9CQUFvQixDQUFDeEUsS0FBSyxNQUFNLGFBQWE7QUFDaERBLEtBQUssTUFBTSxRQUFRbWpCOztBQU1yQixJQUFJQyxlQUFlcGpCLEtBQUssTUFBTTtBQUM5QkEsS0FBSyxNQUFNLFlBQVk7QUFDdkIsSUFBSXpILFNBQVNzcUIsT0FBT0ssUUFBUTFqQixLQUFLO0FBQ2pDUSxLQUFLLE1BQU0sWUFBWW9qQjtBQUV2QixJQUFJN3FCLFdBQVcxVSxXQUFXO0FBQ3hCLE9BQU8wVTs7QUFHVCxJQUFJd3FCLGVBQWUsSUFBSWhpQyxLQUFLZ2Y7QUFDNUIwRCxjQUFjLE1BQU1zZjtBQUNwQixPQUFPQTs7QUFFVHR3QixjQUFjOzs7Ozs7QUNuRnBCLElBQUk4UixpQkFBaUI7QUFDckIsSUFBSXhqQixPQUFPO0FBQ1gsSUFBSWlmLE9BQU87QUFDWCxJQUFJc0UsVUFBVTtBQUNkLElBQUliLGdCQUFnQjtBQW9DcEIxRSxPQUFPQyxVQUFVLHlCQUF5QndkLEtBQUszM0IsTUFBTTRtQixRQUFRO0FBQzNELElBQUk0WCxVQUFVN0csSUFBSTMzQixPQUNkcStCLFNBQVMsWUFBWTtBQUNyQixNQUFNLElBQUlwZ0IsTUFBTWplLE9BQU87O0FBRzNCLElBQUl3K0IsV0FBVyxlQUFlLE9BQU9BLFNBQ25DSCxTQUFTRztBQUVYLElBQUlDLDJCQUEyQixZQUFZO0FBYXpDLElBQUksQ0FBQ3RqQixLQUFLLE1BQU0sYUFBYTtBQUMzQkEsS0FBSyxNQUFNLFFBQVFzakI7O0FBTXJCLElBQUlGLGVBQWVwakIsS0FBSyxNQUFNO0FBQzlCQSxLQUFLLE1BQU0sWUFBWTtBQUN2QixJQUFJekgsU0FBU2tULE9BQU95WCxRQUFRcGEsTUFBTSxNQUFNamU7QUFDeENtVixLQUFLLE1BQU0sWUFBWW9qQjtBQUV2QixJQUFJN3FCLFdBQVcxVSxXQUFXO0FBQ3hCLE9BQU8wVTs7QUFHVCxJQUFJd3FCLGVBQWUsSUFBSWhpQyxLQUFLZ2Y7QUFDNUIwRCxjQUFjLE1BQU1zZjtBQUNwQixPQUFPQTs7QUFHVHhlLGVBQWUrZSwwQkFBMEJ6K0IsTUFBTTtBQUMvQzIzQixJQUFJMzNCLFFBQVF5ZixRQUFRZ2YsMEJBQTBCeitCOzs7OztBQ2hGaEQsSUFBSTBmLGlCQUFpQjtBQUNyQixJQUFJeGpCLE9BQU87QUFDWCxJQUFJaWYsT0FBTztBQUNYLElBQUlzRSxVQUFVO0FBQ2QsSUFBSWIsZ0JBQWdCO0FBT3BCLElBQUk4ZixrQkFBa0IsT0FBT3Z0QixPQUFPd3RCLG1CQUFtQjtBQUl2RCxJQUFJQyxTQUFTLFlBQVc7QUFDeEIsSUFBSUMsZUFBZTF0QixPQUFPMnRCLG9CQUFvQkYsUUFBUUcsT0FBTyxVQUFTLytCLE1BQU07QUFDMUUsSUFBSWcvQixXQUFXN3RCLE9BQU84SSx5QkFBeUIya0IsUUFBUTUrQjtBQU12RCxJQUFJLE9BQU9nL0IsYUFBYSxVQUN0QixPQUFPO0FBRVQsT0FBTyxDQUFDQSxTQUFTcHhCOztBQUluQixJQUFJK00sT0FBUWlqQixTQUFTN2tCLFVBQVU0QixNQUMzQnNKLFFBQVEyWixTQUFTN2tCLFVBQVVrTDtBQStCL0IvSixPQUFPQyxVQUFVLDRCQUE0QndkLEtBQUszM0IsTUFBTTRtQixRQUFRdkcsa0JBQWtCO0FBQ2hGLElBQUksT0FBT0EscUJBQXFCLFlBQVk7QUFDMUNBLG1CQUFtQixZQUFZOztBQUdqQyxJQUFJNGUsb0JBQW9CO0FBQ3BCclksUUFBUUE7QUFDUnZHLGtCQUFrQkE7O0FBSXRCLElBQUksQ0FBQ3NYLElBQUl1SCxXQUFXO0FBQ2xCdkgsSUFBSXVILFlBQVk7O0FBRWxCdkgsSUFBSXVILFVBQVVsL0IsUUFBUWkvQjtBQUV0Qjl0QixPQUFPMkosZUFBZTZjLEtBQUszM0IsTUFDekI7QUFBRW9GLEtBQUssaUNBQWlDO0FBQ3BDNjVCLGtCQUFrQjVlLGlCQUFpQjFGLEtBQUs7QUFFeEMsSUFBSXdrQix5QkFBeUIsWUFBWTtBQWdCdkMsSUFBSSxDQUFDaGtCLEtBQUssTUFBTSxhQUFhO0FBQzNCQSxLQUFLLE1BQU0sUUFBUWdrQjs7QUFHckIsSUFBSXpyQixTQUFTdXJCLGtCQUFrQnJZLE9BQU8zQyxNQUFNLE1BQU1qZTtBQUNsRCxJQUFJME4sV0FBVzFVLFdBQVc7QUFDeEIsT0FBTzBVOztBQUdULElBQUl3cUIsZUFBZSxJQUFJaGlDLEtBQUtnZjtBQUM1QjBELGNBQWMsTUFBTXNmO0FBQ3BCLE9BQU9BOztBQUdUeGUsZUFBZXlmLHdCQUF3Qm4vQixNQUFNO0FBRzdDLElBQUkwK0IsaUJBQWlCO0FBRW5CLElBQUkzbEIsWUFBWTVILE9BQU9pTixPQUFPO0FBRTlCckYsVUFBVTRCLE9BQU9BO0FBQ2pCNUIsVUFBVWtMLFFBQVFBO0FBQ2xCOVMsT0FBT3d0QixlQUFlUSx3QkFBd0JwbUI7T0FHM0M7QUFDSCxJQUFJcW1CLGdCQUFnQmp1QixPQUFPMnRCLG9CQUFvQm5IO0FBQy9DeUgsY0FBYzdoQixRQUFRLFVBQVU4aEIsY0FBYztBQUM1QyxJQUFJUixhQUFhM2hCLFFBQVFtaUIsa0JBQWtCLENBQUMsR0FBRztBQUM3Qzs7QUFHRixJQUFJQyxLQUFLbnVCLE9BQU84SSx5QkFBeUIwZCxLQUFLMEg7QUFDOUNsdUIsT0FBTzJKLGVBQWVxa0Isd0JBQXdCRSxjQUFjQzs7O0FBSWhFMWdCLGNBQWMsTUFBTXVnQjtBQUNwQixPQUFPMWYsUUFBUTBmOztBQUVqQnZ4QixjQUFjOzs7Ozs7QUMvSXBCLElBQUkxUixPQUFPO0FBQ1gsSUFBSTBpQixnQkFBZ0I7QUFtQ3BCMUUsT0FBT0MsVUFBVSxrQ0FBa0N3ZCxLQUFLMzNCLE1BQU00bUIsUUFBUXZHLGtCQUFrQjtBQUN0RixJQUFJNGUsb0JBQW9CdEgsSUFBSXVILFVBQVVsL0I7QUFFdEMsSUFBSXUvQixvQkFBb0JOLGtCQUFrQjVlO0FBQzFDNGUsa0JBQWtCNWUsbUJBQW1CLDRDQUE0QztBQUMvRSxJQUFJM00sU0FBUzJNLGlCQUFpQmtmLG1CQUFtQjVrQixLQUFLO0FBQ3RELElBQUlqSCxXQUFXMVUsV0FBVztBQUN4QixPQUFPMFU7O0FBR1QsSUFBSXdxQixlQUFlLElBQUloaUMsS0FBS2dmO0FBQzVCMEQsY0FBYyxNQUFNc2Y7QUFDcEIsT0FBT0E7O0FBR1QsSUFBSU0sVUFBVVMsa0JBQWtCclk7QUFDaENxWSxrQkFBa0JyWSxTQUFTLDZDQUE2QztBQUN0RSxJQUFJbFQsU0FBU2tULE9BQU80WCxTQUFTdmEsTUFBTSxNQUFNamU7QUFDekMsSUFBSTBOLFdBQVcxVSxXQUFXO0FBQ3hCLE9BQU8wVTs7QUFHVCxJQUFJd3FCLGVBQWUsSUFBSWhpQyxLQUFLZ2Y7QUFDNUIwRCxjQUFjLE1BQU1zZjtBQUNwQixPQUFPQTs7Ozs7O0FDeERYLElBQUl4ZixVQUFVO0FBa0JkeEUsT0FBT0MsVUFBVSwwQkFBMEJqYixHQUFHa0wsR0FBRztBQUMvQyxPQUFPc1UsUUFBUXhmLEtBQUt3ZixRQUFRdFUsS0FBSyxDQUFDLElBQUk7Ozs7O0FDVHhDOFAsT0FBT0MsVUFBVSx5Q0FBeUN6WSxLQUFLO0FBQzdELElBQUksT0FBT3lQLE9BQU9xdUIsMEJBQTBCLFlBQVksT0FBTztBQUUvRCxPQUFPcnVCLE9BQU9xdUIsc0JBQXNCOTlCLEtBQUtxOUIsT0FBTyxVQUFVVSxLQUFLO0FBQzdELE9BQU90dUIsT0FBTzhJLHlCQUF5QnZZLEtBQUsrOUIsS0FBSy9WOzs7Ozs7QUNkckQsSUFBSXBLLGtDQUFrQztBQWdCdENwRixPQUFPQyxVQUFVLG9DQUFvQ3pZLEtBQUs7QUFDeEQsT0FBT3lQLE9BQU9DLEtBQUsxUCxLQUFLdU8sT0FBT3FQLGdDQUFnQzVkOzs7OztBQzNCakU7QUE4QkEsNEJBQTRCZytCLFFBQVEvWixXQUFXO0FBQzdDLE9BQU9BLHFCQUFxQjFILFNBQVN5aEIsV0FBVy9aOztBQW1CbEQsK0JBQStCK1osUUFBUS9aLFdBQVc7QUFDaEQsSUFBSUEscUJBQXFCMUgsT0FBTztBQUU5QixPQUFPeWhCLE9BQU92Z0MsZ0JBQWdCd21CLFVBQVV4bUIsZUFBZXVnQyxrQkFBa0IvWixVQUFVeG1CO09BQzlFLElBQUl3bUIsVUFBVTVNLHFCQUFxQmtGLFNBQVMwSCxjQUFjMUgsT0FBTztBQUV0RSxPQUFPeWhCLE9BQU92Z0MsZ0JBQWdCd21CLGFBQWErWixrQkFBa0IvWjs7QUFHL0QsT0FBTzs7QUFpQlQsMkJBQTJCK1osUUFBUUMsWUFBWTtBQUM3QyxJQUFJQyxtQkFBbUIsT0FBT0YsV0FBVyxXQUFXQSxTQUFTQSxPQUFPL2hCO0FBQ3BFLElBQUlnaUIsc0JBQXNCaGpCLFFBQVE7QUFDaEMsT0FBT2dqQixXQUFXbGhDLEtBQUttaEM7T0FDbEIsSUFBSSxPQUFPRCxlQUFlLFVBQVU7QUFDekMsT0FBT0MsaUJBQWlCMWlCLFFBQVF5aUIsZ0JBQWdCLENBQUM7O0FBR25ELE9BQU87O0FBZVQsSUFBSTlCLG9CQUFvQjtBQUN4Qix5QkFBeUJnQyxlQUFlO0FBQ3RDLElBQUk3L0IsT0FBTztBQUNYLElBQUksT0FBTzYvQixjQUFjNy9CLFNBQVMsYUFBYTtBQUU3QyxJQUFJc2MsUUFBUU8sT0FBT2dqQixlQUFldmpCLE1BQU11aEI7QUFDeEMsSUFBSXZoQixPQUFPO0FBQ1R0YyxPQUFPc2MsTUFBTTs7T0FFVjtBQUNMdGMsT0FBTzYvQixjQUFjNy9COztBQUd2QixPQUFPQTs7QUFjVCw0QkFBNEIybEIsV0FBVztBQUNyQyxJQUFJbWEsa0JBQWtCbmE7QUFDdEIsSUFBSUEscUJBQXFCMUgsT0FBTztBQUM5QjZoQixrQkFBa0JDLGdCQUFnQnBhLFVBQVV4bUI7T0FDdkMsSUFBSSxPQUFPd21CLGNBQWMsWUFBWTtBQUkxQ21hLGtCQUFrQkMsZ0JBQWdCcGEsV0FBV2pLLFVBQ3pDcWtCLGdCQUFnQixJQUFJcGE7O0FBRzFCLE9BQU9tYTs7QUFnQlQsb0JBQW9CbmEsV0FBVztBQUM3QixJQUFJM0YsTUFBTTtBQUNWLElBQUkyRixhQUFhQSxVQUFVaEksU0FBUztBQUNsQ3FDLE1BQU0yRixVQUFVaEk7T0FDWCxJQUFJLE9BQU9nSSxjQUFjLFVBQVU7QUFDeEMzRixNQUFNMkY7O0FBR1IsT0FBTzNGOztBQUdUOUYsT0FBT0MsVUFBVTtBQUNmbU0sb0JBQW9CQTtBQUNwQnZFLHVCQUF1QkE7QUFDdkIyRSxtQkFBbUJBO0FBQ25CbEksWUFBWUE7QUFDWjJILG9CQUFvQkE7Ozs7O0FDMUt0QixJQUFJbnBCLFNBQVM7QUFDYixJQUFJbWUsT0FBTztBQUNYLElBQUltYyxnQkFBZ0I7QUFDcEIsSUFBSTNYLGlCQUFpQjtBQTJCckIsSUFBSXFnQixXQUFXLENBQUMsV0FBVyxhQUFhLFFBQVE7QUFFaEQ5bEIsT0FBT0MsVUFBVSxpQkFBaUJ6WSxLQUFLdStCLHdCQUF3QjtBQUM3RCxJQUFJLENBQUN0Z0Isa0JBQWtCLE9BQU9qZTtBQUU5QixPQUFPLElBQUl3K0IsTUFBTXgrQixLQUFLO0FBQ3BCMEQsS0FBSyxxQkFBcUJxRCxRQUFRK1MsVUFBVTtBQUsxQyxJQUFJLE9BQU9BLGFBQWEsWUFDcEJ4ZSxPQUFPOGlCLGtCQUFrQjVDLFFBQVExQixjQUFjLENBQUMsS0FDaEQsQ0FBQzJrQixRQUFRNWUsSUFBSTlZLFFBQVErUyxXQUFXO0FBRWxDLElBQUl5a0Isd0JBQXdCO0FBQzFCLE1BQU1oaUIsTUFBTSw0QkFBNEJnaUIseUJBQXlCLE1BQy9EemtCLFdBQVcscUNBQ1h5a0IseUJBQXlCOztBQUc3QixJQUFJRyxvQkFBb0I5SSxjQUFjN3VCLFFBQVFzMkIsT0FBTyxVQUFTdmpCLFVBQVU7QUFDdEUsT0FBTyxDQUFDckssT0FBTzRILFVBQVUrSyxlQUFldEksYUFDdEN3a0IsU0FBUzlpQixRQUFRMUIsY0FBYyxDQUFDO0dBQ2pDaUssS0FBSyxVQUFTdm1CLEdBQUdrTCxHQUFHO0FBQ3JCLE9BQU9pMkIsZUFBZTdrQixVQUFVdGMsS0FBS21oQyxlQUFlN2tCLFVBQVVwUjs7QUFHaEUsSUFBSWcyQixrQkFBa0JwaUMsVUFDbEJxaUMsZUFBZUQsa0JBQWtCLElBQUk1a0IsWUFBWSxHQUFHO0FBR3RELE1BQU15QyxNQUFNLDRCQUE0QnpDLFdBQ3RDLHFCQUFxQjRrQixrQkFBa0IsS0FBSztPQUN6QztBQUNMLE1BQU1uaUIsTUFBTSw0QkFBNEJ6Qzs7O0FBZ0I1QyxJQUFJd2tCLFNBQVM5aUIsUUFBUTFCLGNBQWMsQ0FBQyxLQUFLLENBQUNMLEtBQUsxUyxRQUFRLGFBQWE7QUFDbEUwUyxLQUFLMVMsUUFBUSxRQUFRNjNCOztBQUd2QixPQUFPSCxRQUFRLzZCLElBQUlxRCxRQUFRK1M7Ozs7QUFjakMsd0JBQXdCK2tCLE1BQU1DLE1BQU1DLE1BQU07QUFDeEMsSUFBSSxDQUFDQSxNQUFNO0FBSVRBLE9BQU87QUFDUCxTQUFTeGhDLElBQUksR0FBR0EsS0FBS3NoQyxLQUFLdmlDLFFBQVFpQixLQUFLO0FBQ3JDd2hDLEtBQUt4aEMsS0FBSzs7O0FBSWQsSUFBSSxDQUFDd2hDLEtBQUtGLEtBQUt2aUMsV0FBVyxDQUFDeWlDLEtBQUtGLEtBQUt2aUMsUUFBUXdpQyxLQUFLeGlDLFNBQVM7QUFDekQsSUFBSXVpQyxLQUFLdmlDLFdBQVcsS0FBS3dpQyxLQUFLeGlDLFdBQVcsR0FBRztBQUMxQ3lpQyxLQUFLRixLQUFLdmlDLFFBQVF3aUMsS0FBS3hpQyxVQUFVa3BCLEtBQUt3WixJQUFJSCxLQUFLdmlDLFFBQVF3aUMsS0FBS3hpQztPQUN2RDtBQUNMeWlDLEtBQUtGLEtBQUt2aUMsUUFBUXdpQyxLQUFLeGlDLFVBQVVrcEIsS0FBS3laLElBQ3BDTixlQUFlRSxLQUFLcnhCLE1BQU0sR0FBRyxDQUFDLElBQUlzeEIsTUFBTUMsUUFBUSxHQUNoREosZUFBZUUsTUFBTUMsS0FBS3R4QixNQUFNLEdBQUcsQ0FBQyxJQUFJdXhCLFFBQVEsR0FDaERKLGVBQWVFLEtBQUtyeEIsTUFBTSxHQUFHLENBQUMsSUFBSXN4QixLQUFLdHhCLE1BQU0sR0FBRyxDQUFDLElBQUl1eEIsUUFDbkQsQ0FBQ0YsS0FBS3J4QixNQUFNLENBQUMsT0FBT3N4QixLQUFLdHhCLE1BQU0sQ0FBQyxLQUFLLElBQUk7OztBQUtqRCxPQUFPdXhCLEtBQUtGLEtBQUt2aUMsUUFBUXdpQyxLQUFLeGlDOzs7OztBQzNIaEMsSUFBSWhCLFNBQVM7QUFFYixJQUFJNGpDLGVBQWV6dkIsT0FBTzhJLHlCQUF5QixZQUFZLElBQUk7QUEwQ25FQyxPQUFPQyxVQUFVLHdCQUF5QjhDLElBQUk0akIsZUFBZUMsYUFBYTtBQUN4RSxJQUFJLENBQUNGLGFBQWFoekIsY0FBYyxPQUFPcVA7QUFFdkM5TCxPQUFPMkosZUFBZW1DLElBQUksVUFBVTtBQUNsQzdYLEtBQUssWUFBWTtBQUNmLElBQUkwN0IsYUFBYTtBQUNmLE1BQU03aUIsTUFBTSw0QkFBNEI0aUIsZ0JBQWdCLGlCQUN0RCxpRUFDQUEsZ0JBQWdCLGFBQWFBLGdCQUFnQjs7QUFHakQsTUFBTTVpQixNQUFNLDRCQUE0QjRpQixnQkFBZ0IsaUJBQ3RELGdDQUFnQ0EsZ0JBQWdCOzs7QUFJdEQsT0FBTzVqQjs7Ozs7QUM1RFQsSUFBSWpnQixTQUFTO0FBbUJia2QsT0FBT0MsVUFBVSwwQkFBMEI7QUFDekMsT0FBT25kLE9BQU82aUIsWUFDWixPQUFPcWdCLFVBQVUsZUFDakIsT0FBT0MsWUFBWTs7Ozs7QUNKdkIsZUFBZXovQixPQUFPO0FBR3BCLE9BQU9BLFVBQVVBOztBQUluQndaLE9BQU9DLFVBQVVtUCxPQUFPdmMsU0FBU0E7Ozs7QUNOakNtTixPQUFPQyxVQUFVLHVCQUF1QjZkLFFBQVE7QUFDOUMsSUFBSXRrQixTQUFTdkMsT0FBTzJ0QixvQkFBb0I5RztBQUV4QyxxQkFBcUJ4YyxVQUFVO0FBQzdCLElBQUk5SCxPQUFPd0osUUFBUTFCLGNBQWMsQ0FBQyxHQUFHO0FBQ25DOUgsT0FBT3hHLEtBQUtzTzs7O0FBSWhCLElBQUl1bEIsUUFBUTV2QixPQUFPZ2xCLGVBQWU2QjtBQUNsQyxPQUFPK0ksVUFBVSxNQUFNO0FBQ3JCNXZCLE9BQU8ydEIsb0JBQW9CaUMsT0FBT3hqQixRQUFReUI7QUFDMUMraEIsUUFBUTV2QixPQUFPZ2xCLGVBQWU0Szs7QUFHaEMsT0FBT3J0Qjs7Ozs7QUNmVHdHLE9BQU9DLFVBQVUsaUNBQWlDNmQsUUFBUTtBQUN4RCxJQUFJdGtCLFNBQVM7QUFDYixTQUFTMVQsUUFBUWc0QixRQUFRO0FBQ3ZCdGtCLE9BQU94RyxLQUFLbE47O0FBRWQsT0FBTzBUIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIkBkaW1lbnNpb25zID0gaW1wb3J0ICcuL3NpbXVsYXRlLmNvZmZlZSdcbkBEb20gPSBARE9NID0gd2luZG93LnF1aWNrZG9tXG5tb2NoYS5zZXR1cCgndGRkJylcbm1vY2hhLnNsb3coNDAwKVxubW9jaGEudGltZW91dCgxMjAwMClcbm1vY2hhLmJhaWwoKSB1bmxlc3Mgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lXG5jaGFpID0gaW1wb3J0ICdjaGFpJ1xuY2hhaS51c2UgaW1wb3J0ICdjaGFpLXN0eWxlJ1xuY2hhaS5jb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgPSAxZTNcbntleHBlY3R9ID0gY2hhaVxuXG5zYW5kYm94ID0gbnVsbFxucmVzdGFydFNhbmRib3ggPSAoKS0+XG5cdHNhbmRib3gucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChzYW5kYm94KSBpZiBzYW5kYm94XG5cdHNhbmRib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRzYW5kYm94LmlkID0gJ3NhbmRib3gnXG5cdHNhbmRib3guc2V0QXR0cmlidXRlICdzdHlsZScsICdib3JkZXI6MXB4IHNvbGlkOyBwYWRkaW5nOjIwcHg7IGJveC1zaXppbmc6Ym9yZGVyLWJveCdcblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzYW5kYm94KVxuXG5jaGVja0NoaWxkU3RydWN0dXJlID0gKG1haW4pLT4gKGNoaWxkcmVuLi4uKS0+XG5cdGV4cGVjdChtYWluLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoY2hpbGRyZW4ubGVuZ3RoKVxuXHRmb3IgY2hpbGQsaW5kZXggaW4gY2hpbGRyZW5cblx0XHRleHBlY3QobWFpbi5jaGlsZHJlbltpbmRleF0pLnRvLmVxdWFsKGNoaWxkKVxuXHRcdGV4cGVjdChjaGlsZC5lbC5wYXJlbnROb2RlKS50by5lcXVhbChtYWluLmVsKVxuXHRcdGV4cGVjdChjaGlsZC5wYXJlbnQpLnRvLmVxdWFsKG1haW4pXG5cdHJldHVyblxuXG5cbnN1aXRlIFwiUXVpY2tEb21cIiwgKCktPlxuXHRzZXR1cChyZXN0YXJ0U2FuZGJveClcblxuXHR0ZXN0IFwiVmVyc2lvbiBQcm9wZXJ0eVwiLCAoKS0+XG5cdFx0cGFja2FnZVZlcnNpb24gPSAoaW1wb3J0ICcuLi9wYWNrYWdlICQgdmVyc2lvbicpXG5cdFx0ZXhwZWN0KERvbS52ZXJzaW9uKS50by5lcXVhbChwYWNrYWdlVmVyc2lvbilcblxuXG5cdHN1aXRlIFwiRWxlbWVudCBDcmVhdGlvblwiLCAoKS0+XG5cdFx0dGVzdCBcIkJhc2ljIENyZWF0aW9uXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbSgnZGl2Jylcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2KS50by5lcXVhbCAnb2JqZWN0J1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXYuZWwpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5iZS5pbnN0YW5jZU9mIHdpbmRvdy5IVE1MRGl2RWxlbWVudFxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmJlLnVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDBcblxuXG5cdFx0dGVzdCBcIlNob3J0Y3V0c1wiLCAoKS0+XG5cdFx0XHRleHBlY3QoRG9tLmEoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdhJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmxpbmsoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdhJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmFuY2hvcigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2EnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uZGl2KCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnZGl2JykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLnRleHQoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCd0ZXh0JykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLnNwYW4oKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdzcGFuJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmg0KCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnaDQnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uaGVhZGVyKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnaGVhZGVyJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmZvb3RlcigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2Zvb3RlcicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5zZWN0aW9uKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnc2VjdGlvbicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5idXR0b24oKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdidXR0b24nKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uaW5wdXQoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdpbnB1dCcpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0IyBleHBlY3QoRG9tLm1haW4oKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdtYWluJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHR0eXBlcyA9IFsnYScsJ2RpdicsJ3RleHQnLCdzcGFuJywnaDQnLCdoZWFkZXInLCdmb290ZXInLCdzZWN0aW9uJywnYnV0dG9uJywnaW5wdXQnXVxuXHRcdFx0Zm9yIHR5cGUgaW4gdHlwZXNcblx0XHRcdFx0ZXhwZWN0KERvbVt0eXBlXSgpLmVsLmNvbnN0cnVjdG9yLm5hbWUpLm5vdC50by5jb250YWluKCdVbmtub3duJylcblx0XHRcdHJldHVyblxuXG5cblx0XHR0ZXN0IFwiQmFzaWMgb3B0aW9uc1wiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdihjbGFzczonYWJjLTEyMycsIHByb3BzOnsnYWJjJzoxMjMsICdkZWYnOjQ1Nn0pXG5cdFx0XHRCID0gRG9tLmRpdihpZDonQicsIGNsYXNzTmFtZTonYWJjLTEyMycsIGF0dHJzOnsnZGF0YS1hYmMnOjEyMywgJ2RhdGEtZGVmJzo0NTZ9KVxuXHRcdFx0QyA9IERvbS5pbnB1dCh0eXBlOid0ZXh0JywgbmFtZTonYWJjJywgdmFsdWU6J2hlbGxvJylcblx0XHRcdEQgPSBEb20uaW5wdXQodHlwZTonY2hlY2tib3gnLCBjaGVja2VkOnRydWUpXG5cdFx0XHRFID0gRG9tLm9wdGlvbihuYW1lOidhYmMnLCB2YWx1ZTonaGVsbG8nLCBzZWxlY3RlZDp0cnVlKVxuXHRcdFx0RiA9IERvbS5saW5rKGhyZWY6J2h0dHBzOi8vZ29vZ2xlLmNvbS8nKVxuXHRcdFx0RyA9IERvbS5hbmNob3IodXJsOidodHRwczovL2dvb2dsZS5jb20vJylcblx0XHRcdEggPSBEb20udGV4dCgnU29tZSB0ZXh0Jylcblx0XHRcdEkgPSBEb20uaW1nKHNyYzonaHR0cHM6Ly9nb29nbGUuY29tLycpXG5cdFx0XHRKID0gRG9tLmRpdihyZWxhdGVkSW5zdGFuY2U6IG9iaj17YToxfSlcblxuXHRcdFx0ZXhwZWN0KEEuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnYWJjLTEyMycpXG5cdFx0XHRleHBlY3QoQS5lbC5hYmMpLnRvLmVxdWFsKDEyMylcblx0XHRcdGV4cGVjdChBLmVsLmRlZikudG8uZXF1YWwoNDU2KVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnYWJjLTEyMycpXG5cdFx0XHRleHBlY3QoQi5lbC5pZCkudG8uZXF1YWwoJ0InKVxuXHRcdFx0ZXhwZWN0KEIuZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWFiYycpKS50by5lcXVhbCgnMTIzJylcblx0XHRcdGV4cGVjdChCLmVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kZWYnKSkudG8uZXF1YWwoJzQ1NicpXG5cdFx0XHRleHBlY3QoQi5lbC5kYXRhc2V0LmFiYykudG8uZXF1YWwoJzEyMycpIGlmIEIuZWwuZGF0YXNldFxuXHRcdFx0ZXhwZWN0KEMuZWwudHlwZSkudG8uZXF1YWwoJ3RleHQnKVxuXHRcdFx0ZXhwZWN0KEMuZWwubmFtZSkudG8uZXF1YWwoJ2FiYycpXG5cdFx0XHRleHBlY3QoQy5lbC52YWx1ZSkudG8uZXF1YWwoJ2hlbGxvJylcblx0XHRcdGV4cGVjdChELmVsLmNoZWNrZWQpLnRvLmVxdWFsKHRydWUpXG5cdFx0XHRleHBlY3QoRS5lbC5uYW1lKS50by5lcXVhbCgnYWJjJylcblx0XHRcdGV4cGVjdChFLmVsLnNlbGVjdGVkKS50by5lcXVhbCh0cnVlKVxuXHRcdFx0ZXhwZWN0KEYuZWwuaHJlZikudG8uZXF1YWwoJ2h0dHBzOi8vZ29vZ2xlLmNvbS8nKVxuXHRcdFx0ZXhwZWN0KEcuZWwuaHJlZikudG8uZXF1YWwoJ2h0dHBzOi8vZ29vZ2xlLmNvbS8nKVxuXHRcdFx0ZXhwZWN0KEguZWwubm9kZVR5cGUpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoSC5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgdGV4dCcpXG5cdFx0XHRleHBlY3QoSS5lbC5zcmMpLnRvLmVxdWFsKCdodHRwczovL2dvb2dsZS5jb20vJylcblx0XHRcdGV4cGVjdChKLnJlbGF0ZWQpLnRvLmVxdWFsKG9iailcblx0XHRcdGV4cGVjdChKLm9wdGlvbnMucmVsYXRlZCkudG8uZXF1YWwob2JqKVxuXG5cblx0XHR0ZXN0IFwiQ3JlYXRpb24gdy8gY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYobnVsbCwgJ1NvbWUgdGV4dCcpXG5cdFx0XHRCID0gRG9tLmRpdihudWxsLCBEb20uc3BhbigpLCAnU29tZSB0ZXh0JywgRG9tLnNwYW4oKSlcblxuXHRcdFx0ZXhwZWN0KEEuZWwuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQS5lbC5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoQS5lbC5jaGlsZE5vZGVzWzBdLm5vZGVUeXBlKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KEEuZWwuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgdGV4dCcpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXNbMF0ubm9kZVR5cGUpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXNbMV0ubm9kZVR5cGUpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzWzFdLnRleHRDb250ZW50KS50by5lcXVhbCgnU29tZSB0ZXh0Jylcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXNbMl0ubm9kZVR5cGUpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5lbC5jaGlsZE5vZGVzWzJdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChCLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblxuXG5cdFx0dGVzdCBcIkFycmF5IHN5bnRheFwiLCAoKS0+XG5cdFx0XHRzZWN0aW9uID0gRG9tKFxuXHRcdFx0XHRbJ3NlY3Rpb24nLCB7c3R5bGU6ZGlzcGxheTonaW5saW5lJ30sIFxuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgJ2NoaWxkQSddXG5cdFx0XHRcdFx0WydzcGFuJywgbnVsbCwgXG5cdFx0XHRcdFx0XHRbJ3N0cm9uZycsIG51bGwsICdjaGlsZEInXVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ2RpdicsIG51bGwsICdjaGlsZEMnLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIG51bGwsICdjaGlsZENfMSddXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCBudWxsLCAnY2hpbGRDXzInXVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3Qoc2VjdGlvbikubm90LnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChzZWN0aW9uLnJhdykudG8uaGF2ZS5zdHlsZSgnZGlzcGxheScsICdpbmxpbmUnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMV0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMl0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMl0uY2hpbGRyZW5bMV0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMl0uY2hpbGRyZW5bMl0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0udGV4dCkudG8uZXF1YWwoJ2NoaWxkQScpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsxXS50ZXh0KS50by5lcXVhbCgnY2hpbGRCJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzJdLnRleHQpLnRvLmVxdWFsKCdjaGlsZENjaGlsZENfMWNoaWxkQ18yJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzFdLnRleHQpLnRvLmVxdWFsKCdjaGlsZENfMScpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsyXS5jaGlsZHJlblsyXS50ZXh0KS50by5lcXVhbCgnY2hpbGRDXzInKVxuXG5cblx0XHR0ZXN0IFwiRXhpc3RpbmcgRWxlbWVudFwiLCAoKS0+XG5cdFx0XHRkaXZSYXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0QSA9IERvbShkaXZSYXcpXG5cdFx0XHRCID0gRG9tKGRpdlJhdylcblx0XHRcdEMgPSBEb20oQSlcblxuXHRcdFx0ZXhwZWN0KEEuZWwpLnRvLmVxdWFsKGRpdlJhdylcblx0XHRcdGV4cGVjdChCLmVsKS50by5lcXVhbChkaXZSYXcpXG5cdFx0XHRleHBlY3QoQy5lbCkudG8uZXF1YWwoZGl2UmF3KVxuXHRcdFx0ZXhwZWN0KEEpLnRvLmVxdWFsKEIpXG5cdFx0XHRleHBlY3QoQikudG8uZXF1YWwoQylcblx0XHRcdGV4cGVjdChDKS50by5lcXVhbChkaXZSYXcuX3F1aWNrRWxlbWVudClcblxuXG5cdFx0dGVzdCBcIkV4aXN0aW5nIEVsZW1lbnQgdy8gT3B0aW9uc1wiLCAoKS0+XG5cdFx0XHRkaXZSYXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0ZGl2UmF3LmlkID0gJ0EnXG5cblx0XHRcdGRpdiA9IERvbShkaXZSYXcsIHtpZDonQicsIGNsYXNzOidhYmMtMTIzJ30pXG5cdFx0XHRleHBlY3QoZGl2UmF3LmlkKS50by5lcXVhbCgnQicpXG5cdFx0XHRleHBlY3QoZGl2UmF3LmNsYXNzTmFtZSkudG8uZXF1YWwoJ2FiYy0xMjMnKVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20oZGl2LCB7aWQ6J0MnLCBjbGFzczonZGVmLTQ1Nid9KVxuXHRcdFx0ZXhwZWN0KGRpdlJhdy5pZCkudG8uZXF1YWwoJ0MnKVxuXHRcdFx0ZXhwZWN0KGRpdlJhdy5jbGFzc05hbWUpLnRvLmVxdWFsKCdkZWYtNDU2JylcblxuXG5cdFx0dGVzdCBcIkV4aXN0aW5nIEVsZW1lbnQgZnJvbSBhcnJheS1saWtlIG9iamVjdHNcIiwgKCktPlxuXHRcdFx0cmF3QSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRyYXdCID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHJhd0MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0cGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpXG5cdFx0XHRwYXJlbnQuYXBwZW5kQ2hpbGQocmF3QSk7IHBhcmVudC5hcHBlbmRDaGlsZChyYXdCKTsgcGFyZW50LmFwcGVuZENoaWxkKHJhd0MpO1xuXHRcdFx0QSA9IERvbShbcmF3QSwgcmF3QiwgcmF3Q10pXG5cdFx0XHRCID0gRG9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdkaXYnKSlcblx0XHRcdEMgPSBEb20oQilcblxuXHRcdFx0ZXhwZWN0KEEuZWwpLnRvLmVxdWFsKHJhd0EpXG5cdFx0XHRleHBlY3QoQi5lbCkudG8uZXF1YWwocmF3QSlcblx0XHRcdGV4cGVjdChDLmVsKS50by5lcXVhbChyYXdBKVxuXHRcdFx0ZXhwZWN0KEEpLnRvLmVxdWFsKEIpXG5cdFx0XHRleHBlY3QoQikudG8uZXF1YWwoQylcblx0XHRcdGV4cGVjdChDKS50by5lcXVhbChyYXdBLl9xdWlja0VsZW1lbnQpXG5cblxuXG5cdFx0dGVzdCBcIkRvY3VtZW50IG5vZGVcIiwgKCktPlxuXHRcdFx0ZG9jID0gRG9tKGRvY3VtZW50KVxuXHRcdFx0ZXhwZWN0KGRvYykubm90LnRvLmJlLnVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRvYy5yYXcpLnRvLmVxdWFsKGRvY3VtZW50KVxuXHRcdFx0ZXhwZWN0KGRvYy5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChkb2MuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KERvbShzYW5kYm94KS5wYXJlbnRzKS5ub3QudG8uY29udGFpbihkb2MpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLnBhcmVudHMpLnRvLmNvbnRhaW4oZG9jLmNoaWxkcmVuWzBdKVxuXG5cblx0XHR0ZXN0IFwiV2luZG93IG9iamVjdFwiLCAoKS0+XG5cdFx0XHR3aW4gPSBEb20od2luZG93KVxuXHRcdFx0ZXhwZWN0KHdpbikubm90LnRvLmJlLnVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHdpbi5yYXcgaXMgd2luZG93KS50by5iZS50cnVlXG5cdFx0XHRleHBlY3Qod2luLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHdpbi5jaGlsZHJlbikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHdpbi5hcHBlbmQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdCh3aW4uaHRtbCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHdpbi5zdHlsZSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KERvbShzYW5kYm94KS5wYXJlbnRzKS5ub3QudG8uY29udGFpbih3aW4pXG5cblxuXHRcdHRlc3QgXCJDcmVhdGlvbiB3LyBzdHlsaW5nXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdCd3aWR0aCc6ICcxMHB4J1xuXHRcdFx0XHQnaGVpZ2h0JzogMTVcblx0XHRcdFx0J2xhbWVvJzogJzE5cHgnXG5cdFx0XHRcdCdiYWNrZ3JvdW5kLWNvbG9yJzogJ2JsdWUnXG5cdFx0XHRcdCdiYWNrZ3JvdW5kU2l6ZSc6ICdjb3ZlcidcblxuXHRcdFx0c2FuZGJveC5hcHBlbmRDaGlsZChkaXYuZWwpXG5cdFx0XHRjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYuZWwpXG5cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUubGFtZW8pLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubGFtZW8pLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsICcxMHB4J1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnMTVweCdcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmJhY2tncm91bmRDb2xvcikubm90LnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5iYWNrZ3JvdW5kU2l6ZSkudG8uZXF1YWwgJ2NvdmVyJ1xuXG5cblx0XHR0ZXN0IFwiU1ZHIGVsZW1lbnRzIGNhbiBiZSBjcmVhdGVkIHZpYSBhICcqJyBpbiB0aGUgZWxlbWVudCdzIHR5cGUgc3RyaW5nXCIsICgpLT5cblx0XHRcdHN2Z0JhZCA9IERvbSgnc3ZnJykuZWxcblx0XHRcdHN2Z0dvb2QgPSBEb20oJypzdmcnKS5lbFxuXHRcdFx0c3ZnUG9seUJhZCA9IERvbSgncG9seWxpbmUnKS5lbFxuXHRcdFx0c3ZnUG9seUdvb2QgPSBEb20oJypwb2x5bGluZScpLmVsXG5cdFx0XHRzdmdEaXYgPSBEb20oJypkaXYnKS5lbFxuXHRcdFx0cmVnRGl2ID0gRG9tKCdkaXYnKS5lbFxuXG5cdFx0XHRleHBlY3Qoc3ZnQmFkKS50by5iZS5pbnN0YW5jZU9mKEhUTUxVbmtub3duRWxlbWVudClcblx0XHRcdGV4cGVjdChzdmdQb2x5QmFkKS50by5iZS5pbnN0YW5jZU9mKEhUTUxVbmtub3duRWxlbWVudClcblx0XHRcdGV4cGVjdChzdmdHb29kKS50by5iZS5pbnN0YW5jZU9mKFNWR1NWR0VsZW1lbnQpXG5cdFx0XHRleHBlY3Qoc3ZnUG9seUdvb2QpLnRvLmJlLmluc3RhbmNlT2YoU1ZHUG9seWxpbmVFbGVtZW50KVxuXHRcdFx0IyBleHBlY3Qoc3ZnRGl2KS50by5iZS5pbnN0YW5jZU9mKCdTVkdFbGVtZW50Jylcblx0XHRcdGV4cGVjdChzdmdEaXYuY29uc3RydWN0b3IpLm5vdC50by5lcXVhbChyZWdEaXYuY29uc3RydWN0b3IpXG5cblxuXHRcdHRlc3QgXCJRdWlja0RvbS5odG1sKCkgYWNjZXB0cyBhbiBodG1sIHN0cmluZyB3aGljaCB3b3VsZCBiZSBwYXJzZWQgYW5kIGNvbnZlcnRlZCBpbnRvIGEgUXVpY2tCYXRjaCBpbnN0YW5jZVwiLCAoKS0+XG5cdFx0XHRodG1sU3RyaW5nID0gXCJcblx0XHRcdFx0PGRpdj5maXJzdENoaWxkVGV4dDwvZGl2PjxzcGFuPnNlY29uZENoaWxkVGV4dDwvc3Bhbj5cblx0XHRcdFx0dGV4dE5vZGVcblx0XHRcdFx0PHN0cm9uZz5hYmMxMjM8L3N0cm9uZz5cblx0XHRcdFwiXG5cdFx0XHR3aW5kb3cuYmF0Y2ggPSBEb20uaHRtbChodG1sU3RyaW5nKVxuXG5cdFx0XHRleHBlY3QodHlwZW9mIGJhdGNoKS50by5lcXVhbCAnb2JqZWN0J1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmNvbnN0cnVjdG9yLm5hbWUpLnRvLmVxdWFsICdRdWlja0JhdGNoJ1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzLmxlbmd0aCkudG8uZXF1YWwgNFxuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzBdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbMV0udHlwZSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbMl0udHlwZSkudG8uZXF1YWwgJ3RleHQnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbM10udHlwZSkudG8uZXF1YWwgJ3N0cm9uZydcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1swXS50ZXh0KS50by5lcXVhbCAnZmlyc3RDaGlsZFRleHQnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbMV0udGV4dCkudG8uZXF1YWwgJ3NlY29uZENoaWxkVGV4dCdcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1syXS50ZXh0KS50by5pbmNsdWRlICd0ZXh0Tm9kZSdcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1szXS50ZXh0KS50by5lcXVhbCAnYWJjMTIzJ1xuXG5cblx0XHR0ZXN0IFwiTWV0aG9kL1Byb3BlcnR5IGFsaWFzZXNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcpLnRvLmVxdWFsKGRpdi5lbClcblx0XHRcdGV4cGVjdChkaXZbMF0pLnRvLmVxdWFsKGRpdi5lbClcblx0XHRcdGV4cGVjdChkaXYuY3NzKS50by5lcXVhbChkaXYuc3R5bGUpXG5cdFx0XHRleHBlY3QoZGl2LnJlcGxhY2VXaXRoKS50by5lcXVhbChkaXYucmVwbGFjZSlcblx0XHRcdGV4cGVjdChkaXYucmVtb3ZlTGlzdGVuZXIpLnRvLmVxdWFsKGRpdi5vZmYpXG5cdFx0XHRleHBlY3QoZGl2LnJlbW92ZUxpc3RlbmVyKCdldmVudEEnKSlcblxuXG5cdFx0dGVzdCBcInVzZXItZGVmaW5lZCBtZXRoZG9kcy9nZXR0ZXJzL3NldHRlcnNcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYgbWV0aG9kczpcblx0XHRcdFx0c2Nyb2xsVG9wOlxuXHRcdFx0XHRcdGdldDogKCktPiBAcmF3LnNjcm9sbFRvcFxuXHRcdFx0XHR3ZWlnaHQ6XG5cdFx0XHRcdFx0Z2V0OiAoKS0+IEByYXcud2VpZ2h0XG5cdFx0XHRcdHZhbHVlOlxuXHRcdFx0XHRcdGdldDogKCktPiBAcmF3LnZhbHVlXG5cdFx0XHRcdFx0c2V0OiAodmFsdWUpLT4gQHJhdy52YWx1ZSA9IHZhbHVlXG5cdFx0XHRcdG5hbWU6IHRydWVcblx0XHRcdFx0YmlnSW5kZXg6ICgpLT4gQGluZGV4ICogMTBcblxuXHRcdFx0c2FuZGJveC5hcHBlbmQgZGl2QVxuXHRcdFx0c2FuZGJveC5hcHBlbmQgZGl2QlxuXHRcdFx0ZGl2QS5yYXcudmFsdWUgPSBkaXZCLnJhdy52YWx1ZSA9ICdhYmMnXG5cblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2QS5zY3JvbGxUb3ApLnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkIuc2Nyb2xsVG9wKS50by5lcXVhbCAnbnVtYmVyJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZBLnZhbHVlKS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZCLnZhbHVlKS50by5lcXVhbCAnc3RyaW5nJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZBLm5hbWUpLnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkIubmFtZSkudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2QS5iaWdJbmRleCkudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2Qi5iaWdJbmRleCkudG8uZXF1YWwgJ2Z1bmN0aW9uJ1xuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2Qi5zY3JvbGxUb3ApLnRvLmVxdWFsIGRpdkIucmF3LnNjcm9sbFRvcFxuXHRcdFx0XG5cdFx0XHRkaXZCLnJhdy53ZWlnaHQgPSAnMSdcblx0XHRcdGV4cGVjdChkaXZCLndlaWdodCkudG8uZXF1YWwgJzEnXG5cdFx0XHRcblx0XHRcdGRpdkIud2VpZ2h0ID0gJzInXG5cdFx0XHRleHBlY3QoZGl2Qi53ZWlnaHQpLnRvLmVxdWFsICcxJ1xuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2Qi52YWx1ZSkudG8uZXF1YWwgJ2FiYydcblx0XHRcdGRpdkIudmFsdWUgPSAnMTIzJ1xuXHRcdFx0ZXhwZWN0KGRpdkIudmFsdWUpLnRvLmVxdWFsICcxMjMnXG5cblx0XHRcdGV4cGVjdChkaXZCLmJpZ0luZGV4KCkpLnRvLmVxdWFsIGRpdkIuaW5kZXgqMTBcblxuXG5cdHN1aXRlIFwiRXZlbnRzXCIsICgpLT5cblx0XHR0ZXN0IFwiRXZlbnRzIGNhbiBiZSBsaXN0ZW5lZCB0byB2aWEgdGhlIC5vbiBtZXRob2RcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdGRpdi5vbiAnbXlDbGljaycsIChldmVudCktPlxuXHRcdFx0XHRleHBlY3QodHlwZW9mIGV2ZW50KS50by5lcXVhbCAnb2JqZWN0J1xuXHRcdFx0XHRleHBlY3QoZXZlbnQudHlwZSkudG8uZXF1YWwgJ215Q2xpY2snXG5cdFx0XHRcdGVtaXRDb3VudEErK1xuXHRcdFx0XG5cblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0XG5cdFx0XHRkaXYub24gJ215Q2xpY2snLCAoZXZlbnQpLT4gZW1pdENvdW50QisrXG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDMpXG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDQpXG5cblxuXHRcdHRlc3QgXCJFdmVudHMgY2FuIGJlIGVtaXR0ZWQgdmlhIHRoZSAuZW1pdCBtZXRob2RcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QSsrXG5cdFx0XHRkaXYuZWwuYWRkRXZlbnRMaXN0ZW5lciAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QisrXG5cblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMilcblxuXG5cdFx0dGVzdCBcIkV2ZW50IGhhbmRsZXJzIGNhbiBiZSBtYW51YWxseSBpbnZva2VkIHdpdGggYSBjdXN0b20gYXJnIHZpYSB0aGUgLmVtaXRQcml2YXRlIG1ldGhvZFwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IDBcblx0XHRcdGFyZyA9IG51bGxcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRBKys7IGFyZyA9IGFyZ3VtZW50c1swXVxuXHRcdFx0ZGl2LmVsLmFkZEV2ZW50TGlzdGVuZXIgJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEIrK1xuXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGFyZykudG8uZXF1YWwobnVsbClcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXRQcml2YXRlKCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoYXJnKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0UHJpdmF0ZSgnbXlFdmVudCcsICdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChhcmcpLnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoYXJnKS5ub3QudG8uZXF1YWwoJ2FiYzEyMycpXG5cdFx0XHRleHBlY3QodHlwZW9mIGFyZykudG8uZXF1YWwoJ29iamVjdCcpXG5cblxuXHRcdHRlc3QgXCJCb29sZWFucyBjYW4gYmUgcGFzc2VkIGZvciB0aGUgMm5kIGFuZCAzcmQgYXJncyBvZiAuZW1pdCB0byBjb250cm9sIGV2ZW50LmJ1YmJsZXMgYW5kIGV2ZW50LmNhbmNlbGFibGVcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSBlbWl0Q291bnRDID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRkaXYub24gJ2V2ZW50QScsIChldmVudCktPiBlbWl0Q291bnRBKys7IGV4cGVjdChldmVudC5idWJibGVzKS50by5iZS50cnVlOyBleHBlY3QoZXZlbnQuY2FuY2VsYWJsZSkudG8uYmUudHJ1ZVxuXHRcdFx0ZGl2Lm9uICdldmVudEInLCAoZXZlbnQpLT4gZW1pdENvdW50QisrOyBleHBlY3QoZXZlbnQuYnViYmxlcykudG8uYmUuZmFsc2U7IGV4cGVjdChldmVudC5jYW5jZWxhYmxlKS50by5iZS50cnVlXG5cdFx0XHRkaXYub24gJ2V2ZW50QycsIChldmVudCktPiBlbWl0Q291bnRDKys7IGV4cGVjdChldmVudC5idWJibGVzKS50by5iZS5mYWxzZTsgZXhwZWN0KGV2ZW50LmNhbmNlbGFibGUpLnRvLmJlLmZhbHNlXG5cblx0XHRcdGRpdi5lbWl0KCdldmVudEEnKTsgZGl2LmVtaXQoJ2V2ZW50QicsIGZhbHNlKTsgZGl2LmVtaXQoJ2V2ZW50QycsIGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEMpLnRvLmVxdWFsKDEpXG5cblxuXHRcdHRlc3QgXCJBIGRhdGEgb2JqZWN0IGNhbiBiZSBwYXNzZWQgYXMgdGhlIDR0aCBhcmcgb2YgLmVtaXQgd2hpY2ggd2lsbCBiZSBleHRlbmRlZCBvbnRvIHRoZSBldmVudCBvYmplY3RcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRE9NLmRpdigpXG5cdFx0XHRldmVudCA9IG51bGxcblx0XHRcdGRpdi5vbiAnbW91c2Vkb3duJywgKGUpLT4gZXZlbnQgPSBlXG5cblx0XHRcdGV4cGVjdChldmVudCkudG8uZXF1YWwgbnVsbFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZG93bidcblx0XHRcdGV4cGVjdChldmVudC50eXBlKS50by5lcXVhbCAnbW91c2Vkb3duJ1xuXHRcdFx0ZXhwZWN0KGV2ZW50LmN1c3RvbSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWRvd24nLCBudWxsLCBudWxsLCB7Y3VzdG9tOidjdXN0b20nLCBhYmM6MTIzfVxuXHRcdFx0ZXhwZWN0KGV2ZW50LnR5cGUpLnRvLmVxdWFsICdtb3VzZWRvd24nXG5cdFx0XHRleHBlY3QoZXZlbnQuY3VzdG9tKS50by5lcXVhbCAnY3VzdG9tJ1xuXHRcdFx0ZXhwZWN0KGV2ZW50LmFiYykudG8uZXF1YWwgMTIzXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWRvd24nLCBudWxsLCBudWxsLCB0cnVlXG5cdFx0XHRleHBlY3QoZXZlbnQudHlwZSkudG8uZXF1YWwgJ21vdXNlZG93bidcblx0XHRcdGV4cGVjdChldmVudC5jdXN0b20pLnRvLmVxdWFsIHVuZGVmaW5lZFxuXG5cblx0XHR0ZXN0IFwiRXZlbnQgbGlzdGVuZXJzIGNhbiBiZSByZW1vdmVkIHZpYSB0aGUgLm9mZiBtZXRob2RcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSBlbWl0Q291bnRDID0gZW1pdENvdW50RCA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRBKytcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsIGV2ZW50Q0I9KCktPiBlbWl0Q291bnRCKytcblx0XHRcdGRpdi5vbiAnYW5vdGhlckV2ZW50JywgKCktPiBlbWl0Q291bnRDKytcblx0XHRcdGRpdi5lbC5hZGRFdmVudExpc3RlbmVyICdteUV2ZW50JywgKCktPiBlbWl0Q291bnREKytcblxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRDKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEQpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jyk7IGRpdi5lbWl0KCdhbm90aGVyRXZlbnQnKTtcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QykudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnREKS50by5lcXVhbCgxKVxuXHRcdFx0XG5cdFx0XHRkaXYub2ZmKCdteUV2ZW50JywgZXZlbnRDQilcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jyk7IGRpdi5lbWl0KCdhbm90aGVyRXZlbnQnKTtcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QykudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnREKS50by5lcXVhbCgyKVxuXHRcdFx0XG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEIrK1xuXHRcdFx0ZGl2Lm9mZignbXlFdmVudCcpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpOyBkaXYuZW1pdCgnYW5vdGhlckV2ZW50Jyk7XG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEMpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50RCkudG8uZXF1YWwoMylcblx0XHRcdFxuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRBKytcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QisrXG5cdFx0XHRkaXYub2ZmKClcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jyk7IGRpdi5lbWl0KCdhbm90aGVyRXZlbnQnKTtcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QykudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChlbWl0Q291bnREKS50by5lcXVhbCg0KVxuXG5cblx0XHR0ZXN0IFwiRXZlbnRzIGNhbiBiZSBuYW1lZCB2aWEgYSAnPGV2ZW50Pi48bmFtZT4nIHN5bnRheCB3aGljaCBjYW4gYmUgdXNlZCB0byByZW1vdmUgbGlzdGVuZXJzIGxhdGVyIG9uIHdpdGhvdXQgdGhlIG9yaWdpbmFsIGNhbGxiYWNrc1wiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRhdHRhY2hMaXN0ZW5lcnMgPSAoKS0+XG5cdFx0XHRcdGRpdi5vbiAnbXlFdmVudC5zb21lTmFtZScsICgpLT4gZW1pdENvdW50QSsrO1xuXHRcdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEIrKztcblxuXHRcdFx0YXR0YWNoTGlzdGVuZXJzKClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50LnNvbWVOYW1lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5vZmYoJ215RXZlbnQuc29tZU90aGVyTmFtZScpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgyKVxuXHRcdFx0XG5cdFx0XHRkaXYub2ZmKCdteUV2ZW50LnNvbWVOYW1lJylcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDMpXG5cdFx0XHRcblx0XHRcdGRpdi5vZmYoJ215RXZlbnQnKVxuXHRcdFx0YXR0YWNoTGlzdGVuZXJzKClcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDQpXG5cdFx0XHRcblx0XHRcdGRpdi5vZmYoJ215RXZlbnQnKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoNClcblxuXG5cdFx0dGVzdCBcIk11bHRpcGxlIGV2ZW50cyBjYW4gYmUgcmVnaXN0ZXJlZC9kZXJlZ2lzdGVyZWQgYXQgb25jZSB1c2luZyB3aGl0ZXNwYWNlIHNlcGFyYXRvcnNcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50ID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cblx0XHRcdGRpdi5vbiAnb25lIHR3byAgIHRocmVlJywgKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMFxuXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDFcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAyXG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAzXG5cblx0XHRcdGRpdi5vZmYoJ29uZSAgICAgIHRocmVlJylcblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgM1xuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDRcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDRcblxuXHRcdFx0ZGl2Lm9mZigpXG5cdFx0XHRkaXYuZW1pdCgnb25lJyk7IGRpdi5lbWl0KCd0d28nKTsgZGl2LmVtaXQoJ3RocmVlJyk7XG5cdFx0XHRkaXYub24gJ29uZSB0d28gICB0aHJlZS5zb21lTmFtZScsICgpLT4gZW1pdENvdW50Kytcblx0XHRcdGRpdi5vbiAnb25lIHR3byAgIHRocmVlJywgKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNFxuXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDZcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA4XG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxMFxuXG5cdFx0XHRkaXYub2ZmKCd0d28gXFx0b25lLnNvbWVOYW1lJylcblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTFcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxMlxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTRcblx0XHRcdFxuXHRcdFx0ZGl2Lm9mZignb25lIHRocmVlJylcblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTRcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxNVxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMTVcblxuXG5cdFx0dGVzdCBcIkV2ZW50cyBjYW4gYmUgbGlzdGVuZWQgZm9yIG9uY2UgdmlhIHRoZSAub25jZSBtZXRob2RcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50QSA9IGVtaXRDb3VudEIgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdGRpdi5vbmNlICdteUNsaWNrJywgKGV2ZW50KS0+XG5cdFx0XHRcdGV4cGVjdCh0eXBlb2YgZXZlbnQpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRcdGV4cGVjdChldmVudC50eXBlKS50by5lcXVhbCAnbXlDbGljaydcblxuXHRcdFx0ZGl2Lm9uICdteUNsaWNrJywgKCktPiBlbWl0Q291bnRBKytcblx0XHRcdGRpdi5vbmNlICdteUNsaWNrJywgKCktPiBlbWl0Q291bnRCKytcblx0XHRcdFxuXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2Lm9uY2UgJ215Q2xpY2snLCAoZXZlbnQpLT4gZW1pdENvdW50QisrXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMilcblx0XHRcdFxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoNClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgyKVxuXG5cblx0XHR0ZXN0IFwiUHJlLWRlZmluZWQgZXZlbnQgbGlzdGVuZXJzIGNhbiBiZSBwYXNzZWQgaW4gb3B0aW9ucy5ldmVudHNcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50ID0gMFxuXHRcdFx0ZW1pdENvbnRleHQgPSBudWxsXG5cdFx0XHRsaXN0ZW5lcnMgPVxuXHRcdFx0XHQnb25lIHR3byB0aHJlZSc6ICgpLT4gZW1pdENvdW50Kytcblx0XHRcdFx0J2ZvdXInOiAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRcdCdmaXZlJzogKCktPiBlbWl0Q29udGV4dCA9IEBcblx0XHRcdFxuXHRcdFx0ZGl2ID0gRG9tLmRpdihldmVudHM6bGlzdGVuZXJzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMFxuXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDFcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAyXG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAzXG5cblx0XHRcdGRpdi5lbWl0KCdmb3VyJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDRcblxuXHRcdFx0ZGl2Lm9mZignb25lICAgICAgdGhyZWUnKVxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA0XG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNVxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNVxuXG5cdFx0XHRkaXYuZW1pdCgnZml2ZScpXG5cdFx0XHRleHBlY3QoZW1pdENvbnRleHQpLnRvLmVxdWFsIGRpdlxuXG5cdFx0XHRkaXYub2ZmKClcblx0XHRcdGRpdi5lbWl0KCdvbmUnKTsgZGl2LmVtaXQoJ3R3bycpOyBkaXYuZW1pdCgndGhyZWUnKTsgZGl2LmVtaXQoJ2ZvdXInKTtcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDVcblxuXHRcdFx0ZGl2QiA9IERvbS5kaXYoZXZlbnRzOmxpc3RlbmVycylcblx0XHRcdGRpdkIuZW1pdCgnb25lJyk7IGRpdkIuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgN1xuXHRcdFx0XG5cdFx0XHRleHBlY3QoZW1pdENvbnRleHQpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZGl2Qi5lbWl0KCdmaXZlJylcblx0XHRcdGV4cGVjdChlbWl0Q29udGV4dCkudG8uZXF1YWwgZGl2QlxuXG5cblx0XHR0ZXN0IFwidGhlIGluc2VydGVkIGV2ZW50IHdpbGwgYmUgcHJpdmF0ZWx5IGVtaXR0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBpbnNlcnRlZCBpbnRvIHRoZSBET01cIiwgKCktPlxuXHRcdFx0aW52b2tlQ291bnQgPSAwXG5cdFx0XHRwYXJlbnRBID0gRG9tLnNlY3Rpb24oKVxuXHRcdFx0cGFyZW50QiA9IERvbS5zZWN0aW9uKClcblx0XHRcdG1hc3RlclBhcmVudEIgPSBEb20uZGl2KClcblx0XHRcdHBhcmVudEMgPSBEb20uc2VjdGlvbigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblxuXHRcdFx0ZGl2Lm9uICdpbnNlcnRlZCcsIChlbCktPlxuXHRcdFx0XHRleHBlY3QoQCkudG8uZXF1YWwoZGl2KVxuXHRcdFx0XHRleHBlY3QoZWwpLnRvLmVxdWFsKGRpdi5wYXJlbnQpXG5cdFx0XHRcdGV4cGVjdChpbnZva2VDb3VudCsrKS50by5lcXVhbCgwKVxuXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50QSlcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMClcblx0XHRcdFxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEIuYXBwZW5kVG8obWFzdGVyUGFyZW50QikpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdHBhcmVudEEuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMClcblx0XHRcdFxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEMpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDEpXG5cblx0XHRcdGRpdi5kZXRhY2goKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEIuYXBwZW5kVG8oc2FuZGJveCkpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwgcGFyZW50QlxuXG5cdFx0XHRkaXYub24gJ2luc2VydGVkJywgKCktPiBleHBlY3QoaW52b2tlQ291bnQrKykudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCBwYXJlbnRCXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRDKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsIHBhcmVudENcblx0XHRcdFxuXHRcdFx0ZGl2LmRldGFjaCgpXG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50QSlcblx0XHRcdGRpdi5vbiAnaW5zZXJ0ZWQnLCAoKS0+IGludm9rZUNvdW50Kytcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMylcblx0XHRcdFxuXHRcdFx0ZGl2LmRldGFjaCgpXG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50Qilcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC5yZXBsYWNlIHdpbGwgdHJpZ2dlciB0aGUgaW5zZXJ0ZWQgZXZlbnRcIiwgKCktPlxuXHRcdFx0aW52b2tlQ291bnQgPSAwXG5cdFx0XHRwYXJlbnQgPSBEb20uc2VjdGlvbigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cblx0XHRcdEIub24gJ2luc2VydGVkJywgKGVsKS0+XG5cdFx0XHRcdGV4cGVjdChAKS50by5lcXVhbChCKVxuXHRcdFx0XHRleHBlY3QoZWwpLnRvLmVxdWFsKEIucGFyZW50KVxuXHRcdFx0XHRleHBlY3QoaW52b2tlQ291bnQrKykudG8uZXF1YWwoMClcblxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChCLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cdFx0XHRwYXJlbnQuYXBwZW5kKEEpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwocGFyZW50KVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cblx0XHRcdEEucmVwbGFjZShCKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChCLnBhcmVudCkudG8uZXF1YWwocGFyZW50KVxuXG5cblxuXG5cblxuXHRzdWl0ZSBcIlN0eWxlXCIsICgpLT5cblx0XHR0ZXN0IFwiU3R5bGVzIGNhbiBiZSBzZXQgdmlhIHRoZSAuc3R5bGUvLmNzcyBtZXRob2Qgd2l0aCBhcmdzIHBhaXIgb2YgW3Byb3BlcnR5LCB2YWx1ZV1cIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTp7d2lkdGg6JzE1cHgnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4JylcblxuXHRcdFx0ZGl2LnN0eWxlICd3aWR0aCcsICcyNXB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4JylcblxuXHRcdFx0ZGl2LnN0eWxlICd3aWR0aCcsICc1dmgnXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCgnNXZoJylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5jb250YWluKCdweCcpXG5cblxuXHRcdHRlc3QgXCJNdWx0aXBsZSBTdHlsZXMgY2FuIGJlIHNldCB2aWEgdGhlIC5zdHlsZS8uY3NzIG1ldGhvZCBieSBwYXNzaW5nIGEgc3R5bGUgb2JqZWN0XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoc3R5bGU6e3dpZHRoOicxNXB4J30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYuZWwpXG5cblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcwcHgnKVxuXG5cdFx0XHRkaXYuc3R5bGUge3dpZHRoOjI1LCBoZWlnaHQ6JzMzJ31cblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczM3B4JylcblxuXG5cdFx0dGVzdCBcIlN0eWxlcyBkZWZpbmVkIGluIHRoZSBvcHRpb25zIG9iamVjdCB3aWxsIGJlIGFwcGxpZWQgdmlhIGNsYXNzTmFtZXMgYW5kIG5vdCBpbmxpbmUgc3R5bGVcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6e3dpZHRoOjE1LCBoZWlnaHQ6MzB9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KS5zdHlsZSB7d2lkdGg6MTUsIGhlaWdodDozMH1cblxuXHRcdFx0ZXhwZWN0KGRpdkEucmF3KS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnJhdykudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5yYXcpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICczMHB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnJhdykudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzMwcHgnKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5yYXcuc3R5bGUud2lkdGgpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2Qi5yYXcuc3R5bGUud2lkdGgpLnRvLmVxdWFsICcxNXB4J1xuXHRcdFx0ZXhwZWN0KGRpdkEucmF3LnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXZCLnJhdy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICczMHB4J1xuXG5cblx0XHR0ZXN0IFwiSWYgcGFzc2VkIGEgcHJvcGVydHkgbmFtZSB3aXRob3V0IGEgdmFsdWUsIHRoZSBjb21wdXRlZCB2YWx1ZSBmb3IgdGhhdCBwcm9wZXJ0eSB3aWxsIGJlIHJldHVybmVkXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoc3R5bGU6e3dpZHRoOicxNXB4J30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYuZWwpXG5cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzE1cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMHB4J1xuXG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6bnVsbCwgaGVpZ2h0OiA1NVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCBjb21wdXRlZFN0eWxlLndpZHRoXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnNTVweCdcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlICd3aWR0aCcsICcxOXZ3J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5jb250YWluICdweCdcblxuXG5cdFx0dGVzdCBcIkZ1bmN0aW9ucyBjYW4gYmUgcGFzc2VkIGFzIHZhbHVlcyBmb3IgcHJvcGVydGllcyBpbiBzdHlsZSBvYmplY3RzIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBlbGVtZW50J3Mgb3B0aW9ucy5yZWxhdGVkSW5zdGFuY2UgYXMgdGhlIG9ubHkgYXJndW1lbnRcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihyYXRlOjI1KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0YXBwbHlXaWR0aCA9IChleHBlY3RlZEluc3RhbmNlKS0+XG5cdFx0XHRcdGRpdi5zdHlsZSB3aWR0aDogKGluc3RhbmNlKS0+XG5cdFx0XHRcdFx0ZXhwZWN0KHR5cGVvZiBpbnN0YW5jZSkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdFx0XHRleHBlY3QoaW5zdGFuY2UpLnRvLmVxdWFsKGV4cGVjdGVkSW5zdGFuY2UpXG5cdFx0XHRcdFx0cmV0dXJuIGRpdi5vcHRpb25zLnJhdGVcblxuXHRcdFx0YXBwbHlXaWR0aChkaXYpXG5cdFx0XHRleHBlY3QoZGl2Lm9wdGlvbnMucmF0ZSkudG8uZXF1YWwgMjVcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI1cHgnXG5cblx0XHRcdGRpdi5vcHRpb25zLnJhdGUgPSAyNTBcblx0XHRcdGRpdi5yZWxhdGVkID0gYW5vdGhlck9iaiA9IHt9XG5cdFx0XHRhcHBseVdpZHRoKGFub3RoZXJPYmopXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyNTBweCdcblxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTp7d2lkdGg6MzAsIGhlaWdodDooLT41MCksIGZvbnRTaXplOigtPjIwKX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2LnJhdykudG8uaGF2ZS5zdHlsZSAnd2lkdGgnLCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYucmF3KS50by5oYXZlLnN0eWxlICdoZWlnaHQnLCAnNTBweCdcblx0XHRcdGV4cGVjdChkaXYucmF3KS50by5oYXZlLnN0eWxlICdmb250U2l6ZScsICcyMHB4J1xuXG5cblx0XHR0ZXN0IFwiSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIHN0eWxlIGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSwgaXQgd2lsbCBiZSBhd2FpdGVkXCIsICgpLT5cblx0XHRcdGRpdiA9IERPTS5kaXYoXG5cdFx0XHRcdHN0eWxlOiB7d2lkdGg6NTAsIGhlaWdodDo1MH1cblx0XHRcdCkuYXBwZW5kVG8gc2FuZGJveFxuXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCA1MFxuXHRcdFx0ZXhwZWN0KGRpdi5oZWlnaHQpLnRvLmVxdWFsIDUwXG5cblx0XHRcdGRpdi5zdHlsZSAnd2lkdGgnLCAoKS0+IDMwXG5cdFx0XHRkaXYuc3R5bGUgJ2hlaWdodCcsICgpLT4gUHJvbWlzZS5yZXNvbHZlKDMwKVxuXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCAzMFxuXHRcdFx0ZXhwZWN0KGRpdi5oZWlnaHQpLnRvLmVxdWFsIDUwXG5cdFx0XHRcblx0XHRcdGF3YWl0IFByb21pc2UuZGVsYXkoMClcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsIDMwXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwgMzBcblxuXG5cblx0XHR0ZXN0IFwiQSBudWxsIHZhbHVlIGNhbiBiZSBwYXNzZWQgZm9yIGEgcHJvcGVydHkgaW4gb3JkZXIgdG8gZGVsZXRlIHRoYXQgc3R5bGVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTp7d2lkdGg6JzE1cHgnLCBmb250U2l6ZTogLT4gMzB9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2LnN0eWxlICdoZWlnaHQnLCAyMFxuXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICcyMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUud2lkdGgpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJzIwcHgnXG5cblx0XHRcdGRpdi5zdHlsZSB7d2lkdGg6bnVsbCwgaGVpZ2h0OjEyfVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkubm90LnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzEycHgnKVxuXHRcdFx0ZXhwZWN0KFsndW5zZXQnLCdpbmhlcml0JywnaW5pdGlhbCddLnNvbWUgKHMpLT4gcyBpcyBkaXYuZWwuc3R5bGUud2lkdGgpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnMTJweCdcblxuXHRcdFx0ZGl2LmNzcyAnaGVpZ2h0JywgbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLndpZHRoKS5ub3QudG8uZXF1YWwgJydcblxuXHRcdFx0ZGl2LmVsLnN0eWxlLndpZHRoID0gbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuY3NzICd3aWR0aCcsIG51bGxcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUud2lkdGgpLm5vdC50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkubm90LnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXG5cdFx0XHRkaXYuc3R5bGUgJ2hlaWdodCcsIC0+IDMwXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSAnaGVpZ2h0JywgLT4gbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICcnXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuZm9udFNpemUpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZGl2LnN0eWxlICdmb250U2l6ZScsIG51bGxcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuZm9udFNpemUpLnRvLmVxdWFsICcnXG5cblxuXHRcdHRlc3QgXCIuc3R5bGVTYWZlKCkgY2FuIGJlIHVzZWQgdG8gb2J0YWluIHRoZSB2YWx1ZSBmb3IgYSBnaXZlbiBwcm9wZXJ0eSBldmVuIGZvciBub24taW5zZXJ0ZWQgZWxlbWVudHMgb3IgZWxlbWVudHMgd2l0aCBvcHRpb25zLnN0eWxlQWZ0ZXJJbnNlcnRcIiwgKCktPlxuXHRcdFx0c3R5bGUgPVxuXHRcdFx0XHR3aWR0aDogJzhweCdcblx0XHRcdFx0aGVpZ2h0OiAnOXB4J1xuXHRcdFx0XHR6SW5kZXg6IChmaWVsZCktPiBmaWVsZC5vcHRpb25zLnRoZUluZGV4XG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHR3aWR0aDogJzE4cHgnXG5cdFx0XHRcdFx0ekluZGV4OiAoZmllbGQpLT4gZmllbGQub3B0aW9ucy50aGVJbmRleCoyXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdGhlaWdodDogJzEwMCUnXG5cdFx0XHRkaXZBID0gRG9tLmRpdiB7c3R5bGUsIHRoZUluZGV4OicxMid9XG5cdFx0XHRkaXZCID0gRG9tLmRpdiB7c3R5bGUsIHRoZUluZGV4OicyOScsIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZX1cblx0XHRcdGRpdkEuc3R5bGUgZm9udFNpemU6MTAsIHBvc2l0aW9uOidyZWxhdGl2ZSdcblx0XHRcdGRpdkIuc3R5bGUgZm9udFNpemU6MTAsIHBvc2l0aW9uOidyZWxhdGl2ZSdcblx0XHRcdHByb3AgPSAoZWwsdGFyZ2V0KS0+IGNvbXB1dGVkOmVsLnN0eWxlKHRhcmdldCksIGlubGluZTplbC5yYXcuc3R5bGVbdGFyZ2V0XSwgc2FmZTonJytlbC5zdHlsZVNhZmUodGFyZ2V0KVxuXG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnZm9udFNpemUnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JzEwcHgnLCBzYWZlOicxMHB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICdmb250U2l6ZScpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonMTBweCcsIHNhZmU6JzEwcHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ3dpZHRoJykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOic4cHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ3dpZHRoJykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOic4cHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ2hlaWdodCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonOXB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICdoZWlnaHQnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzlweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnekluZGV4JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicxMicsIHNhZmU6JzEyJ31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICd6SW5kZXgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzI5J31cblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ3dpZHRoJykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOicxOHB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICd3aWR0aCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonMThweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnekluZGV4JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicyNCcsIHNhZmU6JzI0J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICd6SW5kZXgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzU4J31cblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICdoZWlnaHQnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzEwMCUnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ2hlaWdodCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonMTAwJSd9XG5cdFx0XHRcblx0XHRcdGRpdkEuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdkIuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGhlaWdodEEgPSBnZXRDb21wdXRlZFN0eWxlKGRpdkEucmF3KS5oZWlnaHRcblx0XHRcdGhlaWdodEIgPSBnZXRDb21wdXRlZFN0eWxlKGRpdkIucmF3KS5oZWlnaHRcblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICd6SW5kZXgnKS50by5lcWwge2NvbXB1dGVkOicyNCcsIGlubGluZTonMjQnLCBzYWZlOicyNCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnekluZGV4JykudG8uZXFsIHtjb21wdXRlZDonNTgnLCBpbmxpbmU6JzU4Jywgc2FmZTonNTgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ2hlaWdodCcpLnRvLmVxbCB7Y29tcHV0ZWQ6aGVpZ2h0QSwgaW5saW5lOicnLCBzYWZlOmhlaWdodEF9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnaGVpZ2h0JykudG8uZXFsIHtjb21wdXRlZDpoZWlnaHRCLCBpbmxpbmU6JycsIHNhZmU6aGVpZ2h0Qn1cblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlICdoZWlnaHQnKS50by5lcXVhbCBoZWlnaHRBXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUgJ2hlaWdodCcsIHRydWUpLnRvLmVxdWFsICcxMDAlJ1xuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlICdoZWlnaHQnKS50by5lcXVhbCBoZWlnaHRCXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUgJ2hlaWdodCcsIHRydWUpLnRvLmVxdWFsICcxMDAlJ1xuXHRcdFx0XG5cdFx0XHRkaXZCLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnaGVpZ2h0JykpLm5vdC50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCdoZWlnaHQnKSkubm90LnRvLmVxdWFsKCcxMDAlJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCdoZWlnaHQnKSkudG8uY29udGFpbigncHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCdoZWlnaHQnKSkudG8uZXF1YWwoZGl2Qi5zdHlsZSgnaGVpZ2h0JykpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ2hlaWdodCcsIHRydWUpKS5ub3QudG8uZXF1YWwoZGl2Qi5zdHlsZSgnaGVpZ2h0JykpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ2hlaWdodCcsIHRydWUpKS50by5lcXVhbCgnMTAwJScpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ21hcmdpbicsIHRydWUpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnZmFrZVByb3AnKSkudG8uZXF1YWwoZGl2QSlcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgxMjMpKS50by5lcXVhbChkaXZBKVxuXG5cdFx0XHR0ZXh0ID0gRG9tLnRleHQoJ2FiYzEyMycpLmFwcGVuZFRvKGRpdkEpXG5cdFx0XHRleHBlY3QodGV4dC5zdHlsZVNhZmUoJ2Zha2VQcm9wJykpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdCh0ZXh0LnN0eWxlU2FmZSgxMjMpKS50by5lcXVhbCh1bmRlZmluZWQpXG5cblxuXHRcdHRlc3QgXCIuc3R5bGVTYWZlKCkgd2lsbCB3b3JrIHdpdGggaW5zdGFuY2VzIHdpdGggbm8gZ2l2ZW4gYmFzZSBzdHlsZXNcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2QiA9IERvbShkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdkaXYnKVxuXG5cdFx0XHRleHBlY3QgKCktPlxuXHRcdFx0XHRkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0Jylcblx0XHRcdFx0ZGl2Qi5zdHlsZVNhZmUoJ2hlaWdodCcpXG5cdFx0XHQubm90LnRvLnRocm93KClcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlICdoZWlnaHQnKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlICdoZWlnaHQnKS50by5lcXVhbCAnJ1xuXG5cblx0XHR0ZXN0IFwiLnN0eWxlUGFyc2VkKCkgaXMgYSBzaG9ydGhhbmQgZm9yIHBhcnNlRmxvYXQoLnN0eWxlU2FmZSgpKVwiLCAoKS0+XG5cdFx0XHRzdHlsZSA9XG5cdFx0XHRcdHdpZHRoOiAnOHB4J1xuXHRcdFx0XHRoZWlnaHQ6ICc5cHgnXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHR3aWR0aDogJzE4cHgnXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdGhlaWdodDogJzEwMCUnXG5cdFx0XHRkaXZBID0gRG9tLmRpdiB7c3R5bGV9XG5cdFx0XHRkaXZCID0gRG9tLmRpdiB7c3R5bGUsIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZX1cblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnOHB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSkudG8uZXF1YWwoJzlweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnaGVpZ2h0JykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKVxuXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCc4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cblx0XHRcdGRpdkEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCdoZWlnaHQnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKS50by5lcXVhbCgnOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCdoZWlnaHQnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpXG5cblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cblx0XHRcdGRpdkEuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSkudG8uZXF1YWwoJzEwMCUnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ2hlaWdodCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSlcblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSlcblxuXHRcdFx0ZGl2QS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2Qi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9mZlxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCcsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCdoZWlnaHQnKSkudG8uZXF1YWwoJzlweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKS50by5lcXVhbCgnOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCdoZWlnaHQnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpXG5cblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXG5cblx0XHR0ZXN0IFwiLnJlY2FsY1N0eWxlKCkgcmUtYXBwbGllcyBhbGwgZnVuY3Rpb24tdmFsdWUgc3R5bGVzXCIsICgpLT5cblx0XHRcdGNvdW50ID0gQTowLEI6MCxDOjAsRDowLEU6MCxGOjAsRzowXG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogKCktPiArK2NvdW50LkFcblx0XHRcdFx0b3BhY2l0eTogMVxuXHRcdFx0XHRoZWlnaHQ6ICgpLT4gKytjb3VudC5CXG5cdFx0XHRcdGZvbnRTaXplOiAoKS0+ICsrY291bnQuQ1xuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0b3BhY2l0eTogMC41XG5cdFx0XHRcdFx0Zm9udFNpemU6ICgpLT4gKytjb3VudC5EXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdGhlaWdodDogKCktPiArK2NvdW50LkVcblx0XHRcdFx0XHRmb250U2l6ZTogKCktPiArK2NvdW50LkZcblx0XHRcdFx0XHQkZnVubnk6XG5cdFx0XHRcdFx0XHR3aWR0aDogKCktPiArK2NvdW50LkdcblxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToxLEI6MSxDOjEsRDowLEU6MCxGOjAsRzowXG5cdFx0XHRcblx0XHRcdGRpdi5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjIsQjoyLEM6MixEOjAsRTowLEY6MCxHOjBcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjIsQjoyLEM6MixEOjEsRTowLEY6MCxHOjBcblxuXHRcdFx0ZGl2LnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MyxCOjMsQzoyLEQ6MixFOjAsRjowLEc6MFxuXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTozLEI6MyxDOjIsRDoyLEU6MSxGOjEsRzowXG5cblx0XHRcdGRpdi5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjQsQjozLEM6MixEOjIsRToyLEY6MixHOjBcblxuXHRcdFx0ZGl2LnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjQsQjozLEM6MixEOjIsRToyLEY6MixHOjFcblxuXHRcdFx0ZGl2LnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6NCxCOjMsQzoyLEQ6MixFOjMsRjozLEc6MlxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55Jywgb2ZmXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjUsQjozLEM6MixEOjIsRTozLEY6MyxHOjJcblx0XHRcdFxuXHRcdFx0ZGl2LnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6NixCOjMsQzoyLEQ6MixFOjQsRjo0LEc6MlxuXG5cblx0XHR0ZXN0IFwiLnJlY2FsY1N0eWxlKCkgYWNjZXB0cyBhIHNpbmdsZSBhcmd1bWVudCB0byBpbmRpY2F0ZSBpZiB0byByZWNhbGMgc3R5bGUgb24gY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0Y291bnQgPSBBOjAsQjowLEM6MCxEOjAsRTowLEY6MCxHOjBcblx0XHRcdHdyYXBwZXJDb3VudCA9IDBcblx0XHRcdHdyYXBwZXIgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogKCktPiArK3dyYXBwZXJDb3VudFxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogKCktPiArK2NvdW50LkFcblx0XHRcdFx0b3BhY2l0eTogMVxuXHRcdFx0XHRoZWlnaHQ6ICgpLT4gKytjb3VudC5CXG5cdFx0XHRcdGZvbnRTaXplOiAoKS0+ICsrY291bnQuQ1xuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0b3BhY2l0eTogMC41XG5cdFx0XHRcdFx0Zm9udFNpemU6ICgpLT4gKytjb3VudC5EXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdGhlaWdodDogKCktPiArK2NvdW50LkVcblx0XHRcdFx0XHRmb250U2l6ZTogKCktPiArK2NvdW50LkZcblx0XHRcdFx0XHQkZnVubnk6XG5cdFx0XHRcdFx0XHR3aWR0aDogKCktPiArK2NvdW50LkdcblxuXHRcdFx0ZGl2LmFwcGVuZFRvKHdyYXBwZXIpXG5cdFx0XHRleHBlY3Qod3JhcHBlckNvdW50KS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjEsQjoxLEM6MSxEOjAsRTowLEY6MCxHOjBcblx0XHRcdFxuXHRcdFx0d3JhcHBlci5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3Qod3JhcHBlckNvdW50KS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjEsQjoxLEM6MSxEOjAsRTowLEY6MCxHOjBcblx0XHRcdFxuXHRcdFx0d3JhcHBlci5yZWNhbGNTdHlsZSh0cnVlKVxuXHRcdFx0ZXhwZWN0KHdyYXBwZXJDb3VudCkudG8uZXF1YWwgM1xuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToyLEI6MixDOjIsRDowLEU6MCxGOjAsRzowXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToyLEI6MixDOjIsRDoxLEU6MCxGOjAsRzowXG5cblx0XHRcdHdyYXBwZXIucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KHdyYXBwZXJDb3VudCkudG8uZXF1YWwgNFxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToyLEI6MixDOjIsRDoxLEU6MCxGOjAsRzowXG5cdFx0XHRcblx0XHRcdHdyYXBwZXIucmVjYWxjU3R5bGUoMSlcblx0XHRcdGV4cGVjdCh3cmFwcGVyQ291bnQpLnRvLmVxdWFsIDVcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MyxCOjMsQzoyLEQ6MixFOjAsRjowLEc6MFxuXG5cblx0XHR0ZXN0IFwiSWYgb3B0aW9ucy5yZWNhbGNPblJlc2l6ZSBpcyBzZXQsIC5yZWNhbGNTdHlsZSgpIHdpbGwgYmUgaW52b2tlZCBvbiBlYWNoIHJlc2l6ZSBldmVudFwiLCAoKS0+XG5cdFx0XHRjb3VudCA9IEE6MCxCOjAsQzowLEQ6MFxuXHRcdFx0RG9tLmRpdlxuXHRcdFx0XHRzdHlsZTpcblx0XHRcdFx0XHR3aWR0aDogKCktPiArK2NvdW50LkFcblx0XHRcdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRcdFx0aGVpZ2h0OiAoKS0+ICsrY291bnQuQlxuXHRcdFx0XG5cdFx0XHREb20uZGl2XG5cdFx0XHRcdHJlY2FsY09uUmVzaXplOiB0cnVlXG5cdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdHdpZHRoOiAoKS0+ICsrY291bnQuQ1xuXHRcdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0XHRoZWlnaHQ6ICgpLT4gKytjb3VudC5EXG5cblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MSxCOjEsQzoxLEQ6MVxuXHRcdFx0XG5cdFx0XHREb20od2luZG93KS5lbWl0ICdyZXNpemUnXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjEsQjoxLEM6MixEOjJcblx0XHRcdFxuXHRcdFx0RG9tKHdpbmRvdykuZW1pdCAncmVzaXplJ1xuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToxLEI6MSxDOjMsRDozXG5cblxuXHRcdHRlc3QgXCJJZiBvcHRpb25zLmZvcmNlU3R5bGUgaXMgc2V0LCBhbGwgcmVnaXN0ZXJlZCBzdHlsZXMgd2lsbCBoYXZlIHRoZSAnIWltcG9ydGFudCcgZmxhZyBzZXRcIiwgKCktPlxuXHRcdFx0c3R5bGUgPSBET00uc3R5bGUocHJvcHM6aW5uZXJIVE1MOlwiLnRoZURpdiB7d2lkdGg6NTBweH1cIilcblx0XHRcdGRpdkEgPSBET00uZGl2KGNsYXNzTmFtZTondGhlRGl2Jywgc3R5bGU6e3dpZHRoOjEwMCwgaGVpZ2h0OjEwMH0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZCID0gRE9NLmRpdihjbGFzc05hbWU6J3RoZURpdicsIHN0eWxlOnt3aWR0aDoxMDAsIGhlaWdodDoxMDB9LCBmb3JjZVN0eWxlOnRydWUpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcxMDBweCdcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcxMDBweCdcblx0XHRcdFxuXHRcdFx0c3R5bGUuYXBwZW5kVG8oZG9jdW1lbnQuaGVhZClcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICc1MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzEwMHB4J1xuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5hdHRyKCdzdHlsZScpIGlzICcnIG9yIGRpdkEuYXR0cignc3R5bGUnKSBpcyBudWxsKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2Qi5hdHRyKCdzdHlsZScpIGlzICcnIG9yIGRpdkIuYXR0cignc3R5bGUnKSBpcyBudWxsKS50by5iZS50cnVlXG5cdFx0XHRcblx0XHRcdGRpdkEuc3R5bGUgJ3dpZHRoJywgKCktPiA3NVxuXHRcdFx0ZGl2Qi5zdHlsZSAnd2lkdGgnLCAoKS0+IDc1XG5cdFx0XHRkaXZBLnN0eWxlICdoZWlnaHQnLCA4NVxuXHRcdFx0ZGl2Qi5zdHlsZSAnaGVpZ2h0JywgODVcblx0XHRcdGV4cGVjdChkaXZBLmF0dHIgJ3N0eWxlJykubm90LnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2Qi5hdHRyICdzdHlsZScpLm5vdC50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkEuYXR0ciAnc3R5bGUnKS5ub3QudG8uaW5jbHVkZSAnNzVweCAhaW1wb3J0YW50J1xuXHRcdFx0ZXhwZWN0KGRpdkIuYXR0ciAnc3R5bGUnKS50by5pbmNsdWRlICc3NXB4ICFpbXBvcnRhbnQnXG5cdFx0XHRleHBlY3QoZGl2QS5hdHRyICdzdHlsZScpLm5vdC50by5pbmNsdWRlICc4NXB4ICFpbXBvcnRhbnQnXG5cdFx0XHRleHBlY3QoZGl2Qi5hdHRyICdzdHlsZScpLnRvLmluY2x1ZGUgJzg1cHggIWltcG9ydGFudCdcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICc3NXB4J1xuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzc1cHgnXG5cdFx0XHRzdHlsZS5yZW1vdmUoKVxuXG5cblx0XHR0ZXN0IFwiLnNob3coKS8uaGlkZSgpIHdpbGwgdG9nZ2xlIHRoZSBlbGVtZW50J3MgdmlzaWJpbGl0eVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KCkuYXBwZW5kVG8gc2FuZGJveFxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnYmxvY2snXG5cblx0XHRcdGRpdi5oaWRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ25vbmUnXG5cblx0XHRcdGRpdi5zaG93KClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ2Jsb2NrJ1xuXG5cdFx0XHRkaXYuc2hvdygpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdibG9jaydcblxuXG5cdFx0dGVzdCBcIi5zaG93KCkgd2lsbCBzZXQgdGhlIGVsZW1lbnQncyBkaXNwbGF5IHN0eWxlIHRvIHRoZSBwcm92aWRlZCBhcmd1bWVudCwgb3IgdG8gdGhlIHZhbHVlIHByb3ZpZGVkIGluIHRoZSBzdHlsZSBvYmplY3RcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTpkaXNwbGF5OidpbmxpbmUnKS5hcHBlbmRUbyBzYW5kYm94XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdpbmxpbmUnXG5cblx0XHRcdGRpdi5oaWRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ25vbmUnXG5cblx0XHRcdGRpdi5zaG93KClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ2lubGluZSdcblxuXHRcdFx0ZGl2LmhpZGUoKVxuXHRcdFx0ZGl2LnNob3coJ2lubGluZS1ibG9jaycpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdpbmxpbmUtYmxvY2snXG5cblx0XHR0ZXN0IFwiU1ZHIGVsZW1lbnRzXCIsICgpLT5cblx0XHRcdHN2ZyA9IERvbShcblx0XHRcdFx0Wycqc3ZnJ1xuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0ZGlzcGxheTogJ2Jsb2NrJ1xuXHRcdFx0XHRcdFx0d2lkdGg6IDEwXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDEwXG5cdFx0XHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiAyMFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDIwXG5cdFx0XHRcdF1cblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHN2Zy5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMTBweCdcblx0XHRcdGV4cGVjdChzdmcuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICcxMHB4J1xuXG5cdFx0XHRzdmcuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChzdmcuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzIwcHgnXG5cdFx0XHRleHBlY3Qoc3ZnLnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMjBweCdcblxuXG5cblxuXHRzdWl0ZSBcIlN0YXRlXCIsICgpLT5cblx0XHR0ZXN0IFwiU3RhdGVzIGNhbiBiZSBwb2xsZWQgZm9yIGEgdmFsdWUgYnkgcGFzc2luZyBvbmx5IHRoZSB0YXJnZXQgc3RhdGUncyBuYW1lIHRvIC5zdGF0ZSAmIGNhbiBiZSB0b2dnbGVkIG9uL29mZiBieSBwYXNzaW5nIGEgc2Vjb25kIGFyZ3VtZW50XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLmZhbHNlXG5cblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIHRydWVcblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIHRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55JywgZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICckZnVubnknLCB0cnVlXG5cdFx0XHRkaXYuc3RhdGUgJyRiYXNlJywgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnZnVubnknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiYXNlJykudG8uYmUuZmFsc2VcblxuXG5cdFx0dGVzdCBcIkEga2V5OnZhbHVlIHBhaXIgb2JqZWN0IGNhbiBiZSBwYXNzZWQgdG8gdG9nZ2xlIHN0YXRlIGZvciBtdWx0aXBsZSBzdGF0ZXMgYXQgb25jZVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYScpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiJykudG8uZXF1YWwgZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2MnKS50by5lcXVhbCBmYWxzZVxuXG5cdFx0XHRkaXYuc3RhdGUgYTp0cnVlLGI6MVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYScpLnRvLmVxdWFsIHRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2InKS50by5lcXVhbCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdjJykudG8uZXF1YWwgZmFsc2VcblxuXHRcdFx0ZGl2LnN0YXRlIGI6ZmFsc2UsYzoneSdcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2EnKS50by5lcXVhbCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiJykudG8uZXF1YWwgZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2MnKS50by5lcXVhbCB0cnVlXG5cblxuXHRcdHRlc3QgXCIuc3RhdGUoKSB3aXRob3V0IGFyZ3VtZW50cyBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIGFjdGl2ZSBzdGF0ZXNcIiwgKCktPlxuXHRcdFx0ZWwgPSBET00uZGl2KClcblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgW11cblxuXHRcdFx0ZWwuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGVsLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgWydoYXBweScsJ3JlbGF4ZWQnXVxuXG5cdFx0XHRlbC5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgWydyZWxheGVkJ11cblxuXHRcdFx0ZWwuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChlbC5zdGF0ZSgpKS50by5lcWwgWydyZWxheGVkJywnaGFwcHknXVxuXG5cblx0XHR0ZXN0IFwiQWxsIHN0YXRlcyBjYW4gYmUgY2xlYXJlZC90b2dnbGVkIG9mZiB2aWEgLnJlc2V0U3RhdGVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnZnVubnknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblx0XHRcdGRpdi5yZXNldFN0YXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS5mYWxzZVxuXG5cblx0XHR0ZXN0IFwiQSBzdGF0ZSBjYW4gYmUgdG9nZ2xlZCBvbi9vZmYgdmlhIC50b2dnbGVTdGF0ZVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBET00uZGl2KClcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdi50b2dnbGVTdGF0ZSgnaGFwcHknKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlU3RhdGUoJ2hhcHB5Jylcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdi50b2dnbGVTdGF0ZSgnaGFwcHknKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cblx0XHR0ZXN0IFwiU3R5bGVzIGNhbiBiZSBwYXNzZWQgdW5kZXIgc3BlY2lmaWMgc3RhdGVzIHVzaW5nIGEgJyQnIHByZWZpeCBiZWZvcmUgdGhlIHN0YXRlIG5hbWVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0JGJhc2U6XG5cdFx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzE1cHgnXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHR3aWR0aDogJzI1cHgnXG5cdFx0XHRcdFx0bWFyZ2luVG9wOiAnMjBweCdcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0d2lkdGg6ICczNXB4J1xuXHRcdFx0XHRcdG1hcmdpbkxlZnQ6ICcxMnB4J1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0KS50by5lcXVhbCgnMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcyMHB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQpLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMzVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzEycHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzM1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzEycHgnKVxuXG5cblx0XHR0ZXN0IFwiQSBzdGF0ZTpldmVudE5hbWUgKG9yIHN0YXRlOmV2ZW50T3B0cykgbWFwIGNhbiBiZSBwYXNzZWQgc2V0IGZvciBvcHRpb25zLnN0YXRlVHJpZ2dlcnNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihcblx0XHRcdFx0c3RhdGVUcmlnZ2Vyczpcblx0XHRcdFx0XHRoYXBweToge29uOidiZWNhbWVIYXBweScsIG9mZjonYmVjYW1lU2FkJ31cblx0XHRcdFx0XHRyZWxheGVkOiAnaXNSZWxheGVkJyBcblx0XHRcdFx0c3R5bGU6XG5cdFx0XHRcdFx0JGJhc2U6XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0XHQkaGFwcHk6XHRcdHdpZHRoOiAnMjVweCdcblx0XHRcdFx0XHQkcmVsYXhlZDpcdHdpZHRoOiAnMzVweCdcblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXG5cdFx0XHRkaXYuZW1pdCgnYmVjYW1lSGFwcHknKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cblx0XHRcdGRpdi5lbWl0KCdpc1JlbGF4ZWQnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCczNXB4JylcblxuXHRcdFx0ZGl2LmVtaXQoJ2JlY2FtZVNhZCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCczNXB4JylcblxuXHRcdFx0ZGl2LnN0YXRlKCdyZWxheGVkJywgb2ZmKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4JylcblxuXG5cdFx0dGVzdCBcIm9wdGlvbnMuc3RhdGVUcmlnZ2VycyB3b24ndCBiZSBhdHRhY2hlZCBpZiB0aGV5IGFyZW4ndCBiZWluZyB1c2VkIGluIHN0eWxlIG9iamVjdFwiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdihzdHlsZTp7JGhvdmVyOiBkaXNwbGF5OidibG9jayd9KVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYoc3R5bGU6eyRmb2N1czogZGlzcGxheTonYmxvY2snfSlcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ21vdXNlZW50ZXInXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ21vdXNlbGVhdmUnXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ2JsdXInXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnYmx1cidcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb2ZmXG5cblxuXHRcdHRlc3QgXCJvcHRpb25zLnN0YXRlVHJpZ2dlcnMgY2FuIGJlIGZvcmNlZCB0byBiZSBhdHRhY2hlZCBldmVuIGlmIHRoZXkgYXJlbid0IGJlaW5nIHVzZWQgaW4gc3R5bGUgb2JqZWN0IHZpYSAuX2F0dGFjaFN0YXRlRXZlbnRzKHRydWUpXCIsICgpLT5cblx0XHRcdGF0dGFjaFN0YXRlRXZlbnRzID0gaWYgRG9tLmRpdigpLl9hdHRhY2hTdGF0ZUV2ZW50cyB0aGVuICdfYXR0YWNoU3RhdGVFdmVudHMnIGVsc2UgJ19hZSdcblx0XHRcdGRpdkEgPSBEb20uZGl2KHN0eWxlOnskaG92ZXI6IGRpc3BsYXk6J2Jsb2NrJ30pXG5cdFx0XHRkaXZCID0gRG9tLmRpdihzdHlsZTp7JGZvY3VzOiBkaXNwbGF5OidibG9jayd9KVxuXHRcdFx0ZGl2QVthdHRhY2hTdGF0ZUV2ZW50c10odHJ1ZSlcblx0XHRcdGRpdkJbYXR0YWNoU3RhdGVFdmVudHNdKHRydWUpXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZGl2Qi5lbC5lbWl0RXZlbnQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ21vdXNlbGVhdmUnXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdmb2N1cydcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvblxuXG5cdFx0XHRkaXZBLmVsLmVtaXRFdmVudCAnYmx1cidcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdibHVyJ1xuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvZmZcblxuXG5cdFx0dGVzdCBcIlRoZSBob3ZlciBhbmQgZm9jdXMgc3RhdGVzIHdpbGwgYmUgbGlzdGVuZWQgZm9yIGFuZCB0b2dnbGVkIGJ5IGRlZmF1bHQgYnkgdGhlaXIgYXBwcm9wcmlhdGUgZXZlbnRzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdCRiYXNlOlxuXHRcdFx0XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICcxNXB4J1xuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYig0NSwgNDUsIDQ1KSdcblx0XHRcdFx0JGhvdmVyOlxuXHRcdFx0XHRcdHdpZHRoOiAnMjVweCdcblx0XHRcdFx0XHRtYXJnaW5Ub3A6ICcyMHB4J1xuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYigxNTUsIDE1NSwgMTU1KSdcblx0XHRcdFx0JGZvY3VzOlxuXHRcdFx0XHRcdHdpZHRoOiAnMzVweCdcblx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjAwLCAyMDAsIDIwMCknXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdtYXJnaW5Ub3AnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoNDUsIDQ1LCA0NSknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnYmFja2dyb3VuZENvbG9yJywgJ3JnYigxNTUsIDE1NSwgMTU1KScpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdtYXJnaW5Ub3AnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoNDUsIDQ1LCA0NSknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGRpdi5lbWl0ICdmb2N1cydcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzM1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnYmFja2dyb3VuZENvbG9yJywgJ3JnYigyMDAsIDIwMCwgMjAwKScpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLm1hcmdpblRvcCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMzVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdtYXJnaW5Ub3AnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoMjAwLCAyMDAsIDIwMCknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXG5cblx0XHR0ZXN0IFwiSWYgbm90IHBhc3NlZCBhIHN0eWxlIG1hcCB1bmRlciB0aGUgJ2Jhc2UnIHN0YXRlLCBhbGwgbm9uLXN0YXRlIHByb3BlcnRpZXMgb24gdGhlIHN0eWxlIG9iamVjdCB3aWxsIGJlIGNvbnNpZGVyZWQgYXMgJ2Jhc2UnIHN0YXRlIHByb3BlcnRpZXNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHRoZWlnaHQ6ICcyMHB4J1xuXHRcdFx0XHQkaG92ZXI6XG5cdFx0XHRcdFx0d2lkdGg6ICcyNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzMwcHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzIwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlbGVhdmUnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMjBweCcpXG5cblxuXHRcdHRlc3QgXCJTdGF0ZS1zcGVjaWZpYyBzdHlsZXMgd2lsbCBiZSByZW1vdmVkIHVwb24gc3RhdGUgdHVybiBvZmYgb3IgcmVzdG9yZWQgdG8gdGhlIGJhc2UgdmFsdWVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHQkaG92ZXI6XG5cdFx0XHRcdFx0d2lkdGg6ICcyNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzMwcHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcyNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICczMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlbGVhdmUnXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICcwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcnKVxuXG5cblx0XHR0ZXN0IFwiSGlnaGVyIG9yZGVyIHN0YXRlIHN0eWxlcyB3aWxsIGhhdmUgYSBoaWdoZXIgcHJlY2VkZW5jZSB0aGFuIHRoZSAnYmFzZScgc3R5bGUgdG8gYmUgdXNlZCBhcyByZXBsYWNtZW50cyBmb3IgcGVuZGluZy1yZW1vdmFsIHN0YXRlLXN0eWxlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogJzE1cHgnXG5cdFx0XHRcdCRob3Zlcjpcblx0XHRcdFx0XHR3aWR0aDogJzI1cHgnXG5cdFx0XHRcdFx0aGVpZ2h0OiAnMzBweCdcblx0XHRcdFx0JGZvY3VzOlxuXHRcdFx0XHRcdGhlaWdodDogJzQ1cHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzMwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnZm9jdXMnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnNDVweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzQ1cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnYmx1cidcblx0XHRcdGRpdi5lbWl0ICdmb2N1cydcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzQ1cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnYmx1cidcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczMHB4JylcblxuXG5cdFx0dGVzdCBcIlN0YXRlIHRvZ2dsZXMgd2lsbCBiZSBwYXNzZWQgdG8gY2hpbGRyZW4gZWxlbWVudHMgdW5sZXNzIG9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiBpcyBvZmZcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0QyA9IERvbS5kaXYocGFzc1N0YXRlVG9DaGlsZHJlbjpmYWxzZSkuYXBwZW5kVG8oQSlcblxuXHRcdFx0ZXhwZWN0KE1haW4uc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2VcblxuXHRcdFx0TWFpbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KE1haW4uc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cdFx0XHRNYWluLm9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiA9IGZhbHNlXG5cdFx0XHRNYWluLnN0YXRlICdoYXBweScsIGZhbHNlXG5cdFx0XHRleHBlY3QoTWFpbi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cdFx0XHRNYWluLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRNYWluLm9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiA9IHRydWVcblx0XHRcdEEub3B0aW9ucy5wYXNzU3RhdGVUb0NoaWxkcmVuID0gZmFsc2Vcblx0XHRcdE1haW4uc3RhdGUgJ2hhcHB5JywgZmFsc2Vcblx0XHRcdGV4cGVjdChNYWluLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoQS5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEMuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cblx0XHR0ZXN0IFwiU3RhdGUgc3R5bGVzIGNhbiBiZSBuZXN0ZWQgdG8gdHJpZ2dlciB3aGVuIGFsbCBzdGF0ZXMgYXJlIHRvZ2dsZWQgb25cIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0JGJhc2U6XG5cdFx0XHRcdFx0d2lkdGg6ICcxMnB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzEycHgnXG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxMHB4J1xuXHRcdFx0XHQkZnVubnk6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzE1cHgnXG5cdFx0XHRcdFx0IyB3aWR0aDogJzEwcHgnXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHR3aWR0aDogJzE0cHgnXG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxNHB4J1xuXHRcdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdFx0aGVpZ2h0OiAnMTFweCdcblx0XHRcdFx0XHRcdGZvbnRTaXplOiAnMTdweCdcblx0XHRcdFx0XHRcdCRmdW5ueTpcblx0XHRcdFx0XHRcdFx0d2lkdGg6ICcxMHB4J1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6ICcxNHB4J1xuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHR3aWR0aDogJzE3cHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxMHB4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzE1cHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55Jywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzEwcHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzE0cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzEycHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTRweCcpXG5cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxN3B4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMXB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzE3cHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxN3B4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzEwcHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzE3cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzExcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTdweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTBweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTRweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxN3B4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTdweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxNXB4JylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC5yZWN0IHNob3VsZCBjb250YWluIGFuIHVwZGF0ZWQgdmVyc2lvbiBvZiB0aGUgZWxlbWVudCdzIENsaWVudFJlY3RcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRyZWN0QSA9IGRpdi5yZWN0XG5cdFx0XHRyZWN0QiA9IGRpdi5yZWN0XG5cblx0XHRcdGV4cGVjdChyZWN0QSkudG8uYmUuaW5zdGFuY2VPZihDbGllbnRSZWN0KVxuXHRcdFx0ZXhwZWN0KHJlY3RCKS50by5iZS5pbnN0YW5jZU9mKENsaWVudFJlY3QpXG5cdFx0XHRleHBlY3QocmVjdEEpLnRvLmVxbChyZWN0QilcblxuXG5cdFx0XHRkaXYuc3R5bGUgJ3dpZHRoJywgJzdweCdcblx0XHRcdHJlY3RDID0gZGl2LnJlY3Rcblx0XHRcdGV4cGVjdChyZWN0QykudG8uYmUuaW5zdGFuY2VPZihDbGllbnRSZWN0KVxuXHRcdFx0ZXhwZWN0KHJlY3RBKS50by5lcWwocmVjdEIpXG5cdFx0XHRleHBlY3QocmVjdEEpLm5vdC50by5lcWwocmVjdEMpXG5cdFx0XHRleHBlY3QocmVjdEEud2lkdGgpLm5vdC50by5lcXVhbCg3KVxuXHRcdFx0ZXhwZWN0KHJlY3RCLndpZHRoKS5ub3QudG8uZXF1YWwoNylcblx0XHRcdGV4cGVjdChyZWN0Qy53aWR0aCkudG8uZXF1YWwoNylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC53aWR0aCBzaG91bGQgcmV0dXJuIHRoZSB1cGRhdGVkIHZlcnNpb24gb2YgYW4gZWxlbWVudCdzIGNvbXB1dGVkIHdpZHRoXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHBhcmVudClcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlIHdpZHRoOicxMDAwcHgnXG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6JzUwJSdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDUwMClcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOicxMCUnXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCgxMDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDonOTdweCdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDk3KVxuXG5cblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50LmhlaWdodCBzaG91bGQgcmV0dXJuIHRoZSB1cGRhdGVkIHZlcnNpb24gb2YgYW4gZWxlbWVudCdzIGNvbXB1dGVkIGhlaWdodFwiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdHBhcmVudC5zdHlsZSBoZWlnaHQ6JzEwMDBweCdcblx0XHRcdGRpdi5zdHlsZSBoZWlnaHQ6JzUwJSdcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCg1MDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSBoZWlnaHQ6JzEwJSdcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCgxMDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSBoZWlnaHQ6Jzk3cHgnXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoOTcpXG5cblx0XHRcblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50LndpZHRoLy5oZWlnaHQgc2V0dGVycyBhcmUgc2hvcnRjdXRzIGZvciAuc3R5bGUoKSBzZXR0ZXJzXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHBhcmVudClcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlIHdpZHRoOicxMDAwcHgnLCBoZWlnaHQ6JzEwMDBweCdcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDonNTAlJywgaGVpZ2h0Oic1MCUnXG5cdFx0XHRkaXYud2lkdGggPSBkaXYuaGVpZ2h0ID0gJzUwJSdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDUwMClcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCg1MDApXG5cdFx0XHRcblx0XHRcdGRpdi53aWR0aCA9IGRpdi5oZWlnaHQgPSAnMTAlJ1xuXHRcdFx0ZXhwZWN0KGRpdi53aWR0aCkudG8uZXF1YWwoMTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5oZWlnaHQpLnRvLmVxdWFsKDEwMClcblx0XHRcdFxuXHRcdFx0ZGl2LndpZHRoID0gZGl2LmhlaWdodCA9ICc5N3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi53aWR0aCkudG8uZXF1YWwoOTcpXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoOTcpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQub3JpZW50YXRpb24gc2hvdWxkIHJldHVybiB0aGUgdXBkYXRlZCB2ZXJzaW9uIG9mIGFuIGVsZW1lbnQncyBjb21wdXRlZCBvcmllbnRhdGlvblwiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo1MDAsIGhlaWdodDo0MDBcblx0XHRcdGV4cGVjdChkaXYub3JpZW50YXRpb24pLnRvLmVxdWFsKCdsYW5kc2NhcGUnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NTUwLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgncG9ydHJhaXQnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NjAwLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgncG9ydHJhaXQnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NjAxLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgnbGFuZHNjYXBlJylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC5hc3BlY3RSYXRpbyBzaG91bGQgcmV0dXJuIHRoZSB1cGRhdGVkIHZlcnNpb24gb2YgYW4gZWxlbWVudCdzIGNvbXB1dGVkIGFzcGVjdC1yYXRpb1wiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo1MDAsIGhlaWdodDo0MDBcblx0XHRcdGV4cGVjdChkaXYuYXNwZWN0UmF0aW8pLnRvLmVxdWFsKDEuMjUpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo1NDAsIGhlaWdodDo2MDBcblx0XHRcdGV4cGVjdChkaXYuYXNwZWN0UmF0aW8pLnRvLmVxdWFsKDAuOSlcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjYwMCwgaGVpZ2h0OjYwMFxuXHRcdFx0ZXhwZWN0KGRpdi5hc3BlY3RSYXRpbykudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjMwMCwgaGVpZ2h0OjkwMFxuXHRcdFx0ZXhwZWN0KGRpdi5hc3BlY3RSYXRpbykudG8uZXF1YWwoMC4zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMylcblxuXG5cdFx0dGVzdCBcIklmIG9wdGlvbnMuc3R5bGVBZnRlckluc2VydCBpcyBwYXNzZWQsIGZ1bmN0aW9uIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgb25seSBhZnRlciB0aGUgZWxlbWVudCBpcyBpbnNlcnRlZCBpbnRvIHRoZSBET01cIiwgKCktPlxuXHRcdFx0cGFyZW50T3BhY2l0eUdldHRlciA9ICgpLT4gaWYgQHBhcmVudCB0aGVuIEBwYXJlbnQuc3R5bGUoJ29wYWNpdHknKSBlbHNlICcwLjUnXG5cdFx0XHRkaXZSZWcgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6JzE5cHgnLCBvcGFjaXR5OnBhcmVudE9wYWNpdHlHZXR0ZXJ9KVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6e2hlaWdodDonMTlweCcsIG9wYWNpdHk6cGFyZW50T3BhY2l0eUdldHRlcn0sIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZSlcblx0XHRcdGRpdkIgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6JzE5cHgnLCBvcGFjaXR5OnBhcmVudE9wYWNpdHlHZXR0ZXJ9LCBzdHlsZUFmdGVySW5zZXJ0OnRydWUpXG5cdFx0XHRkaXZDID0gRG9tLmRpdihzdHlsZTp7aGVpZ2h0OicxOXB4Jywgb3BhY2l0eTpwYXJlbnRPcGFjaXR5R2V0dGVyfSwgc3R5bGVBZnRlckluc2VydDp0cnVlKVxuXG5cdFx0XHRjbGFzc05hbWUgPSBkaXZSZWcucmF3LmNsYXNzTmFtZSBvciAnbm8gY2xhc3NOYW1lJ1xuXHRcdFx0ZXhwZWN0KGRpdlJlZy5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2QS5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2Qi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2Qy5yYXcuY2xhc3NOYW1lKS50by5lcXVhbChjbGFzc05hbWUpXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcwLjUnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXZBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnMScpXG5cdFx0XHRleHBlY3QoZGl2Qi5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXZCLmluc2VydEJlZm9yZShzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkMuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdHNhbmRib3guYXBwZW5kQ2hpbGQoZGl2Qy5lbClcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZCLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXZDLnBhcmVudFxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkMuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZGl2Qy5hcHBlbmRUbyhzYW5kYm94KVxuXG5cblx0XHR0ZXN0IFwiQW55IHN0eWxlcyBhcHBsaWVkIGJ5IHN0YXRlcyBiZWZvcmUgdGhlIGVsZW1lbnQgaGFzIGJlZW4gaW5zZXJ0ZWQgaW50byB0aGUgRE9NIGFuZCB3aGVuIG9wdGlvbnMuc3R5bGVBZnRlckluc2VydCBpcyBvbiB3aWxsIGJlIHJlLWFwcGxpZWQgYWZ0ZXIgaW5zZXJ0XCIsICgpLT5cblx0XHRcdGRpdlJlZyA9IERvbS5kaXYoc3R5bGU6eyRiYXNlOntoZWlnaHQ6LT4nMTlweCd9LCAkZnVubnk6e2hlaWdodDotPicyOXB4J30sICRoYXBweTp7aGVpZ2h0Oi0+JzM5cHgnfX0pXG5cdFx0XHRkaXZBID0gRG9tLmRpdihzdHlsZTp7JGJhc2U6e2hlaWdodDotPicxOXB4J30sICRmdW5ueTp7aGVpZ2h0Oi0+JzI5cHgnfSwgJGhhcHB5OntoZWlnaHQ6LT4nMzlweCd9fSwgc3R5bGVBZnRlckluc2VydDp0cnVlKVxuXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblxuXHRcdFx0ZGl2UmVnLnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRkaXZBLnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzI5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2UmVnLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzM5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2UmVnLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzM5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMzlweCcpXG5cblxuXHRcdHRlc3QgXCJJZiBhbiBlbGVtZW50IHdpdGggb3B0aW9ucy5zdHlsZUFmdGVySW5zZXJ0IGlzIGFwcGVuZGVkIGludG8gYSBkZXRhY2hlZCBlbGVtZW50LCBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIG9ubHkgYWZ0ZXIgdGhlIHBhcmVudCBpcyBhcHBlbmRlZCB0byB0aGUgRE9NXCIsICgpLT5cblx0XHRcdGRldGFjaGVkUGFyZW50ID0gRG9tLmRpdigpXG5cdFx0XHRkaXZSZWcgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6KC0+JzE5cHgnKSwgJGhhcHB5OiRyZWxheGVkOnt3aWR0aDotPiczMXB4J319KVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6e2hlaWdodDooLT4nMTlweCcpLCAkaGFwcHk6JHJlbGF4ZWQ6e3dpZHRoOi0+JzMxcHgnfX0sIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZSlcblxuXHRcdFx0ZGl2UmVnLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZSZWcuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkEuc3R5bGUgJ3Zpc2liaWxpdHknLCAnaGlkZGVuJ1xuXG5cdFx0XHRleHBlY3QoZGl2UmVnLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJzMxcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLnZpc2liaWxpdHkpLnRvLmVxdWFsKCdoaWRkZW4nKVxuXG5cdFx0XHRkaXZBLmFwcGVuZFRvKGRldGFjaGVkUGFyZW50KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLnZpc2liaWxpdHkpLnRvLmVxdWFsKCdoaWRkZW4nKVxuXG5cdFx0XHRkZXRhY2hlZFBhcmVudC5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTlweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJzMxcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUudmlzaWJpbGl0eSkudG8uZXF1YWwoJ2hpZGRlbicpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQucGlwZVN0YXRlIGNhbiBiZSB1c2VkIHRvIHJlZGlyZWN0IGFsbCBzdGF0ZSB0b2dnbGVzIHRvIHRoZSBwcm92aWRlZCB0YXJnZXQgZWxlbWVudFwiLCAoKS0+XG5cdFx0XHRwYXJlbnRBID0gRG9tLmRpdigpXG5cdFx0XHRwYXJlbnRCID0gRG9tLmRpdihwYXNzU3RhdGVUb0NoaWxkcmVuOmZhbHNlKVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYobnVsbCkuYXBwZW5kVG8ocGFyZW50QSlcblx0XHRcdGRpdkIgPSBEb20uZGl2KG51bGwpLmFwcGVuZFRvKHBhcmVudEIpXG5cdFx0XHRjaGlsZEEgPSBEb20uc3BhbigpLmFwcGVuZFRvKGRpdkEpXG5cdFx0XHRjaGlsZEIgPSBEb20uc3BhbigpLmFwcGVuZFRvKGRpdkIpXG5cblx0XHRcdGRpdkEucGlwZVN0YXRlKClcblx0XHRcdGRpdkEuc3RhdGUgJzEnLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJzEnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICcxJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJzEnKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXZBLnBpcGVTdGF0ZShwYXJlbnRBKVxuXHRcdFx0ZGl2QS5zdGF0ZSAnMicsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnMicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnMicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICcyJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5waXBlU3RhdGUoZmFsc2UpXG5cdFx0XHRkaXZBLnN0YXRlICcyLjUnLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJzIuNScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJzIuNScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICcyLjUnKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXZCLnBpcGVTdGF0ZSh0cnVlKVxuXHRcdFx0ZGl2Qi5zdGF0ZSAnMycsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnMycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJzMnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnMycpLnRvLmVxdWFsIG9uXG5cdFx0XHRcblx0XHRcdGRpdkIucGlwZVN0YXRlKHBhcmVudEIpXG5cdFx0XHRkaXZCLnN0YXRlICc0Jywgb25cblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICc0JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICc0JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICc0JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdkEucGlwZVN0YXRlKHBhcmVudEIpXG5cdFx0XHRkaXZBLnN0YXRlICc1Jywgb25cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICc1JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnNScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnNScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdFxuXHRcdFx0ZGl2QS5waXBlU3RhdGUoZmFsc2UpXG5cdFx0XHRkaXZCLnBpcGVTdGF0ZShwYXJlbnRBKVxuXHRcdFx0ZGl2Qi5zdGF0ZSAnNicsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnNicpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnNicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJzYnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJzYnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJzYnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnNicpLnRvLmVxdWFsIG9mZlxuXG5cblx0XHR0ZXN0IFwiU3RhdGVzIGNhbiBiZSBtYXJrZWQgYXMgdW5wYXNzYWJsZSB0byBhdm9pZCBwYXNzaW5nIHRvIGNoaWxkcmVuIGJ5IGluY2x1ZGluZyB0aGVtIGluIG9wdGlvbnMudW5wYXNzYWJsZVN0YXRlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHVucGFzc2FibGVTdGF0ZXM6IFsnQicsJ0QnXSlcblx0XHRcdHNwYW5BID0gRG9tLnNwYW4oKS5hcHBlbmRUbyhkaXYpXG5cdFx0XHRzcGFuQiA9IERvbS5zcGFuKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0c3ViU3BhbiA9IERvbS5zcGFuKCkuYXBwZW5kVG8oc3BhbkIpXG5cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ0EnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzcGFuQS5zdGF0ZSAnQScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdBJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViU3Bhbi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXYuc3RhdGUgJ0EnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkEuc3RhdGUgJ0EnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdBJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdBJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2LnN0YXRlICdCJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ0InKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5BLnN0YXRlICdCJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0InKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdCJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdi5zdGF0ZSAnQycsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdDJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzcGFuQS5zdGF0ZSAnQycpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0MnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0MnKS50by5lcXVhbCBvblxuXG5cdFx0XHRkaXYuc3RhdGUgJ0QnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkEuc3RhdGUgJ0QnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzcGFuQi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0QnKS50by5lcXVhbCBvZmZcblx0XHRcdFxuXHRcdFx0c3BhbkIuc3RhdGUgJ0QnLCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdEJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdEJykudG8uZXF1YWwgb25cblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdEJywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdEJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0QnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0QnKS50by5lcXVhbCBvblxuXG5cblx0XHR0ZXN0IFwiV2hlbiAuc3RhdGUoKSByZWNlaXZlcyBhIHRydXRoeSB2YWx1ZSBhcyB0aGUgdGhpcmQgYXJndW1lbnQgdGhlIGV2ZW50IHdpbGwgYnViYmxlIHVwIHRvIHBhcmVudHMgaW5zdGVhZCBvZiBjYXNjYWRlIHRvIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdHBhcmVudEEgPSBEb20uc2VjdGlvbiBudWxsLFxuXHRcdFx0XHRzdWJQYXJlbnRBID0gRG9tLmRpdiBudWxsLFxuXHRcdFx0XHRcdGNoaWxkQSA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRcdHN1YkNoaWxkQSA9IERvbS5kaXYoKVxuXHRcdFx0XG5cdFx0XHRwYXJlbnRCID0gRG9tLnNlY3Rpb24gbnVsbCxcblx0XHRcdFx0c3ViUGFyZW50QiA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRjaGlsZEIgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0XHRzdWJDaGlsZEIgPSBEb20uZGl2KClcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRjaGlsZEEuc3RhdGUgJ2hhcHB5Jywgb24sIHRydWVcblx0XHRcdGNoaWxkQi5zdGF0ZSAnaGFwcHknLCBvblxuXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cdFx0XHRjaGlsZEEuc3RhdGUgJ3JlbGF4ZWQnLCBvbiwgbnVsbFxuXHRcdFx0Y2hpbGRCLnN0YXRlICdyZWxheGVkJywgb24sICdvbidcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50Qi5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQS5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cblxuXHRcdHRlc3QgXCJvcHRpb25zLnN0YXRlVHJpZ2dlcnMgY29uZmlnIG9iamVjdHMgY2FuIHNwZWNpZnkgYSAnZm9yY2UnIHByb3BlcnR5IHdoaWNoIHdpbGwgbWFrZSB0aGVtIGdldCBhdHRhY2hlZCBldmVuIGlmIHRoZXkgYXJlbid0IHVzZWRcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYgc3RhdGVUcmlnZ2Vyczp7J2hhcHB5Jzogb246J2hhcHB5T04nLCBvZmY6J2hhcHB5T0ZGJywgZm9yY2U6dHJ1ZX1cblx0XHRcdGRpdkIgPSBEb20uZGl2IHN0YXRlVHJpZ2dlcnM6eydoYXBweSc6IG9uOidoYXBweU9OJywgb2ZmOidoYXBweU9GRid9XG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEucmF3LmVtaXRFdmVudCAnaGFwcHlPTidcblx0XHRcdGRpdkIucmF3LmVtaXRFdmVudCAnaGFwcHlPTidcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXZCLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZBLnJhdy5lbWl0RXZlbnQgJ2hhcHB5T0ZGJ1xuXHRcdFx0ZGl2Qi5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cblx0XHR0ZXN0IFwib3B0aW9ucy5zdGF0ZVRyaWdnZXJzIGNvbmZpZyBvYmplY3RzIGNhbiBzcGVjaWZ5IGEgJ2J1YmJsZXMnIHByb3BlcnR5IHdoaWNoIHdpbGwgY2F1c2UgdGhlIHN0YXRlIHRvIGJ1YmJsZSB0byBwYXJlbnRzIGluc3RlYWQgb2YgY2FzY2FkZSB0byBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRwYXJlbnRBID0gRG9tLnNlY3Rpb24gbnVsbCxcblx0XHRcdFx0c3ViUGFyZW50QSA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRjaGlsZEEgPSBEb20uZGl2IHN0YXRlVHJpZ2dlcnM6eydoYXBweSc6IG9uOidoYXBweU9OJywgb2ZmOidoYXBweU9GRicsIGJ1YmJsZXM6dHJ1ZSwgZm9yY2U6dHJ1ZX0sXG5cdFx0XHRcdFx0XHRzdWJDaGlsZEEgPSBEb20uZGl2KClcblx0XHRcdFxuXHRcdFx0cGFyZW50QiA9IERvbS5zZWN0aW9uIG51bGwsXG5cdFx0XHRcdHN1YlBhcmVudEIgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRCID0gRG9tLmRpdiBzdGF0ZVRyaWdnZXJzOnsnaGFwcHknOiBvbjonaGFwcHlPTicsIG9mZjonaGFwcHlPRkYnLCBmb3JjZTp0cnVlfSxcblx0XHRcdFx0XHRcdHN1YkNoaWxkQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGNoaWxkQS5yYXcuZW1pdEV2ZW50ICdoYXBweU9OJ1xuXHRcdFx0Y2hpbGRCLnJhdy5lbWl0RXZlbnQgJ2hhcHB5T04nXG5cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cblx0XHRcdGNoaWxkQS5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblx0XHRcdGNoaWxkQi5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cblx0XHR0ZXN0IFwid3JhcHBlcnMgY3JlYXRlZCBmb3IgZXhpc3RpbmcgZWxlbWVudHMgc2hvdWxkIGF0dGVtcHQgdG8gcmVzb2x2ZSBpZiBpdHMgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIG9uIGluaXRcIiwgKCktPlxuXHRcdFx0ZGl2QV8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0ZGl2Ql8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0c2FuZGJveC5hcHBlbmRDaGlsZChkaXZCXylcblx0XHRcdGRpdkEgPSBEb20oZGl2QV8pXG5cdFx0XHRkaXZCID0gRG9tKGRpdkJfKVxuXG5cdFx0XHRkaXZBXy5zdHlsZS5oZWlnaHQgPSAnMTAwcHgnXG5cdFx0XHRkaXZCXy5zdHlsZS5oZWlnaHQgPSAnMTAwcHgnXG5cblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2QS5oZWlnaHQpLnRvLmVxdWFsKCdudW1iZXInKVxuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZCLmhlaWdodCkudG8uZXF1YWwoJ251bWJlcicpXG5cdFx0XHRleHBlY3QoaXNOYU4gZGl2QS5oZWlnaHQpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChpc05hTiBkaXZCLmhlaWdodCkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSAnaGVpZ2h0JykudG8uZXF1YWwgJzEwMHB4J1xuXG5cblx0XHR0ZXN0IFwic3RhdGUtYmFzZWQgdGV4dFwiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tKFxuXHRcdFx0XHRbJ2RpdicsIG51bGwsXG5cdFx0XHRcdFx0Wyd0ZXh0Jyxcblx0XHRcdFx0XHRcdHRleHQ6XG5cdFx0XHRcdFx0XHRcdCRiYXNlOiAnYWJjMTIzJ1xuXHRcdFx0XHRcdFx0XHQkaGFwcHk6ICdIYXBweSdcblx0XHRcdFx0XHRcdFx0JHJlbGF4ZWQ6ICdSZWxheGVkJ1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0ZGl2QiA9IERvbShcblx0XHRcdFx0WydkaXYnLCBudWxsLFxuXHRcdFx0XHRcdFsndGV4dCcsXG5cdFx0XHRcdFx0XHR0ZXh0OlxuXHRcdFx0XHRcdFx0XHQkaGFwcHk6ICdIYXBweSdcblx0XHRcdFx0XHRcdFx0JHJlbGF4ZWQ6ICdSZWxheGVkJ1xuXHRcdFx0XHRcdFx0XHQnJHJlbGF4ZWQrZnVubnknOiAnRnVubnkgJiBSZWxheGVkJ1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0ZGl2QyA9IERvbS5kaXYodGV4dDp7JGJhc2U6J2RlZjQ1NicsICRoYXBweTonZ2hpNzg5J30pXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdhYmMxMjMnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkMudGV4dCkudG8uZXF1YWwgJ2RlZjQ1Nidcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0ZXhwZWN0KGRpdkMudGV4dCkudG8uZXF1YWwgJ2doaTc4OSdcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGRpdkIuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRkaXZDLnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ2FiYzEyMydcblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2Qy50ZXh0KS50by5lcXVhbCAnZGVmNDU2J1xuXHRcdFx0XG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ1JlbGF4ZWQnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnUmVsYXhlZCdcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ1JlbGF4ZWQnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnUmVsYXhlZCdcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9mZlxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCcsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkEudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJ0hhcHB5J1xuXHRcdFx0XG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ2Z1bm55Jywgb25cblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICdSZWxheGVkJ1xuXG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkK2Z1bm55Jywgb25cblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICdGdW5ueSAmIFJlbGF4ZWQnXG5cblxuXHRcdHRlc3QgXCJzdGF0ZSBjaGFuZ2VzIHdpbGwgZW1pdCBhIHByaXZhdGUgc3RhdGVDaGFuZ2U6PHN0YXRlPiBldmVudFwiLCAoKS0+XG5cdFx0XHRyZXN1bHRzID0gW11cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdGNvbG9yOiAnd2hpdGUnXG5cdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0JGhhcHB5OiBjb2xvcjogJ2JsYWNrJ1xuXHRcdFx0XG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnYW55Jywgb25cblx0XHRcdGRpdi5vbiAnc3RhdGVDaGFuZ2U6aGFwcHknLCAoc3RhdGUpLT4gcmVzdWx0cy5wdXNoIFsnaGFwcHknLCBzdGF0ZV1cblx0XHRcdGRpdi5vbiAnc3RhdGVDaGFuZ2U6cmVsYXhlZCcsIChzdGF0ZSktPiByZXN1bHRzLnB1c2ggWydyZWxheGVkJywgc3RhdGVdXG5cdFx0XHRkaXYub24gJ3N0YXRlQ2hhbmdlOmFyYml0cmFyeScsIChzdGF0ZSktPiByZXN1bHRzLnB1c2ggWydhcmJpdHJhcnknLCBzdGF0ZV1cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtdXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbCBbWydoYXBweScsb25dLCBbJ2hhcHB5JyxvZmZdLCBbJ2hhcHB5Jyxvbl1dXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dXVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Fub3RoZXInLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dXVxuXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dLCBbJ3JlbGF4ZWQnLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdhcmJpdHJhcnknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dLCBbJ3JlbGF4ZWQnLG9uXSwgWydhcmJpdHJhcnknLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl0sIFsnaGFwcHknLG9uXSwgWydyZWxheGVkJyxvbl0sIFsnYXJiaXRyYXJ5Jyxvbl1dXG5cblxuXHRcdHRlc3QgXCJzdGF0ZS1iYXNlZCBzdHlsZXMgY2FuIGJlIHVwZGF0ZWQgdmlhIFF1aWNrRWxlbWVudC51cGRhdGVTdGF0ZVN0eWxlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOlxuXHRcdFx0XHR3aWR0aDogNVxuXHRcdFx0XHRoZWlnaHQ6IDVcblx0XHRcdFx0bWFyZ2luVG9wOiA1XG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDEwXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdG1hcmdpblRvcDogMjBcblx0XHRcdFx0XHR3aWR0aDogMjBcblx0XHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDQwXG5cdFx0XHRcdFx0XHRtYXJnaW5Ub3A6IDQwXG5cdFx0XHRcdCRzb21ldGhpbmdFbHNlOlxuXHRcdFx0XHRcdHdpZHRoOiA2MFxuXHRcdFx0XHRcdG1hcmdpblRvcDogNjBcblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGdldFN0eWxlcyA9ICgpLT4gd2lkdGg6ZGl2LnN0eWxlKCd3aWR0aCcpLCBoZWlnaHQ6ZGl2LnN0eWxlKCdoZWlnaHQnKSwgbWFyZ2luVG9wOmRpdi5zdHlsZSgnbWFyZ2luVG9wJylcblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzVweCcsIGhlaWdodDonNXB4JywgbWFyZ2luVG9wOic1cHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzVweCcsIGhlaWdodDonNXB4JywgbWFyZ2luVG9wOicxMHB4J1xuXHRcdFx0XG5cdFx0XHRkaXYudXBkYXRlU3RhdGVTdHlsZXMge3dpZHRoOjcsIGhlaWdodDo4LCAkaGFwcHk6e21hcmdpblRvcDoxMiwgaGVpZ2h0OjEyfX1cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic3cHgnLCBoZWlnaHQ6JzEycHgnLCBtYXJnaW5Ub3A6JzEycHgnXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic3cHgnLCBoZWlnaHQ6JzhweCcsIG1hcmdpblRvcDonNXB4J1xuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic3cHgnLCBoZWlnaHQ6JzEycHgnLCBtYXJnaW5Ub3A6JzEycHgnXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdi51cGRhdGVTdGF0ZVN0eWxlc1xuXHRcdFx0XHQkYmFzZTpcblx0XHRcdFx0XHR3aWR0aDogMlxuXHRcdFx0XHRcdGhlaWdodDogOVxuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRoZWlnaHQ6IDIwXG5cdFx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdFx0d2lkdGg6IDQwXG5cdFx0XHRcdFx0XHRtYXJnaW5Ub3A6IC0+IDQ1XG5cdFx0XHRcblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOicycHgnLCBoZWlnaHQ6JzlweCcsIG1hcmdpblRvcDonNXB4J1xuXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzIwcHgnLCBoZWlnaHQ6JzIwcHgnLCBtYXJnaW5Ub3A6JzIwcHgnXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzQwcHgnLCBoZWlnaHQ6JzQwcHgnLCBtYXJnaW5Ub3A6JzQ1cHgnXG5cblx0XHRcdGRpdi5zdGF0ZSB7aGFwcHk6b2ZmLCByZWxheGVkOm9mZn1cblx0XHRcdGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3AgPSBudWxsXG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonMnB4JywgaGVpZ2h0Oic5cHgnLCBtYXJnaW5Ub3A6JzVweCdcblxuXHRcdFx0ZGl2LnN0YXRlICdzb21ldGhpbmdFbHNlJywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic2MHB4JywgaGVpZ2h0Oic5cHgnLCBtYXJnaW5Ub3A6JzYwcHgnXG5cblxuXHRcdHRlc3QgXCJkZWZhdWx0IHN0YXRlcyB0byBhcHBseSB0byBhbiBlbGVtZW50IHVwb24gY3JlYXRpb24gY2FuIGJlIHNwZWNpZmllZCB2aWEgb3B0aW9ucy5zdGF0ZSBtYXBwaW5nXCIsICgpLT5cblx0XHRcdGVsMSA9IERPTS5kaXYoKVxuXHRcdFx0ZWwyID0gRE9NLmRpdihzdGF0ZTp7aGFwcHk6b24sIHJlbGF4ZWQ6b2ZmfSlcblx0XHRcdGVsMyA9IERPTS5kaXYoc3RhdGU6e3JlbGF4ZWQ6b259KVxuXHRcdFx0ZXhwZWN0KGVsMS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChlbDEuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChlbDIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChlbDIuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChlbDMuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZWwzLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblxuXG5cblx0c3VpdGUgXCJNZWRpYSBRdWVyaWVzXCIsICgpLT5cblx0XHRzdWl0ZVRlYXJkb3duICgpLT4gZGltZW5zaW9ucy5yZXN0b3JlKCkgaWYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3csICdpbm5lcldpZHRoJyk/LmNvbmZpZ3VyYWJsZVxuXHRcdHN1aXRlU2V0dXAgKCktPiBAc2tpcCgpIGlmIG5vdCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2lubmVyV2lkdGgnKT8uY29uZmlndXJhYmxlXG5cdFx0dGVhcmRvd24gKCktPiBEb20uQ1NTLmNsZWFyUmVnaXN0ZXJlZChsZXZlbCkgZm9yIGxldmVsIGluIFswLi4zXVxuXG5cblx0XHR0ZXN0IFwiV2luZG93IGRpbWVuc2lvbnNcIiwgKCktPlxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgxMDAwLCAxMDAwKVxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZSdcblx0XHRcdFx0ekluZGV4OiAyXG5cdFx0XHRcdHdpZHRoOiAnMzAwcHgnXG5cdFx0XHRcdGhlaWdodDogJzMwMHB4J1xuXHRcdFx0XHRmb250U2l6ZTogJzMwcHgnXG5cdFx0XHRcdGxpbmVIZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOmxhbmRzY2FwZSknOlxuXHRcdFx0XHRcdG1hcmdpblRvcDogNlxuXG5cdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOnBvcnRyYWl0KSc6XG5cdFx0XHRcdFx0bWFyZ2luVG9wOiA3XG5cblx0XHRcdFx0J0B3aW5kb3cobWF4LXdpZHRoOjgwMCknOlxuXHRcdFx0XHRcdHpJbmRleDogM1xuXHRcdFx0XHRcdHdpZHRoOiAnMjgwcHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHdpbmRvdyhtYXgtd2lkdGg6NzAwLCBtYXgtaGVpZ2h0OjEwMDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDRcblx0XHRcdFx0XHR3aWR0aDogJzI1MHB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzI1MHB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3cobWF4LWhlaWdodDoxMDAwKSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcyNXB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3cobWluLXdpZHRoOjkwMHB4KSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcyM3B4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3coYXNwZWN0LXJhdGlvOjAuNSknOlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjFweCdcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTJweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAd2luZG93KG1pbi1oZWlnaHQ6MTIwMCknOlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjBweCdcblxuXHRcdFx0ZGl2LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyM3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luVG9wJykudG8uZXF1YWwgJzdweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyM3B4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDg5OSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzI1cHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoODk5LCAxMTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5NTApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyM3B4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDk1MCwgMTkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzIwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzEycHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoOTUwLCAxODk5KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg3OTApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI4MHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDgxMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMzAwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzkxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzMnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyODBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg3MDEsIDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjgwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzAwLCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnNCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI1MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzI1MHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDcwMCwgMTAwMSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjgwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzAwLCAxMDAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyNTBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICcyNTBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTEwMCwgMTAwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc2cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTEwMCwgMTEwMSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cblxuXHRcdHRlc3QgXCJTZWxmIGRpbWVuc2lvbnMvc3R5bGVzXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c2ltdWxhdGVQYXJlbnQgPSAod2lkdGgsIGhlaWdodCktPlxuXHRcdFx0XHRwYXJlbnQuc3R5bGUgJ3dpZHRoJywgd2lkdGggaWYgd2lkdGhcblx0XHRcdFx0cGFyZW50LnN0eWxlICdoZWlnaHQnLCBoZWlnaHQgaWYgaGVpZ2h0XG5cdFx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuXHRcdFx0XHR6SW5kZXg6IDJcblx0XHRcdFx0dG9wOiAnMzBweCdcblx0XHRcdFx0d2lkdGg6ICcxMDAlJ1xuXHRcdFx0XHRoZWlnaHQ6ICcxMDAlJ1xuXHRcdFx0XHRmb250U2l6ZTogJzMwcHgnXG5cdFx0XHRcdGxpbmVIZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRcdCdAc2VsZihvcmllbnRhdGlvbjpsYW5kc2NhcGUpJzpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDZcblxuXHRcdFx0XHQnQHNlbGYob3JpZW50YXRpb246cG9ydHJhaXQpJzpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihwb3NpdGlvbjpyZWxhdGl2ZSknOlxuXHRcdFx0XHRcdHRvcDogJzIwcHgnXG5cblx0XHRcdFx0J0BzZWxmKG1heC13aWR0aDozNTApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDNcblx0XHRcdFx0XHRmb250U2l6ZTogJzMzcHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWF4LXdpZHRoOjUwMCwgbWluLWhlaWdodDo0MDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDRcblx0XHRcdFx0XHRmb250U2l6ZTogJzI3cHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzM3cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYoekluZGV4OjQpJzpcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTVweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihtaW4tekluZGV4OjYpJzpcblx0XHRcdFx0XHRvcGFjaXR5OiAnMCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihtYXgtZm9udFNpemU6MjApJzpcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTlweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAc2VsZihtaW4td2lkdGg6NjAwcHgpJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzE5cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYoYXNwZWN0LXJhdGlvOjIuMjUpJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzIycHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzEycHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWluLWhlaWdodDo3MDApJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzQwcHgnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDQwMCwgMzAwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnNDAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luVG9wJykudG8uZXF1YWwgJzZweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICcyMHB4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDQyMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTVweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMzQ5LCAzOTkpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzMzcHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgNDAxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxNXB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsICcxJ1xuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUoJ3pJbmRleCcsIDUpXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzdweCdcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlKCd6SW5kZXgnLCAxNylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdvcGFjaXR5JykudG8uZXF1YWwgJzAnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzE5cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTlweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoOTAwLCA0MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyMnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxMnB4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgyMDI1LCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICc0MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxMnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luVG9wJykudG8uZXF1YWwgJzZweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMjAyNSwgMjAyNilcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cblxuXHRcdHRlc3QgXCJQYXJlbnQgZGltZW5zaW9ucy9zdHlsZXNcIiwgKCktPlxuXHRcdFx0cGFyZW50ID0gRG9tLmRpdihzdHlsZTp7cG9zaXRpb246J2Fic29sdXRlJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzaW11bGF0ZVBhcmVudCA9ICh3aWR0aCwgaGVpZ2h0KS0+XG5cdFx0XHRcdHBhcmVudC5zdHlsZSAnd2lkdGgnLCB3aWR0aCBpZiB3aWR0aFxuXHRcdFx0XHRwYXJlbnQuc3R5bGUgJ2hlaWdodCcsIGhlaWdodCBpZiBoZWlnaHRcblx0XHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnXG5cdFx0XHRcdHpJbmRleDogMlxuXHRcdFx0XHR0b3A6ICczMHB4J1xuXHRcdFx0XHR3aWR0aDogJzQwMHB4J1xuXHRcdFx0XHRoZWlnaHQ6ICczMDBweCdcblx0XHRcdFx0Zm9udFNpemU6ICczMHB4J1xuXHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzBweCdcblxuXHRcdFx0XHQnQHBhcmVudChvcmllbnRhdGlvbjpsYW5kc2NhcGUpJzpcblx0XHRcdFx0XHRtYXJnaW5Cb3R0b206IDZcblxuXHRcdFx0XHQnQHBhcmVudChvcmllbnRhdGlvbjpwb3J0cmFpdCknOlxuXHRcdFx0XHRcdG1hcmdpbkJvdHRvbTogN1xuXHRcdFx0XHRcblx0XHRcdFx0J0BwYXJlbnQocG9zaXRpb246cmVsYXRpdmUpJzpcblx0XHRcdFx0XHR0b3A6ICcyMXB4J1xuXG5cdFx0XHRcdCdAcGFyZW50KG1heC13aWR0aDozNTApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDNcblx0XHRcdFx0XHRmb250U2l6ZTogJzM0cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHBhcmVudChtYXgtd2lkdGg6NTAwLCBtaW4taGVpZ2h0OjQwMCknOlxuXHRcdFx0XHRcdHpJbmRleDogNFxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjdweCdcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzdweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAcGFyZW50KHpJbmRleDo3KSc6XG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzE2cHgnXG5cblxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoNDAwLCAzMDApXG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzInXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICc0MDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICczMDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5Cb3R0b20nKS50by5lcXVhbCAnNnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdHBhcmVudC5zdHlsZSAncG9zaXRpb24nLCAncmVsYXRpdmUnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd0b3AnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzIxcHgnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgNDIwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczN3B4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDM5OSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzRweCdcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlICd6SW5kZXgnLCAnNydcblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgNDAxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxNnB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsICcxJ1xuXG5cblx0XHR0ZXN0IFwiUGFyZW50IFJlZiBkaW1lbnNpb25zL3N0eWxlc1wiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPVxuXHRcdFx0XHREb20uZGl2KHtyZWY6J2FiYyd9LFxuXHRcdFx0XHRcdERvbS5kaXYge2lkOidkZWYnfSxcblx0XHRcdFx0XHRcdERvbS5kaXYge3JlZjonZ2hpJ31cblx0XHRcdFx0KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuXHRcdFx0XHR6SW5kZXg6IDJcblx0XHRcdFx0dG9wOiAnMzBweCdcblx0XHRcdFx0d2lkdGg6ICc0MDBweCdcblx0XHRcdFx0aGVpZ2h0OiAnMzAwcHgnXG5cdFx0XHRcdGZvbnRTaXplOiAnMzBweCdcblx0XHRcdFx0bGluZUhlaWdodDogJzMwcHgnXG5cblx0XHRcdFx0J0AjYWJjKG9yaWVudGF0aW9uOmxhbmRzY2FwZSknOlxuXHRcdFx0XHRcdGZvbnRXZWlnaHQ6IDYwMFxuXG5cdFx0XHRcdCdAI2FiYyhvcmllbnRhdGlvbjpwb3J0cmFpdCknOlxuXHRcdFx0XHRcdGZvbnRXZWlnaHQ6IDUwMFxuXHRcdFx0XHRcblx0XHRcdFx0J0AjZGVmKHBvc2l0aW9uOnJlbGF0aXZlKSc6XG5cdFx0XHRcdFx0dG9wOiAnMjBweCdcblxuXHRcdFx0XHQnQCNkZWYobWF4LXdpZHRoOjM1MCknOlxuXHRcdFx0XHRcdHpJbmRleDogM1xuXHRcdFx0XHRcdGZvbnRTaXplOiAnMzNweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAI2doaShtYXgtd2lkdGg6NTAwLCBtaW4taGVpZ2h0OjQwMCknOlxuXHRcdFx0XHRcdHpJbmRleDogNFxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjdweCdcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzdweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAI2FiYyh6SW5kZXg6NyknOlxuXHRcdFx0XHRcdGxpbmVIZWlnaHQ6ICcxNXB4J1xuXG5cblx0XHRcdHBhcmVudC5zdHlsZSh3aWR0aDo0MDAsIGhlaWdodDozMDApXG5cdFx0XHRwYXJlbnQuY2hpbGQuZGVmLnN0eWxlKHdpZHRoOjQwMCwgaGVpZ2h0OjMwMClcblx0XHRcdHBhcmVudC5jaGlsZC5naGkuc3R5bGUod2lkdGg6NDAwLCBoZWlnaHQ6MzAwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudC5jaGlsZC5naGkpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMidcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzQwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzMwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRXZWlnaHQnKS50by5lcXVhbCAnNjAwJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdHBhcmVudC5zdHlsZSh3aWR0aDo0MDAsIGhlaWdodDo5MDAsIHBvc2l0aW9uOidyZWxhdGl2ZScpXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRXZWlnaHQnKS50by5lcXVhbCAnNTAwJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRcblx0XHRcdHBhcmVudC5jaGlsZC5kZWYuc3R5bGUocG9zaXRpb246J3JlbGF0aXZlJylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICczMHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICcyMHB4J1xuXG5cdFx0XHRwYXJlbnQuY2hpbGQuZGVmLnN0eWxlKHdpZHRoOjM0OSwgaGVpZ2h0OjQyMClcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzMnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICczM3B4J1xuXHRcdFx0XG5cdFx0XHRwYXJlbnQuY2hpbGQuZ2hpLnN0eWxlKHdpZHRoOjQ1MCwgaGVpZ2h0OjQyMClcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyN3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczN3B4J1xuXHRcdFx0XG5cdFx0XHRwYXJlbnQuc3R5bGUoekluZGV4OjcpXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTVweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblxuXG5cdFx0dGVzdCBcIk5lc3RlZCBtZWRpYSBxdWVyaWVzXCIsICgpLT5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTAwMCwgOTAwKVxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0ekluZGV4OiAyXG5cblx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdG1hcmdpblJpZ2h0OiA1XG5cdFx0XHRcdFx0J0B3aW5kb3cob3JpZW50YXRpb246bGFuZHNjYXBlKSc6XG5cdFx0XHRcdFx0XHRtYXJnaW5SaWdodDogNlxuXG5cdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOnBvcnRyYWl0KSc6XG5cdFx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0XHRtYXJnaW5SaWdodDogN1xuXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICcwcHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnNnB4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDkwMCwgMTAwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblJpZ2h0JykudG8uZXF1YWwgJzVweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgxMDAwLCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICc2cHgnXG5cblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblJpZ2h0JykudG8uZXF1YWwgJzZweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5MDAsIDEwMDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICc3cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTAwMCwgOTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnNnB4J1xuXG5cblxuXG5cblxuXHRzdWl0ZSBcIlRyYXZlcnNhbFwiLCAoKS0+XG5cdFx0dGVzdCBcIkNoaWxkcmVuXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgRG9tLmRpdigpLCAnU29tZSBUZXh0JylcblxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LmVsZW1lbnRDaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYuYXBwZW5kKERvbS5zcGFuKCkpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChkaXYuZWxlbWVudENoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYuZWwuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCg0KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbGVtZW50Q2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoNClcblxuXHRcdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHNwYW5BID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG5cdFx0XHRzcGFuQiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuXHRcdFx0dGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdzb21lVGV4dE5vZGUnKVxuXHRcdFx0Y29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ3NvbWVDb21tZW50Tm9kZScpXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRDaGlsZChzcGFuQSlcblx0XHRcdGRpdi5hcHBlbmRDaGlsZChjb21tZW50KVxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKHNwYW5CKVxuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKHRleHQpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCg0KVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cblx0XHRcdGRpdiQgPSBEb20oZGl2KVxuXHRcdFx0ZXhwZWN0KGRpdiQuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGRpdiQuZWxlbWVudENoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYkLmNoaWxkcmVuWzBdLnJhdykudG8uZXF1YWwoc3BhbkEpXG5cdFx0XHRleHBlY3QoZGl2JC5jaGlsZHJlblsxXS5yYXcpLnRvLmVxdWFsKHNwYW5CKVxuXHRcdFx0ZXhwZWN0KGRpdiQuY2hpbGRyZW5bMl0ucmF3KS50by5lcXVhbCh0ZXh0KVxuXG5cblx0XHR0ZXN0IFwiUGFyZW50XCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KG51bGwsIERvbS5kaXYoKSwgJ1NvbWUgVGV4dCcpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLmRpdigpXG5cblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5wYXJlbnQpLnRvLmVxdWFsIEFcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuWzBdLmVsLnBhcmVudE5vZGUpLnRvLmVxdWFsIEEuZWxcblxuXHRcdFx0Qi5hcHBlbmQoQSlcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwgQlxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0ucGFyZW50KS50by5lcXVhbCBBXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC5wYXJlbnROb2RlKS50by5lcXVhbCBBLmVsXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXSkudG8uZXF1YWwoQSlcblxuXHRcdFx0Qy5hcHBlbmQoQSlcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwgQ1xuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0ucGFyZW50KS50by5lcXVhbCBBXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC5wYXJlbnROb2RlKS50by5lcXVhbCBBLmVsXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoQy5jaGlsZHJlblswXSkudG8uZXF1YWwoQSlcblxuXG5cdFx0dGVzdCBcIlBhcmVudHNcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhCKVxuXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQuZWwpLnRvLmVxdWFsKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKEEpXG5cdFx0XHRleHBlY3QoQy5wYXJlbnQpLnRvLmVxdWFsKEIpXG5cblx0XHRcdGV4cGVjdChBLnBhcmVudHMubGVuZ3RoKS50by5lcXVhbChCLnBhcmVudHMubGVuZ3RoLTEpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnRzLmxlbmd0aCkudG8uZXF1YWwoQy5wYXJlbnRzLmxlbmd0aC0xKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50c1swXSkudG8uZXF1YWwoQSlcblx0XHRcdGV4cGVjdChDLnBhcmVudHNbMF0pLnRvLmVxdWFsKEIpXG5cdFx0XHRleHBlY3QoQy5wYXJlbnRzLmxlbmd0aCkudG8uZXF1YWwoNSlcblx0XHRcdGV4cGVjdChDLnBhcmVudHMuc2xpY2UoLTEpWzBdLmVsKS50by5lcXVhbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpXG5cblxuXHRcdHN1aXRlIFwiUGFyZW50IE1hdGNoaW5nXCIsICgpLT5cblx0XHRcdHRlYXJkb3duICgpLT4gQGVscy5BLmRldGFjaCgpXG5cdFx0XHRzdWl0ZVNldHVwICgpLT5cblx0XHRcdFx0QSA9IERvbS5zZWN0aW9uKHJlZjonQScpXG5cdFx0XHRcdEIgPSBEb20uZGl2KHJlZjonQicpLmFwcGVuZFRvKEEpXG5cdFx0XHRcdEMgPSBEb20uZGl2KHJlZjonQycpLmFwcGVuZFRvKEIpXG5cdFx0XHRcdEQgPSBEb20uc3BhbihyZWY6J0QnKS5hcHBlbmRUbyhDKVxuXHRcdFx0XHRAZWxzID0ge0EsQixDLER9XG5cdFx0XHRcdFxuXHRcdFx0dGVzdCBcImZ1bmN0aW9uIGZpbHRlclwiLCAoKS0+XG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50cykudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcobnVsbCkpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcoQikpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKCktPiBmYWxzZSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRNYXRjaGluZyAoZWwpLT4gZWwgaXMgQikudG8uZXF1YWwoQilcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKGVsKS0+IGVsIGlzIEEpLnRvLmVxdWFsKEEpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nIChlbCktPiBlbCBpcyBDKS50by5lcXVhbChDKVxuXG5cdFx0XHRcdEEuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKGVsKS0+IGVsLnJhdyBpcyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnRvLmVxdWFsKERvbShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKVxuXG5cdFx0XHR0ZXN0IFwicmVmIGZpbHRlclwiLCAoKS0+XG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50cykudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgJ2JhZFJlZicpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgJ0InKS50by5lcXVhbChCKVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRNYXRjaGluZyAnQScpLnRvLmVxdWFsKEEpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nICdDJykudG8uZXF1YWwoQylcblxuXG5cdFx0c3VpdGUgXCJQYXJlbnRzIFVudGlsXCIsICgpLT5cblx0XHRcdHN1aXRlU2V0dXAgKCktPlxuXHRcdFx0XHRBID0gRG9tLnNlY3Rpb24ocmVmOidBJylcblx0XHRcdFx0QiA9IERvbS5kaXYocmVmOidCJykuYXBwZW5kVG8oQSlcblx0XHRcdFx0QyA9IERvbS5kaXYocmVmOidDJykuYXBwZW5kVG8oQilcblx0XHRcdFx0RCA9IERvbS5zcGFuKHJlZjonRCcpLmFwcGVuZFRvKEMpXG5cdFx0XHRcdEBlbHMgPSB7QSxCLEMsRH1cblx0XHRcdFxuXHRcdFx0dGVzdCBcImZ1bmN0aW9uIGZpbHRlclwiLCAoKS0+XG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50cykudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsKG51bGwpKS50by5lcWwgW0MsQixBXVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwoKSkudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsIChlbCktPiBlbCBpcyBBKS50by5lcWwgW0MsQl1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsIChlbCktPiBlbCBpcyBCKS50by5lcWwgW0NdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHNVbnRpbCAoZWwpLT4gZmFsc2UpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRcblxuXHRcdFx0dGVzdCBcInJlZiBmaWx0ZXJcIiwgKCktPiBcblx0XHRcdFx0e0EsQixDLER9ID0gQGVsc1xuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwgJ0EnKS50by5lcWwgW0MsQl1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsICdCJykudG8uZXFsIFtDXVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwgJ2JhZFJlZicpLnRvLmVxbCBbQyxCLEFdXG5cblxuXHRcdHRlc3QgXCJOZXh0XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgQT1Eb20uZGl2KCksIEI9RG9tLmRpdigpLCBDPURvbS5kaXYoKSwgRD1Eb20uZGl2KCksIEU9RG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoQS5uZXh0KS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEMubmV4dCkudG8uZXF1YWwoRClcblx0XHRcdGV4cGVjdChFLm5leHQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChCLm5leHRBbGwpLnRvLmVxbChbQyxELEVdKVxuXG5cdFx0XG5cdFx0dGVzdCBcIk5leHQgRWxlbWVudFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsIEE9RG9tLmRpdigpLCBCPURvbS50ZXh0KCksIEM9RG9tLmRpdigpLCBEPURvbS50ZXh0KCksIEU9RG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoQS5uZXh0KS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEEubmV4dEVsKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEIubmV4dEVsKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEMubmV4dEVsKS50by5lcXVhbChFKVxuXHRcdFx0ZXhwZWN0KEUubmV4dEVsKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoQS5uZXh0RWxBbGwpLnRvLmVxbChbQyxFXSlcblxuXG5cdFx0dGVzdCBcIlByZXZcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCBBPURvbS5kaXYoKSwgQj1Eb20uZGl2KCksIEM9RG9tLmRpdigpLCBEPURvbS5kaXYoKSwgRT1Eb20uZGl2KCkpXG5cblx0XHRcdGV4cGVjdChFLnByZXYpLnRvLmVxdWFsKEQpXG5cdFx0XHRleHBlY3QoQy5wcmV2KS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEEucHJldikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEQucHJldkFsbCkudG8uZXFsKFtDLEIsQV0pXG5cblx0XHRcblx0XHR0ZXN0IFwiUHJldiBFbGVtZW50XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgQT1Eb20uZGl2KCksIEI9RG9tLnRleHQoKSwgQz1Eb20uZGl2KCksIEQ9RG9tLnRleHQoKSwgRT1Eb20uZGl2KCkpXG5cblx0XHRcdGV4cGVjdChFLnByZXYpLnRvLmVxdWFsKEQpXG5cdFx0XHRleHBlY3QoRS5wcmV2RWwpLnRvLmVxdWFsKEMpXG5cdFx0XHRleHBlY3QoRC5wcmV2RWwpLnRvLmVxdWFsKEMpXG5cdFx0XHRleHBlY3QoQy5wcmV2RWwpLnRvLmVxdWFsKEEpXG5cdFx0XHRleHBlY3QoQS5wcmV2RWwpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChFLnByZXZFbEFsbCkudG8uZXFsKFtDLEFdKVxuXG5cblx0XHR0ZXN0IFwiU2libGluZ3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCBBPURvbS5kaXYoKSwgQj1Eb20udGV4dCgpLCBDPURvbS5kaXYoKSwgRD1Eb20udGV4dCgpLCBFPURvbS5kaXYoKSlcblxuXHRcdFx0ZXhwZWN0KEMuc2libGluZ3MpLnRvLmVxbChDLnByZXZBbGwucmV2ZXJzZSgpLmNvbmNhdChDLm5leHRBbGwpKVxuXHRcdFx0ZXhwZWN0KEMuc2libGluZ3MpLnRvLmVxbChbQSxCLEQsRV0pXG5cdFx0XHRleHBlY3QoQy5lbGVtZW50U2libGluZ3MpLnRvLmVxbChbQSxFXSlcblx0XHRcdGV4cGVjdChCLmVsZW1lbnRTaWJsaW5ncykudG8uZXFsKFtBLEMsRV0pXG5cblxuXHRcdHRlc3QgXCJGaXJzdC9MYXN0IENoaWxkXCIsICgpLT5cblx0XHRcdG1haW4gPSBET00uZGl2KGlkOidtYWluJylcblx0XHRcdGRpdkEgPSBET00uZGl2KGlkOidkaXZBJykuYXBwZW5kVG8obWFpbilcblx0XHRcdGRpdkIgPSBET00uZGl2KGlkOidkaXZCJykuYXBwZW5kVG8obWFpbilcblx0XHRcdGRpdkMgPSBET00uZGl2KGlkOidkaXZDJykuYXBwZW5kVG8obWFpbilcblx0XHRcdGRpdkJBID0gRE9NLmRpdihpZDonZGl2QkEnKS5hcHBlbmRUbyhkaXZCKVxuXHRcdFx0ZGl2QkIgPSBET00uZGl2KGlkOidkaXZCQicpLmFwcGVuZFRvKGRpdkIpXG5cblx0XHRcdGV4cGVjdChtYWluLmZpcnN0Q2hpbGQpLnRvLmVxdWFsIGRpdkFcblx0XHRcdGV4cGVjdChtYWluLmxhc3RDaGlsZCkudG8uZXF1YWwgZGl2Q1xuXHRcdFx0ZXhwZWN0KGRpdkEuZmlyc3RDaGlsZCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2QS5sYXN0Q2hpbGQpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdkIuZmlyc3RDaGlsZCkudG8uZXF1YWwgZGl2QkFcblx0XHRcdGV4cGVjdChkaXZCLmxhc3RDaGlsZCkudG8uZXF1YWwgZGl2QkJcblxuXG5cdFx0dGVzdCBcIkNoaWxkIChieSByZWYpXCIsICgpLT5cblx0XHRcdGRpdkEgPSBcblx0XHRcdFx0RG9tLmRpdiB7aWQ6J2RpdkEnfSxcblx0XHRcdFx0XHREb20uZGl2IHtpZDonY2hpbGRBJ30sXG5cdFx0XHRcdFx0XHREb20uc3BhbiB7cmVmOidjaGlsZEFfMSd9XG5cdFx0XHRcdFx0XHREb20uZGl2IHtyZWY6J2NoaWxkQV8yJywgaWQ6J2NoaWxkQV8yJ31cblx0XHRcdFx0XHREb20uZGl2IHt9LFxuXHRcdFx0XHRcdFx0RG9tLnNwYW4ge3JlZjonY2hpbGRCXzEnfVxuXHRcdFx0XHRcdFx0RG9tLnRleHQge2lkOidjaGlsZEJfMid9LCAnVGhlIFRleHQnXG5cblxuXHRcdFx0ZGl2QiA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7aWQ6J2RpdkInfSxcblx0XHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRBJywgc3R5bGU6e2NvbG9yOidwaW5rJ319LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzMnLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLnNwYXduKClcblxuXHRcdFx0ZGl2QyA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkMnLFxuXHRcdFx0XHRcdFsnZGl2JyxcdHJlZjonY2hpbGRBJyxcblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZCJ11cblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZDJ11cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLFx0cmVmOidjaGlsZEInLFxuXHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkInXVxuXHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkMnXVxuXHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2RpdkQnLFxuXHRcdFx0XHRcdFx0XHRbJ2RpdicsIHJlZjonY2hpbGRCJ11cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdCkuc3Bhd24oKVxuXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQSkudG8uZXF1YWwoZGl2QS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbChkaXZBLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzIpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMykudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRCKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwoZGl2QS5jaGlsZHJlblsxXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbChkaXZBLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRCXzIudHlwZSkudG8uZXF1YWwoJ3RleHQnKVxuXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQSkudG8uZXF1YWwoZGl2Qi5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbChkaXZCLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRBXzIpLnRvLmVxdWFsKGRpdkIuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEFfMykudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRCKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwoZGl2Qi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbChkaXZCLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRBLnN0eWxlKCdjb2xvcicpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQS5zdHlsZVNhZmUoJ2NvbG9yJykpLm5vdC50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQS5zdHlsZVNhZmUoJ2NvbG9yJykubGVuZ3RoID49IDQpLnRvLmJlLnRydWVcblxuXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEEucmF3LmdldEF0dHJpYnV0ZSgnaWQnKSkudG8uZXF1YWwoJ2NoaWxkQScpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEEucmF3LmdldEF0dHJpYnV0ZSgnZGF0YS1yZWYnKSkudG8uZXF1YWwoJ2NoaWxkQScpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMS5yYXcuZ2V0QXR0cmlidXRlKCdpZCcpKS50by5lcXVhbChudWxsKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzEucmF3LmdldEF0dHJpYnV0ZSgnZGF0YS1yZWYnKSkudG8uZXF1YWwoJ2NoaWxkQV8xJylcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQV8yLnJhdy5nZXRBdHRyaWJ1dGUoJ2lkJykpLnRvLmVxdWFsKCdjaGlsZEFfMicpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMi5yYXcuZ2V0QXR0cmlidXRlKCdkYXRhLXJlZicpKS50by5lcXVhbCgnY2hpbGRBXzInKVxuXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5jaGlsZEIpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5kaXZCKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGQuZGl2QykudG8uZXF1YWwoZGl2Qylcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkLmRpdkQpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMl0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZHJlblswXS5jaGlsZC5kaXZCKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGRyZW5bMF0uY2hpbGQuZGl2QykudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblswXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkLmRpdkIpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZC5kaXZDKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGRyZW5bMV0uY2hpbGQuZGl2RCkudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZHJlblsyXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkLmNoaWxkQikudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblsxXSlcblxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRBKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuZGl2QSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0XG5cdFx0XHRzYW5kQm94LmFwcGVuZChkaXZBKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRBKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuZGl2QSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGRmLmRpdkEpLnRvLmVxdWFsKGRpdkEpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwoZGl2QS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkLmRpdkEpLnRvLmVxdWFsKGRpdkEpXG5cblx0XHRcdG5ld0NoaWxkID0gRG9tLmRpdihyZWY6J25ld0NoaWxkJylcblx0XHRcdG5ld0NoaWxkQ2hpbGQgPSBEb20uZGl2KHJlZjonbmV3Q2hpbGRDaGlsZCcpXG5cdFx0XHRleHBlY3QobmV3Q2hpbGQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkQ2hpbGQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwobmV3Q2hpbGRDaGlsZClcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhuZXdDaGlsZENoaWxkLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cblx0XHRcdG5ld0NoaWxkQ2hpbGQuYXBwZW5kVG8obmV3Q2hpbGQpXG5cdFx0XHRleHBlY3QobmV3Q2hpbGQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkLmNoaWxkZi5uZXdDaGlsZENoaWxkKS50by5lcXVhbChuZXdDaGlsZENoaWxkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkLmNoaWxkLm5ld0NoaWxkQ2hpbGQpLnRvLmVxdWFsKG5ld0NoaWxkQ2hpbGQpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMobmV3Q2hpbGRDaGlsZC5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCgxKVxuXG5cdFx0XHRuZXdQYXJlbnQgPSBEb20uZGl2KHJlZjonbmV3UGFyZW50Jylcblx0XHRcdG5ld0NoaWxkLmFwcGVuZFRvKG5ld1BhcmVudClcblx0XHRcdGV4cGVjdChuZXdQYXJlbnQuY2hpbGQubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwobmV3Q2hpbGRDaGlsZClcblxuXG5cdFx0dGVzdCBcIkluZGV4XCIsICgpLT5cblx0XHRcdHNlY3Rpb24gPVxuXHRcdFx0XHREb20uc2VjdGlvbihudWxsLFxuXHRcdFx0XHRcdGNoaWxkQSA9IERvbS5kaXYoKVxuXHRcdFx0XHRcdGNoaWxkQiA9IERvbS5kaXYoKVxuXHRcdFx0XHRcdGNoaWxkQyA9IERvbS5zcGFuKClcblx0XHRcdFx0XHRjaGlsZEQgPSBEb20udGV4dCgpXG5cdFx0XHRcdFx0Y2hpbGRFID0gRG9tLnNwYW4oKVxuXHRcdFx0XHRcdGNoaWxkRiA9IERvbS5kaXYoKVxuXHRcdFx0XHQpXG5cblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXgpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXgpLnRvLmVxdWFsIDVcblxuXHRcdFx0Y2hpbGRDLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4KS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4KS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4KS50by5lcXVhbCA0XG5cdFx0XHRleHBlY3QoY2hpbGRDLmluZGV4KS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCJJbmRleCAoYnkgdHlwZSlcIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9XG5cdFx0XHRcdERvbS5zZWN0aW9uKG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRBID0gRG9tLmRpdigpXG5cdFx0XHRcdFx0Y2hpbGRCID0gRG9tLmRpdigpXG5cdFx0XHRcdFx0Y2hpbGRDID0gRG9tLnNwYW4oKVxuXHRcdFx0XHRcdGNoaWxkRCA9IERvbS50ZXh0KClcblx0XHRcdFx0XHRjaGlsZEUgPSBEb20uc3BhbigpXG5cdFx0XHRcdFx0Y2hpbGRGID0gRG9tLnRleHQoKVxuXHRcdFx0XHRcdGNoaWxkRyA9IERvbS5kaXYoKVxuXHRcdFx0XHQpXG5cblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXhUeXBlKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4VHlwZSkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleFR5cGUpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEcuaW5kZXhUeXBlKS50by5lcXVhbCAyXG5cblx0XHRcdGNoaWxkQy5kZXRhY2goKVxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleFR5cGUpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXhUeXBlKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4VHlwZSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRy5pbmRleFR5cGUpLnRvLmVxdWFsIDJcblxuXHRcdFx0Y2hpbGRBLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4VHlwZSkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleFR5cGUpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXhUeXBlKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRHLmluZGV4VHlwZSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5pbmRleFR5cGUpLnRvLmVxdWFsIG51bGxcblx0XHRcdGV4cGVjdChjaGlsZEMuaW5kZXhUeXBlKS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCJJbmRleCAoYnkgcmVmKVwiLCAoKS0+XG5cdFx0XHRzZWN0aW9uID1cblx0XHRcdFx0RG9tLnNlY3Rpb24obnVsbCxcblx0XHRcdFx0XHRjaGlsZEEgPSBEb20uZGl2KHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEIgPSBEb20uZGl2KHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEMgPSBEb20uc3BhbihyZWY6J2RlZicpXG5cdFx0XHRcdFx0Y2hpbGREID0gRG9tLnRleHQocmVmOidhYmMnKVxuXHRcdFx0XHRcdGNoaWxkRSA9IERvbS5zcGFuKHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEYgPSBEb20udGV4dChyZWY6J2RlZicpXG5cdFx0XHRcdFx0Y2hpbGRHID0gRG9tLmRpdihyZWY6J2FiYycpXG5cdFx0XHRcdClcblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleFJlZikudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleFJlZikudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleFJlZikudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRy5pbmRleFJlZikudG8uZXF1YWwgNFxuXG5cdFx0XHRjaGlsZEMuZGV0YWNoKClcblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXhSZWYpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXhSZWYpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXhSZWYpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChjaGlsZEcuaW5kZXhSZWYpLnRvLmVxdWFsIDRcblxuXHRcdFx0Y2hpbGRBLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4UmVmKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4UmVmKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4UmVmKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRHLmluZGV4UmVmKS50by5lcXVhbCAzXG5cdFx0XHRleHBlY3QoY2hpbGRBLmluZGV4UmVmKS50by5lcXVhbCBudWxsXG5cdFx0XHRleHBlY3QoY2hpbGRDLmluZGV4UmVmKS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCJRdWVyeVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge2NsYXNzOidkaXYtb25lJywgYXR0cnM6bmFtZTonYWJjMTIzJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7Y2xhc3M6J2NoaWxkQScsIHN0eWxlOntjb2xvcjoncGluayd9fSxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydzcGFuJywge2NsYXNzOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydkaXYnLCB7Y2xhc3M6J2NoaWxkQV8yJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JywgY2xhc3NOYW1lOidjaGlsZEInLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRCXzEnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydzZWN0aW9uJywgY2xhc3NOYW1lOidjaGlsZEInLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRCXzEnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdCkuc3Bhd24oKS5hcHBlbmRUbyhzYW5kQm94ID0gRG9tKHNhbmRib3gpKVxuXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5ICcuY2hpbGRBJykudG8uZXF1YWwoZGl2LmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeSAnLmNoaWxkQicpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEJfMScpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEFfMScpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblswXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEFfMicpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblswXS5jaGlsZHJlblszXSlcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5ICcuZGl2LW9uZScpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5ICcuY2hpbGRCXzEnKS50by5lcXVhbChkaXYuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeSAnZGl2W25hbWU9XCJhYmMxMjNcIl0nKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeSAnc3BhbltuYW1lPVwiYWJjMTIzXCJdJykudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cblx0XHR0ZXN0IFwiUXVlcnlBbGxcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRbJ2RpdicsIHtjbGFzczonZGl2LW9uZScsIGF0dHJzOm5hbWU6J2FiYzEyMyd9LFxuXHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEEnLCBzdHlsZTp7Y29sb3I6J3BpbmsnfX0sXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEFfMid9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ2RpdicsIGNsYXNzTmFtZTonY2hpbGRCJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnc2VjdGlvbicsIGNsYXNzTmFtZTonY2hpbGRCJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLnNwYXduKCkuYXBwZW5kVG8oc2FuZEJveCA9IERvbShzYW5kYm94KSlcblxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQScpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblswXV0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5QWxsKCcuY2hpbGRCJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzFdLCBkaXYuY2hpbGRyZW5bMl1dKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQl8xJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdLCBkaXYuY2hpbGRyZW5bMl0uY2hpbGRyZW5bMF1dKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQV8xJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLCBkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0sIGRpdi5jaGlsZHJlblswXS5jaGlsZHJlblsyXV0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5QWxsKCcuY2hpbGRBXzInKS5lbGVtZW50cykudG8uZXFsKFtkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bM11dKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJy5kaXYtb25lJykuZWxlbWVudHMpLnRvLmVxbChbZGl2XSlcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5QWxsKCcuY2hpbGRCXzEnKS5lbGVtZW50cykudG8uZXFsKFtkaXYuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0sIGRpdi5jaGlsZHJlblsyXS5jaGlsZHJlblswXV0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeUFsbCgnZGl2W25hbWU9XCJhYmMxMjNcIl0nKS5lbGVtZW50cykudG8uZXFsKFtkaXZdKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJ3NwYW5bbmFtZT1cImFiYzEyM1wiXScpLmVsZW1lbnRzKS50by5lcWwoW10pXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJy5jaGlsZEJfMScpLnRleHQoJ2FiYzEyMycpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSwgZGl2LmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdXSlcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwoJ2FiYzEyM2FiYzEyMycpXG5cblxuXHRcdHRlc3QgXCJRdWVyeS9RdWVyeUFsbCBzaG9ydGN1dHNcIiwgKCktPlxuXHRcdFx0ZXhwZWN0KERvbS5xdWVyeSgnaGVhZCcpKS50by5lcXVhbChEb20oZG9jdW1lbnQpLnF1ZXJ5KCdoZWFkJykpXG5cdFx0XHRleHBlY3QoRG9tLnF1ZXJ5KCdib2R5JykpLnRvLmVxdWFsKERvbShkb2N1bWVudCkucXVlcnkoJ2JvZHknKSlcblx0XHRcdFxuXHRcdFx0YWxsQSA9IERvbS5xdWVyeUFsbCgnc2VjdGlvbicpLmVsZW1lbnRzXG5cdFx0XHRhbGxCID0gRG9tKGRvY3VtZW50KS5xdWVyeUFsbCgnc2VjdGlvbicpLmVsZW1lbnRzXG5cdFx0XHRleHBlY3QoYWxsQS5sZW5ndGgpLnRvLmVxdWFsKGFsbEIubGVuZ3RoKVxuXHRcdFx0Zm9yIGVsLGluZGV4IGluIGFsbEFcblx0XHRcdFx0ZXhwZWN0KGFsbEFbaW5kZXhdKS50by5lcXVhbChhbGxCW2luZGV4XSlcblx0XHRcdHJldHVyblxuXG5cblxuXHRzdWl0ZSBcIk1hbmlwdWxhdGlvblwiLCAoKS0+XG5cdFx0dGVzdCBcIi5hcHBlbmQoKVwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLnRleHQoKVxuXHRcdFx0RCA9IERvbS5kaXYoKVxuXHRcdFx0TWFpbkEgPSBEb20uZGl2KG51bGwsIEEsIEIsIEMsIEQpXG5cdFx0XHRNYWluQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShBLCBCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoKVxuXG5cdFx0XHRNYWluQi5hcHBlbmQoQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEIsIEMsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShBKVxuXG5cdFx0XHRDLmFwcGVuZFRvKE1haW5CKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQiwgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEEsIEMpXG5cblxuXG5cdFx0dGVzdCBcIi5wcmVwZW5kKClcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXHRcdFx0QyA9IERvbS50ZXh0KClcblx0XHRcdEQgPSBEb20uZGl2KClcblx0XHRcdE1haW5BID0gRG9tLmRpdihudWxsLCBBLCBCLCBDLCBEKVxuXHRcdFx0TWFpbkIgPSBEb20uZGl2KClcblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQSwgQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKClcblxuXHRcdFx0TWFpbkIucHJlcGVuZChBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEEpXG5cblx0XHRcdEMucHJlcGVuZFRvKE1haW5CKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQiwgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEMsIEEpXG5cblxuXHRcdHRlc3QgXCIuYWZ0ZXIoKVwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLnRleHQoKVxuXHRcdFx0RCA9IERvbS5kaXYoKVxuXHRcdFx0TWFpbkEgPSBEb20uZGl2KG51bGwsIEEsIEIsIEMsIEQpXG5cdFx0XHRNYWluQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShBLCBCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoKVxuXG5cdFx0XHRNYWluQi5hcHBlbmQoQilcblx0XHRcdEIuYWZ0ZXIoQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEMsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShCLCBBKVxuXG5cdFx0XHRDLmluc2VydEFmdGVyKEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQiwgQywgQSlcblxuXG5cdFx0dGVzdCBcIi5iZWZvcmUoKVwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdigpXG5cdFx0XHRCID0gRG9tLmRpdigpXG5cdFx0XHRDID0gRG9tLnRleHQoKVxuXHRcdFx0RCA9IERvbS5kaXYoKVxuXHRcdFx0TWFpbkEgPSBEb20uZGl2KG51bGwsIEEsIEIsIEMsIEQpXG5cdFx0XHRNYWluQiA9IERvbS5kaXYoKVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShBLCBCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoKVxuXG5cdFx0XHRNYWluQi5hcHBlbmQoQilcblx0XHRcdEIuYmVmb3JlKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQSwgQilcblxuXHRcdFx0Qy5pbnNlcnRCZWZvcmUoQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShBLCBDLCBCKVxuXG5cblx0XHR0ZXN0IFwiLmRldGFjaCgpXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudCA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJ0lubmVyIFRleHQgSGVyZScpXG5cdFx0XHRkaXYub24gJ2JlZXAnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS5ub3QudG8uZXhpc3Rcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2LmVtaXQoJ2JlZXAnKVxuXHRcdFx0ZXhwZWN0KHNhbmRib3guY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQuZWwpLnRvLmVxdWFsKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGRpdi5lbWl0KCdiZWVwJylcblx0XHRcdGV4cGVjdChzYW5kYm94LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS5ub3QudG8uZXhpc3Rcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblxuXHRcdHRlc3QgXCIucmVtb3ZlKClcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50ID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCAnSW5uZXIgVGV4dCBIZXJlJylcblx0XHRcdGRpdi5vbiAnYmVlcCcsICgpLT4gZW1pdENvdW50Kytcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLm5vdC50by5leGlzdFxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYuZW1pdCgnYmVlcCcpXG5cdFx0XHRleHBlY3Qoc2FuZGJveC5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudC5lbCkudG8uZXF1YWwoc2FuZGJveClcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblx0XHRcdGRpdi5yZW1vdmUoKVxuXHRcdFx0ZGl2LmVtaXQoJ2JlZXAnKVxuXHRcdFx0ZXhwZWN0KHNhbmRib3guY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLm5vdC50by5leGlzdFxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS5mYWxzZVxuXG5cblx0XHR0ZXN0IFwiLmVtcHR5KClcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qi5zdGF0ZSAnaGFwcHknLCBvblxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRleHBlY3QoQS5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cblx0XHRcdE1haW4uZW1wdHkoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKSgpXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChCLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cblx0XHR0ZXN0IFwiLndyYXAoKVwiLCAoKS0+XG5cdFx0XHRNYWluID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRCID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRDID0gRG9tLmRpdigpXG5cdFx0XHR3cmFwQSA9IERvbS5zZWN0aW9uKClcblx0XHRcdHdyYXBCID0gRG9tLnNlY3Rpb24oKVxuXHRcdFx0d3JhcEMgPSBEb20uc2VjdGlvbigpXG5cdFx0XHRBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRCLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRDLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHR3cmFwQS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHR3cmFwQi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHR3cmFwQy5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRcblx0XHRcdEEud3JhcCh3cmFwQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikod3JhcEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBBKShBKVxuXHRcdFx0XG5cdFx0XHRCLndyYXAod3JhcEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKShCKVxuXHRcdFx0XG5cdFx0XHRCLndyYXAod3JhcEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKSgpXG5cdFx0XHRcblx0XHRcdHdyYXBDLmFwcGVuZFRvKHdyYXBCKVxuXHRcdFx0Qy53cmFwKHdyYXBDKVxuXHRcdFx0Qy53cmFwKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikod3JhcEEsIHdyYXBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQSkoQSwgQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEIpKHdyYXBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQykoQylcblx0XHRcdFxuXHRcdFx0Qy53cmFwKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKSh3cmFwQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEMpKEMpXG5cblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChCLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChDLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3cmFwQS5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3cmFwQi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3cmFwQy5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblxuXG5cdFx0dGVzdCBcIi51bndyYXAoKVwiLCAoKS0+XG5cdFx0XHRNYWluID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLnByZXBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0RCA9IERvbS5kaXYoKS5hcHBlbmRUbyhDKVxuXHRcdFx0RSA9IERvbS5kaXYoKS5hcHBlbmRUbyhEKVxuXHRcdFx0QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0RC5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0RS5zdGF0ZSAnaGFwcHknLCBvblxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEIsIEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoRSlcblxuXHRcdFx0RS51bndyYXAoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShCLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXHRcdFx0Qi51bndyYXAoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShCLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXG5cdFx0XHRFLnVud3JhcCgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEIsIEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXHRcdFx0QS5pbnNlcnRBZnRlcihCKVxuXHRcdFx0Qy5hcHBlbmRUbyhBKVxuXHRcdFx0RC5hcHBlbmRUbyhBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShCLCBBLCBFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXG5cdFx0XHRELnVud3JhcCgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEIsIEMsIEQsIEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXG5cblx0XHR0ZXN0IFwiLnJlcGxhY2UoKVwiLCAoKS0+XG5cdFx0XHRNYWluID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRCID0gRG9tLmRpdigpLmFwcGVuZFRvKE1haW4pXG5cdFx0XHRDID0gRG9tLmRpdigpLmFwcGVuZFRvKEEpXG5cdFx0XHREID0gRG9tLmRpdigpLmFwcGVuZFRvKEEpXG5cdFx0XHRFID0gRG9tLmRpdigpLmFwcGVuZFRvKEQpXG5cdFx0XHRcblx0XHRcdEEucmVwbGFjZSgpOyBFLnJlcGxhY2UoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoRSlcblx0XHRcdFxuXHRcdFx0Qy5yZXBsYWNlKEUpLmFwcGVuZFRvKEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEUsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXHRcdFx0XG5cdFx0XHRELnJlcGxhY2UoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQSwgQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cdFx0XHRcblx0XHRcdEIucmVwbGFjZShDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXHRcdFx0XG5cdFx0XHRBLnJlcGxhY2UoRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoRCwgQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblx0XHRcdFxuXHRcdFx0Qi5yZXBsYWNlKEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cblxuXHRcdHRlc3QgXCIuY2xvbmUoKVwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnQgPSAwXG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRvcHRzID0ge3N0eWxlOiAkYmFzZTp7d2lkdGg6JzM0cHgnfSwgJGhhcHB5OntoZWlnaHQ6Jzk5cHgnfSwgJHJlbGF4ZWQ6e29wYWNpdHk6JzAuNSd9fVxuXHRcdFx0QSA9IERvbS5kaXYob3B0cywgJ1NvbWUgSW5uZXIgVGV4dCcpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRBLm9uICdwcml2YXRlRXZlbnQnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRjaGlsZEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oQSlcblx0XHRcdGNoaWxkQiA9IERvbS5zcGFuKCkuYXBwZW5kVG8oQSlcblx0XHRcdEIgPSBBLmNsb25lKClcblxuXHRcdFx0QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRBLmVtaXQoJ3ByaXZhdGVFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEEucGFyZW50KS50by5lcXVhbChzYW5kQm94KVxuXHRcdFx0ZXhwZWN0KEEuY3NzICd3aWR0aCcpLnRvLmVxdWFsKCczNHB4Jylcblx0XHRcdGV4cGVjdChBLmNzcyAnaGVpZ2h0JykudG8uZXF1YWwoJzk5cHgnKVxuXHRcdFx0ZXhwZWN0KEEuY3NzICdvcGFjaXR5JykudG8uZXF1YWwoJzAuNScpXG5cdFx0XHRleHBlY3QoQS5zaWJsaW5ncy5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuWzFdKS50by5lcXVhbChjaGlsZEEpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblsyXSkudG8uZXF1YWwoY2hpbGRCKVxuXHRcdFx0ZXhwZWN0KEIpLm5vdC50by5lcXVhbChBKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRzYW5kQm94LmFwcGVuZChCKVxuXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKHNhbmRCb3gpXG5cdFx0XHRleHBlY3QoQi5jc3MgJ3dpZHRoJykudG8uZXF1YWwoJzM0cHgnKVxuXHRcdFx0ZXhwZWN0KEIuY3NzICdoZWlnaHQnKS50by5lcXVhbCgnOTlweCcpXG5cdFx0XHRleHBlY3QoQi5jc3MgJ29wYWNpdHknKS50by5lcXVhbCgnMScpXG5cdFx0XHRleHBlY3QoQi5zaWJsaW5ncy5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXS5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdGV4cGVjdChCLmNoaWxkcmVuWzBdKS5ub3QudG8uZXF1YWwoQS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChCLmNoaWxkcmVuWzFdKS5ub3QudG8uZXF1YWwoY2hpbGRBKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW5bMl0pLm5vdC50by5lcXVhbChjaGlsZEIpXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLmZhbHNlXG5cblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDEpXG5cdFx0XHRCLmVtaXQoJ3ByaXZhdGVFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0XG5cdFx0XHRBLm9mZigpXG5cdFx0XHRBLmVtaXQoJ3ByaXZhdGVFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0Qi5lbWl0KCdwcml2YXRlRXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMylcblxuXG5cdFx0dGVzdCBcIi5wcm9wKCkgLSBlbGVtZW50IHByb3BlcnR5IGdldHRlci9zZXR0ZXJcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYucHJvcCAnbXlQcm9wJykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcsIDE5MikudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcpLnRvLmVxdWFsIDE5MlxuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdteVByb3AnLCAnMTkyJykudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcpLnRvLmVxdWFsICcxOTInXG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ2Fub3RoZXJQcm9wJywgWzEsMiwzXSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ2Fub3RoZXJQcm9wJykudG8uZXFsIFsxLDIsM11cblx0XHRcdGV4cGVjdChkaXYuZWwubXlQcm9wKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5hbm90aGVyUHJvcCkudG8uZXFsIFsxLDIsM10gXG5cblx0XHRcdGRpdi5lbC5sYXN0UHJvcCA9IDk5OTlcblx0XHRcdGV4cGVjdChkaXYuZWwubGFzdFByb3ApLnRvLmVxdWFsIDk5OTlcblx0XHRcdGV4cGVjdChkaXYucHJvcCAnbGFzdFByb3AnKS50by5lcXVhbCA5OTk5XG5cblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhkaXYuZWwpKS5ub3QudG8uY29udGFpbigncHJvbWlzZUlzTGFzdCcpXG5cdFx0XHRcblx0XHRcdGRpdi5wcm9wICdwcm9taXNlSXNMYXN0JywgJ292ZXI5aydcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhkaXYuZWwpKS50by5jb250YWluKCdwcm9taXNlSXNMYXN0Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnByb3AgJ3Byb21pc2VJc0xhc3QnLCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhkaXYuZWwpKS50by5jb250YWluKCdwcm9taXNlSXNMYXN0Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnByb3AgJ3Byb21pc2VJc0xhc3QnLCBudWxsXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoZGl2LmVsKSkudG8uY29udGFpbigncHJvbWlzZUlzTGFzdCcpXG5cblx0XHRcdGRpdi5wcm9wIHthYmM6MTIzLCBkZWY6NDU2fVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5hYmMpLnRvLmVxdWFsIDEyM1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5kZWYpLnRvLmVxdWFsIDQ1NlxuXG5cblx0XHR0ZXN0IFwiLmF0dHIoKSAtIGVsZW1lbnQgYXR0cmlidXRlIGdldHRlci9zZXR0ZXJcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXYuYXR0ciAnbXlBdHRyJykudG8uZXF1YWwgbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInLCAxOTIpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInLCAnMTkyJykudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ215QXR0cicpLnRvLmVxdWFsICcxOTInXG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ2Fub3RoZXJBdHRyJywgWzEsMiwzXSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ2Fub3RoZXJBdHRyJykudG8uZXF1YWwgJzEsMiwzJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ215QXR0cicpLnRvLmVxdWFsICcxOTInXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnYW5vdGhlckF0dHInKS50by5lcWwgJzEsMiwzJ1xuXG5cdFx0XHRkaXYuZWwuc2V0QXR0cmlidXRlICdsYXN0QXR0cicsIDk5OTlcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdsYXN0QXR0cicpLnRvLmVxdWFsICc5OTk5J1xuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdsYXN0QXR0cicpLnRvLmVxdWFsICc5OTk5J1xuXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAncHJvbWlzZUlzTGFzdCcpLnRvLmVxdWFsIG51bGxcblx0XHRcdFxuXHRcdFx0ZGl2LmF0dHIgJ3Byb21pc2VJc0xhc3QnLCAnb3ZlcjlrJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ3Byb21pc2VJc0xhc3QnKS50by5lcXVhbCAnb3ZlcjlrJ1xuXHRcdFx0XG5cdFx0XHRkaXYuYXR0ciAncHJvbWlzZUlzTGFzdCdcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdwcm9taXNlSXNMYXN0JykudG8uZXF1YWwgJ292ZXI5aydcblx0XHRcdFxuXHRcdFx0ZGl2LmF0dHIgJ3Byb21pc2VJc0xhc3QnLCBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAncHJvbWlzZUlzTGFzdCcpLnRvLmVxdWFsIG51bGxcblxuXHRcdFx0ZGl2LmF0dHIge2FiYzoxMjMsIGRlZjo0NTZ9XG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnYWJjJykudG8uZXF1YWwgJzEyMydcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdkZWYnKS50by5lcXVhbCAnNDU2J1xuXG5cdFx0XHRkaXYuYXR0ciB7YWJjOjEyMywgZGVmOm51bGx9XG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnYWJjJykudG8uZXF1YWwgJzEyMydcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdkZWYnKS50by5lcXVhbCBudWxsXG5cblxuXHRcdHRlc3QgXCIuaHRtbCAtIGlubmVySFRNTCBnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgRG9tLmRpdigpLCAnU29tZSB0ZXh0JywgRG9tLnNwYW4oKSwgRG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoNClcblx0XHRcdGV4cGVjdChkaXYuaHRtbCkudG8uZXF1YWwoZGl2LmVsLmlubmVySFRNTClcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCg0KVxuXG5cdFx0XHRkaXYuaHRtbCA9ICc8c2VjdGlvbiBJRD1cInRlc3RcIj48L3NlY3Rpb24+J1xuXHRcdFx0ZXhwZWN0KGRpdi5odG1sKS50by5lcXVhbCgnPHNlY3Rpb24gaWQ9XCJ0ZXN0XCI+PC9zZWN0aW9uPicpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW5bMF0uZWwuaWQpLnRvLmVxdWFsKCd0ZXN0Jylcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW5bMF0uZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ3NlY3Rpb24nKVxuXG5cblx0XHR0ZXN0IFwiLnRleHQgLSB0ZXh0Q29udGVudCBnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJ1NvbWUgdGV4dCcsIERvbS5zcGFuKG51bGwsICdJbm5lciBUZXh0JykpXG5cblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbChkaXYuZWwudGV4dENvbnRlbnQpXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsKCdTb21lIHRleHRJbm5lciBUZXh0Jylcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYudGV4dCA9ICduZXdUZXh0J1xuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCgnbmV3VGV4dCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnRleHRDb250ZW50KS50by5lcXVhbCgnbmV3VGV4dCcpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW5bMF0uZWwubm9kZVR5cGUpLnRvLmVxdWFsKDMpXG5cblxuXHRcdHRlc3QgXCIuYWRkQ2xhc3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBjbGFzczonc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LnJhdy5jbGFzc05hbWUgPSBkaXYucmF3LmNsYXNzTmFtZS5yZXBsYWNlICduZXctc2VsZWN0b3InLCAnICdcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciAgJ1xuXHRcdFx0XG5cdFx0XHRkaXYuYWRkQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3IgbmV3LXNlbGVjdG9yJ1xuXHRcdFx0XG5cdFx0XHRkaXYuYWRkQ2xhc3MoJy5wZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCdwZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3RvciBwZXJpb2QnXG5cblxuXHRcdHRlc3QgXCIucmVtb3ZlQ2xhc3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBjbGFzczonc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3RvcidcblxuXHRcdFx0ZGl2LnJlbW92ZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3InXG5cdFx0XHRcdFx0XHRcblx0XHRcdGRpdi5yZW1vdmVDbGFzcygnc29tZS1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJ3BlcmlvZCcpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJy5wZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIGFubm95aW5nLV8tc2VsZWN0b3InXG5cblxuXHRcdHRlc3QgXCIudG9nZ2xlQ2xhc3NcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBjbGFzczonc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCAgICBhbm5veWluZy1fLXNlbGVjdG9yICdcblx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3RvcidcblxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3IgbmV3LXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ25ldy1zZWxlY3RvcicpXG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ3NvbWUtc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCdzb21lLXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3Igc29tZS1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCdwZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBzb21lLXNlbGVjdG9yIHBlcmlvZCdcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCcucGVyaW9kJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciBhbm5veWluZy1fLXNlbGVjdG9yIHNvbWUtc2VsZWN0b3IgcGVyaW9kJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlQ2xhc3MoJ2Fubm95aW5nLV8tc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIHNvbWUtc2VsZWN0b3IgcGVyaW9kJ1xuXG5cblx0XHR0ZXN0IFwiLnNldFJlZlwiLCAoKS0+XG5cdFx0XHRlbCA9IERPTS5kaXYocmVmOiduYW1lMScpXG5cdFx0XHRleHBlY3QoZWwucmVmKS50by5lcXVhbCAnbmFtZTEnXG5cdFx0XHRleHBlY3QoZWwub3B0aW9ucy5yZWYpLnRvLmVxdWFsICduYW1lMSdcblx0XHRcdGV4cGVjdChlbC5hdHRyICdkYXRhLXJlZicpLnRvLmVxdWFsICduYW1lMSdcblxuXHRcdFx0ZWwuc2V0UmVmICduYW1lMidcblx0XHRcdGV4cGVjdChlbC5yZWYpLnRvLmVxdWFsICduYW1lMidcblx0XHRcdGV4cGVjdChlbC5vcHRpb25zLnJlZikudG8uZXF1YWwgJ25hbWUyJ1xuXHRcdFx0ZXhwZWN0KGVsLmF0dHIgJ2RhdGEtcmVmJykudG8uZXF1YWwgJ25hbWUyJ1xuXG5cblxuXG5cdFx0dGVzdCBcIkFwcGVuZGluZy9wcmVwZW5kaW5nIGVsZW1lbnRzIHRvIGEgdGV4dCBub2RlIHNob3VsZCBkbyBub3RoaW5nXCIsICgpLT5cblx0XHRcdHRleHQgPSBEb20udGV4dCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0ZXh0LnRleHQpLnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KHRleHQucmF3LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgwKVxuXG5cdFx0XHR0ZXh0LmFwcGVuZChEb20udGV4dCgnZGVmJykpXG5cdFx0XHRleHBlY3QodGV4dC50ZXh0KS50by5lcXVhbCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0ZXh0LnJhdy5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMClcblxuXHRcdFx0dGV4dC5wcmVwZW5kKERvbS5kaXYobnVsbCwgJ2RlZicpKVxuXHRcdFx0ZXhwZWN0KHRleHQudGV4dCkudG8uZXF1YWwoJ2FiYzEyMycpXG5cdFx0XHRleHBlY3QodGV4dC5yYXcuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJzQ1NicpXG5cdFx0XHRkaXYuYXBwZW5kVG8odGV4dClcblx0XHRcdGV4cGVjdCh0ZXh0LnRleHQpLnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KHRleHQucmF3LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXG5cblxuXHRzdWl0ZSBcIkJhdGNoXCIsICgpLT5cblx0XHR0ZXN0IFwiRG9tLmJhdGNoKCkgdGFrZXMgYW4gaXRlcmFibGUgY29udGFpbmluZyBhbiBhcnJheSBvZiBlbGVtZW50cyBvciBRdWlja0RvbSBlbGVtZW50cyBhbmQgcmV2ZWFscyB0aGUgUXVpY2tFbGVtZW50IEFQSSB3aGljaCB3aWxsIGJlIGFwcGxpZWQgZm9yIGVhY2ggZWxlbWVudFwiLCAoKS0+XG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QiA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhkaXYpXG5cblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoc2FuZEJveCkoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShkaXYpKEEsIEIsIEMpXG5cblx0XHRcdERvbS5iYXRjaChbQSxCLENdKVxuXHRcdFx0XHQuYXBwZW5kVG8oc2FuZEJveClcblx0XHRcdFx0LnN0eWxlICdvcGFjaXR5JywgMC41XG5cdFx0XHRcdC5jc3Mge2hlaWdodDozMCwgYmFja2dyb3VuZENvbG9yOidwaW5rJ31cblx0XHRcdFx0LmFwcGVuZCAnU29tZSBJbm5lciBUZXh0J1xuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHNhbmRCb3gpKEEsIEIsIEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKGRpdikoKVxuXG5cdFx0XHRleHBlY3QoZ2V0Q29tcHV0ZWRTdHlsZShBLmVsKS5vcGFjaXR5KS50by5lcXVhbCgnMC41Jylcblx0XHRcdGV4cGVjdChnZXRDb21wdXRlZFN0eWxlKEMuZWwpLm9wYWNpdHkpLnRvLmVxdWFsKCcwLjUnKVxuXHRcdFx0ZXhwZWN0KGdldENvbXB1dGVkU3R5bGUoQi5lbCkuaGVpZ2h0KS50by5lcXVhbCgnMzBweCcpXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQy5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXS5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cblxuXHRcdHRlc3QgXCJJZiBhIHRydXRoeSB2YWx1ZSBpcyBwYXNzZWQgYXMgdGhlIDJuZCBhcmcgb2YgRG9tLmJhdGNoKCksIGFuIGFycmF5IHdpbGwgYmUgcmV0dXJuZWQgZm9yIHRoZSBmaXJzdCBtZXRob2QgaW52b2tlZCBjb250YWluaW5nIHRoZSByZXN1bHQgZm9yIGVhY2ggZWxlbWVudCBwcm92aWRlZFwiLCAoKS0+XG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRCb3gpXG5cdFx0XHRCID0gRG9tLnNlY3Rpb24oKS5hcHBlbmRUbyhzYW5kQm94KVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kQm94KVxuXG5cdFx0XHRiYXRjaDEgPSBEb20uYmF0Y2goW0EsQixDXSlcblx0XHRcdGJhdGNoMiA9IERvbS5iYXRjaChbQSxCLENdLCB0cnVlKVxuXG5cdFx0XHRleHBlY3QoYmF0Y2gxLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbChiYXRjaDEpXG5cdFx0XHRleHBlY3QoYmF0Y2gxLnN0eWxlKCd3aWR0aCcsIDQ3KSkudG8uZXF1YWwoYmF0Y2gxKVxuXHRcdFx0ZXhwZWN0KGJhdGNoMi5zdHlsZSgnd2lkdGgnKSkudG8uZXFsKFsnNDdweCcsICc0N3B4JywgJzQ3cHgnXSlcblx0XHRcdGV4cGVjdChiYXRjaDIuc3R5bGUoJ3dpZHRoJywgMzMpKS50by5lcWwoW0EsQixDXSlcblx0XHRcdGV4cGVjdChiYXRjaDIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxbChbJzMzcHgnLCAnMzNweCcsICczM3B4J10pXG5cblxuXHRcdHRlc3QgXCJJZiB0aGUgLnJldHVybigpIG1ldGhvZCBpcyBpbnZva2VkIG9uIHRoZSBiYXRjaCBpbnN0YW5jZSwgaXQgd2lsbCByZXR1cm4gdGhlIHJlc3VsdCBzZXQgZnJvbSB0aGUgbGFzdCBtZXRob2QgaW52b2NhdGlvblwiLCAoKS0+XG5cdFx0XHRzYW5kQm94ID0gRG9tKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QiA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhkaXYpXG5cdFx0XHRcblx0XHRcdHJlc3VsdCA9IERvbS5iYXRjaChbQSxCLENdKVxuXHRcdFx0XHQuYXBwZW5kVG8oc2FuZEJveClcblx0XHRcdFx0LnN0eWxlICdvcGFjaXR5JywgMC41XG5cdFx0XHRcdC5jc3Mge2hlaWdodDozMCwgYmFja2dyb3VuZENvbG9yOidwaW5rJ31cblx0XHRcdFx0LmFwcGVuZCAnU29tZSBJbm5lciBUZXh0J1xuXHRcdFx0XHQuc3R5bGUgJ29wYWNpdHknXG5cdFx0XHRcdC5yZXR1cm4oKVxuXG5cdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwgWycwLjUnLCcwLjUnLCcwLjUnXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChbQSxCLENdKS5jc3MoJ3dpZHRoJywgJzM4cHgnKS5jc3MoJ3dpZHRoJykucmV0dXJuKCkpLnRvLmVxbCBbJzM4cHgnLCczOHB4JywnMzhweCddXG5cblxuXHRcdHRlc3QgXCJJZiB0aGUgLnJldHVybigpIG1ldGhvZCBpcyBpbnZva2VkIHdpdGggYSB0cnV0aHkgYXJndW1lbnQsIGl0IHdpbGwgY2F1c2UgdGhlIG5leHQgbWV0aG9kIGludm9jYXRpb24gdG8gcmV0dXJuIHRoZSByZXN1bHRzIG9mIHRoZSBpbnZvY2F0aW9uIGZvciBlYWNoIGVsZW1lbnQgcHJvdmlkZWRcIiwgKCktPlxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEIgPSBEb20uc2VjdGlvbigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0XG5cdFx0XHRyZXN1bHQgPSBEb20uYmF0Y2goW0EsQixDXSlcblx0XHRcdFx0LmFwcGVuZFRvKHNhbmRCb3gpXG5cdFx0XHRcdC5zdHlsZSAnb3BhY2l0eScsIDAuNVxuXHRcdFx0XHQuY3NzIHtoZWlnaHQ6MzAsIGJhY2tncm91bmRDb2xvcjoncGluayd9XG5cdFx0XHRcdC5hcHBlbmQgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdFx0LnJldHVybih0cnVlKVxuXHRcdFx0XHQuc3R5bGUgJ29wYWNpdHknXG5cblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvLmVxbCBbJzAuNScsJzAuNScsJzAuNSddXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKFtBLEIsQ10pLmNzcygnd2lkdGgnLCAnMzhweCcpLmNzcygnaGVpZ2h0JywgJzI4cHgnKS5yZXR1cm4odHJ1ZSkuY3NzKCd3aWR0aCcpKS50by5lcWwgWyczOHB4JywnMzhweCcsJzM4cHgnXVxuXG5cblx0XHR0ZXN0IFwiSW52b2tpbmcgdGhlIC5yZXZlcnNlKCkgbWV0aG9kIG9uIHRoZSBiYXRjaCBpbnN0YW5jZSB3aWxsIHJldmVyc2UgdGhlIGVsZW1lbnRzIGFycmF5IGluIHRoZSBiYXRjaCBhbmQgdGh1cyB0aGUgZXhlY3V0aW9uIG9yZGVyXCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KG51bGwsICdBQUEnKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QiA9IERvbS5kaXYobnVsbCwgJ0JCQicpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRDID0gRG9tLmRpdihudWxsLCAnQ0NDJykuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFyciA9IFtBLEIsQ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyKS5lbGVtZW50cykubm90LnRvLmVxdWFsKGFycilcblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyKS5lbGVtZW50cykudG8uZXFsIFtBLEIsQ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyKS5yZXZlcnNlKCkuZWxlbWVudHMpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFyciwxKS50ZXh0KCkpLnRvLmVxbCBbJ0FBQScsJ0JCQicsJ0NDQyddXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFyciwxKS5yZXZlcnNlKCkudGV4dCgpKS50by5lcWwgWydDQ0MnLCdCQkInLCdBQUEnXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChhcnIsMSkucmV2ZXJzZSgpLnRleHQoKSkudG8uZXFsIFsnQ0NDJywnQkJCJywnQUFBJ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyLDEpLnJldmVyc2UoKS5yZXZlcnNlKCkudGV4dCgpKS50by5lcWwgWydBQUEnLCdCQkInLCdDQ0MnXVxuXG5cblx0XHR0ZXN0IFwiQmF0Y2gudGV4dC8uaHRtbCBhcmUgbWV0aG9kcyBpbnN0ZWFkIG9mIGdldHRlcnMvc2V0dGVyc1wiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdihudWxsLCAnVGhlIGRpdkEnKVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYobnVsbCwgJ1RoZSBkaXZCJylcblx0XHRcdGJhdGNoID0gRG9tLmJhdGNoKFtkaXZBLCBkaXZCXSwgdHJ1ZSlcblxuXHRcdFx0ZXhwZWN0KGJhdGNoLmh0bWwoKSkudG8uZXFsIFsnVGhlIGRpdkEnLCAnVGhlIGRpdkInXVxuXHRcdFx0ZXhwZWN0KGJhdGNoLnRleHQoKSkudG8uZXFsIFsnVGhlIGRpdkEnLCAnVGhlIGRpdkInXVxuXHRcdFx0XG5cdFx0XHRiYXRjaC5odG1sKCc8c3Bhbj5UaGUgZGl2PC9zcGFuPicpXG5cdFx0XHRleHBlY3QoYmF0Y2guaHRtbCgpKS50by5lcWwgWyc8c3Bhbj5UaGUgZGl2PC9zcGFuPicsICc8c3Bhbj5UaGUgZGl2PC9zcGFuPiddXG5cdFx0XHRleHBlY3QoYmF0Y2gudGV4dCgpKS50by5lcWwgWydUaGUgZGl2JywgJ1RoZSBkaXYnXVxuXG5cdFx0XHRiYXRjaC50ZXh0KCdUSEUgRElWJylcblx0XHRcdGV4cGVjdChiYXRjaC5odG1sKCkpLnRvLmVxbCBbJ1RIRSBESVYnLCAnVEhFIERJViddXG5cdFx0XHRleHBlY3QoYmF0Y2gudGV4dCgpKS50by5lcWwgWydUSEUgRElWJywgJ1RIRSBESVYnXVxuXG5cblxuXHRzdWl0ZSBcIlRlbXBsYXRlc1wiLCAoKS0+XG5cdFx0dGVzdCBcIkEgcmV1c2FibGUgdGVtcGxhdGUgY2FuIGJlIGdlbmVyYXRlZCB2aWEgUXVpY2tEb20udGVtcGxhdGUoKVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShbJ3NwYW4nLCBpZDondGhlU3BhbiddKVxuXG5cdFx0XHRleHBlY3QodHlwZW9mIHRlbXBsYXRlKS50by5lcXVhbCgnb2JqZWN0Jylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS50eXBlKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucykudG8uZXFsKGlkOid0aGVTcGFuJylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlbikudG8uZXFsKFtdKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSB0dXJuZWQgaW50byBRdWlja0RvbSBpbnN0YW5jZXMgdmlhIHRlbXBsYXRlLnNwYXduKCkgb3IgYnkgcGFzc2luZyBhcyBhcmcgdG8gUXVpY2tEb21cIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoWydkaXYnLCBjbGFzc05hbWU6J3NvbWUtZGl2JywgJ1NvbWUgSW5uZXIgVGV4dCddKVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0c3Bhd25BLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRzcGF3bkIgPSBEb20odGVtcGxhdGUpXG5cblx0XHRcdGV4cGVjdChzcGF3bkEuZWwpLnRvLmJlLmluc3RhbmNlT2YoSFRNTERpdkVsZW1lbnQpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsKS50by5iZS5pbnN0YW5jZU9mKEhUTUxEaXZFbGVtZW50KVxuXHRcdFx0ZXhwZWN0KHNwYXduQSkubm90LnRvLmVxdWFsKHNwYXduQilcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwpLm5vdC50by5lcXVhbChzcGF3bkIuZWwpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChzcGF3bkIuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtZGl2JylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gYmUgY3JlYXRlZCBmcm9tIFF1aWNrRWxlbWVudCBpbnN0YW5jZXNcIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9IERvbS5zZWN0aW9uKGNsYXNzTmFtZTonc2luZ2xlU2VjdGlvbicsICdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0c2VjdGlvbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gc2VjdGlvbi50b1RlbXBsYXRlKClcblx0XHRcdHRlbXBsYXRlU3Bhd24gPSBzZWN0aW9uVGVtcGxhdGUuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3Qoc2VjdGlvblRlbXBsYXRlKS5ub3QudG8uZXF1YWwoc2VjdGlvbilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLmVsKS5ub3QudG8uZXF1YWwoc2VjdGlvbi5lbClcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NpbmdsZVNlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlU3Bhd24udGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSBjcmVhdGVkIGZyb20gRE9NIEVsZW1lbnRzXCIsICgpLT5cblx0XHRcdHNlY3Rpb25FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKVxuXHRcdFx0c2VjdGlvbkVsLmNsYXNzTmFtZSA9ICdzaW5nbGVTZWN0aW9uJ1xuXHRcdFx0c2VjdGlvbkVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlICdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKHNlY3Rpb25FbClcblx0XHRcdHRlbXBsYXRlU3Bhd24gPSBzZWN0aW9uVGVtcGxhdGUuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5lbCkubm90LnRvLmVxdWFsKHNlY3Rpb25FbClcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NpbmdsZVNlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlU3Bhd24udGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZXMgY2FuIGJlIGV4dGVuZGVkIHZpYSB0ZW1wbGF0ZS5leHRlbmRcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoWydkaXYnLCBjbGFzc05hbWU6J3NvbWUtZGl2JywgJ1NvbWUgSW5uZXIgVGV4dCddKVxuXHRcdFx0dGVtcGxhdGVDb3B5QSA9IHRlbXBsYXRlLmV4dGVuZCB7dHlwZTonc3BhbicsIG9wdGlvbnM6e2NsYXNzTmFtZTonc29tZS1zcGFuJ30sIGNoaWxkcmVuOltdfVxuXHRcdFx0dGVtcGxhdGVDb3B5QiA9IHRlbXBsYXRlLmV4dGVuZCB7b3B0aW9uczp7aWQ6J3RoZU1haW5EaXYnfSwgY2hpbGRyZW46WydUaGUgT3RoZXIgSW5uZXIgVGV4dCddfVxuXHRcdFx0dGVtcGxhdGVDb3B5QyA9IHRlbXBsYXRlLmV4dGVuZChcblx0XHRcdFx0WydzZWN0aW9uJ1xuXHRcdFx0XHRcdGNsYXNzTmFtZTonc29tZS1zZWN0aW9uJ1xuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgJ1ZlcnkgJ11cblx0XHRcdFx0XHRbJ2RpdicsIG51bGxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtzdHlsZTpmb250V2VpZ2h0OjUwMH0sJ05lc3RlZCAnXVxuXHRcdFx0XHRcdFx0J0lubmVyIFRleHQnXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHlBKS5ub3QudG8uZXF1YWwodGVtcGxhdGUpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5Qikubm90LnRvLmVxdWFsKHRlbXBsYXRlKVxuXHRcdFx0c3Bhd24gPSB0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUNvcHlBLnNwYXduKClcblx0XHRcdHNwYXduQiA9IHRlbXBsYXRlQ29weUIuc3Bhd24oKVxuXHRcdFx0c3Bhd25DID0gdGVtcGxhdGVDb3B5Qy5zcGF3bigpXG5cblx0XHRcdGV4cGVjdChzcGF3bi5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdzb21lLWRpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduLnRleHQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1zcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS50ZXh0KS50by5lcXVhbCgnU29tZSBJbm5lciBUZXh0JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1kaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5pZCkudG8uZXF1YWwoJ3RoZU1haW5EaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi50ZXh0KS50by5lcXVhbCgnVGhlIE90aGVyIElubmVyIFRleHQnKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25DLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bkMuZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1zZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bkMuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQy50ZXh0KS50by5lcXVhbCgnVmVyeSBOZXN0ZWQgSW5uZXIgVGV4dCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZXMgY2FuIGJlIHNwYXduZWQgdmlhIGV4dGVuZGVkIGNvbmZpZyBieSBwYXNzaW5nIGEgbmV3IGNvbmZpZyBvYmplY3QgdG8gdGVtcGxhdGUuc3Bhd24oKVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCBjbGFzc05hbWU6J3NvbWUtZGl2Jyxcblx0XHRcdFx0XHQnU29tZSBJbm5lciBUZXh0Jyxcblx0XHRcdFx0XHRbJ3N0cm9uZycsIHtjbGFzc05hbWU6J2hpZ2hsaWdodGVkJywgc3R5bGU6e29wYWNpdHk6MC45fX0sICcgLSBCb2xkZWQgVGV4dCddXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdHNwYXduUmF3ID0gdGVtcGxhdGUuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGUuc3Bhd24odHlwZTonc2VjdGlvbicsIG9wdGlvbnM6e2NsYXNzTmFtZTonc29tZS1zZWN0aW9uJywgc3R5bGU6e29wYWNpdHk6MC43fX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bkIgPSB0ZW1wbGF0ZS5zcGF3bihcblx0XHRcdFx0b3B0aW9uczpcblx0XHRcdFx0XHRjbGFzc05hbWU6ICdtYWluLWRpdidcblx0XHRcdFx0XHRpZDogJ3RoZU1haW5EaXYnXG5cdFx0XHRcdFx0c3R5bGU6IG9wYWNpdHk6IDAuNVxuXHRcdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6ICdzcGFuJ1xuXHRcdFx0XHRcdFx0Y2hpbGRyZW46IFtcblx0XHRcdFx0XHRcdFx0dHlwZTondGV4dCdcblx0XHRcdFx0XHRcdFx0b3B0aW9uczoge3RleHQ6ICdNYWluIElubmVyIFRleHQnfVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnYidcblx0XHRcdFx0XHRcdG9wdGlvbnM6XG5cdFx0XHRcdFx0XHRcdGNsYXNzTmFtZTogJ3N1cGVyLWhpZ2hsaWdodGVkJ1xuXHRcdFx0XHRcdFx0XHRzdHlsZTogb3BhY2l0eTogJzAuMidcblx0XHRcdFx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnM6IHt0ZXh0OiAnIC0gVmVyeSBCb2xkZWQgVGV4dCd9XG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6ICd0ZXh0J1xuXHRcdFx0XHRcdFx0b3B0aW9uczoge3RleHQ6ICcgKyBPdGhlciBUZXh0J31cblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5pZCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcudGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCAtIEJvbGRlZCBUZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbCkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsJzEnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUpLnRvLmVxdWFsKCcjdGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcuZWwuY2hpbGROb2Rlc1sxXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3Ryb25nJylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5jaGlsZE5vZGVzWzFdLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnaGlnaGxpZ2h0ZWQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXNbMV0pLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnMC45JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnc29tZS1zZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS50ZXh0KS50by5lcXVhbCgnU29tZSBJbm5lciBUZXh0IC0gQm9sZGVkIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbCkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsJzAuNycpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lKS50by5lcXVhbCgnI3RleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzFdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzdHJvbmcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzFdLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnaGlnaGxpZ2h0ZWQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzWzFdKS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJzAuOScpXG5cblx0XHRcdGV4cGVjdChzcGF3bkIuZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnbWFpbi1kaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5pZCkudG8uZXF1YWwoJ3RoZU1haW5EaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi50ZXh0KS50by5lcXVhbCgnTWFpbiBJbm5lciBUZXh0IC0gVmVyeSBCb2xkZWQgVGV4dCArIE90aGVyIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbCkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsJzAuNScpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2hpbGROb2Rlc1sxXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnYicpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXNbMV0uY2xhc3NOYW1lKS50by5pbmNsdWRlKCdzdXBlci1oaWdobGlnaHRlZCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXNbMV0pLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnMC4yJylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlLmV4dGVuZC9zcGF3bigpIGNhbiBhY2NlcHQgYSB0ZW1wbGF0ZSB0cmVlIGFycmF5XCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnZGl2Jywgc3R5bGU6eydvcGFjaXR5JzowLjV9LCBbJ3NwYW4nLCBudWxsLCAndGV4dCBvZiBzcGFuJ10sIFsnZGl2JywgbnVsbCwgJ3RleHQgb2YgZGl2J11dXG5cdFx0XHRjbG9uZUEgPSB0ZW1wbGF0ZS5leHRlbmQoWydzZWN0aW9uJywgc3R5bGU6eydvcGFjaXR5JzowLjh9XSlcblx0XHRcdGNsb25lQiA9IHRlbXBsYXRlLmV4dGVuZChbJ3NwYW4nLCBudWxsLCBbJ2RpdiddXSlcblx0XHRcdGNsb25lQyA9IHRlbXBsYXRlLmV4dGVuZChbJ3NlY3Rpb24nLCB7Y2xhc3NOYW1lOid0aGUtc2VjdGlvbicsIHN0eWxlOntjb2xvcjonYmx1ZSd9fSwgWydzZWN0aW9uJywgbnVsbCwgJ3RleHQgb2Ygc3Vic2VjdGlvbiddLCAnanVzdCBhIHRleHQgbm9kZSddKVxuXHRcdFx0c3Bhd24gPSB0ZW1wbGF0ZS5zcGF3bihbJ3NwYW4nLCBzdHlsZTp7J3dpZHRoJzoxOTAsICdvcGFjaXR5JzowLjR9LCAnc28gbmljZSddKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGUudHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5vcHRpb25zKS50by5lcWwge3N0eWxlOnsnb3BhY2l0eSc6MC41fX1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIHNwYW4nXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIGRpdidcblxuXHRcdFx0ZXhwZWN0KGNsb25lQS50eXBlKS50by5lcXVhbCAnc2VjdGlvbidcblx0XHRcdGV4cGVjdChjbG9uZUEub3B0aW9ucykudG8uZXFsIHtzdHlsZTp7J29wYWNpdHknOjAuOH19XG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNsb25lQS5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ3RleHQgb2Ygc3Bhbidcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMV0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ3RleHQgb2YgZGl2J1xuXG5cdFx0XHRleHBlY3QoY2xvbmVCLnR5cGUpLnRvLmVxdWFsICdzcGFuJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQi5vcHRpb25zKS50by5lcWwge3N0eWxlOnsnb3BhY2l0eSc6MC41fX1cblx0XHRcdGV4cGVjdChjbG9uZUIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblswXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIHNwYW4nXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuWzFdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblsxXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIGRpdidcblxuXHRcdFx0ZXhwZWN0KGNsb25lQy50eXBlKS50by5lcXVhbCAnc2VjdGlvbidcblx0XHRcdGV4cGVjdChjbG9uZUMub3B0aW9ucykudG8uZXFsIHtjbGFzc05hbWU6J3RoZS1zZWN0aW9uJywgc3R5bGU6eydvcGFjaXR5JzowLjUsICdjb2xvcic6J2JsdWUnfX1cblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2xvbmVDLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsICdzZWN0aW9uJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQy5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAndGV4dCBvZiBzdWJzZWN0aW9uJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQy5jaGlsZHJlblsxXS50eXBlKS50by5lcXVhbCAndGV4dCdcblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW5bMV0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAnanVzdCBhIHRleHQgbm9kZSdcblxuXHRcdFx0c3Bhd24uc3R5bGUgJ2Rpc3BsYXknLCAnYmxvY2snXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwpLnRvLmhhdmUuc3R5bGUgJ29wYWNpdHknLCAnMC40J1xuXHRcdFx0ZXhwZWN0KHNwYXduLmVsKS50by5oYXZlLnN0eWxlICd3aWR0aCcsICcxOTBweCdcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KHNwYXduLmVsLmNoaWxkTm9kZXNbMF0ubm9kZVR5cGUpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50KS50by5lcXVhbCAnc28gbmljZSdcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzWzFdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuY2hpbGROb2Rlc1sxXS50ZXh0Q29udGVudCkudG8uZXF1YWwgJ3RleHQgb2YgZGl2J1xuXG5cdFx0XHQjIGV4cGVjdCAoKS0+XG5cdFx0XHQjIFx0RG9tLnRlbXBsYXRlKFsnZGl2J10pLmV4dGVuZChbJ3NwYW4nLCBudWxsLCBbJ2RpdicsIG51bGwsIFsnc2VjdGlvbiddXV0pXG5cdFx0XHQjIC5ub3QudG8udGhyb3coKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGUuZXh0ZW5kL3NwYXduKCkgY2FuIGFjY2VwdCBvdGhlciB0ZW1wbGF0ZSBpbnN0YW5jZXMgYXMgY2hpbGRyZW4gd2hpY2ggd2lsbCByZXBsYWNlIGV4aXN0aW5nIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnZGl2JywgbnVsbCwgWydzcGFuJywge3N0eWxlOm9wYWNpdHk6MC41fV0sICdvcmlnaW5hbCB0ZXh0J11cblx0XHRcdGNoaWxkQSA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIHtzdHlsZTpmb250RmFtaWx5OidwaW5rJ31dXG5cdFx0XHRjaGlsZEIgPSBEb20udGVtcGxhdGUgJ3JlcGxhY2VkIHRleHQnXG5cdFx0XHRjaGlsZEMgPSBEb20udGVtcGxhdGUgWydzZWN0aW9uJ11cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlLmV4dGVuZChbJ3NwYW4nLCB7c3R5bGU6Zm9udFNpemU6Jzc3cHgnfSwgY2hpbGRBLCBjaGlsZEIsIGNoaWxkQ10pXG5cdFx0XHRzcGF3bmVkQSA9IHRlbXBsYXRlLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduZWRCID0gdGVtcGxhdGVDb3B5LnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduZWRDID0gdGVtcGxhdGUuc3Bhd24oWydzcGFuJywge3N0eWxlOmZvbnRTaXplOic3N3B4J30sIGNoaWxkQSwgY2hpbGRCLCBjaGlsZENdKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEudHlwZSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRBLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnMC41Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ2ZvbnRGYW1pbHknLCAnJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblsxXS50eXBlKS50by5lcXVhbCgndGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEudGV4dCkudG8uZXF1YWwoJ29yaWdpbmFsIHRleHQnKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIudHlwZSkudG8uZXF1YWwoJ3NwYW4nKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCAnJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblswXS5yYXcpLnRvLmhhdmUuc3R5bGUoJ2ZvbnRGYW1pbHknLCAncGluaycpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwoJ3RleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLnRleHQpLnRvLmVxdWFsKCdyZXBsYWNlZCB0ZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlblsyXS50eXBlKS50by5lcXVhbCgnc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIucmF3KS50by5oYXZlLnN0eWxlKCdmb250U2l6ZScsICc3N3B4JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLnR5cGUpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQy5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJycpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdmb250RmFtaWx5JywgJ3BpbmsnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsKCd0ZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQy50ZXh0KS50by5lcXVhbCgncmVwbGFjZWQgdGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW5bMl0udHlwZSkudG8uZXF1YWwoJ3NlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLnJhdykudG8uaGF2ZS5zdHlsZSgnZm9udFNpemUnLCAnNzdweCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZS5leHRlbmQvc3Bhd24oKSB3aWxsIGNvbnNpZGVyIHRoZSBwYXNzZWQgb2JqZWN0IGFzIHRoZSBvcHRpb25zIG9iamVjdCBpZiBpdCBkb2Vzbid0IGNvbnRhaW4gdGVtcGxhdGUtcmVsYXRlZCBwcm9wc1wiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0ZGVmYXVsdHM6IHRleHQ6ICdkZWZhdWx0J1xuXHRcdFx0XHRcdGNvbXB1dGVyczogdGV4dDogKHRleHQpLT4gQHRleHQgPSB0ZXh0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0WydzcGFuJywgcmVmOid0aGVTcGFuJ11cblx0XHRcdFx0XVxuXHRcdFx0KVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucy5zdHlsZSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucy5sYWJlbCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuZXh0ZW5kKG9wdGlvbnM6bGFiZWw6J2FiYzEyMycpLm9wdGlvbnMubGFiZWwpLnRvLmVxdWFsICdhYmMxMjMnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuZXh0ZW5kKGxhYmVsOidkZWY0NTYnKS5vcHRpb25zLmxhYmVsKS50by5lcXVhbCAnZGVmNDU2J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmV4dGVuZChzdHlsZTonZGVmNDU2Jykub3B0aW9ucy5zdHlsZSkudG8uZXF1YWwgJ2RlZjQ1Nidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5leHRlbmQoc3R5bGU6J2RlZjQ1NicsIHR5cGU6J3NlY3Rpb24nKS5vcHRpb25zLnN0eWxlKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5leHRlbmQoY2hpbGRyZW46dGhlU3BhbjpzdHlsZTonZ2hpNzg5JykuY2hpbGQudGhlU3Bhbi5vcHRpb25zLnN0eWxlKS50by5lcXVhbCAnZ2hpNzg5J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmV4dGVuZChjaGlsZHJlbjpbZGVmYXVsdHM6J2doaTc4OSddKS5jaGlsZC50aGVTcGFuLm9wdGlvbnMuZGVmYXVsdHMpLnRvLmVxdWFsICdnaGk3ODknXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuc3Bhd24oY2hpbGRyZW46dGhlU3BhbjpjbGFzc05hbWU6J0dISTc4OScpLmNoaWxkLnRoZVNwYW4ucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ0dISTc4OSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5zcGF3bigpLnRleHQpLnRvLmVxdWFsICdkZWZhdWx0J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLnNwYXduKGRlZmF1bHRzOnRleHQ6J2RpZmYnKS50ZXh0KS50by5lcXVhbCAnZGlmZidcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gaGF2ZSBvdGhlciB0ZW1wbGF0ZXMgYXMgdGhlaXIgY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0aGVhZGVyVGVtcGxhdGUgPSBEb20udGVtcGxhdGUgWydoZWFkZXInLCB7c3R5bGU6J2hlaWdodCc6JzIwMHB4J30sXG5cdFx0XHRcdFsnc3BhbicsIHtzdHlsZTondGV4dEFsaWduJzonY2VudGVyJ30sICdUaGlzIGlzIGJvbGRlZCB0ZXh0J11cblx0XHRcdFx0JyB3aGlsZSB0aGlzIGlzIG5vdCdcblx0XHRcdF1cblx0XHRcdGhlYWRlclRlbXBsYXRlQ2xvbmUgPSBEb20udGVtcGxhdGUoaGVhZGVyVGVtcGxhdGUpXG5cdFx0XHRzZWN0aW9uVGVtcGxhdGUgPSBEb20udGVtcGxhdGUgWydzZWN0aW9uJywgbnVsbCwgaGVhZGVyVGVtcGxhdGVdXG5cdFx0XHRzZWN0aW9uID0gc2VjdGlvblRlbXBsYXRlLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KGhlYWRlclRlbXBsYXRlQ2xvbmUpLnRvLmVxdWFsKGhlYWRlclRlbXBsYXRlKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25UZW1wbGF0ZS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvblRlbXBsYXRlLmNoaWxkcmVuWzBdKS50by5lcXVhbChoZWFkZXJUZW1wbGF0ZSlcblx0XHRcdGV4cGVjdChzZWN0aW9uVGVtcGxhdGUuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwoJ2hlYWRlcicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi50ZXh0KS50by5lcXVhbCgnVGhpcyBpcyBib2xkZWQgdGV4dCB3aGlsZSB0aGlzIGlzIG5vdCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlblswXS5zdHlsZSgndGV4dEFsaWduJykpLnRvLmVxdWFsKCdjZW50ZXInKVxuXG5cblx0XHR0ZXN0IFwiQSBnbG9iYWwgb3B0aW9ucyBvYmplY3QgY2FuIGJlIHBhc3NlZCBhcyB0aGUgMm5kIGFyZyB0byB0ZW1wbGF0ZS5leHRlbmQvc3Bhd24oKSB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gYWxsIHRlbXBsYXRlcywgc3Bhd25zLCAmIHRoZWlyIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdG9iaiA9IG15SGVpZ2h0OicxNTBweCdcblx0XHRcdG9iai5vYmogPSBvYmpcblx0XHRcdGR5bmFtaWNIZWlnaHRTdHlsZSA9ICdoZWlnaHQnOiAocmVsYXRlZCktPiBleHBlY3QocmVsYXRlZCkudG8uZXF1YWwob2JqKTsgcmVsYXRlZC5teUhlaWdodFxuXHRcdFx0XG5cdFx0XHRoZWFkZXJUZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZSBbJ2hlYWRlcicsIHtzdHlsZTond2lkdGgnOicyM3B4J30sXG5cdFx0XHRcdFsnZGl2Jywge3N0eWxlOid3aWR0aCc6JzIzcHgnfSwgJ1RoaXMgaXMgYm9sZGVkIHRleHQnXVxuXHRcdFx0XHQnIHdoaWxlIHRoaXMgaXMgbm90J1xuXHRcdFx0XVxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnc2VjdGlvbicsIHtzdHlsZTond2lkdGgnOicyM3B4J30sIGhlYWRlclRlbXBsYXRlXVxuXHRcdFx0c2VjdGlvbiA9IHNlY3Rpb25UZW1wbGF0ZS5zcGF3bih7b3B0aW9uczp7cmVsYXRlZDp3aW5kb3d9fSwge3JlbGF0ZWQ6b2JqLCBzdHlsZTpkeW5hbWljSGVpZ2h0U3R5bGV9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5yYXcuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTUwcHgnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0ucmF3LnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE1MHB4Jylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnJhdy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNTBweCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5yYXcuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0ucmF3LnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLnJhdy5zdHlsZS53aWR0aCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCgnaGVhZGVyJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChzZWN0aW9uLnRleHQpLnRvLmVxdWFsKCdUaGlzIGlzIGJvbGRlZCB0ZXh0IHdoaWxlIHRoaXMgaXMgbm90JylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlIGNoaWxkcmVuIGNhbiBiZSBuYXZpZ2F0ZWQgYnkgcmVmIHVzaW5nIHRoZSAuY2hpbGQgcHJvcGVydHlcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBcblx0XHRcdFx0RG9tLnRlbXBsYXRlIFsnZGl2Jywge2lkOidkaXZBJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzInLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiB0ZW1wbGF0ZS5jaGlsZCkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyh0ZW1wbGF0ZS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCg2KVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmRpdkEpLnRvLmVxdWFsIHRlbXBsYXRlXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGQuY2hpbGRBLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGQuY2hpbGRBKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQV8yKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblswXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbCB0ZW1wbGF0ZS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXG5cdFx0XHRyZW5kZXJlZCA9IHRlbXBsYXRlLnNwYXduKClcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgcmVuZGVyZWQuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdChyZW5kZXJlZC50ZXh0KS50by5lcXVhbCgnVGhlIFRleHQnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGUncyBjaGlsZHJlbiBjYW4gYmUgZXh0ZW5kL3NwYXduZWQgd2l0aCBhIHtyZWY6bmV3Q2hpbGR9IG1hcCBpbnN0ZWFkIG9mIGEgcG9zaXRpb25hbCBhcnJheVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZU1haW4gPSBcblx0XHRcdFx0RG9tLnRlbXBsYXRlIFsnZGl2Jywge2lkOidkaXZBJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzInLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlTWFpbi5leHRlbmQgWydzZWN0aW9uJywgbnVsbCwgXG5cdFx0XHRcdGNoaWxkQTpcblx0XHRcdFx0XHR0eXBlOiAnZm9ybSdcblx0XHRcdFx0XHRvcHRpb25zOlxuXHRcdFx0XHRcdFx0c3R5bGU6IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG5cdFx0XHRcdGNoaWxkQV8yOlxuXHRcdFx0XHRcdFsnYScsIHtpZDonQ0hJTERhXzInLCBocmVmOidodHRwOi8vZ29vZ2xlLmNvbSd9LFxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge3JlZjonY2hpbGRBXzJfMScsIHRleHQ6J05ldyBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRjaGlsZEM6XG5cdFx0XHRcdFx0WydkaXYnLCByZWY6J2NoaWxkRCddXG5cdFx0XHRdLCB7dmFsdWU6J3RoZVZhbHVlJ31cblx0XHRcdFxuXHRcdFx0dGVtcGxhdGVDb3B5MiA9IHRlbXBsYXRlTWFpbi5leHRlbmQgY2hpbGRyZW46XG5cdFx0XHRcdGNoaWxkQTpcblx0XHRcdFx0XHRjaGlsZHJlbjogbmV3Q2hpbGQ6IFsnZGl2J11cblx0XHRcdFx0Y2hpbGRBXzI6XG5cdFx0XHRcdFx0WydhJywge2lkOidDSElMRGFfMicsIGhyZWY6J2h0dHA6Ly9nb29nbGUuY29tJ30sXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7cmVmOidjaGlsZEFfMl8xJywgdGV4dDonTmV3IFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdGNoaWxkQzpcblx0XHRcdFx0XHRbJ2RpdicsIHJlZjonY2hpbGREJ11cblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiB0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMSkubm90LnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDYpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDgpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuZGl2QSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5XG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZm9ybSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMikudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLkNISUxEYV8yKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yXzEub3B0aW9ucy50ZXh0KS50by5lcXVhbCAnTmV3IFRleHQnXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEQpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsyXVxuXG5cdFx0XHRyZW5kZXJlZCA9IHRlbXBsYXRlQ29weS5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMocmVuZGVyZWQuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoOClcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgcmVuZGVyZWQuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEEucmF3KS50by5oYXZlLnN0eWxlICdkaXNwbGF5JywgJ2lubGluZS1ibG9jaydcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5DSElMRGFfMi5wcm9wKCdocmVmJykpLnRvLmNvbnRhaW4gJ2h0dHA6Ly9nb29nbGUuY29tJ1xuXHRcdFx0ZXhwZWN0KHJlbmRlcmVkLmNoaWxkLmNoaWxkQl8xLnByb3AoJ3ZhbHVlJykpLnRvLmVxdWFsKCd0aGVWYWx1ZScpXG5cdFx0XHRleHBlY3QocmVuZGVyZWQuY2hpbGQuY2hpbGRELmF0dHIoJ2RhdGEtcmVmJykpLnRvLmVxdWFsKCdjaGlsZEQnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSBwYXNzZWQgYXMgcmVwbGFjZW1lbnQvbmV3IGNoaWxkcmVuIGluIHtyZWY6bmV3Q2hpbGR9IGV4dGVuc2lvbiBtYXBzXCIsICgpLT5cblx0XHRcdGNoaWxkQSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0WydkaXYnLCB7cmVmOidjaGlsZEFfMicsIGlkOidjaGlsZEFfMid9XVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cdFx0XHRjaGlsZEIgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2JywgcmVmOidjaGlsZEInLCBcblx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdFsndGV4dCcsIHtpZDonY2hpbGRCXzInLCB0ZXh0OidUaGUgVGV4dCd9XVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cdFx0XHRjaGlsZEMgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge2lkOidjaGlsZEMnfSwgXG5cdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRDXzEnfV1cblx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQ18yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0dGVtcGxhdGVNYWluID0gXG5cdFx0XHRcdERvbS50ZW1wbGF0ZSBbJ2RpdicsIHtpZDonZGl2QSd9LFxuXHRcdFx0XHRcdGNoaWxkQSxcblx0XHRcdFx0XHRjaGlsZEJcblx0XHRcdFx0XVxuXHRcdFx0dGVtcGxhdGVDb3B5ID0gdGVtcGxhdGVNYWluLmV4dGVuZCBbJ3NlY3Rpb24nLCBudWxsLCBcblx0XHRcdFx0Y2hpbGRBOiB0eXBlOiAnZm9ybSdcblx0XHRcdFx0Y2hpbGRCOiBjaGlsZEIuZXh0ZW5kKHJlZjonQ2hpbGRCJylcblx0XHRcdFx0Y2hpbGRDOiBjaGlsZEMuZXh0ZW5kKHJlZjonQ2hpbGRDJylcblx0XHRcdF0sIHt2YWx1ZTondGhlVmFsdWUnfVxuXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDcpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDEwKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlTWFpbi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuZGl2QSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5XG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZm9ybSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuQ2hpbGRCKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsxXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVNYWluLmNoaWxkLmNoaWxkQykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLkNoaWxkQykudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzJdXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLnNwYXduKCkuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoNylcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyh0ZW1wbGF0ZUNvcHkuc3Bhd24oKS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCgxMClcblxuXG5cdFx0dGVzdCBcInJlZi1jaGlsZHJlbiBtYXBzIHNob3VsZG4ndCBiZSBtb2RpZmllZCBieSB0aGUgdGVtcGxhdGUgZXh0ZW5kZXJcIiwgKCktPlxuXHRcdFx0Y29uZmlnID0gY2hpbGRyZW46IGNoaWxkQV8xOiB7dHlwZTonZGl2Jywgb3B0aW9uczoge3N0eWxlOiB7ZGlzcGxheTonbm9uZSd9fX1cblx0XHRcdHRlbXBsYXRlQSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7cmVmOidkaXZBJ31cblx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQSd9XG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0dGVtcGxhdGVBLmNoaWxkLmNoaWxkQV8xXG5cdFx0XHR0ZW1wbGF0ZUIgPSB0ZW1wbGF0ZUEuZXh0ZW5kKClcblx0XHRcdHRlbXBsYXRlQyA9IHRlbXBsYXRlQS5leHRlbmQoY29uZmlnKVxuXHRcdFx0dGVtcGxhdGVEID0gdGVtcGxhdGVBLmV4dGVuZChjb25maWcpXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUEuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c3Bhd25CID0gdGVtcGxhdGVCLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduQyA9IHRlbXBsYXRlQy5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bkQgPSB0ZW1wbGF0ZUQuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChzcGF3bkEuY2hpbGQuY2hpbGRBXzEuc3R5bGUgJ2Rpc3BsYXknKS50by5lcXVhbCAnaW5saW5lJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQi5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChzcGF3bkIuY2hpbGQuY2hpbGRBXzEuc3R5bGUgJ2Rpc3BsYXknKS50by5lcXVhbCAnaW5saW5lJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQy5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KHNwYXduQy5jaGlsZC5jaGlsZEFfMS5zdHlsZSAnZGlzcGxheScpLnRvLmVxdWFsICdub25lJ1xuXHRcdFx0ZXhwZWN0KHNwYXduRC5jaGlsZC5jaGlsZEFfMS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KHNwYXduRC5jaGlsZC5jaGlsZEFfMS5zdHlsZSAnZGlzcGxheScpLnRvLmVxdWFsICdub25lJ1xuXG5cdFx0dGVzdCBcIk51bGwgdmFsdWVzIGluIHJlZi1jaGlsZHJlbiBtYXAgd2lsbCByZW1vdmUgdGhlIGNoaWxkIGZyb20gdGhlIHRlbXBsYXRlXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlTWFpbiA9IFxuXHRcdFx0XHREb20udGVtcGxhdGUgWydkaXYnLCB7aWQ6J2RpdkEnfSxcblx0XHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRBJ30sXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydkaXYnLCB7cmVmOidjaGlsZEFfMicsIGlkOidjaGlsZEFfMid9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQid9LCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQyd9LCBcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQ18xJ31dXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQ18yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlTWFpbi5leHRlbmQgWydzZWN0aW9uJywgbnVsbCwgXG5cdFx0XHRcdGNoaWxkQTpcblx0XHRcdFx0XHR0eXBlOiAnZm9ybSdcblx0XHRcdFx0XHRvcHRpb25zOlxuXHRcdFx0XHRcdFx0c3R5bGU6IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG5cblx0XHRcdFx0Y2hpbGRBXzE6IG51bGxcblx0XHRcdFx0Y2hpbGRBXzI6XG5cdFx0XHRcdFx0WydhJywge2lkOidDSElMRGFfMicsIGhyZWY6J2h0dHA6Ly9nb29nbGUuY29tJ30sXG5cdFx0XHRcdFx0XHRbJ3RleHQnLCB7cmVmOidjaGlsZEFfMl8xJywgdGV4dDonTmV3IFRleHQnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdGNoaWxkQl8xOiBudWxsXG5cdFx0XHRcdGNoaWxkQzogbnVsbFxuXHRcdFx0XVxuXG5cdFx0XHRleHBlY3QodHlwZW9mIHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMl8xKS5ub3QudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyh0ZW1wbGF0ZU1haW4uY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoMTApXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDYpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuZGl2QSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5XG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZm9ybSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZU1haW4uY2hpbGQuY2hpbGRBXzEpLnRvLmVxdWFsIHRlbXBsYXRlTWFpbi5jaGlsZC5jaGlsZEFfMVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuQ0hJTERhXzIpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMl8xKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICdOZXcgVGV4dCdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzEpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVNYWluLmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZU1haW4uY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZU1haW4uY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHRlbXBsYXRlTWFpbi5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlTWFpbi5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHRlbXBsYXRlTWFpbi5jaGlsZHJlblsyXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXG5cblx0XHR0ZXN0IFwiTnVsbCB2YWx1ZXMgaW4gb3B0aW9ucyBvYmplY3Qgd2lsbCBkZWxldGUga2V5cyBkdXJpbmcgdGVtcGxhdGUgZXh0ZW5zaW9uXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlQSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0cmVmOiAndGhlRGl2J1xuXHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdHZhbHVlQTogKCktPiAxXG5cdFx0XHRcdFx0XHR2YWx1ZUI6ICgpLT4gMlxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZSdcblx0XHRcdFx0XHRcdHdpZHRoOiAxMDBcblx0XHRcdFx0XHRcdGhlaWdodDogMTAwXG5cdFx0XHRcdFx0XHQkYWN0aXZlOlxuXHRcdFx0XHRcdFx0XHR3aWR0aDogMjAwXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogMjAwXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdHRlbXBsYXRlQiA9IHRlbXBsYXRlQS5leHRlbmQoXG5cdFx0XHRcdG9wdGlvbnM6XG5cdFx0XHRcdFx0cmVmOiBudWxsXG5cdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0dmFsdWVBOiBudWxsXG5cdFx0XHRcdFx0XHR2YWx1ZUI6ICgpLT4gM1xuXG5cdFx0XHRcdFx0c3R5bGU6XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IG51bGxcblx0XHRcdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0XHRcdCRhY3RpdmU6XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiBudWxsXG5cdFx0XHQpXG5cblx0XHRcdHNwYXduQSA9IHRlbXBsYXRlQS5zcGF3bigpXG5cdFx0XHRzcGF3bkIgPSB0ZW1wbGF0ZUIuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25BLnJlZikudG8uZXF1YWwgJ3RoZURpdidcblx0XHRcdGV4cGVjdChzcGF3bkIucmVmKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0eXBlb2Ygc3Bhd25BLm9wdGlvbnMuY29tcHV0ZXJzLnZhbHVlQSkudG8uZXF1YWwgJ2Z1bmN0aW9uJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBzcGF3bkIub3B0aW9ucy5jb21wdXRlcnMudmFsdWVBKS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBzcGF3bkEub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKS50by5lcXVhbCAnZnVuY3Rpb24nXG5cdFx0XHRleHBlY3QodHlwZW9mIHNwYXduQi5vcHRpb25zLmNvbXB1dGVycy52YWx1ZUIpLnRvLmVxdWFsICdmdW5jdGlvbidcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKCkpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKCkpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZS5wb3NpdGlvbikudG8uZXF1YWwgJ3JlbGF0aXZlJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLnBvc2l0aW9uKS50by5lcXVhbCAncmVsYXRpdmUnXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuc3R5bGUud2lkdGgpLnRvLmVxdWFsIDEwMFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLndpZHRoKS50by5lcXVhbCAxMDBcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsIDEwMFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3Qoc3Bhd25CLm9wdGlvbnMuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlLiRhY3RpdmUud2lkdGgpLnRvLmVxdWFsIDIwMFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLiRhY3RpdmUud2lkdGgpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlLiRhY3RpdmUuaGVpZ2h0KS50by5lcXVhbCAyMDBcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5zdHlsZS4kYWN0aXZlLmhlaWdodCkudG8uZXF1YWwgMjAwXG5cblxuXHRcdHRlc3QgXCJXaGVuIHNwYXduaW5nIGVsZW1lbnRzIHRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIHNwYXducyBzaG91bGQgYmUgYSBjbG9uZSBvZiB0aGUgdGVtcGxhdGUncyBvcHRpb25zXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlQSA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIHN0eWxlOntkaXNwbGF5OidibG9jayd9XVxuXHRcdFx0dGVtcGxhdGVCID0gRG9tLnRlbXBsYXRlIFsnZGl2Jywgc3R5bGU6e2Rpc3BsYXk6J2Jsb2NrJ31dXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUEuc3Bhd24ocmVmOidhJykgIyBQYXNzZWQgb3B0aW9ucyB0byBtZXJnZSB3aXRoIG9yaWdcblx0XHRcdHNwYXduQiA9IHRlbXBsYXRlQS5zcGF3bigpXG5cblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucykubm90LnRvLmVxdWFsKHRlbXBsYXRlQS5vcHRpb25zKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlKS5ub3QudG8uZXF1YWwodGVtcGxhdGVBLm9wdGlvbnMuc3R5bGUpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVBLm9wdGlvbnMuc3R5bGUuJGJhc2UpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zKS5ub3QudG8uZXF1YWwodGVtcGxhdGVCLm9wdGlvbnMpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLm9wdGlvbnMuc3R5bGUpLm5vdC50by5lcXVhbCh0ZW1wbGF0ZUIub3B0aW9ucy5zdHlsZSlcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUIub3B0aW9ucy5zdHlsZS4kYmFzZSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIHdpbGwgYmUgc3Bhd25lZCB3aGVuIGFwcGVuZGVkIHRvIERPTSBlbGVtZW50c1wiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShbJ3NwYW4nLCB7cmVmOid0aGVTcGFuJ30sICdzb21lVGV4dCddKVxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCAnbGFiZWw6ICcpXG5cblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsICdsYWJlbDogJ1xuXHRcdFx0ZGl2LmFwcGVuZCB0ZW1wbGF0ZVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwgJ2xhYmVsOiBzb21lVGV4dCdcblx0XHRcdGRpdi5wcmVwZW5kIHRlbXBsYXRlXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgM1xuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCAnc29tZVRleHRsYWJlbDogc29tZVRleHQnXG5cblxuXHRcdHN1aXRlIFwiRGF0YSBjb21wdXRlcnNcIiwgKCktPlxuXHRcdFx0dGVzdCBcIlRlbXBsYXRlcyBhY2NlcHQgb3B0aW9ucy5jb21wdXRlcnMgZm4gbWFwIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIHByb3ZpZGVkIG9wdGlvbnMuZGF0YSB1cG9uIHNwYXduaW5nXCIsICgpLT5cblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gbnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogJ3NvbWVMYWJlbCc6IChkYXRhKS0+IHJlY2VpdmVkRGF0YSA9IGRhdGEgb3IgJ25vdGhpbmcnXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXF1YWwobnVsbClcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbChudWxsKVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oe2RhdGE6J3NvbWVMYWJlbCc6J3dvcmtzJ30pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxdWFsKCd3b3JrcycpXG5cblxuXHRcdFx0dGVzdCBcIkNvbXB1dGVycyB3aWxsIGJlIGhhdmUgdGhlIHNwYXduZWQgUXVpY2tFbGVtZW50IGluc3RhbmNlIGFzIHRoZWlyIGNvbnRleHRcIiwgKCktPlxuXHRcdFx0XHRjb250ZXh0ID0gbnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogJ3NvbWVMYWJlbCc6IChkYXRhKS0+IGNvbnRleHQgPSB0aGlzXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0ZXhwZWN0KGNvbnRleHQpLnRvLmVxdWFsKG51bGwpXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvbnRleHQpLnRvLmVxdWFsKG51bGwpXG5cdFx0XHRcdFxuXHRcdFx0XHRpbnN0YW5jZSA9IHRlbXBsYXRlLnNwYXduKHtkYXRhOidzb21lTGFiZWwnOnVuZGVmaW5lZH0pXG5cdFx0XHRcdGV4cGVjdChjb250ZXh0KS50by5lcXVhbChpbnN0YW5jZSlcblxuXG5cdFx0XHR0ZXN0IFwiVmFsdWVzIHNwZWNpZmllZCBpbiBvcHRpb25zLmRlZmF1bHRzIHdpbGwgYmUgdXNlZCBpZiBub3Qgc3BlY2lmaWVkIGluIG9wdGlvbnMuZGF0YSB1cG9uIHNwYXduaW5nXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmZpcnN0ID0gZGF0YS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLnNlY29uZCA9IGRhdGEudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLnRoaXJkID0gZGF0YS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdFx0XHRkZWZhdWx0czpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0VmFsdWUgaGVyZSdcblx0XHRcdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkVmFsdWUgaGVyZSdcblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoe30pXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoe2ZpcnN0OidmaXJzdHZhbHVlIGhlcmUnLCB0aGlyZDondGhpcmR2YWx1ZSBoZXJlJ30pXG5cdFx0XHRcdFxuXHRcdFx0XHRpbnN0YW5jZSA9IHRlbXBsYXRlLnNwYXduKHtkYXRhOid0aGlyZCc6J2N1c3RvbXZhbHVlIGhlcmUnfSlcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwoe2ZpcnN0OidmaXJzdHZhbHVlIGhlcmUnLCB0aGlyZDonY3VzdG9tdmFsdWUgaGVyZSd9KVxuXG5cblx0XHRcdHRlc3QgXCJWYWx1ZXMgY2FuIGJlIG9mIGFueSB0eXBlXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdmb3VydGgnOiAoZGF0YSktPiByZXN1bHRzLmZvdXJ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J2ZpZnRoJzogKGRhdGEpLT4gcmVzdWx0cy5maWZ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3NpeHRoJzogKGRhdGEpLT4gcmVzdWx0cy5zaXh0aCA9IGRhdGFcblx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiBbJ2FiYycsICcxMjMnXVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiB7YToxLCBiOjEyfVxuXHRcdFx0XHRcdFx0XHQnc2l4dGgnOiA5OTlcblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bihkYXRhOlxuXHRcdFx0XHRcdCdzZWNvbmQnOiBudWxsXG5cdFx0XHRcdFx0J2ZvdXJ0aCc6IDE5XG5cdFx0XHRcdFx0J2ZpZnRoJzogZmFsc2Vcblx0XHRcdFx0XHQnc2l4dGgnOiB1bmRlZmluZWRcblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdGZpcnN0OiBbJ2FiYycsICcxMjMnXVxuXHRcdFx0XHRcdHNlY29uZDogbnVsbFxuXHRcdFx0XHRcdHRoaXJkOiB7YToxLCBiOjEyfVxuXHRcdFx0XHRcdGZvdXJ0aDogMTlcblx0XHRcdFx0XHRmaWZ0aDogZmFsc2Vcblx0XHRcdFx0XHRzaXh0aDogdW5kZWZpbmVkXG5cblx0XHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHJlc3VsdHMpLmxlbmd0aCkudG8uZXF1YWwoNilcblxuXG5cdFx0XHR0ZXN0IFwiVmFsdWVzIGluIG9wdGlvbnMuZGF0YSB0aGF0IGRvIG5vdCBoYXZlIGEgbWF0Y2hpbmcgY29tcHV0ZXIgd2lsbCBiZSBza2lwcGVkXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YTpcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkIHZhbHVlJ1xuXHRcdFx0XHRcdCdmb3VydGgnOiAnZm91cnRoIHZhbHVlJ1xuXHRcdFx0XHQpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblxuXHRcdFx0XHRleHBlY3QoT2JqZWN0LmtleXMocmVzdWx0cykubGVuZ3RoKS50by5lcXVhbCgzKVxuXG5cblx0XHRcdHRlc3QgXCJDb21wdXRlcnMgaW4gdGVtcGxhdGUgY2hpbGRyZW4gd2lsbCByZWNlaXZlIHRoZSBwYXJlbnQncyBvcHRpb25zLmRhdGFcIiwgKCktPlxuXHRcdFx0XHRyZXN1bHRzID0gcGFyZW50Ont9LCBjaGlsZEE6e30sIGNoaWxkQjp7fSwgY2hpbGRDOnt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLnBhcmVudC5maXJzdCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IHJlc3VsdHMucGFyZW50LnNlY29uZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3RoaXJkJzogKGRhdGEpLT4gcmVzdWx0cy5wYXJlbnQudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEEuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRBLnNlY29uZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkQS50aGlyZCA9IGRhdGFcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdFsnZGl2JywgbnVsbCxcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEIuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEIuZm91cnRoID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRDLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdFx0J3NpeHRoJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEMuc2l4dGggPSBkYXRhXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bihkYXRhOlxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFx0J2ZvdXJ0aCc6ICdmb3VydGggdmFsdWUnXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMucGFyZW50KS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzLmNoaWxkQSkudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZEIpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J2ZvdXJ0aCc6ICdmb3VydGggdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZEMpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cblxuXHRcdFx0dGVzdCBcIlBhcmVudCBkZWZhdWx0cyB3aWxsIG5vdCBiZSBwYXNzZWQgdG8gY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0XHRyZXN1bHRzID0gcGFyZW50Ont9LCBjaGlsZDp7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5wYXJlbnQuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLnBhcmVudC5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMucGFyZW50LnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdFx0XHQnZm91cnRoJzogJ2ZvdXJ0aCB2YWx1ZSdcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLnNlY29uZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdCdmb3VydGgnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkLmZvdXJ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bihkYXRhOlxuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5wYXJlbnQpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZCkudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cblxuXHRcdFx0dGVzdCBcIkRlZmF1bHRzIHNob3VsZCBvbmx5IGJlIGFwcGxpZWQgb25jZVwiLCAoKS0+XG5cdFx0XHRcdGNvdW50ID0gcGFyZW50OjAsIGNoaWxkOjAsIGNoaWxkQ2hpbGQ6MFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdHJlZjogJ3BhcmVudCdcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gY291bnQucGFyZW50Kytcblx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRyZWY6ICdjaGlsZCdcblx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IGNvdW50LnBhcmVudCsrXG5cdFx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IGNvdW50LmNoaWxkKytcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRyZWY6ICdjaGlsZCdcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogKGRhdGEpLT4gY291bnQuY2hpbGRDaGlsZCsrXG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogJ2ZvdXJ0aCB2YWx1ZSdcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oZGF0YTondGhpcmQnOid0aGlyZCB2YWx1ZScpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIHBhcmVudDoxLCBjaGlsZDoxLCBjaGlsZENoaWxkOjFcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgcGFyZW50OjIsIGNoaWxkOjIsIGNoaWxkQ2hpbGQ6MlxuXG5cblx0XHRcdHRlc3QgXCJEYXRhL2RlZmF1bHRzIHNob3VsZCBiZSBhcHBsaWVkIGV2ZW4gd2hlbiBwYXJlbnQgZG9lc24ndCBoYXZlIGNvbXB1dGVyc1wiLCAoKS0+XG5cdFx0XHRcdGNvdW50ID0gMFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2RpdicsIG51bGwsXG5cdFx0XHRcdFx0XHRbJ3NlY3Rpb24nLCBudWxsLFxuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiBjb3VudCsrXG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKGRhdGE6J2ZpcnN0Jzonc2Vjb25kIHZhbHVlJylcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxdWFsKDIpXG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgY2FuIGJlIHJlLWFwcGxpZWQgdmlhIC5hcHBseURhdGEoZGF0YSlcIiwgKCktPlxuXHRcdFx0XHRyZXN1bHRzID0ge307IGNvdW50ID0ge2E6MCwgYjowLCBjOjAsIGQ6MCwgZTowLCBmOjB9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHQnYSc6IChkYXRhKS0+IHJlc3VsdHMuYSA9IGRhdGE7XHRjb3VudC5hKytcblx0XHRcdFx0XHRcdFx0J2InOiAoZGF0YSktPiByZXN1bHRzLmIgPSBkYXRhO1x0Y291bnQuYisrXG5cdFx0XHRcdFx0XHRcdCdjJzogKGRhdGEpLT4gcmVzdWx0cy5jID0gZGF0YTtcdGNvdW50LmMrK1xuXHRcdFx0XHRcdFx0XHQnZCc6IChkYXRhKS0+IHJlc3VsdHMuZCA9IGRhdGE7XHRjb3VudC5kKytcblx0XHRcdFx0XHRcdFx0J2UnOiAoZGF0YSktPiByZXN1bHRzLmUgPSBkYXRhO1x0Y291bnQuZSsrXG5cdFx0XHRcdFx0XHRcdCdmJzogKGRhdGEpLT4gcmVzdWx0cy5mID0gZGF0YTtcdGNvdW50LmYrK1xuXHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdCdhJzogMVxuXHRcdFx0XHRcdFx0XHQnYyc6IDNcblx0XHRcdFx0XHRcdFx0J2YnOiA2XG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YToge2I6MiwgZDo0LCBlOjUsIGY6Nn0pXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIHthOjEsIGI6MiwgYzozLCBkOjQsIGU6NSwgZjo2fVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmRlZXAuZXF1YWwge2E6MSwgYjoxLCBjOjEsIGQ6MSwgZToxLCBmOjF9XG5cblx0XHRcdFx0aW5zdGFuY2UuYXBwbHlEYXRhKGE6MTEsIGI6MjIsIGQ6NDQsIGU6NTUpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIHthOjExLCBiOjIyLCBjOjMsIGQ6NDQsIGU6NTUsIGY6Nn1cblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5kZWVwLmVxdWFsIHthOjIsIGI6MiwgYzoyLCBkOjIsIGU6MiwgZjoyfVxuXG5cblx0XHRcdHRlc3QgXCJUaGUgJ19pbml0JyBjb21wdXRlciB3aWxsIGJlIHJ1biBieSBkZWZhdWx0IG9uIHRlbXBsYXRlIHNwYXduIHJlZ2FyZGxlc3Mgb2YgZGF0YVwiLCAoKS0+XG5cdFx0XHRcdGNvdW50ID0ge31cblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRyZWY6ICdkaXZBJ1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOiBfaW5pdDogKCktPiBjb3VudFtAcmVmXT89MDsgY291bnRbQHJlZl0rK1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2Qidcblx0XHRcdFx0XHRcdFx0ZGF0YTogZmlyc3Q6ICcxJ1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6IF9pbml0OiAoKS0+IGNvdW50W0ByZWZdPz0wOyBjb3VudFtAcmVmXSsrXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRyZWY6ICdkaXZDJ1xuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRyZWY6ICdkaXZEJ1xuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2RSdcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczogX2luaXQ6ICgpLT4gY291bnRbQHJlZl0/PTA7IGNvdW50W0ByZWZdKytcblx0XHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIHt9XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgZGl2QToxLCBkaXZCOjEsIGRpdkU6MVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBkaXZBOjIsIGRpdkI6MiwgZGl2RToyXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5jaGlsZC5kaXZCLnNwYXduKGRhdGE6c2Vjb25kOicyJylcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgZGl2QToyLCBkaXZCOjMsIGRpdkU6MlxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuY2hpbGQuZGl2Qy5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIGRpdkE6MiwgZGl2QjozLCBkaXZFOjNcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLmNoaWxkLmRpdkMuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBkaXZBOjIsIGRpdkI6MywgZGl2RTo0XG5cblxuXHRcdFx0dGVzdCBcIlRoZSAnX2luaXQnIGNvbXB1dGVyIHdpbGwgYmUgcGFzc2VkIGFsbCBvZiB0aGUgZGF0YSB0aGUgdGVtcGxhdGUgc3Bhd24gcmVjZWl2ZXNcIiwgKCktPlxuXHRcdFx0XHRyZXN1bHQgPSBkaXZBOnt9LCBkaXZCOnt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0cmVmOiAnZGl2QSdcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0aHJlZjogKGhyZWYpLT4gcmVzdWx0W0ByZWZdLmhyZWYgPSBocmVmXG5cdFx0XHRcdFx0XHRcdG5hbWU6IChuYW1lKS0+IHJlc3VsdFtAcmVmXS5uYW1lID0gbmFtZVxuXHRcdFx0XHRcdFx0XHRfaW5pdDogKCktPiByZXN1bHRbQHJlZl0uX2luaXQgPSBhcmd1bWVudHNbMF1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHJlZjogJ2RpdlByb3h5J1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2Qidcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0czogZmlyc3Q6ICcxJ1xuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHRcdGhyZWY6IChocmVmKS0+IHJlc3VsdFtAcmVmXS5ocmVmID0gaHJlZlxuXHRcdFx0XHRcdFx0XHRcdFx0bmFtZTogKG5hbWUpLT4gcmVzdWx0W0ByZWZdLm5hbWUgPSBuYW1lXG5cdFx0XHRcdFx0XHRcdFx0XHRfaW5pdDogKCktPiByZXN1bHRbQHJlZl0uX2luaXQgPSBhcmd1bWVudHNbMF1cblx0XHRcdFx0XHRcdFx0XVx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3RlZCA9IFxuXHRcdFx0XHRcdGhyZWY6ICdhYmMnXG5cdFx0XHRcdFx0bmFtZTogJzEyMydcblx0XHRcdFx0XHRfaW5pdDoge2hyZWY6J2FiYycsIG5hbWU6JzEyMycsIHZhbHVlOidkZWYnLCBzaXplOic0NTYnfVxuXHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChyZXN1bHQpLnRvLmVxbCBkaXZBOnt9LCBkaXZCOnt9XG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bihkYXRhOntocmVmOidhYmMnLCBuYW1lOicxMjMnLCB2YWx1ZTonZGVmJywgc2l6ZTonNDU2J30pXG5cdFx0XHRcdGV4cGVjdChyZXN1bHQpLnRvLmVxbCB7ZGl2QTpleHBlY3RlZCwgZGl2QjpleHBlY3RlZH1cblx0XHRcdFx0XG5cdFx0XHRcdGRlbGV0ZSByZXN1bHQuZGl2QVxuXHRcdFx0XHRkaXZCOiBudWxsXG5cdFx0XHRcdHRlbXBsYXRlLmNoaWxkLmRpdkIuc3Bhd24oZGF0YTp7aHJlZjonYWJjJywgbmFtZTonMTIzJywgdmFsdWU6J2RlZicsIHNpemU6JzQ1Nid9KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwge2RpdkI6ZXhwZWN0ZWR9XG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgY2FuIGJlIHNwZWNpZmllZCB2aWEgb3B0aW9ucyBvYmplY3RcIiwgKCktPlxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBudWxsXG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0Y29tcHV0ZXJzOiAnc29tZUxhYmVsJzogKGRhdGEpLT4gcmVjZWl2ZWREYXRhID0gZGF0YSBvciAnbm90aGluZydcblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0dGVtcGxhdGVDb3B5ID0gdGVtcGxhdGUuZXh0ZW5kKG9wdGlvbnM6ZGF0YTp7J3NvbWVMYWJlbCc6J3dvcmtzJ30pXG5cblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbChudWxsKVxuXHRcdFx0XHR0ZW1wbGF0ZUNvcHkuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbCgnd29ya3MnKVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24ob3B0aW9uczpkYXRhOnsnc29tZUxhYmVsJzonYWxzbyB3b3Jrcyd9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbCgnYWxzbyB3b3JrcycpXG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgc3BlY2lmaWVkIGluIGNoaWxkcmVuJ3Mgb3B0aW9ucyBvYmplY3Qgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGUgcGFyZW50J3MgZGF0YVwiLCAoKS0+XG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2RpdicsIG51bGxcblxuXHRcdFx0XHRcdFx0WydzcGFuJ1xuXHRcdFx0XHRcdFx0XHRkYXRhOiBhYmM6IDEyM1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0J2FiYyc6IChkYXRhKS0+IHJlY2VpdmVkRGF0YS5hYmMgPSBkYXRhIG9yICdub3RoaW5nJ1xuXHRcdFx0XHRcdFx0XHRcdCdkZWYnOiAoZGF0YSktPiByZWNlaXZlZERhdGEuZGVmID0gZGF0YSBvciAnbm90aGluZydcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0dGVtcGxhdGVDb3B5ID0gdGVtcGxhdGUuZXh0ZW5kKG9wdGlvbnM6ZGF0YTp7ZGVmOjQ1Nn0pXG5cblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcWwoYWJjOjEyMywgZGVmOm51bGwpXG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGVDb3B5LnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzoxMjMsIGRlZjo0NTYpXG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24ob3B0aW9uczpkYXRhOntkZWY6Nzg5fSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzoxMjMsIGRlZjo3ODkpXG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IGFiYzpudWxsLCBkZWY6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24ob3B0aW9uczpkYXRhOnthYmM6Nzg5fSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzo3ODksIGRlZjpudWxsKVxuXG5cblx0XHRcdHRlc3QgXCJEYXRhIHdvbid0IGJlIHBhc3NlZCB0byBjaGlsZHJlbiBpZiBvcHRpb25zLnBhc3NEYXRhVG9DaGlsZHJlbiBpcyBmYWxzZVwiLCAoKS0+XG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IHBhcmVudDpudWxsLCBjaGlsZDpudWxsXG5cdFx0XHRcdHRlbXBsYXRlMSA9IERPTS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogYWJjOiAoZGF0YSktPiByZWNlaXZlZERhdGEucGFyZW50ID0gZGF0YVxuXG5cdFx0XHRcdFx0XHRbJ3NwYW4nXG5cdFx0XHRcdFx0XHRcdGNvbXB1dGVyczogYWJjOiAoZGF0YSktPiByZWNlaXZlZERhdGEuY2hpbGQgPSBkYXRhXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdHRlbXBsYXRlMiA9IHRlbXBsYXRlMS5leHRlbmQocGFzc0RhdGFUb0NoaWxkcmVuOmZhbHNlKVxuXHRcdFx0XHRcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsIHBhcmVudDpudWxsLCBjaGlsZDpudWxsXG5cdFx0XHRcdFxuXHRcdFx0XHRlbDEgPSB0ZW1wbGF0ZTEuc3Bhd24oZGF0YTp7YWJjOjEyM30pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6MTIzLCBjaGlsZDoxMjNcblxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBwYXJlbnQ6bnVsbCwgY2hpbGQ6bnVsbFxuXHRcdFx0XHRlbDIgPSB0ZW1wbGF0ZTIuc3Bhd24oZGF0YTp7YWJjOjEyM30pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6MTIzLCBjaGlsZDpudWxsXG5cdFx0XHRcdFxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBwYXJlbnQ6bnVsbCwgY2hpbGQ6bnVsbFxuXHRcdFx0XHRlbDEuYXBwbHlEYXRhKHthYmM6NDU2fSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsIHBhcmVudDo0NTYsIGNoaWxkOjQ1NlxuXHRcdFx0XHRcblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gcGFyZW50Om51bGwsIGNoaWxkOm51bGxcblx0XHRcdFx0ZWwyLmFwcGx5RGF0YSh7YWJjOjQ1Nn0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6NDU2LCBjaGlsZDpudWxsXG5cdFx0XHRcdFxuXHRcdFx0XHRlbDIubGFzdENoaWxkLmFwcGx5RGF0YSh7YWJjOjc4OX0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6NDU2LCBjaGlsZDo3ODlcblxuXG5cdFx0XHR0ZXN0IFwiRGF0YSBzaG91bGQgYmUgaW52b2tlZCBmb3IgcGFyZW50cyBhZnRlciBpbnZva2VkIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdFx0aGlzdG9yeSA9IFtdXG5cdFx0XHRcdGNvbXB1dGVycyA9IFxuXHRcdFx0XHRcdF9pbml0OiAoKS0+IGhpc3RvcnkucHVzaChAcmVmKVxuXHRcdFx0XHRcdGFiYzogKCktPiBoaXN0b3J5LnB1c2goQHJlZilcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J3BhcmVudCd9XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMSd9XG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDInfVxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMyd9XG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgW11cblx0XHRcdFx0ZWwgPSB0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDInLCAnY2hpbGQxJywgJ2NoaWxkMycsICdwYXJlbnQnXVxuXG5cdFx0XHRcdGhpc3RvcnkubGVuZ3RoID0gMFxuXHRcdFx0XHRlbC5hcHBseURhdGEoYWJjOjEyMylcblx0XHRcdFx0ZXhwZWN0KGhpc3RvcnkpLnRvLmVxbCBbJ2NoaWxkMicsICdjaGlsZDEnLCAnY2hpbGQzJywgJ3BhcmVudCddXG5cblxuXHRcdFx0dGVzdCBcIkNvbXB1dGVycyB3aWxsIGJlIGludm9rZWQgb25seSBvbmUgdGltZSBwZXIgZWxlbWVudCBpZiBvcHRpb25zLmludm9rZUNvbXB1dGVyc09uY2UgaXMgb25cIiwgKCktPlxuXHRcdFx0XHRoaXN0b3J5ID0gW11cblx0XHRcdFx0Y29tcHV0ZXJzID0gIGFiYzogKCktPiBoaXN0b3J5LnB1c2goQHJlZilcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J3BhcmVudCcsIGludm9rZUNvbXB1dGVyc09uY2U6dHJ1ZX1cblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHR7Y29tcHV0ZXJzLCBpZDonY2hpbGQxJ31cblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMicsIGludm9rZUNvbXB1dGVyc09uY2U6dHJ1ZX1cblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDMnfVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFtdXG5cdFx0XHRcdGVsID0gdGVtcGxhdGUuc3Bhd24oZGF0YTphYmM6MTIzKVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFsnY2hpbGQyJywgJ2NoaWxkMScsICdjaGlsZDMnLCAncGFyZW50J11cblxuXHRcdFx0XHRoaXN0b3J5Lmxlbmd0aCA9IDBcblx0XHRcdFx0ZWwuYXBwbHlEYXRhKGFiYzoxMjMpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDEnLCAnY2hpbGQzJ11cblxuXHRcdFx0XHRoaXN0b3J5Lmxlbmd0aCA9IDBcblx0XHRcdFx0ZWwuYXBwbHlEYXRhKGFiYzo0NTYpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDEnLCAnY2hpbGQzJ11cblxuXG5cblx0c3VpdGUgXCJNaXNjXCIsICgpLT5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaXNUZW1wbGF0ZVwiLCAoKS0+XG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUgRG9tLnRlbXBsYXRlKFsnZGl2J10pKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUgRG9tLmRpdigpKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIERvbS5kaXYoKVswXSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSB7fSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSAnc3RyaW5nJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSA1KS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIGZhbHNlKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIHRydWUpLnRvLmJlLmZhbHNlXG5cdFx0XG5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaXNRdWlja0VsXCIsICgpLT5cblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIERvbS50ZW1wbGF0ZShbJ2RpdiddKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIERvbS5kaXYoKSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwgRG9tLnRleHQoKSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwgRG9tLmRpdigpWzBdKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwge30pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCAnc3RyaW5nJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIDUpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCBmYWxzZSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIHRydWUpLnRvLmJlLmZhbHNlXG5cdFx0XG5cblx0XHR0ZXN0IFwiUXVpY2tEb20uaXNFbFwiLCAoKS0+XG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgRG9tLnRlbXBsYXRlKFsnZGl2J10pKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS5kaXYoKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCBEb20udGV4dCgpKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS5kaXYoKVswXSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS50ZXh0KClbMF0pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwge30pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgJ3N0cmluZycpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgNSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCBmYWxzZSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCB0cnVlKS50by5iZS5mYWxzZVxuXHRcdFxuXG5cdFx0dGVzdCBcIlN0cmluZ2lmaWNhdGlvblwiLCAoKS0+XG5cdFx0XHRzZWN0aW9uID0gRG9tKFxuXHRcdFx0XHRbJ3NlY3Rpb24nLHtcblx0XHRcdFx0XHRpZDogJ3RoZVNlY3Rpb24nXG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiAndGhlU2VjdGlvbkNsYXNzJ1xuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJ1xuXHRcdFx0XHRcdFx0J29wYWNpdHknOiAwLjVcblx0XHRcdFx0XHRcdCdmb250U2l6ZSc6ICgpLT4gJzI5cHgnXG5cdFx0XHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0XHRcdGZvbnRTaXplOiAnMTFweCdcblx0XHRcdFx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0XHRcdFx0Zm9udFNpemU6ICc4cHgnXG5cdFx0XHRcdH1cblx0XHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRBJywgc3R5bGU6cG9zaXRpb246J3JlbGF0aXZlJ30sICdjaGlsZEEtaW5uZXJ0ZXh0J11cblx0XHRcdFx0XHQnc2VjdGlvbi1pbm5lcnRleHQnXG5cdFx0XHRcdFx0WydzcGFuJywge2lkOidjaGlsZEInLCByZWY6J2NoaWxkQi1yZWYhJywgc3R5bGU6cG9zaXRpb246J2Fic29sdXRlJ31cblx0XHRcdFx0XHRcdCdjaGlsZEItaW5uZXJ0ZXh0J1xuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge3RleHQ6J2NoaWxkQi1pbm5lcnRleHQgMid9XVxuXHRcdFx0XHRcdFx0WydhJywge3VybDonaHR0cHM6Ly9nb29nbGUuY29tJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHR3aW5kb3cuc3RyaW5naWZpZWQgPSBKU09OLnN0cmluZ2lmeShzZWN0aW9uLCBudWxsLCAyKVxuXHRcdFx0c2VjdGlvbkNvcHkgPSBEb20oSlNPTi5wYXJzZShzdHJpbmdpZmllZCkpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS50eXBlKS50by5lcXVhbChzZWN0aW9uLnR5cGUpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkucmVmKS50by5lcXVhbChzZWN0aW9uLnJlZilcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5lbC5pZCkudG8uZXF1YWwoc2VjdGlvbi5lbC5pZClcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKHNlY3Rpb24uZWwuY2xhc3NOYW1lKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnN0eWxlICdwb3NpdGlvbicpLnRvLmVxdWFsKHNlY3Rpb24uc3R5bGUgJ3Bvc2l0aW9uJylcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsKHNlY3Rpb24uc3R5bGUgJ29wYWNpdHknKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnN0eWxlICdmb250U2l6ZScpLm5vdC50by5lcXVhbChzZWN0aW9uLnN0eWxlICdmb250U2l6ZScpXG5cdFx0XHRcblx0XHRcdHNlY3Rpb24uc3R5bGUgJ2ZvbnRTaXplJywgbnVsbFxuXHRcdFx0c2VjdGlvbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0c2VjdGlvbkNvcHkuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbChzZWN0aW9uLnN0eWxlICdmb250U2l6ZScpXG5cdFx0XHRcblx0XHRcdHNlY3Rpb24uc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0c2VjdGlvbkNvcHkuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKHNlY3Rpb24uc3R5bGUgJ2ZvbnRTaXplJylcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoc2VjdGlvbi5jaGlsZHJlbi5sZW5ndGgpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoc2VjdGlvbkNvcHkuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoT2JqZWN0LmtleXMoc2VjdGlvbi5jaGlsZCkubGVuZ3RoKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnRleHQpLnRvLmVxdWFsKHNlY3Rpb24udGV4dClcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5odG1sKS50by5lcXVhbChzZWN0aW9uLmh0bWwpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuY2hpbGRyZW5bMF0uc3R5bGUgJ3Bvc2l0aW9uJykudG8uZXF1YWwoc2VjdGlvbi5jaGlsZHJlblswXS5zdHlsZSAncG9zaXRpb24nKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LmNoaWxkcmVuWzJdLnN0eWxlICdwb3NpdGlvbicpLnRvLmVxdWFsKHNlY3Rpb24uY2hpbGRyZW5bMl0uc3R5bGUgJ3Bvc2l0aW9uJylcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5jaGlsZHJlblsyXS5yZWYpLnRvLmVxdWFsKHNlY3Rpb24uY2hpbGRyZW5bMl0ucmVmKVxuXG5cblx0XHR0ZXN0IFwiQ2hhaW5pbmdcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRjaGFpblJlc3VsdCA9IGRpdlxuXHRcdFx0XHQuc3RhdGUoJ2FiYycsIG9uKVxuXHRcdFx0XHQucmVzZXRTdGF0ZSgpXG5cdFx0XHRcdC5zdHlsZSgpXG5cdFx0XHRcdC5jc3MoJ3dpZHRoJywgMTIpXG5cdFx0XHRcdC5hdHRyKCd0ZXN0JywgMTIzKVxuXHRcdFx0XHQucHJvcCgnYW5vdGhlclRlc3QnLCAxMjMpXG5cdFx0XHRcdC51cGRhdGVTdGF0ZVN0eWxlcyh7aGVpZ2h0OjUwfSlcblx0XHRcdFx0LnVwZGF0ZVN0YXRlVGV4dHMoeyRiYXNlOidhYmMnfSlcblx0XHRcdFx0LmFwcGVuZCgpXG5cdFx0XHRcdC5hcHBlbmRUbygpXG5cdFx0XHRcdC5wcmVwZW5kKClcblx0XHRcdFx0LnByZXBlbmRUbygpXG5cdFx0XHRcdC5iZWZvcmUoKVxuXHRcdFx0XHQuYWZ0ZXIoKVxuXHRcdFx0XHQuaW5zZXJ0QmVmb3JlKClcblx0XHRcdFx0Lmluc2VydEFmdGVyKClcblx0XHRcdFx0LmRldGFjaCgpXG5cdFx0XHRcdC53cmFwKERvbS5zZWN0aW9uKCkpXG5cdFx0XHRcdC51bndyYXAoKVxuXHRcdFx0XHQud3JhcChEb20uaGVhZGVyKCkpXG5cdFx0XHRcdC5yZXBsYWNlKClcblx0XHRcdFx0LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRcdC53cmFwKGhlYWQ9RG9tLmhlYWRlcigpKVxuXHRcdFx0XHQub24oJ2FiYycsICgpLT4pXG5cdFx0XHRcdC5lbWl0KCdhYmMnKVxuXHRcdFx0XHQub2ZmKCdhYmMnKVxuXHRcdFx0XHQub2ZmKClcblxuXHRcdFx0ZXhwZWN0KGNoYWluUmVzdWx0KS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3Qoc2FuZGJveC5jaGlsZHJlblswXSkudG8uZXF1YWwoaGVhZC5lbClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbChoZWFkKVxuXHRcdFx0ZXhwZWN0KGRpdi5jc3MgJ3dpZHRoJykudG8uZXF1YWwoJzEycHgnKVxuXG5cblx0XHR0ZXN0IFwiSW52YWxpZCBBcmd1bWVudHNcIiwgKCktPlxuXHRcdFx0dGV4dCA9IERvbS50ZXh0KCdzb21lVGV4dCcsIHtsb3N0T3B0czp0cnVlfSlcblx0XHRcdGRpdiA9IERvbS5kaXYoe2xvc3RPcHRzOnRydWV9KVxuXG5cdFx0XHRleHBlY3QoRG9tKCkpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KERvbShudWxsKSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoRG9tKHt9KSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZU9wdGlvbnMoKSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QodGV4dC5vcHRpb25zLmxvc3RPcHRzKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChkaXYub3B0aW9ucy5sb3N0T3B0cykudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5vbigpKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYub24oJ2FiYycpKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYub24oJ2FiYycsIHt9KSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2Lm9uY2UoJ2FiYycpKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYub2ZmKCdzb21ldGhpbmdGYWtlJykpLnRvLmVxdWFsIGRpdlxuXG5cdFx0XHRlbWl0Q291bnQgPSAwOyBkaXYub24gJ3NvbWV0aGluZycsIGNiPSgpLT4gZW1pdENvdW50Kytcblx0XHRcdGV4cGVjdChkaXYuZW1pdCgnJykpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChkaXYuZW1pdCgpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXRQcml2YXRlKCdub25lJykpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChkaXYuZW1pdFByaXZhdGUoJycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXRQcml2YXRlKCkpLnRvLmVxdWFsKGRpdilcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZGl2LmVtaXQoJ3NvbWV0aGluZycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5vZmYoJ3NvbWV0aGluZycsICgpLT4pKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXQoJ3NvbWV0aGluZycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYuY3NzKG51bGwsICcxMjknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5udWxsKS50by5lcXVhbCh1bmRlZmluZWQpXG5cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUoKSkudG8uZXFsIFtdXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlKG51bGwsIG9uKSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlKDEyMywgb24pKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Jhc2UnLCBvbikudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiYXNlJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJyR3aGF0ZXZzJywgb24pLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnd2hhdGV2cycpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYW5vdGhlcicsIG9uKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdhbm90aGVyJywgdW5kZWZpbmVkKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInKS50by5iZS5mYWxzZVxuXG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlU3R5bGVzIHskYmFzZTp7d2lkdGg6MX19KS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYudXBkYXRlU3RhdGVTdHlsZXMgbnVsbCkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlVGV4dHMgeyRiYXNlOidhYmMnfSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlVGV4dHMgbnVsbCkudG8uZXF1YWwgZGl2XG5cblx0XHRcdGRpdi5hcHBlbmRUbyhEb20gc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbChEb20gc2FuZGJveClcblxuXHRcdFx0ZGl2LmFwcGVuZCh0cnVlKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRkaXYuYXBwZW5kVG8oZG9jdW1lbnQpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYucHJlcGVuZCh0cnVlKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRkaXYucHJlcGVuZFRvKHRydWUpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYuYWZ0ZXIodHJ1ZSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2Lmluc2VydEFmdGVyKDEyMylcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbChEb20gc2FuZGJveClcblx0XHRcdGRpdi5iZWZvcmUodHJ1ZSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2Lmluc2VydEJlZm9yZSgxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYud3JhcCgxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYucmVwbGFjZSgxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRkaXYudW53cmFwKClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMFxuXG5cdFx0XHRkaXYuYXBwZW5kVG8oRG9tIHNhbmRib3gpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0aWYgRG9tKHNhbmRib3gpLl9yZW1vdmVDaGlsZFxuXHRcdFx0XHREb20oc2FuZGJveCkuX3JlbW92ZUNoaWxkKHRleHQpXG5cdFx0XHRcdERvbShzYW5kYm94KS5fcmVtb3ZlQ2hpbGQoRG9tLmRpdigpKVxuXHRcdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goe30pXG5cdFx0XHRcdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdGV4cGVjdCAoKS0+IERvbS5iYXRjaCg1NDMyKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goW10pXG5cdFx0XHRcdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdGV4cGVjdCAoKS0+IERvbS5iYXRjaChbMTJdKS5hcHBlbmQoRG9tLmRpdigpKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goWzEyXSlcblx0XHRcdFx0Lm5vdC50by50aHJvdygpXG5cdFx0XHRcblx0XHRcdCMgZXhwZWN0ICgpLT4gRG9tLmJhdGNoKCQoJ2RpdicpKVxuXHRcdFx0IyBcdC5ub3QudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUoKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUobnVsbClcblx0XHRcdFx0LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLnRlbXBsYXRlKHt9KVxuXHRcdFx0XHQudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUoWzg0ODIsIHtjbGFzc05hbWU6J3QnfV0pXG5cdFx0XHRcdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS50ZW1wbGF0ZShbJ2RpdicsICdzb21lU3RyaW5nJ10pXG5cdFx0XHRcdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS50ZW1wbGF0ZShbJ2RpdicsIG51bGwsICdTb21lIElubmVyIFRleHQnXSlcblx0XHRcdFx0Lm5vdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS5kaXYoc3R5bGU6e29wYWNpdHk6MC41LCAnQGFiYyhtYXgtd2lkdGg6MzkwKSc6e29wYWNpdHk6MX19KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XHQubm90LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0KCgpLT5cblx0XHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRcdGRpdi5waXBlU3RhdGUoZGl2KVxuXHRcdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0KS5ub3QudG8udGhyb3coKVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuSFRNTEVsZW1lbnQ6Om9uRXZlbnQgPSAoZXZlbnROYW1lLCBjYWxsYmFjayktPlxuXHRpZiBAYWRkRXZlbnRMaXN0ZW5lclxuXHRcdEBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spXG5cdGVsc2Vcblx0XHRAYXR0YWNoRXZlbnQoXCJvbiN7ZXZlbnROYW1lfVwiLCBjYWxsYmFjaylcblxuXG5IVE1MRWxlbWVudDo6cmVtb3ZlRXZlbnQgPSAoZXZlbnROYW1lLCBjYWxsYmFjayktPlxuXHRpZiBAcmVtb3ZlRXZlbnRMaXN0ZW5lclxuXHRcdEByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spXG5cdGVsc2Vcblx0XHRAZGV0YWNoRXZlbnQoXCJvbiN7ZXZlbnROYW1lfVwiLCBjYWxsYmFjaylcblxuXG5IVE1MRWxlbWVudDo6ZW1pdEV2ZW50ID0gKGV2ZW50TmFtZSktPlxuXHRldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpXG5cdGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIHRydWUsIGZhbHNlKVxuXHRAZGlzcGF0Y2hFdmVudChldmVudClcblxuXG5pZiBIVE1MRWxlbWVudC5uYW1lIGlzbnQgJ0hUTUxFbGVtZW50J1xuXHRIVE1MRWxlbWVudC5uYW1lID0gJ0hUTUxFbGVtZW50J1xuXHRUZXh0Lm5hbWUgPSAnVGV4dCdcblx0bm9uRWxlbWVudFN1ZmZpeCA9IFtcblx0XHQnT3B0aW9uc0NvbGxlY3Rpb24nXG5cdFx0J0Zvcm1Db250cm9sc0NvbGxlY3Rpb24nXG5cdFx0J0RvY3VtZW50J1xuXHRcdCdDb2xsZWN0aW9uJ1xuXHRcdCdBbGxDb2xsZWN0aW9uJ1xuXHRdXG5cdGVsZW1lbnRTdWZmaXggPSBbXG5cdFx0XCJWaWRlb1wiLFwiVW5rbm93blwiLFwiVUxpc3RcIixcIlRyYWNrXCIsXCJUaXRsZVwiLFxuXHRcdFwiVGV4dEFyZWFcIixcIlRlbXBsYXRlXCIsXCJUYWJsZVNlY3Rpb25cIixcIlRhYmxlUm93XCIsXG5cdFx0XCJUYWJsZVwiLFwiVGFibGVDb2xcIixcIlRhYmxlQ2VsbFwiLFwiVGFibGVDYXB0aW9uXCIsXG5cdFx0XCJTdHlsZVwiLFwiU3BhblwiLFwiU291cmNlXCIsXCJTbG90XCIsXCJTaGFkb3dcIixcIlNlbGVjdFwiLFxuXHRcdFwiU2NyaXB0XCIsXCJRdW90ZVwiLFwiUHJvZ3Jlc3NcIixcIlByZVwiLFwiUGljdHVyZVwiLFxuXHRcdFwiUGFyYW1cIixcIlBhcmFncmFwaFwiLFwiT3V0cHV0XCIsXCJPcHRpb25cIixcIk9wdEdyb3VwXCIsXG5cdFx0XCJPYmplY3RcIixcIk9MaXN0XCIsXCJNb2RcIixcIk1ldGVyXCIsXCJNZXRhXCIsXCJNZW51XCIsXG5cdFx0XCJNZWRpYVwiLFwiTWFycXVlZVwiLFwiTWFwXCIsXCJMaW5rXCIsXCJMZWdlbmRcIixcIkxhYmVsXCIsXG5cdFx0XCJMSVwiLFwiSW5wdXRcIixcIkltYWdlXCIsXCJJRnJhbWVcIixcIkh0bWxcIixcIkhlYWRpbmdcIixcblx0XHRcIkhlYWRcIixcIkhSXCIsXCJGcmFtZVNldFwiLFwiRnJhbWVcIixcIkZvcm1cIixcIkZvbnRcIixcblx0XHRcIkZpZWxkU2V0XCIsXCJFbWJlZFwiLFwiRGl2XCIsXCJEaXJlY3RvcnlcIixcIkRpYWxvZ1wiLFxuXHRcdFwiRGV0YWlsc1wiLFwiRGF0YUxpc3RcIixcIkRMaXN0XCIsXCJDb250ZW50XCIsXCJDYW52YXNcIixcblx0XHRcIkJ1dHRvblwiLFwiQm9keVwiLFwiQmFzZVwiLFwiQlJcIixcIkF1ZGlvXCIsXCJBcmVhXCIsXCJBbmNob3JcIlxuXHRdXG5cblx0Zm9yIGNyZWF0b3IgaW4gbm9uRWxlbWVudFN1ZmZpeFxuXHRcdHdpbmRvd1tcIkhUTUwje2NyZWF0b3J9XCJdPy5uYW1lID0gXCJIVE1MI3tjcmVhdG9yfVwiXG5cblx0Zm9yIGNyZWF0b3IgaW4gZWxlbWVudFN1ZmZpeFxuXHRcdHdpbmRvd1tcIkhUTUwje2NyZWF0b3J9RWxlbWVudFwiXT8ubmFtZSA9IFwiSFRNTCN7Y3JlYXRvcn1FbGVtZW50XCJcblxuXHR3aW5kb3cuU1ZHRWxlbWVudD8ubmFtZSA9ICdTVkdFbGVtZW50J1xuXHR3aW5kb3cuU1ZHU1ZHRWxlbWVudD8ubmFtZSA9ICdTVkdTVkdFbGVtZW50J1xuXHR3aW5kb3cuU1ZHUG9seWxpbmVFbGVtZW50Py5uYW1lID0gJ1NWR1BvbHlsaW5lRWxlbWVudCdcblxud2luZG93LkNsaWVudFJlY3QgPz0gRE9NUmVjdFxuXG5cblxuXG4iLCJ7XG4gIFwibmFtZVwiOiBcInF1aWNrZG9tXCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMC45MFwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiRmFzdCAmIGxpZ2h0IERPTSBlbGVtZW50IG1hbmFnZW1lbnQgc3VwcG9ydGluZyBqcXVlcnktbGlrZSBtZXRob2RzLCB0ZW1wbGF0ZXMsICYgc3RhdGUtYmFzZWQgc3R5bGluZ1wiLFxuICBcIm1haW5cIjogXCJkaXN0L3F1aWNrZG9tLmpzXCIsXG4gIFwiYnJvd3NlclwiOiB7XG4gICAgXCIuL2RlYnVnXCI6IFwiZGlzdC9xdWlja2RvbS5kZWJ1Zy5qc1wiLFxuICAgIFwiLi9kaXN0L3F1aWNrZG9tLmpzXCI6IFwic3JjL2luZGV4LmNvZmZlZVwiXG4gIH0sXG4gIFwiYnJvd3NlcmlmeVwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogW1xuICAgICAgXCJzaW1wbHlpbXBvcnQvY29tcGF0XCJcbiAgICBdXG4gIH0sXG4gIFwic2ltcGx5aW1wb3J0XCI6IHtcbiAgICBcImZpbmFsVHJhbnNmb3JtXCI6IFtcbiAgICAgIFtcbiAgICAgICAgXCJiYWJlbGlmeVwiLFxuICAgICAgICB7XG4gICAgICAgICAgXCJwcmVzZXRzXCI6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgXCJAYmFiZWwvcHJlc2V0LWVudlwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJtb2R1bGVzXCI6IGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcIi5jb25maWcvdHJhbnNmb3Jtcy9taW5pZnktc3VwZXJcIixcbiAgICAgIFwiLmNvbmZpZy90cmFuc2Zvcm1zL21pbmlmeS1yZW5hbWVcIixcbiAgICAgIFwiLmNvbmZpZy90cmFuc2Zvcm1zL21pbmlmeS1zaW1wbGVcIlxuICAgIF1cbiAgfSxcbiAgXCJkaXJlY3Rvcmllc1wiOiB7XG4gICAgXCJ0ZXN0XCI6IFwidGVzdFwiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJwb3N0dmVyc2lvblwiOiBcIm5wbSBydW4gYnVpbGQgJiYgZ2l0IGFkZCAuICYmIGdpdCBjb21taXQgLWEgLW0gJ1tCdWlsZF0nXCIsXG4gICAgXCJwcmVwdWJsaXNoT25seVwiOiBcIm5wbSBydW4gdGVzdDp0cmF2aXNcIixcbiAgICBcInBvc3RwdWJsaXNoXCI6IFwiZ2l0IHB1c2hcIixcbiAgICBcIndhdGNoXCI6IFwiY2FrZSAtZCB3YXRjaFwiLFxuICAgIFwiYnVpbGRcIjogXCJjYWtlIC1kIGJ1aWxkICYmIGNha2UgYnVpbGQgJiYgY2FrZSBtZWFzdXJlICYmIGNwIC1yIGJ1aWxkLyogZGlzdC9cIixcbiAgICBcInRlc3RcIjogXCJucG0gcnVuIHRlc3Q6YnJvd3NlciAtcyB8fCB0cnVlXCIsXG4gICAgXCJ0ZXN0OnRyYXZpc1wiOiBcIm5wbSBydW4gdGVzdDpicm93c2VyIC1zICYmIG5wbSBydW4gdGVzdDptaW5pZmllZCAtc1wiLFxuICAgIFwidGVzdDpsb2NhbFwiOiBcIm9wZW4gdGVzdC90ZXN0cnVubmVyLmh0bWxcIixcbiAgICBcInRlc3Q6bWluaWZpZWRcIjogXCJtaW5pZmllZD0xIG5wbSBydW4gdGVzdDpicm93c2VyIC1zIHx8IHRydWVcIixcbiAgICBcInRlc3Q6a2FybWFcIjogXCJjYWtlIGluc3RhbGw6dGVzdDsgICBrYXJtYSBzdGFydCAuY29uZmlnL2thcm1hLmNvbmYuY29mZmVlXCIsXG4gICAgXCJ0ZXN0OmJyb3dzZXJcIjogXCJjYWtlIGluc3RhbGw6dGVzdDsga2FybWEgc3RhcnQgLS1zaW5nbGUtcnVuIC0tYnJvd3NlcnMgRWxlY3Ryb24gLmNvbmZpZy9rYXJtYS5jb25mLmNvZmZlZVwiLFxuICAgIFwidGVzdDpjaHJvbWVcIjogXCJjYWtlIGluc3RhbGw6dGVzdDsgIGthcm1hIHN0YXJ0IC0tc2luZ2xlLXJ1biAtLWJyb3dzZXJzIENocm9tZSAuY29uZmlnL2thcm1hLmNvbmYuY29mZmVlXCIsXG4gICAgXCJ0ZXN0OmZpcmVmb3hcIjogXCJjYWtlIGluc3RhbGw6dGVzdDsga2FybWEgc3RhcnQgLS1zaW5nbGUtcnVuIC0tYnJvd3NlcnMgRmlyZWZveCAuY29uZmlnL2thcm1hLmNvbmYuY29mZmVlXCIsXG4gICAgXCJ0ZXN0OnNhZmFyaVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAga2FybWEgc3RhcnQgLS1zaW5nbGUtcnVuIC0tYnJvd3NlcnMgU2FmYXJpIC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6c2F1Y2VcIjogXCJjYWtlIGluc3RhbGw6dGVzdDsgICBzYXVjZT0xIGthcm1hIHN0YXJ0IC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcImNvdmVyYWdlXCI6IFwiY2FrZSBpbnN0YWxsOmNvdmVyYWdlOyBucG0gcnVuIGNvdmVyYWdlOnJ1biAmJiBucG0gcnVuIGNvdmVyYWdlOmJhZGdlXCIsXG4gICAgXCJjb3ZlcmFnZTpydW5cIjogXCJjb3ZlcmFnZT10cnVlIG5wbSBydW4gdGVzdDplbGVjdHJvblwiLFxuICAgIFwiY292ZXJhZ2U6YmFkZ2VcIjogXCJiYWRnZS1nZW4gLWQgLi8uY29uZmlnL2JhZGdlcy9jb3ZlcmFnZVwiLFxuICAgIFwiY292ZXJhZ2U6c2hvd1wiOiBcIm9wZW4gY292ZXJhZ2UvbGNvdi1yZXBvcnQvaW5kZXguaHRtbFwiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGthbGVuL3F1aWNrZG9tLmdpdFwiXG4gIH0sXG4gIFwiYXV0aG9yXCI6IFwiZGFuaWVsa2FsZW5cIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsa2FsZW4vcXVpY2tkb20vaXNzdWVzXCJcbiAgfSxcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxrYWxlbi9xdWlja2RvbSNyZWFkbWVcIixcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGRhbmllbGthbGVuL2lzXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJxdWlja2Nzc1wiOiBcIl4xLjMuNFwiLFxuICAgIFwic21hcnQtZXh0ZW5kXCI6IFwiXjEuNy4zXCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmx1ZWJpcmRcIjogXCJeMy41LjBcIixcbiAgICBcImNoYWxrXCI6IFwiXjIuMC4xXCIsXG4gICAgXCJjb2ZmZWUtc2NyaXB0XCI6IFwiXjEuMTIuNlwiLFxuICAgIFwiZXhlY2FcIjogXCJeMC43LjBcIixcbiAgICBcImZzLWpldHBhY2tcIjogXCJeMC4xMy4zXCIsXG4gICAgXCJwcm9taXNlLWJyZWFrXCI6IFwiXjAuMS4yXCIsXG4gICAgXCJzZW12ZXJcIjogXCJeNS4zLjBcIlxuICB9XG59XG4iLCJvcmlnRGVzY3JpcHRvcnMgPSBcblx0J2lubmVyV2lkdGgnOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2lubmVyV2lkdGgnKVxuXHQnaW5uZXJIZWlnaHQnOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2lubmVySGVpZ2h0JylcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgKCktPlxuXHRvdmVyd3JpdHRlbiA9IGZhbHNlXG5cdGN1cnJlbnQgPSB3aWR0aDp3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OndpbmRvdy5pbm5lckhlaWdodFxuXHRcblx0Z2V0UmVhbCA9IChkaW1lbnNpb24pLT5cblx0XHRkaW1lbnNpb24gPSAnaW5uZXInK2RpbWVuc2lvbi5yZXBsYWNlIC9cXGIuLywgKGxldHRlciktPiBsZXR0ZXIudG9VcHBlckNhc2UoKVxuXHRcdG9yaWdEZXNjcmlwdG9yc1tkaW1lbnNpb25dLmdldC5jYWxsKHdpbmRvdylcblxuXHRvdmVyd3JpdGUgPSAoKS0+IHVubGVzcyBvdmVyd3JpdHRlblxuXHRcdG92ZXJ3cml0dGVuID0gdHJ1ZVxuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB3aW5kb3csICdpbm5lcldpZHRoJyxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0Z2V0OiAoKS0+IGN1cnJlbnQud2lkdGhcblx0XHRcdHNldDogKG5ld1ZhbHVlKS0+IGN1cnJlbnQud2lkdGggPSBuZXdWYWx1ZVxuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB3aW5kb3csICdpbm5lckhlaWdodCcsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdGdldDogKCktPiBjdXJyZW50LmhlaWdodFxuXHRcdFx0c2V0OiAobmV3VmFsdWUpLT4gY3VycmVudC5oZWlnaHQgPSBuZXdWYWx1ZVxuXHRcblxuXHRAc2ltdWxhdGUgPSAod2lkdGgsIGhlaWdodCktPlxuXHRcdGN1cnJlbnQud2lkdGggPSB3aWR0aCBpZiB3aWR0aFxuXHRcdGN1cnJlbnQuaGVpZ2h0ID0gaGVpZ2h0IGlmIGhlaWdodFxuXHRcdFxuXHRcdG92ZXJ3cml0ZSgpXG5cdFx0ZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKVxuXHRcdGV2ZW50LmluaXRFdmVudCgncmVzaXplJywgdHJ1ZSwgZmFsc2UpXG5cdFx0d2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpXG5cblxuXHRAcmVzdG9yZSA9ICgpLT5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkgd2luZG93LCAnaW5uZXJXaWR0aCcsIG9yaWdEZXNjcmlwdG9ycy5pbm5lcldpZHRoXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5IHdpbmRvdywgJ2lubmVySGVpZ2h0Jywgb3JpZ0Rlc2NyaXB0b3JzLmlubmVySGVpZ2h0XG5cblxuXHRyZXR1cm4gQCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvY2hhaScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBjaGFpU3R5bGVcblxuZnVuY3Rpb24gY2hhaVN0eWxlKGNoYWksIHV0aWxzKSB7XG4gIGNvbnN0IHtBc3NlcnRpb259ID0gY2hhaVxuICBjb25zdCB7ZmxhZ30gPSB1dGlsc1xuICBsZXQgc2FtcGxlRGl2LCBzYW1wbGVTdHlsZSwgc2FtcGxlSWZyYW1lXG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc3R5bGUnLCBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUgPSAnJykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKVxuXG4gICAgY29uc3QgaXNOb25Db2xvcnMgPSBzdHlsZVtwcm9wZXJ0eV0gPT09ICdyZ2JhKDAsIDAsIDAsIDApJyAvLyB3ZWJraXRcbiAgICAgIHx8IHN0eWxlW3Byb3BlcnR5XSA9PT0gJ3RyYW5zcGFyZW50JyAvLyBmaXJlZm94XG5cbiAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gaXNOb25Db2xvcnNcbiAgICAgID8gJydcbiAgICAgIDogc3R5bGVbcHJvcGVydHldXG5cbiAgICBjb25zdCBhc3NlcnRpb24gPSB2YWx1ZVxuICAgICAgPyBjb21wYXJlQ1NTVmFsdWUocHJvcGVydHlWYWx1ZSwgdmFsdWUpXG4gICAgICA6IEJvb2xlYW4ocHJvcGVydHlWYWx1ZSlcblxuICAgIGNvbnN0IGVsZW1lbnRUYWcgPSBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuXG4gICAgY29uc3QgdGhyb3dNZXNzYWdlID0gYGV4cGVjdCAke2VsZW1lbnRUYWd9IHRvIGhhdmUgeyR7cHJvcGVydHl9OiAke3ZhbHVlfX0sIGlzIHJlY2VpdmluZyB7JHtwcm9wZXJ0eX06ICR7cHJvcGVydHlWYWx1ZX19YFxuICAgIGNvbnN0IHRocm93TWVzc2FnZU5lZ2F0aXZlID0gYGV4cGVjdCAke2VsZW1lbnRUYWd9IHRvIG5vdCBoYXZlIHske3Byb3BlcnR5fTogJHt2YWx1ZX19LCBpcyByZWNlaXZpbmcgeyR7cHJvcGVydHl9OiAke3Byb3BlcnR5VmFsdWV9fWBcblxuICAgIHRoaXMuYXNzZXJ0KGFzc2VydGlvbiwgdGhyb3dNZXNzYWdlLCB0aHJvd01lc3NhZ2VOZWdhdGl2ZSwgdmFsdWUpXG5cbiAgICBmdW5jdGlvbiBjb21wYXJlQ1NTVmFsdWUoY29tcHV0ZWQsIGV4cGVjdGVkKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eUhpZmVuQ2FzZSA9IHByb3BlcnR5LnJlcGxhY2UoL1tBLVpdL2csIChtYXRjaCkgPT4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKSlcbiAgICAgIGlmICghc2FtcGxlRGl2KSB7XG4gICAgICAgIHNhbXBsZUlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpXG4gICAgICAgIHNhbXBsZURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHNhbXBsZVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2FtcGxlRGl2KVxuXG4gICAgICAgIHNhbXBsZUlmcmFtZS5hcHBlbmRDaGlsZChzYW1wbGVEaXYpXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2FtcGxlSWZyYW1lKVxuICAgICAgfVxuICAgICAgc2FtcGxlRGl2LnN0eWxlLmZvbnRTaXplID0gc3R5bGUuZm9udFNpemVcbiAgICAgIHNhbXBsZURpdi5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eUhpZmVuQ2FzZSwgZXhwZWN0ZWQsICdpbXBvcnRhbnQnKVxuICAgICAgY29uc3QgdmFsdWUgPSBzYW1wbGVTdHlsZVtwcm9wZXJ0eV1cblxuICAgICAgY29uc3QgaGFzQXV0b1ZhbHVlID0gdmFsdWUuaW5jbHVkZXMoJ2F1dG8nKVxuICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodmFsdWUpLnJlcGxhY2UoL2F1dG8vZywgJyhcXFxcZCsoLlxcXFxkKyk/cHh8YXV0byknKSlcbiAgICAgIHNhbXBsZURpdi5zdHlsZS5mb250U2l6ZSA9IG51bGxcbiAgICAgIHNhbXBsZURpdi5zdHlsZVtwcm9wZXJ0eUhpZmVuQ2FzZV0gPSBudWxsXG5cbiAgICAgIHJldHVybiBoYXNBdXRvVmFsdWVcbiAgICAgICAgPyByZWcudGVzdChjb21wdXRlZClcbiAgICAgICAgOiBjb21wdXRlZCA9PT0gdmFsdWVcbiAgICB9XG4gIH0pXG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JlZ0V4cC5lc2NhcGUvYmxvYi9tYXN0ZXIvcG9seWZpbGwuanNcbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cCh2YWx1ZSkge1xuICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJylcbn1cbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciB1c2VkID0gW107XG5cbi8qIVxuICogQ2hhaSB2ZXJzaW9uXG4gKi9cblxuZXhwb3J0cy52ZXJzaW9uID0gJzQuMS4yJztcblxuLyohXG4gKiBBc3NlcnRpb24gRXJyb3JcbiAqL1xuXG5leHBvcnRzLkFzc2VydGlvbkVycm9yID0gcmVxdWlyZSgnYXNzZXJ0aW9uLWVycm9yJyk7XG5cbi8qIVxuICogVXRpbHMgZm9yIHBsdWdpbnMgKG5vdCBleHBvcnRlZClcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vY2hhaS91dGlscycpO1xuXG4vKipcbiAqICMgLnVzZShmdW5jdGlvbilcbiAqXG4gKiBQcm92aWRlcyBhIHdheSB0byBleHRlbmQgdGhlIGludGVybmFscyBvZiBDaGFpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259XG4gKiBAcmV0dXJucyB7dGhpc30gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudXNlID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICghfnVzZWQuaW5kZXhPZihmbikpIHtcbiAgICBmbihleHBvcnRzLCB1dGlsKTtcbiAgICB1c2VkLnB1c2goZm4pO1xuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHM7XG59O1xuXG4vKiFcbiAqIFV0aWxpdHkgRnVuY3Rpb25zXG4gKi9cblxuZXhwb3J0cy51dGlsID0gdXRpbDtcblxuLyohXG4gKiBDb25maWd1cmF0aW9uXG4gKi9cblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY2hhaS9jb25maWcnKTtcbmV4cG9ydHMuY29uZmlnID0gY29uZmlnO1xuXG4vKiFcbiAqIFByaW1hcnkgYEFzc2VydGlvbmAgcHJvdG90eXBlXG4gKi9cblxudmFyIGFzc2VydGlvbiA9IHJlcXVpcmUoJy4vY2hhaS9hc3NlcnRpb24nKTtcbmV4cG9ydHMudXNlKGFzc2VydGlvbik7XG5cbi8qIVxuICogQ29yZSBBc3NlcnRpb25zXG4gKi9cblxudmFyIGNvcmUgPSByZXF1aXJlKCcuL2NoYWkvY29yZS9hc3NlcnRpb25zJyk7XG5leHBvcnRzLnVzZShjb3JlKTtcblxuLyohXG4gKiBFeHBlY3QgaW50ZXJmYWNlXG4gKi9cblxudmFyIGV4cGVjdCA9IHJlcXVpcmUoJy4vY2hhaS9pbnRlcmZhY2UvZXhwZWN0Jyk7XG5leHBvcnRzLnVzZShleHBlY3QpO1xuXG4vKiFcbiAqIFNob3VsZCBpbnRlcmZhY2VcbiAqL1xuXG52YXIgc2hvdWxkID0gcmVxdWlyZSgnLi9jaGFpL2ludGVyZmFjZS9zaG91bGQnKTtcbmV4cG9ydHMudXNlKHNob3VsZCk7XG5cbi8qIVxuICogQXNzZXJ0IGludGVyZmFjZVxuICovXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCcuL2NoYWkvaW50ZXJmYWNlL2Fzc2VydCcpO1xuZXhwb3J0cy51c2UoYXNzZXJ0KTtcbiIsIi8qIVxuICogYXNzZXJ0aW9uLWVycm9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBKYWtlIEx1ZXIgPGpha2VAcXVhbGlhbmN5LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBvbmUgb2JqZWN0IHRvIGFub3RoZXIgZXhjbHVkaW5nIGFueSBvcmlnaW5hbGx5XG4gKiBsaXN0ZWQuIFJldHVybmVkIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgbmV3IGB7fWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV4Y2x1ZGVkIHByb3BlcnRpZXMgLi4uXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuXG5mdW5jdGlvbiBleGNsdWRlICgpIHtcbiAgdmFyIGV4Y2x1ZGVzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIGZ1bmN0aW9uIGV4Y2x1ZGVQcm9wcyAocmVzLCBvYmopIHtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCF+ZXhjbHVkZXMuaW5kZXhPZihrZXkpKSByZXNba2V5XSA9IG9ialtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGV4dGVuZEV4Y2x1ZGUgKCkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAsIGkgPSAwXG4gICAgICAsIHJlcyA9IHt9O1xuXG4gICAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleGNsdWRlUHJvcHMocmVzLCBhcmdzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xufTtcblxuLyohXG4gKiBQcmltYXJ5IEV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2VydGlvbkVycm9yO1xuXG4vKipcbiAqICMjIyBBc3NlcnRpb25FcnJvclxuICpcbiAqIEFuIGV4dGVuc2lvbiBvZiB0aGUgSmF2YVNjcmlwdCBgRXJyb3JgIGNvbnN0cnVjdG9yIGZvclxuICogYXNzZXJ0aW9uIGFuZCB2YWxpZGF0aW9uIHNjZW5hcmlvcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgdG8gaW5jbHVkZSAob3B0aW9uYWwpXG4gKiBAcGFyYW0ge2NhbGxlZX0gc3RhcnQgc3RhY2sgZnVuY3Rpb24gKG9wdGlvbmFsKVxuICovXG5cbmZ1bmN0aW9uIEFzc2VydGlvbkVycm9yIChtZXNzYWdlLCBfcHJvcHMsIHNzZikge1xuICB2YXIgZXh0ZW5kID0gZXhjbHVkZSgnbmFtZScsICdtZXNzYWdlJywgJ3N0YWNrJywgJ2NvbnN0cnVjdG9yJywgJ3RvSlNPTicpXG4gICAgLCBwcm9wcyA9IGV4dGVuZChfcHJvcHMgfHwge30pO1xuXG4gIC8vIGRlZmF1bHQgdmFsdWVzXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ1Vuc3BlY2lmaWVkIEFzc2VydGlvbkVycm9yJztcbiAgdGhpcy5zaG93RGlmZiA9IGZhbHNlO1xuXG4gIC8vIGNvcHkgZnJvbSBwcm9wZXJ0aWVzXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHRoaXNba2V5XSA9IHByb3BzW2tleV07XG4gIH1cblxuICAvLyBjYXB0dXJlIHN0YWNrIHRyYWNlXG4gIHNzZiA9IHNzZiB8fCBhcmd1bWVudHMuY2FsbGVlO1xuICBpZiAoc3NmICYmIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgc3NmKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aGlzLnN0YWNrID0gZS5zdGFjaztcbiAgICB9XG4gIH1cbn1cblxuLyohXG4gKiBJbmhlcml0IGZyb20gRXJyb3IucHJvdG90eXBlXG4gKi9cblxuQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuXG4vKiFcbiAqIFN0YXRpY2FsbHkgc2V0IG5hbWVcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG5cbi8qIVxuICogRW5zdXJlIGNvcnJlY3QgY29uc3RydWN0b3JcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBc3NlcnRpb25FcnJvcjtcblxuLyoqXG4gKiBBbGxvdyBlcnJvcnMgdG8gYmUgY29udmVydGVkIHRvIEpTT04gZm9yIHN0YXRpYyB0cmFuc2Zlci5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGluY2x1ZGUgc3RhY2sgKGRlZmF1bHQ6IGB0cnVlYClcbiAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHRoYXQgY2FuIGJlIGBKU09OLnN0cmluZ2lmeWBcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKHN0YWNrKSB7XG4gIHZhciBleHRlbmQgPSBleGNsdWRlKCdjb25zdHJ1Y3RvcicsICd0b0pTT04nLCAnc3RhY2snKVxuICAgICwgcHJvcHMgPSBleHRlbmQoeyBuYW1lOiB0aGlzLm5hbWUgfSwgdGhpcyk7XG5cbiAgLy8gaW5jbHVkZSBzdGFjayBpZiBleGlzdHMgYW5kIG5vdCB0dXJuZWQgb2ZmXG4gIGlmIChmYWxzZSAhPT0gc3RhY2sgJiYgdGhpcy5zdGFjaykge1xuICAgIHByb3BzLnN0YWNrID0gdGhpcy5zdGFjaztcbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn07XG4iLCIvKiFcbiAqIGNoYWlcbiAqIENvcHlyaWdodChjKSAyMDExIEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBEZXBlbmRlbmNpZXMgdGhhdCBhcmUgdXNlZCBmb3IgbXVsdGlwbGUgZXhwb3J0cyBhcmUgcmVxdWlyZWQgaGVyZSBvbmx5IG9uY2VcbiAqL1xuXG52YXIgcGF0aHZhbCA9IHJlcXVpcmUoJ3BhdGh2YWwnKTtcblxuLyohXG4gKiB0ZXN0IHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLnRlc3QgPSByZXF1aXJlKCcuL3Rlc3QnKTtcblxuLyohXG4gKiB0eXBlIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLnR5cGUgPSByZXF1aXJlKCd0eXBlLWRldGVjdCcpO1xuXG4vKiFcbiAqIGV4cGVjdFR5cGVzIHV0aWxpdHlcbiAqL1xuZXhwb3J0cy5leHBlY3RUeXBlcyA9IHJlcXVpcmUoJy4vZXhwZWN0VHlwZXMnKTtcblxuLyohXG4gKiBtZXNzYWdlIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLmdldE1lc3NhZ2UgPSByZXF1aXJlKCcuL2dldE1lc3NhZ2UnKTtcblxuLyohXG4gKiBhY3R1YWwgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZ2V0QWN0dWFsID0gcmVxdWlyZSgnLi9nZXRBY3R1YWwnKTtcblxuLyohXG4gKiBJbnNwZWN0IHV0aWxcbiAqL1xuXG5leHBvcnRzLmluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcblxuLyohXG4gKiBPYmplY3QgRGlzcGxheSB1dGlsXG4gKi9cblxuZXhwb3J0cy5vYmpEaXNwbGF5ID0gcmVxdWlyZSgnLi9vYmpEaXNwbGF5Jyk7XG5cbi8qIVxuICogRmxhZyB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5mbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG5cbi8qIVxuICogRmxhZyB0cmFuc2ZlcnJpbmcgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMudHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKiFcbiAqIERlZXAgZXF1YWwgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZXFsID0gcmVxdWlyZSgnZGVlcC1lcWwnKTtcblxuLyohXG4gKiBEZWVwIHBhdGggaW5mb1xuICovXG5cbmV4cG9ydHMuZ2V0UGF0aEluZm8gPSBwYXRodmFsLmdldFBhdGhJbmZvO1xuXG4vKiFcbiAqIENoZWNrIGlmIGEgcHJvcGVydHkgZXhpc3RzXG4gKi9cblxuZXhwb3J0cy5oYXNQcm9wZXJ0eSA9IHBhdGh2YWwuaGFzUHJvcGVydHk7XG5cbi8qIVxuICogRnVuY3Rpb24gbmFtZVxuICovXG5cbmV4cG9ydHMuZ2V0TmFtZSA9IHJlcXVpcmUoJ2dldC1mdW5jLW5hbWUnKTtcblxuLyohXG4gKiBhZGQgUHJvcGVydHlcbiAqL1xuXG5leHBvcnRzLmFkZFByb3BlcnR5ID0gcmVxdWlyZSgnLi9hZGRQcm9wZXJ0eScpO1xuXG4vKiFcbiAqIGFkZCBNZXRob2RcbiAqL1xuXG5leHBvcnRzLmFkZE1ldGhvZCA9IHJlcXVpcmUoJy4vYWRkTWV0aG9kJyk7XG5cbi8qIVxuICogb3ZlcndyaXRlIFByb3BlcnR5XG4gKi9cblxuZXhwb3J0cy5vdmVyd3JpdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vb3ZlcndyaXRlUHJvcGVydHknKTtcblxuLyohXG4gKiBvdmVyd3JpdGUgTWV0aG9kXG4gKi9cblxuZXhwb3J0cy5vdmVyd3JpdGVNZXRob2QgPSByZXF1aXJlKCcuL292ZXJ3cml0ZU1ldGhvZCcpO1xuXG4vKiFcbiAqIEFkZCBhIGNoYWluYWJsZSBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmFkZENoYWluYWJsZU1ldGhvZCA9IHJlcXVpcmUoJy4vYWRkQ2hhaW5hYmxlTWV0aG9kJyk7XG5cbi8qIVxuICogT3ZlcndyaXRlIGNoYWluYWJsZSBtZXRob2RcbiAqL1xuXG5leHBvcnRzLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCA9IHJlcXVpcmUoJy4vb3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kJyk7XG5cbi8qIVxuICogQ29tcGFyZSBieSBpbnNwZWN0IG1ldGhvZFxuICovXG5cbmV4cG9ydHMuY29tcGFyZUJ5SW5zcGVjdCA9IHJlcXVpcmUoJy4vY29tcGFyZUJ5SW5zcGVjdCcpO1xuXG4vKiFcbiAqIEdldCBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyA9IHJlcXVpcmUoJy4vZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scycpO1xuXG4vKiFcbiAqIEdldCBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzJyk7XG5cbi8qIVxuICogQ2hlY2tzIGVycm9yIGFnYWluc3QgYSBnaXZlbiBzZXQgb2YgY3JpdGVyaWFcbiAqL1xuXG5leHBvcnRzLmNoZWNrRXJyb3IgPSByZXF1aXJlKCdjaGVjay1lcnJvcicpO1xuXG4vKiFcbiAqIFByb3hpZnkgdXRpbFxuICovXG5cbmV4cG9ydHMucHJveGlmeSA9IHJlcXVpcmUoJy4vcHJveGlmeScpO1xuXG4vKiFcbiAqIGFkZExlbmd0aEd1YXJkIHV0aWxcbiAqL1xuXG5leHBvcnRzLmFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xuXG4vKiFcbiAqIGlzUHJveHlFbmFibGVkIGhlbHBlclxuICovXG5cbmV4cG9ydHMuaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG5cbi8qIVxuICogaXNOYU4gbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5pc05hTiA9IHJlcXVpcmUoJy4vaXNOYU4nKTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLmluY2x1ZGVTdGFja1xuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgaW5mbHVlbmNlcyB3aGV0aGVyIHN0YWNrIHRyYWNlXG4gICAqIGlzIGluY2x1ZGVkIGluIEFzc2VydGlvbiBlcnJvciBtZXNzYWdlLiBEZWZhdWx0IG9mIGZhbHNlXG4gICAqIHN1cHByZXNzZXMgc3RhY2sgdHJhY2UgaW4gdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAqXG4gICAqICAgICBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgPSB0cnVlOyAgLy8gZW5hYmxlIHN0YWNrIG9uIGVycm9yXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgaW5jbHVkZVN0YWNrOiBmYWxzZSxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy5zaG93RGlmZlxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgaW5mbHVlbmNlcyB3aGV0aGVyIG9yIG5vdFxuICAgKiB0aGUgYHNob3dEaWZmYCBmbGFnIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgdGhyb3duXG4gICAqIEFzc2VydGlvbkVycm9ycy4gYGZhbHNlYCB3aWxsIGFsd2F5cyBiZSBgZmFsc2VgOyBgdHJ1ZWBcbiAgICogd2lsbCBiZSB0cnVlIHdoZW4gdGhlIGFzc2VydGlvbiBoYXMgcmVxdWVzdGVkIGEgZGlmZlxuICAgKiBiZSBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzaG93RGlmZjogdHJ1ZSxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZFxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgc2V0cyBsZW5ndGggdGhyZXNob2xkIGZvciBhY3R1YWwgYW5kXG4gICAqIGV4cGVjdGVkIHZhbHVlcyBpbiBhc3NlcnRpb24gZXJyb3JzLiBJZiB0aGlzIHRocmVzaG9sZCBpcyBleGNlZWRlZCwgZm9yXG4gICAqIGV4YW1wbGUgZm9yIGxhcmdlIGRhdGEgc3RydWN0dXJlcywgdGhlIHZhbHVlIGlzIHJlcGxhY2VkIHdpdGggc29tZXRoaW5nXG4gICAqIGxpa2UgYFsgQXJyYXkoMykgXWAgb3IgYHsgT2JqZWN0IChwcm9wMSwgcHJvcDIpIH1gLlxuICAgKlxuICAgKiBTZXQgaXQgdG8gemVybyBpZiB5b3Ugd2FudCB0byBkaXNhYmxlIHRydW5jYXRpbmcgYWx0b2dldGhlci5cbiAgICpcbiAgICogVGhpcyBpcyBlc3BlY2lhbGx5IHVzZXJmdWwgd2hlbiBkb2luZyBhc3NlcnRpb25zIG9uIGFycmF5czogaGF2aW5nIHRoaXNcbiAgICogc2V0IHRvIGEgcmVhc29uYWJsZSBsYXJnZSB2YWx1ZSBtYWtlcyB0aGUgZmFpbHVyZSBtZXNzYWdlcyByZWFkaWx5XG4gICAqIGluc3BlY3RhYmxlLlxuICAgKlxuICAgKiAgICAgY2hhaS5jb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgPSAwOyAgLy8gZGlzYWJsZSB0cnVuY2F0aW5nXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB0cnVuY2F0ZVRocmVzaG9sZDogNDAsXG5cbiAgLyoqXG4gICAqICMjIyBjb25maWcudXNlUHJveHlcbiAgICpcbiAgICogVXNlciBjb25maWd1cmFibGUgcHJvcGVydHksIGRlZmluZXMgaWYgY2hhaSB3aWxsIHVzZSBhIFByb3h5IHRvIHRocm93XG4gICAqIGFuIGVycm9yIHdoZW4gYSBub24tZXhpc3RlbnQgcHJvcGVydHkgaXMgcmVhZCwgd2hpY2ggcHJvdGVjdHMgdXNlcnNcbiAgICogZnJvbSB0eXBvcyB3aGVuIHVzaW5nIHByb3BlcnR5LWJhc2VkIGFzc2VydGlvbnMuXG4gICAqXG4gICAqIFNldCBpdCB0byBmYWxzZSBpZiB5b3Ugd2FudCB0byBkaXNhYmxlIHRoaXMgZmVhdHVyZS5cbiAgICpcbiAgICogICAgIGNoYWkuY29uZmlnLnVzZVByb3h5ID0gZmFsc2U7ICAvLyBkaXNhYmxlIHVzZSBvZiBQcm94eVxuICAgKlxuICAgKiBUaGlzIGZlYXR1cmUgaXMgYXV0b21hdGljYWxseSBkaXNhYmxlZCByZWdhcmRsZXNzIG9mIHRoaXMgY29uZmlnIHZhbHVlXG4gICAqIGluIGVudmlyb25tZW50cyB0aGF0IGRvbid0IHN1cHBvcnQgcHJveGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB1c2VQcm94eTogdHJ1ZSxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5c1xuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgZGVmaW5lcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBpZ25vcmVkXG4gICAqIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IgaWYgdGhleSBkbyBub3QgZXhpc3Qgb24gdGhlIGFzc2VydGlvbi5cbiAgICogVGhpcyBpcyBvbmx5IGFwcGxpZWQgaWYgdGhlIGVudmlyb25tZW50IENoYWkgaXMgcnVubmluZyBpbiBzdXBwb3J0cyBwcm94aWVzIGFuZFxuICAgKiBpZiB0aGUgYHVzZVByb3h5YCBjb25maWd1cmF0aW9uIHNldHRpbmcgaXMgZW5hYmxlZC5cbiAgICogQnkgZGVmYXVsdCwgYHRoZW5gIGFuZCBgaW5zcGVjdGAgd2lsbCBub3QgdGhyb3cgYW4gZXJyb3IgaWYgdGhleSBkbyBub3QgZXhpc3Qgb24gdGhlXG4gICAqIGFzc2VydGlvbiBvYmplY3QgYmVjYXVzZSB0aGUgYC5pbnNwZWN0YCBwcm9wZXJ0eSBpcyByZWFkIGJ5IGB1dGlsLmluc3BlY3RgIChmb3IgZXhhbXBsZSwgd2hlblxuICAgKiB1c2luZyBgY29uc29sZS5sb2dgIG9uIHRoZSBhc3NlcnRpb24gb2JqZWN0KSBhbmQgYC50aGVuYCBpcyBuZWNlc3NhcnkgZm9yIHByb21pc2UgdHlwZS1jaGVja2luZy5cbiAgICpcbiAgICogICAgIC8vIEJ5IGRlZmF1bHQgdGhlc2Uga2V5cyB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGUgYXNzZXJ0aW9uIG9iamVjdFxuICAgKiAgICAgY2hhaS5jb25maWcucHJveHlFeGNsdWRlZEtleXMgPSBbJ3RoZW4nLCAnaW5zcGVjdCddO1xuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBwcm94eUV4Y2x1ZGVkS2V5czogWyd0aGVuJywgJ2luc3BlY3QnLCAndG9KU09OJ11cbn07XG4iLCIvKiFcbiAqIGNoYWlcbiAqIGh0dHA6Ly9jaGFpanMuY29tXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9jaGFpLCB1dGlsKSB7XG4gIC8qIVxuICAgKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICAgKi9cblxuICB2YXIgQXNzZXJ0aW9uRXJyb3IgPSBfY2hhaS5Bc3NlcnRpb25FcnJvclxuICAgICwgZmxhZyA9IHV0aWwuZmxhZztcblxuICAvKiFcbiAgICogTW9kdWxlIGV4cG9ydC5cbiAgICovXG5cbiAgX2NoYWkuQXNzZXJ0aW9uID0gQXNzZXJ0aW9uO1xuXG4gIC8qIVxuICAgKiBBc3NlcnRpb24gQ29uc3RydWN0b3JcbiAgICpcbiAgICogQ3JlYXRlcyBvYmplY3QgZm9yIGNoYWluaW5nLlxuICAgKlxuICAgKiBgQXNzZXJ0aW9uYCBvYmplY3RzIGNvbnRhaW4gbWV0YWRhdGEgaW4gdGhlIGZvcm0gb2YgZmxhZ3MuIFRocmVlIGZsYWdzIGNhblxuICAgKiBiZSBhc3NpZ25lZCBkdXJpbmcgaW5zdGFudGlhdGlvbiBieSBwYXNzaW5nIGFyZ3VtZW50cyB0byB0aGlzIGNvbnN0cnVjdG9yOlxuICAgKlxuICAgKiAtIGBvYmplY3RgOiBUaGlzIGZsYWcgY29udGFpbnMgdGhlIHRhcmdldCBvZiB0aGUgYXNzZXJ0aW9uLiBGb3IgZXhhbXBsZSwgaW5cbiAgICogICB0aGUgYXNzZXJ0aW9uIGBleHBlY3QobnVtS2l0dGVucykudG8uZXF1YWwoNyk7YCwgdGhlIGBvYmplY3RgIGZsYWcgd2lsbFxuICAgKiAgIGNvbnRhaW4gYG51bUtpdHRlbnNgIHNvIHRoYXQgdGhlIGBlcXVhbGAgYXNzZXJ0aW9uIGNhbiByZWZlcmVuY2UgaXQgd2hlblxuICAgKiAgIG5lZWRlZC5cbiAgICpcbiAgICogLSBgbWVzc2FnZWA6IFRoaXMgZmxhZyBjb250YWlucyBhbiBvcHRpb25hbCBjdXN0b20gZXJyb3IgbWVzc2FnZSB0byBiZVxuICAgKiAgIHByZXBlbmRlZCB0byB0aGUgZXJyb3IgbWVzc2FnZSB0aGF0J3MgZ2VuZXJhdGVkIGJ5IHRoZSBhc3NlcnRpb24gd2hlbiBpdFxuICAgKiAgIGZhaWxzLlxuICAgKlxuICAgKiAtIGBzc2ZpYDogVGhpcyBmbGFnIHN0YW5kcyBmb3IgXCJzdGFydCBzdGFjayBmdW5jdGlvbiBpbmRpY2F0b3JcIi4gSXRcbiAgICogICBjb250YWlucyBhIGZ1bmN0aW9uIHJlZmVyZW5jZSB0aGF0IHNlcnZlcyBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yXG4gICAqICAgcmVtb3ZpbmcgZnJhbWVzIGZyb20gdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBlcnJvciB0aGF0J3MgY3JlYXRlZCBieSB0aGVcbiAgICogICBhc3NlcnRpb24gd2hlbiBpdCBmYWlscy4gVGhlIGdvYWwgaXMgdG8gcHJvdmlkZSBhIGNsZWFuZXIgc3RhY2sgdHJhY2UgdG9cbiAgICogICBlbmQgdXNlcnMgYnkgcmVtb3ZpbmcgQ2hhaSdzIGludGVybmFsIGZ1bmN0aW9ucy4gTm90ZSB0aGF0IGl0IG9ubHkgd29ya3NcbiAgICogICBpbiBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IGBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZWAsIGFuZCBvbmx5IHdoZW5cbiAgICogICBgQ2hhaS5jb25maWcuaW5jbHVkZVN0YWNrYCBoYXNuJ3QgYmVlbiBzZXQgdG8gYGZhbHNlYC5cbiAgICpcbiAgICogLSBgbG9ja1NzZmlgOiBUaGlzIGZsYWcgY29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGBzc2ZpYCBmbGFnXG4gICAqICAgc2hvdWxkIHJldGFpbiBpdHMgY3VycmVudCB2YWx1ZSwgZXZlbiBhcyBhc3NlcnRpb25zIGFyZSBjaGFpbmVkIG9mZiBvZlxuICAgKiAgIHRoaXMgb2JqZWN0LiBUaGlzIGlzIHVzdWFsbHkgc2V0IHRvIGB0cnVlYCB3aGVuIGNyZWF0aW5nIGEgbmV3IGFzc2VydGlvblxuICAgKiAgIGZyb20gd2l0aGluIGFub3RoZXIgYXNzZXJ0aW9uLiBJdCdzIGFsc28gdGVtcG9yYXJpbHkgc2V0IHRvIGB0cnVlYCBiZWZvcmVcbiAgICogICBhbiBvdmVyd3JpdHRlbiBhc3NlcnRpb24gZ2V0cyBjYWxsZWQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqIHRhcmdldCBvZiB0aGUgYXNzZXJ0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgKG9wdGlvbmFsKSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzc2ZpIChvcHRpb25hbCkgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIHN0YWNrIGZyYW1lc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvY2tTc2ZpIChvcHRpb25hbCkgd2hldGhlciBvciBub3QgdGhlIHNzZmkgZmxhZyBpcyBsb2NrZWRcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIGZ1bmN0aW9uIEFzc2VydGlvbiAob2JqLCBtc2csIHNzZmksIGxvY2tTc2ZpKSB7XG4gICAgZmxhZyh0aGlzLCAnc3NmaScsIHNzZmkgfHwgQXNzZXJ0aW9uKTtcbiAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIGxvY2tTc2ZpKTtcbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCBvYmopO1xuICAgIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgcmV0dXJuIHV0aWwucHJveGlmeSh0aGlzKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24sICdpbmNsdWRlU3RhY2snLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLmluY2x1ZGVTdGFjayBpcyBkZXByZWNhdGVkLCB1c2UgY2hhaS5jb25maWcuaW5jbHVkZVN0YWNrIGluc3RlYWQuJyk7XG4gICAgICByZXR1cm4gY29uZmlnLmluY2x1ZGVTdGFjaztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLmluY2x1ZGVTdGFjayBpcyBkZXByZWNhdGVkLCB1c2UgY2hhaS5jb25maWcuaW5jbHVkZVN0YWNrIGluc3RlYWQuJyk7XG4gICAgICBjb25maWcuaW5jbHVkZVN0YWNrID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXNzZXJ0aW9uLCAnc2hvd0RpZmYnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLnNob3dEaWZmIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5zaG93RGlmZiBpbnN0ZWFkLicpO1xuICAgICAgcmV0dXJuIGNvbmZpZy5zaG93RGlmZjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLnNob3dEaWZmIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5zaG93RGlmZiBpbnN0ZWFkLicpO1xuICAgICAgY29uZmlnLnNob3dEaWZmID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLmFkZFByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwuYWRkTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcikge1xuICAgIHV0aWwuYWRkQ2hhaW5hYmxlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZVByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdXRpbC5vdmVyd3JpdGVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZm4pO1xuICB9O1xuXG4gIEFzc2VydGlvbi5vdmVyd3JpdGVNZXRob2QgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLm92ZXJ3cml0ZU1ldGhvZCh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZm4pO1xuICB9O1xuXG4gIEFzc2VydGlvbi5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QgPSBmdW5jdGlvbiAobmFtZSwgZm4sIGNoYWluaW5nQmVoYXZpb3IpIHtcbiAgICB1dGlsLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZm4sIGNoYWluaW5nQmVoYXZpb3IpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmFzc2VydChleHByZXNzaW9uLCBtZXNzYWdlLCBuZWdhdGVNZXNzYWdlLCBleHBlY3RlZCwgYWN0dWFsLCBzaG93RGlmZilcbiAgICpcbiAgICogRXhlY3V0ZXMgYW4gZXhwcmVzc2lvbiBhbmQgY2hlY2sgZXhwZWN0YXRpb25zLiBUaHJvd3MgQXNzZXJ0aW9uRXJyb3IgZm9yIHJlcG9ydGluZyBpZiB0ZXN0IGRvZXNuJ3QgcGFzcy5cbiAgICpcbiAgICogQG5hbWUgYXNzZXJ0XG4gICAqIEBwYXJhbSB7UGhpbG9zb3BoaWNhbH0gZXhwcmVzc2lvbiB0byBiZSB0ZXN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IG1lc3NhZ2Ugb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiBleHByZXNzaW9uIGZhaWxzXG4gICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBuZWdhdGVkTWVzc2FnZSBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgbmVnYXRlZE1lc3NhZ2UgdG8gZGlzcGxheSBpZiBuZWdhdGVkIGV4cHJlc3Npb24gZmFpbHNcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWQgdmFsdWUgKHJlbWVtYmVyIHRvIGNoZWNrIGZvciBuZWdhdGlvbilcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsIChvcHRpb25hbCkgd2lsbCBkZWZhdWx0IHRvIGB0aGlzLm9iamBcbiAgICogQHBhcmFtIHtCb29sZWFufSBzaG93RGlmZiAob3B0aW9uYWwpIHdoZW4gc2V0IHRvIGB0cnVlYCwgYXNzZXJ0IHdpbGwgZGlzcGxheSBhIGRpZmYgaW4gYWRkaXRpb24gdG8gdGhlIG1lc3NhZ2UgaWYgZXhwcmVzc2lvbiBmYWlsc1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgQXNzZXJ0aW9uLnByb3RvdHlwZS5hc3NlcnQgPSBmdW5jdGlvbiAoZXhwciwgbXNnLCBuZWdhdGVNc2csIGV4cGVjdGVkLCBfYWN0dWFsLCBzaG93RGlmZikge1xuICAgIHZhciBvayA9IHV0aWwudGVzdCh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChmYWxzZSAhPT0gc2hvd0RpZmYpIHNob3dEaWZmID0gdHJ1ZTtcbiAgICBpZiAodW5kZWZpbmVkID09PSBleHBlY3RlZCAmJiB1bmRlZmluZWQgPT09IF9hY3R1YWwpIHNob3dEaWZmID0gZmFsc2U7XG4gICAgaWYgKHRydWUgIT09IGNvbmZpZy5zaG93RGlmZikgc2hvd0RpZmYgPSBmYWxzZTtcblxuICAgIGlmICghb2spIHtcbiAgICAgIG1zZyA9IHV0aWwuZ2V0TWVzc2FnZSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdmFyIGFjdHVhbCA9IHV0aWwuZ2V0QWN0dWFsKHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobXNnLCB7XG4gICAgICAgICAgYWN0dWFsOiBhY3R1YWxcbiAgICAgICAgLCBleHBlY3RlZDogZXhwZWN0ZWRcbiAgICAgICAgLCBzaG93RGlmZjogc2hvd0RpZmZcbiAgICAgIH0sIChjb25maWcuaW5jbHVkZVN0YWNrKSA/IHRoaXMuYXNzZXJ0IDogZmxhZyh0aGlzLCAnc3NmaScpKTtcbiAgICB9XG4gIH07XG5cbiAgLyohXG4gICAqICMjIyAuX29ialxuICAgKlxuICAgKiBRdWljayByZWZlcmVuY2UgdG8gc3RvcmVkIGBhY3R1YWxgIHZhbHVlIGZvciBwbHVnaW4gZGV2ZWxvcGVycy5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24ucHJvdG90eXBlLCAnX29iaicsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgICAgfVxuICAgICwgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIGZsYWcodGhpcywgJ29iamVjdCcsIHZhbCk7XG4gICAgICB9XG4gIH0pO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogaHR0cDovL2NoYWlqcy5jb21cbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjaGFpLCBfKSB7XG4gIHZhciBBc3NlcnRpb24gPSBjaGFpLkFzc2VydGlvblxuICAgICwgQXNzZXJ0aW9uRXJyb3IgPSBjaGFpLkFzc2VydGlvbkVycm9yXG4gICAgLCBmbGFnID0gXy5mbGFnO1xuXG4gIC8qKlxuICAgKiAjIyMgTGFuZ3VhZ2UgQ2hhaW5zXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgYXJlIHByb3ZpZGVkIGFzIGNoYWluYWJsZSBnZXR0ZXJzIHRvIGltcHJvdmUgdGhlIHJlYWRhYmlsaXR5XG4gICAqIG9mIHlvdXIgYXNzZXJ0aW9ucy5cbiAgICpcbiAgICogKipDaGFpbnMqKlxuICAgKlxuICAgKiAtIHRvXG4gICAqIC0gYmVcbiAgICogLSBiZWVuXG4gICAqIC0gaXNcbiAgICogLSB0aGF0XG4gICAqIC0gd2hpY2hcbiAgICogLSBhbmRcbiAgICogLSBoYXNcbiAgICogLSBoYXZlXG4gICAqIC0gd2l0aFxuICAgKiAtIGF0XG4gICAqIC0gb2ZcbiAgICogLSBzYW1lXG4gICAqIC0gYnV0XG4gICAqIC0gZG9lc1xuICAgKlxuICAgKiBAbmFtZSBsYW5ndWFnZSBjaGFpbnNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgWyAndG8nLCAnYmUnLCAnYmVlbidcbiAgLCAnaXMnLCAnYW5kJywgJ2hhcycsICdoYXZlJ1xuICAsICd3aXRoJywgJ3RoYXQnLCAnd2hpY2gnLCAnYXQnXG4gICwgJ29mJywgJ3NhbWUnLCAnYnV0JywgJ2RvZXMnIF0uZm9yRWFjaChmdW5jdGlvbiAoY2hhaW4pIHtcbiAgICBBc3NlcnRpb24uYWRkUHJvcGVydHkoY2hhaW4pO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5ub3RcbiAgICpcbiAgICogTmVnYXRlcyBhbGwgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBleHBlY3QoZnVuY3Rpb24gKCkge30pLnRvLm5vdC50aHJvdygpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuZG9lcy5ub3QuaW5jbHVkZSgzKTtcbiAgICpcbiAgICogSnVzdCBiZWNhdXNlIHlvdSBjYW4gbmVnYXRlIGFueSBhc3NlcnRpb24gd2l0aCBgLm5vdGAgZG9lc24ndCBtZWFuIHlvdVxuICAgKiBzaG91bGQuIFdpdGggZ3JlYXQgcG93ZXIgY29tZXMgZ3JlYXQgcmVzcG9uc2liaWxpdHkuIEl0J3Mgb2Z0ZW4gYmVzdCB0b1xuICAgKiBhc3NlcnQgdGhhdCB0aGUgb25lIGV4cGVjdGVkIG91dHB1dCB3YXMgcHJvZHVjZWQsIHJhdGhlciB0aGFuIGFzc2VydGluZ1xuICAgKiB0aGF0IG9uZSBvZiBjb3VudGxlc3MgdW5leHBlY3RlZCBvdXRwdXRzIHdhc24ndCBwcm9kdWNlZC4gU2VlIGluZGl2aWR1YWxcbiAgICogYXNzZXJ0aW9ucyBmb3Igc3BlY2lmaWMgZ3VpZGFuY2UuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmVxdWFsKDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQG5hbWUgbm90XG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnbm90JywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ25lZ2F0ZScsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwXG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5lcXVhbGAsIGAuaW5jbHVkZWAsIGAubWVtYmVyc2AsIGAua2V5c2AsIGFuZCBgLnByb3BlcnR5YFxuICAgKiBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkIG9mIHN0cmljdFxuICAgKiAoYD09PWApIGVxdWFsaXR5LiBTZWUgdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwXG4gICAqIGVxdWFsaXR5IGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbHMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmRlZXAuZXF1YWwoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaW5jbHVkZXMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8uZGVlcC5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5pbmNsdWRlKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaW5jbHVkZXMgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uZGVlcC5pbmNsdWRlKHt4OiB7YTogMX19KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIG1lbWJlciBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5oYXZlLmRlZXAubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5oYXZlLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IHNldCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBrZXkgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFt7YTogMX1dKSkudG8uaGF2ZS5kZWVwLmtleXMoW3thOiAxfV0pO1xuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoW3thOiAxfV0pKS50by5ub3QuaGF2ZS5rZXlzKFt7YTogMX1dKTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgcHJvcGVydHkgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uaGF2ZS5kZWVwLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmhhdmUucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZGVlcCcsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdkZWVwJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFxuICAgKlxuICAgKiBFbmFibGVzIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gaW4gYWxsIGAucHJvcGVydHlgIGFuZCBgLmluY2x1ZGVgXG4gICAqIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogWyd4JywgJ3knXX19KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzFdJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLm5lc3RlZC5pbmNsdWRlKHsnYS5iWzFdJzogJ3knfSk7XG4gICAqXG4gICAqIElmIGAuYCBvciBgW11gIGFyZSBwYXJ0IG9mIGFuIGFjdHVhbCBwcm9wZXJ0eSBuYW1lLCB0aGV5IGNhbiBiZSBlc2NhcGVkIGJ5XG4gICAqIGFkZGluZyB0d28gYmFja3NsYXNoZXMgYmVmb3JlIHRoZW0uXG4gICAqXG4gICAqICAgICBleHBlY3QoeycuYSc6IHsnW2JdJzogJ3gnfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdcXFxcLmEuXFxcXFtiXFxcXF0nKTtcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAneCd9fSkudG8ubmVzdGVkLmluY2x1ZGUoeydcXFxcLmEuXFxcXFtiXFxcXF0nOiAneCd9KTtcbiAgICpcbiAgICogYC5uZXN0ZWRgIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIGAub3duYC5cbiAgICpcbiAgICogQG5hbWUgbmVzdGVkXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnbmVzdGVkJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ25lc3RlZCcsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5vd25cbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLnByb3BlcnR5YCBhbmQgYC5pbmNsdWRlYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpblxuICAgKiB0byBpZ25vcmUgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd24ucHJvcGVydHkoJ2EnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2InKS5idXQubm90Lm93bi5wcm9wZXJ0eSgnYicpOyBcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm93bi5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlKHtiOiAyfSkuYnV0Lm5vdC5vd24uaW5jbHVkZSh7YjogMn0pO1xuICAgKlxuICAgKiBgLm93bmAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggYC5uZXN0ZWRgLlxuICAgKlxuICAgKiBAbmFtZSBvd25cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdvd24nLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnb3duJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm9yZGVyZWRcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLm1lbWJlcnNgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdFxuICAgKiBtZW1iZXJzIGJlIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uaGF2ZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDJdKVxuICAgKiAgICAgICAuYnV0Lm5vdC5oYXZlLm9yZGVyZWQubWVtYmVycyhbMiwgMV0pO1xuICAgKlxuICAgKiBXaGVuIGAuaW5jbHVkZWAgYW5kIGAub3JkZXJlZGAgYXJlIGNvbWJpbmVkLCB0aGUgb3JkZXJpbmcgYmVnaW5zIGF0IHRoZVxuICAgKiBzdGFydCBvZiBib3RoIGFycmF5cy5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUub3JkZXJlZC5tZW1iZXJzKFsxLCAyXSlcbiAgICogICAgICAgLmJ1dC5ub3QuaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoWzIsIDNdKTtcbiAgICpcbiAgICogQG5hbWUgb3JkZXJlZFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ29yZGVyZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnb3JkZXJlZCcsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5hbnlcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLmtleXNgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIG9ubHkgcmVxdWlyZSB0aGF0XG4gICAqIHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuIGtleXMuIFRoaXMgaXMgdGhlIG9wcG9zaXRlIG9mXG4gICAqIGAuYWxsYCwgd2hpY2ggcmVxdWlyZXMgdGhhdCB0aGUgdGFyZ2V0IGhhdmUgYWxsIG9mIHRoZSBnaXZlbiBrZXlzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8ubm90LmhhdmUuYW55LmtleXMoJ2MnLCAnZCcpO1xuICAgKlxuICAgKiBTZWUgdGhlIGAua2V5c2AgZG9jIGZvciBndWlkYW5jZSBvbiB3aGVuIHRvIHVzZSBgLmFueWAgb3IgYC5hbGxgLlxuICAgKlxuICAgKiBAbmFtZSBhbnlcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdhbnknLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnYW55JywgdHJ1ZSk7XG4gICAgZmxhZyh0aGlzLCAnYWxsJywgZmFsc2UpO1xuICB9KTtcblxuXG4gIC8qKlxuICAgKiAjIyMgLmFsbFxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAua2V5c2AgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gcmVxdWlyZSB0aGF0IHRoZVxuICAgKiB0YXJnZXQgaGF2ZSBhbGwgb2YgdGhlIGdpdmVuIGtleXMuIFRoaXMgaXMgdGhlIG9wcG9zaXRlIG9mIGAuYW55YCwgd2hpY2hcbiAgICogb25seSByZXF1aXJlcyB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuIGtleXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogTm90ZSB0aGF0IGAuYWxsYCBpcyB1c2VkIGJ5IGRlZmF1bHQgd2hlbiBuZWl0aGVyIGAuYWxsYCBub3IgYC5hbnlgIGFyZVxuICAgKiBhZGRlZCBlYXJsaWVyIGluIHRoZSBjaGFpbi4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFkZCBgLmFsbGAgYW55d2F5XG4gICAqIGJlY2F1c2UgaXQgaW1wcm92ZXMgcmVhZGFiaWxpdHkuXG4gICAqXG4gICAqIFNlZSB0aGUgYC5rZXlzYCBkb2MgZm9yIGd1aWRhbmNlIG9uIHdoZW4gdG8gdXNlIGAuYW55YCBvciBgLmFsbGAuXG4gICAqXG4gICAqIEBuYW1lIGFsbFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2FsbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdhbGwnLCB0cnVlKTtcbiAgICBmbGFnKHRoaXMsICdhbnknLCBmYWxzZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmEodHlwZVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgdHlwZSBpcyBlcXVhbCB0byB0aGUgZ2l2ZW4gc3RyaW5nIGB0eXBlYC4gVHlwZXNcbiAgICogYXJlIGNhc2UgaW5zZW5zaXRpdmUuIFNlZSB0aGUgYHR5cGUtZGV0ZWN0YCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlXG4gICAqIHR5cGUgZGV0ZWN0aW9uIGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy90eXBlLWRldGVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAqICAgICBleHBlY3QobnVsbCkudG8uYmUuYSgnbnVsbCcpO1xuICAgKiAgICAgZXhwZWN0KHVuZGVmaW5lZCkudG8uYmUuYW4oJ3VuZGVmaW5lZCcpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBFcnJvcikudG8uYmUuYW4oJ2Vycm9yJyk7XG4gICAqICAgICBleHBlY3QoUHJvbWlzZS5yZXNvbHZlKCkpLnRvLmJlLmEoJ3Byb21pc2UnKTtcbiAgICogICAgIGV4cGVjdChuZXcgRmxvYXQzMkFycmF5KS50by5iZS5hKCdmbG9hdDMyYXJyYXknKTtcbiAgICogICAgIGV4cGVjdChTeW1ib2woKSkudG8uYmUuYSgnc3ltYm9sJyk7XG4gICAqXG4gICAqIGAuYWAgc3VwcG9ydHMgb2JqZWN0cyB0aGF0IGhhdmUgYSBjdXN0b20gdHlwZSBzZXQgdmlhIGBTeW1ib2wudG9TdHJpbmdUYWdgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge1xuICAgKiAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ215Q3VzdG9tVHlwZSdcbiAgICogICAgIH07XG4gICAqXG4gICAqICAgICBleHBlY3QobXlPYmopLnRvLmJlLmEoJ215Q3VzdG9tVHlwZScpLmJ1dC5ub3QuYW4oJ29iamVjdCcpO1xuICAgKlxuICAgKiBJdCdzIG9mdGVuIGJlc3QgdG8gdXNlIGAuYWAgdG8gY2hlY2sgYSB0YXJnZXQncyB0eXBlIGJlZm9yZSBtYWtpbmcgbW9yZVxuICAgKiBhc3NlcnRpb25zIG9uIHRoZSBzYW1lIHRhcmdldC4gVGhhdCB3YXksIHlvdSBhdm9pZCB1bmV4cGVjdGVkIGJlaGF2aW9yIGZyb21cbiAgICogYW55IGFzc2VydGlvbiB0aGF0IGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZS5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaW5jbHVkZXMoMik7XG4gICAqICAgICBleHBlY3QoW10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaXMuZW1wdHk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0b1xuICAgKiBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIHRoZSBleHBlY3RlZCB0eXBlLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdFxuICAgKiBpc24ndCBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHR5cGVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmFuKCdhcnJheScpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5hYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgdG9cbiAgICogc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmRcbiAgICogYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYSgnc3RyaW5nJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICpcbiAgICogYC5hYCBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgbGFuZ3VhZ2UgY2hhaW4gdG8gaW1wcm92ZSB0aGUgcmVhZGFiaWxpdHkgb2ZcbiAgICogeW91ciBhc3NlcnRpb25zLiBcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLmhhdmUuYS5wcm9wZXJ0eSgnYicpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5hbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5hYC5cbiAgICpcbiAgICogQG5hbWUgYVxuICAgKiBAYWxpYXMgYW5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFuICh0eXBlLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBhcnRpY2xlID0gflsgJ2EnLCAnZScsICdpJywgJ28nLCAndScgXS5pbmRleE9mKHR5cGUuY2hhckF0KDApKSA/ICdhbiAnIDogJ2EgJztcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB0eXBlID09PSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlICcgKyBhcnRpY2xlICsgdHlwZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgJyArIGFydGljbGUgKyB0eXBlXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2FuJywgYW4pO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdhJywgYW4pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGUodmFsWywgbXNnXSlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgc3RyaW5nLCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gc3RyaW5nIGB2YWxgXG4gICAqIGlzIGEgc3Vic3RyaW5nIG9mIHRoZSB0YXJnZXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLmluY2x1ZGUoJ2ZvbycpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYW4gYXJyYXksIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgdmFsYCBpcyBhXG4gICAqIG1lbWJlciBvZiB0aGUgdGFyZ2V0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZSgyKTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGFuIG9iamVjdCwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIG9iamVjdFxuICAgKiBgdmFsYCdzIHByb3BlcnRpZXMgYXJlIGEgc3Vic2V0IG9mIHRoZSB0YXJnZXQncyBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyLCBjOiAzfSkudG8uaW5jbHVkZSh7YTogMSwgYjogMn0pO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBTZXQgb3IgV2Vha1NldCwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGB2YWxgIGlzIGFcbiAgICogbWVtYmVyIG9mIHRoZSB0YXJnZXQuIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtIGlzIHVzZWQuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMl0pKS50by5pbmNsdWRlKDIpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBNYXAsIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgdmFsYCBpcyBvbmUgb2ZcbiAgICogdGhlIHZhbHVlcyBvZiB0aGUgdGFyZ2V0LiBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoW1snYScsIDFdLCBbJ2InLCAyXV0pKS50by5pbmNsdWRlKDIpO1xuICAgKlxuICAgKiBCZWNhdXNlIGAuaW5jbHVkZWAgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5pbmNsdWRlYC4gU2VlIHRoZSBgLmFgXG4gICAqIGRvYyBmb3IgaW5mbyBvbiB0ZXN0aW5nIGEgdGFyZ2V0J3MgdHlwZS5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaW5jbHVkZXMoMik7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBhcnJheSBtZW1iZXJzIGFuZFxuICAgKiBvYmplY3QgcHJvcGVydGllcy4gQWRkIGAuZGVlcGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gdXNlIGRlZXAgZXF1YWxpdHlcbiAgICogaW5zdGVhZCAoV2Vha1NldCB0YXJnZXRzIGFyZSBub3Qgc3VwcG9ydGVkKS4gU2VlIHRoZSBgZGVlcC1lcWxgIHByb2plY3RcbiAgICogcGFnZSBmb3IgaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06IGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5kZWVwLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmluY2x1ZGUoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5kZWVwLmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGFsbCBvZiB0aGUgdGFyZ2V0J3MgcHJvcGVydGllcyBhcmUgc2VhcmNoZWQgd2hlbiB3b3JraW5nIHdpdGhcbiAgICogb2JqZWN0cy4gVGhpcyBpbmNsdWRlcyBwcm9wZXJ0aWVzIHRoYXQgYXJlIGluaGVyaXRlZCBhbmQvb3Igbm9uLWVudW1lcmFibGUuXG4gICAqIEFkZCBgLm93bmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZXhjbHVkZSB0aGUgdGFyZ2V0J3MgaW5oZXJpdGVkXG4gICAqIHByb3BlcnRpZXMgZnJvbSB0aGUgc2VhcmNoLlxuICAgKlxuICAgKiAgICAgT2JqZWN0LnByb3RvdHlwZS5iID0gMjtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm93bi5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlKHtiOiAyfSkuYnV0Lm5vdC5vd24uaW5jbHVkZSh7YjogMn0pO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYSB0YXJnZXQgb2JqZWN0IGlzIGFsd2F5cyBvbmx5IHNlYXJjaGVkIGZvciBgdmFsYCdzIG93blxuICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAub3duYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiAyfX0pLnRvLmRlZXAub3duLmluY2x1ZGUoe2E6IHtiOiAyfX0pO1xuICAgKlxuICAgKiBBZGQgYC5uZXN0ZWRgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGVuYWJsZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIHdoZW5cbiAgICogcmVmZXJlbmNpbmcgbmVzdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLm5lc3RlZC5pbmNsdWRlKHsnYS5iWzFdJzogJ3knfSk7XG4gICAqXG4gICAqIElmIGAuYCBvciBgW11gIGFyZSBwYXJ0IG9mIGFuIGFjdHVhbCBwcm9wZXJ0eSBuYW1lLCB0aGV5IGNhbiBiZSBlc2NhcGVkIGJ5XG4gICAqIGFkZGluZyB0d28gYmFja3NsYXNoZXMgYmVmb3JlIHRoZW0uXG4gICAqXG4gICAqICAgICBleHBlY3QoeycuYSc6IHsnW2JdJzogMn19KS50by5uZXN0ZWQuaW5jbHVkZSh7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IDJ9KTtcbiAgICpcbiAgICogYC5kZWVwYCBhbmQgYC5uZXN0ZWRgIGNhbiBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFt7YzogM31dfX0pLnRvLmRlZXAubmVzdGVkLmluY2x1ZGUoeydhLmJbMF0nOiB7YzogM319KTtcbiAgICpcbiAgICogYC5vd25gIGFuZCBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5ub3QuaW5jbHVkZSgndGFjbycpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmluY2x1ZGUoNCk7XG4gICAqIFxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC5pbmNsdWRlYCB3aGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0LlxuICAgKiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGVcbiAgICogdGFyZ2V0IG9iamVjdCBkb2Vzbid0IGhhdmUgYWxsIG9mIGB2YWxgJ3Mga2V5L3ZhbHVlIHBhaXJzIGJ1dCBtYXkgb3IgbWF5XG4gICAqIG5vdCBoYXZlIHNvbWUgb2YgdGhlbS4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzXG4gICAqIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBvYmplY3QgaXNuJ3QgZXZlbiBleHBlY3RlZCB0byBoYXZlIGB2YWxgJ3Mga2V5cywgaXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2M6IDN9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYScsICdiJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2M6IDN9KS50by5ub3QuaW5jbHVkZSh7YTogMSwgYjogMn0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IG9iamVjdCBpcyBleHBlY3RlZCB0byBoYXZlIGB2YWxgJ3Mga2V5cywgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IGVhY2ggb2YgdGhlIHByb3BlcnRpZXMgaGFzIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgZWFjaCBwcm9wZXJ0eSBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDMsIGI6IDR9KS50by5pbmNsdWRlKHthOiAzLCBiOiA0fSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDMsIGI6IDR9KS50by5ub3QuaW5jbHVkZSh7YTogMSwgYjogMn0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5pbmNsdWRlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlKDQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKS50by5pbmNsdWRlKDQpO1xuICAgKlxuICAgKiBgLmluY2x1ZGVgIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBsYW5ndWFnZSBjaGFpbiwgY2F1c2luZyBhbGwgYC5tZW1iZXJzYCBhbmRcbiAgICogYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoZSB0YXJnZXQgdG8gYmUgYVxuICAgKiBzdXBlcnNldCBvZiB0aGUgZXhwZWN0ZWQgc2V0LCByYXRoZXIgdGhhbiBhbiBpZGVudGljYWwgc2V0LiBOb3RlIHRoYXRcbiAgICogYC5tZW1iZXJzYCBpZ25vcmVzIGR1cGxpY2F0ZXMgaW4gdGhlIHN1YnNldCB3aGVuIGAuaW5jbHVkZWAgaXMgYWRkZWQuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0J3Mga2V5cyBhcmUgYSBzdXBlcnNldCBvZiBbJ2EnLCAnYiddIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBpcyBhIHN1cGVyc2V0IG9mIFsxLCAyXSBidXQgbm90IGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqXG4gICAqICAgICAvLyBEdXBsaWNhdGVzIGluIHRoZSBzdWJzZXQgYXJlIGlnbm9yZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMiwgMiwgMl0pO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYWRkaW5nIGAuYW55YCBlYXJsaWVyIGluIHRoZSBjaGFpbiBjYXVzZXMgdGhlIGAua2V5c2AgYXNzZXJ0aW9uXG4gICAqIHRvIGlnbm9yZSBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiAgICAgLy8gQm90aCBhc3NlcnRpb25zIGFyZSBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuaW5jbHVkZXNgLCBgLmNvbnRhaW5gLCBhbmQgYC5jb250YWluc2AgY2FuIGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbmNsdWRlYC5cbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZVxuICAgKiBAYWxpYXMgY29udGFpblxuICAgKiBAYWxpYXMgaW5jbHVkZXNcbiAgICogQGFsaWFzIGNvbnRhaW5zXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gU2FtZVZhbHVlWmVybyhhLCBiKSB7XG4gICAgcmV0dXJuIChfLmlzTmFOKGEpICYmIF8uaXNOYU4oYikpIHx8IGEgPT09IGI7XG4gIH1cblxuICBmdW5jdGlvbiBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvciAoKSB7XG4gICAgZmxhZyh0aGlzLCAnY29udGFpbnMnLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgXG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbmVnYXRlID0gZmxhZyh0aGlzLCAnbmVnYXRlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBpc0RlZXAgPSBmbGFnKHRoaXMsICdkZWVwJylcbiAgICAgICwgZGVzY3JpcHRvciA9IGlzRGVlcCA/ICdkZWVwICcgOiAnJztcblxuICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcblxuICAgIHZhciBpbmNsdWRlZCA9IGZhbHNlO1xuXG4gICAgc3dpdGNoIChvYmpUeXBlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBpbmNsdWRlZCA9IG9iai5pbmRleE9mKHZhbCkgIT09IC0xO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnd2Vha3NldCc6XG4gICAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJ3VuYWJsZSB0byB1c2UgLmRlZXAuaW5jbHVkZSB3aXRoIFdlYWtTZXQnLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmNsdWRlZCA9IG9iai5oYXModmFsKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ21hcCc6XG4gICAgICAgIHZhciBpc0VxbCA9IGlzRGVlcCA/IF8uZXFsIDogU2FtZVZhbHVlWmVybztcbiAgICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IGluY2x1ZGVkIHx8IGlzRXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2V0JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBpbmNsdWRlZCA9IGluY2x1ZGVkIHx8IF8uZXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouaGFzKHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIGluY2x1ZGVkID0gb2JqLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBfLmVxbChpdGVtLCB2YWwpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouaW5kZXhPZih2YWwpICE9PSAtMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gVGhpcyBibG9jayBpcyBmb3IgYXNzZXJ0aW5nIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgICAgICAvLyBgXy5leHBlY3RUeXBlc2AgaXNuJ3QgdXNlZCBoZXJlIGJlY2F1c2UgYC5pbmNsdWRlYCBzaG91bGQgd29yayB3aXRoXG4gICAgICAgIC8vIG9iamVjdHMgd2l0aCBhIGN1c3RvbSBgQEB0b1N0cmluZ1RhZ2AuXG4gICAgICAgIGlmICh2YWwgIT09IE9iamVjdCh2YWwpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKFxuICAgICAgICAgICAgZmxhZ01zZyArICdvYmplY3QgdGVzdGVkIG11c3QgYmUgYW4gYXJyYXksIGEgbWFwLCBhbiBvYmplY3QsJ1xuICAgICAgICAgICAgICArICcgYSBzZXQsIGEgc3RyaW5nLCBvciBhIHdlYWtzZXQsIGJ1dCAnICsgb2JqVHlwZSArICcgZ2l2ZW4nLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWwpXG4gICAgICAgICAgLCBmaXJzdEVyciA9IG51bGxcbiAgICAgICAgICAsIG51bUVycnMgPSAwO1xuICBcbiAgICAgICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIHZhciBwcm9wQXNzZXJ0aW9uID0gbmV3IEFzc2VydGlvbihvYmopO1xuICAgICAgICAgIF8udHJhbnNmZXJGbGFncyh0aGlzLCBwcm9wQXNzZXJ0aW9uLCB0cnVlKTtcbiAgICAgICAgICBmbGFnKHByb3BBc3NlcnRpb24sICdsb2NrU3NmaScsIHRydWUpO1xuICBcbiAgICAgICAgICBpZiAoIW5lZ2F0ZSB8fCBwcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHByb3BBc3NlcnRpb24ucHJvcGVydHkocHJvcCwgdmFsW3Byb3BdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9wQXNzZXJ0aW9uLnByb3BlcnR5KHByb3AsIHZhbFtwcm9wXSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoIV8uY2hlY2tFcnJvci5jb21wYXRpYmxlQ29uc3RydWN0b3IoZXJyLCBBc3NlcnRpb25FcnJvcikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0RXJyID09PSBudWxsKSBmaXJzdEVyciA9IGVycjtcbiAgICAgICAgICAgIG51bUVycnMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICBcbiAgICAgICAgLy8gV2hlbiB2YWxpZGF0aW5nIC5ub3QuaW5jbHVkZSB3aXRoIG11bHRpcGxlIHByb3BlcnRpZXMsIHdlIG9ubHkgd2FudFxuICAgICAgICAvLyB0byB0aHJvdyBhbiBhc3NlcnRpb24gZXJyb3IgaWYgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCxcbiAgICAgICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSB0aHJvdyB0aGUgZmlyc3QgcHJvcGVydHkgYXNzZXJ0aW9uIGVycm9yIHRoYXQgd2VcbiAgICAgICAgLy8gZW5jb3VudGVyZWQuXG4gICAgICAgIGlmIChuZWdhdGUgJiYgcHJvcHMubGVuZ3RoID4gMSAmJiBudW1FcnJzID09PSBwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBmaXJzdEVycjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXNzZXJ0IGluY2x1c2lvbiBpbiBjb2xsZWN0aW9uIG9yIHN1YnN0cmluZyBpbiBhIHN0cmluZy5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGluY2x1ZGVkXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvICcgKyBkZXNjcmlwdG9yICsgJ2luY2x1ZGUgJyArIF8uaW5zcGVjdCh2YWwpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCAnICsgZGVzY3JpcHRvciArICdpbmNsdWRlICcgKyBfLmluc3BlY3QodmFsKSk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdpbmNsdWRlJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdjb250YWluJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdjb250YWlucycsIGluY2x1ZGUsIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yKTtcbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnaW5jbHVkZXMnLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG5cbiAgLyoqXG4gICAqICMjIyAub2tcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbG9vc2VseSAoYD09YCkgZXF1YWwgdG8gYHRydWVgLiBIb3dldmVyLCBpdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIG9yIGRlZXBseSBlcXVhbCB0b1xuICAgKiBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm9rYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgwKS50by5lcXVhbCgwKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgwKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5iZS5mYWxzZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8ubm90LmJlLm9rOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS51bmRlZmluZWQ7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUub2s7XG4gICAqXG4gICAqIEBuYW1lIG9rXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnb2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydXRoeSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc3knKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAudHJ1ZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGB0cnVlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5iZS50cnVlO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnRydWVgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLmJlLmZhbHNlOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5ub3QuYmUudHJ1ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLnRydWU7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUudHJ1ZTtcbiAgICpcbiAgICogQG5hbWUgdHJ1ZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ3RydWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHRydWUgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydWUnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGZhbHNlJ1xuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IGZhbHNlIDogdHJ1ZVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhbHNlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYGZhbHNlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8uYmUuZmFsc2U7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZmFsc2VgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuXG4gICAqIG5vdCBlcXVhbCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8ubm90LmJlLmZhbHNlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUuZmFsc2U7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5mYWxzZTtcbiAgICpcbiAgICogQG5hbWUgZmFsc2VcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdmYWxzZScsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgZmFsc2UgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGZhbHNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSB0cnVlJ1xuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IHRydWUgOiBmYWxzZVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm51bGxcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgbnVsbGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobnVsbCkudG8uYmUubnVsbDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5udWxsYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXIgdGhhbiBub3RcbiAgICogZXF1YWwgdG8gYG51bGxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5udWxsOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0MiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLm51bGw7XG4gICAqXG4gICAqIEBuYW1lIG51bGxcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdudWxsJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBudWxsID09PSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBudWxsJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgbnVsbCdcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC51bmRlZmluZWRcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC51bmRlZmluZWRgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuXG4gICAqIG5vdCBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUudW5kZWZpbmVkOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0MiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLnVuZGVmaW5lZDtcbiAgICpcbiAgICogQG5hbWUgdW5kZWZpbmVkXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgndW5kZWZpbmVkJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB1bmRlZmluZWQgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHVuZGVmaW5lZCdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIHVuZGVmaW5lZCdcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5OYU5cbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXhhY3RseSBgTmFOYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChOYU4pLnRvLmJlLk5hTjtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5OYU5gLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgTmFOYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uZXF1YWwoJ2ZvbycpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5ub3QuYmUuTmFOOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0MiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLk5hTjtcbiAgICpcbiAgICogQG5hbWUgTmFOXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnTmFOJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBfLmlzTmFOKGZsYWcodGhpcywgJ29iamVjdCcpKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIE5hTidcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgTmFOJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmV4aXN0XG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5vdCBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGVpdGhlciBgbnVsbGAgb3JcbiAgICogYHVuZGVmaW5lZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoMCkudG8uZXF1YWwoMCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMCkudG8uZXhpc3Q7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmV4aXN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLm5vdC5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS51bmRlZmluZWQ7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5ub3QuZXhpc3Q7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwsICdub29vIHdoeSBmYWlsPz8nKS50by5leGlzdDtcbiAgICpcbiAgICogQG5hbWUgZXhpc3RcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdleGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09IHVuZGVmaW5lZFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBleGlzdCdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGV4aXN0J1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmVtcHR5XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIHN0cmluZyBvciBhcnJheSwgYC5lbXB0eWAgYXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQnc1xuICAgKiBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGAwYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbXSkudG8uYmUuZW1wdHk7XG4gICAqICAgICBleHBlY3QoJycpLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBtYXAgb3Igc2V0LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzIGBzaXplYFxuICAgKiBwcm9wZXJ0eSBpcyBzdHJpY3RseSBlcXVhbCB0byBgMGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IFNldCgpKS50by5iZS5lbXB0eTtcbiAgICogICAgIGV4cGVjdChuZXcgTWFwKCkpLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBub24tZnVuY3Rpb24gb2JqZWN0LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldFxuICAgKiBkb2Vzbid0IGhhdmUgYW55IG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIFByb3BlcnRpZXMgd2l0aCBTeW1ib2wtYmFzZWRcbiAgICoga2V5cyBhcmUgZXhjbHVkZWQgZnJvbSB0aGUgY291bnQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe30pLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBCZWNhdXNlIGAuZW1wdHlgIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZSwgaXQnc1xuICAgKiBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlIHVzaW5nIGAuZW1wdHlgLiBTZWUgdGhlIGAuYWBcbiAgICogZG9jIGZvciBpbmZvIG9uIHRlc3RpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFtdKS50by5iZS5hbignYXJyYXknKS50aGF0LmlzLmVtcHR5O1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmVtcHR5YC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgY29udGFpbnMgaXRzIGV4cGVjdGVkIG51bWJlciBvZiB2YWx1ZXMsXG4gICAqIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0J3Mgbm90IGVtcHR5LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMiwgM10pKS50by5oYXZlLnByb3BlcnR5KCdzaXplJywgMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMiwgM10pKS50by5ub3QuYmUuZW1wdHk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KE9iamVjdC5rZXlzKHthOiAxfSkpLnRvLmhhdmUubGVuZ3RoT2YoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuYmUuZW1wdHk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBAbmFtZSBlbXB0eVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2VtcHR5JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgaXRlbXNDb3VudDtcblxuICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcblxuICAgIHN3aXRjaCAoXy50eXBlKHZhbCkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgaXRlbXNDb3VudCA9IHZhbC5sZW5ndGg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWFwJzpcbiAgICAgIGNhc2UgJ3NldCc6XG4gICAgICAgIGl0ZW1zQ291bnQgPSB2YWwuc2l6ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3ZWFrbWFwJzpcbiAgICAgIGNhc2UgJ3dlYWtzZXQnOlxuICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgZmxhZ01zZyArICcuZW1wdHkgd2FzIHBhc3NlZCBhIHdlYWsgY29sbGVjdGlvbicsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgdmFyIG1zZyA9IGZsYWdNc2cgKyAnLmVtcHR5IHdhcyBwYXNzZWQgYSBmdW5jdGlvbiAnICsgXy5nZXROYW1lKHZhbCk7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtc2cudHJpbSgpLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHZhbCAhPT0gT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJy5lbXB0eSB3YXMgcGFzc2VkIG5vbi1zdHJpbmcgcHJpbWl0aXZlICcgKyBfLmluc3BlY3QodmFsKSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNzZmlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zQ291bnQgPSBPYmplY3Qua2V5cyh2YWwpLmxlbmd0aDtcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgMCA9PT0gaXRlbXNDb3VudFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBlbXB0eSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIGVtcHR5J1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmFyZ3VtZW50c1xuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiB0ZXN0ICgpIHtcbiAgICogICAgICAgZXhwZWN0KGFyZ3VtZW50cykudG8uYmUuYXJndW1lbnRzO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiAgICAgdGVzdCgpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmFyZ3VtZW50c2AuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgd2hpY2ggdHlwZSB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlLCByYXRoZXIgdGhhblxuICAgKiBhc3NlcnRpbmcgdGhhdCBpdHMgbm90IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uYmUuYSgnc3RyaW5nJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5hcmd1bWVudHM7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYXJndW1lbnRzO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5Bcmd1bWVudHNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuYXJndW1lbnRzYC5cbiAgICpcbiAgICogQG5hbWUgYXJndW1lbnRzXG4gICAqIEBhbGlhcyBBcmd1bWVudHNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gY2hlY2tBcmd1bWVudHMgKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCB0eXBlID0gXy50eXBlKG9iaik7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICdBcmd1bWVudHMnID09PSB0eXBlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFyZ3VtZW50cyBidXQgZ290ICcgKyB0eXBlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBhcmd1bWVudHMnXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnYXJndW1lbnRzJywgY2hlY2tBcmd1bWVudHMpO1xuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ0FyZ3VtZW50cycsIGNoZWNrQXJndW1lbnRzKTtcblxuICAvKipcbiAgICogIyMjIC5lcXVhbCh2YWxbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIHRoZSBnaXZlbiBgdmFsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTtcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uZXF1YWwoJ2ZvbycpO1xuICAgKiBcbiAgICogQWRkIGAuZGVlcGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gdXNlIGRlZXAgZXF1YWxpdHkgaW5zdGVhZC4gU2VlIHRoZVxuICAgKiBgZGVlcC1lcWxgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWxzIGB7YTogMX1gXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5kZWVwLmVxdWFsKHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuZXF1YWwoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFscyBgWzEsIDJdYFxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uZGVlcC5lcXVhbChbMSwgMl0pO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8ubm90LmVxdWFsKFsxLCAyXSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXF1YWxgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuXG4gICAqIG5vdCBlcXVhbCB0byBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5lcXVhbCgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuZXF1YWxgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmVxdWFsKDIpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmVxdWFsc2AgYW5kIGBlcWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5lcXVhbGAuXG4gICAqXG4gICAqIEBuYW1lIGVxdWFsXG4gICAqIEBhbGlhcyBlcXVhbHNcbiAgICogQGFsaWFzIGVxXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RXF1YWwgKHZhbCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgIGlmIChmbGFnKHRoaXMsICdkZWVwJykpIHtcbiAgICAgIHJldHVybiB0aGlzLmVxbCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICB2YWwgPT09IG9ialxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGVxdWFsICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3tleHB9J1xuICAgICAgICAsIHZhbFxuICAgICAgICAsIHRoaXMuX29ialxuICAgICAgICAsIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXF1YWwnLCBhc3NlcnRFcXVhbCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2VxdWFscycsIGFzc2VydEVxdWFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXEnLCBhc3NlcnRFcXVhbCk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXFsKG9ialssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGRlZXBseSBlcXVhbCB0byB0aGUgZ2l2ZW4gYG9iamAuIFNlZSB0aGVcbiAgICogYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBpcyBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFsIHRvIHthOiAxfVxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHthOiAxfSkuYnV0Lm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGlzIGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWwgdG8gWzEsIDJdXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5lcWwoWzEsIDJdKS5idXQubm90LmVxdWFsKFsxLCAyXSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXFsYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZGVlcGx5IGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyXG4gICAqIHRoYW4gbm90IGRlZXBseSBlcXVhbCB0byBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHthOiAxfSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuZXFsKHtiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmVxbGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHtiOiAyfSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmVxbCh7YjogMn0pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5lcWxzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmVxbGAuXG4gICAqXG4gICAqIFRoZSBgLmRlZXAuZXF1YWxgIGFzc2VydGlvbiBpcyBhbG1vc3QgaWRlbnRpY2FsIHRvIGAuZXFsYCBidXQgd2l0aCBvbmVcbiAgICogZGlmZmVyZW5jZTogYC5kZWVwLmVxdWFsYCBjYXVzZXMgZGVlcCBlcXVhbGl0eSBjb21wYXJpc29ucyB0byBhbHNvIGJlIHVzZWRcbiAgICogZm9yIGFueSBvdGhlciBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogQG5hbWUgZXFsXG4gICAqIEBhbGlhcyBlcWxzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RXFsKG9iaiwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIF8uZXFsKG9iaiwgZmxhZyh0aGlzLCAnb2JqZWN0JykpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGRlZXBseSBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBkZWVwbHkgZXF1YWwgI3tleHB9J1xuICAgICAgLCBvYmpcbiAgICAgICwgdGhpcy5fb2JqXG4gICAgICAsIHRydWVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXFsJywgYXNzZXJ0RXFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXFscycsIGFzc2VydEVxbCk7XG5cbiAgLyoqXG4gICAqICMjIyAuYWJvdmUoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIG51bWJlciBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuXG4gICAqIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZFxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hYm92ZSgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmxlbmd0aE9mYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBhc3NlcnQgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIGBuYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYWJvdmVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuYWJvdmVgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hYm92ZSgyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmFib3ZlKDIpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmd0YCBhbmQgYC5ncmVhdGVyVGhhbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5hYm92ZWAuXG4gICAqXG4gICAqIEBuYW1lIGFib3ZlXG4gICAqIEBhbGlhcyBndFxuICAgKiBAYWxpYXMgZ3JlYXRlclRoYW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEFib3ZlIChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSA9PT0gJ2RhdGUnICYmIG5UeXBlICE9PSAnZGF0ZScpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIGFib3ZlIG11c3QgYmUgYSBkYXRlJztcbiAgICB9IGVsc2UgaWYgKG5UeXBlICE9PSAnbnVtYmVyJyAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIGFib3ZlIG11c3QgYmUgYSBudW1iZXInO1xuICAgIH0gZWxzZSBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlICE9PSAnZGF0ZScgJiYgb2JqVHlwZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgcHJpbnRPYmogPSAob2JqVHlwZSA9PT0gJ3N0cmluZycpID8gXCInXCIgKyBvYmogKyBcIidcIiA6IG9iajtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICdleHBlY3RlZCAnICsgcHJpbnRPYmogKyAnIHRvIGJlIGEgbnVtYmVyIG9yIGEgZGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZFRocm93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyb3JNZXNzYWdlLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgdmFyIGxlbiA9IG9iai5sZW5ndGg7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBsZW4gPiBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhYm92ZSAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSBsZW5ndGggYWJvdmUgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICAgLCBsZW5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIG9iaiA+IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYXQgbW9zdCAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdhYm92ZScsIGFzc2VydEFib3ZlKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3QnLCBhc3NlcnRBYm92ZSk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2dyZWF0ZXJUaGFuJywgYXNzZXJ0QWJvdmUpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmxlYXN0KG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlblxuICAgKiBudW1iZXIgb3IgZGF0ZSBgbmAgcmVzcGVjdGl2ZWx5LiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0b1xuICAgKiBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUuYXQubGVhc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXJcbiAgICogYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5sZWFzdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5sZWFzdGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0LmxlYXN0KDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYXQubGVhc3QoMik7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmd0ZWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5sZWFzdGAuXG4gICAqXG4gICAqIEBuYW1lIGxlYXN0XG4gICAqIEBhbGlhcyBndGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydExlYXN0IChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbGVhc3QgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbGVhc3QgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA+PSBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhdCBsZWFzdCAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID49IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBsZWFzdCAje2V4cH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYmVsb3cgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbGVhc3QnLCBhc3NlcnRMZWFzdCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2d0ZScsIGFzc2VydExlYXN0KTtcblxuICAvKipcbiAgICogIyMjIC5iZWxvdyhuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS5cbiAgICogSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmJlbG93KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgbGVzcyB0aGFuIHRoZSBnaXZlbiBudW1iZXIgYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5iZWxvdyg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYmVsb3dgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLm5vdC5iZS5iZWxvdygxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuYmVsb3dgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5iZWxvdygxLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmJlbG93KDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmx0YCBhbmQgYC5sZXNzVGhhbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5iZWxvd2AuXG4gICAqXG4gICAqIEBuYW1lIGJlbG93XG4gICAqIEBhbGlhcyBsdFxuICAgKiBAYWxpYXMgbGVzc1RoYW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEJlbG93IChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYmVsb3cgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYmVsb3cgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA8IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGJlbG93ICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqIDwgblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGJlbG93ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBsZWFzdCAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdiZWxvdycsIGFzc2VydEJlbG93KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbHQnLCBhc3NlcnRCZWxvdyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2xlc3NUaGFuJywgYXNzZXJ0QmVsb3cpO1xuXG4gIC8qKlxuICAgKiAjIyMgLm1vc3QoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlclxuICAgKiBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0c1xuICAgKiBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hdC5tb3N0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hdC5tb3N0KDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIgYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmF0Lm1vc3QoNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAubW9zdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmJlLmF0Lm1vc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm1vc3RgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hdC5tb3N0KDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYXQubW9zdCgxKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAubHRlYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLm1vc3RgLlxuICAgKlxuICAgKiBAbmFtZSBtb3N0XG4gICAqIEBhbGlhcyBsdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydE1vc3QgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbW9zdCBtdXN0IGJlIGEgZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChuVHlwZSAhPT0gJ251bWJlcicgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBtb3N0IG11c3QgYmUgYSBudW1iZXInO1xuICAgIH0gZWxzZSBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlICE9PSAnZGF0ZScgJiYgb2JqVHlwZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgcHJpbnRPYmogPSAob2JqVHlwZSA9PT0gJ3N0cmluZycpID8gXCInXCIgKyBvYmogKyBcIidcIiA6IG9iajtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICdleHBlY3RlZCAnICsgcHJpbnRPYmogKyAnIHRvIGJlIGEgbnVtYmVyIG9yIGEgZGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZFRocm93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyb3JNZXNzYWdlLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgdmFyIGxlbiA9IG9iai5sZW5ndGg7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBsZW4gPD0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSBsZW5ndGggYXQgbW9zdCAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqIDw9IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBtb3N0ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtb3N0JywgYXNzZXJ0TW9zdCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2x0ZScsIGFzc2VydE1vc3QpO1xuXG4gIC8qKlxuICAgKiAjIyMgLndpdGhpbihzdGFydCwgZmluaXNoWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW5cbiAgICogbnVtYmVyIG9yIGRhdGUgYHN0YXJ0YCwgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyIG9yIGRhdGUgYGZpbmlzaGAgcmVzcGVjdGl2ZWx5LlxuICAgKiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUud2l0aGluKDEsIDMpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS53aXRoaW4oMiwgMyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLndpdGhpbigxLCAyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmxlbmd0aE9mYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBhc3NlcnQgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIGBzdGFydGAsIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgZmluaXNoYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZi53aXRoaW4oMiwgNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2Yud2l0aGluKDIsIDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC53aXRoaW5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS53aXRoaW4oMiwgNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLndpdGhpbmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQpLnRvLmJlLndpdGhpbigxLCAzLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoNCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLndpdGhpbigxLCAzKTtcbiAgICpcbiAgICogQG5hbWUgd2l0aGluXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBsb3dlciBib3VuZCBpbmNsdXNpdmVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGZpbmlzaCB1cHBlciBib3VuZCBpbmNsdXNpdmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3dpdGhpbicsIGZ1bmN0aW9uIChzdGFydCwgZmluaXNoLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgc3RhcnRUeXBlID0gXy50eXBlKHN0YXJ0KS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGZpbmlzaFR5cGUgPSBfLnR5cGUoZmluaXNoKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZVxuICAgICAgLCByYW5nZSA9IChzdGFydFR5cGUgPT09ICdkYXRlJyAmJiBmaW5pc2hUeXBlID09PSAnZGF0ZScpXG4gICAgICAgICAgPyBzdGFydC50b1VUQ1N0cmluZygpICsgJy4uJyArIGZpbmlzaC50b1VUQ1N0cmluZygpXG4gICAgICAgICAgOiBzdGFydCArICcuLicgKyBmaW5pc2g7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgKHN0YXJ0VHlwZSAhPT0gJ2RhdGUnIHx8IGZpbmlzaFR5cGUgIT09ICdkYXRlJykpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50cyB0byB3aXRoaW4gbXVzdCBiZSBkYXRlcyc7XG4gICAgfSBlbHNlIGlmICgoc3RhcnRUeXBlICE9PSAnbnVtYmVyJyB8fCBmaW5pc2hUeXBlICE9PSAnbnVtYmVyJykgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudHMgdG8gd2l0aGluIG11c3QgYmUgbnVtYmVycyc7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA+PSBzdGFydCAmJiBsZW4gPD0gZmluaXNoXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCB3aXRoaW4gJyArIHJhbmdlXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSBsZW5ndGggd2l0aGluICcgKyByYW5nZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID49IHN0YXJ0ICYmIG9iaiA8PSBmaW5pc2hcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSB3aXRoaW4gJyArIHJhbmdlXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5pbnN0YW5jZW9mKGNvbnN0cnVjdG9yWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGdpdmVuIGBjb25zdHJ1Y3RvcmAuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkgeyB9XG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IENhdCgpKS50by5iZS5hbi5pbnN0YW5jZW9mKENhdCk7XG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5pbnN0YW5jZW9mYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICpcbiAgICogYC5pbnN0YW5jZW9mYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYW4uaW5zdGFuY2VvZihBcnJheSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICpcbiAgICogRHVlIHRvIGxpbWl0YXRpb25zIGluIEVTNSwgYC5pbnN0YW5jZW9mYCBtYXkgbm90IGFsd2F5cyB3b3JrIGFzIGV4cGVjdGVkXG4gICAqIHdoZW4gdXNpbmcgYSB0cmFuc3BpbGVyIHN1Y2ggYXMgQmFiZWwgb3IgVHlwZVNjcmlwdC4gSW4gcGFydGljdWxhciwgaXQgbWF5XG4gICAqIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzIHdoZW4gc3ViY2xhc3NpbmcgYnVpbHQtaW4gb2JqZWN0IHN1Y2ggYXNcbiAgICogYEFycmF5YCwgYEVycm9yYCwgYW5kIGBNYXBgLiBTZWUgeW91ciB0cmFuc3BpbGVyJ3MgZG9jcyBmb3IgZGV0YWlsczpcbiAgICpcbiAgICogLSAoW0JhYmVsXShodHRwczovL2JhYmVsanMuaW8vZG9jcy91c2FnZS9jYXZlYXRzLyNjbGFzc2VzKSlcbiAgICogLSAoW1R5cGVTY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrKSlcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaW5zdGFuY2VPZmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbnN0YW5jZW9mYC5cbiAgICpcbiAgICogQG5hbWUgaW5zdGFuY2VvZlxuICAgKiBAcGFyYW0ge0NvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQGFsaWFzIGluc3RhbmNlT2ZcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0SW5zdGFuY2VPZiAoY29uc3RydWN0b3IsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgdmFyIHRhcmdldCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgdmFyIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgdmFyIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJyk7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIGlzSW5zdGFuY2VPZiA9IHRhcmdldCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ1RoZSBpbnN0YW5jZW9mIGFzc2VydGlvbiBuZWVkcyBhIGNvbnN0cnVjdG9yIGJ1dCAnXG4gICAgICAgICAgICArIF8udHlwZShjb25zdHJ1Y3RvcikgKyAnIHdhcyBnaXZlbi4nLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBzc2ZpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBfLmdldE5hbWUoY29uc3RydWN0b3IpO1xuICAgIGlmIChuYW1lID09PSBudWxsKSB7XG4gICAgICBuYW1lID0gJ2FuIHVubmFtZWQgY29uc3RydWN0b3InO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBpc0luc3RhbmNlT2ZcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYW4gaW5zdGFuY2Ugb2YgJyArIG5hbWVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIGFuIGluc3RhbmNlIG9mICcgKyBuYW1lXG4gICAgKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdpbnN0YW5jZW9mJywgYXNzZXJ0SW5zdGFuY2VPZik7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luc3RhbmNlT2YnLCBhc3NlcnRJbnN0YW5jZU9mKTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eShuYW1lWywgdmFsWywgbXNnXV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGhhcyBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIGtleSBgbmFtZWAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJyk7XG4gICAqXG4gICAqIFdoZW4gYHZhbGAgaXMgcHJvdmlkZWQsIGAucHJvcGVydHlgIGFsc28gYXNzZXJ0cyB0aGF0IHRoZSBwcm9wZXJ0eSdzIHZhbHVlXG4gICAqIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBgdmFsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAxKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkgaXMgdXNlZC4gQWRkIGAuZGVlcGAgZWFybGllciBpbiB0aGVcbiAgICogY2hhaW4gdG8gdXNlIGRlZXAgZXF1YWxpdHkgaW5zdGVhZC4gU2VlIHRoZSBgZGVlcC1lcWxgIHByb2plY3QgcGFnZSBmb3JcbiAgICogaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06IGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIHByb3BlcnR5IGB4OiB7YTogMX1gXG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLmhhdmUuZGVlcC5wcm9wZXJ0eSgneCcsIHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICpcbiAgICogVGhlIHRhcmdldCdzIGVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGFsd2F5cyBpbmNsdWRlZFxuICAgKiBpbiB0aGUgc2VhcmNoLiBCeSBkZWZhdWx0LCBib3RoIG93biBhbmQgaW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkLlxuICAgKiBBZGQgYC5vd25gIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGV4Y2x1ZGUgaW5oZXJpdGVkIHByb3BlcnRpZXMgZnJvbSB0aGVcbiAgICogc2VhcmNoLlxuICAgKlxuICAgKiAgICAgT2JqZWN0LnByb3RvdHlwZS5iID0gMjtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duLnByb3BlcnR5KCdhJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93bi5wcm9wZXJ0eSgnYScsIDEpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicpLmJ1dC5ub3Qub3duLnByb3BlcnR5KCdiJyk7IFxuICAgKlxuICAgKiBgLmRlZXBgIGFuZCBgLm93bmAgY2FuIGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAub3duLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICpcbiAgICogQWRkIGAubmVzdGVkYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBlbmFibGUgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiB3aGVuXG4gICAqIHJlZmVyZW5jaW5nIG5lc3RlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogWyd4JywgJ3knXX19KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzFdJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nLCAneScpO1xuICAgKlxuICAgKiBJZiBgLmAgb3IgYFtdYCBhcmUgcGFydCBvZiBhbiBhY3R1YWwgcHJvcGVydHkgbmFtZSwgdGhleSBjYW4gYmUgZXNjYXBlZCBieVxuICAgKiBhZGRpbmcgdHdvIGJhY2tzbGFzaGVzIGJlZm9yZSB0aGVtLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6ICd4J319KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnXFxcXC5hLlxcXFxbYlxcXFxdJyk7XG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAubmVzdGVkYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbe2M6IDN9XX19KVxuICAgKiAgICAgICAudG8uaGF2ZS5kZWVwLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzBdJywge2M6IDN9KTtcbiAgICpcbiAgICogYC5vd25gIGFuZCBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnByb3BlcnR5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdiJyk7XG4gICAqIFxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC5wcm9wZXJ0eWAgd2hlbiBwcm92aWRpbmcgYHZhbGAuIFRoZVxuICAgKiBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zIGJ5IGFzc2VydGluZyB0aGF0IHRoZVxuICAgKiB0YXJnZXQgZWl0aGVyIGRvZXNuJ3QgaGF2ZSBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIGtleSBgbmFtZWAsIG9yIHRoYXQgaXRcbiAgICogZG9lcyBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCBidXQgaXRzIHZhbHVlIGlzbid0IGVxdWFsIHRvXG4gICAqIHRoZSBnaXZlbiBgdmFsYC4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzXG4gICAqIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpc24ndCBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5XG4gICAqIGBuYW1lYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8ubm90LmhhdmUucHJvcGVydHkoJ2EnLCAxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCxcbiAgICogaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSBwcm9wZXJ0eSBoYXMgaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXJcbiAgICogdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5oYXZlLnByb3BlcnR5KCdhJywgMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5wcm9wZXJ0eWAgY2hhbmdlcyB0aGUgdGFyZ2V0IG9mIGFueSBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpblxuICAgKiB0byBiZSB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGZyb20gdGhlIG9yaWdpbmFsIHRhcmdldCBvYmplY3QuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJykudGhhdC5pcy5hKCdudW1iZXInKTtcbiAgICpcbiAgICogYC5wcm9wZXJ0eWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgYHZhbGAsIG9ubHkgdXNlIHRoZVxuICAgKiBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJywgMiwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAyKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLnByb3BlcnR5KCdiJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2InLCB1bmRlZmluZWQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogXG4gICAqIFRoZSBhYm92ZSBhc3NlcnRpb24gaXNuJ3QgdGhlIHNhbWUgdGhpbmcgYXMgbm90IHByb3ZpZGluZyBgdmFsYC4gSW5zdGVhZCxcbiAgICogaXQncyBhc3NlcnRpbmcgdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCBoYXMgYSBgYmAgcHJvcGVydHkgdGhhdCdzIGVxdWFsIHRvXG4gICAqIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiBUaGUgYXNzZXJ0aW9ucyBgLm93blByb3BlcnR5YCBhbmQgYC5oYXZlT3duUHJvcGVydHlgIGNhbiBiZSB1c2VkXG4gICAqIGludGVyY2hhbmdlYWJseSB3aXRoIGAub3duLnByb3BlcnR5YC5cbiAgICpcbiAgICogQG5hbWUgcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsIChvcHRpb25hbClcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEByZXR1cm5zIHZhbHVlIG9mIHByb3BlcnR5IGZvciBjaGFpbmluZ1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRQcm9wZXJ0eSAobmFtZSwgdmFsLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcblxuICAgIHZhciBpc05lc3RlZCA9IGZsYWcodGhpcywgJ25lc3RlZCcpXG4gICAgICAsIGlzT3duID0gZmxhZyh0aGlzLCAnb3duJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgaWYgKGlzTmVzdGVkICYmIGlzT3duKSB7XG4gICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgIGZsYWdNc2cgKyAnVGhlIFwibmVzdGVkXCIgYW5kIFwib3duXCIgZmxhZ3MgY2Fubm90IGJlIGNvbWJpbmVkLicsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgc3NmaVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgIGZsYWdNc2cgKyAnVGFyZ2V0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHNzZmlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKVxuICAgICAgLCBwYXRoSW5mbyA9IGlzTmVzdGVkID8gXy5nZXRQYXRoSW5mbyhvYmosIG5hbWUpIDogbnVsbFxuICAgICAgLCB2YWx1ZSA9IGlzTmVzdGVkID8gcGF0aEluZm8udmFsdWUgOiBvYmpbbmFtZV07XG5cbiAgICB2YXIgZGVzY3JpcHRvciA9ICcnO1xuICAgIGlmIChpc0RlZXApIGRlc2NyaXB0b3IgKz0gJ2RlZXAgJztcbiAgICBpZiAoaXNPd24pIGRlc2NyaXB0b3IgKz0gJ293biAnO1xuICAgIGlmIChpc05lc3RlZCkgZGVzY3JpcHRvciArPSAnbmVzdGVkICc7XG4gICAgZGVzY3JpcHRvciArPSAncHJvcGVydHkgJztcblxuICAgIHZhciBoYXNQcm9wZXJ0eTtcbiAgICBpZiAoaXNPd24pIGhhc1Byb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgbmFtZSk7XG4gICAgZWxzZSBpZiAoaXNOZXN0ZWQpIGhhc1Byb3BlcnR5ID0gcGF0aEluZm8uZXhpc3RzO1xuICAgIGVsc2UgaGFzUHJvcGVydHkgPSBfLmhhc1Byb3BlcnR5KG9iaiwgbmFtZSk7XG5cbiAgICAvLyBXaGVuIHBlcmZvcm1pbmcgYSBuZWdhdGVkIGFzc2VydGlvbiBmb3IgYm90aCBuYW1lIGFuZCB2YWwsIG1lcmVseSBoYXZpbmdcbiAgICAvLyBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIG5hbWUgaXNuJ3QgZW5vdWdoIHRvIGNhdXNlIHRoZSBhc3NlcnRpb24gdG9cbiAgICAvLyBmYWlsLiBJdCBtdXN0IGJvdGggaGF2ZSBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIG5hbWUsIGFuZCB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGF0IHByb3BlcnR5IG11c3QgZXF1YWwgdGhlIGdpdmVuIHZhbC4gVGhlcmVmb3JlLCBza2lwIHRoaXMgYXNzZXJ0aW9uIGluXG4gICAgLy8gZmF2b3Igb2YgdGhlIG5leHQuXG4gICAgaWYgKCFuZWdhdGUgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgaGFzUHJvcGVydHlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlICcgKyBkZXNjcmlwdG9yICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkpO1xuICAgIH1cblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgaGFzUHJvcGVydHkgJiYgKGlzRGVlcCA/IF8uZXFsKHZhbCwgdmFsdWUpIDogdmFsID09PSB2YWx1ZSlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlICcgKyBkZXNjcmlwdG9yICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvZiAje2V4cH0sIGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlICcgKyBkZXNjcmlwdG9yICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvZiAje2FjdH0nXG4gICAgICAgICwgdmFsXG4gICAgICAgICwgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgdmFsdWUpO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgncHJvcGVydHknLCBhc3NlcnRQcm9wZXJ0eSk7XG5cbiAgZnVuY3Rpb24gYXNzZXJ0T3duUHJvcGVydHkgKG5hbWUsIHZhbHVlLCBtc2cpIHtcbiAgICBmbGFnKHRoaXMsICdvd24nLCB0cnVlKTtcbiAgICBhc3NlcnRQcm9wZXJ0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnb3duUHJvcGVydHknLCBhc3NlcnRPd25Qcm9wZXJ0eSk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2hhdmVPd25Qcm9wZXJ0eScsIGFzc2VydE93blByb3BlcnR5KTtcblxuICAvKipcbiAgICogIyMjIC5vd25Qcm9wZXJ0eURlc2NyaXB0b3IobmFtZVssIGRlc2NyaXB0b3JbLCBtc2ddXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaGFzIGl0cyBvd24gcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoIHRoZSBnaXZlbiBrZXlcbiAgICogYG5hbWVgLiBFbnVtZXJhYmxlIGFuZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCBpbiB0aGVcbiAgICogc2VhcmNoLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnKTtcbiAgICpcbiAgICogV2hlbiBgZGVzY3JpcHRvcmAgaXMgcHJvdmlkZWQsIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCBhbHNvIGFzc2VydHMgdGhhdFxuICAgKiB0aGUgcHJvcGVydHkncyBkZXNjcmlwdG9yIGlzIGRlZXBseSBlcXVhbCB0byB0aGUgZ2l2ZW4gYGRlc2NyaXB0b3JgLiBTZWVcbiAgICogdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMSxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InKTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAgd2hlbiBwcm92aWRpbmdcbiAgICogYSBgZGVzY3JpcHRvcmAuIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zIGJ5XG4gICAqIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQgZWl0aGVyIGRvZXNuJ3QgaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aFxuICAgKiB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCwgb3IgdGhhdCBpdCBkb2VzIGhhdmUgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlXG4gICAqIGdpdmVuIGtleSBgbmFtZWAgYnV0IGl0cyBub3QgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgZGVzY3JpcHRvcmAuIEl0J3NcbiAgICogb2Z0ZW4gYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aCB0aGUgZ2l2ZW5cbiAgICoga2V5IGBuYW1lYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8ubm90LmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDEsXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlIGdpdmVuXG4gICAqIGtleSBgbmFtZWAsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgcHJvcGVydHkgaGFzIGl0cyBleHBlY3RlZFxuICAgKiBkZXNjcmlwdG9yLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnlcbiAgICogdW5leHBlY3RlZCBkZXNjcmlwdG9ycy5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDMsXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAzfSkudG8ubm90LmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMSxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAgY2hhbmdlcyB0aGUgdGFyZ2V0IG9mIGFueSBhc3NlcnRpb25zIHRoYXQgZm9sbG93XG4gICAqIGluIHRoZSBjaGFpbiB0byBiZSB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZnJvbSB0aGUgb3JpZ2luYWxcbiAgICogdGFyZ2V0IG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJylcbiAgICogICAgICAgLnRoYXQuaGFzLnByb3BlcnR5KCdlbnVtZXJhYmxlJywgdHJ1ZSk7XG4gICAqXG4gICAqIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGFcbiAgICogY3VzdG9tIGVycm9yIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvXG4gICAqIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZ1xuICAgKiBgZGVzY3JpcHRvcmAsIG9ubHkgdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDIsXG4gICAqICAgICB9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMixcbiAgICogICAgIH0pO1xuICAgKiBcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSlcbiAgICogICAgICAgLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdiJywgdW5kZWZpbmVkLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqIFRoZSBhYm92ZSBhc3NlcnRpb24gaXNuJ3QgdGhlIHNhbWUgdGhpbmcgYXMgbm90IHByb3ZpZGluZyBgZGVzY3JpcHRvcmAuXG4gICAqIEluc3RlYWQsIGl0J3MgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBvYmplY3QgaGFzIGEgYGJgIHByb3BlcnR5XG4gICAqIGRlc2NyaXB0b3IgdGhhdCdzIGRlZXBseSBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvcmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgLlxuICAgKlxuICAgKiBAbmFtZSBvd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICogQGFsaWFzIGhhdmVPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlc2NyaXB0b3IgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yIChuYW1lLCBkZXNjcmlwdG9yLCBtc2cpIHtcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtc2cgPSBkZXNjcmlwdG9yO1xuICAgICAgZGVzY3JpcHRvciA9IG51bGw7XG4gICAgfVxuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB2YXIgYWN0dWFsRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0KG9iaiksIG5hbWUpO1xuICAgIGlmIChhY3R1YWxEZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIF8uZXFsKGRlc2NyaXB0b3IsIGFjdHVhbERlc2NyaXB0b3IpXG4gICAgICAgICwgJ2V4cGVjdGVkIHRoZSBvd24gcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgJyArIF8uaW5zcGVjdChuYW1lKSArICcgb24gI3t0aGlzfSB0byBtYXRjaCAnICsgXy5pbnNwZWN0KGRlc2NyaXB0b3IpICsgJywgZ290ICcgKyBfLmluc3BlY3QoYWN0dWFsRGVzY3JpcHRvcilcbiAgICAgICAgLCAnZXhwZWN0ZWQgdGhlIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvbiAje3RoaXN9IHRvIG5vdCBtYXRjaCAnICsgXy5pbnNwZWN0KGRlc2NyaXB0b3IpXG4gICAgICAgICwgZGVzY3JpcHRvclxuICAgICAgICAsIGFjdHVhbERlc2NyaXB0b3JcbiAgICAgICAgLCB0cnVlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBhY3R1YWxEZXNjcmlwdG9yXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhbiBvd24gcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgJyArIF8uaW5zcGVjdChuYW1lKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGFuIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICApO1xuICAgIH1cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCBhY3R1YWxEZXNjcmlwdG9yKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ293blByb3BlcnR5RGVzY3JpcHRvcicsIGFzc2VydE93blByb3BlcnR5RGVzY3JpcHRvcik7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2hhdmVPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBhc3NlcnRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmxlbmd0aE9mKG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXJcbiAgICogYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5sZW5ndGhPZmAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLCByYXRoZXIgdGhhbiBub3QgZXF1YWwgdG8gb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5oYXZlLmxlbmd0aE9mKDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5sZW5ndGhPZmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5sZW5ndGhPZigyKTtcbiAgICpcbiAgICogYC5sZW5ndGhPZmAgY2FuIGFsc28gYmUgdXNlZCBhcyBhIGxhbmd1YWdlIGNoYWluLCBjYXVzaW5nIGFsbCBgLmFib3ZlYCxcbiAgICogYC5iZWxvd2AsIGAubGVhc3RgLCBgLm1vc3RgLCBhbmQgYC53aXRoaW5gIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlXG4gICAqIGNoYWluIHRvIHVzZSB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgYXMgdGhlIHRhcmdldC4gSG93ZXZlciwgaXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBlcXVhbCB0byBpdHNcbiAgICogZXhwZWN0ZWQgbGVuZ3RoLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdHMgYGxlbmd0aGAgcHJvcGVydHkgZmFsbHNcbiAgICogd2l0aGluIHNvbWUgcmFuZ2Ugb2YgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMik7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5sZWFzdCgzKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCgzKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2Yud2l0aGluKDIsNCk7XG4gICAqXG4gICAqIER1ZSB0byBhIGNvbXBhdGliaWxpdHkgaXNzdWUsIHRoZSBhbGlhcyBgLmxlbmd0aGAgY2FuJ3QgYmUgY2hhaW5lZCBkaXJlY3RseVxuICAgKiBvZmYgb2YgYW4gdW5pbnZva2VkIG1ldGhvZCBzdWNoIGFzIGAuYWAuIFRoZXJlZm9yZSwgYC5sZW5ndGhgIGNhbid0IGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5sZW5ndGhPZmAgaW4gZXZlcnkgc2l0dWF0aW9uLiBJdCdzIHJlY29tbWVuZGVkIHRvXG4gICAqIGFsd2F5cyB1c2UgYC5sZW5ndGhPZmAgaW5zdGVhZCBvZiBgLmxlbmd0aGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmEubGVuZ3RoKDMpOyAvLyBpbmNvbXBhdGlibGU7IHRocm93cyBlcnJvclxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5hLmxlbmd0aE9mKDMpOyAgLy8gcGFzc2VzIGFzIGV4cGVjdGVkXG4gICAqXG4gICAqIEBuYW1lIGxlbmd0aE9mXG4gICAqIEBhbGlhcyBsZW5ndGhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydExlbmd0aENoYWluICgpIHtcbiAgICBmbGFnKHRoaXMsICdkb0xlbmd0aCcsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVuZ3RoIChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBsZW4gPT0gblxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIG9mICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSBsZW5ndGggb2YgI3thY3R9J1xuICAgICAgLCBuXG4gICAgICAsIGxlblxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdsZW5ndGgnLCBhc3NlcnRMZW5ndGgsIGFzc2VydExlbmd0aENoYWluKTtcbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnbGVuZ3RoT2YnLCBhc3NlcnRMZW5ndGgsIGFzc2VydExlbmd0aENoYWluKTtcblxuICAvKipcbiAgICogIyMjIC5tYXRjaChyZVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IG1hdGNoZXMgdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBgcmVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5tYXRjaCgvXmZvby8pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm1hdGNoYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubm90Lm1hdGNoKC90YWNvLyk7XG4gICAqXG4gICAqIGAubWF0Y2hgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubWF0Y2goL3RhY28vLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicsICdub29vIHdoeSBmYWlsPz8nKS50by5tYXRjaCgvdGFjby8pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5tYXRjaGVzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLm1hdGNoYC5cbiAgICpcbiAgICogQG5hbWUgbWF0Y2hcbiAgICogQGFsaWFzIG1hdGNoZXNcbiAgICogQHBhcmFtIHtSZWdFeHB9IHJlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgZnVuY3Rpb24gYXNzZXJ0TWF0Y2gocmUsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgcmUuZXhlYyhvYmopXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG1hdGNoICcgKyByZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gbWF0Y2ggJyArIHJlXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21hdGNoJywgYXNzZXJ0TWF0Y2gpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtYXRjaGVzJywgYXNzZXJ0TWF0Y2gpO1xuXG4gIC8qKlxuICAgKiAjIyMgLnN0cmluZyhzdHJbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBzdHJpbmcgY29udGFpbnMgdGhlIGdpdmVuIHN1YnN0cmluZyBgc3RyYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8uaGF2ZS5zdHJpbmcoJ2JhcicpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnN0cmluZ2AuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm5vdC5oYXZlLnN0cmluZygndGFjbycpO1xuICAgKlxuICAgKiBgLnN0cmluZ2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5oYXZlLnN0cmluZygvdGFjby8sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUuc3RyaW5nKC90YWNvLyk7XG4gICAqXG4gICAqIEBuYW1lIHN0cmluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzdHJpbmcnLCBmdW5jdGlvbiAoc3RyLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdzdHJpbmcnKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB+b2JqLmluZGV4T2Yoc3RyKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBjb250YWluICcgKyBfLmluc3BlY3Qoc3RyKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgY29udGFpbiAnICsgXy5pbnNwZWN0KHN0cilcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5rZXlzKGtleTFbLCBrZXkyWywgLi4uXV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCwgYXJyYXksIG1hcCwgb3Igc2V0IGhhcyB0aGUgZ2l2ZW4ga2V5cy4gT25seVxuICAgKiB0aGUgdGFyZ2V0J3Mgb3duIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCBpbiB0aGUgc2VhcmNoLiBcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGFuIG9iamVjdCBvciBhcnJheSwga2V5cyBjYW4gYmUgcHJvdmlkZWQgYXMgb25lIG9yIG1vcmVcbiAgICogc3RyaW5nIGFyZ3VtZW50cywgYSBzaW5nbGUgYXJyYXkgYXJndW1lbnQsIG9yIGEgc2luZ2xlIG9iamVjdCBhcmd1bWVudC4gSW5cbiAgICogdGhlIGxhdHRlciBjYXNlLCBvbmx5IHRoZSBrZXlzIGluIHRoZSBnaXZlbiBvYmplY3QgbWF0dGVyOyB0aGUgdmFsdWVzIGFyZVxuICAgKiBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cygwLCAxKTtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoWydhJywgJ2InXSk7XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cyhbMCwgMV0pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cyh7YTogNCwgYjogNX0pOyAvLyBpZ25vcmUgNCBhbmQgNVxuICAgKiAgICAgZXhwZWN0KFsneCcsICd5J10pLnRvLmhhdmUuYWxsLmtleXMoezA6IDQsIDE6IDV9KTsgLy8gaWdub3JlIDQgYW5kIDVcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgbWFwIG9yIHNldCwgZWFjaCBrZXkgbXVzdCBiZSBwcm92aWRlZCBhcyBhIHNlcGFyYXRlXG4gICAqIGFyZ3VtZW50LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoW1snYScsIDFdLCBbJ2InLCAyXV0pKS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsnYScsICdiJ10pKS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogQmVjYXVzZSBgLmtleXNgIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZSwgaXQnc1xuICAgKiBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlIHVzaW5nIGAua2V5c2AuIFNlZSB0aGUgYC5hYCBkb2NcbiAgICogZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5iZS5hbignb2JqZWN0JykudGhhdC5oYXMuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkIHRvIGNvbXBhcmUga2V5cyBvZiBtYXBzIGFuZFxuICAgKiBzZXRzLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWVcbiAgICogdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBzZXQgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMga2V5IGB7YTogMX1gXG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLmhhdmUuYWxsLmRlZXAua2V5cyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLm5vdC5oYXZlLmFsbC5rZXlzKFt7YTogMX1dKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHRhcmdldCBtdXN0IGhhdmUgYWxsIG9mIHRoZSBnaXZlbiBrZXlzIGFuZCBubyBtb3JlLiBBZGRcbiAgICogYC5hbnlgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG9ubHkgcmVxdWlyZSB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdFxuICAgKiBvbmUgb2YgdGhlIGdpdmVuIGtleXMuIEFsc28sIGFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlXG4gICAqIGAua2V5c2AuIEl0J3Mgb2Z0ZW4gYmVzdCB0byBhZGQgYC5hbnlgIHdoZW4gbmVnYXRpbmcgYC5rZXlzYCwgYW5kIHRvIHVzZVxuICAgKiBgLmFsbGAgd2hlbiBhc3NlcnRpbmcgYC5rZXlzYCB3aXRob3V0IG5lZ2F0aW9uLlxuICAgKlxuICAgKiBXaGVuIG5lZ2F0aW5nIGAua2V5c2AsIGAuYW55YCBpcyBwcmVmZXJyZWQgYmVjYXVzZSBgLm5vdC5hbnkua2V5c2AgYXNzZXJ0c1xuICAgKiBleGFjdGx5IHdoYXQncyBleHBlY3RlZCBvZiB0aGUgb3V0cHV0LCB3aGVyZWFzIGAubm90LmFsbC5rZXlzYCBjcmVhdGVzXG4gICAqIHVuY2VydGFpbiBleHBlY3RhdGlvbnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBkb2Vzbid0IGhhdmUgYW55IG9mIHRoZSBnaXZlbiBrZXlzXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWQ7IGFzc2VydHMgdGhhdCB0YXJnZXQgZG9lc24ndCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW5cbiAgICogICAgIC8vIGtleXMgYnV0IG1heSBvciBtYXkgbm90IGhhdmUgc29tZSBvZiB0aGVtXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbGwua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqIFdoZW4gYXNzZXJ0aW5nIGAua2V5c2Agd2l0aG91dCBuZWdhdGlvbiwgYC5hbGxgIGlzIHByZWZlcnJlZCBiZWNhdXNlXG4gICAqIGAuYWxsLmtleXNgIGFzc2VydHMgZXhhY3RseSB3aGF0J3MgZXhwZWN0ZWQgb2YgdGhlIG91dHB1dCwgd2hlcmVhc1xuICAgKiBgLmFueS5rZXlzYCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBoYXMgYWxsIHRoZSBnaXZlbiBrZXlzXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBoYXMgYXQgbGVhc3Qgb25lIG9mIHRoZSBnaXZlblxuICAgKiAgICAgLy8ga2V5cyBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBtb3JlIG9mIHRoZW1cbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYC5hbGxgIGlzIHVzZWQgYnkgZGVmYXVsdCB3aGVuIG5laXRoZXIgYC5hbGxgIG5vciBgLmFueWAgYXBwZWFyXG4gICAqIGVhcmxpZXIgaW4gdGhlIGNoYWluLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYWRkIGAuYWxsYCBhbnl3YXkgYmVjYXVzZVxuICAgKiBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eS5cbiAgICpcbiAgICogICAgIC8vIEJvdGggYXNzZXJ0aW9ucyBhcmUgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUua2V5cygnYScsICdiJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5pbmNsdWRlYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCdzIGtleXMgYmUgYVxuICAgKiBzdXBlcnNldCBvZiB0aGUgZXhwZWN0ZWQga2V5cywgcmF0aGVyIHRoYW4gaWRlbnRpY2FsIHNldHMuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0J3Mga2V5cyBhcmUgYSBzdXBlcnNldCBvZiBbJ2EnLCAnYiddIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogSG93ZXZlciwgaWYgYC5hbnlgIGFuZCBgLmluY2x1ZGVgIGFyZSBjb21iaW5lZCwgb25seSB0aGUgYC5hbnlgIHRha2VzXG4gICAqIGVmZmVjdC4gVGhlIGAuaW5jbHVkZWAgaXMgaWdub3JlZCBpbiB0aGlzIGNhc2UuXG4gICAqXG4gICAqICAgICAvLyBCb3RoIGFzc2VydGlvbnMgYXJlIGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLmtleSgnYicpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5rZXlgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAua2V5c2AuXG4gICAqXG4gICAqIEBuYW1lIGtleXNcbiAgICogQGFsaWFzIGtleVxuICAgKiBAcGFyYW0gey4uLlN0cmluZ3xBcnJheXxPYmplY3R9IGtleXNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0S2V5cyAoa2V5cykge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iailcbiAgICAgICwga2V5c1R5cGUgPSBfLnR5cGUoa2V5cylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBpc0RlZXAgPSBmbGFnKHRoaXMsICdkZWVwJylcbiAgICAgICwgc3RyXG4gICAgICAsIGRlZXBTdHIgPSAnJ1xuICAgICAgLCBvayA9IHRydWVcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKTtcblxuICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICB2YXIgbWl4ZWRBcmdzTXNnID0gZmxhZ01zZyArICd3aGVuIHRlc3Rpbmcga2V5cyBhZ2FpbnN0IGFuIG9iamVjdCBvciBhbiBhcnJheSB5b3UgbXVzdCBnaXZlIGEgc2luZ2xlIEFycmF5fE9iamVjdHxTdHJpbmcgYXJndW1lbnQgb3IgbXVsdGlwbGUgU3RyaW5nIGFyZ3VtZW50cyc7XG5cbiAgICBpZiAob2JqVHlwZSA9PT0gJ01hcCcgfHwgb2JqVHlwZSA9PT0gJ1NldCcpIHtcbiAgICAgIGRlZXBTdHIgPSBpc0RlZXAgPyAnZGVlcGx5ICcgOiAnJztcbiAgICAgIGFjdHVhbCA9IFtdO1xuXG4gICAgICAvLyBNYXAgYW5kIFNldCAnLmtleXMnIGFyZW4ndCBzdXBwb3J0ZWQgaW4gSUUgMTEuIFRoZXJlZm9yZSwgdXNlIC5mb3JFYWNoLlxuICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbCwga2V5KSB7IGFjdHVhbC5wdXNoKGtleSkgfSk7XG5cbiAgICAgIGlmIChrZXlzVHlwZSAhPT0gJ0FycmF5Jykge1xuICAgICAgICBrZXlzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBhY3R1YWwgPSBfLmdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaik7XG5cbiAgICAgIHN3aXRjaCAoa2V5c1R5cGUpIHtcbiAgICAgICAgY2FzZSAnQXJyYXknOlxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1peGVkQXJnc01zZywgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobWl4ZWRBcmdzTXNnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMoa2V5cyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAga2V5cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgc3RyaW5naWZ5IG5vbi1TeW1ib2xzIGJlY2F1c2UgU3ltYm9scyB3b3VsZCBiZWNvbWUgXCJTeW1ib2woKVwiXG4gICAgICBrZXlzID0ga2V5cy5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N5bWJvbCcgPyB2YWwgOiBTdHJpbmcodmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgha2V5cy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihmbGFnTXNnICsgJ2tleXMgcmVxdWlyZWQnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aFxuICAgICAgLCBhbnkgPSBmbGFnKHRoaXMsICdhbnknKVxuICAgICAgLCBhbGwgPSBmbGFnKHRoaXMsICdhbGwnKVxuICAgICAgLCBleHBlY3RlZCA9IGtleXNcbiAgICAgICwgYWN0dWFsO1xuXG4gICAgaWYgKCFhbnkgJiYgIWFsbCkge1xuICAgICAgYWxsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBIYXMgYW55XG4gICAgaWYgKGFueSkge1xuICAgICAgb2sgPSBleHBlY3RlZC5zb21lKGZ1bmN0aW9uKGV4cGVjdGVkS2V5KSB7XG4gICAgICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbihhY3R1YWxLZXkpIHtcbiAgICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5lcWwoZXhwZWN0ZWRLZXksIGFjdHVhbEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBleHBlY3RlZEtleSA9PT0gYWN0dWFsS2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBIYXMgYWxsXG4gICAgaWYgKGFsbCkge1xuICAgICAgb2sgPSBleHBlY3RlZC5ldmVyeShmdW5jdGlvbihleHBlY3RlZEtleSkge1xuICAgICAgICByZXR1cm4gYWN0dWFsLnNvbWUoZnVuY3Rpb24oYWN0dWFsS2V5KSB7XG4gICAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXFsKGV4cGVjdGVkS2V5LCBhY3R1YWxLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwZWN0ZWRLZXkgPT09IGFjdHVhbEtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghZmxhZyh0aGlzLCAnY29udGFpbnMnKSkge1xuICAgICAgICBvayA9IG9rICYmIGtleXMubGVuZ3RoID09IGFjdHVhbC5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gS2V5IHN0cmluZ1xuICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICBrZXlzID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBfLmluc3BlY3Qoa2V5KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGxhc3QgPSBrZXlzLnBvcCgpO1xuICAgICAgaWYgKGFsbCkge1xuICAgICAgICBzdHIgPSBrZXlzLmpvaW4oJywgJykgKyAnLCBhbmQgJyArIGxhc3Q7XG4gICAgICB9XG4gICAgICBpZiAoYW55KSB7XG4gICAgICAgIHN0ciA9IGtleXMuam9pbignLCAnKSArICcsIG9yICcgKyBsYXN0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBfLmluc3BlY3Qoa2V5c1swXSk7XG4gICAgfVxuXG4gICAgLy8gRm9ybVxuICAgIHN0ciA9IChsZW4gPiAxID8gJ2tleXMgJyA6ICdrZXkgJykgKyBzdHI7XG5cbiAgICAvLyBIYXZlIC8gaW5jbHVkZVxuICAgIHN0ciA9IChmbGFnKHRoaXMsICdjb250YWlucycpID8gJ2NvbnRhaW4gJyA6ICdoYXZlICcpICsgc3RyO1xuXG4gICAgLy8gQXNzZXJ0aW9uXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG9rXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvICcgKyBkZWVwU3RyICsgc3RyXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCAnICsgZGVlcFN0ciArIHN0clxuICAgICAgLCBleHBlY3RlZC5zbGljZSgwKS5zb3J0KF8uY29tcGFyZUJ5SW5zcGVjdClcbiAgICAgICwgYWN0dWFsLnNvcnQoXy5jb21wYXJlQnlJbnNwZWN0KVxuICAgICAgLCB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2tleXMnLCBhc3NlcnRLZXlzKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgna2V5JywgYXNzZXJ0S2V5cyk7XG5cbiAgLyoqXG4gICAqICMjIyAudGhyb3coW2Vycm9yTGlrZV0sIFtlcnJNc2dNYXRjaGVyXSwgW21zZ10pXG4gICAqXG4gICAqIFdoZW4gbm8gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC50aHJvd2AgaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZFxuICAgKiBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duLlxuICAgKiBcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KCk7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhbiBlcnJvciBjb25zdHJ1Y3RvciwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHRoYXQncyBhblxuICAgKiBpbnN0YW5jZSBvZiB0aGF0IGVycm9yIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yKTtcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGFuZCBpdCdzIGFuIGVycm9yIGluc3RhbmNlLCBgLnRocm93YCBpbnZva2VzXG4gICAqIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCdzIHN0cmljdGx5XG4gICAqIChgPT09YCkgZXF1YWwgdG8gdGhhdCBlcnJvciBpbnN0YW5jZS5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTtcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhlcnIpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYSBzdHJpbmcsIGAudGhyb3dgIGludm9rZXMgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB3aXRoIGEgbWVzc2FnZSB0aGF0XG4gICAqIGNvbnRhaW5zIHRoYXQgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coJ3NhbG1vbicpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYSByZWd1bGFyIGV4cHJlc3Npb24sIGAudGhyb3dgXG4gICAqIGludm9rZXMgdGhlIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB3aXRoIGFcbiAgICogbWVzc2FnZSB0aGF0IG1hdGNoZXMgdGhhdCByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdygvc2FsbW9uLyk7XG4gICAqXG4gICAqIFdoZW4gdHdvIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGFuZCB0aGUgZmlyc3QgaXMgYW4gZXJyb3IgaW5zdGFuY2Ugb3JcbiAgICogY29uc3RydWN0b3IsIGFuZCB0aGUgc2Vjb25kIGlzIGEgc3RyaW5nIG9yIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCBmdWxmaWxscyBib3RoXG4gICAqIGNvbmRpdGlvbnMgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3NhbG1vbicpO1xuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IsIC9zYWxtb24vKTtcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coZXJyLCAnc2FsbW9uJyk7XG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KGVyciwgL3NhbG1vbi8pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnRocm93YC5cbiAgICogICAgIFxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8ubm90LnRocm93KCk7XG4gICAqIFxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC50aHJvd2Agd2hlbiBwcm92aWRpbmcgYW55IGFyZ3VtZW50cy5cbiAgICogVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlXG4gICAqIHRhcmdldCBlaXRoZXIgZG9lc24ndCB0aHJvdyBhbiBlcnJvciwgb3IgdGhhdCBpdCB0aHJvd3MgYW4gZXJyb3IgYnV0IG9mIGFcbiAgICogZGlmZmVyZW50IHR5cGUgdGhhbiB0aGUgZ2l2ZW4gdHlwZSwgb3IgdGhhdCBpdCB0aHJvd3MgYW4gZXJyb3Igb2YgdGhlIGdpdmVuXG4gICAqIHR5cGUgYnV0IHdpdGggYSBtZXNzYWdlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHRoZSBnaXZlbiBzdHJpbmcuIEl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8ubm90LnRocm93KCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coUmVmZXJlbmNlRXJyb3IsICd4Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogdGhhdCB0aGUgZXJyb3IgaXMgb2YgaXRzIGV4cGVjdGVkIHR5cGUsIGFuZCBoYXMgYSBtZXNzYWdlIHRoYXQgaW5jbHVkZXMgYW5cbiAgICogZXhwZWN0ZWQgc3RyaW5nLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnlcbiAgICogdW5leHBlY3RlZCB0eXBlcywgYW5kIGRvZXNuJ3QgaGF2ZSBhIG1lc3NhZ2UgdGhhdCBpbmNsdWRlcyBzb21lIHN0cmluZy5cbiAgICpcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3NhbG1vbicpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by5ub3QudGhyb3coUmVmZXJlbmNlRXJyb3IsICd4Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLnRocm93YCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvXG4gICAqIGJlIHRoZSBlcnJvciBvYmplY3QgdGhhdCdzIHRocm93bi5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTtcbiAgICogICAgIGVyci5jb2RlID0gNDI7XG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yKS53aXRoLnByb3BlcnR5KCdjb2RlJywgNDIpO1xuICAgKlxuICAgKiBgLnRocm93YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXMgdXNlXG4gICAqIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBnb29kRm4gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChnb29kRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3gnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoZ29vZEZuLCAnbm9vbyB3aHkgZmFpbD8/JykudG8udGhyb3coKTtcbiAgICpcbiAgICogRHVlIHRvIGxpbWl0YXRpb25zIGluIEVTNSwgYC50aHJvd2AgbWF5IG5vdCBhbHdheXMgd29yayBhcyBleHBlY3RlZCB3aGVuXG4gICAqIHVzaW5nIGEgdHJhbnNwaWxlciBzdWNoIGFzIEJhYmVsIG9yIFR5cGVTY3JpcHQuIEluIHBhcnRpY3VsYXIsIGl0IG1heVxuICAgKiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cyB3aGVuIHN1YmNsYXNzaW5nIHRoZSBidWlsdC1pbiBgRXJyb3JgIG9iamVjdCBhbmRcbiAgICogdGhlbiBwYXNzaW5nIHRoZSBzdWJjbGFzc2VkIGNvbnN0cnVjdG9yIHRvIGAudGhyb3dgLiBTZWUgeW91ciB0cmFuc3BpbGVyJ3NcbiAgICogZG9jcyBmb3IgZGV0YWlsczpcbiAgICpcbiAgICogLSAoW0JhYmVsXShodHRwczovL2JhYmVsanMuaW8vZG9jcy91c2FnZS9jYXZlYXRzLyNjbGFzc2VzKSlcbiAgICogLSAoW1R5cGVTY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrKSlcbiAgICpcbiAgICogQmV3YXJlIG9mIHNvbWUgY29tbW9uIG1pc3Rha2VzIHdoZW4gdXNpbmcgdGhlIGB0aHJvd2AgYXNzZXJ0aW9uLiBPbmUgY29tbW9uXG4gICAqIG1pc3Rha2UgaXMgdG8gYWNjaWRlbnRhbGx5IGludm9rZSB0aGUgZnVuY3Rpb24geW91cnNlbGYgaW5zdGVhZCBvZiBsZXR0aW5nXG4gICAqIHRoZSBgdGhyb3dgIGFzc2VydGlvbiBpbnZva2UgdGhlIGZ1bmN0aW9uIGZvciB5b3UuIEZvciBleGFtcGxlLCB3aGVuXG4gICAqIHRlc3RpbmcgaWYgYSBmdW5jdGlvbiBuYW1lZCBgZm5gIHRocm93cywgcHJvdmlkZSBgZm5gIGluc3RlYWQgb2YgYGZuKClgIGFzXG4gICAqIHRoZSB0YXJnZXQgZm9yIHRoZSBhc3NlcnRpb24uXG4gICAqXG4gICAqICAgICBleHBlY3QoZm4pLnRvLnRocm93KCk7ICAgICAvLyBHb29kISBUZXN0cyBgZm5gIGFzIGRlc2lyZWRcbiAgICogICAgIGV4cGVjdChmbigpKS50by50aHJvdygpOyAgIC8vIEJhZCEgVGVzdHMgcmVzdWx0IG9mIGBmbigpYCwgbm90IGBmbmBcbiAgICpcbiAgICogSWYgeW91IG5lZWQgdG8gYXNzZXJ0IHRoYXQgeW91ciBmdW5jdGlvbiBgZm5gIHRocm93cyB3aGVuIHBhc3NlZCBjZXJ0YWluXG4gICAqIGFyZ3VtZW50cywgdGhlbiB3cmFwIGEgY2FsbCB0byBgZm5gIGluc2lkZSBvZiBhbm90aGVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHsgZm4oNDIpOyB9KS50by50aHJvdygpOyAgLy8gRnVuY3Rpb24gZXhwcmVzc2lvblxuICAgKiAgICAgZXhwZWN0KCgpID0+IGZuKDQyKSkudG8udGhyb3coKTsgICAgICAgICAgICAgLy8gRVM2IGFycm93IGZ1bmN0aW9uXG4gICAqXG4gICAqIEFub3RoZXIgY29tbW9uIG1pc3Rha2UgaXMgdG8gcHJvdmlkZSBhbiBvYmplY3QgbWV0aG9kIChvciBhbnkgc3RhbmQtYWxvbmVcbiAgICogZnVuY3Rpb24gdGhhdCByZWxpZXMgb24gYHRoaXNgKSBhcyB0aGUgdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb24uIERvaW5nIHNvIGlzXG4gICAqIHByb2JsZW1hdGljIGJlY2F1c2UgdGhlIGB0aGlzYCBjb250ZXh0IHdpbGwgYmUgbG9zdCB3aGVuIHRoZSBmdW5jdGlvbiBpc1xuICAgKiBpbnZva2VkIGJ5IGAudGhyb3dgOyB0aGVyZSdzIG5vIHdheSBmb3IgaXQgdG8ga25vdyB3aGF0IGB0aGlzYCBpcyBzdXBwb3NlZFxuICAgKiB0byBiZS4gVGhlcmUgYXJlIHR3byB3YXlzIGFyb3VuZCB0aGlzIHByb2JsZW0uIE9uZSBzb2x1dGlvbiBpcyB0byB3cmFwIHRoZVxuICAgKiBtZXRob2Qgb3IgZnVuY3Rpb24gY2FsbCBpbnNpZGUgb2YgYW5vdGhlciBmdW5jdGlvbi4gQW5vdGhlciBzb2x1dGlvbiBpcyB0b1xuICAgKiB1c2UgYGJpbmRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHsgY2F0Lm1lb3coKTsgfSkudG8udGhyb3coKTsgIC8vIEZ1bmN0aW9uIGV4cHJlc3Npb25cbiAgICogICAgIGV4cGVjdCgoKSA9PiBjYXQubWVvdygpKS50by50aHJvdygpOyAgICAgICAgICAgICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25cbiAgICogICAgIGV4cGVjdChjYXQubWVvdy5iaW5kKGNhdCkpLnRvLnRocm93KCk7ICAgICAgICAgICAvLyBCaW5kXG4gICAqXG4gICAqIEZpbmFsbHksIGl0J3Mgd29ydGggbWVudGlvbmluZyB0aGF0IGl0J3MgYSBiZXN0IHByYWN0aWNlIGluIEphdmFTY3JpcHQgdG9cbiAgICogb25seSB0aHJvdyBgRXJyb3JgIGFuZCBkZXJpdmF0aXZlcyBvZiBgRXJyb3JgIHN1Y2ggYXMgYFJlZmVyZW5jZUVycm9yYCxcbiAgICogYFR5cGVFcnJvcmAsIGFuZCB1c2VyLWRlZmluZWQgb2JqZWN0cyB0aGF0IGV4dGVuZCBgRXJyb3JgLiBObyBvdGhlciB0eXBlIG9mXG4gICAqIHZhbHVlIHdpbGwgZ2VuZXJhdGUgYSBzdGFjayB0cmFjZSB3aGVuIGluaXRpYWxpemVkLiBXaXRoIHRoYXQgc2FpZCwgdGhlXG4gICAqIGB0aHJvd2AgYXNzZXJ0aW9uIGRvZXMgdGVjaG5pY2FsbHkgc3VwcG9ydCBhbnkgdHlwZSBvZiB2YWx1ZSBiZWluZyB0aHJvd24sXG4gICAqIG5vdCBqdXN0IGBFcnJvcmAgYW5kIGl0cyBkZXJpdmF0aXZlcy5cbiAgICpcbiAgICogVGhlIGFsaWFzZXMgYC50aHJvd3NgIGFuZCBgLlRocm93YCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLnRocm93YC5cbiAgICpcbiAgICogQG5hbWUgdGhyb3dcbiAgICogQGFsaWFzIHRocm93c1xuICAgKiBAYWxpYXMgVGhyb3dcbiAgICogQHBhcmFtIHtFcnJvcnxFcnJvckNvbnN0cnVjdG9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBlcnJNc2dNYXRjaGVyIGVycm9yIG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQHJldHVybnMgZXJyb3IgZm9yIGNoYWluaW5nIChudWxsIGlmIG5vIGVycm9yKVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRUaHJvd3MgKGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlciwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKSB8fCBmYWxzZTtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBSZWdFeHAgfHwgdHlwZW9mIGVycm9yTGlrZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVyck1zZ01hdGNoZXIgPSBlcnJvckxpa2U7XG4gICAgICBlcnJvckxpa2UgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBjYXVnaHRFcnI7XG4gICAgdHJ5IHtcbiAgICAgIG9iaigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2F1Z2h0RXJyID0gZXJyO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgdGhlIG5lZ2F0ZSBmbGFnIGVuYWJsZWQgYW5kIGF0IGxlYXN0IG9uZSB2YWxpZCBhcmd1bWVudCBpdCBtZWFucyB3ZSBkbyBleHBlY3QgYW4gZXJyb3JcbiAgICAvLyBidXQgd2Ugd2FudCBpdCB0byBtYXRjaCBhIGdpdmVuIHNldCBvZiBjcml0ZXJpYVxuICAgIHZhciBldmVyeUFyZ0lzVW5kZWZpbmVkID0gZXJyb3JMaWtlID09PSB1bmRlZmluZWQgJiYgZXJyTXNnTWF0Y2hlciA9PT0gdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgd2UndmUgZ290IHRoZSBuZWdhdGUgZmxhZyBlbmFibGVkIGFuZCBib3RoIGFyZ3MsIHdlIHNob3VsZCBvbmx5IGZhaWwgaWYgYm90aCBhcmVuJ3QgY29tcGF0aWJsZVxuICAgIC8vIFNlZSBJc3N1ZSAjNTUxIGFuZCBQUiAjNjgzQEdpdEh1YlxuICAgIHZhciBldmVyeUFyZ0lzRGVmaW5lZCA9IEJvb2xlYW4oZXJyb3JMaWtlICYmIGVyck1zZ01hdGNoZXIpO1xuICAgIHZhciBlcnJvckxpa2VGYWlsID0gZmFsc2U7XG4gICAgdmFyIGVyck1zZ01hdGNoZXJGYWlsID0gZmFsc2U7XG5cbiAgICAvLyBDaGVja2luZyBpZiBlcnJvciB3YXMgdGhyb3duXG4gICAgaWYgKGV2ZXJ5QXJnSXNVbmRlZmluZWQgfHwgIWV2ZXJ5QXJnSXNVbmRlZmluZWQgJiYgIW5lZ2F0ZSkge1xuICAgICAgLy8gV2UgbmVlZCB0aGlzIHRvIGRpc3BsYXkgcmVzdWx0cyBjb3JyZWN0bHkgYWNjb3JkaW5nIHRvIHRoZWlyIHR5cGVzXG4gICAgICB2YXIgZXJyb3JMaWtlU3RyaW5nID0gJ2FuIGVycm9yJztcbiAgICAgIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBlcnJvckxpa2VTdHJpbmcgPSAnI3tleHB9JztcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3JMaWtlKSB7XG4gICAgICAgIGVycm9yTGlrZVN0cmluZyA9IF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgY2F1Z2h0RXJyXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgJyArIGVycm9yTGlrZVN0cmluZ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCB0aHJvdyBhbiBlcnJvciBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICwgZXJyb3JMaWtlICYmIGVycm9yTGlrZS50b1N0cmluZygpXG4gICAgICAgICwgKGNhdWdodEVyciBpbnN0YW5jZW9mIEVycm9yID9cbiAgICAgICAgICAgIGNhdWdodEVyci50b1N0cmluZygpIDogKHR5cGVvZiBjYXVnaHRFcnIgPT09ICdzdHJpbmcnID8gY2F1Z2h0RXJyIDogY2F1Z2h0RXJyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JMaWtlICYmIGNhdWdodEVycikge1xuICAgICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgaW5zdGFuY2VzIG9ubHkgaWYgYGVycm9yTGlrZWAgaXMgYW4gaW5zdGFuY2Ugb2YgYEVycm9yYFxuICAgICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHZhciBpc0NvbXBhdGlibGVJbnN0YW5jZSA9IF8uY2hlY2tFcnJvci5jb21wYXRpYmxlSW5zdGFuY2UoY2F1Z2h0RXJyLCBlcnJvckxpa2UpO1xuXG4gICAgICAgIGlmIChpc0NvbXBhdGlibGVJbnN0YW5jZSA9PT0gbmVnYXRlKSB7XG4gICAgICAgICAgLy8gVGhlc2UgY2hlY2tzIHdlcmUgY3JlYXRlZCB0byBlbnN1cmUgd2Ugd29uJ3QgZmFpbCB0b28gc29vbiB3aGVuIHdlJ3ZlIGdvdCBib3RoIGFyZ3MgYW5kIGEgbmVnYXRlXG4gICAgICAgICAgLy8gU2VlIElzc3VlICM1NTEgYW5kIFBSICM2ODNAR2l0SHViXG4gICAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyb3JMaWtlRmFpbCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93ICN7ZXhwfSBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyICYmICFuZWdhdGUgPyAnIGJ1dCAje2FjdH0gd2FzIHRocm93bicgOiAnJylcbiAgICAgICAgICAgICAgLCBlcnJvckxpa2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAsIGNhdWdodEVyci50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNDb21wYXRpYmxlQ29uc3RydWN0b3IgPSBfLmNoZWNrRXJyb3IuY29tcGF0aWJsZUNvbnN0cnVjdG9yKGNhdWdodEVyciwgZXJyb3JMaWtlKTtcbiAgICAgIGlmIChpc0NvbXBhdGlibGVDb25zdHJ1Y3RvciA9PT0gbmVnYXRlKSB7XG4gICAgICAgIGlmIChldmVyeUFyZ0lzRGVmaW5lZCAmJiBuZWdhdGUpIHtcbiAgICAgICAgICAgIGVycm9yTGlrZUZhaWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICBuZWdhdGVcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgI3tleHB9IGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyID8gJyBidXQgI3thY3R9IHdhcyB0aHJvd24nIDogJycpXG4gICAgICAgICAgICAsIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yTGlrZS50b1N0cmluZygpIDogZXJyb3JMaWtlICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSlcbiAgICAgICAgICAgICwgKGNhdWdodEVyciBpbnN0YW5jZW9mIEVycm9yID8gY2F1Z2h0RXJyLnRvU3RyaW5nKCkgOiBjYXVnaHRFcnIgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShjYXVnaHRFcnIpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2F1Z2h0RXJyICYmIGVyck1zZ01hdGNoZXIgIT09IHVuZGVmaW5lZCAmJiBlcnJNc2dNYXRjaGVyICE9PSBudWxsKSB7XG4gICAgICAvLyBIZXJlIHdlIGNoZWNrIGNvbXBhdGlibGUgbWVzc2FnZXNcbiAgICAgIHZhciBwbGFjZWhvbGRlciA9ICdpbmNsdWRpbmcnO1xuICAgICAgaWYgKGVyck1zZ01hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcGxhY2Vob2xkZXIgPSAnbWF0Y2hpbmcnXG4gICAgICB9XG5cbiAgICAgIHZhciBpc0NvbXBhdGlibGVNZXNzYWdlID0gXy5jaGVja0Vycm9yLmNvbXBhdGlibGVNZXNzYWdlKGNhdWdodEVyciwgZXJyTXNnTWF0Y2hlcik7XG4gICAgICBpZiAoaXNDb21wYXRpYmxlTWVzc2FnZSA9PT0gbmVnYXRlKSB7XG4gICAgICAgIGlmIChldmVyeUFyZ0lzRGVmaW5lZCAmJiBuZWdhdGUpIHtcbiAgICAgICAgICAgIGVyck1zZ01hdGNoZXJGYWlsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyBlcnJvciAnICsgcGxhY2Vob2xkZXIgKyAnICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgZXJyb3Igbm90ICcgKyBwbGFjZWhvbGRlciArICcgI3tleHB9J1xuICAgICAgICAgICAgLCAgZXJyTXNnTWF0Y2hlclxuICAgICAgICAgICAgLCAgXy5jaGVja0Vycm9yLmdldE1lc3NhZ2UoY2F1Z2h0RXJyKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBib3RoIGFzc2VydGlvbnMgZmFpbGVkIGFuZCBib3RoIHNob3VsZCd2ZSBtYXRjaGVkIHdlIHRocm93IGFuIGVycm9yXG4gICAgaWYgKGVycm9yTGlrZUZhaWwgJiYgZXJyTXNnTWF0Y2hlckZhaWwpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBuZWdhdGVcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAje2V4cH0gYnV0ICN7YWN0fSB3YXMgdGhyb3duJ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCB0aHJvdyAje2V4cH0nICsgKGNhdWdodEVyciA/ICcgYnV0ICN7YWN0fSB3YXMgdGhyb3duJyA6ICcnKVxuICAgICAgICAsIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yTGlrZS50b1N0cmluZygpIDogZXJyb3JMaWtlICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSlcbiAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgPyBjYXVnaHRFcnIudG9TdHJpbmcoKSA6IGNhdWdodEVyciAmJiBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpXG4gICAgICApO1xuICAgIH1cblxuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIGNhdWdodEVycik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgndGhyb3cnLCBhc3NlcnRUaHJvd3MpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCd0aHJvd3MnLCBhc3NlcnRUaHJvd3MpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdUaHJvdycsIGFzc2VydFRocm93cyk7XG5cbiAgLyoqXG4gICAqICMjIyAucmVzcG9uZFRvKG1ldGhvZFssIG1zZ10pXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGAucmVzcG9uZFRvYCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYC4gVGhlIG1ldGhvZCBjYW4gYmUgb3duIG9yXG4gICAqIGluaGVyaXRlZCwgYW5kIGl0IGNhbiBiZSBlbnVtZXJhYmxlIG9yIG5vbi1lbnVtZXJhYmxlLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLnJlc3BvbmRUbygnbWVvdycpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBmdW5jdGlvbiwgYC5yZXNwb25kVG9gIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3NcbiAgICogYHByb3RvdHlwZWAgcHJvcGVydHkgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYG1ldGhvZGAuIEFnYWluLCB0aGVcbiAgICogbWV0aG9kIGNhbiBiZSBvd24gb3IgaW5oZXJpdGVkLCBhbmQgaXQgY2FuIGJlIGVudW1lcmFibGUgb3Igbm9uLWVudW1lcmFibGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIEFkZCBgLml0c2VsZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZm9yY2UgYC5yZXNwb25kVG9gIHRvIHRyZWF0IHRoZVxuICAgKiB0YXJnZXQgYXMgYSBub24tZnVuY3Rpb24gb2JqZWN0LCBldmVuIGlmIGl0J3MgYSBmdW5jdGlvbi4gVGh1cywgaXQgYXNzZXJ0c1xuICAgKiB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYG1ldGhvZGAsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYSBtZXRob2Qgd2l0aCB0aGVcbiAgICogZ2l2ZW4gbmFtZSBgbWV0aG9kYC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqICAgICBDYXQuaGlzcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkuaXRzZWxmLnRvLnJlc3BvbmRUbygnaGlzcycpLmJ1dC5ub3QucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFdoZW4gbm90IGFkZGluZyBgLml0c2VsZmAsIGl0J3MgaW1wb3J0YW50IHRvIGNoZWNrIHRoZSB0YXJnZXQncyB0eXBlIGJlZm9yZVxuICAgKiB1c2luZyBgLnJlc3BvbmRUb2AuIFNlZSB0aGUgYC5hYCBkb2MgZm9yIGluZm8gb24gY2hlY2tpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLmJlLmFuKCdvYmplY3QnKS50aGF0LnJlc3BvbmRzVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5yZXNwb25kVG9gLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gRG9nICgpIHt9XG4gICAqICAgICBEb2cucHJvdG90eXBlLmJhcmsgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgRG9nKCkpLnRvLm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogYC5yZXNwb25kVG9gIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7fSkudG8ucmVzcG9uZFRvKCdtZW93JywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHt9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLnJlc3BvbmRzVG9gIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAucmVzcG9uZFRvYC5cbiAgICpcbiAgICogQG5hbWUgcmVzcG9uZFRvXG4gICAqIEBhbGlhcyByZXNwb25kc1RvXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlc3BvbmRUbyAobWV0aG9kLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgaXRzZWxmID0gZmxhZyh0aGlzLCAnaXRzZWxmJylcbiAgICAgICwgY29udGV4dCA9ICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb2JqICYmICFpdHNlbGYpXG4gICAgICAgID8gb2JqLnByb3RvdHlwZVttZXRob2RdXG4gICAgICAgIDogb2JqW21ldGhvZF07XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGNvbnRleHRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gcmVzcG9uZCB0byAnICsgXy5pbnNwZWN0KG1ldGhvZClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHJlc3BvbmQgdG8gJyArIF8uaW5zcGVjdChtZXRob2QpXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Jlc3BvbmRUbycsIHJlc3BvbmRUbyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Jlc3BvbmRzVG8nLCByZXNwb25kVG8pO1xuXG4gIC8qKlxuICAgKiAjIyMgLml0c2VsZlxuICAgKlxuICAgKiBGb3JjZXMgYWxsIGAucmVzcG9uZFRvYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBiZWhhdmUgYXMgaWZcbiAgICogdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGV2ZW4gaWYgaXQncyBhIGZ1bmN0aW9uLiBUaHVzLCBpdFxuICAgKiBjYXVzZXMgYC5yZXNwb25kVG9gIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuXG4gICAqIG5hbWUsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYVxuICAgKiBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqICAgICBDYXQuaGlzcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkuaXRzZWxmLnRvLnJlc3BvbmRUbygnaGlzcycpLmJ1dC5ub3QucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIEBuYW1lIGl0c2VsZlxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2l0c2VsZicsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdpdHNlbGYnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuc2F0aXNmeShtYXRjaGVyWywgbXNnXSlcbiAgICpcbiAgICogSW52b2tlcyB0aGUgZ2l2ZW4gYG1hdGNoZXJgIGZ1bmN0aW9uIHdpdGggdGhlIHRhcmdldCBiZWluZyBwYXNzZWQgYXMgdGhlXG4gICAqIGZpcnN0IGFyZ3VtZW50LCBhbmQgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSByZXR1cm5lZCBpcyB0cnV0aHkuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDA7IFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuc2F0aXNmeWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIGAuc2F0aXNmeWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5zYXRpc2Z5KGZ1bmN0aW9uKG51bSkge1xuICAgKiAgICAgICByZXR1cm4gbnVtID4gMjtcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5zYXRpc2ZpZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuc2F0aXNmeWAuXG4gICAqXG4gICAqIEBuYW1lIHNhdGlzZnlcbiAgICogQGFsaWFzIHNhdGlzZmllc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBzYXRpc2Z5IChtYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgdmFyIHJlc3VsdCA9IG1hdGNoZXIob2JqKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgcmVzdWx0XG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHNhdGlzZnkgJyArIF8ub2JqRGlzcGxheShtYXRjaGVyKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3Qgc2F0aXNmeScgKyBfLm9iakRpc3BsYXkobWF0Y2hlcilcbiAgICAgICwgZmxhZyh0aGlzLCAnbmVnYXRlJykgPyBmYWxzZSA6IHRydWVcbiAgICAgICwgcmVzdWx0XG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3NhdGlzZnknLCBzYXRpc2Z5KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc2F0aXNmaWVzJywgc2F0aXNmeSk7XG5cbiAgLyoqXG4gICAqICMjIyAuY2xvc2VUbyhleHBlY3RlZCwgZGVsdGFbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciB0aGF0J3Mgd2l0aGluIGEgZ2l2ZW4gKy8tIGBkZWx0YWAgcmFuZ2VcbiAgICogb2YgdGhlIGdpdmVuIG51bWJlciBgZXhwZWN0ZWRgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlXG4gICAqIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uZXF1YWwoMS41KTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygxLCAwLjUpO1xuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygyLCAwLjUpO1xuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygxLCAxKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5jbG9zZVRvYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxLjUpLnRvLmVxdWFsKDEuNSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5ub3QuYmUuY2xvc2VUbygzLCAxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuY2xvc2VUb2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygzLCAxLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMS41LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuY2xvc2VUbygzLCAxKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuYXBwcm94aW1hdGVseWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5jbG9zZVRvYC5cbiAgICpcbiAgICogQG5hbWUgY2xvc2VUb1xuICAgKiBAYWxpYXMgYXBwcm94aW1hdGVseVxuICAgKiBAcGFyYW0ge051bWJlcn0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBjbG9zZVRvKGV4cGVjdGVkLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcblxuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcbiAgICBpZiAodHlwZW9mIGV4cGVjdGVkICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgZGVsdGEgIT09ICdudW1iZXInKSB7XG4gICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgZmxhZ01zZyArICd0aGUgYXJndW1lbnRzIHRvIGNsb3NlVG8gb3IgYXBwcm94aW1hdGVseSBtdXN0IGJlIG51bWJlcnMnLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBzc2ZpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBNYXRoLmFicyhvYmogLSBleHBlY3RlZCkgPD0gZGVsdGFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgY2xvc2UgdG8gJyArIGV4cGVjdGVkICsgJyArLy0gJyArIGRlbHRhXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBjbG9zZSB0byAnICsgZXhwZWN0ZWQgKyAnICsvLSAnICsgZGVsdGFcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnY2xvc2VUbycsIGNsb3NlVG8pO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdhcHByb3hpbWF0ZWx5JywgY2xvc2VUbyk7XG5cbiAgLy8gTm90ZTogRHVwbGljYXRlcyBhcmUgaWdub3JlZCBpZiB0ZXN0aW5nIGZvciBpbmNsdXNpb24gaW5zdGVhZCBvZiBzYW1lbmVzcy5cbiAgZnVuY3Rpb24gaXNTdWJzZXRPZihzdWJzZXQsIHN1cGVyc2V0LCBjbXAsIGNvbnRhaW5zLCBvcmRlcmVkKSB7XG4gICAgaWYgKCFjb250YWlucykge1xuICAgICAgaWYgKHN1YnNldC5sZW5ndGggIT09IHN1cGVyc2V0Lmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgc3VwZXJzZXQgPSBzdXBlcnNldC5zbGljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzZXQuZXZlcnkoZnVuY3Rpb24oZWxlbSwgaWR4KSB7XG4gICAgICBpZiAob3JkZXJlZCkgcmV0dXJuIGNtcCA/IGNtcChlbGVtLCBzdXBlcnNldFtpZHhdKSA6IGVsZW0gPT09IHN1cGVyc2V0W2lkeF07XG5cbiAgICAgIGlmICghY21wKSB7XG4gICAgICAgIHZhciBtYXRjaElkeCA9IHN1cGVyc2V0LmluZGV4T2YoZWxlbSk7XG4gICAgICAgIGlmIChtYXRjaElkeCA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyBSZW1vdmUgbWF0Y2ggZnJvbSBzdXBlcnNldCBzbyBub3QgY291bnRlZCB0d2ljZSBpZiBkdXBsaWNhdGUgaW4gc3Vic2V0LlxuICAgICAgICBpZiAoIWNvbnRhaW5zKSBzdXBlcnNldC5zcGxpY2UobWF0Y2hJZHgsIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyc2V0LnNvbWUoZnVuY3Rpb24oZWxlbTIsIG1hdGNoSWR4KSB7XG4gICAgICAgIGlmICghY21wKGVsZW0sIGVsZW0yKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIFJlbW92ZSBtYXRjaCBmcm9tIHN1cGVyc2V0IHNvIG5vdCBjb3VudGVkIHR3aWNlIGlmIGR1cGxpY2F0ZSBpbiBzdWJzZXQuXG4gICAgICAgIGlmICghY29udGFpbnMpIHN1cGVyc2V0LnNwbGljZShtYXRjaElkeCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5tZW1iZXJzKHNldFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGFycmF5IGhhcyB0aGUgc2FtZSBtZW1iZXJzIGFzIHRoZSBnaXZlbiBhcnJheVxuICAgKiBgc2V0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubWVtYmVycyhbMiwgMSwgM10pO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAyXSkudG8uaGF2ZS5tZW1iZXJzKFsyLCAxLCAyXSk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIG1lbWJlcnMgYXJlIGNvbXBhcmVkIHVzaW5nIHN0cmljdCAoYD09PWApIGVxdWFsaXR5LiBBZGQgYC5kZWVwYFxuICAgKiBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWUgdGhlIGBkZWVwLWVxbGBcbiAgICogcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBtZW1iZXIgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8uaGF2ZS5kZWVwLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5ub3QuaGF2ZS5tZW1iZXJzKFt7YTogMX1dKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgb3JkZXIgZG9lc24ndCBtYXR0ZXIuIEFkZCBgLm9yZGVyZWRgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvXG4gICAqIHJlcXVpcmUgdGhhdCBtZW1iZXJzIGFwcGVhciBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUub3JkZXJlZC5tZW1iZXJzKFsxLCAyLCAzXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLm1lbWJlcnMoWzIsIDEsIDNdKVxuICAgKiAgICAgICAuYnV0Lm5vdC5vcmRlcmVkLm1lbWJlcnMoWzIsIDEsIDNdKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYm90aCBhcnJheXMgbXVzdCBiZSB0aGUgc2FtZSBzaXplLiBBZGQgYC5pbmNsdWRlYCBlYXJsaWVyIGluXG4gICAqIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCdzIG1lbWJlcnMgYmUgYSBzdXBlcnNldCBvZiB0aGVcbiAgICogZXhwZWN0ZWQgbWVtYmVycy4gTm90ZSB0aGF0IGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgaW4gdGhlIHN1YnNldCB3aGVuXG4gICAqIGAuaW5jbHVkZWAgaXMgYWRkZWQuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgaXMgYSBzdXBlcnNldCBvZiBbMSwgMl0gYnV0IG5vdCBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMl0pO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmhhdmUubWVtYmVycyhbMSwgMl0pO1xuICAgKlxuICAgKiAgICAgLy8gRHVwbGljYXRlcyBpbiB0aGUgc3Vic2V0IGFyZSBpZ25vcmVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlLm1lbWJlcnMoWzEsIDIsIDIsIDJdKTtcbiAgICpcbiAgICogYC5kZWVwYCwgYC5vcmRlcmVkYCwgYW5kIGAuaW5jbHVkZWAgY2FuIGFsbCBiZSBjb21iaW5lZC4gSG93ZXZlciwgaWZcbiAgICogYC5pbmNsdWRlYCBhbmQgYC5vcmRlcmVkYCBhcmUgY29tYmluZWQsIHRoZSBvcmRlcmluZyBiZWdpbnMgYXQgdGhlIHN0YXJ0IG9mXG4gICAqIGJvdGggYXJyYXlzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFt7YTogMX0sIHtiOiAyfSwge2M6IDN9XSlcbiAgICogICAgICAgLnRvLmluY2x1ZGUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoW3thOiAxfSwge2I6IDJ9XSlcbiAgICogICAgICAgLmJ1dC5ub3QuaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhbe2I6IDJ9LCB7YzogM31dKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5tZW1iZXJzYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQgYXJyYXkgZG9lc24ndCBoYXZlIGFsbCBvZiB0aGUgc2FtZSBtZW1iZXJzIGFzXG4gICAqIHRoZSBnaXZlbiBhcnJheSBgc2V0YCBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBzb21lIG9mIHRoZW0uIEl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW4gYXNzZXJ0aW9uXG4gICAqIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8ubm90LmluY2x1ZGUoMykuYW5kLm5vdC5pbmNsdWRlKDQpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8ubm90LmhhdmUubWVtYmVycyhbMywgNF0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5tZW1iZXJzYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5oYXZlLm1lbWJlcnMoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoWzEsIDJdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5tZW1iZXJzKFsxLCAyLCAzXSk7XG4gICAqXG4gICAqIEBuYW1lIG1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtZW1iZXJzJywgZnVuY3Rpb24gKHN1YnNldCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcblxuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1YnNldCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uYmUuYW4oJ2FycmF5Jyk7XG5cbiAgICB2YXIgY29udGFpbnMgPSBmbGFnKHRoaXMsICdjb250YWlucycpO1xuICAgIHZhciBvcmRlcmVkID0gZmxhZyh0aGlzLCAnb3JkZXJlZCcpO1xuXG4gICAgdmFyIHN1YmplY3QsIGZhaWxNc2csIGZhaWxOZWdhdGVNc2csIGxlbmd0aENoZWNrO1xuXG4gICAgaWYgKGNvbnRhaW5zKSB7XG4gICAgICBzdWJqZWN0ID0gb3JkZXJlZCA/ICdhbiBvcmRlcmVkIHN1cGVyc2V0JyA6ICdhIHN1cGVyc2V0JztcbiAgICAgIGZhaWxNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSAnICsgc3ViamVjdCArICcgb2YgI3tleHB9JztcbiAgICAgIGZhaWxOZWdhdGVNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgJyArIHN1YmplY3QgKyAnIG9mICN7ZXhwfSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YmplY3QgPSBvcmRlcmVkID8gJ29yZGVyZWQgbWVtYmVycycgOiAnbWVtYmVycyc7XG4gICAgICBmYWlsTXNnID0gJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSB0aGUgc2FtZSAnICsgc3ViamVjdCArICcgYXMgI3tleHB9JztcbiAgICAgIGZhaWxOZWdhdGVNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSB0aGUgc2FtZSAnICsgc3ViamVjdCArICcgYXMgI3tleHB9JztcbiAgICB9XG5cbiAgICB2YXIgY21wID0gZmxhZyh0aGlzLCAnZGVlcCcpID8gXy5lcWwgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgaXNTdWJzZXRPZihzdWJzZXQsIG9iaiwgY21wLCBjb250YWlucywgb3JkZXJlZClcbiAgICAgICwgZmFpbE1zZ1xuICAgICAgLCBmYWlsTmVnYXRlTXNnXG4gICAgICAsIHN1YnNldFxuICAgICAgLCBvYmpcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm9uZU9mKGxpc3RbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG1lbWJlciBvZiB0aGUgZ2l2ZW4gYXJyYXkgYGxpc3RgLiBIb3dldmVyLFxuICAgKiBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUub25lT2YoWzEsIDIsIDNdKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIENvbXBhcmlzb25zIGFyZSBwZXJmb3JtZWQgdXNpbmcgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub25lT2ZgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5vbmVPZihbMiwgMywgNF0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5vbmVPZmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLm9uZU9mKFsyLCAzLCA0XSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5vbmVPZihbMiwgMywgNF0pO1xuICAgKlxuICAgKiBAbmFtZSBvbmVPZlxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBsaXN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBvbmVPZiAobGlzdCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIGV4cGVjdGVkID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24obGlzdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uYmUuYW4oJ2FycmF5Jyk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgbGlzdC5pbmRleE9mKGV4cGVjdGVkKSA+IC0xXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIG9uZSBvZiAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBvbmUgb2YgI3tleHB9J1xuICAgICAgLCBsaXN0XG4gICAgICAsIGV4cGVjdGVkXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ29uZU9mJywgb25lT2YpO1xuXG5cbiAgLyoqXG4gICAqICMjIyAuY2hhbmdlKHN1YmplY3RbLCBwcm9wWywgbXNnXV0pXG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBgLmNoYW5nZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGRpZmZlcmVudCB2YWx1ZSB3aGVuIGl0J3MgaW52b2tlZCBiZWZvcmUgdGhlIHRhcmdldFxuICAgKiBmdW5jdGlvbiBjb21wYXJlZCB0byB3aGVuIGl0J3MgaW52b2tlZCBhZnRlcndhcmQuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCBgc3ViamVjdGAgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgZG90cyArPSAnLic7IH1cbiAgICogICAgICAgLCBnZXREb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG90czsgfTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZ2V0RG90cygpKS50by5lcXVhbCgnJyk7XG4gICAqICAgICBhZGREb3QoKTtcbiAgICogICAgIGV4cGVjdChnZXREb3RzKCkpLnRvLmVxdWFsKCcuJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGREb3QpLnRvLmNoYW5nZShnZXREb3RzKTtcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC5jaGFuZ2VgIGFzc2VydHMgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIGdpdmVuIG9iamVjdCBgc3ViamVjdGAncyBgcHJvcGAgcHJvcGVydHkgaXMgZGlmZmVyZW50IGJlZm9yZSBpbnZva2luZyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGNvbXBhcmVkIHRvIGFmdGVyd2FyZC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHtkb3RzOiAnJ31cbiAgICogICAgICAgLCBhZGREb3QgPSBmdW5jdGlvbiAoKSB7IG15T2JqLmRvdHMgKz0gJy4nOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChteU9iaikudG8uaGF2ZS5wcm9wZXJ0eSgnZG90cycsICcnKTtcbiAgICogICAgIGFkZERvdCgpO1xuICAgKiAgICAgZXhwZWN0KG15T2JqKS50by5oYXZlLnByb3BlcnR5KCdkb3RzJywgJy4nKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8uY2hhbmdlKG15T2JqLCAnZG90cycpO1xuICAgKlxuICAgKiBTdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkIHRvIGNvbXBhcmUgYmVmb3JlIGFuZCBhZnRlciB2YWx1ZXMuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuY2hhbmdlYC5cbiAgICpcbiAgICogICAgIHZhciBkb3RzID0gJydcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXREb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG90czsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge2RvdHM6ICcnfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAnZG90cycpO1xuICAgKlxuICAgKiBgLmNoYW5nZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgdHdvIGFyZ3VtZW50cywgYWx3YXlzXG4gICAqIHVzZSB0aGUgc2Vjb25kIGZvcm0uXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7ZG90czogJyd9XG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBteU9iai5kb3RzICs9ICcuJzsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGREb3QpLnRvLm5vdC5jaGFuZ2UobXlPYmosICdkb3RzJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgZG90cyArPSAnLic7IH1cbiAgICogICAgICAgLCBnZXREb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG90czsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGREb3QsICdub29vIHdoeSBmYWlsPz8nKS50by5ub3QuY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiBgLmNoYW5nZWAgYWxzbyBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvXG4gICAqIGFzc2VydCBob3cgbXVjaCBhIG51bWVyaWMgc3ViamVjdCB3YXMgaW5jcmVhc2VkIG9yIGRlY3JlYXNlZCBieS4gSG93ZXZlcixcbiAgICogaXQncyBkYW5nZXJvdXMgdG8gdXNlIGAuY2hhbmdlLmJ5YC4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzXG4gICAqIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHN1YmplY3QgZWl0aGVyIGluY3JlYXNlcyBieVxuICAgKiB0aGUgZ2l2ZW4gZGVsdGEsIG9yIHRoYXQgaXQgZGVjcmVhc2VzIGJ5IHRoZSBnaXZlbiBkZWx0YS4gSXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb25cbiAgICogdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH1cbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsIC09IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uY2hhbmdlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmNoYW5nZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuY2hhbmdlYC5cbiAgICpcbiAgICogQG5hbWUgY2hhbmdlXG4gICAqIEBhbGlhcyBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0Q2hhbmdlcyAoc3ViamVjdCwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIGZuID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24oZm4sIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG5cbiAgICB2YXIgaW5pdGlhbDtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0W3Byb3BdO1xuICAgIH1cblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICAvLyBUaGlzIGdldHMgZmxhZ2dlZCBiZWNhdXNlIG9mIHRoZSAuYnkoZGVsdGEpIGFzc2VydGlvblxuICAgIGZsYWcodGhpcywgJ2RlbHRhTXNnT2JqJywgbXNnT2JqKTtcbiAgICBmbGFnKHRoaXMsICdpbml0aWFsRGVsdGFWYWx1ZScsIGluaXRpYWwpO1xuICAgIGZsYWcodGhpcywgJ2ZpbmFsRGVsdGFWYWx1ZScsIGZpbmFsKTtcbiAgICBmbGFnKHRoaXMsICdkZWx0YUJlaGF2aW9yJywgJ2NoYW5nZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGZpbmFsICE9PSBpbml0aWFsKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaW5pdGlhbCAhPT0gZmluYWxcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGNoYW5nZSdcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIG5vdCBjaGFuZ2UnXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2NoYW5nZScsIGFzc2VydENoYW5nZXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdjaGFuZ2VzJywgYXNzZXJ0Q2hhbmdlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuaW5jcmVhc2VgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gZnVuY3Rpb25cbiAgICogYHN1YmplY3RgIHJldHVybnMgYSBncmVhdGVyIG51bWJlciB3aGVuIGl0J3MgaW52b2tlZCBhZnRlciBpbnZva2luZyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGNvbXBhcmVkIHRvIHdoZW4gaXQncyBpbnZva2VkIGJlZm9yZWhhbmQuIGAuaW5jcmVhc2VgIGFsc29cbiAgICogY2F1c2VzIGFsbCBgLmJ5YCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBhc3NlcnQgaG93IG11Y2hcbiAgICogZ3JlYXRlciBvZiBhIG51bWJlciBpcyByZXR1cm5lZC4gSXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSByZXR1cm5cbiAgICogdmFsdWUgaW5jcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQsIHJhdGhlciB0aGFuIGFzc2VydGluZyBpdCBpbmNyZWFzZWRcbiAgICogYnkgYW55IGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyB2YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIGdldFZhbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbDsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKGdldFZhbCkuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShnZXRWYWwpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC5pbmNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBncmVhdGVyIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYmVmb3JlaGFuZC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5pbmNyZWFzZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogZGFuZ2Vyb3VzIHRvIGRvIHNvLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9uc1xuICAgKiBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgZGVjcmVhc2VzLCBvciB0aGF0IGl0IHN0YXlzIHRoZSBzYW1lLlxuICAgKiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuXG4gICAqIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgc3ViamVjdCBpcyBleHBlY3RlZCB0byBkZWNyZWFzZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IGl0XG4gICAqIGRlY3JlYXNlZCBieSB0aGUgZXhwZWN0ZWQgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsIC09IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLm5vdC5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gc3RheSB0aGUgc2FtZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAndmFsJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmluY3JlYXNlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXRWYWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWw7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmluY3JlYXNlKGdldFZhbCk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmluY3JlYXNlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbmNyZWFzZWAuXG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlXG4gICAqIEBhbGlhcyBpbmNyZWFzZXNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRJbmNyZWFzZXMgKHN1YmplY3QsIHByb3AsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBmbiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgdmFyIGluaXRpYWw7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkocHJvcCk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdFtwcm9wXTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyXG4gICAgbmV3IEFzc2VydGlvbihpbml0aWFsLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICBmbGFnKHRoaXMsICdkZWx0YU1zZ09iaicsIG1zZ09iaik7XG4gICAgZmxhZyh0aGlzLCAnaW5pdGlhbERlbHRhVmFsdWUnLCBpbml0aWFsKTtcbiAgICBmbGFnKHRoaXMsICdmaW5hbERlbHRhVmFsdWUnLCBmaW5hbCk7XG4gICAgZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicsICdpbmNyZWFzZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGZpbmFsIC0gaW5pdGlhbCk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGZpbmFsIC0gaW5pdGlhbCA+IDBcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGluY3JlYXNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGluY3JlYXNlJ1xuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdpbmNyZWFzZScsIGFzc2VydEluY3JlYXNlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luY3JlYXNlcycsIGFzc2VydEluY3JlYXNlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuZGVjcmVhc2VgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gZnVuY3Rpb25cbiAgICogYHN1YmplY3RgIHJldHVybnMgYSBsZXNzZXIgbnVtYmVyIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gd2hlbiBpdCdzIGludm9rZWQgYmVmb3JlaGFuZC4gYC5kZWNyZWFzZWAgYWxzb1xuICAgKiBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGFzc2VydCBob3cgbXVjaFxuICAgKiBsZXNzZXIgb2YgYSBudW1iZXIgaXMgcmV0dXJuZWQuIEl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgcmV0dXJuXG4gICAqIHZhbHVlIGRlY3JlYXNlZCBieSB0aGUgZXhwZWN0ZWQgYW1vdW50LCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgaXQgZGVjcmVhc2VkXG4gICAqIGJ5IGFueSBhbW91bnQuXG4gICAqXG4gICAqICAgICB2YXIgdmFsID0gMVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyB2YWwgLT0gMjsgfVxuICAgKiAgICAgICAsIGdldFZhbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbDsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UoZ2V0VmFsKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UoZ2V0VmFsKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdHdvIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGAuZGVjcmVhc2VgIGFzc2VydHMgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIGdpdmVuIG9iamVjdCBgc3ViamVjdGAncyBgcHJvcGAgcHJvcGVydHkgaXMgbGVzc2VyIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYmVmb3JlaGFuZC4gXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZGVjcmVhc2VgLiBIb3dldmVyLCBpdCdzXG4gICAqIGRhbmdlcm91cyB0byBkbyBzby4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnNcbiAgICogYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHN1YmplY3QgZWl0aGVyIGluY3JlYXNlcywgb3IgdGhhdCBpdCBzdGF5cyB0aGUgc2FtZS5cbiAgICogSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlblxuICAgKiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gaW5jcmVhc2UsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCBpdFxuICAgKiBpbmNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5ub3QuZGVjcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqIFxuICAgKiBXaGVuIHRoZSBzdWJqZWN0IGlzIGV4cGVjdGVkIHRvIHN0YXkgdGhlIHNhbWUsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmNoYW5nZShteU9iaiwgJ3ZhbCcpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5kZWNyZWFzZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgdHdvIGFyZ3VtZW50cywgYWx3YXlzXG4gICAqIHVzZSB0aGUgc2Vjb25kIGZvcm0uXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3AsICdub29vIHdoeSBmYWlsPz8nKS50by5kZWNyZWFzZShnZXRWYWwpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5kZWNyZWFzZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuZGVjcmVhc2VgLlxuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZVxuICAgKiBAYWxpYXMgZGVjcmVhc2VzXG4gICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzdWJqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RGVjcmVhc2VzIChzdWJqZWN0LCBwcm9wLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZm4gPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihmbiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIHZhciBpbml0aWFsO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3RbcHJvcF07XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlclxuICAgIG5ldyBBc3NlcnRpb24oaW5pdGlhbCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnbnVtYmVyJyk7XG5cbiAgICBmbigpO1xuXG4gICAgdmFyIGZpbmFsID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBzdWJqZWN0KCkgOiBzdWJqZWN0W3Byb3BdO1xuICAgIHZhciBtc2dPYmogPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IGluaXRpYWwgOiAnLicgKyBwcm9wO1xuXG4gICAgZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonLCBtc2dPYmopO1xuICAgIGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJywgaW5pdGlhbCk7XG4gICAgZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJywgZmluYWwpO1xuICAgIGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InLCAnZGVjcmVhc2UnKTtcbiAgICBmbGFnKHRoaXMsICdyZWFsRGVsdGEnLCBpbml0aWFsIC0gZmluYWwpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBmaW5hbCAtIGluaXRpYWwgPCAwXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBkZWNyZWFzZSdcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIG5vdCBkZWNyZWFzZSdcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZGVjcmVhc2UnLCBhc3NlcnREZWNyZWFzZXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdkZWNyZWFzZXMnLCBhc3NlcnREZWNyZWFzZXMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmJ5KGRlbHRhWywgbXNnXSlcbiAgICpcbiAgICogV2hlbiBmb2xsb3dpbmcgYW4gYC5pbmNyZWFzZWAgYXNzZXJ0aW9uIGluIHRoZSBjaGFpbiwgYC5ieWAgYXNzZXJ0cyB0aGF0XG4gICAqIHRoZSBzdWJqZWN0IG9mIHRoZSBgLmluY3JlYXNlYCBhc3NlcnRpb24gaW5jcmVhc2VkIGJ5IHRoZSBnaXZlbiBgZGVsdGFgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTtcbiAgICpcbiAgICogV2hlbiBmb2xsb3dpbmcgYSBgLmRlY3JlYXNlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHN1YmplY3Qgb2YgdGhlIGAuZGVjcmVhc2VgIGFzc2VydGlvbiBkZWNyZWFzZWQgYnkgdGhlIGdpdmVuIGBkZWx0YWAuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTtcbiAgICpcbiAgICogV2hlbiBmb2xsb3dpbmcgYSBgLmNoYW5nZWAgYXNzZXJ0aW9uIGluIHRoZSBjaGFpbiwgYC5ieWAgYXNzZXJ0cyB0aGF0IHRoZVxuICAgKiBzdWJqZWN0IG9mIHRoZSBgLmNoYW5nZWAgYXNzZXJ0aW9uIGVpdGhlciBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGJ5IHRoZVxuICAgKiBnaXZlbiBgZGVsdGFgLiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byB1c2UgYC5jaGFuZ2UuYnlgLiBUaGUgcHJvYmxlbSBpc1xuICAgKiB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucy4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZVxuICAgKiBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHNcbiAgICogdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH1cbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsIC09IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uY2hhbmdlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYnlgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHN1YmplY3QgY2hhbmdlZCBieSBpdHMgZXhwZWN0ZWQgZGVsdGEsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IGl0IGRpZG4ndCBjaGFuZ2UgYnkgb25lIG9mIGNvdW50bGVzcyB1bmV4cGVjdGVkIGRlbHRhcy5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ1dC5ub3QuYnkoMyk7XG4gICAqXG4gICAqIGAuYnlgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSB0b1xuICAgKiBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZFxuICAgKiBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KGFkZFR3bywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMyk7XG4gICAqXG4gICAqIEBuYW1lIGJ5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RGVsdGEoZGVsdGEsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgdmFyIG1zZ09iaiA9IGZsYWcodGhpcywgJ2RlbHRhTXNnT2JqJyk7XG4gICAgdmFyIGluaXRpYWwgPSBmbGFnKHRoaXMsICdpbml0aWFsRGVsdGFWYWx1ZScpO1xuICAgIHZhciBmaW5hbCA9IGZsYWcodGhpcywgJ2ZpbmFsRGVsdGFWYWx1ZScpO1xuICAgIHZhciBiZWhhdmlvciA9IGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InKTtcbiAgICB2YXIgcmVhbERlbHRhID0gZmxhZyh0aGlzLCAncmVhbERlbHRhJyk7XG5cbiAgICB2YXIgZXhwcmVzc2lvbjtcbiAgICBpZiAoYmVoYXZpb3IgPT09ICdjaGFuZ2UnKSB7XG4gICAgICBleHByZXNzaW9uID0gTWF0aC5hYnMoZmluYWwgLSBpbml0aWFsKSA9PT0gTWF0aC5hYnMoZGVsdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHByZXNzaW9uID0gcmVhbERlbHRhID09PSBNYXRoLmFicyhkZWx0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBleHByZXNzaW9uXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byAnICsgYmVoYXZpb3IgKyAnIGJ5ICcgKyBkZWx0YVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90ICcgKyBiZWhhdmlvciArICcgYnkgJyArIGRlbHRhXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2J5JywgYXNzZXJ0RGVsdGEpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmV4dGVuc2libGVcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXh0ZW5zaWJsZSwgd2hpY2ggbWVhbnMgdGhhdCBuZXcgcHJvcGVydGllcyBjYW5cbiAgICogYmUgYWRkZWQgdG8gaXQuIFByaW1pdGl2ZXMgYXJlIG5ldmVyIGV4dGVuc2libGUuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5iZS5leHRlbnNpYmxlO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmV4dGVuc2libGVgLlxuICAgKlxuICAgKiAgICAgdmFyIG5vbkV4dGVuc2libGVPYmplY3QgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pXG4gICAqICAgICAgICwgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pXG4gICAqICAgICAgICwgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9uRXh0ZW5zaWJsZU9iamVjdCkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqICAgICBleHBlY3Qoc2VhbGVkT2JqZWN0KS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgICogICAgIGV4cGVjdChmcm96ZW5PYmplY3QpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5leHRlbnNpYmxlO1xuICAgKlxuICAgKiBAbmFtZSBleHRlbnNpYmxlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIG5vbi1leHRlbnNpYmxlIG9yZGluYXJ5IG9iamVjdCwgc2ltcGx5IHJldHVybiBmYWxzZS5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNFeHRlbnNpYmxlXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNFeHRlbnNpYmxlID0gb2JqID09PSBPYmplY3Qob2JqKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKG9iaik7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGlzRXh0ZW5zaWJsZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBleHRlbnNpYmxlJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgZXh0ZW5zaWJsZSdcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5zZWFsZWRcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc2VhbGVkLCB3aGljaCBtZWFucyB0aGF0IG5ldyBwcm9wZXJ0aWVzIGNhbid0IGJlXG4gICAqIGFkZGVkIHRvIGl0LCBhbmQgaXRzIGV4aXN0aW5nIHByb3BlcnRpZXMgY2FuJ3QgYmUgcmVjb25maWd1cmVkIG9yIGRlbGV0ZWQuXG4gICAqIEhvd2V2ZXIsIGl0J3MgcG9zc2libGUgdGhhdCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4gc3RpbGwgYmUgcmVhc3NpZ25lZFxuICAgKiB0byBkaWZmZXJlbnQgdmFsdWVzLiBQcmltaXRpdmVzIGFyZSBhbHdheXMgc2VhbGVkLlxuICAgKlxuICAgKiAgICAgdmFyIHNlYWxlZE9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICogICAgIHZhciBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzZWFsZWRPYmplY3QpLnRvLmJlLnNlYWxlZDtcbiAgICogICAgIGV4cGVjdChmcm96ZW5PYmplY3QpLnRvLmJlLnNlYWxlZDtcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuc2VhbGVkYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuc2VhbGVkO1xuICAgKlxuICAgKiBAbmFtZSBzZWFsZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdzZWFsZWQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG5cbiAgICAvLyBJbiBFUzUsIGlmIHRoZSBhcmd1bWVudCB0byB0aGlzIG1ldGhvZCBpcyBhIHByaW1pdGl2ZSwgdGhlbiBpdCB3aWxsIGNhdXNlIGEgVHlwZUVycm9yLlxuICAgIC8vIEluIEVTNiwgYSBub24tb2JqZWN0IGFyZ3VtZW50IHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3YXMgYSBzZWFsZWQgb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIHRydWUuXG4gICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1NlYWxlZFxuICAgIC8vIFRoZSBmb2xsb3dpbmcgcHJvdmlkZXMgRVM2IGJlaGF2aW9yIGZvciBFUzUgZW52aXJvbm1lbnRzLlxuXG4gICAgdmFyIGlzU2VhbGVkID0gb2JqID09PSBPYmplY3Qob2JqKSA/IE9iamVjdC5pc1NlYWxlZChvYmopIDogdHJ1ZTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNTZWFsZWRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgc2VhbGVkJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgc2VhbGVkJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmZyb3plblxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBmcm96ZW4sIHdoaWNoIG1lYW5zIHRoYXQgbmV3IHByb3BlcnRpZXMgY2FuJ3QgYmVcbiAgICogYWRkZWQgdG8gaXQsIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4ndCBiZSByZWFzc2lnbmVkIHRvIGRpZmZlcmVudFxuICAgKiB2YWx1ZXMsIHJlY29uZmlndXJlZCwgb3IgZGVsZXRlZC4gUHJpbWl0aXZlcyBhcmUgYWx3YXlzIGZyb3plbi5cbiAgICpcbiAgICogICAgIHZhciBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChmcm96ZW5PYmplY3QpLnRvLmJlLmZyb3plbjtcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5mcm96ZW47XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZnJvemVuYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5mcm96ZW47XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuZnJvemVuO1xuICAgKlxuICAgKiBAbmFtZSBmcm96ZW5cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdmcm96ZW4nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG5cbiAgICAvLyBJbiBFUzUsIGlmIHRoZSBhcmd1bWVudCB0byB0aGlzIG1ldGhvZCBpcyBhIHByaW1pdGl2ZSwgdGhlbiBpdCB3aWxsIGNhdXNlIGEgVHlwZUVycm9yLlxuICAgIC8vIEluIEVTNiwgYSBub24tb2JqZWN0IGFyZ3VtZW50IHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3YXMgYSBmcm96ZW4gb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIHRydWUuXG4gICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0Zyb3plblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgcHJvdmlkZXMgRVM2IGJlaGF2aW9yIGZvciBFUzUgZW52aXJvbm1lbnRzLlxuXG4gICAgdmFyIGlzRnJvemVuID0gb2JqID09PSBPYmplY3Qob2JqKSA/IE9iamVjdC5pc0Zyb3plbihvYmopIDogdHJ1ZTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNGcm96ZW5cbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZnJvemVuJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgZnJvemVuJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmZpbml0ZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciwgYW5kIGlzbid0IGBOYU5gIG9yIHBvc2l0aXZlL25lZ2F0aXZlXG4gICAqIGBJbmZpbml0eWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuZmluaXRlO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmZpbml0ZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogZGFuZ2Vyb3VzIHRvIGRvIHNvLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9uc1xuICAgKiBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaXNuJ3QgYSBudW1iZXIsIG9yIHRoYXQgaXQncyBgTmFOYCwgb3JcbiAgICogdGhhdCBpdCdzIHBvc2l0aXZlIGBJbmZpbml0eWAsIG9yIHRoYXQgaXQncyBuZWdhdGl2ZSBgSW5maW5pdHlgLiBJdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuXG4gICAqIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzbid0IGV4cGVjdGVkIHRvIGJlIGEgbnVtYmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0XG4gICAqIHRoYXQgaXQncyB0aGUgZXhwZWN0ZWQgdHlwZSwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgaXQgaXNuJ3Qgb25lIG9mXG4gICAqIG1hbnkgdW5leHBlY3RlZCB0eXBlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uYmUuYSgnc3RyaW5nJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5maW5pdGU7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gYmUgYE5hTmAsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgZXhhY3RseVxuICAgKiB0aGF0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KE5hTikudG8uYmUuTmFOOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KE5hTikudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBwb3NpdGl2ZSBpbmZpbml0eSwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoSW5maW5pdHkpLnRvLmVxdWFsKEluZmluaXR5KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChJbmZpbml0eSkudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBuZWdhdGl2ZSBpbmZpbml0eSwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoLUluZmluaXR5KS50by5lcXVhbCgtSW5maW5pdHkpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KC1JbmZpbml0eSkudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5maW5pdGU7XG4gICAqXG4gICAqIEBuYW1lIGZpbml0ZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2Zpbml0ZScsIGZ1bmN0aW9uKG1zZykge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB0eXBlb2Ygb2JqID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKG9iailcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYSBmaW5pdGUgbnVtYmVyJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYSBmaW5pdGUgbnVtYmVyJ1xuICAgICk7XG4gIH0pO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIHV0aWwpIHtcbiAgY2hhaS5leHBlY3QgPSBmdW5jdGlvbiAodmFsLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBjaGFpLkFzc2VydGlvbih2YWwsIG1lc3NhZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgKlxuICAgKiBUaHJvdyBhIGZhaWx1cmUuXG4gICAqXG4gICAqIEBuYW1lIGZhaWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBjaGFpLmV4cGVjdC5mYWlsID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ2V4cGVjdC5mYWlsKCknO1xuICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgYWN0dWFsOiBhY3R1YWxcbiAgICAgICwgZXhwZWN0ZWQ6IGV4cGVjdGVkXG4gICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgIH0sIGNoYWkuZXhwZWN0LmZhaWwpO1xuICB9O1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIHV0aWwpIHtcbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uO1xuXG4gIGZ1bmN0aW9uIGxvYWRTaG91bGQgKCkge1xuICAgIC8vIGV4cGxpY2l0bHkgZGVmaW5lIHRoaXMgbWV0aG9kIGFzIGZ1bmN0aW9uIGFzIHRvIGhhdmUgaXQncyBuYW1lIHRvIGluY2x1ZGUgYXMgYHNzZmlgXG4gICAgZnVuY3Rpb24gc2hvdWxkR2V0dGVyKCkge1xuICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTdHJpbmdcbiAgICAgICAgICB8fCB0aGlzIGluc3RhbmNlb2YgTnVtYmVyXG4gICAgICAgICAgfHwgdGhpcyBpbnN0YW5jZW9mIEJvb2xlYW5cbiAgICAgICAgICB8fCB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBc3NlcnRpb24odGhpcy52YWx1ZU9mKCksIG51bGwsIHNob3VsZEdldHRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEFzc2VydGlvbih0aGlzLCBudWxsLCBzaG91bGRHZXR0ZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaG91bGRTZXR0ZXIodmFsdWUpIHtcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2NoYWkvaXNzdWVzLzg2OiB0aGlzIG1ha2VzXG4gICAgICAvLyBgd2hhdGV2ZXIuc2hvdWxkID0gc29tZVZhbHVlYCBhY3R1YWxseSBzZXQgYHNvbWVWYWx1ZWAsIHdoaWNoIGlzXG4gICAgICAvLyBlc3BlY2lhbGx5IHVzZWZ1bCBmb3IgYGdsb2JhbC5zaG91bGQgPSByZXF1aXJlKCdjaGFpJykuc2hvdWxkKClgLlxuICAgICAgLy9cbiAgICAgIC8vIE5vdGUgdGhhdCB3ZSBoYXZlIHRvIHVzZSBbW0RlZmluZVByb3BlcnR5XV0gaW5zdGVhZCBvZiBbW1B1dF1dXG4gICAgICAvLyBzaW5jZSBvdGhlcndpc2Ugd2Ugd291bGQgdHJpZ2dlciB0aGlzIHZlcnkgc2V0dGVyIVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzaG91bGQnLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIG1vZGlmeSBPYmplY3QucHJvdG90eXBlIHRvIGhhdmUgYHNob3VsZGBcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ3Nob3VsZCcsIHtcbiAgICAgIHNldDogc2hvdWxkU2V0dGVyXG4gICAgICAsIGdldDogc2hvdWxkR2V0dGVyXG4gICAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgdmFyIHNob3VsZCA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC5mYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSwgW29wZXJhdG9yXSlcbiAgICAgKlxuICAgICAqIFRocm93IGEgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIGZhaWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAgICogQG5hbWVzcGFjZSBCRERcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmZhaWwgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IpIHtcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdzaG91bGQuZmFpbCgpJztcbiAgICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgICAgfSwgc2hvdWxkLmZhaWwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICAgKlxuICAgICAqIEFzc2VydHMgbm9uLXN0cmljdCBlcXVhbGl0eSAoYD09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmVxdWFsKDMsICczJywgJz09IGNvZXJjZXMgdmFsdWVzIHRvIHN0cmluZ3MnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIGVxdWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5lcXVhbCA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsMSwgbXNnKS50by5lcXVhbCh2YWwyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC50aHJvdyhmdW5jdGlvbiwgW2NvbnN0cnVjdG9yL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCBgZnVuY3Rpb25gIHdpbGwgdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhbiBpbnN0YW5jZSBvZlxuICAgICAqIGBjb25zdHJ1Y3RvcmAsIG9yIGFsdGVybmF0ZWx5IHRoYXQgaXQgd2lsbCB0aHJvdyBhbiBlcnJvciB3aXRoIG1lc3NhZ2VcbiAgICAgKiBtYXRjaGluZyBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sICdmdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3InKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCAvZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yLyk7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IpO1xuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sIFJlZmVyZW5jZUVycm9yLCAnZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yJyk7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IsIC9mdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3IvKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIHRocm93XG4gICAgICogQGFsaWFzIFRocm93XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5UaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJydCwgZXJycywgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2cpLnRvLlRocm93KGVycnQsIGVycnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmV4aXN0XG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiAgICAgdmFyIGZvbyA9ICdoaSc7XG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmV4aXN0KGZvbywgJ2ZvbyBleGlzdHMnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIGV4aXN0XG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmV4aXN0ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnKS50by5leGlzdDtcbiAgICB9XG5cbiAgICAvLyBuZWdhdGlvblxuICAgIHNob3VsZC5ub3QgPSB7fVxuXG4gICAgLyoqXG4gICAgICogIyMjIC5ub3QuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyBub24tc3RyaWN0IGluZXF1YWxpdHkgKGAhPWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC5ub3QuZXF1YWwoMywgNCwgJ3RoZXNlIG51bWJlcnMgYXJlIG5vdCBlcXVhbCcpO1xuICAgICAqXG4gICAgICogQG5hbWUgbm90LmVxdWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuZXF1YWwgPSBmdW5jdGlvbiAodmFsMSwgdmFsMiwgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHZhbDEsIG1zZykudG8ubm90LmVxdWFsKHZhbDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLnRocm93KGZ1bmN0aW9uLCBbY29uc3RydWN0b3IvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyB0aGF0IGBmdW5jdGlvbmAgd2lsbCBfbm90XyB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuIGluc3RhbmNlIG9mXG4gICAgICogYGNvbnN0cnVjdG9yYCwgb3IgYWx0ZXJuYXRlbHkgdGhhdCBpdCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciB3aXRoIG1lc3NhZ2VcbiAgICAgKiBtYXRjaGluZyBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQubm90LnRocm93KGZuLCBFcnJvciwgJ2Z1bmN0aW9uIGRvZXMgbm90IHRocm93Jyk7XG4gICAgICpcbiAgICAgKiBAbmFtZSBub3QudGhyb3dcbiAgICAgKiBAYWxpYXMgbm90LlRocm93XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuVGhyb3cgPSBmdW5jdGlvbiAoZm4sIGVycnQsIGVycnMsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbihmbiwgbXNnKS50by5ub3QuVGhyb3coZXJydCwgZXJycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAubm90LmV4aXN0XG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiAgICAgdmFyIGJhciA9IG51bGw7XG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLm5vdC5leGlzdChiYXIsICdiYXIgZG9lcyBub3QgZXhpc3QnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIG5vdC5leGlzdFxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuZXhpc3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2cpLnRvLm5vdC5leGlzdDtcbiAgICB9XG5cbiAgICBzaG91bGRbJ3Rocm93J10gPSBzaG91bGRbJ1Rocm93J107XG4gICAgc2hvdWxkLm5vdFsndGhyb3cnXSA9IHNob3VsZC5ub3RbJ1Rocm93J107XG5cbiAgICByZXR1cm4gc2hvdWxkO1xuICB9O1xuXG4gIGNoYWkuc2hvdWxkID0gbG9hZFNob3VsZDtcbiAgY2hhaS5TaG91bGQgPSBsb2FkU2hvdWxkO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuXG4gIC8qIVxuICAgKiBDaGFpIGRlcGVuZGVuY2llcy5cbiAgICovXG5cbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uXG4gICAgLCBmbGFnID0gdXRpbC5mbGFnO1xuXG4gIC8qIVxuICAgKiBNb2R1bGUgZXhwb3J0LlxuICAgKi9cblxuICAvKipcbiAgICogIyMjIGFzc2VydChleHByZXNzaW9uLCBtZXNzYWdlKVxuICAgKlxuICAgKiBXcml0ZSB5b3VyIG93biB0ZXN0IGV4cHJlc3Npb25zLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCdmb28nICE9PSAnYmFyJywgJ2ZvbyBpcyBub3QgYmFyJyk7XG4gICAqICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShbXSksICdlbXB0eSBhcnJheXMgYXJlIGFycmF5cycpO1xuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBleHByZXNzaW9uIHRvIHRlc3QgZm9yIHRydXRoaW5lc3NcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgdG8gZGlzcGxheSBvbiBlcnJvclxuICAgKiBAbmFtZSBhc3NlcnRcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgdmFyIGFzc2VydCA9IGNoYWkuYXNzZXJ0ID0gZnVuY3Rpb24gKGV4cHJlc3MsIGVycm1zZykge1xuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihudWxsLCBudWxsLCBjaGFpLmFzc2VydCwgdHJ1ZSk7XG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cHJlc3NcbiAgICAgICwgZXJybXNnXG4gICAgICAsICdbIG5lZ2F0aW9uIG1lc3NhZ2UgdW5hdmFpbGFibGUgXSdcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgKlxuICAgKiBUaHJvdyBhIGZhaWx1cmUuIE5vZGUuanMgYGFzc2VydGAgbW9kdWxlLWNvbXBhdGlibGUuXG4gICAqXG4gICAqIEBuYW1lIGZhaWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZmFpbCA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvcikge1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdhc3NlcnQuZmFpbCgpJztcbiAgICB0aHJvdyBuZXcgY2hhaS5Bc3NlcnRpb25FcnJvcihtZXNzYWdlLCB7XG4gICAgICAgIGFjdHVhbDogYWN0dWFsXG4gICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgLCBvcGVyYXRvcjogb3BlcmF0b3JcbiAgICB9LCBhc3NlcnQuZmFpbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNPayhvYmplY3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIHRydXRoeS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc09rKCdldmVyeXRoaW5nJywgJ2V2ZXJ5dGhpbmcgaXMgb2snKTtcbiAgICogICAgIGFzc2VydC5pc09rKGZhbHNlLCAndGhpcyB3aWxsIGZhaWwnKTtcbiAgICpcbiAgICogQG5hbWUgaXNPa1xuICAgKiBAYWxpYXMgb2tcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0IHRvIHRlc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzT2sgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNPaywgdHJ1ZSkuaXMub2s7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RPayhvYmplY3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGZhbHN5LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90T2soJ2V2ZXJ5dGhpbmcnLCAndGhpcyB3aWxsIGZhaWwnKTtcbiAgICogICAgIGFzc2VydC5pc05vdE9rKGZhbHNlLCAndGhpcyB3aWxsIHBhc3MnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RPa1xuICAgKiBAYWxpYXMgbm90T2tcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0IHRvIHRlc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90T2sgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RPaywgdHJ1ZSkuaXMubm90Lm9rO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBub24tc3RyaWN0IGVxdWFsaXR5IChgPT1gKSBvZiBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5lcXVhbCgzLCAnMycsICc9PSBjb2VyY2VzIHZhbHVlcyB0byBzdHJpbmdzJyk7XG4gICAqXG4gICAqIEBuYW1lIGVxdWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmVxdWFsLCB0cnVlKTtcblxuICAgIHRlc3QuYXNzZXJ0KFxuICAgICAgICBleHAgPT0gZmxhZyh0ZXN0LCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZXF1YWwgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3thY3R9J1xuICAgICAgLCBleHBcbiAgICAgICwgYWN0XG4gICAgICAsIHRydWVcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBub24tc3RyaWN0IGluZXF1YWxpdHkgKGAhPWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEVxdWFsKDMsIDQsICd0aGVzZSBudW1iZXJzIGFyZSBub3QgZXF1YWwnKTtcbiAgICpcbiAgICogQG5hbWUgbm90RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90RXF1YWwsIHRydWUpO1xuXG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cCAhPSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBlcXVhbCAje2FjdH0nXG4gICAgICAsIGV4cFxuICAgICAgLCBhY3RcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHN0cmljdCBlcXVhbGl0eSAoYD09PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIHRydWUsICd0aGVzZSBib29sZWFucyBhcmUgc3RyaWN0bHkgZXF1YWwnKTtcbiAgICpcbiAgICogQG5hbWUgc3RyaWN0RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LnN0cmljdEVxdWFsLCB0cnVlKS50by5lcXVhbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBzdHJpY3QgaW5lcXVhbGl0eSAoYCE9PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKDMsICczJywgJ25vIGNvZXJjaW9uIGZvciBzdHJpY3QgZXF1YWxpdHknKTtcbiAgICpcbiAgICogQG5hbWUgbm90U3RyaWN0RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLCB0cnVlKS50by5ub3QuZXF1YWwoZXhwKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGFjdHVhbGAgaXMgZGVlcGx5IGVxdWFsIHRvIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcEVxdWFsKHsgdGVhOiAnZ3JlZW4nIH0sIHsgdGVhOiAnZ3JlZW4nIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwRXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhbGlhcyBkZWVwU3RyaWN0RXF1YWxcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCA9IGFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5kZWVwRXF1YWwsIHRydWUpLnRvLmVxbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydCB0aGF0IGBhY3R1YWxgIGlzIG5vdCBkZWVwbHkgZXF1YWwgdG8gYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwRXF1YWwoeyB0ZWE6ICdncmVlbicgfSwgeyB0ZWE6ICdqYXNtaW5lJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcEVxdWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90RGVlcEVxdWFsLCB0cnVlKS50by5ub3QuZXFsKGV4cCk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzQWJvdmUodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBYm92ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAoPikgYHZhbHVlVG9CZUFib3ZlYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0Fib3ZlKDUsIDIsICc1IGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAyJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQWJvdmVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUFib3ZlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Fib3ZlID0gZnVuY3Rpb24gKHZhbCwgYWJ2LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBYm92ZSwgdHJ1ZSkudG8uYmUuYWJvdmUoYWJ2KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBdExlYXN0KHZhbHVlVG9DaGVjaywgdmFsdWVUb0JlQXRMZWFzdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAoPj0pIGB2YWx1ZVRvQmVBdExlYXN0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0F0TGVhc3QoNSwgMiwgJzUgaXMgZ3JlYXRlciBvciBlcXVhbCB0byAyJyk7XG4gICAqICAgICBhc3NlcnQuaXNBdExlYXN0KDMsIDMsICczIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0F0TGVhc3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUF0TGVhc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXRMZWFzdCA9IGZ1bmN0aW9uICh2YWwsIGF0bHN0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBdExlYXN0LCB0cnVlKS50by5iZS5sZWFzdChhdGxzdCk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzQmVsb3codmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVCZWxvdywgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIHN0cmljdGx5IGxlc3MgdGhhbiAoPCkgYHZhbHVlVG9CZUJlbG93YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0JlbG93KDMsIDYsICczIGlzIHN0cmljdGx5IGxlc3MgdGhhbiA2Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQmVsb3dcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUJlbG93XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0JlbG93ID0gZnVuY3Rpb24gKHZhbCwgYmx3LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNCZWxvdywgdHJ1ZSkudG8uYmUuYmVsb3coYmx3KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBdE1vc3QodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBdE1vc3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBgdmFsdWVUb0NoZWNrYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gKDw9KSBgdmFsdWVUb0JlQXRNb3N0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0F0TW9zdCgzLCA2LCAnMyBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gNicpO1xuICAgKiAgICAgYXNzZXJ0LmlzQXRNb3N0KDQsIDQsICc0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byA0Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXRNb3N0XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9DaGVja1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQmVBdE1vc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXRNb3N0ID0gZnVuY3Rpb24gKHZhbCwgYXRtc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0F0TW9zdCwgdHJ1ZSkudG8uYmUubW9zdChhdG1zdCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNUcnVlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIHRydWUuXG4gICAqXG4gICAqICAgICB2YXIgdGVhU2VydmVkID0gdHJ1ZTtcbiAgICogICAgIGFzc2VydC5pc1RydWUodGVhU2VydmVkLCAndGhlIHRlYSBoYXMgYmVlbiBzZXJ2ZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNUcnVlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1RydWUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNUcnVlLCB0cnVlKS5pc1sndHJ1ZSddO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90VHJ1ZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgdHJ1ZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RUcnVlKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90VHJ1ZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RUcnVlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90VHJ1ZSwgdHJ1ZSkudG8ubm90LmVxdWFsKHRydWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRmFsc2UodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgZmFsc2UuXG4gICAqXG4gICAqICAgICB2YXIgdGVhU2VydmVkID0gZmFsc2U7XG4gICAqICAgICBhc3NlcnQuaXNGYWxzZSh0ZWFTZXJ2ZWQsICdubyB0ZWEgeWV0PyBobW0uLi4nKTtcbiAgICpcbiAgICogQG5hbWUgaXNGYWxzZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGYWxzZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0ZhbHNlLCB0cnVlKS5pc1snZmFsc2UnXTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEZhbHNlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBmYWxzZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RGYWxzZSh0ZWEsICdncmVhdCwgdGltZSBmb3IgdGVhIScpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZhbHNlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZhbHNlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90RmFsc2UsIHRydWUpLnRvLm5vdC5lcXVhbChmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOdWxsKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG51bGwuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOdWxsKGVyciwgJ3RoZXJlIHdhcyBubyBlcnJvcicpO1xuICAgKlxuICAgKiBAbmFtZSBpc051bGxcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTnVsbCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc051bGwsIHRydWUpLnRvLmVxdWFsKG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TnVsbCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgbnVsbC5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3ROdWxsKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TnVsbFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3ROdWxsID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90TnVsbCwgdHJ1ZSkudG8ubm90LmVxdWFsKG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTmFOXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB2YWx1ZSBpcyBOYU4uXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOYU4oTmFOLCAnTmFOIGlzIE5hTicpO1xuICAgKlxuICAgKiBAbmFtZSBpc05hTlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOYU4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOYU4sIHRydWUpLnRvLmJlLk5hTjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE5hTlxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdmFsdWUgaXMgbm90IE5hTi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdE5hTig0LCAnNCBpcyBub3QgTmFOJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TmFOXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBhc3NlcnQuaXNOb3ROYU4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3ROYU4sIHRydWUpLm5vdC50by5iZS5OYU47XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZXhpc3RzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciBmb28gPSAnaGknO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmV4aXN0cyhmb28sICdmb28gaXMgbmVpdGhlciBgbnVsbGAgbm9yIGB1bmRlZmluZWRgJyk7XG4gICAqXG4gICAqIEBuYW1lIGV4aXN0c1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZXhpc3RzID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmV4aXN0cywgdHJ1ZSkudG8uZXhpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RXhpc3RzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGVpdGhlciBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqICAgICB2YXIgYmFyID0gbnVsbFxuICAgKiAgICAgICAsIGJhejtcbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RFeGlzdHMoYmFyKTtcbiAgICogICAgIGFzc2VydC5ub3RFeGlzdHMoYmF6LCAnYmF6IGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RFeGlzdHNcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEV4aXN0cyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RFeGlzdHMsIHRydWUpLnRvLm5vdC5leGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1VuZGVmaW5lZCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciB0ZWE7XG4gICAqICAgICBhc3NlcnQuaXNVbmRlZmluZWQodGVhLCAnbm8gdGVhIGRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNVbmRlZmluZWRcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzVW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzVW5kZWZpbmVkLCB0cnVlKS50by5lcXVhbCh1bmRlZmluZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRGVmaW5lZCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqICAgICB2YXIgdGVhID0gJ2N1cCBvZiBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc0RlZmluZWQodGVhLCAndGVhIGhhcyBiZWVuIGRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNEZWZpbmVkXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0RlZmluZWQgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNEZWZpbmVkLCB0cnVlKS50by5ub3QuZXF1YWwodW5kZWZpbmVkKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Z1bmN0aW9uKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgZnVuY3Rpb24uXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBzZXJ2ZVRlYSgpIHsgcmV0dXJuICdjdXAgb2YgdGVhJzsgfTtcbiAgICogICAgIGFzc2VydC5pc0Z1bmN0aW9uKHNlcnZlVGVhLCAnZ3JlYXQsIHdlIGNhbiBoYXZlIHRlYSBub3cnKTtcbiAgICpcbiAgICogQG5hbWUgaXNGdW5jdGlvblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Z1bmN0aW9uLCB0cnVlKS50by5iZS5hKCdmdW5jdGlvbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RnVuY3Rpb24odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBmdW5jdGlvbi5cbiAgICpcbiAgICogICAgIHZhciBzZXJ2ZVRlYSA9IFsgJ2hlYXQnLCAncG91cicsICdzaXAnIF07XG4gICAqICAgICBhc3NlcnQuaXNOb3RGdW5jdGlvbihzZXJ2ZVRlYSwgJ2dyZWF0LCB3ZSBoYXZlIGxpc3RlZCB0aGUgc3RlcHMnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RGdW5jdGlvblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdEZ1bmN0aW9uLCB0cnVlKS50by5ub3QuYmUuYSgnZnVuY3Rpb24nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc09iamVjdCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBvYmplY3Qgb2YgdHlwZSAnT2JqZWN0JyAoYXMgcmV2ZWFsZWQgYnkgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgKS5cbiAgICogX1RoZSBhc3NlcnRpb24gZG9lcyBub3QgbWF0Y2ggc3ViY2xhc3NlZCBvYmplY3RzLl9cbiAgICpcbiAgICogICAgIHZhciBzZWxlY3Rpb24gPSB7IG5hbWU6ICdDaGFpJywgc2VydmU6ICd3aXRoIHNwaWNlcycgfTtcbiAgICogICAgIGFzc2VydC5pc09iamVjdChzZWxlY3Rpb24sICd0ZWEgc2VsZWN0aW9uIGlzIGFuIG9iamVjdCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc09iamVjdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNPYmplY3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNPYmplY3QsIHRydWUpLnRvLmJlLmEoJ29iamVjdCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90T2JqZWN0KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGFuIG9iamVjdCBvZiB0eXBlICdPYmplY3QnIChhcyByZXZlYWxlZCBieSBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2ApLlxuICAgKlxuICAgKiAgICAgdmFyIHNlbGVjdGlvbiA9ICdjaGFpJ1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2JqZWN0KHNlbGVjdGlvbiwgJ3RlYSBzZWxlY3Rpb24gaXMgbm90IGFuIG9iamVjdCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2JqZWN0KG51bGwsICdudWxsIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RPYmplY3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90T2JqZWN0ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90T2JqZWN0LCB0cnVlKS50by5ub3QuYmUuYSgnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNBcnJheSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBhcnJheS5cbiAgICpcbiAgICogICAgIHZhciBtZW51ID0gWyAnZ3JlZW4nLCAnY2hhaScsICdvb2xvbmcnIF07XG4gICAqICAgICBhc3NlcnQuaXNBcnJheShtZW51LCAnd2hhdCBraW5kIG9mIHRlYSBkbyB3ZSB3YW50PycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0FycmF5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0FycmF5ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQXJyYXksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90QXJyYXkodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYW4gYXJyYXkuXG4gICAqXG4gICAqICAgICB2YXIgbWVudSA9ICdncmVlbnxjaGFpfG9vbG9uZyc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RBcnJheShtZW51LCAnd2hhdCBraW5kIG9mIHRlYSBkbyB3ZSB3YW50PycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEFycmF5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEFycmF5ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90QXJyYXksIHRydWUpLnRvLm5vdC5iZS5hbignYXJyYXknKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1N0cmluZyh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIHN0cmluZy5cbiAgICpcbiAgICogICAgIHZhciB0ZWFPcmRlciA9ICdjaGFpJztcbiAgICogICAgIGFzc2VydC5pc1N0cmluZyh0ZWFPcmRlciwgJ29yZGVyIHBsYWNlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1N0cmluZ1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNTdHJpbmcgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNTdHJpbmcsIHRydWUpLnRvLmJlLmEoJ3N0cmluZycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90U3RyaW5nKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGEgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYU9yZGVyID0gNDtcbiAgICogICAgIGFzc2VydC5pc05vdFN0cmluZyh0ZWFPcmRlciwgJ29yZGVyIHBsYWNlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdFN0cmluZ1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RTdHJpbmcgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RTdHJpbmcsIHRydWUpLnRvLm5vdC5iZS5hKCdzdHJpbmcnKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc051bWJlcih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIG51bWJlci5cbiAgICpcbiAgICogICAgIHZhciBjdXBzID0gMjtcbiAgICogICAgIGFzc2VydC5pc051bWJlcihjdXBzLCAnaG93IG1hbnkgY3VwcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc051bWJlclxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTnVtYmVyID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTnVtYmVyLCB0cnVlKS50by5iZS5hKCdudW1iZXInKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE51bWJlcih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIG51bWJlci5cbiAgICpcbiAgICogICAgIHZhciBjdXBzID0gJzIgY3VwcyBwbGVhc2UnO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90TnVtYmVyKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TnVtYmVyXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdE51bWJlciA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE51bWJlciwgdHJ1ZSkudG8ubm90LmJlLmEoJ251bWJlcicpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0Zpbml0ZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIuIFVubGlrZSBgLmlzTnVtYmVyYCwgdGhpcyB3aWxsIGZhaWwgZm9yIGBOYU5gIGFuZCBgSW5maW5pdHlgLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAyO1xuICAgKiAgICAgYXNzZXJ0LmlzRmluaXRlKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNGaW5pdGUoTmFOKTsgLy8gdGhyb3dzXG4gICAqXG4gICAqIEBuYW1lIGlzRmluaXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGaW5pdGUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNGaW5pdGUsIHRydWUpLnRvLmJlLmZpbml0ZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Jvb2xlYW4odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgYSBib29sZWFuLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYVJlYWR5ID0gdHJ1ZVxuICAgKiAgICAgICAsIHRlYVNlcnZlZCA9IGZhbHNlO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQm9vbGVhbih0ZWFSZWFkeSwgJ2lzIHRoZSB0ZWEgcmVhZHknKTtcbiAgICogICAgIGFzc2VydC5pc0Jvb2xlYW4odGVhU2VydmVkLCAnaGFzIHRlYSBiZWVuIHNlcnZlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Jvb2xlYW5cbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQm9vbGVhbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Jvb2xlYW4sIHRydWUpLnRvLmJlLmEoJ2Jvb2xlYW4nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEJvb2xlYW4odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBib29sZWFuLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYVJlYWR5ID0gJ3llcCdcbiAgICogICAgICAgLCB0ZWFTZXJ2ZWQgPSAnbm9wZSc7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RCb29sZWFuKHRlYVJlYWR5LCAnaXMgdGhlIHRlYSByZWFkeScpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90Qm9vbGVhbih0ZWFTZXJ2ZWQsICdoYXMgdGVhIGJlZW4gc2VydmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90Qm9vbGVhblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RCb29sZWFuID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90Qm9vbGVhbiwgdHJ1ZSkudG8ubm90LmJlLmEoJ2Jvb2xlYW4nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC50eXBlT2YodmFsdWUsIG5hbWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAncyB0eXBlIGlzIGBuYW1lYCwgYXMgZGV0ZXJtaW5lZCBieVxuICAgKiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqICAgICBhc3NlcnQudHlwZU9mKHsgdGVhOiAnY2hhaScgfSwgJ29iamVjdCcsICd3ZSBoYXZlIGFuIG9iamVjdCcpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZihbJ2NoYWknLCAnamFzbWluZSddLCAnYXJyYXknLCAnd2UgaGF2ZSBhbiBhcnJheScpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZigndGVhJywgJ3N0cmluZycsICd3ZSBoYXZlIGEgc3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKC90ZWEvLCAncmVnZXhwJywgJ3dlIGhhdmUgYSByZWd1bGFyIGV4cHJlc3Npb24nKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YobnVsbCwgJ251bGwnLCAnd2UgaGF2ZSBhIG51bGwnKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YodW5kZWZpbmVkLCAndW5kZWZpbmVkJywgJ3dlIGhhdmUgYW4gdW5kZWZpbmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIHR5cGVPZlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQudHlwZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LnR5cGVPZiwgdHJ1ZSkudG8uYmUuYSh0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RUeXBlT2YodmFsdWUsIG5hbWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAncyB0eXBlIGlzIF9ub3RfIGBuYW1lYCwgYXMgZGV0ZXJtaW5lZCBieVxuICAgKiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90VHlwZU9mKCd0ZWEnLCAnbnVtYmVyJywgJ3N0cmluZ3MgYXJlIG5vdCBudW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFR5cGVPZlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZW9mIG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFR5cGVPZiA9IGZ1bmN0aW9uICh2YWwsIHR5cGUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RUeXBlT2YsIHRydWUpLnRvLm5vdC5iZS5hKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmluc3RhbmNlT2Yob2JqZWN0LCBjb25zdHJ1Y3RvciwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgLlxuICAgKlxuICAgKiAgICAgdmFyIFRlYSA9IGZ1bmN0aW9uIChuYW1lKSB7IHRoaXMubmFtZSA9IG5hbWU7IH1cbiAgICogICAgICAgLCBjaGFpID0gbmV3IFRlYSgnY2hhaScpO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmluc3RhbmNlT2YoY2hhaSwgVGVhLCAnY2hhaSBpcyBhbiBpbnN0YW5jZSBvZiB0ZWEnKTtcbiAgICpcbiAgICogQG5hbWUgaW5zdGFuY2VPZlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbnN0YW5jZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lmluc3RhbmNlT2YsIHRydWUpLnRvLmJlLmluc3RhbmNlT2YodHlwZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5zdGFuY2VPZihvYmplY3QsIGNvbnN0cnVjdG9yLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlYCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgYGNvbnN0cnVjdG9yYC5cbiAgICpcbiAgICogICAgIHZhciBUZWEgPSBmdW5jdGlvbiAobmFtZSkgeyB0aGlzLm5hbWUgPSBuYW1lOyB9XG4gICAqICAgICAgICwgY2hhaSA9IG5ldyBTdHJpbmcoJ2NoYWknKTtcbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbnN0YW5jZU9mKGNoYWksIFRlYSwgJ2NoYWkgaXMgbm90IGFuIGluc3RhbmNlIG9mIHRlYScpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbnN0YW5jZU9mXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEluc3RhbmNlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQubm90SW5zdGFuY2VPZiwgdHJ1ZSlcbiAgICAgIC50by5ub3QuYmUuaW5zdGFuY2VPZih0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgaW5jbHVkZXMgYG5lZWRsZWAuIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGVcbiAgICogaW5jbHVzaW9uIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXksIGEgc3Vic3RyaW5nIGluIGEgc3RyaW5nLCBvciBhIHN1YnNldCBvZlxuICAgKiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKFsxLDIsM10sIDIsICdhcnJheSBjb250YWlucyB2YWx1ZScpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoJ2Zvb2JhcicsICdmb28nLCAnc3RyaW5nIGNvbnRhaW5zIHN1YnN0cmluZycpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoeyBmb286ICdiYXInLCBoZWxsbzogJ3VuaXZlcnNlJyB9LCB7IGZvbzogJ2JhcicgfSwgJ29iamVjdCBjb250YWlucyBwcm9wZXJ0eScpO1xuICAgKlxuICAgKiBTdHJpY3QgZXF1YWxpdHkgKD09PSkgaXMgdXNlZC4gV2hlbiBhc3NlcnRpbmcgdGhlIGluY2x1c2lvbiBvZiBhIHZhbHVlIGluXG4gICAqIGFuIGFycmF5LCB0aGUgYXJyYXkgaXMgc2VhcmNoZWQgZm9yIGFuIGVsZW1lbnQgdGhhdCdzIHN0cmljdGx5IGVxdWFsIHRvIHRoZVxuICAgKiBnaXZlbiB2YWx1ZS4gV2hlbiBhc3NlcnRpbmcgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QsIHRoZSBvYmplY3RcbiAgICogaXMgc2VhcmNoZWQgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSBrZXlzLCBjaGVja2luZyB0aGF0IGVhY2ggb25lIGlzIHByZXNlbnRcbiAgICogYW5kIHN0cmljdHkgZXF1YWwgdG8gdGhlIGdpdmVuIHByb3BlcnR5IHZhbHVlLiBGb3IgaW5zdGFuY2U6XG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZShbb2JqMSwgb2JqMl0sIG9iajEpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMX0pO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMSwgYmFyOiBvYmoyfSk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmluY2x1ZGUsIHRydWUpLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgZG9lcyBub3QgaW5jbHVkZSBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0XG4gICAqIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXksIGEgc3Vic3RyaW5nIGluIGEgc3RyaW5nLCBvciBhIHN1YnNldCBvZlxuICAgKiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKFsxLDIsM10sIDQsICdhcnJheSBkb2Vzbid0IGNvbnRhaW4gdmFsdWUnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKCdmb29iYXInLCAnYmF6JywgJ3N0cmluZyBkb2Vzbid0IGNvbnRhaW4gc3Vic3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZSh7IGZvbzogJ2JhcicsIGhlbGxvOiAndW5pdmVyc2UnIH0sIHsgZm9vOiAnYmF6JyB9LCAnb2JqZWN0IGRvZXNuJ3QgY29udGFpbiBwcm9wZXJ0eScpO1xuICAgKlxuICAgKiBTdHJpY3QgZXF1YWxpdHkgKD09PSkgaXMgdXNlZC4gV2hlbiBhc3NlcnRpbmcgdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhblxuICAgKiBhcnJheSwgdGhlIGFycmF5IGlzIHNlYXJjaGVkIHRvIGNvbmZpcm0gdGhlIGFic2VuY2Ugb2YgYW4gZWxlbWVudCB0aGF0J3NcbiAgICogc3RyaWN0bHkgZXF1YWwgdG8gdGhlIGdpdmVuIHZhbHVlLiBXaGVuIGFzc2VydGluZyBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluXG4gICAqIGFuIG9iamVjdCwgdGhlIG9iamVjdCBpcyBzZWFyY2hlZCB0byBjb25maXJtIHRoYXQgYXQgbGVhc3Qgb25lIG9mIHRoZSBnaXZlblxuICAgKiBwcm9wZXJ0eSBrZXlzIGlzIGVpdGhlciBub3QgcHJlc2VudCBvciBub3Qgc3RyaWN0bHkgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIHByb3BlcnR5IHZhbHVlLiBGb3IgaW5zdGFuY2U6XG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZShbb2JqMSwgb2JqMl0sIHthOiAxfSk7XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX19KTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IG9iajEsIGJhcjoge2I6IDJ9fSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGUsIHRydWUpLm5vdC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBpbmNsdWRlcyBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZVxuICAgKiBpbmNsdXNpb24gb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSBvciBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICogRGVlcCBlcXVhbGl0eSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgdmFyIG9iajEgPSB7YTogMX1cbiAgICogICAgICAgLCBvYmoyID0ge2I6IDJ9O1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDF9KTtcbiAgICogICAgIGFzc2VydC5kZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX19KTtcbiAgICogICAgIGFzc2VydC5kZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX0sIGJhcjoge2I6IDJ9fSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBJbmNsdWRlXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge01peGVkfSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuZGVlcEluY2x1ZGUsIHRydWUpLmRlZXAuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgZG9lcyBub3QgaW5jbHVkZSBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0XG4gICAqIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXkgb3IgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QuXG4gICAqIERlZXAgZXF1YWxpdHkgaXMgdXNlZC5cbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZShbb2JqMSwgb2JqMl0sIHthOiA5fSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzoge2E6IDl9fSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzoge2E6IDF9LCBiYXI6IHtiOiA5fX0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwSW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwSW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlLCB0cnVlKS5ub3QuZGVlcC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy4gXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdC5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZCBcbiAgICogcHJvcGVydGllcy5cbiAgICogJ1tdJyBhbmQgJy4nIGluIHByb3BlcnR5IG5hbWVzIGNhbiBiZSBlc2NhcGVkIHVzaW5nIGRvdWJsZSBiYWNrc2xhc2hlcy5cbiAgICogXG4gICAqICAgICBhc3NlcnQubmVzdGVkSW5jbHVkZSh7Jy5hJzogeydiJzogJ3gnfX0sIHsnXFxcXC5hLltiXSc6ICd4J30pO1xuICAgKiAgICAgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUoeydhJzogeydbYl0nOiAneCd9fSwgeydhLlxcXFxbYlxcXFxdJzogJ3gnfSk7XG4gICAqIFxuICAgKiBAbmFtZSBuZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi8gXG5cbiAgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5uZXN0ZWRJbmNsdWRlLCB0cnVlKS5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgZG9lcyBub3QgaW5jbHVkZSAnbmVlZGxlJy4gXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3QuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWQgXG4gICAqIHByb3BlcnRpZXMuIFxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5ub3ROZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J2InOiAneCd9fSwgeydcXFxcLmEuYic6ICd5J30pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUoeydhJzogeydbYl0nOiAneCd9fSwgeydhLlxcXFxbYlxcXFxdJzogJ3knfSk7XG4gICAqIFxuICAgKiBAbmFtZSBub3ROZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi8gXG5cbiAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3ROZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBOZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGluY2x1c2lvbiBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWQgXG4gICAqIHByb3BlcnRpZXMuXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlKHthOiB7YjogW3t4OiAxfV19fSwgeydhLmJbMF0nOiB7eDogMX19KTtcbiAgICogICAgIGFzc2VydC5kZWVwTmVzdGVkSW5jbHVkZSh7Jy5hJzogeydbYl0nOiB7eDogMX19fSwgeydcXFxcLmEuXFxcXFtiXFxcXF0nOiB7eDogMX19KTtcbiAgICogICAgXG4gICAqIEBuYW1lIGRlZXBOZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi9cblxuICBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLmRlZXAubmVzdGVkLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwTmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBkb2VzIG5vdCBpbmNsdWRlICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGFic2VuY2Ugb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0IHdoaWxlIGNoZWNraW5nIGZvciBkZWVwIGVxdWFsaXR5LlxuICAgKiBFbmFibGVzIHRoZSB1c2Ugb2YgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgcmVmZXJlbmNpbmcgbmVzdGVkIFxuICAgKiBwcm9wZXJ0aWVzLlxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkSW5jbHVkZSh7YToge2I6IFt7eDogMX1dfX0sIHsnYS5iWzBdJzoge3k6IDF9fSlcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkSW5jbHVkZSh7Jy5hJzogeydbYl0nOiB7eDogMX19fSwgeydcXFxcLmEuXFxcXFtiXFxcXF0nOiB7eTogMn19KTtcbiAgICogICAgXG4gICAqIEBuYW1lIG5vdERlZXBOZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5kZWVwLm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0IHdoaWxlIGlnbm9yaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5vd25JbmNsdWRlKHsgYTogMSB9LCB7IGE6IDEgfSk7XG4gICAqIFxuICAgKiBAbmFtZSBvd25JbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5vd25JbmNsdWRlLCB0cnVlKS5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqIFxuICAgKiAgICAgT2JqZWN0LnByb3RvdHlwZS5iID0gMjtcbiAgICogXG4gICAqICAgICBhc3NlcnQubm90T3duSW5jbHVkZSh7IGE6IDEgfSwgeyBiOiAyIH0pO1xuICAgKiBcbiAgICogQG5hbWUgbm90T3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90T3duSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90T3duSW5jbHVkZSwgdHJ1ZSkubm90Lm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcyBhbmQgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIFxuICAgKiAgICAgIGFzc2VydC5kZWVwT3duSW5jbHVkZSh7YToge2I6IDJ9fSwge2E6IHtiOiAyfX0pO1xuICAgKiAgICAgIFxuICAgKiBAbmFtZSBkZWVwT3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcE93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmRlZXBPd25JbmNsdWRlLCB0cnVlKVxuICAgICAgLmRlZXAub3duLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAubm90RGVlcE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMgYW5kIGNoZWNraW5nIGZvciBkZWVwIGVxdWFsaXR5LlxuICAgKiBcbiAgICogICAgICBhc3NlcnQubm90RGVlcE93bkluY2x1ZGUoe2E6IHtiOiAyfX0sIHthOiB7YzogM319KTtcbiAgICogICAgICBcbiAgICogQG5hbWUgbm90RGVlcE93bkluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBPd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3REZWVwT3duSW5jbHVkZSwgdHJ1ZSlcbiAgICAgIC5ub3QuZGVlcC5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm1hdGNoKHZhbHVlLCByZWdleHAsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgbWF0Y2hlcyB0aGUgcmVndWxhciBleHByZXNzaW9uIGByZWdleHBgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm1hdGNoKCdmb29iYXInLCAvXmZvby8sICdyZWdleHAgbWF0Y2hlcycpO1xuICAgKlxuICAgKiBAbmFtZSBtYXRjaFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5tYXRjaCA9IGZ1bmN0aW9uIChleHAsIHJlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubWF0Y2gsIHRydWUpLnRvLm1hdGNoKHJlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RNYXRjaCh2YWx1ZSwgcmVnZXhwLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGRvZXMgbm90IG1hdGNoIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYHJlZ2V4cGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TWF0Y2goJ2Zvb2JhcicsIC9eZm9vLywgJ3JlZ2V4cCBkb2VzIG5vdCBtYXRjaCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RNYXRjaFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RNYXRjaCA9IGZ1bmN0aW9uIChleHAsIHJlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90TWF0Y2gsIHRydWUpLnRvLm5vdC5tYXRjaChyZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAucHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYScpO1xuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RvU3RyaW5nJyk7XG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5wcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5wcm9wZXJ0eSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90UHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAnY29mZmVlJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RQcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgIHdpdGggYSB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAqICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5VmFsKHsgdGVhOiAnaXMgZ29vZCcgfSwgJ3RlYScsICdpcyBnb29kJyk7XG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5wcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LnByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLmhhdmUucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZFxuICAgKiBieSBgcHJvcGVydHlgIHdpdGggdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVja1xuICAgKiAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCh7IHRlYTogJ2lzIGdvb2QnIH0sICd0ZWEnLCAnaXMgYmFkJyk7XG4gICAqICAgICBhc3NlcnQubm90UHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBnb29kJyB9LCAnY29mZmVlJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgbm90UHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90UHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWQgYnlcbiAgICogYHByb3BlcnR5YCB3aXRoIGEgdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kZWVwUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5kZWVwLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAgd2l0aCB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgYmxhY2s6ICdtYXRjaGEnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBncmVlbjogJ29vbG9uZycgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICdjb2ZmZWUnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgLiBJbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25Qcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICd0ZWEnKTtcbiAgICpcbiAgICogQG5hbWUgb3duUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93blByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm93blByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLmhhdmUub3duLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93blByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLiBJbmhlcml0ZWQgcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUnKTtcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSh7fSwgJ3RvU3RyaW5nJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE93blByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5vd24ucHJvcGVydHkocHJvcCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIGFuZCBhIHZhbHVlXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKiBJbmhlcml0ZWQgcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCh7IGNvZmZlZTogJ2lzIGdvb2QnfSwgJ2NvZmZlZScsICdpcyBnb29kJyk7XG4gICAqXG4gICAqIEBuYW1lIG93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQub3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93blByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3QgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YFxuICAgKiB3aXRoIGEgdmFsdWUgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2tcbiAgICogKD09PSkuIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsKHsgdGVhOiAnaXMgYmV0dGVyJ30sICd0ZWEnLCAnaXMgd29yc2UnKTtcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCh7fSwgJ3RvU3RyaW5nJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90T3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUub3duLnByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwT3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIGFuZCBhIHZhbHVlXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay4gSW5oZXJpdGVkXG4gICAqIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwT3duUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWx1ZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAub3duLnByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwT3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgXG4gICAqIHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aGUgcHJvdmlkZWQgYHZhbHVlYC4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBibGFjazogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnb29sb25nJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ2NvZmZlZScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7fSwgJ3RvU3RyaW5nJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBPd25Qcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWQgYnlcbiAgICogYHByb3BlcnR5YCwgd2hpY2ggY2FuIGJlIGEgc3RyaW5nIHVzaW5nIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuXG4gICAqXG4gICAqICAgICBhc3NlcnQubmVzdGVkUHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJyk7XG4gICAqXG4gICAqIEBuYW1lIG5lc3RlZFByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3ROZXN0ZWRQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgLCB3aGljaFxuICAgKiBjYW4gYmUgYSBzdHJpbmcgdXNpbmcgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgbmVzdGVkIHJlZmVyZW5jZS4gVGhlXG4gICAqIHByb3BlcnR5IGNhbm5vdCBleGlzdCBvbiB0aGUgb2JqZWN0IG5vciBhbnl3aGVyZSBpbiBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5vb2xvbmcnKTtcbiAgICpcbiAgICogQG5hbWUgbm90TmVzdGVkUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5uZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoIHZhbHVlIGdpdmVuXG4gICAqIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWRcbiAgICogcmVmZXJlbmNlLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5ncmVlbicsICdtYXRjaGEnKTtcbiAgICpcbiAgICogQG5hbWUgbmVzdGVkUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoXG4gICAqIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvclxuICAgKiBuZXN0ZWQgcmVmZXJlbmNlLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5ncmVlbicsICdrb25hY2hhJyk7XG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAnY29mZmVlLmdyZWVuJywgJ21hdGNoYScpO1xuICAgKlxuICAgKiBAbmFtZSBub3ROZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwTmVzdGVkUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgd2l0aCBhIHZhbHVlIGdpdmVuXG4gICAqIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWRcbiAgICogcmVmZXJlbmNlLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgbWF0Y2hhOiAneXVtJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5kZWVwLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoXG4gICAqIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvclxuICAgKiBuZXN0ZWQgcmVmZXJlbmNlLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgb29sb25nOiAneXVtJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgbWF0Y2hhOiAneXVjaycgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiB7IG1hdGNoYTogJ3l1bScgfSB9IH0sICd0ZWEuYmxhY2snLCB7IG1hdGNoYTogJ3l1bScgfSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5sZW5ndGhPZihvYmplY3QsIGxlbmd0aCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgYGxlbmd0aGAgcHJvcGVydHkgd2l0aCB0aGUgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBhc3NlcnQubGVuZ3RoT2YoWzEsMiwzXSwgMywgJ2FycmF5IGhhcyBsZW5ndGggb2YgMycpO1xuICAgKiAgICAgYXNzZXJ0Lmxlbmd0aE9mKCdmb29iYXInLCA2LCAnc3RyaW5nIGhhcyBsZW5ndGggb2YgNicpO1xuICAgKlxuICAgKiBAbmFtZSBsZW5ndGhPZlxuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubGVuZ3RoT2YgPSBmdW5jdGlvbiAoZXhwLCBsZW4sIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5sZW5ndGhPZiwgdHJ1ZSkudG8uaGF2ZS5sZW5ndGhPZihsZW4pO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmhhc0FueUtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnZm9vJywgJ2lEb250RXhpc3QnLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgaURvbnRFeGlzdDogOTksIGJhejogMTMzN30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9LCAna2V5J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKSwgW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSk7XG4gICAqXG4gICAqIEBuYW1lIGhhc0FueUtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbnlLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FueUtleXMsIHRydWUpLnRvLmhhdmUuYW55LmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5oYXNBbGxLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYWxsIGFuZCBvbmx5IGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnYmFyJywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge2ZvbzogMzAsIGJhcjogOTksIGJhejogMTMzN10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9LCAna2V5J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKTtcbiAgICpcbiAgICogQG5hbWUgaGFzQWxsS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaGFzQWxsS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbGxLZXlzLCB0cnVlKS50by5oYXZlLmFsbC5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuY29udGFpbnNBbGxLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQgYnV0IG1heSBoYXZlIG1vcmUga2V5cyBub3QgbGlzdGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdiYXonXSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnYmFyJywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgYmF6OiAxMzM3fSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge2ZvbzogMzAsIGJhcjogOTksIGJhejogMTMzN30pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX1dKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9LCAna2V5J10pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7Zm9vOiAnYmFyJ31dKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKTtcbiAgICpcbiAgICogQG5hbWUgY29udGFpbnNBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jb250YWluc0FsbEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuY29udGFpbnNBbGxLZXlzLCB0cnVlKVxuICAgICAgLnRvLmNvbnRhaW4uYWxsLmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90SGF2ZUFueUtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBub25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnb25lJywgJ3R3bycsICdleGFtcGxlJ10pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtvbmU6IDEsIHR3bzogMiwgZXhhbXBsZTogJ2Zvbyd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tvbmU6ICd0d28nfSwgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tvbmU6ICd0d28nfSwgJ2V4YW1wbGUnXSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQW55S2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5hbnkua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQWxsS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBub3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydvbmUnLCAndHdvJywgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge29uZTogMSwgdHdvOiAyLCBleGFtcGxlOiAnZm9vJ30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFsbC5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaGFzQW55RGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge3RocmVlOiAndGhyZWUnfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbnlEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbnlEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmFueS5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmhhc0FsbERlZXBLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYWxsIGFuZCBvbmx5IGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ31dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICpcbiAgICogQG5hbWUgaGFzQWxsRGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbGxEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbGxEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmFsbC5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmNvbnRhaW5zQWxsRGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGNvbnRhaW5zIGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICpcbiAgICogQG5hbWUgY29udGFpbnNBbGxEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5jb250YWluLmFsbC5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQW55RGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBub25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7dGhpc0RvZXNOb3Q6ICdleGlzdCd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe3R3ZW50eTogJ3R3ZW50eSd9LCB7ZmlmdHk6ICdmaWZ0eSd9XSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCB7dHdlbnR5OiAndHdlbnR5J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3t0d2VudHk6ICd0d2VudHknfSwge2ZpZnR5OiAnZmlmdHknfV0pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFueURlZXBLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFueS5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQWxsRGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgbm90IGhhdmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7dGhpc0RvZXNOb3Q6ICdleGlzdCd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe3R3ZW50eTogJ3R3ZW50eSd9LCB7b25lOiAnb25lJ31dKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHt0d2VudHk6ICd0d2VudHknfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7ZmlmdHk6ICdmaWZ0eSd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQWxsRGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYWxsLmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAudGhyb3dzKGZuLCBbZXJyb3JMaWtlL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICpcbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBjb25zdHJ1Y3RvciwgYXNzZXJ0cyB0aGF0IGBmbmAgd2lsbCB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuXG4gICAqIGluc3RhbmNlIG9mIGBlcnJvckxpa2VgLlxuICAgKiBJZiBgZXJyb3JMaWtlYCBpcyBhbiBgRXJyb3JgIGluc3RhbmNlLCBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biBpcyB0aGUgc2FtZVxuICAgKiBpbnN0YW5jZSBhcyBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVyck1zZ01hdGNoZXJgIGlzIHByb3ZpZGVkLCBpdCBhbHNvIGFzc2VydHMgdGhhdCB0aGUgZXJyb3IgdGhyb3duIHdpbGwgaGF2ZSBhXG4gICAqIG1lc3NhZ2UgbWF0Y2hpbmcgYGVyck1zZ01hdGNoZXJgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgJ2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvcicpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgL2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvci8pO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgUmVmZXJlbmNlRXJyb3IpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvciwgJ0Vycm9yIHRocm93biBtdXN0IGJlIGEgUmVmZXJlbmNlRXJyb3IgYW5kIGhhdmUgdGhpcyBtc2cnKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIGVycm9ySW5zdGFuY2UsICdFcnJvciB0aHJvd24gbXVzdCBiZSB0aGUgc2FtZSBlcnJvckluc3RhbmNlIGFuZCBoYXZlIHRoaXMgbXNnJyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvciwgL0Vycm9yIHRocm93biBtdXN0IGJlIGEgUmVmZXJlbmNlRXJyb3IgYW5kIG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIGVycm9ySW5zdGFuY2UsIC9FcnJvciB0aHJvd24gbXVzdCBiZSB0aGUgc2FtZSBlcnJvckluc3RhbmNlIGFuZCBtYXRjaCB0aGlzLyk7XG4gICAqXG4gICAqIEBuYW1lIHRocm93c1xuICAgKiBAYWxpYXMgdGhyb3dcbiAgICogQGFsaWFzIFRocm93XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3RvcnxFcnJvcn0gZXJyb3JMaWtlXG4gICAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gZXJyTXNnTWF0Y2hlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC50aHJvd3MgPSBmdW5jdGlvbiAoZm4sIGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlciwgbXNnKSB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgZXJyb3JMaWtlIHx8IGVycm9yTGlrZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgZXJyTXNnTWF0Y2hlciA9IGVycm9yTGlrZTtcbiAgICAgIGVycm9yTGlrZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGFzc2VydEVyciA9IG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LnRocm93cywgdHJ1ZSlcbiAgICAgIC50by50aHJvdyhlcnJvckxpa2UsIGVyck1zZ01hdGNoZXIpO1xuICAgIHJldHVybiBmbGFnKGFzc2VydEVyciwgJ29iamVjdCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RUaHJvdyhmbiwgW2Vycm9yTGlrZS9zdHJpbmcvcmVnZXhwXSwgW3N0cmluZy9yZWdleHBdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIElmIGBlcnJvckxpa2VgIGlzIGFuIGBFcnJvcmAgY29uc3RydWN0b3IsIGFzc2VydHMgdGhhdCBgZm5gIHdpbGwgX25vdF8gdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhblxuICAgKiBpbnN0YW5jZSBvZiBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBpbnN0YW5jZSwgYXNzZXJ0cyB0aGF0IHRoZSBlcnJvciB0aHJvd24gaXMgX25vdF8gdGhlIHNhbWVcbiAgICogaW5zdGFuY2UgYXMgYGVycm9yTGlrZWAuXG4gICAqIElmIGBlcnJNc2dNYXRjaGVyYCBpcyBwcm92aWRlZCwgaXQgYWxzbyBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biB3aWxsIF9ub3RfIGhhdmUgYVxuICAgKiBtZXNzYWdlIG1hdGNoaW5nIGBlcnJNc2dNYXRjaGVyYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sICdBbnkgRXJyb3IgdGhyb3duIG11c3Qgbm90IGhhdmUgdGhpcyBtZXNzYWdlJyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCAvQW55IEVycm9yIHRocm93biBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBFcnJvcik7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBlcnJvckluc3RhbmNlKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIEVycm9yLCAnRXJyb3IgbXVzdCBub3QgaGF2ZSB0aGlzIG1lc3NhZ2UnKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UsICdFcnJvciBtdXN0IG5vdCBoYXZlIHRoaXMgbWVzc2FnZScpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgRXJyb3IsIC9FcnJvciBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBlcnJvckluc3RhbmNlLCAvRXJyb3IgbXVzdCBub3QgbWF0Y2ggdGhpcy8pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90VGhyb3dcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtFcnJvckNvbnN0cnVjdG9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBlcnJNc2dNYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBlcnJvckxpa2UgfHwgZXJyb3JMaWtlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBlcnJNc2dNYXRjaGVyID0gZXJyb3JMaWtlO1xuICAgICAgZXJyb3JMaWtlID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90VGhyb3csIHRydWUpXG4gICAgICAudG8ubm90LnRocm93KGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3BlcmF0b3IodmFsMSwgb3BlcmF0b3IsIHZhbDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQ29tcGFyZXMgdHdvIHZhbHVlcyB1c2luZyBgb3BlcmF0b3JgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm9wZXJhdG9yKDEsICc8JywgMiwgJ2V2ZXJ5dGhpbmcgaXMgb2snKTtcbiAgICogICAgIGFzc2VydC5vcGVyYXRvcigxLCAnPicsIDIsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKlxuICAgKiBAbmFtZSBvcGVyYXRvclxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwxXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vcGVyYXRvciA9IGZ1bmN0aW9uICh2YWwsIG9wZXJhdG9yLCB2YWwyLCBtc2cpIHtcbiAgICB2YXIgb2s7XG4gICAgc3dpdGNoKG9wZXJhdG9yKSB7XG4gICAgICBjYXNlICc9PSc6XG4gICAgICAgIG9rID0gdmFsID09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgb2sgPSB2YWwgPT09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPic6XG4gICAgICAgIG9rID0gdmFsID4gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc+PSc6XG4gICAgICAgIG9rID0gdmFsID49IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIG9rID0gdmFsIDwgdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc8PSc6XG4gICAgICAgIG9rID0gdmFsIDw9IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnIT0nOlxuICAgICAgICBvayA9IHZhbCAhPSB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyE9PSc6XG4gICAgICAgIG9rID0gdmFsICE9PSB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1zZyA9IG1zZyA/IG1zZyArICc6ICcgOiBtc2c7XG4gICAgICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKFxuICAgICAgICAgIG1zZyArICdJbnZhbGlkIG9wZXJhdG9yIFwiJyArIG9wZXJhdG9yICsgJ1wiJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgYXNzZXJ0Lm9wZXJhdG9yXG4gICAgICAgICk7XG4gICAgfVxuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihvaywgbXNnLCBhc3NlcnQub3BlcmF0b3IsIHRydWUpO1xuICAgIHRlc3QuYXNzZXJ0KFxuICAgICAgICB0cnVlID09PSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIHV0aWwuaW5zcGVjdCh2YWwpICsgJyB0byBiZSAnICsgb3BlcmF0b3IgKyAnICcgKyB1dGlsLmluc3BlY3QodmFsMilcbiAgICAgICwgJ2V4cGVjdGVkICcgKyB1dGlsLmluc3BlY3QodmFsKSArICcgdG8gbm90IGJlICcgKyBvcGVyYXRvciArICcgJyArIHV0aWwuaW5zcGVjdCh2YWwyKSApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmNsb3NlVG8oYWN0dWFsLCBleHBlY3RlZCwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgYGV4cGVjdGVkYCwgdG8gd2l0aGluIGEgKy8tIGBkZWx0YWAgcmFuZ2UuXG4gICAqXG4gICAqICAgICBhc3NlcnQuY2xvc2VUbygxLjUsIDEsIDAuNSwgJ251bWJlcnMgYXJlIGNsb3NlJyk7XG4gICAqXG4gICAqIEBuYW1lIGNsb3NlVG9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFjdHVhbFxuICAgKiBAcGFyYW0ge051bWJlcn0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jbG9zZVRvID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBkZWx0YSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmNsb3NlVG8sIHRydWUpLnRvLmJlLmNsb3NlVG8oZXhwLCBkZWx0YSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuYXBwcm94aW1hdGVseShhY3R1YWwsIGV4cGVjdGVkLCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCBgZXhwZWN0ZWRgLCB0byB3aXRoaW4gYSArLy0gYGRlbHRhYCByYW5nZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5hcHByb3hpbWF0ZWx5KDEuNSwgMSwgMC41LCAnbnVtYmVycyBhcmUgY2xvc2UnKTtcbiAgICpcbiAgICogQG5hbWUgYXBwcm94aW1hdGVseVxuICAgKiBAcGFyYW0ge051bWJlcn0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmFwcHJveGltYXRlbHkgPSBmdW5jdGlvbiAoYWN0LCBleHAsIGRlbHRhLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuYXBwcm94aW1hdGVseSwgdHJ1ZSlcbiAgICAgIC50by5iZS5hcHByb3hpbWF0ZWx5KGV4cCwgZGVsdGEpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnNhbWVNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuc2FtZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSwgMyBdLCAnc2FtZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIHNhbWVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZU1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLnNhbWUubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGRvbid0IGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuXG4gICAqIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgNSwgMSwgMyBdLCAnbm90IHNhbWUgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFNhbWVNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZURlZXBNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnNhbWVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgW3sgYjogMiB9LCB7IGE6IDEgfSwgeyBjOiAzIH1dLCAnc2FtZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5kZWVwLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lRGVlcE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci5cbiAgICogVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbeyBiOiAyIH0sIHsgYTogMSB9LCB7IGY6IDUgfV0sICdub3Qgc2FtZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUuZGVlcC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZU9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICogVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMSwgMiwgMyBdLCAnc2FtZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lXG4gICAqIG9yZGVyLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFNhbWVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAzIF0sICdub3Qgc2FtZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUub3JkZXJlZC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZURlZXBPcmRlcmVkTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAqIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiBhc3NlcnQuc2FtZURlZXBPcmRlcmVkTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sICdzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIHNhbWVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLnNhbWUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGRvbid0IGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZVxuICAgKiBvcmRlci4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyB6OiA1IH0gXSwgJ25vdCBzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGE6IDEgfSwgeyBjOiAzIH0gXSwgJ25vdCBzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5zYW1lLmRlZXAub3JkZXJlZC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZU1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuIER1cGxpY2F0ZXMgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5jbHVkZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSwgMiBdLCAnaW5jbHVkZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZU1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQuaW5jbHVkZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycyhbIDEsIDIsIDMgXSwgWyA1LCAxIF0sICdub3QgaW5jbHVkZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluY2x1ZGVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZU1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmluY2x1ZGUubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZURlZXBNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzIGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGEgZGVlcFxuICAgKiBlcXVhbGl0eSBjaGVjay4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9LCB7IGI6IDIgfSBdLCAnaW5jbHVkZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVEZWVwTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLmRlZXAubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZURlZXBNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGFcbiAgICogZGVlcCBlcXVhbGl0eSBjaGVjay4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgZjogNSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5kZWVwLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGVPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICogY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDEsIDIgXSwgJ2luY2x1ZGUgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdXBlcnNldFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWJzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY2x1ZGVPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICogY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDEgXSwgJ25vdCBpbmNsdWRlIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAzIF0sICdub3QgaW5jbHVkZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiB0aGUgc2FtZSBvcmRlclxuICAgKiBiZWdpbm5pbmcgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBpbiBgc3VwZXJzZXRgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSBdLCAnaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmluY2x1ZGUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXNuJ3QgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiB0aGUgc2FtZSBvcmRlclxuICAgKiBiZWdpbm5pbmcgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBpbiBgc3VwZXJzZXRgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGY6IDUgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGE6IDEgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGM6IDMgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdXBlcnNldFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWJzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAub25lT2YoaW5MaXN0LCBsaXN0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBub24tb2JqZWN0LCBub24tYXJyYXkgdmFsdWUgYGluTGlzdGAgYXBwZWFycyBpbiB0aGUgZmxhdCBhcnJheSBgbGlzdGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQub25lT2YoMSwgWyAyLCAxIF0sICdOb3QgZm91bmQgaW4gbGlzdCcpO1xuICAgKlxuICAgKiBAbmFtZSBvbmVPZlxuICAgKiBAcGFyYW0geyp9IGluTGlzdFxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBsaXN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vbmVPZiA9IGZ1bmN0aW9uIChpbkxpc3QsIGxpc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oaW5MaXN0LCBtc2csIGFzc2VydC5vbmVPZiwgdHJ1ZSkudG8uYmUub25lT2YobGlzdCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDIyIH07XG4gICAqICAgICBhc3NlcnQuY2hhbmdlcyhmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGNoYW5nZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jaGFuZ2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5jaGFuZ2VzLCB0cnVlKS50by5jaGFuZ2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gICAvKipcbiAgICogIyMjIC5jaGFuZ2VzQnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAyIH07XG4gICAqICAgICBhc3NlcnQuY2hhbmdlc0J5KGZuLCBvYmosICd2YWwnLCAyKTtcbiAgICpcbiAgICogQG5hbWUgY2hhbmdlc0J5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZSBhbW91bnQgKGRlbHRhKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jaGFuZ2VzQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmNoYW5nZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5jaGFuZ2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAgLyoqXG4gICAqICMjIyAuZG9lc05vdENoYW5nZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgY29uc29sZS5sb2coJ2ZvbycpOyB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RDaGFuZ2UoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90Q2hhbmdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdENoYW5nZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RDaGFuZ2UsIHRydWUpXG4gICAgICAudG8ubm90LmNoYW5nZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuY2hhbmdlc0J1dE5vdEJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgb3Igb2YgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgKz0gMTAgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDUpO1xuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXNCdXROb3RCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuY2hhbmdlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmNoYW5nZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGluY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSAxMyB9O1xuICAgKiAgICAgYXNzZXJ0LmluY3JlYXNlcyhmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlcyA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmluY3JlYXNlcywgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzQnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGluY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5IG9yIGEgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAxMCB9O1xuICAgKiAgICAgYXNzZXJ0LmluY3JlYXNlc0J5KGZuLCBvYmosICd2YWwnLCAxMCk7XG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlc0J5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZSBhbW91bnQgKGRlbHRhKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNyZWFzZXNCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuaW5jcmVhc2VzQnksIHRydWUpXG4gICAgICAudG8uaW5jcmVhc2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90SW5jcmVhc2UoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgaW5jcmVhc2UgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gOCB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RJbmNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY3JlYXNlc0J1dE5vdEJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGluY3JlYXNlIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDE1IH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDEwKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5pbmNyZWFzZXNCdXROb3RCeSwgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZGVjcmVhc2VzLCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgLT0gNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRlY3JlYXNlc0J5KGZuLCBvYmosICd2YWwnLCA1KTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlY3JlYXNlc0J5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5kZWNyZWFzZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3REZWNyZWFzZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMTUgfTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90RGVjcmVhc2UoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90RGVjcmVhc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90RGVjcmVhc2UgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90RGVjcmVhc2UsIHRydWUpXG4gICAgICAudG8ubm90LmRlY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90RGVjcmVhc2VCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnkoZm4sIG9iaiwgJ3ZhbCcsIDEpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90RGVjcmVhc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZUJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnksIHRydWUpXG4gICAgICAudG8ubm90LmRlY3JlYXNlKG9iaiwgcHJvcCkuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5IG9yIGEgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSlcbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5KGZuLCBvYmosICd2YWwnLCAxKTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXNCdXROb3RCeSwgdHJ1ZSlcbiAgICAgIC50by5kZWNyZWFzZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyohXG4gICAqICMjIyAuaWZFcnJvcihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgaWYgdmFsdWUgaXMgbm90IGEgZmFsc2UgdmFsdWUsIGFuZCB0aHJvd3MgaWYgaXQgaXMgYSB0cnVlIHZhbHVlLlxuICAgKiBUaGlzIGlzIGFkZGVkIHRvIGFsbG93IGZvciBjaGFpIHRvIGJlIGEgZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgTm9kZSdzXG4gICAqIGFzc2VydCBjbGFzcy5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0kgYW0gYSBjdXN0b20gZXJyb3InKTtcbiAgICogICAgIGFzc2VydC5pZkVycm9yKGVycik7IC8vIFJldGhyb3dzIGVyciFcbiAgICpcbiAgICogQG5hbWUgaWZFcnJvclxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRocm93KHZhbCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRXh0ZW5zaWJsZShvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBleHRlbnNpYmxlIChjYW4gaGF2ZSBuZXcgcHJvcGVydGllcyBhZGRlZCB0byBpdCkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNFeHRlbnNpYmxlKHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNFeHRlbnNpYmxlXG4gICAqIEBhbGlhcyBleHRlbnNpYmxlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNFeHRlbnNpYmxlID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzRXh0ZW5zaWJsZSwgdHJ1ZSkudG8uYmUuZXh0ZW5zaWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEV4dGVuc2libGUob2JqZWN0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgX25vdF8gZXh0ZW5zaWJsZS5cbiAgICpcbiAgICogICAgIHZhciBub25FeHRlbnNpYmxlT2JqZWN0ID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KTtcbiAgICogICAgIHZhciBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSk7XG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKG5vbkV4dGVuc2libGVPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZShzZWFsZWRPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZShmcm96ZW5PYmplY3QpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEV4dGVuc2libGVcbiAgICogQGFsaWFzIG5vdEV4dGVuc2libGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEV4dGVuc2libGUgPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlLCB0cnVlKS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1NlYWxlZChvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBzZWFsZWQgKGNhbm5vdCBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0XG4gICAqIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW5ub3QgYmUgcmVtb3ZlZCkuXG4gICAqXG4gICAqICAgICB2YXIgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc1NlYWxlZChzZWFsZWRPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzU2VhbGVkKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzU2VhbGVkXG4gICAqIEBhbGlhcyBzZWFsZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1NlYWxlZCA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc1NlYWxlZCwgdHJ1ZSkudG8uYmUuc2VhbGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90U2VhbGVkKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIF9ub3RfIHNlYWxlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdFNlYWxlZCh7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90U2VhbGVkXG4gICAqIEBhbGlhcyBub3RTZWFsZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFNlYWxlZCA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdFNlYWxlZCwgdHJ1ZSkudG8ubm90LmJlLnNlYWxlZDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Zyb3plbihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBmcm96ZW4gKGNhbm5vdCBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0XG4gICAqIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW5ub3QgYmUgbW9kaWZpZWQpLlxuICAgKlxuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKiAgICAgYXNzZXJ0LmZyb3plbihmcm96ZW5PYmplY3QpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Zyb3plblxuICAgKiBAYWxpYXMgZnJvemVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNGcm96ZW4sIHRydWUpLnRvLmJlLmZyb3plbjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEZyb3plbihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBfbm90XyBmcm96ZW4uXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RGcm96ZW4oe30pO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZyb3plblxuICAgKiBAYWxpYXMgbm90RnJvemVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RGcm96ZW4gPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNOb3RGcm96ZW4sIHRydWUpLnRvLm5vdC5iZS5mcm96ZW47XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNFbXB0eSh0YXJnZXQpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gYW55IHZhbHVlcy5cbiAgICogRm9yIGFycmF5cyBhbmQgc3RyaW5ncywgaXQgY2hlY2tzIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eS5cbiAgICogRm9yIGBNYXBgIGFuZCBgU2V0YCBpbnN0YW5jZXMsIGl0IGNoZWNrcyB0aGUgYHNpemVgIHByb3BlcnR5LlxuICAgKiBGb3Igbm9uLWZ1bmN0aW9uIG9iamVjdHMsIGl0IGdldHMgdGhlIGNvdW50IG9mIG93blxuICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkoW10pO1xuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkoJycpO1xuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkobmV3IE1hcCk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eSh7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzRW1wdHlcbiAgICogQGFsaWFzIGVtcHR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fFN0cmluZ3xNYXB8U2V0fSB0YXJnZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRW1wdHksIHRydWUpLnRvLmJlLmVtcHR5O1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RW1wdHkodGFyZ2V0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBjb250YWlucyB2YWx1ZXMuXG4gICAqIEZvciBhcnJheXMgYW5kIHN0cmluZ3MsIGl0IGNoZWNrcyB0aGUgYGxlbmd0aGAgcHJvcGVydHkuXG4gICAqIEZvciBgTWFwYCBhbmQgYFNldGAgaW5zdGFuY2VzLCBpdCBjaGVja3MgdGhlIGBzaXplYCBwcm9wZXJ0eS5cbiAgICogRm9yIG5vbi1mdW5jdGlvbiBvYmplY3RzLCBpdCBnZXRzIHRoZSBjb3VudCBvZiBvd25cbiAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KFsxLCAyXSk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFbXB0eSgnMzQnKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KG5ldyBTZXQoWzUsIDZdKSk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFbXB0eSh7IGtleTogNyB9KTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RFbXB0eVxuICAgKiBAYWxpYXMgbm90RW1wdHlcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfE1hcHxTZXR9IHRhcmdldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEVtcHR5ID0gZnVuY3Rpb24odmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RFbXB0eSwgdHJ1ZSkudG8ubm90LmJlLmVtcHR5O1xuICB9O1xuXG4gIC8qIVxuICAgKiBBbGlhc2VzLlxuICAgKi9cblxuICAoZnVuY3Rpb24gYWxpYXMobmFtZSwgYXMpe1xuICAgIGFzc2VydFthc10gPSBhc3NlcnRbbmFtZV07XG4gICAgcmV0dXJuIGFsaWFzO1xuICB9KVxuICAoJ2lzT2snLCAnb2snKVxuICAoJ2lzTm90T2snLCAnbm90T2snKVxuICAoJ3Rocm93cycsICd0aHJvdycpXG4gICgndGhyb3dzJywgJ1Rocm93JylcbiAgKCdpc0V4dGVuc2libGUnLCAnZXh0ZW5zaWJsZScpXG4gICgnaXNOb3RFeHRlbnNpYmxlJywgJ25vdEV4dGVuc2libGUnKVxuICAoJ2lzU2VhbGVkJywgJ3NlYWxlZCcpXG4gICgnaXNOb3RTZWFsZWQnLCAnbm90U2VhbGVkJylcbiAgKCdpc0Zyb3plbicsICdmcm96ZW4nKVxuICAoJ2lzTm90RnJvemVuJywgJ25vdEZyb3plbicpXG4gICgnaXNFbXB0eScsICdlbXB0eScpXG4gICgnaXNOb3RFbXB0eScsICdub3RFbXB0eScpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIHBhdGh2YWwgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2xvZ2ljYWxwYXJhZG94L2ZpbHRyXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaGFzUHJvcGVydHkob2JqZWN0LCBuYW1lKVxuICpcbiAqIFRoaXMgYWxsb3dzIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBvd25cbiAqIG9yIGluaGVyaXRlZCBmcm9tIHByb3RvdHlwZSBjaGFpbiBuYW1lZCBwcm9wZXJ0eS5cbiAqXG4gKiBCYXNpY2FsbHkgZG9lcyB0aGUgc2FtZSB0aGluZyBhcyB0aGUgYGluYFxuICogb3BlcmF0b3IgYnV0IHdvcmtzIHByb3Blcmx5IHdpdGggbnVsbC91bmRlZmluZWQgdmFsdWVzXG4gKiBhbmQgb3RoZXIgcHJpbWl0aXZlcy5cbiAqXG4gKiAgICAgdmFyIG9iaiA9IHtcbiAqICAgICAgICAgYXJyOiBbJ2EnLCAnYicsICdjJ11cbiAqICAgICAgICwgc3RyOiAnSGVsbG8nXG4gKiAgICAgfVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgd291bGQgYmUgdGhlIHJlc3VsdHMuXG4gKlxuICogICAgIGhhc1Byb3BlcnR5KG9iaiwgJ3N0cicpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iaiwgJ2NvbnN0cnVjdG9yJyk7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnYmFyJyk7ICAvLyBmYWxzZVxuICpcbiAqICAgICBoYXNQcm9wZXJ0eShvYmouc3RyLCAnbGVuZ3RoJyk7IC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmouc3RyLCAxKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmouc3RyLCA1KTsgIC8vIGZhbHNlXG4gKlxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsICdsZW5ndGgnKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmouYXJyLCAyKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmouYXJyLCAzKTsgIC8vIGZhbHNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd8U3ltYm9sfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gd2hldGhlciBpdCBleGlzdHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGhhc1Byb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc1Byb3BlcnR5KG9iaiwgbmFtZSkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGhlIGBpbmAgb3BlcmF0b3IgZG9lcyBub3Qgd29yayB3aXRoIHByaW1pdGl2ZXMuXG4gIHJldHVybiBuYW1lIGluIE9iamVjdChvYmopO1xufVxuXG4vKiAhXG4gKiAjIyBwYXJzZVBhdGgocGF0aClcbiAqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdXNlZCB0byBwYXJzZSBzdHJpbmcgb2JqZWN0XG4gKiBwYXRocy4gVXNlIGluIGNvbmp1bmN0aW9uIHdpdGggYGludGVybmFsR2V0UGF0aFZhbHVlYC5cbiAqXG4gKiAgICAgIHZhciBwYXJzZWQgPSBwYXJzZVBhdGgoJ215b2JqZWN0LnByb3BlcnR5LnN1YnByb3AnKTtcbiAqXG4gKiAjIyMgUGF0aHM6XG4gKlxuICogKiBDYW4gYmUgaW5maW5pdGVseSBkZWVwIGFuZCBuZXN0ZWQuXG4gKiAqIEFycmF5cyBhcmUgYWxzbyB2YWxpZCB1c2luZyB0aGUgZm9ybWFsIGBteW9iamVjdC5kb2N1bWVudFszXS5wcm9wZXJ0eWAuXG4gKiAqIExpdGVyYWwgZG90cyBhbmQgYnJhY2tldHMgKG5vdCBkZWxpbWl0ZXIpIG11c3QgYmUgYmFja3NsYXNoLWVzY2FwZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBhcnNlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHN0ciA9IHBhdGgucmVwbGFjZSgvKFteXFxcXF0pXFxbL2csICckMS5bJyk7XG4gIHZhciBwYXJ0cyA9IHN0ci5tYXRjaCgvKFxcXFxcXC58W14uXSs/KSsvZyk7XG4gIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24gbWFwTWF0Y2hlcyh2YWx1ZSkge1xuICAgIHZhciByZWdleHAgPSAvXlxcWyhcXGQrKVxcXSQvO1xuICAgIHZhciBtQXJyID0gcmVnZXhwLmV4ZWModmFsdWUpO1xuICAgIHZhciBwYXJzZWQgPSBudWxsO1xuICAgIGlmIChtQXJyKSB7XG4gICAgICBwYXJzZWQgPSB7IGk6IHBhcnNlRmxvYXQobUFyclsxXSkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkID0geyBwOiB2YWx1ZS5yZXBsYWNlKC9cXFxcKFsuXFxbXFxdXSkvZywgJyQxJykgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9KTtcbn1cblxuLyogIVxuICogIyMgaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWRbLCBwYXRoRGVwdGhdKVxuICpcbiAqIEhlbHBlciBjb21wYW5pb24gZnVuY3Rpb24gZm9yIGAucGFyc2VQYXRoYCB0aGF0IHJldHVybnNcbiAqIHRoZSB2YWx1ZSBsb2NhdGVkIGF0IHRoZSBwYXJzZWQgYWRkcmVzcy5cbiAqXG4gKiAgICAgIHZhciB2YWx1ZSA9IGdldFBhdGhWYWx1ZShvYmosIHBhcnNlZCk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0byBzZWFyY2ggYWdhaW5zdFxuICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZCBkZWZpbml0aW9uIGZyb20gYHBhcnNlUGF0aGAuXG4gKiBAcGFyYW0ge051bWJlcn0gZGVwdGggKG5lc3RpbmcgbGV2ZWwpIG9mIHRoZSBwcm9wZXJ0eSB3ZSB3YW50IHRvIHJldHJpZXZlXG4gKiBAcmV0dXJucyB7T2JqZWN0fFVuZGVmaW5lZH0gdmFsdWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGludGVybmFsR2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkLCBwYXRoRGVwdGgpIHtcbiAgdmFyIHRlbXBvcmFyeVZhbHVlID0gb2JqO1xuICB2YXIgcmVzID0gbnVsbDtcbiAgcGF0aERlcHRoID0gKHR5cGVvZiBwYXRoRGVwdGggPT09ICd1bmRlZmluZWQnID8gcGFyc2VkLmxlbmd0aCA6IHBhdGhEZXB0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoRGVwdGg7IGkrKykge1xuICAgIHZhciBwYXJ0ID0gcGFyc2VkW2ldO1xuICAgIGlmICh0ZW1wb3JhcnlWYWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRlbXBvcmFyeVZhbHVlID0gdGVtcG9yYXJ5VmFsdWVbcGFydC5pXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXBvcmFyeVZhbHVlID0gdGVtcG9yYXJ5VmFsdWVbcGFydC5wXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPT09IChwYXRoRGVwdGggLSAxKSkge1xuICAgICAgICByZXMgPSB0ZW1wb3JhcnlWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG4vKiAhXG4gKiAjIyBpbnRlcm5hbFNldFBhdGhWYWx1ZShvYmosIHZhbHVlLCBwYXJzZWQpXG4gKlxuICogQ29tcGFuaW9uIGZ1bmN0aW9uIGZvciBgcGFyc2VQYXRoYCB0aGF0IHNldHNcbiAqIHRoZSB2YWx1ZSBsb2NhdGVkIGF0IGEgcGFyc2VkIGFkZHJlc3MuXG4gKlxuICogIGludGVybmFsU2V0UGF0aFZhbHVlKG9iaiwgJ3ZhbHVlJywgcGFyc2VkKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRvIHNlYXJjaCBhbmQgZGVmaW5lIG9uXG4gKiBAcGFyYW0geyp9IHZhbHVlIHRvIHVzZSB1cG9uIHNldFxuICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZCBkZWZpbml0aW9uIGZyb20gYHBhcnNlUGF0aGBcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGludGVybmFsU2V0UGF0aFZhbHVlKG9iaiwgdmFsLCBwYXJzZWQpIHtcbiAgdmFyIHRlbXBPYmogPSBvYmo7XG4gIHZhciBwYXRoRGVwdGggPSBwYXJzZWQubGVuZ3RoO1xuICB2YXIgcGFydCA9IG51bGw7XG4gIC8vIEhlcmUgd2UgaXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IHBhcnQgb2YgdGhlIHBhdGhcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoRGVwdGg7IGkrKykge1xuICAgIHZhciBwcm9wTmFtZSA9IG51bGw7XG4gICAgdmFyIHByb3BWYWwgPSBudWxsO1xuICAgIHBhcnQgPSBwYXJzZWRbaV07XG5cbiAgICAvLyBJZiBpdCdzIHRoZSBsYXN0IHBhcnQgb2YgdGhlIHBhdGgsIHdlIHNldCB0aGUgJ3Byb3BOYW1lJyB2YWx1ZSB3aXRoIHRoZSBwcm9wZXJ0eSBuYW1lXG4gICAgaWYgKGkgPT09IChwYXRoRGVwdGggLSAxKSkge1xuICAgICAgcHJvcE5hbWUgPSB0eXBlb2YgcGFydC5wID09PSAndW5kZWZpbmVkJyA/IHBhcnQuaSA6IHBhcnQucDtcbiAgICAgIC8vIE5vdyB3ZSBzZXQgdGhlIHByb3BlcnR5IHdpdGggdGhlIG5hbWUgaGVsZCBieSAncHJvcE5hbWUnIG9uIG9iamVjdCB3aXRoIHRoZSBkZXNpcmVkIHZhbFxuICAgICAgdGVtcE9ialtwcm9wTmFtZV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFydC5wICE9PSAndW5kZWZpbmVkJyAmJiB0ZW1wT2JqW3BhcnQucF0pIHtcbiAgICAgIHRlbXBPYmogPSB0ZW1wT2JqW3BhcnQucF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFydC5pICE9PSAndW5kZWZpbmVkJyAmJiB0ZW1wT2JqW3BhcnQuaV0pIHtcbiAgICAgIHRlbXBPYmogPSB0ZW1wT2JqW3BhcnQuaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBvYmogZG9lc24ndCBoYXZlIHRoZSBwcm9wZXJ0eSB3ZSBjcmVhdGUgb25lIHdpdGggdGhhdCBuYW1lIHRvIGRlZmluZSBpdFxuICAgICAgdmFyIG5leHQgPSBwYXJzZWRbaSArIDFdO1xuICAgICAgLy8gSGVyZSB3ZSBzZXQgdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdoaWNoIHdpbGwgYmUgZGVmaW5lZFxuICAgICAgcHJvcE5hbWUgPSB0eXBlb2YgcGFydC5wID09PSAndW5kZWZpbmVkJyA/IHBhcnQuaSA6IHBhcnQucDtcbiAgICAgIC8vIEhlcmUgd2UgZGVjaWRlIGlmIHRoaXMgcHJvcGVydHkgd2lsbCBiZSBhbiBhcnJheSBvciBhIG5ldyBvYmplY3RcbiAgICAgIHByb3BWYWwgPSB0eXBlb2YgbmV4dC5wID09PSAndW5kZWZpbmVkJyA/IFtdIDoge307XG4gICAgICB0ZW1wT2JqW3Byb3BOYW1lXSA9IHByb3BWYWw7XG4gICAgICB0ZW1wT2JqID0gdGVtcE9ialtwcm9wTmFtZV07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogIyMjIC5nZXRQYXRoSW5mbyhvYmplY3QsIHBhdGgpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBwcm9wZXJ0eSBpbmZvIGluIGFuXG4gKiBvYmplY3QgZ2l2ZW4gYSBzdHJpbmcgcGF0aC5cbiAqXG4gKiBUaGUgcGF0aCBpbmZvIGNvbnNpc3RzIG9mIGFuIG9iamVjdCB3aXRoIHRoZVxuICogZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogKiBwYXJlbnQgLSBUaGUgcGFyZW50IG9iamVjdCBvZiB0aGUgcHJvcGVydHkgcmVmZXJlbmNlZCBieSBgcGF0aGBcbiAqICogbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmaW5hbCBwcm9wZXJ0eSwgYSBudW1iZXIgaWYgaXQgd2FzIGFuIGFycmF5IGluZGV4ZXJcbiAqICogdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSBgdW5kZWZpbmVkYFxuICogKiBleGlzdHMgLSBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBleGlzdHMgb3Igbm90XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtPYmplY3R9IGluZm9cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldFBhdGhJbmZvXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldFBhdGhJbmZvKG9iaiwgcGF0aCkge1xuICB2YXIgcGFyc2VkID0gcGFyc2VQYXRoKHBhdGgpO1xuICB2YXIgbGFzdCA9IHBhcnNlZFtwYXJzZWQubGVuZ3RoIC0gMV07XG4gIHZhciBpbmZvID0ge1xuICAgIHBhcmVudDogcGFyc2VkLmxlbmd0aCA+IDEgPyBpbnRlcm5hbEdldFBhdGhWYWx1ZShvYmosIHBhcnNlZCwgcGFyc2VkLmxlbmd0aCAtIDEpIDogb2JqLFxuICAgIG5hbWU6IGxhc3QucCB8fCBsYXN0LmksXG4gICAgdmFsdWU6IGludGVybmFsR2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkKSxcbiAgfTtcbiAgaW5mby5leGlzdHMgPSBoYXNQcm9wZXJ0eShpbmZvLnBhcmVudCwgaW5mby5uYW1lKTtcblxuICByZXR1cm4gaW5mbztcbn1cblxuLyoqXG4gKiAjIyMgLmdldFBhdGhWYWx1ZShvYmplY3QsIHBhdGgpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiB2YWx1ZXMgaW4gYW5cbiAqIG9iamVjdCBnaXZlbiBhIHN0cmluZyBwYXRoLlxuICpcbiAqICAgICB2YXIgb2JqID0ge1xuICogICAgICAgICBwcm9wMToge1xuICogICAgICAgICAgICAgYXJyOiBbJ2EnLCAnYicsICdjJ11cbiAqICAgICAgICAgICAsIHN0cjogJ0hlbGxvJ1xuICogICAgICAgICB9XG4gKiAgICAgICAsIHByb3AyOiB7XG4gKiAgICAgICAgICAgICBhcnI6IFsgeyBuZXN0ZWQ6ICdVbml2ZXJzZScgfSBdXG4gKiAgICAgICAgICAgLCBzdHI6ICdIZWxsbyBhZ2FpbiEnXG4gKiAgICAgICAgIH1cbiAqICAgICB9XG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSB0aGUgcmVzdWx0cy5cbiAqXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AxLnN0cicpOyAvLyBIZWxsb1xuICogICAgIGdldFBhdGhWYWx1ZShvYmosICdwcm9wMS5hdHRbMl0nKTsgLy8gYlxuICogICAgIGdldFBhdGhWYWx1ZShvYmosICdwcm9wMi5hcnJbMF0ubmVzdGVkJyk7IC8vIFVuaXZlcnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbHVlIG9yIGB1bmRlZmluZWRgXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRQYXRoVmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZ2V0UGF0aFZhbHVlKG9iaiwgcGF0aCkge1xuICB2YXIgaW5mbyA9IGdldFBhdGhJbmZvKG9iaiwgcGF0aCk7XG4gIHJldHVybiBpbmZvLnZhbHVlO1xufVxuXG4vKipcbiAqICMjIyAuc2V0UGF0aFZhbHVlKG9iamVjdCwgcGF0aCwgdmFsdWUpXG4gKlxuICogRGVmaW5lIHRoZSB2YWx1ZSBpbiBhbiBvYmplY3QgYXQgYSBnaXZlbiBzdHJpbmcgcGF0aC5cbiAqXG4gKiBgYGBqc1xuICogdmFyIG9iaiA9IHtcbiAqICAgICBwcm9wMToge1xuICogICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgLCBzdHI6ICdIZWxsbydcbiAqICAgICB9XG4gKiAgICwgcHJvcDI6IHtcbiAqICAgICAgICAgYXJyOiBbIHsgbmVzdGVkOiAnVW5pdmVyc2UnIH0gXVxuICogICAgICAgLCBzdHI6ICdIZWxsbyBhZ2FpbiEnXG4gKiAgICAgfVxuICogfTtcbiAqIGBgYFxuICpcbiAqIFRoZSBmb2xsb3dpbmcgd291bGQgYmUgYWNjZXB0YWJsZS5cbiAqXG4gKiBgYGBqc1xuICogdmFyIHByb3BlcnRpZXMgPSByZXF1aXJlKCd0ZWEtcHJvcGVydGllcycpO1xuICogcHJvcGVydGllcy5zZXQob2JqLCAncHJvcDEuc3RyJywgJ0hlbGxvIFVuaXZlcnNlIScpO1xuICogcHJvcGVydGllcy5zZXQob2JqLCAncHJvcDEuYXJyWzJdJywgJ0InKTtcbiAqIHByb3BlcnRpZXMuc2V0KG9iaiwgJ3Byb3AyLmFyclswXS5uZXN0ZWQudmFsdWUnLCB7IGhlbGxvOiAndW5pdmVyc2UnIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXRQYXRoVmFsdWUob2JqLCBwYXRoLCB2YWwpIHtcbiAgdmFyIHBhcnNlZCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCB2YWwsIHBhcnNlZCk7XG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBoYXNQcm9wZXJ0eTogaGFzUHJvcGVydHksXG4gIGdldFBhdGhJbmZvOiBnZXRQYXRoSW5mbyxcbiAgZ2V0UGF0aFZhbHVlOiBnZXRQYXRoVmFsdWUsXG4gIHNldFBhdGhWYWx1ZTogc2V0UGF0aFZhbHVlLFxufTtcbiIsIi8qIVxuICogQ2hhaSAtIHRlc3QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG5cbi8qKlxuICogIyMjIC50ZXN0KG9iamVjdCwgZXhwcmVzc2lvbilcbiAqXG4gKiBUZXN0IGFuZCBvYmplY3QgZm9yIGV4cHJlc3Npb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAoY29uc3RydWN0ZWQgQXNzZXJ0aW9uKVxuICogQHBhcmFtIHtBcmd1bWVudHN9IGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZS5hc3NlcnQgYXJndW1lbnRzXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSB0ZXN0XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0ZXN0KG9iaiwgYXJncykge1xuICB2YXIgbmVnYXRlID0gZmxhZyhvYmosICduZWdhdGUnKVxuICAgICwgZXhwciA9IGFyZ3NbMF07XG4gIHJldHVybiBuZWdhdGUgPyAhZXhwciA6IGV4cHI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiB0eXBlLWRldGVjdFxuICogQ29weXJpZ2h0KGMpIDIwMTMgamFrZSBsdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xudmFyIHByb21pc2VFeGlzdHMgPSB0eXBlb2YgUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJztcbnZhciBnbG9iYWxPYmplY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogc2VsZjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxudmFyIGlzRG9tID0gJ2xvY2F0aW9uJyBpbiBnbG9iYWxPYmplY3QgJiYgJ2RvY3VtZW50JyBpbiBnbG9iYWxPYmplY3Q7XG52YXIgc3ltYm9sRXhpc3RzID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgbWFwRXhpc3RzID0gdHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgc2V0RXhpc3RzID0gdHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgd2Vha01hcEV4aXN0cyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJztcbnZhciB3ZWFrU2V0RXhpc3RzID0gdHlwZW9mIFdlYWtTZXQgIT09ICd1bmRlZmluZWQnO1xudmFyIGRhdGFWaWV3RXhpc3RzID0gdHlwZW9mIERhdGFWaWV3ICE9PSAndW5kZWZpbmVkJztcbnZhciBzeW1ib2xJdGVyYXRvckV4aXN0cyA9IHN5bWJvbEV4aXN0cyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSAndW5kZWZpbmVkJztcbnZhciBzeW1ib2xUb1N0cmluZ1RhZ0V4aXN0cyA9IHN5bWJvbEV4aXN0cyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnICE9PSAndW5kZWZpbmVkJztcbnZhciBzZXRFbnRyaWVzRXhpc3RzID0gc2V0RXhpc3RzICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmVudHJpZXMgPT09ICdmdW5jdGlvbic7XG52YXIgbWFwRW50cmllc0V4aXN0cyA9IG1hcEV4aXN0cyAmJiB0eXBlb2YgTWFwLnByb3RvdHlwZS5lbnRyaWVzID09PSAnZnVuY3Rpb24nO1xudmFyIHNldEl0ZXJhdG9yUHJvdG90eXBlID0gc2V0RW50cmllc0V4aXN0cyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IFNldCgpLmVudHJpZXMoKSk7XG52YXIgbWFwSXRlcmF0b3JQcm90b3R5cGUgPSBtYXBFbnRyaWVzRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgTWFwKCkuZW50cmllcygpKTtcbnZhciBhcnJheUl0ZXJhdG9yRXhpc3RzID0gc3ltYm9sSXRlcmF0b3JFeGlzdHMgJiYgdHlwZW9mIEFycmF5LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xudmFyIGFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBhcnJheUl0ZXJhdG9yRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihbXVtTeW1ib2wuaXRlcmF0b3JdKCkpO1xudmFyIHN0cmluZ0l0ZXJhdG9yRXhpc3RzID0gc3ltYm9sSXRlcmF0b3JFeGlzdHMgJiYgdHlwZW9mIFN0cmluZy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbnZhciBzdHJpbmdJdGVyYXRvclByb3RvdHlwZSA9IHN0cmluZ0l0ZXJhdG9yRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZignJ1tTeW1ib2wuaXRlcmF0b3JdKCkpO1xudmFyIHRvU3RyaW5nTGVmdFNsaWNlTGVuZ3RoID0gODtcbnZhciB0b1N0cmluZ1JpZ2h0U2xpY2VMZW5ndGggPSAtMTtcbi8qKlxuICogIyMjIHR5cGVPZiAob2JqKVxuICpcbiAqIFVzZXMgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBhbiBvYmplY3QsXG4gKiBub3JtYWxpc2luZyBiZWhhdmlvdXIgYWNyb3NzIGVuZ2luZSB2ZXJzaW9ucyAmIHdlbGwgb3B0aW1pc2VkLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICogQHJldHVybiB7U3RyaW5nfSBvYmplY3QgdHlwZVxuICogQGFwaSBwdWJsaWNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0eXBlRGV0ZWN0KG9iaikge1xuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgKiBQcmU6XG4gICAqICAgc3RyaW5nIGxpdGVyYWwgICAgIHggMywwMzksMDM1IG9wcy9zZWMgwrExLjYyJSAoNzggcnVucyBzYW1wbGVkKVxuICAgKiAgIGJvb2xlYW4gbGl0ZXJhbCAgICB4IDEsNDI0LDEzOCBvcHMvc2VjIMKxNC41NCUgKDc1IHJ1bnMgc2FtcGxlZClcbiAgICogICBudW1iZXIgbGl0ZXJhbCAgICAgeCAxLDY1MywxNTMgb3BzL3NlYyDCsTEuOTElICg4MiBydW5zIHNhbXBsZWQpXG4gICAqICAgdW5kZWZpbmVkICAgICAgICAgIHggOSw5NzgsNjYwIG9wcy9zZWMgwrExLjkyJSAoNzUgcnVucyBzYW1wbGVkKVxuICAgKiAgIGZ1bmN0aW9uICAgICAgICAgICB4IDIsNTU2LDc2OSBvcHMvc2VjIMKxMS43MyUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgICogUG9zdDpcbiAgICogICBzdHJpbmcgbGl0ZXJhbCAgICAgeCAzOCw1NjQsNzk2IG9wcy9zZWMgwrExLjE1JSAoNzkgcnVucyBzYW1wbGVkKVxuICAgKiAgIGJvb2xlYW4gbGl0ZXJhbCAgICB4IDMxLDE0OCw5NDAgb3BzL3NlYyDCsTEuMTAlICg3OSBydW5zIHNhbXBsZWQpXG4gICAqICAgbnVtYmVyIGxpdGVyYWwgICAgIHggMzIsNjc5LDMzMCBvcHMvc2VjIMKxMS45MCUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgICogICB1bmRlZmluZWQgICAgICAgICAgeCAzMiwzNjMsMzY4IG9wcy9zZWMgwrExLjA3JSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiAgIGZ1bmN0aW9uICAgICAgICAgICB4IDMxLDI5Niw4NzAgb3BzL3NlYyDCsTAuOTYlICg4MyBydW5zIHNhbXBsZWQpXG4gICAqL1xuICB2YXIgdHlwZW9mT2JqID0gdHlwZW9mIG9iajtcbiAgaWYgKHR5cGVvZk9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gdHlwZW9mT2JqO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICogUHJlOlxuICAgKiAgIG51bGwgICAgICAgICAgICAgICB4IDI4LDY0NSw3NjUgb3BzL3NlYyDCsTEuMTclICg4MiBydW5zIHNhbXBsZWQpXG4gICAqIFBvc3Q6XG4gICAqICAgbnVsbCAgICAgICAgICAgICAgIHggMzYsNDI4LDk2MiBvcHMvc2VjIMKxMS4zNyUgKDg0IHJ1bnMgc2FtcGxlZClcbiAgICovXG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93KWBgXG4gICAqICAtIE5vZGUgPT09IFwiW29iamVjdCBnbG9iYWxdXCJcbiAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgZ2xvYmFsXVwiXG4gICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gUGhhbnRvbUpTID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBJRSAxMSA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBJRSBFZGdlID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcylgYFxuICAgKiAgLSBDaHJvbWUgV29ya2VyID09PSBcIltvYmplY3QgZ2xvYmFsXVwiXG4gICAqICAtIEZpcmVmb3ggV29ya2VyID09PSBcIltvYmplY3QgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICogIC0gU2FmYXJpIFdvcmtlciA9PT0gXCJbb2JqZWN0IERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqICAtIElFIDExIFdvcmtlciA9PT0gXCJbb2JqZWN0IFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqICAtIElFIEVkZ2UgV29ya2VyID09PSBcIltvYmplY3QgV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICovXG4gIGlmIChvYmogPT09IGdsb2JhbE9iamVjdCkge1xuICAgIHJldHVybiAnZ2xvYmFsJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAqIFByZTpcbiAgICogICBhcnJheSBsaXRlcmFsICAgICAgeCAyLDg4OCwzNTIgb3BzL3NlYyDCsTAuNjclICg4MiBydW5zIHNhbXBsZWQpXG4gICAqIFBvc3Q6XG4gICAqICAgYXJyYXkgbGl0ZXJhbCAgICAgIHggMjIsNDc5LDY1MCBvcHMvc2VjIMKxMC45NiUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgICovXG4gIGlmIChcbiAgICBBcnJheS5pc0FycmF5KG9iaikgJiZcbiAgICAoc3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMgPT09IGZhbHNlIHx8ICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIG9iaikpXG4gICkge1xuICAgIHJldHVybiAnQXJyYXknO1xuICB9XG5cbiAgaWYgKGlzRG9tKSB7XG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Jyb3dzZXJzLmh0bWwjbG9jYXRpb24pXG4gICAgICogV2hhdFdHIEhUTUwkNy43LjMgLSBUaGUgYExvY2F0aW9uYCBpbnRlcmZhY2VcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5sb2NhdGlvbilgYFxuICAgICAqICAtIElFIDw9MTEgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICAgKiAgLSBJRSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSBnbG9iYWxPYmplY3QubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiAnTG9jYXRpb24nO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNkb2N1bWVudClcbiAgICAgKiBXaGF0V0cgSFRNTCQzLjEuMSAtIFRoZSBgRG9jdW1lbnRgIG9iamVjdFxuICAgICAqIE5vdGU6IE1vc3QgYnJvd3NlcnMgY3VycmVudGx5IGFkaGVyIHRvIHRoZSBXM0MgRE9NIExldmVsIDIgc3BlY1xuICAgICAqICAgICAgIChodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItSFRNTC9odG1sLmh0bWwjSUQtMjY4MDkyNjgpXG4gICAgICogICAgICAgd2hpY2ggc3VnZ2VzdHMgdGhhdCBicm93c2VycyBzaG91bGQgdXNlIEhUTUxUYWJsZUNlbGxFbGVtZW50IGZvclxuICAgICAqICAgICAgIGJvdGggVEQgYW5kIFRIIGVsZW1lbnRzLiBXaGF0V0cgc2VwYXJhdGVzIHRoZXNlLlxuICAgICAqICAgICAgIFdoYXRXRyBIVE1MIHN0YXRlczpcbiAgICAgKiAgICAgICAgID4gRm9yIGhpc3RvcmljYWwgcmVhc29ucywgV2luZG93IG9iamVjdHMgbXVzdCBhbHNvIGhhdmUgYVxuICAgICAqICAgICAgICAgPiB3cml0YWJsZSwgY29uZmlndXJhYmxlLCBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lZFxuICAgICAqICAgICAgICAgPiBIVE1MRG9jdW1lbnQgd2hvc2UgdmFsdWUgaXMgdGhlIERvY3VtZW50IGludGVyZmFjZSBvYmplY3QuXG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb2N1bWVudClgYFxuICAgICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBJRSAxMSA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIElFIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IGdsb2JhbE9iamVjdC5kb2N1bWVudCkge1xuICAgICAgcmV0dXJuICdEb2N1bWVudCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNtaW1ldHlwZWFycmF5KVxuICAgICAqIFdoYXRXRyBIVE1MJDguNi4xLjUgLSBQbHVnaW5zIC0gSW50ZXJmYWNlIE1pbWVUeXBlQXJyYXlcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5hdmlnYXRvci5taW1lVHlwZXMpYGBcbiAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgTVNNaW1lVHlwZXNDb2xsZWN0aW9uXVwiXG4gICAgICovXG4gICAgaWYgKG9iaiA9PT0gKGdsb2JhbE9iamVjdC5uYXZpZ2F0b3IgfHwge30pLm1pbWVUeXBlcykge1xuICAgICAgcmV0dXJuICdNaW1lVHlwZUFycmF5JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI3BsdWdpbmFycmF5KVxuICAgICAqIFdoYXRXRyBIVE1MJDguNi4xLjUgLSBQbHVnaW5zIC0gSW50ZXJmYWNlIFBsdWdpbkFycmF5XG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuYXZpZ2F0b3IucGx1Z2lucylgYFxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBNU1BsdWdpbnNDb2xsZWN0aW9uXVwiXG4gICAgICovXG4gICAgaWYgKG9iaiA9PT0gKGdsb2JhbE9iamVjdC5uYXZpZ2F0b3IgfHwge30pLnBsdWdpbnMpIHtcbiAgICAgIHJldHVybiAnUGx1Z2luQXJyYXknO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjcGx1Z2luYXJyYXkpXG4gICAgICogV2hhdFdHIEhUTUwkNC40LjQgLSBUaGUgYGJsb2NrcXVvdGVgIGVsZW1lbnQgLSBJbnRlcmZhY2UgYEhUTUxRdW90ZUVsZW1lbnRgXG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdibG9ja3F1b3RlJykpYGBcbiAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgSFRNTEJsb2NrRWxlbWVudF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBvYmoudGFnTmFtZSA9PT0gJ0JMT0NLUVVPVEUnKSB7XG4gICAgICByZXR1cm4gJ0hUTUxRdW90ZUVsZW1lbnQnO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNodG1sdGFibGVkYXRhY2VsbGVsZW1lbnQpXG4gICAgICogV2hhdFdHIEhUTUwkNC45LjkgLSBUaGUgYHRkYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MVGFibGVEYXRhQ2VsbEVsZW1lbnRgXG4gICAgICogTm90ZTogTW9zdCBicm93c2VycyBjdXJyZW50bHkgYWRoZXIgdG8gdGhlIFczQyBET00gTGV2ZWwgMiBzcGVjXG4gICAgICogICAgICAgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1IVE1ML2h0bWwuaHRtbCNJRC04MjkxNTA3NSlcbiAgICAgKiAgICAgICB3aGljaCBzdWdnZXN0cyB0aGF0IGJyb3dzZXJzIHNob3VsZCB1c2UgSFRNTFRhYmxlQ2VsbEVsZW1lbnQgZm9yXG4gICAgICogICAgICAgYm90aCBURCBhbmQgVEggZWxlbWVudHMuIFdoYXRXRyBzZXBhcmF0ZXMgdGhlc2UuXG4gICAgICogVGVzdDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJykpXG4gICAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBvYmoudGFnTmFtZSA9PT0gJ1REJykge1xuICAgICAgcmV0dXJuICdIVE1MVGFibGVEYXRhQ2VsbEVsZW1lbnQnO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNodG1sdGFibGVoZWFkZXJjZWxsZWxlbWVudClcbiAgICAgKiBXaGF0V0cgSFRNTCQ0LjkuOSAtIFRoZSBgdGRgIGVsZW1lbnQgLSBJbnRlcmZhY2UgYEhUTUxUYWJsZUhlYWRlckNlbGxFbGVtZW50YFxuICAgICAqIE5vdGU6IE1vc3QgYnJvd3NlcnMgY3VycmVudGx5IGFkaGVyIHRvIHRoZSBXM0MgRE9NIExldmVsIDIgc3BlY1xuICAgICAqICAgICAgIChodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItSFRNTC9odG1sLmh0bWwjSUQtODI5MTUwNzUpXG4gICAgICogICAgICAgd2hpY2ggc3VnZ2VzdHMgdGhhdCBicm93c2VycyBzaG91bGQgdXNlIEhUTUxUYWJsZUNlbGxFbGVtZW50IGZvclxuICAgICAqICAgICAgIGJvdGggVEQgYW5kIFRIIGVsZW1lbnRzLiBXaGF0V0cgc2VwYXJhdGVzIHRoZXNlLlxuICAgICAqIFRlc3Q6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpKVxuICAgICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgb2JqLnRhZ05hbWUgPT09ICdUSCcpIHtcbiAgICAgIHJldHVybiAnSFRNTFRhYmxlSGVhZGVyQ2VsbEVsZW1lbnQnO1xuICAgIH1cbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgRmxvYXQ2NEFycmF5ICAgICAgIHggNjI1LDY0NCBvcHMvc2VjIMKxMS41OCUgKDgwIHJ1bnMgc2FtcGxlZClcbiAgKiAgIEZsb2F0MzJBcnJheSAgICAgICB4IDEsMjc5LDg1MiBvcHMvc2VjIMKxMi45MSUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQzMkFycmF5ICAgICAgICB4IDEsMTc4LDE4NSBvcHMvc2VjIMKxMS45NSUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQxNkFycmF5ICAgICAgICB4IDEsMDA4LDM4MCBvcHMvc2VjIMKxMi4yNSUgKDgwIHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQ4QXJyYXkgICAgICAgICB4IDEsMTI4LDA0MCBvcHMvc2VjIMKxMi4xMSUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgKiAgIEludDMyQXJyYXkgICAgICAgICB4IDEsMTcwLDExOSBvcHMvc2VjIMKxMi44OCUgKDgwIHJ1bnMgc2FtcGxlZClcbiAgKiAgIEludDE2QXJyYXkgICAgICAgICB4IDEsMTc2LDM0OCBvcHMvc2VjIMKxNS43OSUgKDg2IHJ1bnMgc2FtcGxlZClcbiAgKiAgIEludDhBcnJheSAgICAgICAgICB4IDEsMDU4LDcwNyBvcHMvc2VjIMKxNC45NCUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQ4Q2xhbXBlZEFycmF5ICB4IDEsMTEwLDYzMyBvcHMvc2VjIMKxNC4yMCUgKDgwIHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgRmxvYXQ2NEFycmF5ICAgICAgIHggNywxMDUsNjcxIG9wcy9zZWMgwrExMy40NyUgKDY0IHJ1bnMgc2FtcGxlZClcbiAgKiAgIEZsb2F0MzJBcnJheSAgICAgICB4IDUsODg3LDkxMiBvcHMvc2VjIMKxMS40NiUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQzMkFycmF5ICAgICAgICB4IDYsNDkxLDY2MSBvcHMvc2VjIMKxMS43NiUgKDc5IHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQxNkFycmF5ICAgICAgICB4IDYsNTU5LDc5NSBvcHMvc2VjIMKxMS42NyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQ4QXJyYXkgICAgICAgICB4IDYsNDYzLDk2NiBvcHMvc2VjIMKxMS40MyUgKDg1IHJ1bnMgc2FtcGxlZClcbiAgKiAgIEludDMyQXJyYXkgICAgICAgICB4IDUsNjQxLDg0MSBvcHMvc2VjIMKxMy40OSUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgKiAgIEludDE2QXJyYXkgICAgICAgICB4IDYsNTgzLDUxMSBvcHMvc2VjIMKxMS45OCUgKDgwIHJ1bnMgc2FtcGxlZClcbiAgKiAgIEludDhBcnJheSAgICAgICAgICB4IDYsNjA2LDA3OCBvcHMvc2VjIMKxMS43NCUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgKiAgIFVpbnQ4Q2xhbXBlZEFycmF5ICB4IDYsNjAyLDIyNCBvcHMvc2VjIMKxMS43NyUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgdmFyIHN0cmluZ1RhZyA9IChzeW1ib2xUb1N0cmluZ1RhZ0V4aXN0cyAmJiBvYmpbU3ltYm9sLnRvU3RyaW5nVGFnXSk7XG4gIGlmICh0eXBlb2Ygc3RyaW5nVGFnID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHJpbmdUYWc7XG4gIH1cblxuICB2YXIgb2JqUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgcmVnZXggbGl0ZXJhbCAgICAgIHggMSw3NzIsMzg1IG9wcy9zZWMgwrExLjg1JSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgcmVnZXggY29uc3RydWN0b3IgIHggMiwxNDMsNjM0IG9wcy9zZWMgwrEyLjQ2JSAoNzggcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICByZWdleCBsaXRlcmFsICAgICAgeCAzLDkyOCwwMDkgb3BzL3NlYyDCsTAuNjUlICg3OCBydW5zIHNhbXBsZWQpXG4gICogICByZWdleCBjb25zdHJ1Y3RvciAgeCAzLDkzMSwxMDggb3BzL3NlYyDCsTAuNTglICg4NCBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IFJlZ0V4cC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1JlZ0V4cCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIGRhdGUgICAgICAgICAgICAgICB4IDIsMTMwLDA3NCBvcHMvc2VjIMKxNC40MiUgKDY4IHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgZGF0ZSAgICAgICAgICAgICAgIHggMyw5NTMsNzc5IG9wcy9zZWMgwrExLjM1JSAoNzcgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAob2JqUHJvdG90eXBlID09PSBEYXRlLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnRGF0ZSc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtcHJvbWlzZS5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDI1LjQuNS40IC0gUHJvbWlzZS5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiUHJvbWlzZVwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFByb21pc2UucmVzb2x2ZSgpKWBgXG4gICAqICAtIENocm9tZSA8PTQ3ID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqICAtIEVkZ2UgPD0yMCA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKiAgLSBGaXJlZm94IDI5LUxhdGVzdCA9PT0gXCJbb2JqZWN0IFByb21pc2VdXCJcbiAgICogIC0gU2FmYXJpIDcuMS1MYXRlc3QgPT09IFwiW29iamVjdCBQcm9taXNlXVwiXG4gICAqL1xuICBpZiAocHJvbWlzZUV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFByb21pc2UucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdQcm9taXNlJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgc2V0ICAgICAgICAgICAgICAgIHggMiwyMjIsMTg2IG9wcy9zZWMgwrExLjMxJSAoODIgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBzZXQgICAgICAgICAgICAgICAgeCA0LDU0NSw4Nzkgb3BzL3NlYyDCsTEuMTMlICg4MyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChzZXRFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBTZXQucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdTZXQnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBtYXAgICAgICAgICAgICAgICAgeCAyLDM5Niw4NDIgb3BzL3NlYyDCsTEuNTklICg4MSBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIG1hcCAgICAgICAgICAgICAgICB4IDQsMTgzLDk0NSBvcHMvc2VjIMKxNi41OSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKG1hcEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IE1hcC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ01hcCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIHdlYWtzZXQgICAgICAgICAgICB4IDEsMzIzLDIyMCBvcHMvc2VjIMKxMi4xNyUgKDc2IHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgd2Vha3NldCAgICAgICAgICAgIHggNCwyMzcsNTEwIG9wcy9zZWMgwrEyLjAxJSAoNzcgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAod2Vha1NldEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFdlYWtTZXQucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdXZWFrU2V0JztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgd2Vha21hcCAgICAgICAgICAgIHggMSw1MDAsMjYwIG9wcy9zZWMgwrEyLjAyJSAoNzggcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICB3ZWFrbWFwICAgICAgICAgICAgeCAzLDg4MSwzODQgb3BzL3NlYyDCsTEuNDUlICg4MiBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmICh3ZWFrTWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gV2Vha01hcC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1dlYWtNYXAnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLWRhdGF2aWV3LnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjQuMi40LjIxIC0gRGF0YVZpZXcucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIkRhdGFWaWV3XCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoZGF0YVZpZXdFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBEYXRhVmlldy5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ0RhdGFWaWV3JztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lbWFwaXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyMy4xLjUuMi4yIC0gJU1hcEl0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJNYXAgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgTWFwKCkuZW50cmllcygpKWBgXG4gICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKi9cbiAgaWYgKG1hcEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IG1hcEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdNYXAgSXRlcmF0b3InO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVzZXRpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIzLjIuNS4yLjIgLSAlU2V0SXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIlNldCBJdGVyYXRvclwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBTZXQoKS5lbnRyaWVzKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoc2V0RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gc2V0SXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1NldCBJdGVyYXRvcic7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyMi4xLjUuMi4yIC0gJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIkFycmF5IEl0ZXJhdG9yXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoW11bU3ltYm9sLml0ZXJhdG9yXSgpKWBgXG4gICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKi9cbiAgaWYgKGFycmF5SXRlcmF0b3JFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBhcnJheUl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdBcnJheSBJdGVyYXRvcic7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjEuMS41LjIuMiAtICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiU3RyaW5nIEl0ZXJhdG9yXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoJydbU3ltYm9sLml0ZXJhdG9yXSgpKWBgXG4gICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKi9cbiAgaWYgKHN0cmluZ0l0ZXJhdG9yRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gc3RyaW5nSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1N0cmluZyBJdGVyYXRvcic7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIG9iamVjdCBmcm9tIG51bGwgICB4IDIsNDI0LDMyMCBvcHMvc2VjIMKxMS42NyUgKDc2IHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgb2JqZWN0IGZyb20gbnVsbCAgIHggNSw4MzgsMDAwIG9wcy9zZWMgwrEwLjk5JSAoODQgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAob2JqUHJvdG90eXBlID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdFxuICAgIC5wcm90b3R5cGVcbiAgICAudG9TdHJpbmdcbiAgICAuY2FsbChvYmopXG4gICAgLnNsaWNlKHRvU3RyaW5nTGVmdFNsaWNlTGVuZ3RoLCB0b1N0cmluZ1JpZ2h0U2xpY2VMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMudHlwZURldGVjdCA9IG1vZHVsZS5leHBvcnRzO1xuIiwiLyohXG4gKiBDaGFpIC0gZXhwZWN0VHlwZXMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5leHBlY3RUeXBlcyhvYmosIHR5cGVzKVxuICpcbiAqIEVuc3VyZXMgdGhhdCB0aGUgb2JqZWN0IGJlaW5nIHRlc3RlZCBhZ2FpbnN0IGlzIG9mIGEgdmFsaWQgdHlwZS5cbiAqXG4gKiAgICAgdXRpbHMuZXhwZWN0VHlwZXModGhpcywgWydhcnJheScsICdvYmplY3QnLCAnc3RyaW5nJ10pO1xuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IG9iaiBjb25zdHJ1Y3RlZCBBc3NlcnRpb25cbiAqIEBwYXJhbSB7QXJyYXl9IHR5cGUgQSBsaXN0IG9mIGFsbG93ZWQgdHlwZXMgZm9yIHRoaXMgYXNzZXJ0aW9uXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBleHBlY3RUeXBlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG52YXIgQXNzZXJ0aW9uRXJyb3IgPSByZXF1aXJlKCdhc3NlcnRpb24tZXJyb3InKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgdHlwZSA9IHJlcXVpcmUoJ3R5cGUtZGV0ZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXhwZWN0VHlwZXMob2JqLCB0eXBlcykge1xuICB2YXIgZmxhZ01zZyA9IGZsYWcob2JqLCAnbWVzc2FnZScpO1xuICB2YXIgc3NmaSA9IGZsYWcob2JqLCAnc3NmaScpO1xuXG4gIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcblxuICBvYmogPSBmbGFnKG9iaiwgJ29iamVjdCcpO1xuICB0eXBlcyA9IHR5cGVzLm1hcChmdW5jdGlvbiAodCkgeyByZXR1cm4gdC50b0xvd2VyQ2FzZSgpOyB9KTtcbiAgdHlwZXMuc29ydCgpO1xuXG4gIC8vIFRyYW5zZm9ybXMgWydsb3JlbScsICdpcHN1bSddIGludG8gJ2EgbG9yZW0sIG9yIGFuIGlwc3VtJ1xuICB2YXIgc3RyID0gdHlwZXMubWFwKGZ1bmN0aW9uICh0LCBpbmRleCkge1xuICAgIHZhciBhcnQgPSB+WyAnYScsICdlJywgJ2knLCAnbycsICd1JyBdLmluZGV4T2YodC5jaGFyQXQoMCkpID8gJ2FuJyA6ICdhJztcbiAgICB2YXIgb3IgPSB0eXBlcy5sZW5ndGggPiAxICYmIGluZGV4ID09PSB0eXBlcy5sZW5ndGggLSAxID8gJ29yICcgOiAnJztcbiAgICByZXR1cm4gb3IgKyBhcnQgKyAnICcgKyB0O1xuICB9KS5qb2luKCcsICcpO1xuXG4gIHZhciBvYmpUeXBlID0gdHlwZShvYmopLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKCF0eXBlcy5zb21lKGZ1bmN0aW9uIChleHBlY3RlZCkgeyByZXR1cm4gb2JqVHlwZSA9PT0gZXhwZWN0ZWQ7IH0pKSB7XG4gICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKFxuICAgICAgZmxhZ01zZyArICdvYmplY3QgdGVzdGVkIG11c3QgYmUgJyArIHN0ciArICcsIGJ1dCAnICsgb2JqVHlwZSArICcgZ2l2ZW4nLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgc3NmaVxuICAgICk7XG4gIH1cbn07XG4iLCIvKiFcbiAqIENoYWkgLSBtZXNzYWdlIGNvbXBvc2l0aW9uIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRhbmNpZXNcbiAqL1xuXG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpXG4gICwgZ2V0QWN0dWFsID0gcmVxdWlyZSgnLi9nZXRBY3R1YWwnKVxuICAsIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKVxuICAsIG9iakRpc3BsYXkgPSByZXF1aXJlKCcuL29iakRpc3BsYXknKTtcblxuLyoqXG4gKiAjIyMgLmdldE1lc3NhZ2Uob2JqZWN0LCBtZXNzYWdlLCBuZWdhdGVNZXNzYWdlKVxuICpcbiAqIENvbnN0cnVjdCB0aGUgZXJyb3IgbWVzc2FnZSBiYXNlZCBvbiBmbGFnc1xuICogYW5kIHRlbXBsYXRlIHRhZ3MuIFRlbXBsYXRlIHRhZ3Mgd2lsbCByZXR1cm5cbiAqIGEgc3RyaW5naWZpZWQgaW5zcGVjdGlvbiBvZiB0aGUgb2JqZWN0IHJlZmVyZW5jZWQuXG4gKlxuICogTWVzc2FnZSB0ZW1wbGF0ZSB0YWdzOlxuICogLSBgI3t0aGlzfWAgY3VycmVudCBhc3NlcnRlZCBvYmplY3RcbiAqIC0gYCN7YWN0fWAgYWN0dWFsIHZhbHVlXG4gKiAtIGAje2V4cH1gIGV4cGVjdGVkIHZhbHVlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAoY29uc3RydWN0ZWQgQXNzZXJ0aW9uKVxuICogQHBhcmFtIHtBcmd1bWVudHN9IGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZS5hc3NlcnQgYXJndW1lbnRzXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRNZXNzYWdlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0TWVzc2FnZShvYmosIGFyZ3MpIHtcbiAgdmFyIG5lZ2F0ZSA9IGZsYWcob2JqLCAnbmVnYXRlJylcbiAgICAsIHZhbCA9IGZsYWcob2JqLCAnb2JqZWN0JylcbiAgICAsIGV4cGVjdGVkID0gYXJnc1szXVxuICAgICwgYWN0dWFsID0gZ2V0QWN0dWFsKG9iaiwgYXJncylcbiAgICAsIG1zZyA9IG5lZ2F0ZSA/IGFyZ3NbMl0gOiBhcmdzWzFdXG4gICAgLCBmbGFnTXNnID0gZmxhZyhvYmosICdtZXNzYWdlJyk7XG5cbiAgaWYodHlwZW9mIG1zZyA9PT0gXCJmdW5jdGlvblwiKSBtc2cgPSBtc2coKTtcbiAgbXNnID0gbXNnIHx8ICcnO1xuICBtc2cgPSBtc2dcbiAgICAucmVwbGFjZSgvI1xce3RoaXNcXH0vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JqRGlzcGxheSh2YWwpOyB9KVxuICAgIC5yZXBsYWNlKC8jXFx7YWN0XFx9L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iakRpc3BsYXkoYWN0dWFsKTsgfSlcbiAgICAucmVwbGFjZSgvI1xce2V4cFxcfS9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBvYmpEaXNwbGF5KGV4cGVjdGVkKTsgfSk7XG5cbiAgcmV0dXJuIGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyArIG1zZyA6IG1zZztcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRBY3R1YWwgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRBY3R1YWwob2JqZWN0LCBbYWN0dWFsXSlcbiAqXG4gKiBSZXR1cm5zIHRoZSBgYWN0dWFsYCB2YWx1ZSBmb3IgYW4gQXNzZXJ0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgKGNvbnN0cnVjdGVkIEFzc2VydGlvbilcbiAqIEBwYXJhbSB7QXJndW1lbnRzfSBjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUuYXNzZXJ0IGFyZ3VtZW50c1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0QWN0dWFsXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRBY3R1YWwob2JqLCBhcmdzKSB7XG4gIHJldHVybiBhcmdzLmxlbmd0aCA+IDQgPyBhcmdzWzRdIDogb2JqLl9vYmo7XG59O1xuIiwiLy8gVGhpcyBpcyAoYWxtb3N0KSBkaXJlY3RseSBmcm9tIE5vZGUuanMgdXRpbHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9ibG9iL2Y4YzMzNWQwY2FmNDdmMTZkMzE0MTNmODlhYTI4ZWRhMzg3OGUzYWEvbGliL3V0aWwuanNcblxudmFyIGdldE5hbWUgPSByZXF1aXJlKCdnZXQtZnVuYy1uYW1lJyk7XG52YXIgZ2V0UHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZ2V0UHJvcGVydGllcycpO1xudmFyIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXRFbnVtZXJhYmxlUHJvcGVydGllcycpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3BlY3Q7XG5cbi8qKlxuICogIyMjIC5pbnNwZWN0KG9iaiwgW3Nob3dIaWRkZW5dLCBbZGVwdGhdLCBbY29sb3JzXSlcbiAqXG4gKiBFY2hvZXMgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyaWVzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dIaWRkZW4gRmxhZyB0aGF0IHNob3dzIGhpZGRlbiAobm90IGVudW1lcmFibGUpXG4gKiAgICBwcm9wZXJ0aWVzIG9mIG9iamVjdHMuIERlZmF1bHQgaXMgZmFsc2UuXG4gKiBAcGFyYW0ge051bWJlcn0gZGVwdGggRGVwdGggaW4gd2hpY2ggdG8gZGVzY2VuZCBpbiBvYmplY3QuIERlZmF1bHQgaXMgMi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gY29sb3JzIEZsYWcgdG8gdHVybiBvbiBBTlNJIGVzY2FwZSBjb2RlcyB0byBjb2xvciB0aGVcbiAqICAgIG91dHB1dC4gRGVmYXVsdCBpcyBmYWxzZSAobm8gY29sb3JpbmcpLlxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgaW5zcGVjdFxuICovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycykge1xuICB2YXIgY3R4ID0ge1xuICAgIHNob3dIaWRkZW46IHNob3dIaWRkZW4sXG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyOyB9XG4gIH07XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyAyIDogZGVwdGgpKTtcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIG9iamVjdCBpcyBhIERPTSBlbGVtZW50LlxudmFyIGlzRE9NRWxlbWVudCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iamVjdCAmJlxuICAgICAgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICdub2RlVHlwZScgaW4gb2JqZWN0ICYmXG4gICAgICBvYmplY3Qubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5pbnNwZWN0ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICh0eXBlb2YgcmV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIElmIHRoaXMgaXMgYSBET00gZWxlbWVudCwgdHJ5IHRvIGdldCB0aGUgb3V0ZXIgSFRNTC5cbiAgaWYgKGlzRE9NRWxlbWVudCh2YWx1ZSkpIHtcbiAgICBpZiAoJ291dGVySFRNTCcgaW4gdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5vdXRlckhUTUw7XG4gICAgICAvLyBUaGlzIHZhbHVlIGRvZXMgbm90IGhhdmUgYW4gb3V0ZXJIVE1MIGF0dHJpYnV0ZSxcbiAgICAgIC8vICAgaXQgY291bGQgc3RpbGwgYmUgYW4gWE1MIGVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXR0ZW1wdCB0byBzZXJpYWxpemUgaXRcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChkb2N1bWVudC54bWxWZXJzaW9uKSB7XG4gICAgICAgICAgdmFyIHhtbFNlcmlhbGl6ZXIgPSBuZXcgWE1MU2VyaWFsaXplcigpO1xuICAgICAgICAgIHJldHVybiB4bWxTZXJpYWxpemVyLnNlcmlhbGl6ZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGaXJlZm94IDExLSBkbyBub3Qgc3VwcG9ydCBvdXRlckhUTUxcbiAgICAgICAgICAvLyAgIEl0IGRvZXMsIGhvd2V2ZXIsIHN1cHBvcnQgaW5uZXJIVE1MXG4gICAgICAgICAgLy8gICBVc2UgdGhlIGZvbGxvd2luZyB0byByZW5kZXIgdGhlIGVsZW1lbnRcbiAgICAgICAgICB2YXIgbnMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcbiAgICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCAnXycpO1xuXG4gICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHZhbHVlLmNsb25lTm9kZShmYWxzZSkpO1xuICAgICAgICAgIHZhciBodG1sID0gY29udGFpbmVyLmlubmVySFRNTFxuICAgICAgICAgICAgLnJlcGxhY2UoJz48JywgJz4nICsgdmFsdWUuaW5uZXJIVE1MICsgJzwnKTtcbiAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGEgbm9uLW5hdGl2ZSBET00gaW1wbGVtZW50YXRpb24sXG4gICAgICAgIC8vICAgY29udGludWUgd2l0aCB0aGUgbm9ybWFsIGZsb3c6XG4gICAgICAgIC8vICAgcHJpbnRpbmcgdGhlIGVsZW1lbnQgYXMgaWYgaXQgaXMgYW4gb2JqZWN0LlxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIHZpc2libGVLZXlzID0gZ2V0RW51bWVyYWJsZVByb3BlcnRpZXModmFsdWUpO1xuICB2YXIga2V5cyA9IGN0eC5zaG93SGlkZGVuID8gZ2V0UHJvcGVydGllcyh2YWx1ZSkgOiB2aXNpYmxlS2V5cztcblxuICB2YXIgbmFtZSwgbmFtZVN1ZmZpeDtcblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIC8vIEluIElFLCBlcnJvcnMgaGF2ZSBhIHNpbmdsZSBgc3RhY2tgIHByb3BlcnR5LCBvciBpZiB0aGV5IGFyZSB2YW5pbGxhIGBFcnJvcmAsXG4gIC8vIGEgYHN0YWNrYCBwbHVzIGBkZXNjcmlwdGlvbmAgcHJvcGVydHk7IGlnbm9yZSB0aG9zZSBmb3IgY29uc2lzdGVuY3kuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCB8fCAoaXNFcnJvcih2YWx1ZSkgJiYgKFxuICAgICAgKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09ICdzdGFjaycpIHx8XG4gICAgICAoa2V5cy5sZW5ndGggPT09IDIgJiYga2V5c1swXSA9PT0gJ2Rlc2NyaXB0aW9uJyAmJiBrZXlzWzFdID09PSAnc3RhY2snKVxuICAgICApKSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG5hbWUgPSBnZXROYW1lKHZhbHVlKTtcbiAgICAgIG5hbWVTdWZmaXggPSBuYW1lID8gJzogJyArIG5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWVTdWZmaXggKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnXG4gICAgLCBhcnJheSA9IGZhbHNlXG4gICAgLCB0eXBlZEFycmF5ID0gZmFsc2VcbiAgICAsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgaWYgKGlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICB0eXBlZEFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbmFtZSA9IGdldE5hbWUodmFsdWUpO1xuICAgIG5hbWVTdWZmaXggPSBuYW1lID8gJzogJyArIG5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbmFtZVN1ZmZpeCArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIGlmICh0eXBlZEFycmF5KSB7XG4gICAgcmV0dXJuIGZvcm1hdFR5cGVkQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKHZhbHVlID09PSAwICYmICgxL3ZhbHVlKSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnLTAnLCAnbnVtYmVyJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcblxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUodmFsdWUudG9TdHJpbmcoKSwgJ3N5bWJvbCcpO1xuICB9XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VHlwZWRBcnJheSh2YWx1ZSkge1xuICB2YXIgc3RyID0gJ1sgJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPj0gY29uZmlnLnRydW5jYXRlVGhyZXNob2xkIC0gNykge1xuICAgICAgc3RyICs9ICcuLi4nO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN0ciArPSB2YWx1ZVtpXSArICcsICc7XG4gIH1cbiAgc3RyICs9ICcgXSc7XG5cbiAgLy8gUmVtb3ZpbmcgdHJhaWxpbmcgYCwgYCBpZiB0aGUgYXJyYXkgd2FzIG5vdCB0cnVuY2F0ZWRcbiAgaWYgKHN0ci5pbmRleE9mKCcsICBdJykgIT09IC0xKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoJywgIF0nLCAnIF0nKTtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWU7XG4gIHZhciBwcm9wRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSk7XG4gIHZhciBzdHI7XG5cbiAgaWYgKHByb3BEZXNjcmlwdG9yKSB7XG4gICAgaWYgKHByb3BEZXNjcmlwdG9yLmdldCkge1xuICAgICAgaWYgKHByb3BEZXNjcmlwdG9yLnNldCkge1xuICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wRGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZpc2libGVLZXlzLmluZGV4T2Yoa2V5KSA8IDApIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YodmFsdWVba2V5XSkgPCAwKSB7XG4gICAgICBpZiAocmVjdXJzZVRpbWVzID09PSBudWxsKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgdmFsdWVba2V5XSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlW2tleV0sIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cbmZ1bmN0aW9uIGlzVHlwZWRBcnJheShhcikge1xuICAvLyBVbmZvcnR1bmF0ZWx5IHRoZXJlJ3Mgbm8gd2F5IHRvIGNoZWNrIGlmIGFuIG9iamVjdCBpcyBhIFR5cGVkQXJyYXlcbiAgLy8gV2UgaGF2ZSB0byBjaGVjayBpZiBpdCdzIG9uZSBvZiB0aGVzZSB0eXBlc1xuICByZXR1cm4gKHR5cGVvZiBhciA9PT0gJ29iamVjdCcgJiYgL1xcdytBcnJheV0kLy50ZXN0KG9iamVjdFRvU3RyaW5nKGFyKSkpO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKSB8fFxuICAgICAgICAgKHR5cGVvZiBhciA9PT0gJ29iamVjdCcgJiYgb2JqZWN0VG9TdHJpbmcoYXIpID09PSAnW29iamVjdCBBcnJheV0nKTtcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIHR5cGVvZiByZSA9PT0gJ29iamVjdCcgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIHR5cGVvZiBkID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIHR5cGVvZiBlID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJztcbn1cblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwiLyohXG4gKiBDaGFpIC0gZmxhZyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcblxuLyoqXG4gKiAjIyMgLm9iakRpc3BsYXkob2JqZWN0KVxuICpcbiAqIERldGVybWluZXMgaWYgYW4gb2JqZWN0IG9yIGFuIGFycmF5IG1hdGNoZXNcbiAqIGNyaXRlcmlhIHRvIGJlIGluc3BlY3RlZCBpbi1saW5lIGZvciBlcnJvclxuICogbWVzc2FnZXMgb3Igc2hvdWxkIGJlIHRydW5jYXRlZC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBqYXZhc2NyaXB0IG9iamVjdCB0byBpbnNwZWN0XG4gKiBAbmFtZSBvYmpEaXNwbGF5XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb2JqRGlzcGxheShvYmopIHtcbiAgdmFyIHN0ciA9IGluc3BlY3Qob2JqKVxuICAgICwgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuXG4gIGlmIChjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgJiYgc3RyLmxlbmd0aCA+PSBjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgcmV0dXJuICFvYmoubmFtZSB8fCBvYmoubmFtZSA9PT0gJydcbiAgICAgICAgPyAnW0Z1bmN0aW9uXSdcbiAgICAgICAgOiAnW0Z1bmN0aW9uOiAnICsgb2JqLm5hbWUgKyAnXSc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm4gJ1sgQXJyYXkoJyArIG9iai5sZW5ndGggKyAnKSBdJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iailcbiAgICAgICAgLCBrc3RyID0ga2V5cy5sZW5ndGggPiAyXG4gICAgICAgICAgPyBrZXlzLnNwbGljZSgwLCAyKS5qb2luKCcsICcpICsgJywgLi4uJ1xuICAgICAgICAgIDoga2V5cy5qb2luKCcsICcpO1xuICAgICAgcmV0dXJuICd7IE9iamVjdCAoJyArIGtzdHIgKyAnKSB9JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufTtcbiIsIi8qIVxuICogQ2hhaSAtIGZsYWcgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5mbGFnKG9iamVjdCwga2V5LCBbdmFsdWVdKVxuICpcbiAqIEdldCBvciBzZXQgYSBmbGFnIHZhbHVlIG9uIGFuIG9iamVjdC4gSWYgYVxuICogdmFsdWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBiZSBzZXQsIGVsc2UgaXQgd2lsbFxuICogcmV0dXJuIHRoZSBjdXJyZW50bHkgc2V0IHZhbHVlIG9yIGB1bmRlZmluZWRgIGlmXG4gKiB0aGUgdmFsdWUgaXMgbm90IHNldC5cbiAqXG4gKiAgICAgdXRpbHMuZmxhZyh0aGlzLCAnZm9vJywgJ2JhcicpOyAvLyBzZXR0ZXJcbiAqICAgICB1dGlscy5mbGFnKHRoaXMsICdmb28nKTsgLy8gZ2V0dGVyLCByZXR1cm5zIGBiYXJgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBjb25zdHJ1Y3RlZCBBc3NlcnRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIChvcHRpb25hbClcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGZsYWdcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhZyhvYmosIGtleSwgdmFsdWUpIHtcbiAgdmFyIGZsYWdzID0gb2JqLl9fZmxhZ3MgfHwgKG9iai5fX2ZsYWdzID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgZmxhZ3Nba2V5XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmbGFnc1trZXldO1xuICB9XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gdHJhbnNmZXJGbGFncyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLnRyYW5zZmVyRmxhZ3MoYXNzZXJ0aW9uLCBvYmplY3QsIGluY2x1ZGVBbGwgPSB0cnVlKVxuICpcbiAqIFRyYW5zZmVyIGFsbCB0aGUgZmxhZ3MgZm9yIGBhc3NlcnRpb25gIHRvIGBvYmplY3RgLiBJZlxuICogYGluY2x1ZGVBbGxgIGlzIHNldCB0byBgZmFsc2VgLCB0aGVuIHRoZSBiYXNlIENoYWlcbiAqIGFzc2VydGlvbiBmbGFncyAobmFtZWx5IGBvYmplY3RgLCBgc3NmaWAsIGBsb2NrU3NmaWAsXG4gKiBhbmQgYG1lc3NhZ2VgKSB3aWxsIG5vdCBiZSB0cmFuc2ZlcnJlZC5cbiAqXG4gKlxuICogICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgQXNzZXJ0aW9uKCk7XG4gKiAgICAgdXRpbHMudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG5ld0Fzc2VydGlvbik7XG4gKlxuICogICAgIHZhciBhbm90aGVyQXNzZXJpdG9uID0gbmV3IEFzc2VydGlvbihteU9iaik7XG4gKiAgICAgdXRpbHMudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIGFub3RoZXJBc3NlcnRpb24sIGZhbHNlKTtcbiAqXG4gKiBAcGFyYW0ge0Fzc2VydGlvbn0gYXNzZXJ0aW9uIHRoZSBhc3NlcnRpb24gdG8gdHJhbnNmZXIgdGhlIGZsYWdzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdGhlIG9iamVjdCB0byB0cmFuc2ZlciB0aGUgZmxhZ3MgdG87IHVzdWFsbHkgYSBuZXcgYXNzZXJ0aW9uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGluY2x1ZGVBbGxcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIHRyYW5zZmVyRmxhZ3NcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG9iamVjdCwgaW5jbHVkZUFsbCkge1xuICB2YXIgZmxhZ3MgPSBhc3NlcnRpb24uX19mbGFncyB8fCAoYXNzZXJ0aW9uLl9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuICBpZiAoIW9iamVjdC5fX2ZsYWdzKSB7XG4gICAgb2JqZWN0Ll9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgaW5jbHVkZUFsbCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDMgPyBpbmNsdWRlQWxsIDogdHJ1ZTtcblxuICBmb3IgKHZhciBmbGFnIGluIGZsYWdzKSB7XG4gICAgaWYgKGluY2x1ZGVBbGwgfHxcbiAgICAgICAgKGZsYWcgIT09ICdvYmplY3QnICYmIGZsYWcgIT09ICdzc2ZpJyAmJiBmbGFnICE9PSAnbG9ja1NzZmknICYmIGZsYWcgIT0gJ21lc3NhZ2UnKSkge1xuICAgICAgb2JqZWN0Ll9fZmxhZ3NbZmxhZ10gPSBmbGFnc1tmbGFnXTtcbiAgICB9XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWxzIFN5bWJvbDogZmFsc2UsIFVpbnQ4QXJyYXk6IGZhbHNlLCBXZWFrTWFwOiBmYWxzZSAqL1xuLyohXG4gKiBkZWVwLWVxbFxuICogQ29weXJpZ2h0KGMpIDIwMTMgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgdHlwZSA9IHJlcXVpcmUoJ3R5cGUtZGV0ZWN0Jyk7XG5mdW5jdGlvbiBGYWtlTWFwKCkge1xuICB0aGlzLl9rZXkgPSAnY2hhaS9kZWVwLWVxbF9fJyArIE1hdGgucmFuZG9tKCkgKyBEYXRlLm5vdygpO1xufVxuXG5GYWtlTWFwLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXRNYXAoa2V5KSB7XG4gICAgcmV0dXJuIGtleVt0aGlzLl9rZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldE1hcChrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFPYmplY3QuaXNGcm96ZW4oa2V5KSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGtleSwgdGhpcy5fa2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIE1lbW9pemVNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBGYWtlTWFwO1xuLyohXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIE1lbW9pemVNYXAgaGFzIHJlY29yZGVkIGEgcmVzdWx0IG9mIHRoZSB0d28gb3BlcmFuZHNcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWVtb2l6ZU1hcH0gbWVtb2l6ZU1hcFxuICogQHJldHVybnMge0Jvb2xlYW58bnVsbH0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZUNvbXBhcmUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBtZW1vaXplTWFwKSB7XG4gIC8vIFRlY2huaWNhbGx5LCBXZWFrTWFwIGtleXMgY2FuICpvbmx5KiBiZSBvYmplY3RzLCBub3QgcHJpbWl0aXZlcy5cbiAgaWYgKCFtZW1vaXplTWFwIHx8IGlzUHJpbWl0aXZlKGxlZnRIYW5kT3BlcmFuZCkgfHwgaXNQcmltaXRpdmUocmlnaHRIYW5kT3BlcmFuZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbGVmdEhhbmRNYXAgPSBtZW1vaXplTWFwLmdldChsZWZ0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRNYXApIHtcbiAgICB2YXIgcmVzdWx0ID0gbGVmdEhhbmRNYXAuZ2V0KHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKiFcbiAqIFNldCB0aGUgcmVzdWx0IG9mIHRoZSBlcXVhbGl0eSBpbnRvIHRoZSBNZW1vaXplTWFwXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01lbW9pemVNYXB9IG1lbW9pemVNYXBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG1lbW9pemVNYXAsIHJlc3VsdCkge1xuICAvLyBUZWNobmljYWxseSwgV2Vha01hcCBrZXlzIGNhbiAqb25seSogYmUgb2JqZWN0cywgbm90IHByaW1pdGl2ZXMuXG4gIGlmICghbWVtb2l6ZU1hcCB8fCBpc1ByaW1pdGl2ZShsZWZ0SGFuZE9wZXJhbmQpIHx8IGlzUHJpbWl0aXZlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsZWZ0SGFuZE1hcCA9IG1lbW9pemVNYXAuZ2V0KGxlZnRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZE1hcCkge1xuICAgIGxlZnRIYW5kTWFwLnNldChyaWdodEhhbmRPcGVyYW5kLCByZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIGxlZnRIYW5kTWFwID0gbmV3IE1lbW9pemVNYXAoKTtcbiAgICBsZWZ0SGFuZE1hcC5zZXQocmlnaHRIYW5kT3BlcmFuZCwgcmVzdWx0KTtcbiAgICBtZW1vaXplTWFwLnNldChsZWZ0SGFuZE9wZXJhbmQsIGxlZnRIYW5kTWFwKTtcbiAgfVxufVxuXG4vKiFcbiAqIFByaW1hcnkgRXhwb3J0XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWw7XG5tb2R1bGUuZXhwb3J0cy5NZW1vaXplTWFwID0gTWVtb2l6ZU1hcDtcblxuLyoqXG4gKiBBc3NlcnQgZGVlcGx5IG5lc3RlZCBzYW1lVmFsdWUgZXF1YWxpdHkgYmV0d2VlbiB0d28gb2JqZWN0cyBvZiBhbnkgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKG9wdGlvbmFsKSBBZGRpdGlvbmFsIG9wdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmNvbXBhcmF0b3JdIChvcHRpb25hbCkgT3ZlcnJpZGUgZGVmYXVsdCBhbGdvcml0aG0sIGRldGVybWluaW5nIGN1c3RvbSBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLm1lbW9pemVdIChvcHRpb25hbCkgUHJvdmlkZSBhIGN1c3RvbSBtZW1vaXphdGlvbiBvYmplY3Qgd2hpY2ggd2lsbCBjYWNoZSB0aGUgcmVzdWx0cyBvZlxuICAgIGNvbXBsZXggb2JqZWN0cyBmb3IgYSBzcGVlZCBib29zdC4gQnkgcGFzc2luZyBgZmFsc2VgIHlvdSBjYW4gZGlzYWJsZSBtZW1vaXphdGlvbiwgYnV0IHRoaXMgd2lsbCBjYXVzZSBjaXJjdWxhclxuICAgIHJlZmVyZW5jZXMgdG8gYmxvdyB0aGUgc3RhY2suXG4gKiBAcmV0dXJuIHtCb29sZWFufSBlcXVhbCBtYXRjaFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIC8vIElmIHdlIGhhdmUgYSBjb21wYXJhdG9yLCB3ZSBjYW4ndCBhc3N1bWUgYW55dGhpbmc7IHNvIGJhaWwgdG8gaXRzIGNoZWNrIGZpcnN0LlxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgc2ltcGxlUmVzdWx0ID0gc2ltcGxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKTtcbiAgaWYgKHNpbXBsZVJlc3VsdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gIH1cblxuICAvLyBEZWVwZXIgY29tcGFyaXNvbnMgYXJlIHB1c2hlZCB0aHJvdWdoIHRvIGEgbGFyZ2VyIGZ1bmN0aW9uXG4gIHJldHVybiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBNYW55IGNvbXBhcmlzb25zIGNhbiBiZSBjYW5jZWxlZCBvdXQgZWFybHkgdmlhIHNpbXBsZSBlcXVhbGl0eSBvciBwcmltaXRpdmUgY2hlY2tzLlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufG51bGx9IGVxdWFsIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCkge1xuICAvLyBFcXVhbCByZWZlcmVuY2VzIChleGNlcHQgZm9yIE51bWJlcnMpIGNhbiBiZSByZXR1cm5lZCBlYXJseVxuICBpZiAobGVmdEhhbmRPcGVyYW5kID09PSByaWdodEhhbmRPcGVyYW5kKSB7XG4gICAgLy8gSGFuZGxlICstMCBjYXNlc1xuICAgIHJldHVybiBsZWZ0SGFuZE9wZXJhbmQgIT09IDAgfHwgMSAvIGxlZnRIYW5kT3BlcmFuZCA9PT0gMSAvIHJpZ2h0SGFuZE9wZXJhbmQ7XG4gIH1cblxuICAvLyBoYW5kbGUgTmFOIGNhc2VzXG4gIGlmIChcbiAgICBsZWZ0SGFuZE9wZXJhbmQgIT09IGxlZnRIYW5kT3BlcmFuZCAmJiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJpZ2h0SGFuZE9wZXJhbmQgIT09IHJpZ2h0SGFuZE9wZXJhbmQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBBbnl0aGluZyB0aGF0IGlzIG5vdCBhbiAnb2JqZWN0JywgaS5lLiBzeW1ib2xzLCBmdW5jdGlvbnMsIGJvb2xlYW5zLCBudW1iZXJzLFxuICAvLyBzdHJpbmdzLCBhbmQgdW5kZWZpbmVkLCBjYW4gYmUgY29tcGFyZWQgYnkgcmVmZXJlbmNlLlxuICBpZiAoaXNQcmltaXRpdmUobGVmdEhhbmRPcGVyYW5kKSB8fCBpc1ByaW1pdGl2ZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIC8vIEVhc3kgb3V0IGIvYyBpdCB3b3VsZCBoYXZlIHBhc3NlZCB0aGUgZmlyc3QgZXF1YWxpdHkgY2hlY2tcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qIVxuICogVGhlIG1haW4gbG9naWMgb2YgdGhlIGBkZWVwRXF1YWxgIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAob3B0aW9uYWwpIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuY29tcGFyYXRvcl0gKG9wdGlvbmFsKSBPdmVycmlkZSBkZWZhdWx0IGFsZ29yaXRobSwgZGV0ZXJtaW5pbmcgY3VzdG9tIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWVtb2l6ZV0gKG9wdGlvbmFsKSBQcm92aWRlIGEgY3VzdG9tIG1lbW9pemF0aW9uIG9iamVjdCB3aGljaCB3aWxsIGNhY2hlIHRoZSByZXN1bHRzIG9mXG4gICAgY29tcGxleCBvYmplY3RzIGZvciBhIHNwZWVkIGJvb3N0LiBCeSBwYXNzaW5nIGBmYWxzZWAgeW91IGNhbiBkaXNhYmxlIG1lbW9pemF0aW9uLCBidXQgdGhpcyB3aWxsIGNhdXNlIGNpcmN1bGFyXG4gICAgcmVmZXJlbmNlcyB0byBibG93IHRoZSBzdGFjay5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIG1hdGNoXG4qL1xuZnVuY3Rpb24gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5tZW1vaXplID0gb3B0aW9ucy5tZW1vaXplID09PSBmYWxzZSA/IGZhbHNlIDogb3B0aW9ucy5tZW1vaXplIHx8IG5ldyBNZW1vaXplTWFwKCk7XG4gIHZhciBjb21wYXJhdG9yID0gb3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3I7XG5cbiAgLy8gQ2hlY2sgaWYgYSBtZW1vaXplZCByZXN1bHQgZXhpc3RzLlxuICB2YXIgbWVtb2l6ZVJlc3VsdExlZnQgPSBtZW1vaXplQ29tcGFyZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSk7XG4gIGlmIChtZW1vaXplUmVzdWx0TGVmdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBtZW1vaXplUmVzdWx0TGVmdDtcbiAgfVxuICB2YXIgbWVtb2l6ZVJlc3VsdFJpZ2h0ID0gbWVtb2l6ZUNvbXBhcmUocmlnaHRIYW5kT3BlcmFuZCwgbGVmdEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUpO1xuICBpZiAobWVtb2l6ZVJlc3VsdFJpZ2h0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lbW9pemVSZXN1bHRSaWdodDtcbiAgfVxuXG4gIC8vIElmIGEgY29tcGFyYXRvciBpcyBwcmVzZW50LCB1c2UgaXQuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgdmFyIGNvbXBhcmF0b3JSZXN1bHQgPSBjb21wYXJhdG9yKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgLy8gQ29tcGFyYXRvcnMgbWF5IHJldHVybiBudWxsLCBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8gZ28gYmFjayB0byBkZWZhdWx0IGJlaGF2aW9yLlxuICAgIGlmIChjb21wYXJhdG9yUmVzdWx0ID09PSBmYWxzZSB8fCBjb21wYXJhdG9yUmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCBjb21wYXJhdG9yUmVzdWx0KTtcbiAgICAgIHJldHVybiBjb21wYXJhdG9yUmVzdWx0O1xuICAgIH1cbiAgICAvLyBUbyBhbGxvdyBjb21wYXJhdG9ycyB0byBvdmVycmlkZSAqYW55KiBiZWhhdmlvciwgd2UgcmFuIHRoZW0gZmlyc3QuIFNpbmNlIGl0IGRpZG4ndCBkZWNpZGVcbiAgICAvLyB3aGF0IHRvIGRvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byByZXR1cm4gdGhlIGJhc2ljIHRlc3RzIGZpcnN0IGJlZm9yZSB3ZSBtb3ZlIG9uLlxuICAgIHZhciBzaW1wbGVSZXN1bHQgPSBzaW1wbGVFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmIChzaW1wbGVSZXN1bHQgIT09IG51bGwpIHtcbiAgICAgIC8vIERvbid0IG1lbW9pemUgdGhpcywgaXQgdGFrZXMgbG9uZ2VyIHRvIHNldC9yZXRyaWV2ZSB0aGFuIHRvIGp1c3QgY29tcGFyZS5cbiAgICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlZnRIYW5kVHlwZSA9IHR5cGUobGVmdEhhbmRPcGVyYW5kKTtcbiAgaWYgKGxlZnRIYW5kVHlwZSAhPT0gdHlwZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIGZhbHNlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZW1wb3JhcmlseSBzZXQgdGhlIG9wZXJhbmRzIGluIHRoZSBtZW1vaXplIG9iamVjdCB0byBwcmV2ZW50IGJsb3dpbmcgdGhlIHN0YWNrXG4gIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIHRydWUpO1xuXG4gIHZhciByZXN1bHQgPSBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpO1xuICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpIHtcbiAgc3dpdGNoIChsZWZ0SGFuZFR5cGUpIHtcbiAgICBjYXNlICdTdHJpbmcnOlxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgY2FzZSAnRGF0ZSc6XG4gICAgICAvLyBJZiB0aGVzZSB0eXBlcyBhcmUgdGhlaXIgaW5zdGFuY2UgdHlwZXMgKGUuZy4gYG5ldyBOdW1iZXJgKSB0aGVuIHJlLWRlZXBFcXVhbCBhZ2FpbnN0IHRoZWlyIHZhbHVlc1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQudmFsdWVPZigpLCByaWdodEhhbmRPcGVyYW5kLnZhbHVlT2YoKSk7XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZCA9PT0gcmlnaHRIYW5kT3BlcmFuZDtcbiAgICBjYXNlICdBcmd1bWVudHMnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIHJldHVybiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGNhc2UgJ0dlbmVyYXRvcic6XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdEYXRhVmlldyc6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQuYnVmZmVyKSwgbmV3IFVpbnQ4QXJyYXkocmlnaHRIYW5kT3BlcmFuZC5idWZmZXIpLCBvcHRpb25zKTtcbiAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQpLCBuZXcgVWludDhBcnJheShyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBlbnRyaWVzRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdNYXAnOlxuICAgICAgcmV0dXJuIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgfVxufVxuXG4vKiFcbiAqIENvbXBhcmUgdHdvIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSB7UmVnRXhwfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7UmVnRXhwfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpIHtcbiAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZC50b1N0cmluZygpID09PSByaWdodEhhbmRPcGVyYW5kLnRvU3RyaW5nKCk7XG59XG5cbi8qIVxuICogQ29tcGFyZSB0d28gU2V0cy9NYXBzIGZvciBlcXVhbGl0eS4gRmFzdGVyIHRoYW4gb3RoZXIgZXF1YWxpdHkgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7U2V0fSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7U2V0fSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgU2V0I2VudHJpZXMgb3IgU2V0I0BAaXRlcmF0b3IsIHNvIHdlIG5lZWQgbWFudWFsbHkgcG9wdWxhdGUgdXNpbmcgU2V0I2ZvckVhY2hcbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplICE9PSByaWdodEhhbmRPcGVyYW5kLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGxlZnRIYW5kSXRlbXMgPSBbXTtcbiAgdmFyIHJpZ2h0SGFuZEl0ZW1zID0gW107XG4gIGxlZnRIYW5kT3BlcmFuZC5mb3JFYWNoKGZ1bmN0aW9uIGdhdGhlckVudHJpZXMoa2V5LCB2YWx1ZSkge1xuICAgIGxlZnRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByaWdodEhhbmRPcGVyYW5kLmZvckVhY2goZnVuY3Rpb24gZ2F0aGVyRW50cmllcyhrZXksIHZhbHVlKSB7XG4gICAgcmlnaHRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByZXR1cm4gaXRlcmFibGVFcXVhbChsZWZ0SGFuZEl0ZW1zLnNvcnQoKSwgcmlnaHRIYW5kSXRlbXMuc29ydCgpLCBvcHRpb25zKTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGZsYXQgaXRlcmFibGUgb2JqZWN0cyBzdWNoIGFzIEFycmF5cywgVHlwZWRBcnJheXMgb3IgTm9kZS5qcyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7SXRlcmFibGV9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtJdGVyYWJsZX0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0gbGVmdEhhbmRPcGVyYW5kLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCAhPT0gcmlnaHRIYW5kT3BlcmFuZC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IC0xO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kW2luZGV4XSwgcmlnaHRIYW5kT3BlcmFuZFtpbmRleF0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGdlbmVyYXRvciBvYmplY3RzIHN1Y2ggYXMgdGhvc2UgcmV0dXJuZWQgYnkgZ2VuZXJhdG9yIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7SXRlcmFibGV9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHJldHVybiBpdGVyYWJsZUVxdWFsKGdldEdlbmVyYXRvckVudHJpZXMobGVmdEhhbmRPcGVyYW5kKSwgZ2V0R2VuZXJhdG9yRW50cmllcyhyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG59XG5cbi8qIVxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGhhc0l0ZXJhdG9yRnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG5cbi8qIVxuICogR2V0cyBhbGwgaXRlcmF0b3IgZW50cmllcyBmcm9tIHRoZSBnaXZlbiBPYmplY3QuIElmIHRoZSBPYmplY3QgaGFzIG5vIEBAaXRlcmF0b3IgZnVuY3Rpb24sIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gKiBUaGlzIHdpbGwgY29uc3VtZSB0aGUgaXRlcmF0b3IgLSB3aGljaCBjb3VsZCBoYXZlIHNpZGUgZWZmZWN0cyBkZXBlbmRpbmcgb24gdGhlIEBAaXRlcmF0b3IgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBlbnRyaWVzIGZyb20gdGhlIEBAaXRlcmF0b3IgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JFbnRyaWVzKHRhcmdldCkge1xuICBpZiAoaGFzSXRlcmF0b3JGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRHZW5lcmF0b3JFbnRyaWVzKHRhcmdldFtTeW1ib2wuaXRlcmF0b3JdKCkpO1xuICAgIH0gY2F0Y2ggKGl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIGVudHJpZXMgZnJvbSBhIEdlbmVyYXRvci4gVGhpcyB3aWxsIGNvbnN1bWUgdGhlIGdlbmVyYXRvciAtIHdoaWNoIGNvdWxkIGhhdmUgc2lkZSBlZmZlY3RzLlxuICpcbiAqIEBwYXJhbSB7R2VuZXJhdG9yfSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2YgZW50cmllcyBmcm9tIHRoZSBHZW5lcmF0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldEdlbmVyYXRvckVudHJpZXMoZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW5lcmF0b3JSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICB2YXIgYWNjdW11bGF0b3IgPSBbIGdlbmVyYXRvclJlc3VsdC52YWx1ZSBdO1xuICB3aGlsZSAoZ2VuZXJhdG9yUmVzdWx0LmRvbmUgPT09IGZhbHNlKSB7XG4gICAgZ2VuZXJhdG9yUmVzdWx0ID0gZ2VuZXJhdG9yLm5leHQoKTtcbiAgICBhY2N1bXVsYXRvci5wdXNoKGdlbmVyYXRvclJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUga2V5cyBmcm9tIGEgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBrZXlzIGZyb20gdGhlIHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZUtleXModGFyZ2V0KSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuLyohXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIGhhdmUgbWF0Y2hpbmcgdmFsdWVzLCBnaXZlbiBhIHNldCBvZiBrZXlzLiBEZWZlcnMgdG8gZGVlcEVxdWFsIGZvciB0aGUgZXF1YWxpdHkgY2hlY2sgb2ZcbiAqIGVhY2gga2V5LiBJZiBhbnkgdmFsdWUgb2YgdGhlIGdpdmVuIGtleSBpcyBub3QgZXF1YWwsIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBmYWxzZSAoZWFybHkpLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBBbiBhcnJheSBvZiBrZXlzIHRvIGNvbXBhcmUgdGhlIHZhbHVlcyBvZiBsZWZ0SGFuZE9wZXJhbmQgYW5kIHJpZ2h0SGFuZE9wZXJhbmQgYWdhaW5zdFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuZnVuY3Rpb24ga2V5c0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmRba2V5c1tpXV0sIHJpZ2h0SGFuZE9wZXJhbmRba2V5c1tpXV0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBSZWN1cnNpdmVseSBjaGVjayB0aGUgZXF1YWxpdHkgb2YgdHdvIE9iamVjdHMuIE9uY2UgYmFzaWMgc2FtZW5lc3MgaGFzIGJlZW4gZXN0YWJsaXNoZWQgaXQgd2lsbCBkZWZlciB0byBgZGVlcEVxdWFsYFxuICogZm9yIGVhY2ggZW51bWVyYWJsZSBrZXkgaW4gdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHZhciBsZWZ0SGFuZEtleXMgPSBnZXRFbnVtZXJhYmxlS2V5cyhsZWZ0SGFuZE9wZXJhbmQpO1xuICB2YXIgcmlnaHRIYW5kS2V5cyA9IGdldEVudW1lcmFibGVLZXlzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRLZXlzLmxlbmd0aCAmJiBsZWZ0SGFuZEtleXMubGVuZ3RoID09PSByaWdodEhhbmRLZXlzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kS2V5cy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kS2V5cy5zb3J0KCk7XG4gICAgaWYgKGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRLZXlzLCByaWdodEhhbmRLZXlzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kS2V5cywgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgbGVmdEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKGxlZnRIYW5kT3BlcmFuZCk7XG4gIHZhciByaWdodEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRFbnRyaWVzLmxlbmd0aCAmJiBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSByaWdodEhhbmRFbnRyaWVzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRFbnRyaWVzLCByaWdodEhhbmRFbnRyaWVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChsZWZ0SGFuZEtleXMubGVuZ3RoID09PSAwICYmXG4gICAgICBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSAwICYmXG4gICAgICByaWdodEhhbmRLZXlzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgcmlnaHRIYW5kRW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyohXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGEgcHJpbWl0aXZlLlxuICpcbiAqIFRoaXMgaW50ZW50aW9uYWxseSByZXR1cm5zIHRydWUgZm9yIGFsbCBvYmplY3RzIHRoYXQgY2FuIGJlIGNvbXBhcmVkIGJ5IHJlZmVyZW5jZSxcbiAqIGluY2x1ZGluZyBmdW5jdGlvbnMgYW5kIHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIGdldEZ1bmNOYW1lIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTYgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0RnVuY05hbWUoY29uc3RydWN0b3JGbilcbiAqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24uXG4gKiBXaGVuIGEgbm9uLWZ1bmN0aW9uIGluc3RhbmNlIGlzIHBhc3NlZCwgcmV0dXJucyBgbnVsbGAuXG4gKiBUaGlzIGFsc28gaW5jbHVkZXMgYSBwb2x5ZmlsbCBmdW5jdGlvbiBpZiBgYUZ1bmMubmFtZWAgaXMgbm90IGRlZmluZWQuXG4gKlxuICogQG5hbWUgZ2V0RnVuY05hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciB0b1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jdGlvbk5hbWVNYXRjaCA9IC9cXHMqZnVuY3Rpb24oPzpcXHN8XFxzKlxcL1xcKlteKD86KlxcLyldK1xcKlxcL1xccyopKihbXlxcc1xcKFxcL10rKS87XG5mdW5jdGlvbiBnZXRGdW5jTmFtZShhRnVuYykge1xuICBpZiAodHlwZW9mIGFGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbmFtZSA9ICcnO1xuICBpZiAodHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYUZ1bmMubmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBIZXJlIHdlIHJ1biBhIHBvbHlmaWxsIGlmIEZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBuYW1lYCBwcm9wZXJ0eSBhbmQgaWYgYUZ1bmMubmFtZSBpcyBub3QgZGVmaW5lZFxuICAgIHZhciBtYXRjaCA9IHRvU3RyaW5nLmNhbGwoYUZ1bmMpLm1hdGNoKGZ1bmN0aW9uTmFtZU1hdGNoKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIG5hbWUgPSBtYXRjaFsxXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UndmUgZ290IGEgYG5hbWVgIHByb3BlcnR5IHdlIGp1c3QgdXNlIGl0XG4gICAgbmFtZSA9IGFGdW5jLm5hbWU7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRGdW5jTmFtZTtcbiIsIi8qIVxuICogQ2hhaSAtIGFkZFByb3BlcnR5IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAuYWRkUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpXG4gKlxuICogQWRkcyBhIHByb3BlcnR5IHRvIHRoZSBwcm90b3R5cGUgb2YgYW4gb2JqZWN0LlxuICpcbiAqICAgICB1dGlscy5hZGRQcm9wZXJ0eShjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdmb28nLCBmdW5jdGlvbiAoKSB7XG4gKiAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqKS50by5iZS5pbnN0YW5jZW9mKEZvbyk7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZm9vJywgZm4pO1xuICpcbiAqIFRoZW4gY2FuIGJlIHVzZWQgYXMgYW55IG90aGVyIGFzc2VydGlvbi5cbiAqXG4gKiAgICAgZXhwZWN0KG15Rm9vKS50by5iZS5mb287XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3QgdG8gd2hpY2ggdGhlIHByb3BlcnR5IGlzIGFkZGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiBwcm9wZXJ0eSB0byBhZGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldHRlciBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBuYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBhZGRQcm9wZXJ0eVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZFByb3BlcnR5KGN0eCwgbmFtZSwgZ2V0dGVyKSB7XG4gIGdldHRlciA9IGdldHRlciA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBnZXR0ZXI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwgbmFtZSxcbiAgICB7IGdldDogZnVuY3Rpb24gcHJvcGVydHlHZXR0ZXIoKSB7XG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBwcm9wZXJ0eUdldHRlcmAgY2F1c2VzIHRoaXMgZnVuY3Rpb24gdG9cbiAgICAgICAgLy8gYmUgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvbiBmcmFtZXMgZnJvbSB0aGVcbiAgICAgICAgLy8gc3RhY2sgdHJhY2Ugb2YgYSBmYWlsZWQgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGlmXG4gICAgICAgIC8vIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXNuJ3Qgc2V0IGFuZCBwcm94eSBwcm90ZWN0aW9uIGlzIGRpc2FibGVkLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzIHNldCwgdGhlbiBlaXRoZXIgdGhpcyBhc3NlcnRpb24gaGFzIGJlZW5cbiAgICAgICAgLy8gb3ZlcndyaXR0ZW4gYnkgYW5vdGhlciBhc3NlcnRpb24sIG9yIHRoaXMgYXNzZXJ0aW9uIGlzIGJlaW5nIGludm9rZWRcbiAgICAgICAgLy8gZnJvbSBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWdcbiAgICAgICAgLy8gaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi4gSW4gdGhlIHNlY29uZFxuICAgICAgICAvLyBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG91dGVyIGFzc2VydGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSWYgcHJveHkgcHJvdGVjdGlvbiBpcyBlbmFibGVkLCB0aGVuIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuXG4gICAgICAgIC8vIHNldCBieSB0aGUgcHJveHkgZ2V0dGVyLlxuICAgICAgICBpZiAoIWlzUHJveHlFbmFibGVkKCkgJiYgIWZsYWcodGhpcywgJ2xvY2tTc2ZpJykpIHtcbiAgICAgICAgICBmbGFnKHRoaXMsICdzc2ZpJywgcHJvcGVydHlHZXR0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IGdldHRlci5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICAgICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgICAgIH1cbiAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBhZGRNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBhZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBwcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAuYWRkTWV0aG9kKGN0eCwgbmFtZSwgbWV0aG9kKVxuICpcbiAqIEFkZHMgYSBtZXRob2QgdG8gdGhlIHByb3RvdHlwZSBvZiBhbiBvYmplY3QuXG4gKlxuICogICAgIHV0aWxzLmFkZE1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdmb28nLCBmdW5jdGlvbiAoc3RyKSB7XG4gKiAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqKS50by5iZS5lcXVhbChzdHIpO1xuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24uYWRkTWV0aG9kKCdmb28nLCBmbik7XG4gKlxuICogVGhlbiBjYW4gYmUgdXNlZCBhcyBhbnkgb3RoZXIgYXNzZXJ0aW9uLlxuICpcbiAqICAgICBleHBlY3QoZm9vU3RyKS50by5iZS5mb28oJ2JhcicpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBtZXRob2QgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCB0byBhZGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBuYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBhZGRNZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QpIHtcbiAgdmFyIG1ldGhvZFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYG1ldGhvZFdyYXBwZXJgIGNhdXNlcyB0aGlzIGZ1bmN0aW9uIHRvIGJlIHRoZVxuICAgIC8vIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvbiBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2ZcbiAgICAvLyBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGlmIHRoZVxuICAgIC8vIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzIHNldCwgdGhlbiBlaXRoZXIgdGhpcyBhc3NlcnRpb24gaGFzIGJlZW5cbiAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZCBmcm9tXG4gICAgLy8gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGUgZmlyc3QgY2FzZSwgdGhlIGBzc2ZpYCBmbGFnIGhhc1xuICAgIC8vIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi4gSW4gdGhlIHNlY29uZCBjYXNlLCB0aGVcbiAgICAvLyBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgIGlmICghZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIG1ldGhvZFdyYXBwZXIpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xuXG4gIGFkZExlbmd0aEd1YXJkKG1ldGhvZFdyYXBwZXIsIG5hbWUsIGZhbHNlKTtcbiAgY3R4W25hbWVdID0gcHJveGlmeShtZXRob2RXcmFwcGVyLCBuYW1lKTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBvdmVyd3JpdGVQcm9wZXJ0eSB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIGlzUHJveHlFbmFibGVkID0gcmVxdWlyZSgnLi9pc1Byb3h5RW5hYmxlZCcpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLm92ZXJ3cml0ZVByb3BlcnR5KGN0eCwgbmFtZSwgZm4pXG4gKlxuICogT3ZlcndpdGVzIGFuIGFscmVhZHkgZXhpc3RpbmcgcHJvcGVydHkgZ2V0dGVyIGFuZCBwcm92aWRlc1xuICogYWNjZXNzIHRvIHByZXZpb3VzIHZhbHVlLiBNdXN0IHJldHVybiBmdW5jdGlvbiB0byB1c2UgYXMgZ2V0dGVyLlxuICpcbiAqICAgICB1dGlscy5vdmVyd3JpdGVQcm9wZXJ0eShjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdvaycsIGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAqICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEZvbykge1xuICogICAgICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmoubmFtZSkudG8uZXF1YWwoJ2JhcicpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24ub3ZlcndyaXRlUHJvcGVydHkoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uYmUub2s7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgaXMgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHByb3BlcnR5IHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0dGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGdldHRlciBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBuYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBvdmVyd3JpdGVQcm9wZXJ0eVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZVByb3BlcnR5KGN0eCwgbmFtZSwgZ2V0dGVyKSB7XG4gIHZhciBfZ2V0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdHgsIG5hbWUpXG4gICAgLCBfc3VwZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBpZiAoX2dldCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgX2dldC5nZXQpXG4gICAgX3N1cGVyID0gX2dldC5nZXRcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBuYW1lLFxuICAgIHsgZ2V0OiBmdW5jdGlvbiBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyKCkge1xuICAgICAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgb3ZlcndyaXRpbmdQcm9wZXJ0eUdldHRlcmAgY2F1c2VzIHRoaXNcbiAgICAgICAgLy8gZnVuY3Rpb24gdG8gYmUgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvbiBmcmFtZXNcbiAgICAgICAgLy8gZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgYSBmYWlsZWQgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGlmXG4gICAgICAgIC8vIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXNuJ3Qgc2V0IGFuZCBwcm94eSBwcm90ZWN0aW9uIGlzIGRpc2FibGVkLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzIHNldCwgdGhlbiBlaXRoZXIgdGhpcyBhc3NlcnRpb24gaGFzIGJlZW5cbiAgICAgICAgLy8gb3ZlcndyaXR0ZW4gYnkgYW5vdGhlciBhc3NlcnRpb24sIG9yIHRoaXMgYXNzZXJ0aW9uIGlzIGJlaW5nIGludm9rZWRcbiAgICAgICAgLy8gZnJvbSBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWdcbiAgICAgICAgLy8gaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi4gSW4gdGhlIHNlY29uZFxuICAgICAgICAvLyBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG91dGVyIGFzc2VydGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSWYgcHJveHkgcHJvdGVjdGlvbiBpcyBlbmFibGVkLCB0aGVuIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuXG4gICAgICAgIC8vIHNldCBieSB0aGUgcHJveHkgZ2V0dGVyLlxuICAgICAgICBpZiAoIWlzUHJveHlFbmFibGVkKCkgJiYgIWZsYWcodGhpcywgJ2xvY2tTc2ZpJykpIHtcbiAgICAgICAgICBmbGFnKHRoaXMsICdzc2ZpJywgb3ZlcndyaXRpbmdQcm9wZXJ0eUdldHRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR0aW5nIHRoZSBgbG9ja1NzZmlgIGZsYWcgdG8gYHRydWVgIHByZXZlbnRzIHRoZSBvdmVyd3JpdHRlblxuICAgICAgICAvLyBhc3NlcnRpb24gZnJvbSBjaGFuZ2luZyB0aGUgYHNzZmlgIGZsYWcuIEJ5IHRoaXMgcG9pbnQsIHRoZSBgc3NmaWBcbiAgICAgICAgLy8gZmxhZyBpcyBhbHJlYWR5IHNldCB0byB0aGUgY29ycmVjdCBzdGFydGluZyBwb2ludCBmb3IgdGhpcyBhc3NlcnRpb24uXG4gICAgICAgIHZhciBvcmlnTG9ja1NzZmkgPSBmbGFnKHRoaXMsICdsb2NrU3NmaScpO1xuICAgICAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIHRydWUpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0dGVyKF9zdXBlcikuY2FsbCh0aGlzKTtcbiAgICAgICAgZmxhZyh0aGlzLCAnbG9ja1NzZmknLCBvcmlnTG9ja1NzZmkpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICAgICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgICAgIH1cbiAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBvdmVyd3JpdGVNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBhZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBwcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAub3ZlcndyaXRlTWV0aG9kKGN0eCwgbmFtZSwgZm4pXG4gKlxuICogT3ZlcndpdGVzIGFuIGFscmVhZHkgZXhpc3RpbmcgbWV0aG9kIGFuZCBwcm92aWRlc1xuICogYWNjZXNzIHRvIHByZXZpb3VzIGZ1bmN0aW9uLiBNdXN0IHJldHVybiBmdW5jdGlvblxuICogdG8gYmUgdXNlZCBmb3IgbmFtZS5cbiAqXG4gKiAgICAgdXRpbHMub3ZlcndyaXRlTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2VxdWFsJywgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgRm9vKSB7XG4gKiAgICAgICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iai52YWx1ZSkudG8uZXF1YWwoc3RyKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24ub3ZlcndyaXRlTWV0aG9kKCdmb28nLCBmbik7XG4gKlxuICogVGhlbiBjYW4gYmUgdXNlZCBhcyBhbnkgb3RoZXIgYXNzZXJ0aW9uLlxuICpcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmVxdWFsKCdiYXInKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB3aG9zZSBtZXRob2QgaXMgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCB0byBvdmVyd3JpdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBuYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBvdmVyd3JpdGVNZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvdmVyd3JpdGVNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QpIHtcbiAgdmFyIF9tZXRob2QgPSBjdHhbbmFtZV1cbiAgICAsIF9zdXBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihuYW1lICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH07XG5cbiAgaWYgKF9tZXRob2QgJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIF9tZXRob2QpXG4gICAgX3N1cGVyID0gX21ldGhvZDtcblxuICB2YXIgb3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXJgIGNhdXNlcyB0aGlzXG4gICAgLy8gZnVuY3Rpb24gdG8gYmUgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvbiBmcmFtZXMgZnJvbVxuICAgIC8vIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGlmIHRoZVxuICAgIC8vIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzIHNldCwgdGhlbiBlaXRoZXIgdGhpcyBhc3NlcnRpb24gaGFzIGJlZW5cbiAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZCBmcm9tXG4gICAgLy8gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGUgZmlyc3QgY2FzZSwgdGhlIGBzc2ZpYCBmbGFnIGhhc1xuICAgIC8vIGFscmVhZHkgYmVlbiBzZXQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi4gSW4gdGhlIHNlY29uZCBjYXNlLCB0aGVcbiAgICAvLyBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgIGlmICghZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlcik7XG4gICAgfVxuXG4gICAgLy8gU2V0dGluZyB0aGUgYGxvY2tTc2ZpYCBmbGFnIHRvIGB0cnVlYCBwcmV2ZW50cyB0aGUgb3ZlcndyaXR0ZW4gYXNzZXJ0aW9uXG4gICAgLy8gZnJvbSBjaGFuZ2luZyB0aGUgYHNzZmlgIGZsYWcuIEJ5IHRoaXMgcG9pbnQsIHRoZSBgc3NmaWAgZmxhZyBpcyBhbHJlYWR5XG4gICAgLy8gc2V0IHRvIHRoZSBjb3JyZWN0IHN0YXJ0aW5nIHBvaW50IGZvciB0aGlzIGFzc2VydGlvbi5cbiAgICB2YXIgb3JpZ0xvY2tTc2ZpID0gZmxhZyh0aGlzLCAnbG9ja1NzZmknKTtcbiAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIHRydWUpO1xuICAgIHZhciByZXN1bHQgPSBtZXRob2QoX3N1cGVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgb3JpZ0xvY2tTc2ZpKTtcblxuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH1cblxuICBhZGRMZW5ndGhHdWFyZChvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIsIG5hbWUsIGZhbHNlKTtcbiAgY3R4W25hbWVdID0gcHJveGlmeShvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIsIG5hbWUpO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGFkZENoYWluaW5nTWV0aG9kIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgYWRkTGVuZ3RoR3VhcmQgPSByZXF1aXJlKCcuL2FkZExlbmd0aEd1YXJkJyk7XG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgcHJveGlmeSA9IHJlcXVpcmUoJy4vcHJveGlmeScpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyohXG4gKiBNb2R1bGUgdmFyaWFibGVzXG4gKi9cblxuLy8gQ2hlY2sgd2hldGhlciBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBpcyBzdXBwb3J0ZWRcbnZhciBjYW5TZXRQcm90b3R5cGUgPSB0eXBlb2YgT2JqZWN0LnNldFByb3RvdHlwZU9mID09PSAnZnVuY3Rpb24nO1xuXG4vLyBXaXRob3V0IGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIHN1cHBvcnQsIHRoaXMgbW9kdWxlIHdpbGwgbmVlZCB0byBhZGQgcHJvcGVydGllcyB0byBhIGZ1bmN0aW9uLlxuLy8gSG93ZXZlciwgc29tZSBvZiBmdW5jdGlvbnMnIG93biBwcm9wcyBhcmUgbm90IGNvbmZpZ3VyYWJsZSBhbmQgc2hvdWxkIGJlIHNraXBwZWQuXG52YXIgdGVzdEZuID0gZnVuY3Rpb24oKSB7fTtcbnZhciBleGNsdWRlTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0Rm4pLmZpbHRlcihmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGVzdEZuLCBuYW1lKTtcblxuICAvLyBOb3RlOiBQaGFudG9tSlMgMS54IGluY2x1ZGVzIGBjYWxsZWVgIGFzIG9uZSBvZiBgdGVzdEZuYCdzIG93biBwcm9wZXJ0aWVzLFxuICAvLyBidXQgdGhlbiByZXR1cm5zIGB1bmRlZmluZWRgIGFzIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciBgY2FsbGVlYC4gQXMgYVxuICAvLyB3b3JrYXJvdW5kLCB3ZSBwZXJmb3JtIGFuIG90aGVyd2lzZSB1bm5lY2Vzc2FyeSB0eXBlLWNoZWNrIGZvciBgcHJvcERlc2NgLFxuICAvLyBhbmQgdGhlbiBmaWx0ZXIgaXQgb3V0IGlmIGl0J3Mgbm90IGFuIG9iamVjdCBhcyBpdCBzaG91bGQgYmUuXG4gIGlmICh0eXBlb2YgcHJvcERlc2MgIT09ICdvYmplY3QnKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiAhcHJvcERlc2MuY29uZmlndXJhYmxlO1xufSk7XG5cbi8vIENhY2hlIGBGdW5jdGlvbmAgcHJvcGVydGllc1xudmFyIGNhbGwgID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsXG4gICAgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8qKlxuICogIyMjIC5hZGRDaGFpbmFibGVNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QsIGNoYWluaW5nQmVoYXZpb3IpXG4gKlxuICogQWRkcyBhIG1ldGhvZCB0byBhbiBvYmplY3QsIHN1Y2ggdGhhdCB0aGUgbWV0aG9kIGNhbiBhbHNvIGJlIGNoYWluZWQuXG4gKlxuICogICAgIHV0aWxzLmFkZENoYWluYWJsZU1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdmb28nLCBmdW5jdGlvbiAoc3RyKSB7XG4gKiAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqKS50by5iZS5lcXVhbChzdHIpO1xuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdmb28nLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gKlxuICogVGhlIHJlc3VsdCBjYW4gdGhlbiBiZSB1c2VkIGFzIGJvdGggYSBtZXRob2QgYXNzZXJ0aW9uLCBleGVjdXRpbmcgYm90aCBgbWV0aG9kYCBhbmRcbiAqIGBjaGFpbmluZ0JlaGF2aW9yYCwgb3IgYXMgYSBsYW5ndWFnZSBjaGFpbiwgd2hpY2ggb25seSBleGVjdXRlcyBgY2hhaW5pbmdCZWhhdmlvcmAuXG4gKlxuICogICAgIGV4cGVjdChmb29TdHIpLnRvLmJlLmZvbygnYmFyJyk7XG4gKiAgICAgZXhwZWN0KGZvb1N0cikudG8uYmUuZm9vLmVxdWFsKCdmb28nKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB0byB3aGljaCB0aGUgbWV0aG9kIGlzIGFkZGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiBtZXRob2QgdG8gYWRkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2QgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgYG5hbWVgLCB3aGVuIGNhbGxlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2hhaW5pbmdCZWhhdmlvciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZXZlcnkgdGltZSB0aGUgcHJvcGVydHkgaXMgYWNjZXNzZWRcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZENoYWluYWJsZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZENoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcikge1xuICBpZiAodHlwZW9mIGNoYWluaW5nQmVoYXZpb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGFpbmluZ0JlaGF2aW9yID0gZnVuY3Rpb24gKCkgeyB9O1xuICB9XG5cbiAgdmFyIGNoYWluYWJsZUJlaGF2aW9yID0ge1xuICAgICAgbWV0aG9kOiBtZXRob2RcbiAgICAsIGNoYWluaW5nQmVoYXZpb3I6IGNoYWluaW5nQmVoYXZpb3JcbiAgfTtcblxuICAvLyBzYXZlIHRoZSBtZXRob2RzIHNvIHdlIGNhbiBvdmVyd3JpdGUgdGhlbSBsYXRlciwgaWYgd2UgbmVlZCB0by5cbiAgaWYgKCFjdHguX19tZXRob2RzKSB7XG4gICAgY3R4Ll9fbWV0aG9kcyA9IHt9O1xuICB9XG4gIGN0eC5fX21ldGhvZHNbbmFtZV0gPSBjaGFpbmFibGVCZWhhdmlvcjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBuYW1lLFxuICAgIHsgZ2V0OiBmdW5jdGlvbiBjaGFpbmFibGVNZXRob2RHZXR0ZXIoKSB7XG4gICAgICAgIGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3IuY2FsbCh0aGlzKTtcblxuICAgICAgICB2YXIgY2hhaW5hYmxlTWV0aG9kV3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgY2hhaW5hYmxlTWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXNcbiAgICAgICAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgLy8gZnJhbWVzIGZyb20gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgICAvLyB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIHRoaXMgYXNzZXJ0aW9uIGlzIGJlaW5nXG4gICAgICAgICAgLy8gaW52b2tlZCBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhpcyBjYXNlLCB0aGUgYHNzZmlgXG4gICAgICAgICAgLy8gZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IG92ZXJ3cml0aW5nIGEgY2hhaW5hYmxlIG1ldGhvZCBtZXJlbHkgcmVwbGFjZXMgdGhlIHNhdmVkXG4gICAgICAgICAgLy8gbWV0aG9kcyBpbiBgY3R4Ll9fbWV0aG9kc2AgaW5zdGVhZCBvZiBjb21wbGV0ZWx5IHJlcGxhY2luZyB0aGVcbiAgICAgICAgICAvLyBvdmVyd3JpdHRlbiBhc3NlcnRpb24uIFRoZXJlZm9yZSwgYW4gb3ZlcndyaXRpbmcgYXNzZXJ0aW9uIHdvbid0XG4gICAgICAgICAgLy8gc2V0IHRoZSBgc3NmaWAgb3IgYGxvY2tTc2ZpYCBmbGFncy5cbiAgICAgICAgICBpZiAoIWZsYWcodGhpcywgJ2xvY2tTc2ZpJykpIHtcbiAgICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVzdWx0ID0gY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgICAgICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGRMZW5ndGhHdWFyZChjaGFpbmFibGVNZXRob2RXcmFwcGVyLCBuYW1lLCB0cnVlKTtcblxuICAgICAgICAvLyBVc2UgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgaWYgYXZhaWxhYmxlXG4gICAgICAgIGlmIChjYW5TZXRQcm90b3R5cGUpIHtcbiAgICAgICAgICAvLyBJbmhlcml0IGFsbCBwcm9wZXJ0aWVzIGZyb20gdGhlIG9iamVjdCBieSByZXBsYWNpbmcgdGhlIGBGdW5jdGlvbmAgcHJvdG90eXBlXG4gICAgICAgICAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgICAgICAgLy8gUmVzdG9yZSB0aGUgYGNhbGxgIGFuZCBgYXBwbHlgIG1ldGhvZHMgZnJvbSBgRnVuY3Rpb25gXG4gICAgICAgICAgcHJvdG90eXBlLmNhbGwgPSBjYWxsO1xuICAgICAgICAgIHByb3RvdHlwZS5hcHBseSA9IGFwcGx5O1xuICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihjaGFpbmFibGVNZXRob2RXcmFwcGVyLCBwcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgcmVkZWZpbmUgYWxsIHByb3BlcnRpZXMgKHNsb3chKVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgYXNzZXJ0ZXJOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCk7XG4gICAgICAgICAgYXNzZXJ0ZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChhc3NlcnRlck5hbWUpIHtcbiAgICAgICAgICAgIGlmIChleGNsdWRlTmFtZXMuaW5kZXhPZihhc3NlcnRlck5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3R4LCBhc3NlcnRlck5hbWUpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIGFzc2VydGVyTmFtZSwgcGQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgICAgcmV0dXJuIHByb3hpZnkoY2hhaW5hYmxlTWV0aG9kV3JhcHBlcik7XG4gICAgICB9XG4gICAgLCBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gb3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QsIGNoYWluaW5nQmVoYXZpb3IpXG4gKlxuICogT3ZlcndpdGVzIGFuIGFscmVhZHkgZXhpc3RpbmcgY2hhaW5hYmxlIG1ldGhvZFxuICogYW5kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgcHJldmlvdXMgZnVuY3Rpb24gb3JcbiAqIHByb3BlcnR5LiAgTXVzdCByZXR1cm4gZnVuY3Rpb25zIHRvIGJlIHVzZWQgZm9yXG4gKiBuYW1lLlxuICpcbiAqICAgICB1dGlscy5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnbGVuZ3RoT2YnLFxuICogICAgICAgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgfVxuICogICAgICwgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgfVxuICogICAgICk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QoJ2ZvbycsIGZuLCBmbik7XG4gKlxuICogVGhlbiBjYW4gYmUgdXNlZCBhcyBhbnkgb3RoZXIgYXNzZXJ0aW9uLlxuICpcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmhhdmUubGVuZ3RoT2YoMyk7XG4gKiAgICAgZXhwZWN0KG15Rm9vKS50by5oYXZlLmxlbmd0aE9mLmFib3ZlKDMpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHdob3NlIG1ldGhvZCAvIHByb3BlcnR5IGlzIHRvIGJlIG92ZXJ3cml0dGVuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiBtZXRob2QgLyBwcm9wZXJ0eSB0byBvdmVyd3JpdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBuYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFpbmluZ0JlaGF2aW9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIHByb3BlcnR5XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBvdmVyd3JpdGVDaGFpbmFibGVNZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvdmVyd3JpdGVDaGFpbmFibGVNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QsIGNoYWluaW5nQmVoYXZpb3IpIHtcbiAgdmFyIGNoYWluYWJsZUJlaGF2aW9yID0gY3R4Ll9fbWV0aG9kc1tuYW1lXTtcblxuICB2YXIgX2NoYWluaW5nQmVoYXZpb3IgPSBjaGFpbmFibGVCZWhhdmlvci5jaGFpbmluZ0JlaGF2aW9yO1xuICBjaGFpbmFibGVCZWhhdmlvci5jaGFpbmluZ0JlaGF2aW9yID0gZnVuY3Rpb24gb3ZlcndyaXRpbmdDaGFpbmFibGVNZXRob2RHZXR0ZXIoKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNoYWluaW5nQmVoYXZpb3IoX2NoYWluaW5nQmVoYXZpb3IpLmNhbGwodGhpcyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgfTtcblxuICB2YXIgX21ldGhvZCA9IGNoYWluYWJsZUJlaGF2aW9yLm1ldGhvZDtcbiAgY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kID0gZnVuY3Rpb24gb3ZlcndyaXRpbmdDaGFpbmFibGVNZXRob2RXcmFwcGVyKCkge1xuICAgIHZhciByZXN1bHQgPSBtZXRob2QoX21ldGhvZCkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGNvbXBhcmVCeUluc3BlY3QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnLi9pbnNwZWN0Jyk7XG5cbi8qKlxuICogIyMjIC5jb21wYXJlQnlJbnNwZWN0KG1peGVkLCBtaXhlZClcbiAqXG4gKiBUbyBiZSB1c2VkIGFzIGEgY29tcGFyZUZ1bmN0aW9uIHdpdGggQXJyYXkucHJvdG90eXBlLnNvcnQuIENvbXBhcmVzIGVsZW1lbnRzXG4gKiB1c2luZyBpbnNwZWN0IGluc3RlYWQgb2YgZGVmYXVsdCBiZWhhdmlvciBvZiB1c2luZyB0b1N0cmluZyBzbyB0aGF0IFN5bWJvbHNcbiAqIGFuZCBvYmplY3RzIHdpdGggaXJyZWd1bGFyL21pc3NpbmcgdG9TdHJpbmcgY2FuIHN0aWxsIGJlIHNvcnRlZCB3aXRob3V0IGFcbiAqIFR5cGVFcnJvci5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBmaXJzdCBlbGVtZW50IHRvIGNvbXBhcmVcbiAqIEBwYXJhbSB7TWl4ZWR9IHNlY29uZCBlbGVtZW50IHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IC0xIGlmICdhJyBzaG91bGQgY29tZSBiZWZvcmUgJ2InOyBvdGhlcndpc2UgMSBcbiAqIEBuYW1lIGNvbXBhcmVCeUluc3BlY3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21wYXJlQnlJbnNwZWN0KGEsIGIpIHtcbiAgcmV0dXJuIGluc3BlY3QoYSkgPCBpbnNwZWN0KGIpID8gLTEgOiAxO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzKG9iamVjdClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIGRpcmVjdGx5LW93bmVkIGVudW1lcmFibGUgcHJvcGVydHkgc3ltYm9scyBvZiBhblxuICogb2JqZWN0LiBUaGlzIGZ1bmN0aW9uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbiAqIHJldHVybnMgYm90aCBlbnVtZXJhYmxlIGFuZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzKG9iaikge1xuICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHJldHVybiBbXTtcblxuICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTYgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRhbmNpZXNcbiAqL1xuXG52YXIgZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyA9IHJlcXVpcmUoJy4vZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scycpO1xuXG4vKipcbiAqICMjIyAuZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZGlyZWN0bHktb3duZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYW4gb2JqZWN0LiBUaGlzIGZ1bmN0aW9uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIE9iamVjdC5rZXlzIG9ubHlcbiAqIHJldHVybnMgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcywgbm90IGVudW1lcmFibGUgcHJvcGVydHkgc3ltYm9scy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRPd25FbnVtZXJhYmxlUHJvcGVydGllc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5jb25jYXQoZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyhvYmopKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qICFcbiAqIENoYWkgLSBjaGVja0Vycm9yIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTYgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuY2hlY2tFcnJvclxuICpcbiAqIENoZWNrcyB0aGF0IGFuIGVycm9yIGNvbmZvcm1zIHRvIGEgZ2l2ZW4gc2V0IG9mIGNyaXRlcmlhIGFuZC9vciByZXRyaWV2ZXMgaW5mb3JtYXRpb24gYWJvdXQgaXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG4vKipcbiAqICMjIyAuY29tcGF0aWJsZUluc3RhbmNlKHRocm93biwgZXJyb3JMaWtlKVxuICpcbiAqIENoZWNrcyBpZiB0d28gaW5zdGFuY2VzIGFyZSBjb21wYXRpYmxlIChzdHJpY3QgZXF1YWwpLlxuICogUmV0dXJucyBmYWxzZSBpZiBlcnJvckxpa2UgaXMgbm90IGFuIGluc3RhbmNlIG9mIEVycm9yLCBiZWNhdXNlIGluc3RhbmNlc1xuICogY2FuIG9ubHkgYmUgY29tcGF0aWJsZSBpZiB0aGV5J3JlIGJvdGggZXJyb3IgaW5zdGFuY2VzLlxuICpcbiAqIEBuYW1lIGNvbXBhdGlibGVJbnN0YW5jZVxuICogQHBhcmFtIHtFcnJvcn0gdGhyb3duIGVycm9yXG4gKiBAcGFyYW0ge0Vycm9yfEVycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZSBvYmplY3QgdG8gY29tcGFyZSBhZ2FpbnN0XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNvbXBhdGlibGVJbnN0YW5jZSh0aHJvd24sIGVycm9yTGlrZSkge1xuICByZXR1cm4gZXJyb3JMaWtlIGluc3RhbmNlb2YgRXJyb3IgJiYgdGhyb3duID09PSBlcnJvckxpa2U7XG59XG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlQ29uc3RydWN0b3IodGhyb3duLCBlcnJvckxpa2UpXG4gKlxuICogQ2hlY2tzIGlmIHR3byBjb25zdHJ1Y3RvcnMgYXJlIGNvbXBhdGlibGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiByZWNlaXZlIGVpdGhlciBhbiBlcnJvciBjb25zdHJ1Y3RvciBvclxuICogYW4gZXJyb3IgaW5zdGFuY2UgYXMgdGhlIGBlcnJvckxpa2VgIGFyZ3VtZW50LlxuICogQ29uc3RydWN0b3JzIGFyZSBjb21wYXRpYmxlIGlmIHRoZXkncmUgdGhlIHNhbWUgb3IgaWYgb25lIGlzXG4gKiBhbiBpbnN0YW5jZSBvZiBhbm90aGVyLlxuICpcbiAqIEBuYW1lIGNvbXBhdGlibGVDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtFcnJvcn0gdGhyb3duIGVycm9yXG4gKiBAcGFyYW0ge0Vycm9yfEVycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZSBvYmplY3QgdG8gY29tcGFyZSBhZ2FpbnN0XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNvbXBhdGlibGVDb25zdHJ1Y3Rvcih0aHJvd24sIGVycm9yTGlrZSkge1xuICBpZiAoZXJyb3JMaWtlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAvLyBJZiBgZXJyb3JMaWtlYCBpcyBhbiBpbnN0YW5jZSBvZiBhbnkgZXJyb3Igd2UgY29tcGFyZSB0aGVpciBjb25zdHJ1Y3RvcnNcbiAgICByZXR1cm4gdGhyb3duLmNvbnN0cnVjdG9yID09PSBlcnJvckxpa2UuY29uc3RydWN0b3IgfHwgdGhyb3duIGluc3RhbmNlb2YgZXJyb3JMaWtlLmNvbnN0cnVjdG9yO1xuICB9IGVsc2UgaWYgKGVycm9yTGlrZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBFcnJvciB8fCBlcnJvckxpa2UgPT09IEVycm9yKSB7XG4gICAgLy8gSWYgYGVycm9yTGlrZWAgaXMgYSBjb25zdHJ1Y3RvciB0aGF0IGluaGVyaXRzIGZyb20gRXJyb3IsIHdlIGNvbXBhcmUgYHRocm93bmAgdG8gYGVycm9yTGlrZWAgZGlyZWN0bHlcbiAgICByZXR1cm4gdGhyb3duLmNvbnN0cnVjdG9yID09PSBlcnJvckxpa2UgfHwgdGhyb3duIGluc3RhbmNlb2YgZXJyb3JMaWtlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqICMjIyAuY29tcGF0aWJsZU1lc3NhZ2UodGhyb3duLCBlcnJNYXRjaGVyKVxuICpcbiAqIENoZWNrcyBpZiBhbiBlcnJvcidzIG1lc3NhZ2UgaXMgY29tcGF0aWJsZSB3aXRoIGEgbWF0Y2hlciAoU3RyaW5nIG9yIFJlZ0V4cCkuXG4gKiBJZiB0aGUgbWVzc2FnZSBjb250YWlucyB0aGUgU3RyaW5nIG9yIHBhc3NlcyB0aGUgUmVnRXhwIHRlc3QsXG4gKiBpdCBpcyBjb25zaWRlcmVkIGNvbXBhdGlibGUuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZU1lc3NhZ2VcbiAqIEBwYXJhbSB7RXJyb3J9IHRocm93biBlcnJvclxuICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBlcnJNYXRjaGVyIHRvIGxvb2sgZm9yIGludG8gdGhlIG1lc3NhZ2VcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZU1lc3NhZ2UodGhyb3duLCBlcnJNYXRjaGVyKSB7XG4gIHZhciBjb21wYXJpc29uU3RyaW5nID0gdHlwZW9mIHRocm93biA9PT0gJ3N0cmluZycgPyB0aHJvd24gOiB0aHJvd24ubWVzc2FnZTtcbiAgaWYgKGVyck1hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gZXJyTWF0Y2hlci50ZXN0KGNvbXBhcmlzb25TdHJpbmcpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJNYXRjaGVyID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjb21wYXJpc29uU3RyaW5nLmluZGV4T2YoZXJyTWF0Y2hlcikgIT09IC0xOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1hZ2ljLW51bWJlcnNcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiAjIyMgLmdldEZ1bmN0aW9uTmFtZShjb25zdHJ1Y3RvckZuKVxuICpcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbi5cbiAqIFRoaXMgYWxzbyBpbmNsdWRlcyBhIHBvbHlmaWxsIGZ1bmN0aW9uIGlmIGBjb25zdHJ1Y3RvckZuLm5hbWVgIGlzIG5vdCBkZWZpbmVkLlxuICpcbiAqIEBuYW1lIGdldEZ1bmN0aW9uTmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3JGblxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIGZ1bmN0aW9uTmFtZU1hdGNoID0gL1xccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqW14oPzoqXFwvKV0rXFwqXFwvXFxzKikqKFteXFwoXFwvXSspLztcbmZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShjb25zdHJ1Y3RvckZuKSB7XG4gIHZhciBuYW1lID0gJyc7XG4gIGlmICh0eXBlb2YgY29uc3RydWN0b3JGbi5uYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEhlcmUgd2UgcnVuIGEgcG9seWZpbGwgaWYgY29uc3RydWN0b3JGbi5uYW1lIGlzIG5vdCBkZWZpbmVkXG4gICAgdmFyIG1hdGNoID0gU3RyaW5nKGNvbnN0cnVjdG9yRm4pLm1hdGNoKGZ1bmN0aW9uTmFtZU1hdGNoKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIG5hbWUgPSBtYXRjaFsxXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbmFtZSA9IGNvbnN0cnVjdG9yRm4ubmFtZTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0Q29uc3RydWN0b3JOYW1lKGVycm9yTGlrZSlcbiAqXG4gKiBHZXRzIHRoZSBjb25zdHJ1Y3RvciBuYW1lIGZvciBhbiBFcnJvciBpbnN0YW5jZSBvciBjb25zdHJ1Y3RvciBpdHNlbGYuXG4gKlxuICogQG5hbWUgZ2V0Q29uc3RydWN0b3JOYW1lXG4gKiBAcGFyYW0ge0Vycm9yfEVycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSB7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBlcnJvckxpa2U7XG4gIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGNvbnN0cnVjdG9yTmFtZSA9IGdldEZ1bmN0aW9uTmFtZShlcnJvckxpa2UuY29uc3RydWN0b3IpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvckxpa2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBJZiBgZXJyYCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRXJyb3IgaXQgaXMgYW4gZXJyb3IgY29uc3RydWN0b3IgaXRzZWxmIG9yIGFub3RoZXIgZnVuY3Rpb24uXG4gICAgLy8gSWYgd2UndmUgZ290IGEgY29tbW9uIGZ1bmN0aW9uIHdlIGdldCBpdHMgbmFtZSwgb3RoZXJ3aXNlIHdlIG1heSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZVxuICAgIC8vIG9mIHRoZSBlcnJvciBqdXN0IGluIGNhc2UgaXQncyBhIHBvb3JseS1jb25zdHJ1Y3RlZCBlcnJvci4gUGxlYXNlIHNlZSBjaGFpanMvY2hhaS9pc3N1ZXMvNDUgdG8ga25vdyBtb3JlLlxuICAgIGNvbnN0cnVjdG9yTmFtZSA9IGdldEZ1bmN0aW9uTmFtZShlcnJvckxpa2UpLnRyaW0oKSB8fFxuICAgICAgICBnZXRGdW5jdGlvbk5hbWUobmV3IGVycm9yTGlrZSgpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIH1cblxuICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0TWVzc2FnZShlcnJvckxpa2UpXG4gKlxuICogR2V0cyB0aGUgZXJyb3IgbWVzc2FnZSBmcm9tIGFuIGVycm9yLlxuICogSWYgYGVycmAgaXMgYSBTdHJpbmcgaXRzZWxmLCB3ZSByZXR1cm4gaXQuXG4gKiBJZiB0aGUgZXJyb3IgaGFzIG5vIG1lc3NhZ2UsIHdlIHJldHVybiBhbiBlbXB0eSBzdHJpbmcuXG4gKlxuICogQG5hbWUgZ2V0TWVzc2FnZVxuICogQHBhcmFtIHtFcnJvcnxTdHJpbmd9IGVycm9yTGlrZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRNZXNzYWdlKGVycm9yTGlrZSkge1xuICB2YXIgbXNnID0gJyc7XG4gIGlmIChlcnJvckxpa2UgJiYgZXJyb3JMaWtlLm1lc3NhZ2UpIHtcbiAgICBtc2cgPSBlcnJvckxpa2UubWVzc2FnZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXJyb3JMaWtlID09PSAnc3RyaW5nJykge1xuICAgIG1zZyA9IGVycm9yTGlrZTtcbiAgfVxuXG4gIHJldHVybiBtc2c7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wYXRpYmxlSW5zdGFuY2U6IGNvbXBhdGlibGVJbnN0YW5jZSxcbiAgY29tcGF0aWJsZUNvbnN0cnVjdG9yOiBjb21wYXRpYmxlQ29uc3RydWN0b3IsXG4gIGNvbXBhdGlibGVNZXNzYWdlOiBjb21wYXRpYmxlTWVzc2FnZSxcbiAgZ2V0TWVzc2FnZTogZ2V0TWVzc2FnZSxcbiAgZ2V0Q29uc3RydWN0b3JOYW1lOiBnZXRDb25zdHJ1Y3Rvck5hbWUsXG59O1xuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBnZXRQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXRQcm9wZXJ0aWVzJyk7XG52YXIgaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG5cbi8qIVxuICogQ2hhaSAtIHByb3hpZnkgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5wcm94aWZ5KG9iamVjdClcbiAqXG4gKiBSZXR1cm4gYSBwcm94eSBvZiBnaXZlbiBvYmplY3QgdGhhdCB0aHJvd3MgYW4gZXJyb3Igd2hlbiBhIG5vbi1leGlzdGVudFxuICogcHJvcGVydHkgaXMgcmVhZC4gQnkgZGVmYXVsdCwgdGhlIHJvb3QgY2F1c2UgaXMgYXNzdW1lZCB0byBiZSBhIG1pc3NwZWxsZWRcbiAqIHByb3BlcnR5LCBhbmQgdGh1cyBhbiBhdHRlbXB0IGlzIG1hZGUgdG8gb2ZmZXIgYSByZWFzb25hYmxlIHN1Z2dlc3Rpb24gZnJvbVxuICogdGhlIGxpc3Qgb2YgZXhpc3RpbmcgcHJvcGVydGllcy4gSG93ZXZlciwgaWYgYSBub25DaGFpbmFibGVNZXRob2ROYW1lIGlzXG4gKiBwcm92aWRlZCwgdGhlbiB0aGUgcm9vdCBjYXVzZSBpcyBpbnN0ZWFkIGEgZmFpbHVyZSB0byBpbnZva2UgYSBub24tY2hhaW5hYmxlXG4gKiBtZXRob2QgcHJpb3IgdG8gcmVhZGluZyB0aGUgbm9uLWV4aXN0ZW50IHByb3BlcnR5LlxuICogXG4gKiBJZiBwcm94aWVzIGFyZSB1bnN1cHBvcnRlZCBvciBkaXNhYmxlZCB2aWEgdGhlIHVzZXIncyBDaGFpIGNvbmZpZywgdGhlblxuICogcmV0dXJuIG9iamVjdCB3aXRob3V0IG1vZGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgcHJveGlmeVxuICovXG5cbnZhciBidWlsdGlucyA9IFsnX19mbGFncycsICdfX21ldGhvZHMnLCAnX29iaicsICdhc3NlcnQnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcm94aWZ5KG9iaiwgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSkge1xuICBpZiAoIWlzUHJveHlFbmFibGVkKCkpIHJldHVybiBvYmo7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShvYmosIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIHByb3h5R2V0dGVyKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgIC8vIFRoaXMgY2hlY2sgaXMgaGVyZSBiZWNhdXNlIHdlIHNob3VsZCBub3QgdGhyb3cgZXJyb3JzIG9uIFN5bWJvbCBwcm9wZXJ0aWVzXG4gICAgICAvLyBzdWNoIGFzIGBTeW1ib2wudG9TdHJpbmdUYWdgLlxuICAgICAgLy8gVGhlIHZhbHVlcyBmb3Igd2hpY2ggYW4gZXJyb3Igc2hvdWxkIGJlIHRocm93biBjYW4gYmUgY29uZmlndXJlZCB1c2luZ1xuICAgICAgLy8gdGhlIGBjb25maWcucHJveHlFeGNsdWRlZEtleXNgIHNldHRpbmcuXG4gICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgIGNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5cy5pbmRleE9mKHByb3BlcnR5KSA9PT0gLTEgJiZcbiAgICAgICAgICAhUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgLy8gU3BlY2lhbCBtZXNzYWdlIGZvciBpbnZhbGlkIHByb3BlcnR5IGFjY2VzcyBvZiBub24tY2hhaW5hYmxlIG1ldGhvZHMuXG4gICAgICAgIGlmIChub25DaGFpbmFibGVNZXRob2ROYW1lKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUgKyAnLicgK1xuICAgICAgICAgICAgcHJvcGVydHkgKyAnLiBTZWUgZG9jcyBmb3IgcHJvcGVyIHVzYWdlIG9mIFwiJyArXG4gICAgICAgICAgICBub25DaGFpbmFibGVNZXRob2ROYW1lICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9yZGVyZWRQcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyh0YXJnZXQpLmZpbHRlcihmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICAgIHJldHVybiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiZcbiAgICAgICAgICAgIGJ1aWx0aW5zLmluZGV4T2YocHJvcGVydHkpID09PSAtMTtcbiAgICAgICAgfSkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmluZ0Rpc3RhbmNlKHByb3BlcnR5LCBhKSAtIHN0cmluZ0Rpc3RhbmNlKHByb3BlcnR5LCBiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9yZGVyZWRQcm9wZXJ0aWVzLmxlbmd0aCAmJlxuICAgICAgICAgICAgc3RyaW5nRGlzdGFuY2Uob3JkZXJlZFByb3BlcnRpZXNbMF0sIHByb3BlcnR5KSA8IDQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgcmVhc29uYWJseSBjbG9zZSB0byBhbiBleGlzdGluZyBDaGFpIHByb3BlcnR5LFxuICAgICAgICAgIC8vIHN1Z2dlc3QgdGhhdCBwcm9wZXJ0eSB0byB0aGUgdXNlci5cbiAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgcHJvcGVydHkgK1xuICAgICAgICAgICAgJy4gRGlkIHlvdSBtZWFuIFwiJyArIG9yZGVyZWRQcm9wZXJ0aWVzWzBdICsgJ1wiPycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBwcm9wZXJ0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXNlIHRoaXMgcHJveHkgZ2V0dGVyIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIGZyYW1lcyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uIEZvciBwcm9wZXJ0eVxuICAgICAgLy8gYXNzZXJ0aW9ucywgdGhpcyBwcmV2ZW50cyB0aGUgcHJveHkgZ2V0dGVyIGZyb20gc2hvd2luZyB1cCBpbiB0aGUgc3RhY2tcbiAgICAgIC8vIHRyYWNlIHNpbmNlIGl0J3MgaW52b2tlZCBiZWZvcmUgdGhlIHByb3BlcnR5IGdldHRlci4gRm9yIG1ldGhvZCBhbmRcbiAgICAgIC8vIGNoYWluYWJsZSBtZXRob2QgYXNzZXJ0aW9ucywgdGhpcyBmbGFnIHdpbGwgZW5kIHVwIGdldHRpbmcgY2hhbmdlZCB0b1xuICAgICAgLy8gdGhlIG1ldGhvZCB3cmFwcGVyLCB3aGljaCBpcyBnb29kIHNpbmNlIHRoaXMgZnJhbWUgd2lsbCBubyBsb25nZXIgYmUgaW5cbiAgICAgIC8vIHRoZSBzdGFjayBvbmNlIHRoZSBtZXRob2QgaXMgaW52b2tlZC4gTm90ZSB0aGF0IENoYWkgYnVpbHRpbiBhc3NlcnRpb25cbiAgICAgIC8vIHByb3BlcnRpZXMgc3VjaCBhcyBgX19mbGFnc2AgYXJlIHNraXBwZWQgc2luY2UgdGhpcyBpcyBvbmx5IG1lYW50IHRvXG4gICAgICAvLyBjYXB0dXJlIHRoZSBzdGFydGluZyBwb2ludCBvZiBhbiBhc3NlcnRpb24uIFRoaXMgc3RlcCBpcyBhbHNvIHNraXBwZWRcbiAgICAgIC8vIGlmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aHVzIGluZGljYXRpbmcgdGhhdCB0aGlzIGFzc2VydGlvbiBpc1xuICAgICAgLy8gYmVpbmcgY2FsbGVkIGZyb20gd2l0aGluIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGF0IGNhc2UsIHRoZSBgc3NmaWBcbiAgICAgIC8vIGZsYWcgaXMgYWxyZWFkeSBzZXQgdG8gdGhlIG91dGVyIGFzc2VydGlvbidzIHN0YXJ0aW5nIHBvaW50LlxuICAgICAgaWYgKGJ1aWx0aW5zLmluZGV4T2YocHJvcGVydHkpID09PSAtMSAmJiAhZmxhZyh0YXJnZXQsICdsb2NrU3NmaScpKSB7XG4gICAgICAgIGZsYWcodGFyZ2V0LCAnc3NmaScsIHByb3h5R2V0dGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqICMgc3RyaW5nRGlzdGFuY2Uoc3RyQSwgc3RyQilcbiAqIFJldHVybiB0aGUgTGV2ZW5zaHRlaW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gc3RyaW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJBXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyQlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgc3RyaW5nIGRpc3RhbmNlIGJldHdlZW4gc3RyQSBhbmQgc3RyQlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5nRGlzdGFuY2Uoc3RyQSwgc3RyQiwgbWVtbykge1xuICBpZiAoIW1lbW8pIHtcbiAgICAvLyBgbWVtb2AgaXMgYSB0d28tZGltZW5zaW9uYWwgYXJyYXkgY29udGFpbmluZyBhIGNhY2hlIG9mIGRpc3RhbmNlc1xuICAgIC8vIG1lbW9baV1bal0gaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gc3RyQS5zbGljZSgwLCBpKSBhbmRcbiAgICAvLyBzdHJCLnNsaWNlKDAsIGopLlxuICAgIG1lbW8gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBzdHJBLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtZW1vW2ldID0gW107XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtZW1vW3N0ckEubGVuZ3RoXSB8fCAhbWVtb1tzdHJBLmxlbmd0aF1bc3RyQi5sZW5ndGhdKSB7XG4gICAgaWYgKHN0ckEubGVuZ3RoID09PSAwIHx8IHN0ckIubGVuZ3RoID09PSAwKSB7XG4gICAgICBtZW1vW3N0ckEubGVuZ3RoXVtzdHJCLmxlbmd0aF0gPSBNYXRoLm1heChzdHJBLmxlbmd0aCwgc3RyQi5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW1vW3N0ckEubGVuZ3RoXVtzdHJCLmxlbmd0aF0gPSBNYXRoLm1pbihcbiAgICAgICAgc3RyaW5nRGlzdGFuY2Uoc3RyQS5zbGljZSgwLCAtMSksIHN0ckIsIG1lbW8pICsgMSxcbiAgICAgICAgc3RyaW5nRGlzdGFuY2Uoc3RyQSwgc3RyQi5zbGljZSgwLCAtMSksIG1lbW8pICsgMSxcbiAgICAgICAgc3RyaW5nRGlzdGFuY2Uoc3RyQS5zbGljZSgwLCAtMSksIHN0ckIuc2xpY2UoMCwgLTEpLCBtZW1vKSArXG4gICAgICAgICAgKHN0ckEuc2xpY2UoLTEpID09PSBzdHJCLnNsaWNlKC0xKSA/IDAgOiAxKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWVtb1tzdHJBLmxlbmd0aF1bc3RyQi5sZW5ndGhdO1xufVxuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG52YXIgZm5MZW5ndGhEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7fSwgJ2xlbmd0aCcpO1xuXG4vKiFcbiAqIENoYWkgLSBhZGRMZW5ndGhHdWFyZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmFkZExlbmd0aEd1YXJkKGZuLCBhc3NlcnRpb25OYW1lLCBpc0NoYWluYWJsZSlcbiAqXG4gKiBEZWZpbmUgYGxlbmd0aGAgYXMgYSBnZXR0ZXIgb24gdGhlIGdpdmVuIHVuaW52b2tlZCBtZXRob2QgYXNzZXJ0aW9uLiBUaGVcbiAqIGdldHRlciBhY3RzIGFzIGEgZ3VhcmQgYWdhaW5zdCBjaGFpbmluZyBgbGVuZ3RoYCBkaXJlY3RseSBvZmYgb2YgYW4gdW5pbnZva2VkXG4gKiBtZXRob2QgYXNzZXJ0aW9uLCB3aGljaCBpcyBhIHByb2JsZW0gYmVjYXVzZSBpdCByZWZlcmVuY2VzIGBmdW5jdGlvbmAnc1xuICogYnVpbHQtaW4gYGxlbmd0aGAgcHJvcGVydHkgaW5zdGVhZCBvZiBDaGFpJ3MgYGxlbmd0aGAgYXNzZXJ0aW9uLiBXaGVuIHRoZVxuICogZ2V0dGVyIGNhdGNoZXMgdGhlIHVzZXIgbWFraW5nIHRoaXMgbWlzdGFrZSwgaXQgdGhyb3dzIGFuIGVycm9yIHdpdGggYVxuICogaGVscGZ1bCBtZXNzYWdlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gd2F5cyBpbiB3aGljaCB0aGlzIG1pc3Rha2UgY2FuIGJlIG1hZGUuIFRoZSBmaXJzdCB3YXkgaXMgYnlcbiAqIGNoYWluaW5nIHRoZSBgbGVuZ3RoYCBhc3NlcnRpb24gZGlyZWN0bHkgb2ZmIG9mIGFuIHVuaW52b2tlZCBjaGFpbmFibGVcbiAqIG1ldGhvZC4gSW4gdGhpcyBjYXNlLCBDaGFpIHN1Z2dlc3RzIHRoYXQgdGhlIHVzZXIgdXNlIGBsZW5ndGhPZmAgaW5zdGVhZC4gVGhlXG4gKiBzZWNvbmQgd2F5IGlzIGJ5IGNoYWluaW5nIHRoZSBgbGVuZ3RoYCBhc3NlcnRpb24gZGlyZWN0bHkgb2ZmIG9mIGFuIHVuaW52b2tlZFxuICogbm9uLWNoYWluYWJsZSBtZXRob2QuIE5vbi1jaGFpbmFibGUgbWV0aG9kcyBtdXN0IGJlIGludm9rZWQgcHJpb3IgdG9cbiAqIGNoYWluaW5nLiBJbiB0aGlzIGNhc2UsIENoYWkgc3VnZ2VzdHMgdGhhdCB0aGUgdXNlciBjb25zdWx0IHRoZSBkb2NzIGZvciB0aGVcbiAqIGdpdmVuIGFzc2VydGlvbi5cbiAqXG4gKiBJZiB0aGUgYGxlbmd0aGAgcHJvcGVydHkgb2YgZnVuY3Rpb25zIGlzIHVuY29uZmlndXJhYmxlLCB0aGVuIHJldHVybiBgZm5gXG4gKiB3aXRob3V0IG1vZGlmaWNhdGlvbi5cbiAqXG4gKiBOb3RlIHRoYXQgaW4gRVM2LCB0aGUgZnVuY3Rpb24ncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBjb25maWd1cmFibGUsIHNvIG9uY2VcbiAqIHN1cHBvcnQgZm9yIGxlZ2FjeSBlbnZpcm9ubWVudHMgaXMgZHJvcHBlZCwgQ2hhaSdzIGBsZW5ndGhgIHByb3BlcnR5IGNhblxuICogcmVwbGFjZSB0aGUgYnVpbHQtaW4gZnVuY3Rpb24ncyBgbGVuZ3RoYCBwcm9wZXJ0eSwgYW5kIHRoaXMgbGVuZ3RoIGd1YXJkIHdpbGxcbiAqIG5vIGxvbmdlciBiZSBuZWNlc3NhcnkuIEluIHRoZSBtZWFuIHRpbWUsIG1haW50YWluaW5nIGNvbnNpc3RlbmN5IGFjcm9zcyBhbGxcbiAqIGVudmlyb25tZW50cyBpcyB0aGUgcHJpb3JpdHkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7U3RyaW5nfSBhc3NlcnRpb25OYW1lXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQ2hhaW5hYmxlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBhZGRMZW5ndGhHdWFyZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkTGVuZ3RoR3VhcmQgKGZuLCBhc3NlcnRpb25OYW1lLCBpc0NoYWluYWJsZSkge1xuICBpZiAoIWZuTGVuZ3RoRGVzYy5jb25maWd1cmFibGUpIHJldHVybiBmbjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdsZW5ndGgnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNDaGFpbmFibGUpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIGFzc2VydGlvbk5hbWUgKyAnLmxlbmd0aC4gRHVlJyArXG4gICAgICAgICAgJyB0byBhIGNvbXBhdGliaWxpdHkgaXNzdWUsIFwibGVuZ3RoXCIgY2Fubm90IGRpcmVjdGx5IGZvbGxvdyBcIicgK1xuICAgICAgICAgIGFzc2VydGlvbk5hbWUgKyAnXCIuIFVzZSBcIicgKyBhc3NlcnRpb25OYW1lICsgJy5sZW5ndGhPZlwiIGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBhc3NlcnRpb25OYW1lICsgJy5sZW5ndGguIFNlZScgK1xuICAgICAgICAnIGRvY3MgZm9yIHByb3BlciB1c2FnZSBvZiBcIicgKyBhc3NlcnRpb25OYW1lICsgJ1wiLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZuO1xufTtcbiIsInZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcblxuLyohXG4gKiBDaGFpIC0gaXNQcm94eUVuYWJsZWQgaGVscGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmlzUHJveHlFbmFibGVkKClcbiAqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgQ2hhaSdzIHByb3h5IHByb3RlY3Rpb24gZmVhdHVyZSBpcyBlbmFibGVkLiBJZlxuICogcHJveGllcyBhcmUgdW5zdXBwb3J0ZWQgb3IgZGlzYWJsZWQgdmlhIHRoZSB1c2VyJ3MgQ2hhaSBjb25maWcsIHRoZW4gcmV0dXJuXG4gKiBmYWxzZS4gT3RoZXJ3aXNlLCByZXR1cm4gdHJ1ZS5cbiAqXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBpc1Byb3h5RW5hYmxlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcm94eUVuYWJsZWQoKSB7XG4gIHJldHVybiBjb25maWcudXNlUHJveHkgJiYgXG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJztcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBpc05hTiB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE1IFNha3RoaXByaXlhbiBWYWlyYW1hbmkgPHRoZWNoYXJnaW5ndm9sY2Fub0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaXNOYU4odmFsdWUpXG4gKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBOYU4gb3Igbm90LlxuICpcbiAqICAgICB1dGlscy5pc05hTihOYU4pOyAvLyB0cnVlXG4gKlxuICogQHBhcmFtIHtWYWx1ZX0gVGhlIHZhbHVlIHdoaWNoIGhhcyB0byBiZSBjaGVja2VkIGlmIGl0IGlzIE5hTlxuICogQG5hbWUgaXNOYU5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gIC8vIFJlZmVyIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc25hbi1udW1iZXJcbiAgLy8gc2VjdGlvbidzIE5PVEUuXG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8vIElmIEVDTUFTY3JpcHQgNidzIE51bWJlci5pc05hTiBpcyBwcmVzZW50LCBwcmVmZXIgdGhhdC5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGlzTmFOO1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0UHJvcGVydGllcyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldFByb3BlcnRpZXMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LCBlbnVtZXJhYmxlIG9yIG5vdCxcbiAqIGluaGVyaXRlZCBvciBub3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybnMge0FycmF5fVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0UHJvcGVydGllc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFByb3BlcnRpZXMob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpO1xuXG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgaWYgKHJlc3VsdC5pbmRleE9mKHByb3BlcnR5KSA9PT0gLTEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHByb3BlcnR5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcbiAgd2hpbGUgKHByb3RvICE9PSBudWxsKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdG8pLmZvckVhY2goYWRkUHJvcGVydHkpO1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRFbnVtZXJhYmxlUHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdCxcbiAqIGluaGVyaXRlZCBvciBub3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybnMge0FycmF5fVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0RW51bWVyYWJsZVByb3BlcnRpZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyhvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgIHJlc3VsdC5wdXNoKG5hbWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19