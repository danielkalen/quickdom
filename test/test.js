(function (require, global) {
require = (function (cache, modules, cx) {
return function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : ((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
};
})({}, {
0: function (require, module, exports) {
var chai, checkChildStructure, creator, elementSuffix, expect, i, j, len, len1, nonElementSuffix, ref, ref1, ref2, ref3, ref4, restartSandbox, sandbox, slice = [].slice;
this.dimensions = require(1);
this.Dom = this.DOM = window.quickdom;
mocha.setup('tdd');
mocha.slow(400);
mocha.timeout(12000);
if (!window.location.hostname) {
mocha.bail();
}
chai = require(2);
chai.use(require(3));
chai.config.truncateThreshold = 1e3;
expect = chai.expect;
sandbox = null;
restartSandbox = function () {
if (sandbox) {
sandbox.parentElement.removeChild(sandbox);
}
sandbox = document.createElement('div');
sandbox.id = 'sandbox';
sandbox.setAttribute('style', 'border:1px solid; padding:20px; box-sizing:border-box');
return document.body.appendChild(sandbox);
};
checkChildStructure = function (main) {
return function () {
var child, children, i, index, len;
children = 1 <= arguments.length ? slice.call(arguments, 0) : [];
expect(main.children.length).to.equal(children.length);
for ((index = i = 0, len = children.length); i < len; index = ++i) {
child = children[index];
expect(main.children[index]).to.equal(child);
expect(child.el.parentNode).to.equal(main.el);
expect(child.parent).to.equal(main);
}
};
};
suite("QuickDom", function () {
setup(restartSandbox);
test("Version Property", function () {
var packageVersion;
packageVersion = "1.0.88";
return expect(Dom.version).to.equal(packageVersion);
});
suite("Element Creation", function () {
test("Basic Creation", function () {
var div;
div = Dom('div');
expect(typeof div).to.equal('object');
expect(typeof div.el).to.equal('object');
expect(div.el).to.be.instanceOf(window.HTMLDivElement);
expect(div.parent).to.be.undefined;
return expect(div.children.length).to.equal(0);
});
test("Shortcuts", function () {
var i, len, type, types;
expect(Dom.a().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.link().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.anchor().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.div().el.constructor).to.equal(Dom('div').el.constructor);
expect(Dom.text().el.constructor).to.equal(Dom('text').el.constructor);
expect(Dom.span().el.constructor).to.equal(Dom('span').el.constructor);
expect(Dom.h4().el.constructor).to.equal(Dom('h4').el.constructor);
expect(Dom.header().el.constructor).to.equal(Dom('header').el.constructor);
expect(Dom.footer().el.constructor).to.equal(Dom('footer').el.constructor);
expect(Dom.section().el.constructor).to.equal(Dom('section').el.constructor);
expect(Dom.button().el.constructor).to.equal(Dom('button').el.constructor);
expect(Dom.input().el.constructor).to.equal(Dom('input').el.constructor);
types = ['a', 'div', 'text', 'span', 'h4', 'header', 'footer', 'section', 'button', 'input'];
for ((i = 0, len = types.length); i < len; i++) {
type = types[i];
expect(Dom[type]().el.constructor.name).not.to.contain('Unknown');
}
});
test("Basic options", function () {
var A, B, C, D, E, F, G, H, I, J, obj;
A = Dom.div({
"class": 'abc-123',
props: {
'abc': 123,
'def': 456
}
});
B = Dom.div({
id: 'B',
className: 'abc-123',
attrs: {
'data-abc': 123,
'data-def': 456
}
});
C = Dom.input({
type: 'text',
name: 'abc',
value: 'hello'
});
D = Dom.input({
type: 'checkbox',
checked: true
});
E = Dom.option({
name: 'abc',
value: 'hello',
selected: true
});
F = Dom.link({
href: 'https://google.com/'
});
G = Dom.anchor({
url: 'https://google.com/'
});
H = Dom.text('Some text');
I = Dom.img({
src: 'https://google.com/'
});
J = Dom.div({
relatedInstance: obj = {
a: 1
}
});
expect(A.el.className).to.equal('abc-123');
expect(A.el.abc).to.equal(123);
expect(A.el.def).to.equal(456);
expect(B.el.className).to.equal('abc-123');
expect(B.el.id).to.equal('B');
expect(B.el.getAttribute('data-abc')).to.equal('123');
expect(B.el.getAttribute('data-def')).to.equal('456');
if (B.el.dataset) {
expect(B.el.dataset.abc).to.equal('123');
}
expect(C.el.type).to.equal('text');
expect(C.el.name).to.equal('abc');
expect(C.el.value).to.equal('hello');
expect(D.el.checked).to.equal(true);
expect(E.el.name).to.equal('abc');
expect(E.el.selected).to.equal(true);
expect(F.el.href).to.equal('https://google.com/');
expect(G.el.href).to.equal('https://google.com/');
expect(H.el.nodeType).to.equal(3);
expect(H.el.textContent).to.equal('Some text');
expect(I.el.src).to.equal('https://google.com/');
expect(J.related).to.equal(obj);
return expect(J.options.related).to.equal(obj);
});
test("Creation w/ children", function () {
var A, B;
A = Dom.div(null, 'Some text');
B = Dom.div(null, Dom.span(), 'Some text', Dom.span());
expect(A.el.childNodes.length).to.equal(1);
expect(A.el.children.length).to.equal(0);
expect(A.el.childNodes[0].nodeType).to.equal(3);
expect(A.el.childNodes[0].textContent).to.equal('Some text');
expect(A.children.length).to.equal(1);
expect(B.el.childNodes.length).to.equal(3);
expect(B.el.children.length).to.equal(2);
expect(B.el.childNodes[0].nodeType).to.equal(1);
expect(B.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(B.el.childNodes[1].nodeType).to.equal(3);
expect(B.el.childNodes[1].textContent).to.equal('Some text');
expect(B.el.childNodes[2].nodeType).to.equal(1);
expect(B.el.childNodes[2].nodeName.toLowerCase()).to.equal('span');
return expect(B.children.length).to.equal(3);
});
test("Array syntax", function () {
var section;
section = Dom(['section', {
style: {
display: 'inline'
}
}, ['div', null, 'childA'], ['span', null, ['strong', null, 'childB']], ['div', null, 'childC', ['span', null, 'childC_1'], ['span', null, 'childC_2']]]).appendTo(sandbox);
expect(section).not.to.equal(void 0);
expect(section.raw).to.have.style('display', 'inline');
expect(section.children.length).to.equal(3);
expect(section.children[0].children.length).to.equal(1);
expect(section.children[1].children.length).to.equal(1);
expect(section.children[2].children.length).to.equal(3);
expect(section.children[2].children[1].children.length).to.equal(1);
expect(section.children[2].children[2].children.length).to.equal(1);
expect(section.children[0].text).to.equal('childA');
expect(section.children[1].text).to.equal('childB');
expect(section.children[2].text).to.equal('childCchildC_1childC_2');
expect(section.children[2].children[1].text).to.equal('childC_1');
return expect(section.children[2].children[2].text).to.equal('childC_2');
});
test("Existing Element", function () {
var A, B, C, divRaw;
divRaw = document.createElement('div');
A = Dom(divRaw);
B = Dom(divRaw);
C = Dom(A);
expect(A.el).to.equal(divRaw);
expect(B.el).to.equal(divRaw);
expect(C.el).to.equal(divRaw);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(divRaw._quickElement);
});
test("Existing Element w/ Options", function () {
var div, divRaw;
divRaw = document.createElement('div');
divRaw.id = 'A';
div = Dom(divRaw, {
id: 'B',
"class": 'abc-123'
});
expect(divRaw.id).to.equal('B');
expect(divRaw.className).to.equal('abc-123');
div = Dom(div, {
id: 'C',
"class": 'def-456'
});
expect(divRaw.id).to.equal('C');
return expect(divRaw.className).to.equal('def-456');
});
test("Existing Element from array-like objects", function () {
var A, B, C, parent, rawA, rawB, rawC;
rawA = document.createElement('div');
rawB = document.createElement('div');
rawC = document.createElement('div');
parent = document.createElement('section');
parent.appendChild(rawA);
parent.appendChild(rawB);
parent.appendChild(rawC);
A = Dom([rawA, rawB, rawC]);
B = Dom(parent.querySelectorAll('div'));
C = Dom(B);
expect(A.el).to.equal(rawA);
expect(B.el).to.equal(rawA);
expect(C.el).to.equal(rawA);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(rawA._quickElement);
});
test("Document node", function () {
var doc;
doc = Dom(document);
expect(doc).not.to.be.undefined;
expect(doc.raw).to.equal(document);
expect(doc.parent).to.equal(void 0);
expect(doc.children.length).to.equal(1);
expect(Dom(sandbox).parents).not.to.contain(doc);
return expect(Dom(sandbox).parents).to.contain(doc.children[0]);
});
test("Window object", function () {
var win;
win = Dom(window);
expect(win).not.to.be.undefined;
expect(win.raw === window).to.be["true"];
expect(win.parent).to.equal(void 0);
expect(win.children).to.equal(void 0);
expect(win.append).to.equal(void 0);
expect(win.html).to.equal(void 0);
expect(win.style).to.equal(void 0);
return expect(Dom(sandbox).parents).not.to.contain(win);
});
test("Creation w/ styling", function () {
var computedStyle, div;
div = Dom.div({
style: {
'width': '10px',
'height': 15,
'lameo': '19px',
'background-color': 'blue',
'backgroundSize': 'cover'
}
});
sandbox.appendChild(div.el);
computedStyle = getComputedStyle(div.el);
expect(div.style.lameo).to.equal(void 0);
expect(computedStyle.lameo).to.equal(void 0);
expect(computedStyle.width).to.equal('10px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.backgroundColor).not.to.equal('');
return expect(computedStyle.backgroundSize).to.equal('cover');
});
test("SVG elements can be created via a '*' in the element's type string", function () {
var regDiv, svgBad, svgDiv, svgGood, svgPolyBad, svgPolyGood;
svgBad = Dom('svg').el;
svgGood = Dom('*svg').el;
svgPolyBad = Dom('polyline').el;
svgPolyGood = Dom('*polyline').el;
svgDiv = Dom('*div').el;
regDiv = Dom('div').el;
expect(svgBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgPolyBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgGood).to.be.instanceOf(SVGSVGElement);
expect(svgPolyGood).to.be.instanceOf(SVGPolylineElement);
return expect(svgDiv.constructor).not.to.equal(regDiv.constructor);
});
test("QuickDom.html() accepts an html string which would be parsed and converted into a QuickBatch instance", function () {
var htmlString;
htmlString = "<div>firstChildText</div><span>secondChildText</span> textNode <strong>abc123</strong>";
window.batch = Dom.html(htmlString);
expect(typeof batch).to.equal('object');
expect(batch.constructor.name).to.equal('QuickBatch');
expect(batch.elements.length).to.equal(4);
expect(batch.elements[0].type).to.equal('div');
expect(batch.elements[1].type).to.equal('span');
expect(batch.elements[2].type).to.equal('text');
expect(batch.elements[3].type).to.equal('strong');
expect(batch.elements[0].text).to.equal('firstChildText');
expect(batch.elements[1].text).to.equal('secondChildText');
expect(batch.elements[2].text).to.include('textNode');
return expect(batch.elements[3].text).to.equal('abc123');
});
test("Method/Property aliases", function () {
var div;
div = Dom('div');
expect(div.raw).to.equal(div.el);
expect(div[0]).to.equal(div.el);
expect(div.css).to.equal(div.style);
expect(div.replaceWith).to.equal(div.replace);
expect(div.removeListener).to.equal(div.off);
return expect(div.removeListener('eventA'));
});
return test("user-defined methdods/getters/setters", function () {
var divA, divB;
divA = Dom.div();
divB = Dom.div({
methods: {
scrollTop: {
get: function () {
return this.raw.scrollTop;
}
},
weight: {
get: function () {
return this.raw.weight;
}
},
value: {
get: function () {
return this.raw.value;
},
set: function (value) {
return this.raw.value = value;
}
},
name: true,
bigIndex: function () {
return this.index * 10;
}
}
});
sandbox.append(divA);
sandbox.append(divB);
divA.raw.value = divB.raw.value = 'abc';
expect(typeof divA.scrollTop).to.equal('undefined');
expect(typeof divB.scrollTop).to.equal('number');
expect(typeof divA.value).to.equal('undefined');
expect(typeof divB.value).to.equal('string');
expect(typeof divA.name).to.equal('undefined');
expect(typeof divB.name).to.equal('undefined');
expect(typeof divA.bigIndex).to.equal('undefined');
expect(typeof divB.bigIndex).to.equal('function');
expect(divB.scrollTop).to.equal(divB.raw.scrollTop);
divB.raw.weight = '1';
expect(divB.weight).to.equal('1');
divB.weight = '2';
expect(divB.weight).to.equal('1');
expect(divB.value).to.equal('abc');
divB.value = '123';
expect(divB.value).to.equal('123');
return expect(divB.bigIndex()).to.equal(divB.index * 10);
});
});
suite("Events", function () {
test("Events can be listened to via the .on method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myClick', function (event) {
expect(typeof event).to.equal('object');
expect(event.type).to.equal('myClick');
return emitCountA++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
div.on('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(1);
expect(emitCountA).to.equal(3);
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(2);
return expect(emitCountA).to.equal(4);
});
test("Events can be emitted via the .emit method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(2);
return expect(emitCountB).to.equal(2);
});
test("Event handlers can be manually invoked with a custom arg via the .emitPrivate method", function () {
var arg, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
arg = null;
div = Dom.div();
div.on('myEvent', function () {
emitCountA++;
return arg = arguments[0];
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(null);
div.emitPrivate('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(void 0);
div.emitPrivate('myEvent', 'abc123');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(0);
expect(arg).to.equal('abc123');
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(1);
expect(arg).not.to.equal('abc123');
return expect(typeof arg).to.equal('object');
});
test("Booleans can be passed for the 2nd and 3rd args of .emit to control event.bubbles and event.cancelable", function () {
var div, emitCountA, emitCountB, emitCountC;
emitCountA = emitCountB = emitCountC = 0;
div = Dom.div();
div.on('eventA', function (event) {
emitCountA++;
expect(event.bubbles).to.be["true"];
return expect(event.cancelable).to.be["true"];
});
div.on('eventB', function (event) {
emitCountB++;
expect(event.bubbles).to.be["false"];
return expect(event.cancelable).to.be["true"];
});
div.on('eventC', function (event) {
emitCountC++;
expect(event.bubbles).to.be["false"];
return expect(event.cancelable).to.be["false"];
});
div.emit('eventA');
div.emit('eventB', false);
div.emit('eventC', false, false);
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
return expect(emitCountC).to.equal(1);
});
test("A data object can be passed as the 4th arg of .emit which will be extended onto the event object", function () {
var div, event;
div = DOM.div();
event = null;
div.on('mousedown', function (e) {
return event = e;
});
expect(event).to.equal(null);
div.emit('mousedown');
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal(void 0);
div.emit('mousedown', null, null, {
custom: 'custom',
abc: 123
});
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal('custom');
expect(event.abc).to.equal(123);
div.emit('mousedown', null, null, true);
expect(event.type).to.equal('mousedown');
return expect(event.custom).to.equal(void 0);
});
test("Event listeners can be removed via the .off method", function () {
var div, emitCountA, emitCountB, emitCountC, emitCountD, eventCB;
emitCountA = emitCountB = emitCountC = emitCountD = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', eventCB = function () {
return emitCountB++;
});
div.on('anotherEvent', function () {
return emitCountC++;
});
div.el.addEventListener('myEvent', function () {
return emitCountD++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(emitCountC).to.equal(0);
expect(emitCountD).to.equal(0);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(1);
expect(emitCountD).to.equal(1);
div.off('myEvent', eventCB);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(2);
expect(emitCountD).to.equal(2);
div.on('myEvent', function () {
return emitCountB++;
});
div.off('myEvent');
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
expect(emitCountD).to.equal(3);
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', function () {
return emitCountB++;
});
div.off();
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
return expect(emitCountD).to.equal(4);
});
test("Events can be named via a '<event>.<name>' syntax which can be used to remove listeners later on without the original callbacks", function () {
var attachListeners, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div().appendTo(sandbox);
attachListeners = function () {
div.on('myEvent.someName', function () {
return emitCountA++;
});
return div.on('myEvent', function () {
return emitCountB++;
});
};
attachListeners();
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.emit('myEvent.someName');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.off('myEvent.someOtherName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(2);
div.off('myEvent.someName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(3);
div.off('myEvent');
attachListeners();
div.emit('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(4);
div.off('myEvent');
div.emit('myEvent');
expect(emitCountA).to.equal(3);
return expect(emitCountB).to.equal(4);
});
test("Multiple events can be registered/deregistered at once using whitespace separators", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div();
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(3);
div.emit('two');
expect(emitCount).to.equal(4);
div.emit('three');
expect(emitCount).to.equal(4);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.on('one two   three.someName', function () {
return emitCount++;
});
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(4);
div.emit('one');
expect(emitCount).to.equal(6);
div.emit('two');
expect(emitCount).to.equal(8);
div.emit('three');
expect(emitCount).to.equal(10);
div.off('two \tone.someName');
div.emit('one');
expect(emitCount).to.equal(11);
div.emit('two');
expect(emitCount).to.equal(12);
div.emit('three');
expect(emitCount).to.equal(14);
div.off('one three');
div.emit('one');
expect(emitCount).to.equal(14);
div.emit('two');
expect(emitCount).to.equal(15);
div.emit('three');
return expect(emitCount).to.equal(15);
});
test("Events can be listened for once via the .once method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.once('myClick', function (event) {
expect(typeof event).to.equal('object');
return expect(event.type).to.equal('myClick');
});
div.on('myClick', function () {
return emitCountA++;
});
div.once('myClick', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
div.once('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(2);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(4);
return expect(emitCountB).to.equal(2);
});
test("Pre-defined event listeners can be passed in options.events", function () {
var div, divB, emitContext, emitCount, listeners;
emitCount = 0;
emitContext = null;
listeners = {
'one two three': function () {
return emitCount++;
},
'four': function () {
return emitCount++;
},
'five': function () {
return emitContext = this;
}
};
div = Dom.div({
events: listeners
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.emit('four');
expect(emitCount).to.equal(4);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(4);
div.emit('two');
expect(emitCount).to.equal(5);
div.emit('three');
expect(emitCount).to.equal(5);
div.emit('five');
expect(emitContext).to.equal(div);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.emit('four');
expect(emitCount).to.equal(5);
divB = Dom.div({
events: listeners
});
divB.emit('one');
divB.emit('three');
expect(emitCount).to.equal(7);
expect(emitContext).to.equal(div);
divB.emit('five');
return expect(emitContext).to.equal(divB);
});
test("the inserted event will be privately emitted when the element is inserted into the DOM", function () {
var div, invokeCount, masterParentB, parentA, parentB, parentC;
invokeCount = 0;
parentA = Dom.section();
parentB = Dom.section();
masterParentB = Dom.div();
parentC = Dom.section().appendTo(sandbox);
div = Dom.div();
div.on('inserted', function (el) {
expect(this).to.equal(div);
expect(el).to.equal(div.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
div.appendTo(parentA);
expect(invokeCount).to.equal(0);
div.appendTo(parentB.appendTo(masterParentB));
expect(invokeCount).to.equal(0);
parentA.appendTo(sandbox);
expect(invokeCount).to.equal(0);
div.appendTo(parentC);
expect(invokeCount).to.equal(1);
div.detach();
div.appendTo(parentB.appendTo(sandbox));
expect(invokeCount).to.equal(1);
expect(div.parent).to.equal(parentB);
div.on('inserted', function () {
return expect(invokeCount++).to.equal(1);
});
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentB);
div.appendTo(parentC);
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentC);
div.detach();
div.appendTo(parentA);
div.on('inserted', function () {
return invokeCount++;
});
expect(invokeCount).to.equal(3);
div.detach();
div.appendTo(parentB);
return expect(invokeCount).to.equal(3);
});
return test("QuickElement.replace will trigger the inserted event", function () {
var A, B, invokeCount, parent;
invokeCount = 0;
parent = Dom.section().appendTo(sandbox);
A = Dom.div();
B = Dom.div();
B.on('inserted', function (el) {
expect(this).to.equal(B);
expect(el).to.equal(B.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
parent.append(A);
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(parent);
expect(B.parent).to.equal(void 0);
A.replace(B);
expect(invokeCount).to.equal(1);
expect(A.parent).to.equal(void 0);
return expect(B.parent).to.equal(parent);
});
});
suite("Style", function () {
test("Styles can be set via the .style/.css method with args pair of [property, value]", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
div.style('width', '25px');
expect(div.el.style.width).to.equal('25px');
expect(computedStyle.width).to.equal('25px');
div.style('width', '5vh');
expect(div.el.style.width).to.equal('5vh');
return expect(computedStyle.width).to.contain('px');
});
test("Multiple Styles can be set via the .style/.css method by passing a style object", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.style({
width: 25,
height: '33'
});
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('33px');
});
test("Styles defined in the options object will be applied via classNames and not inline style", function () {
var divA, divB;
divA = Dom.div({
style: {
width: 15,
height: 30
}
}).appendTo(sandbox);
divB = Dom.div().appendTo(sandbox).style({
width: 15,
height: 30
});
expect(divA.raw).to.have.style('width', '15px');
expect(divB.raw).to.have.style('width', '15px');
expect(divA.raw).to.have.style('height', '30px');
expect(divB.raw).to.have.style('height', '30px');
expect(divA.raw.style.width).to.equal('');
expect(divB.raw.style.width).to.equal('15px');
expect(divA.raw.style.height).to.equal('');
return expect(divB.raw.style.height).to.equal('30px');
});
test("If passed a property name without a value, the computed value for that property will be returned", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.style('width')).to.equal('15px');
expect(div.style('height')).to.equal('0px');
div.style({
width: null,
height: 55
});
expect(div.style('width')).to.equal(computedStyle.width);
expect(div.style('height')).to.equal('55px');
div.style('width', '19vw');
return expect(div.style('width')).to.contain('px');
});
test("Functions can be passed as values for properties in style objects which will be invoked with the element's options.relatedInstance as the only argument", function () {
var anotherObj, applyWidth, div;
div = Dom.div({
rate: 25
}).appendTo(sandbox);
applyWidth = function (expectedInstance) {
return div.style({
width: function (instance) {
expect(typeof instance).to.equal('object');
expect(instance).to.equal(expectedInstance);
return div.options.rate;
}
});
};
applyWidth(div);
expect(div.options.rate).to.equal(25);
expect(div.style('width')).to.equal('25px');
div.options.rate = 250;
div.related = anotherObj = {};
applyWidth(anotherObj);
expect(div.style('width')).to.equal('250px');
div = Dom.div({
style: {
width: 30,
height: (function () {
return 50;
}),
fontSize: (function () {
return 20;
})
}
}).appendTo(sandbox);
expect(div.raw).to.have.style('width', '30px');
expect(div.raw).to.have.style('height', '50px');
return expect(div.raw).to.have.style('fontSize', '20px');
});
test("A null value can be passed for a property in order to delete that style", function () {
var div;
div = Dom.div({
style: {
width: '15px',
fontSize: function () {
return 30;
}
}
}).appendTo(sandbox);
div.style('height', 20);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '20px');
expect(div.el.style.width).to.equal('');
expect(div.el.style.height).to.equal('20px');
div.style({
width: null,
height: 12
});
expect(div.el).not.to.have.style('width', '15px');
expect(div.el).to.have.style('height', '12px');
expect(['unset', 'inherit', 'initial'].some(function (s) {
return s === div.el.style.width;
})).to.be["true"];
expect(div.el.style.height).to.equal('12px');
div.css('height', null);
expect(div.el.style.height).to.equal('');
expect(div.el.style.width).not.to.equal('');
div.el.style.width = null;
expect(div.el.style.width).to.equal('');
expect(div.el).to.have.style('width', '15px');
div.css('width', null);
expect(div.el.style.width).not.to.equal('');
expect(div.el).not.to.have.style('width', '15px');
div.style('height', function () {
return 30;
});
expect(div.el.style.height).to.equal('30px');
div.style('height', function () {
return null;
});
expect(div.el.style.height).to.equal('');
expect(div.el.style.fontSize).to.equal('30px');
div.style('fontSize', null);
return expect(div.el.style.fontSize).to.equal('');
});
test(".styleSafe() can be used to obtain the value for a given property even for non-inserted elements or elements with options.styleAfterInsert", function () {
var divA, divB, heightA, heightB, prop, style, text;
style = {
width: '8px',
height: '9px',
zIndex: function (field) {
return field.options.theIndex;
},
$happy: {
width: '18px',
zIndex: function (field) {
return field.options.theIndex * 2;
}
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style: style,
theIndex: '12'
});
divB = Dom.div({
style: style,
theIndex: '29',
styleAfterInsert: true
});
divA.style({
fontSize: 10,
position: 'relative'
});
divB.style({
fontSize: 10,
position: 'relative'
});
prop = function (el, target) {
return {
computed: el.style(target),
inline: el.raw.style[target],
safe: '' + el.styleSafe(target)
};
};
expect(prop(divA, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divB, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '12',
safe: '12'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '29'
});
divA.state('happy', true);
divB.state('happy', true);
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '58'
});
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
divA.appendTo(sandbox);
divB.appendTo(sandbox);
heightA = getComputedStyle(divA.raw).height;
heightB = getComputedStyle(divB.raw).height;
expect(prop(divA, 'zIndex')).to.eql({
computed: '24',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '58',
inline: '58',
safe: '58'
});
expect(prop(divA, 'height')).to.eql({
computed: heightA,
inline: '',
safe: heightA
});
expect(prop(divB, 'height')).to.eql({
computed: heightB,
inline: '',
safe: heightB
});
expect(divA.styleSafe('height')).to.equal(heightA);
expect(divA.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('height')).to.equal(heightB);
expect(divB.styleSafe('height', true)).to.equal('100%');
divB.appendTo(sandbox);
expect(divB.style('height')).not.to.equal('');
expect(divB.style('height')).not.to.equal('100%');
expect(divB.style('height')).to.contain('px');
expect(divB.styleSafe('height')).to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).not.to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('margin', true)).to.equal('');
expect(divB.style('width')).to.equal('18px');
expect(divA.styleSafe('fakeProp')).to.equal(divA);
expect(divA.styleSafe(123)).to.equal(divA);
text = Dom.text('abc123').appendTo(divA);
expect(text.styleSafe('fakeProp')).to.equal(void 0);
return expect(text.styleSafe(123)).to.equal(void 0);
});
test(".styleSafe() will work with instances with no given base styles", function () {
var divA, divB;
divA = Dom.div();
divB = Dom(document.createElement('div'));
expect(function () {
divA.styleSafe('height');
return divB.styleSafe('height');
}).not.to["throw"]();
expect(divA.styleSafe('height')).to.equal('');
return expect(divB.styleSafe('height')).to.equal('');
});
test(".styleParsed() is a shorthand for parseFloat(.styleSafe())", function () {
var divA, divB, style;
style = {
width: '8px',
height: '9px',
$happy: {
width: '18px'
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style: style
});
divB = Dom.div({
style: style,
styleAfterInsert: true
});
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('8px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('8px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('happy', true);
divB.state('happy', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('100%');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.appendTo(sandbox);
divB.appendTo(sandbox);
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.style('width')).to.equal('18px');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('9px');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('18px');
expect(divB.styleSafe('width')).to.equal('18px');
return expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
});
test(".recalcStyle() re-applies all function-value styles", function () {
var count, div;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
div.state('relaxed', true);
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 1,
F: 1,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 0
});
div.state('funny', true);
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 1
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.state('funny', false);
expect(count).to.eql({
A: 5,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.recalcStyle();
return expect(count).to.eql({
A: 6,
B: 3,
C: 2,
D: 2,
E: 4,
F: 4,
G: 2
});
});
test(".recalcStyle() accepts a single argument to indicate if to recalc style on children", function () {
var count, div, wrapper, wrapperCount;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
wrapperCount = 0;
wrapper = Dom.div({
style: {
width: function () {
return ++wrapperCount;
}
}
});
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
div.appendTo(wrapper);
expect(wrapperCount).to.equal(1);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(2);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(true);
expect(wrapperCount).to.equal(3);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(4);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(1);
expect(wrapperCount).to.equal(5);
return expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
});
test("If options.recalcOnResize is set, .recalcStyle() will be invoked on each resize event", function () {
var count;
count = {
A: 0,
B: 0,
C: 0,
D: 0
};
Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
}
}
});
Dom.div({
recalcOnResize: true,
style: {
width: function () {
return ++count.C;
},
opacity: 1,
height: function () {
return ++count.D;
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 1
});
Dom(window).emit('resize');
expect(count).to.eql({
A: 1,
B: 1,
C: 2,
D: 2
});
Dom(window).emit('resize');
return expect(count).to.eql({
A: 1,
B: 1,
C: 3,
D: 3
});
});
test("If options.forceStyle is set, all registered styles will have the '!important' flag set", function () {
var divA, divB, style;
style = DOM.style({
props: {
innerHTML: ".theDiv {width:50px}"
}
});
divA = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
}
}).appendTo(sandbox);
divB = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
},
forceStyle: true
}).appendTo(sandbox);
expect(divA.style('width')).to.equal('100px');
expect(divB.style('width')).to.equal('100px');
style.appendTo(document.head);
expect(divA.style('width')).to.equal('50px');
expect(divB.style('width')).to.equal('100px');
expect(divA.attr('style') === '' || divA.attr('style') === null).to.be["true"];
expect(divB.attr('style') === '' || divB.attr('style') === null).to.be["true"];
divA.style('width', function () {
return 75;
});
divB.style('width', function () {
return 75;
});
divA.style('height', 85);
divB.style('height', 85);
expect(divA.attr('style')).not.to.equal('');
expect(divB.attr('style')).not.to.equal('');
expect(divA.attr('style')).not.to.include('75px !important');
expect(divB.attr('style')).to.include('75px !important');
expect(divA.attr('style')).not.to.include('85px !important');
expect(divB.attr('style')).to.include('85px !important');
expect(divA.style('width')).to.equal('75px');
expect(divB.style('width')).to.equal('75px');
return style.remove();
});
test(".show()/.hide() will toggle the element's visibility", function () {
var div;
div = Dom.div().appendTo(sandbox);
expect(div.style('display')).to.equal('block');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('block');
div.show();
return expect(div.style('display')).to.equal('block');
});
test(".show() will set the element's display style to the provided argument, or to the value provided in the style object", function () {
var div;
div = Dom.div({
style: {
display: 'inline'
}
}).appendTo(sandbox);
expect(div.style('display')).to.equal('inline');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('inline');
div.hide();
div.show('inline-block');
return expect(div.style('display')).to.equal('inline-block');
});
return test("SVG elements", function () {
var svg;
svg = Dom(['*svg', {
style: {
display: 'block',
width: 10,
height: 10,
$happy: {
width: 20,
height: 20
}
}
}]).appendTo(sandbox);
expect(svg.style('width')).to.equal('10px');
expect(svg.style('height')).to.equal('10px');
svg.state('happy', true);
expect(svg.style('width')).to.equal('20px');
return expect(svg.style('height')).to.equal('20px');
});
});
suite("State", function () {
test("States can be polled for a value by passing only the target state's name to .state & can be toggled on/off by passing a second argument", function () {
var div;
div = Dom.div();
expect(div.state('funny')).to.be["false"];
div.state('funny', true);
expect(div.state('funny')).to.be["true"];
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be["true"];
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.state('funny', false);
expect(div.state('funny')).to.be["false"];
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.state('$funny', true);
div.state('$base', true);
expect(div.state('funny')).to.be["true"];
return expect(div.state('base')).to.be["false"];
});
test("A key:value pair object can be passed to toggle state for multiple states at once", function () {
var div;
div = Dom.div();
expect(div.state('a')).to.equal(false);
expect(div.state('b')).to.equal(false);
expect(div.state('c')).to.equal(false);
div.state({
a: true,
b: 1
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(true);
expect(div.state('c')).to.equal(false);
div.state({
b: false,
c: 'y'
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(false);
return expect(div.state('c')).to.equal(true);
});
test(".state() without arguments should return an array of active states", function () {
var el;
el = DOM.div();
expect(el.state()).to.eql([]);
el.state('happy', true);
el.state('relaxed', true);
expect(el.state()).to.eql(['happy', 'relaxed']);
el.state('happy', false);
expect(el.state()).to.eql(['relaxed']);
el.state('happy', true);
return expect(el.state()).to.eql(['relaxed', 'happy']);
});
test("All states can be cleared/toggled off via .resetState", function () {
var div;
div = Dom.div();
div.state('funny', true);
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be["true"];
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.resetState();
expect(div.state('funny')).to.be["false"];
expect(div.state('happy')).to.be["false"];
return expect(div.state('relaxed')).to.be["false"];
});
test("A state can be toggled on/off via .toggleState", function () {
var div;
div = DOM.div();
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
expect(div.state('happy')).to.equal(true);
div.toggleState('happy');
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
return expect(div.state('happy')).to.equal(true);
});
test("Styles can be passed under specific states using a '$' prefix before the state name", function () {
var computedStyle, div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px'
},
$happy: {
width: '25px',
marginTop: '20px'
},
$relaxed: {
width: '35px',
marginLeft: '12px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', false);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
div.state('relaxed', true);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('12px');
div.state('happy', false);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
return expect(computedStyle.marginLeft).to.equal('12px');
});
test("A state:eventName (or state:eventOpts) map can be passed set for options.stateTriggers", function () {
var computedStyle, div;
div = Dom.div({
stateTriggers: {
happy: {
on: 'becameHappy',
off: 'becameSad'
},
relaxed: 'isRelaxed'
},
style: {
$base: {
width: '15px'
},
$happy: {
width: '25px'
},
$relaxed: {
width: '35px'
}
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.state('happy')).to.be["false"];
expect(div.state('relaxed')).to.be["false"];
expect(computedStyle.width).to.equal('15px');
div.emit('becameHappy');
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["false"];
expect(computedStyle.width).to.equal('25px');
div.emit('isRelaxed');
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
expect(computedStyle.width).to.equal('35px');
div.emit('becameSad');
expect(div.state('happy')).to.be["false"];
expect(div.state('relaxed')).to.be["true"];
expect(computedStyle.width).to.equal('35px');
div.state('relaxed', false);
return expect(computedStyle.width).to.equal('15px');
});
test("options.stateTriggers won't be attached if they aren't being used in style object", function () {
var divA, divB;
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(false);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("options.stateTriggers can be forced to be attached even if they aren't being used in style object via ._attachStateEvents(true)", function () {
var attachStateEvents, divA, divB;
attachStateEvents = Dom.div()._attachStateEvents ? '_attachStateEvents' : '_ae';
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
divA[attachStateEvents](true);
divB[attachStateEvents](true);
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(true);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(true);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("The hover and focus states will be listened for and toggled by default by their appropriate events", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px',
backgroundColor: 'rgb(45, 45, 45)'
},
$hover: {
width: '25px',
marginTop: '20px',
backgroundColor: 'rgb(155, 155, 155)'
},
$focus: {
width: '35px',
backgroundColor: 'rgb(200, 200, 200)'
}
}
});
div.appendTo(sandbox);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(155, 155, 155)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
div.emit('focus');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
return expect(div.el.style.marginTop).to.equal('');
});
test("If not passed a style map under the 'base' state, all non-state properties on the style object will be considered as 'base' state properties", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
height: '20px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('20px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
return expect(computedStyle.height).to.equal('20px');
});
test("State-specific styles will be removed upon state turn off or restored to the base value", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
expect(div.el.style.height).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '30px');
expect(div.el.style.height).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
return expect(div.el.style.height).to.equal('');
});
test("Higher order state styles will have a higher precedence than the 'base' style to be used as replacments for pending-removal state-styles", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
},
$focus: {
height: '45px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('focus');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
div.emit('focus');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('30px');
});
test("State toggles will be passed to children elements unless options.passStateToChildren is off", function () {
var A, B, C, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div({
passStateToChildren: false
}).appendTo(A);
expect(Main.state('happy')).to.be["false"];
expect(A.state('happy')).to.be["false"];
expect(B.state('happy')).to.be["false"];
expect(C.state('happy')).to.be["false"];
Main.state('happy', true);
expect(Main.state('happy')).to.be["true"];
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
expect(C.state('happy')).to.be["true"];
Main.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be["false"];
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
expect(C.state('happy')).to.be["true"];
Main.state('happy', true);
Main.options.passStateToChildren = true;
A.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be["false"];
expect(A.state('happy')).to.be["false"];
expect(B.state('happy')).to.be["true"];
return expect(C.state('happy')).to.be["true"];
});
test("State styles can be nested to trigger when all states are toggled on", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '12px',
height: '12px',
fontSize: '10px'
},
$funny: {
fontSize: '15px',
height: '15px'
},
$happy: {
width: '14px',
fontSize: '14px',
$relaxed: {
height: '11px',
fontSize: '17px',
$funny: {
width: '10px',
height: '14px'
}
}
},
$relaxed: {
width: '17px'
}
}
});
div.appendTo(sandbox);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('funny', true);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('15px');
expect(div.style('fontSize')).to.equal('15px');
div.state('funny', false);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('14px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('14px');
div.state('relaxed', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('funny', true);
expect(div.style('width')).to.equal('10px');
expect(div.style('height')).to.equal('14px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('15px');
return expect(div.style('fontSize')).to.equal('15px');
});
test("QuickElement.rect should contain an updated version of the element's ClientRect", function () {
var div, rectA, rectB, rectC;
div = Dom.div().appendTo(sandbox);
rectA = div.rect;
rectB = div.rect;
expect(rectA).to.be.instanceOf(ClientRect);
expect(rectB).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
div.style('width', '7px');
rectC = div.rect;
expect(rectC).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
expect(rectA).not.to.eql(rectC);
expect(rectA.width).not.to.equal(7);
expect(rectB.width).not.to.equal(7);
return expect(rectC.width).to.equal(7);
});
test("QuickElement.width should return the updated version of an element's computed width", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px'
});
div.style({
width: '50%'
});
expect(div.width).to.equal(500);
div.style({
width: '10%'
});
expect(div.width).to.equal(100);
div.style({
width: '97px'
});
return expect(div.width).to.equal(97);
});
test("QuickElement.height should return the updated version of an element's computed height", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
height: '1000px'
});
div.style({
height: '50%'
});
expect(div.height).to.equal(500);
div.style({
height: '10%'
});
expect(div.height).to.equal(100);
div.style({
height: '97px'
});
return expect(div.height).to.equal(97);
});
test("QuickElement.width/.height setters are shortcuts for .style() setters", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px',
height: '1000px'
});
div.style({
width: '50%',
height: '50%'
});
div.width = div.height = '50%';
expect(div.width).to.equal(500);
expect(div.height).to.equal(500);
div.width = div.height = '10%';
expect(div.width).to.equal(100);
expect(div.height).to.equal(100);
div.width = div.height = '97px';
expect(div.width).to.equal(97);
return expect(div.height).to.equal(97);
});
test("QuickElement.orientation should return the updated version of an element's computed orientation", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.orientation).to.equal('landscape');
div.style({
width: 550,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 600,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 601,
height: 600
});
return expect(div.orientation).to.equal('landscape');
});
test("QuickElement.aspectRatio should return the updated version of an element's computed aspect-ratio", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.aspectRatio).to.equal(1.25);
div.style({
width: 540,
height: 600
});
expect(div.aspectRatio).to.equal(0.9);
div.style({
width: 600,
height: 600
});
expect(div.aspectRatio).to.equal(1);
div.style({
width: 300,
height: 900
});
return expect(div.aspectRatio).to.equal(0.33333333333333333333333333);
});
test("If options.styleAfterInsert is passed, function styles will be applied only after the element is inserted into the DOM", function () {
var className, divA, divB, divC, divReg, parentOpacityGetter;
parentOpacityGetter = function () {
if (this.parent) {
return this.parent.style('opacity');
} else {
return '0.5';
}
};
divReg = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
}
});
divA = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divB = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divC = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
className = divReg.raw.className || 'no className';
expect(divReg.raw.className).to.equal(className);
expect(divA.raw.className).to.equal(className);
expect(divB.raw.className).to.equal(className);
expect(divC.raw.className).to.equal(className);
expect(divReg.el.style.opacity).to.equal('0.5');
expect(divA.el.style.opacity).to.equal('');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divA.appendTo(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divB.insertBefore(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
sandbox.appendChild(divC.el);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
divC.parent;
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('1');
return divC.appendTo(sandbox);
});
test("Any styles applied by states before the element has been inserted into the DOM and when options.styleAfterInsert is on will be re-applied after insert", function () {
var divA, divReg;
divReg = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
}
});
divA = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
},
styleAfterInsert: true
});
expect(divReg.el.style.height).to.equal('19px');
expect(divA.el.style.height).to.equal('');
divReg.state('funny', true);
divA.state('funny', true);
expect(divReg.el.style.height).to.equal('29px');
expect(divA.el.style.height).to.equal('');
divReg.state('happy', true);
divA.state('happy', true);
expect(divReg.el.style.height).to.equal('39px');
expect(divA.el.style.height).to.equal('');
divReg.appendTo(sandbox);
divA.appendTo(sandbox);
expect(divReg.el.style.height).to.equal('39px');
return expect(divA.el.style.height).to.equal('39px');
});
test("If an element with options.styleAfterInsert is appended into a detached element, styles will be applied only after the parent is appended to the DOM", function () {
var detachedParent, divA, divReg;
detachedParent = Dom.div();
divReg = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
}
});
divA = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
},
styleAfterInsert: true
});
divReg.state('happy', true);
divReg.state('relaxed', true);
divA.state('happy', true);
divA.state('relaxed', true);
divA.state('relaxed', true);
divA.style('visibility', 'hidden');
expect(divReg.el.style.height).to.equal('19px');
expect(divReg.el.style.width).to.equal('31px');
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
divA.appendTo(detachedParent);
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
detachedParent.appendTo(sandbox);
expect(divA.el.style.height).to.equal('19px');
expect(divA.el.style.width).to.equal('31px');
return expect(divA.el.style.visibility).to.equal('hidden');
});
test("QuickElement.pipeState can be used to redirect all state toggles to the provided target element", function () {
var childA, childB, divA, divB, parentA, parentB;
parentA = Dom.div();
parentB = Dom.div({
passStateToChildren: false
});
divA = Dom.div(null).appendTo(parentA);
divB = Dom.div(null).appendTo(parentB);
childA = Dom.span().appendTo(divA);
childB = Dom.span().appendTo(divB);
divA.pipeState();
divA.state('1', true);
expect(parentA.state('1')).to.equal(false);
expect(divA.state('1')).to.equal(true);
expect(childA.state('1')).to.equal(true);
divA.pipeState(parentA);
divA.state('2', true);
expect(parentA.state('2')).to.equal(true);
expect(divA.state('2')).to.equal(true);
expect(childA.state('2')).to.equal(true);
divA.pipeState(false);
divA.state('2.5', true);
expect(parentA.state('2.5')).to.equal(false);
expect(divA.state('2.5')).to.equal(true);
expect(childA.state('2.5')).to.equal(true);
divB.pipeState(true);
divB.state('3', true);
expect(parentB.state('3')).to.equal(false);
expect(divB.state('3')).to.equal(true);
expect(childB.state('3')).to.equal(true);
divB.pipeState(parentB);
divB.state('4', true);
expect(parentB.state('4')).to.equal(true);
expect(divB.state('4')).to.equal(false);
expect(childB.state('4')).to.equal(false);
divA.pipeState(parentB);
divA.state('5', true);
expect(parentA.state('5')).to.equal(false);
expect(parentB.state('5')).to.equal(true);
expect(divA.state('5')).to.equal(false);
expect(divB.state('5')).to.equal(false);
expect(childA.state('5')).to.equal(false);
expect(childB.state('5')).to.equal(false);
divA.pipeState(false);
divB.pipeState(parentA);
divB.state('6', true);
expect(parentA.state('6')).to.equal(true);
expect(parentB.state('6')).to.equal(false);
expect(divA.state('6')).to.equal(true);
expect(divB.state('6')).to.equal(false);
expect(childA.state('6')).to.equal(true);
return expect(childB.state('6')).to.equal(false);
});
test("States can be marked as unpassable to avoid passing to children by including them in options.unpassableStates", function () {
var div, spanA, spanB, subSpan;
div = Dom.div({
unpassableStates: ['B', 'D']
});
spanA = Dom.span().appendTo(div);
spanB = Dom.span().appendTo(div);
subSpan = Dom.span().appendTo(spanB);
expect(div.state('A')).to.equal(false);
expect(spanA.state('A')).to.equal(false);
expect(spanB.state('A')).to.equal(false);
expect(subSpan.state('A')).to.equal(false);
div.state('A', true);
expect(div.state('A')).to.equal(true);
expect(spanA.state('A')).to.equal(true);
expect(spanB.state('A')).to.equal(true);
expect(subSpan.state('A')).to.equal(true);
div.state('B', true);
expect(div.state('B')).to.equal(true);
expect(spanA.state('B')).to.equal(false);
expect(spanB.state('B')).to.equal(false);
expect(subSpan.state('B')).to.equal(false);
div.state('C', true);
expect(div.state('C')).to.equal(true);
expect(spanA.state('C')).to.equal(true);
expect(spanB.state('C')).to.equal(true);
expect(subSpan.state('C')).to.equal(true);
div.state('D', true);
expect(div.state('D')).to.equal(true);
expect(spanA.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(false);
expect(subSpan.state('D')).to.equal(false);
spanB.state('D', true);
expect(spanB.state('D')).to.equal(true);
expect(subSpan.state('D')).to.equal(true);
div.state('D', false);
expect(div.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(true);
return expect(subSpan.state('D')).to.equal(true);
});
test("When .state() receives a truthy value as the third argument the event will bubble up to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div(null, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div(null, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.state('happy', true, true);
childB.state('happy', true);
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.state('relaxed', true, null);
childB.state('relaxed', true, 'on');
expect(parentA.state('relaxed')).to.equal(false);
expect(parentB.state('relaxed')).to.equal(true);
expect(subParentA.state('relaxed')).to.equal(false);
expect(subParentB.state('relaxed')).to.equal(true);
expect(childA.state('relaxed')).to.equal(true);
expect(childB.state('relaxed')).to.equal(true);
expect(subChildA.state('relaxed')).to.equal(true);
return expect(subChildB.state('relaxed')).to.equal(false);
});
test("options.stateTriggers config objects can specify a 'force' property which will make them get attached even if they aren't used", function () {
var divA, divB;
divA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
});
divB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF'
}
}
});
expect(divA.state('happy')).to.equal(false);
expect(divB.state('happy')).to.equal(false);
divA.raw.emitEvent('happyON');
divB.raw.emitEvent('happyON');
expect(divA.state('happy')).to.equal(true);
expect(divB.state('happy')).to.equal(false);
divB.state('happy', true);
divA.raw.emitEvent('happyOFF');
divB.raw.emitEvent('happyOFF');
expect(divA.state('happy')).to.equal(false);
return expect(divB.state('happy')).to.equal(true);
});
test("options.stateTriggers config objects can specify a 'bubbles' property which will cause the state to bubble to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
bubbles: true,
force: true
}
}
}, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
}, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.raw.emitEvent('happyON');
childB.raw.emitEvent('happyON');
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.raw.emitEvent('happyOFF');
childB.raw.emitEvent('happyOFF');
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
return expect(subChildB.state('happy')).to.equal(false);
});
test("wrappers created for existing elements should attempt to resolve if its inserted into the DOM on init", function () {
var divA, divA_, divB, divB_;
divA_ = document.createElement('div');
divB_ = document.createElement('div');
sandbox.appendChild(divB_);
divA = Dom(divA_);
divB = Dom(divB_);
divA_.style.height = '100px';
divB_.style.height = '100px';
expect(typeof divA.height).to.equal('number');
expect(typeof divB.height).to.equal('number');
expect(isNaN(divA.height)).to.be["true"];
expect(isNaN(divB.height)).to.be["false"];
return expect(divA.styleSafe('height')).to.equal('100px');
});
test("state-based text", function () {
var divA, divB, divC;
divA = Dom(['div', null, ['text', {
text: {
$base: 'abc123',
$happy: 'Happy',
$relaxed: 'Relaxed'
}
}]]);
divB = Dom(['div', null, ['text', {
text: {
$happy: 'Happy',
$relaxed: 'Relaxed',
'$relaxed+funny': 'Funny & Relaxed'
}
}]]);
divC = Dom.div({
text: {
$base: 'def456',
$happy: 'ghi789'
}
});
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('happy', true);
divB.state('happy', true);
divC.state('happy', true);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
expect(divC.text).to.equal('ghi789');
divA.state('happy', false);
divB.state('happy', false);
divC.state('happy', false);
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('happy', true);
divB.state('happy', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
divB.state('relaxed', true);
divB.state('funny', true);
expect(divB.text).to.equal('Relaxed');
divB.state('relaxed+funny', true);
return expect(divB.text).to.equal('Funny & Relaxed');
});
test("state changes will emit a private stateChange:<state> event", function () {
var div, results;
results = [];
div = Dom.div({
style: {
color: 'white',
opacity: 1,
$happy: {
color: 'black'
}
}
});
div.state('any', true);
div.on('stateChange:happy', function (state) {
return results.push(['happy', state]);
});
div.on('stateChange:relaxed', function (state) {
return results.push(['relaxed', state]);
});
div.on('stateChange:arbitrary', function (state) {
return results.push(['arbitrary', state]);
});
expect(results).to.deep.equal([]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true]]);
div.state('happy', false);
expect(results).to.deep.equal([['happy', true], ['happy', false]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('another', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('relaxed', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true]]);
div.state('arbitrary', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
div.state('relaxed', true);
return expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
});
test("state-based styles can be updated via QuickElement.updateStateStyles", function () {
var div, getStyles;
div = Dom.div({
style: {
width: 5,
height: 5,
marginTop: 5,
$happy: {
marginTop: 10
},
$relaxed: {
marginTop: 20,
width: 20,
$happy: {
height: 40,
marginTop: 40
}
},
$somethingElse: {
width: 60,
marginTop: 60
}
}
}).appendTo(sandbox);
getStyles = function () {
return {
width: div.style('width'),
height: div.style('height'),
marginTop: div.style('marginTop')
};
};
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '10px'
});
div.updateStateStyles({
width: 7,
height: 8,
$happy: {
marginTop: 12,
height: 12
}
});
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
expect(getStyles()).to.eql({
width: '7px',
height: '8px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
div.updateStateStyles({
$base: {
width: 2,
height: 9
},
$relaxed: {
height: 20,
$happy: {
width: 40,
marginTop: function () {
return 45;
}
}
}
});
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('relaxed', true);
expect(getStyles()).to.eql({
width: '20px',
height: '20px',
marginTop: '20px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '40px',
height: '40px',
marginTop: '45px'
});
div.state({
happy: false,
relaxed: false
});
div.el.style.marginTop = null;
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('somethingElse', true);
return expect(getStyles()).to.eql({
width: '60px',
height: '9px',
marginTop: '60px'
});
});
return test("default states to apply to an element upon creation can be specified via options.state mapping", function () {
var el1, el2, el3;
el1 = DOM.div();
el2 = DOM.div({
state: {
happy: true,
relaxed: false
}
});
el3 = DOM.div({
state: {
relaxed: true
}
});
expect(el1.state('happy')).to.equal(false);
expect(el1.state('relaxed')).to.equal(false);
expect(el2.state('happy')).to.equal(true);
expect(el2.state('relaxed')).to.equal(false);
expect(el3.state('happy')).to.equal(false);
return expect(el3.state('relaxed')).to.equal(true);
});
});
suite("Media Queries", function () {
suiteTeardown(function () {
var ref;
if ((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0) {
return dimensions.restore();
}
});
suiteSetup(function () {
var ref;
if (!((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0)) {
return this.skip();
}
});
teardown(function () {
var i, level, results1;
results1 = [];
for (level = i = 0; i <= 3; level = ++i) {
results1.push(Dom.CSS.clearRegistered(level));
}
return results1;
});
test("Window dimensions", function () {
var div;
dimensions.simulate(1000, 1000);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
width: '300px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@window(orientation:landscape)': {
marginTop: 6
},
'@window(orientation:portrait)': {
marginTop: 7
},
'@window(max-width:800)': {
zIndex: 3,
width: '280px'
},
'@window(max-width:700, max-height:1000)': {
zIndex: 4,
width: '250px',
height: '250px'
},
'@window(max-height:1000)': {
fontSize: '25px'
},
'@window(min-width:900px)': {
fontSize: '23px'
},
'@window(aspect-ratio:0.5)': {
fontSize: '21px',
lineHeight: '12px'
},
'@window(min-height:1200)': {
fontSize: '20px'
}
}
});
div.appendTo(sandbox);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('23px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(900);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(899);
expect(div.style('fontSize')).to.equal('25px');
dimensions.simulate(899, 1100);
expect(div.style('fontSize')).to.equal('30px');
dimensions.simulate(950);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(950, 1900);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('12px');
dimensions.simulate(950, 1899);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('30px');
dimensions.simulate(790);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(810);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
dimensions.simulate(791);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(701, 900);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 900);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
dimensions.simulate(700, 1001);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 1000);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(1100, 1000);
expect(div.style('marginTop')).to.equal('6px');
dimensions.simulate(1100, 1101);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Self dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div().appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '100%',
height: '100%',
fontSize: '30px',
lineHeight: '30px',
'@self(orientation:landscape)': {
marginTop: 6
},
'@self(orientation:portrait)': {
marginTop: 7
},
'@self(position:relative)': {
top: '20px'
},
'@self(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@self(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@self(zIndex:4)': {
lineHeight: '15px'
},
'@self(min-zIndex:6)': {
opacity: '0'
},
'@self(max-fontSize:20)': {
lineHeight: '19px'
},
'@self(min-width:600px)': {
fontSize: '19px'
},
'@self(aspect-ratio:2.25)': {
fontSize: '22px',
lineHeight: '12px'
},
'@self(min-height:700)': {
fontSize: '40px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginTop')).to.equal('6px');
expect(div.style('top')).to.equal('20px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
expect(div.style('opacity')).to.equal('1');
div.style('zIndex', 5);
dimensions.simulate();
expect(div.style('opacity')).to.equal('1');
expect(div.style('lineHeight')).to.equal('37px');
div.style('zIndex', 17);
expect(div.style('opacity')).to.equal('1');
dimensions.simulate();
expect(div.style('opacity')).to.equal('0');
simulateParent(900);
expect(div.style('fontSize')).to.equal('19px');
expect(div.style('lineHeight')).to.equal('30px');
simulateParent(900);
expect(div.style('lineHeight')).to.equal('19px');
simulateParent(900, 400);
expect(div.style('fontSize')).to.equal('22px');
expect(div.style('lineHeight')).to.equal('12px');
simulateParent(2025, 900);
expect(div.style('fontSize')).to.equal('40px');
expect(div.style('lineHeight')).to.equal('12px');
expect(div.style('marginTop')).to.equal('6px');
simulateParent(2025, 2026);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Parent dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div({
style: {
position: 'absolute'
}
}).appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@parent(orientation:landscape)': {
marginBottom: 6
},
'@parent(orientation:portrait)': {
marginBottom: 7
},
'@parent(position:relative)': {
top: '21px'
},
'@parent(max-width:350)': {
zIndex: 3,
fontSize: '34px'
},
'@parent(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@parent(zIndex:7)': {
lineHeight: '16px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginBottom')).to.equal('6px');
expect(div.style('top')).to.equal('30px');
parent.style('position', 'relative');
expect(div.style('top')).to.equal('30px');
simulateParent();
expect(div.style('top')).to.equal('21px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('34px');
parent.style('zIndex', '7');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('16px');
return expect(div.style('opacity')).to.equal('1');
});
test("Parent Ref dimensions/styles", function () {
var div, parent;
parent = Dom.div({
ref: 'abc'
}, Dom.div({
id: 'def'
}, Dom.div({
ref: 'ghi'
}))).appendTo(sandbox);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@#abc(orientation:landscape)': {
fontWeight: 600
},
'@#abc(orientation:portrait)': {
fontWeight: 500
},
'@#def(position:relative)': {
top: '20px'
},
'@#def(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@#ghi(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@#abc(zIndex:7)': {
lineHeight: '15px'
}
}
});
parent.style({
width: 400,
height: 300
});
parent.child.def.style({
width: 400,
height: 300
});
parent.child.ghi.style({
width: 400,
height: 300
});
div.appendTo(parent.child.ghi);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('fontWeight')).to.equal('600');
expect(div.style('top')).to.equal('30px');
parent.style({
width: 400,
height: 900,
position: 'relative'
});
dimensions.simulate();
expect(div.style('fontWeight')).to.equal('500');
expect(div.style('top')).to.equal('30px');
parent.child.def.style({
position: 'relative'
});
expect(div.style('top')).to.equal('30px');
dimensions.simulate();
expect(div.style('top')).to.equal('20px');
parent.child.def.style({
width: 349,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
parent.child.ghi.style({
width: 450,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
parent.style({
zIndex: 7
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
return expect(div.style('opacity')).to.equal('1');
});
return test("Nested media queries", function () {
var div;
dimensions.simulate(1000, 900);
div = Dom.div({
style: {
zIndex: 2,
$happy: {
marginRight: 5,
'@window(orientation:landscape)': {
marginRight: 6
}
},
'@window(orientation:portrait)': {
$relaxed: {
marginRight: 7
}
}
}
});
div.appendTo(sandbox);
expect(div.style('marginRight')).to.equal('0px');
div.state('happy', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('5px');
dimensions.simulate(1000, 900);
expect(div.style('marginRight')).to.equal('6px');
div.state('relaxed', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('7px');
dimensions.simulate(1000, 900);
return expect(div.style('marginRight')).to.equal('6px');
});
});
suite("Traversal", function () {
test("Children", function () {
var comment, div, div$, spanA, spanB, text;
div = Dom.div(null, Dom.div(), 'Some Text');
expect(div.children.length).to.equal(2);
expect(div.elementChildren.length).to.equal(1);
expect(div.el.childNodes.length).to.equal(2);
div.append(Dom.span());
expect(div.children.length).to.equal(3);
expect(div.elementChildren.length).to.equal(2);
expect(div.el.childNodes.length).to.equal(3);
div.el.appendChild(document.createElement('div'));
expect(div.children.length).to.equal(4);
expect(div.elementChildren.length).to.equal(3);
expect(div.el.childNodes.length).to.equal(4);
div = document.createElement('div');
spanA = document.createElement('span');
spanB = document.createElement('span');
text = document.createTextNode('someTextNode');
comment = document.createComment('someCommentNode');
div.appendChild(spanA);
div.appendChild(comment);
div.appendChild(spanB);
div.appendChild(text);
expect(div.childNodes.length).to.equal(4);
expect(div.children.length).to.equal(2);
div$ = Dom(div);
expect(div$.children.length).to.equal(3);
expect(div$.elementChildren.length).to.equal(2);
expect(div$.children[0].raw).to.equal(spanA);
expect(div$.children[1].raw).to.equal(spanB);
return expect(div$.children[2].raw).to.equal(text);
});
test("Parent", function () {
var A, B, C;
A = Dom.div(null, Dom.div(), 'Some Text');
B = Dom.div();
C = Dom.div();
expect(A.parent).to.equal(void 0);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
B.append(A);
expect(A.parent).to.equal(B);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(1);
expect(B.children[0]).to.equal(A);
C.append(A);
expect(A.parent).to.equal(C);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(0);
return expect(C.children[0]).to.equal(A);
});
test("Parents", function () {
var A, B, C;
A = Dom.div().appendTo(sandbox);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(B);
expect(A.parent.el).to.equal(sandbox);
expect(B.parent).to.equal(A);
expect(C.parent).to.equal(B);
expect(A.parents.length).to.equal(B.parents.length - 1);
expect(B.parents.length).to.equal(C.parents.length - 1);
expect(B.parents[0]).to.equal(A);
expect(C.parents[0]).to.equal(B);
expect(C.parents.length).to.equal(5);
return expect(C.parents.slice(-1)[0].el).to.equal(document.documentElement);
});
suite("Parent Matching", function () {
teardown(function () {
return this.els.A.detach();
});
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A: A,
B: B,
C: C,
D: D
};
});
test("function filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching(null)).to.equal(void 0);
expect(D.parentMatching(B)).to.equal(void 0);
expect(D.parentMatching(function () {
return false;
})).to.equal(void 0);
expect(D.parentMatching(function (el) {
return el === B;
})).to.equal(B);
expect(D.parentMatching(function (el) {
return el === A;
})).to.equal(A);
expect(D.parentMatching(function (el) {
return el === C;
})).to.equal(C);
A.appendTo(sandbox);
return expect(D.parentMatching(function (el) {
return el.raw === document.documentElement;
})).to.equal(Dom(document.documentElement));
});
return test("ref filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching('badRef')).to.equal(void 0);
expect(D.parentMatching('B')).to.equal(B);
expect(D.parentMatching('A')).to.equal(A);
return expect(D.parentMatching('C')).to.equal(C);
});
});
suite("Parents Until", function () {
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A: A,
B: B,
C: C,
D: D
};
});
test("function filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentsUntil(null)).to.eql([C, B, A]);
expect(D.parentsUntil()).to.eql([C, B, A]);
expect(D.parentsUntil(function (el) {
return el === A;
})).to.eql([C, B]);
expect(D.parentsUntil(function (el) {
return el === B;
})).to.eql([C]);
return expect(D.parentsUntil(function (el) {
return false;
})).to.eql([C, B, A]);
});
return test("ref filter", function () {
var A, B, C, D, ref;
(ref = this.els, A = ref.A, B = ref.B, C = ref.C, D = ref.D);
expect(D.parentsUntil('A')).to.eql([C, B]);
expect(D.parentsUntil('B')).to.eql([C]);
return expect(D.parentsUntil('badRef')).to.eql([C, B, A]);
});
});
test("Next", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(A.next).to.equal(B);
expect(C.next).to.equal(D);
expect(E.next).to.equal(void 0);
return expect(B.nextAll).to.eql([C, D, E]);
});
test("Next Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(A.next).to.equal(B);
expect(A.nextEl).to.equal(C);
expect(B.nextEl).to.equal(C);
expect(C.nextEl).to.equal(E);
expect(E.nextEl).to.equal(void 0);
return expect(A.nextElAll).to.eql([C, E]);
});
test("Prev", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(C.prev).to.equal(B);
expect(A.prev).to.equal(void 0);
return expect(D.prevAll).to.eql([C, B, A]);
});
test("Prev Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(E.prevEl).to.equal(C);
expect(D.prevEl).to.equal(C);
expect(C.prevEl).to.equal(A);
expect(A.prevEl).to.equal(void 0);
return expect(E.prevElAll).to.eql([C, A]);
});
test("Siblings", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(C.siblings).to.eql(C.prevAll.reverse().concat(C.nextAll));
expect(C.siblings).to.eql([A, B, D, E]);
expect(C.elementSiblings).to.eql([A, E]);
return expect(B.elementSiblings).to.eql([A, C, E]);
});
test("First/Last Child", function () {
var divA, divB, divBA, divBB, divC, main;
main = DOM.div({
id: 'main'
});
divA = DOM.div({
id: 'divA'
}).appendTo(main);
divB = DOM.div({
id: 'divB'
}).appendTo(main);
divC = DOM.div({
id: 'divC'
}).appendTo(main);
divBA = DOM.div({
id: 'divBA'
}).appendTo(divB);
divBB = DOM.div({
id: 'divBB'
}).appendTo(divB);
expect(main.firstChild).to.equal(divA);
expect(main.lastChild).to.equal(divC);
expect(divA.firstChild).to.equal(void 0);
expect(divA.lastChild).to.equal(void 0);
expect(divB.firstChild).to.equal(divBA);
return expect(divB.lastChild).to.equal(divBB);
});
test("Child (by ref)", function () {
var divA, divB, divC, newChild, newChildChild, newParent, sandBox;
divA = Dom.div({
id: 'divA'
}, Dom.div({
id: 'childA'
}, Dom.span({
ref: 'childA_1'
}), Dom.div({
ref: 'childA_2',
id: 'childA_2'
})), Dom.div({}, Dom.span({
ref: 'childB_1'
}), Dom.text({
id: 'childB_2'
}, 'The Text')));
divB = Dom.template(['div', {
id: 'divB'
}, ['div', {
id: 'childA',
style: {
color: 'pink'
}
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_3',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}]]]).spawn();
divC = Dom.template(['div', {
ref: 'divC'
}, ['div', {
ref: 'childA'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}]], ['div', {
ref: 'childB'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}], ['div', {
ref: 'divD'
}, ['div', {
ref: 'childB'
}]]]]).spawn();
expect(divA.child.childA).to.equal(divA.children[0]);
expect(divA.child.childA_1).to.equal(divA.children[0].children[0]);
expect(divA.child.childA_2).to.equal(divA.children[0].children[1]);
expect(divA.child.childA_3).to.equal(void 0);
expect(divA.child.childB).to.equal(void 0);
expect(divA.child.childB_1).to.equal(divA.children[1].children[0]);
expect(divA.child.childB_2).to.equal(divA.children[1].children[1]);
expect(divA.child.childB_2.type).to.equal('text');
expect(divB.child.childA).to.equal(divB.children[0]);
expect(divB.child.childA_1).to.equal(divB.children[0].children[0]);
expect(divB.child.childA_2).to.equal(divB.children[0].children[1]);
expect(divB.child.childA_3).to.equal(void 0);
expect(divB.child.childB).to.equal(void 0);
expect(divB.child.childB_1).to.equal(divB.children[1].children[0]);
expect(divB.child.childB_2).to.equal(divB.children[1].children[1]);
expect(divB.child.childA.style('color')).to.equal('');
expect(divB.child.childA.styleSafe('color')).not.to.equal('');
expect(divB.child.childA.styleSafe('color').length >= 4).to.be["true"];
expect(divA.child.childA.raw.getAttribute('id')).to.equal('childA');
expect(divA.child.childA.raw.getAttribute('data-ref')).to.equal('childA');
expect(divA.child.childA_1.raw.getAttribute('id')).to.equal(null);
expect(divA.child.childA_1.raw.getAttribute('data-ref')).to.equal('childA_1');
expect(divA.child.childA_2.raw.getAttribute('id')).to.equal('childA_2');
expect(divA.child.childA_2.raw.getAttribute('data-ref')).to.equal('childA_2');
expect(divC.child.childA).to.equal(divC.children[0]);
expect(divC.child.childB).to.equal(divC.children[1]);
expect(divC.child.divB).to.equal(divC.children[0].children[0]);
expect(divC.child.divC).to.equal(divC);
expect(divC.child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[0].child.divB).to.equal(divC.children[0].children[0]);
expect(divC.children[0].child.divC).to.equal(divC.children[0].children[1]);
expect(divC.children[1].child.divB).to.equal(divC.children[1].children[0]);
expect(divC.children[1].child.divC).to.equal(divC.children[1].children[1]);
expect(divC.children[1].child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[1].child.childB).to.equal(divC.children[1]);
sandBox = Dom(sandbox);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
sandBox.append(divA);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
expect(sandBox.childf.divA).to.equal(divA);
expect(sandBox.child.childA).to.equal(divA.children[0]);
expect(sandBox.child.childB_2).to.equal(divA.children[1].children[1]);
expect(sandBox.child.divA).to.equal(divA);
newChild = Dom.div({
ref: 'newChild'
});
newChildChild = Dom.div({
ref: 'newChildChild'
});
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChildChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newChildChild.appendTo(newChild);
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChild.childf.newChildChild).to.equal(newChildChild);
expect(newChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newParent = Dom.div({
ref: 'newParent'
});
newChild.appendTo(newParent);
return expect(newParent.child.newChildChild).to.equal(newChildChild);
});
test("Index", function () {
var childA, childB, childC, childD, childE, childF, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.div());
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(3);
expect(childF.index).to.equal(5);
childC.detach();
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(2);
expect(childF.index).to.equal(4);
return expect(childC.index).to.equal(null);
});
test("Index (by type)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.text(), childG = Dom.div());
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childC.detach();
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childA.detach();
expect(childB.indexType).to.equal(0);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(1);
expect(childA.indexType).to.equal(null);
return expect(childC.indexType).to.equal(null);
});
test("Index (by ref)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div({
ref: 'abc'
}), childB = Dom.div({
ref: 'abc'
}), childC = Dom.span({
ref: 'def'
}), childD = Dom.text({
ref: 'abc'
}), childE = Dom.span({
ref: 'abc'
}), childF = Dom.text({
ref: 'def'
}), childG = Dom.div({
ref: 'abc'
}));
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(1);
expect(childG.indexRef).to.equal(4);
childC.detach();
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(4);
childA.detach();
expect(childB.indexRef).to.equal(0);
expect(childD.indexRef).to.equal(1);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(3);
expect(childA.indexRef).to.equal(null);
return expect(childC.indexRef).to.equal(null);
});
test("Query", function () {
var div, sandBox;
div = Dom.template(['div', {
"class": 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
"class": 'childA',
style: {
color: 'pink'
}
}, ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_1'
}], ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.query('.childA')).to.equal(div.children[0]);
expect(div.query('.childB')).to.equal(div.children[1]);
expect(div.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(div.query('.childA_1')).to.equal(div.children[0].children[0]);
expect(div.query('.childA_2')).to.equal(div.children[0].children[3]);
expect(sandBox.query('.div-one')).to.equal(div);
expect(sandBox.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(sandBox.query('div[name="abc123"]')).to.equal(div);
return expect(sandBox.query('span[name="abc123"]')).to.equal(void 0);
});
test("QueryAll", function () {
var div, sandBox;
div = Dom.template(['div', {
"class": 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
"class": 'childA',
style: {
color: 'pink'
}
}, ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_1'
}], ['span', {
"class": 'childA_1'
}], ['div', {
"class": 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
"class": 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.queryAll('.childA').elements).to.eql([div.children[0]]);
expect(div.queryAll('.childB').elements).to.eql([div.children[1], div.children[2]]);
expect(div.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(div.queryAll('.childA_1').elements).to.eql([div.children[0].children[0], div.children[0].children[1], div.children[0].children[2]]);
expect(div.queryAll('.childA_2').elements).to.eql([div.children[0].children[3]]);
expect(sandBox.queryAll('.div-one').elements).to.eql([div]);
expect(sandBox.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(sandBox.queryAll('div[name="abc123"]').elements).to.eql([div]);
expect(sandBox.queryAll('span[name="abc123"]').elements).to.eql([]);
expect(div.text).to.equal('');
expect(sandBox.queryAll('.childB_1').text('abc123').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
return expect(div.text).to.equal('abc123abc123');
});
return test("Query/QueryAll shortcuts", function () {
var allA, allB, el, i, index, len;
expect(Dom.query('head')).to.equal(Dom(document).query('head'));
expect(Dom.query('body')).to.equal(Dom(document).query('body'));
allA = Dom.queryAll('section').elements;
allB = Dom(document).queryAll('section').elements;
expect(allA.length).to.equal(allB.length);
for ((index = i = 0, len = allA.length); i < len; index = ++i) {
el = allA[index];
expect(allA[index]).to.equal(allB[index]);
}
});
});
suite("Manipulation", function () {
test(".append()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.appendTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(A, C);
});
test(".prepend()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.prepend(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.prependTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(C, A);
});
test(".after()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.after(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(B, A);
C.insertAfter(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(B, C, A);
});
test(".before()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.before(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(A, B);
C.insertBefore(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(A, C, B);
});
test(".detach()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.detach();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(2);
expect(div.state('happy')).to.be["true"];
return expect(div.state('relaxed')).to.be["true"];
});
test(".remove()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be["true"];
expect(div.state('relaxed')).to.be["true"];
div.remove();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be["false"];
return expect(div.state('relaxed')).to.be["false"];
});
test(".empty()", function () {
var A, B, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
A.state('happy', true);
B.state('happy', true);
checkChildStructure(Main)(A, B);
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
Main.empty();
checkChildStructure(Main)();
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
expect(A.state('happy')).to.be["true"];
return expect(B.state('happy')).to.be["true"];
});
test(".wrap()", function () {
var A, B, C, Main, wrapA, wrapB, wrapC;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div();
wrapA = Dom.section();
wrapB = Dom.section();
wrapC = Dom.section();
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
wrapA.state('relaxed', true);
wrapB.state('relaxed', true);
wrapC.state('relaxed', true);
checkChildStructure(Main)(A, B);
A.wrap(wrapA);
checkChildStructure(Main)(wrapA, B);
checkChildStructure(wrapA)(A);
B.wrap(wrapB);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A);
checkChildStructure(wrapB)(B);
B.wrap(wrapA);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)();
wrapC.appendTo(wrapB);
C.wrap(wrapC);
C.wrap();
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
C.wrap(C);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
expect(A.state('happy')).to.be["true"];
expect(B.state('happy')).to.be["true"];
expect(C.state('happy')).to.be["true"];
expect(wrapA.state('relaxed')).to.be["true"];
expect(wrapB.state('relaxed')).to.be["true"];
return expect(wrapC.state('relaxed')).to.be["true"];
});
test(".unwrap()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().prependTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(C);
E = Dom.div().appendTo(D);
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
D.state('happy', true);
E.state('happy', true);
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(D);
checkChildStructure(D)(E);
E.unwrap();
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
B.unwrap();
checkChildStructure(Main)(B, C);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
E.unwrap();
checkChildStructure(Main)(B, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.insertAfter(B);
C.appendTo(A);
D.appendTo(A);
checkChildStructure(Main)(B, A, E);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
D.unwrap();
checkChildStructure(Main)(B, C, D, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".replace()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(A);
E = Dom.div().appendTo(D);
A.replace();
E.replace();
checkChildStructure(Main)(A, B);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)(E);
C.replace(E).appendTo(B);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E, D);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
D.replace(E);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(C);
checkChildStructure(Main)(A, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.replace(D);
checkChildStructure(Main)(D, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(D);
checkChildStructure(Main)(C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".clone()", function () {
var A, B, childA, childB, emitCount, opts, sandBox;
emitCount = 0;
sandBox = Dom(sandbox);
opts = {
style: {
$base: {
width: '34px'
},
$happy: {
height: '99px'
},
$relaxed: {
opacity: '0.5'
}
}
};
A = Dom.div(opts, 'Some Inner Text').appendTo(sandbox);
A.state('happy', true);
A.on('privateEvent', function () {
return emitCount++;
});
childA = Dom.div().appendTo(A);
childB = Dom.span().appendTo(A);
B = A.clone();
A.state('relaxed', true);
A.emit('privateEvent');
expect(emitCount).to.equal(1);
expect(A.parent).to.equal(sandBox);
expect(A.css('width')).to.equal('34px');
expect(A.css('height')).to.equal('99px');
expect(A.css('opacity')).to.equal('0.5');
expect(A.siblings.length).to.equal(0);
expect(A.children.length).to.equal(3);
expect(A.children[0].el.textContent).to.equal('Some Inner Text');
expect(A.children[1]).to.equal(childA);
expect(A.children[2]).to.equal(childB);
expect(B).not.to.equal(A);
expect(B.parent).to.equal(void 0);
sandBox.append(B);
expect(B.parent).to.equal(sandBox);
expect(B.css('width')).to.equal('34px');
expect(B.css('height')).to.equal('99px');
expect(B.css('opacity')).to.equal('1');
expect(B.siblings.length).to.equal(1);
expect(B.children.length).to.equal(3);
expect(B.children[0].el.textContent).to.equal('Some Inner Text');
expect(B.children[0]).not.to.equal(A.children[0]);
expect(B.children[1]).not.to.equal(childA);
expect(B.children[2]).not.to.equal(childB);
expect(B.state('happy')).to.be["true"];
expect(B.state('relaxed')).to.be["false"];
expect(emitCount).to.equal(1);
B.emit('privateEvent');
expect(emitCount).to.equal(2);
A.off();
A.emit('privateEvent');
expect(emitCount).to.equal(2);
B.emit('privateEvent');
return expect(emitCount).to.equal(3);
});
test(".prop() - element property getter/setter", function () {
var div;
div = Dom.div();
expect(div.prop('myProp')).to.equal(void 0);
expect(div.prop('myProp', 192)).to.equal(div);
expect(div.prop('myProp')).to.equal(192);
expect(div.prop('myProp', '192')).to.equal(div);
expect(div.prop('myProp')).to.equal('192');
expect(div.prop('anotherProp', [1, 2, 3])).to.equal(div);
expect(div.prop('anotherProp')).to.eql([1, 2, 3]);
expect(div.el.myProp).to.equal('192');
expect(div.el.anotherProp).to.eql([1, 2, 3]);
div.el.lastProp = 9999;
expect(div.el.lastProp).to.equal(9999);
expect(div.prop('lastProp')).to.equal(9999);
expect(Object.keys(div.el)).not.to.contain('promiseIsLast');
div.prop('promiseIsLast', 'over9k');
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', void 0);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', null);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop({
abc: 123,
def: 456
});
expect(div.el.abc).to.equal(123);
return expect(div.el.def).to.equal(456);
});
test(".attr() - element attribute getter/setter", function () {
var div;
div = Dom.div();
expect(div.attr('myAttr')).to.equal(null);
expect(div.attr('myAttr', 192)).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('myAttr', '192')).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('anotherAttr', [1, 2, 3])).to.equal(div);
expect(div.attr('anotherAttr')).to.equal('1,2,3');
expect(div.el.getAttribute('myAttr')).to.equal('192');
expect(div.el.getAttribute('anotherAttr')).to.eql('1,2,3');
div.el.setAttribute('lastAttr', 9999);
expect(div.el.getAttribute('lastAttr')).to.equal('9999');
expect(div.attr('lastAttr')).to.equal('9999');
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr('promiseIsLast', 'over9k');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast', null);
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr({
abc: 123,
def: 456
});
expect(div.el.getAttribute('abc')).to.equal('123');
expect(div.el.getAttribute('def')).to.equal('456');
div.attr({
abc: 123,
def: null
});
expect(div.el.getAttribute('abc')).to.equal('123');
return expect(div.el.getAttribute('def')).to.equal(null);
});
test(".html - innerHTML getter/setter", function () {
var div;
div = Dom.div(null, Dom.div(), 'Some text', Dom.span(), Dom.div());
expect(div.children.length).to.equal(4);
expect(div.html).to.equal(div.el.innerHTML);
expect(div.children.length).to.equal(4);
div.html = '<section ID="test"></section>';
expect(div.html).to.equal('<section id="test"></section>');
expect(div.children.length).to.equal(1);
expect(div.children[0].el.id).to.equal('test');
return expect(div.children[0].el.nodeName.toLowerCase()).to.equal('section');
});
test(".text - textContent getter/setter", function () {
var div;
div = Dom.div(null, 'Some text', Dom.span(null, 'Inner Text'));
expect(div.children.length).to.equal(2);
expect(div.text).to.equal(div.el.textContent);
expect(div.text).to.equal('Some textInner Text');
expect(div.children.length).to.equal(2);
div.text = 'newText';
expect(div.text).to.equal('newText');
expect(div.el.textContent).to.equal('newText');
expect(div.children.length).to.equal(1);
return expect(div.children[0].el.nodeType).to.equal(3);
});
test(".addClass", function () {
var div;
div = Dom.div({
"class": 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.raw.className = div.raw.className.replace('new-selector', ' ');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector  ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('.period');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('period');
return expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector period');
});
test(".removeClass", function () {
var div;
div = Dom.div({
"class": 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('.period');
return expect(div.raw.className).to.equal('anotherSelector annoying-_-selector');
});
test(".toggleClass", function () {
var div;
div = Dom.div({
"class": 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector');
div.toggleClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector period');
div.toggleClass('.period');
expect(div.raw.className).to.equal('anotherSelector annoying-_-selector some-selector period');
div.toggleClass('annoying-_-selector');
return expect(div.raw.className).to.equal('anotherSelector some-selector period');
});
test(".setRef", function () {
var el;
el = DOM.div({
ref: 'name1'
});
expect(el.ref).to.equal('name1');
expect(el.options.ref).to.equal('name1');
expect(el.attr('data-ref')).to.equal('name1');
el.setRef('name2');
expect(el.ref).to.equal('name2');
expect(el.options.ref).to.equal('name2');
return expect(el.attr('data-ref')).to.equal('name2');
});
return test("Appending/prepending elements to a text node should do nothing", function () {
var div, text;
text = Dom.text('abc123');
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.append(Dom.text('def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.prepend(Dom.div(null, 'def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
div = Dom.div(null, '456');
div.appendTo(text);
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
return expect(div.parent).to.equal(void 0);
});
});
suite("Batch", function () {
test("Dom.batch() takes an iterable containing an array of elements or QuickDom elements and reveals the QuickElement API which will be applied for each element", function () {
var A, B, C, div, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
checkChildStructure(sandBox)();
checkChildStructure(div)(A, B, C);
Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text');
checkChildStructure(sandBox)(A, B, C);
checkChildStructure(div)();
expect(getComputedStyle(A.el).opacity).to.equal('0.5');
expect(getComputedStyle(C.el).opacity).to.equal('0.5');
expect(getComputedStyle(B.el).height).to.equal('30px');
expect(A.children.length).to.equal(1);
expect(B.children.length).to.equal(1);
expect(C.children.length).to.equal(1);
return expect(B.children[0].el.textContent).to.equal('Some Inner Text');
});
test("If a truthy value is passed as the 2nd arg of Dom.batch(), an array will be returned for the first method invoked containing the result for each element provided", function () {
var A, B, C, batch1, batch2, sandBox;
sandBox = Dom(sandbox);
A = Dom.div().appendTo(sandBox);
B = Dom.section().appendTo(sandBox);
C = Dom.div().appendTo(sandBox);
batch1 = Dom.batch([A, B, C]);
batch2 = Dom.batch([A, B, C], true);
expect(batch1.style('width')).to.equal(batch1);
expect(batch1.style('width', 47)).to.equal(batch1);
expect(batch2.style('width')).to.eql(['47px', '47px', '47px']);
expect(batch2.style('width', 33)).to.eql([A, B, C]);
return expect(batch2.style('width')).to.eql(['33px', '33px', '33px']);
});
test("If the .return() method is invoked on the batch instance, it will return the result set from the last method invocation", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text').style('opacity')["return"]();
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('width')["return"]()).to.eql(['38px', '38px', '38px']);
});
test("If the .return() method is invoked with a truthy argument, it will cause the next method invocation to return the results of the invocation for each element provided", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text')["return"](true).style('opacity');
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('height', '28px')["return"](true).css('width')).to.eql(['38px', '38px', '38px']);
});
test("Invoking the .reverse() method on the batch instance will reverse the elements array in the batch and thus the execution order", function () {
var A, B, C, arr;
A = Dom.div(null, 'AAA').appendTo(sandbox);
B = Dom.div(null, 'BBB').appendTo(sandbox);
C = Dom.div(null, 'CCC').appendTo(sandbox);
arr = [A, B, C];
expect(Dom.batch(arr).elements).not.to.equal(arr);
expect(Dom.batch(arr).elements).to.eql([A, B, C]);
expect(Dom.batch(arr).reverse().elements).to.eql([C, B, A]);
expect(Dom.batch(arr, 1).text()).to.eql(['AAA', 'BBB', 'CCC']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
return expect(Dom.batch(arr, 1).reverse().reverse().text()).to.eql(['AAA', 'BBB', 'CCC']);
});
return test("Batch.text/.html are methods instead of getters/setters", function () {
var batch, divA, divB;
divA = Dom.div(null, 'The divA');
divB = Dom.div(null, 'The divB');
batch = Dom.batch([divA, divB], true);
expect(batch.html()).to.eql(['The divA', 'The divB']);
expect(batch.text()).to.eql(['The divA', 'The divB']);
batch.html('<span>The div</span>');
expect(batch.html()).to.eql(['<span>The div</span>', '<span>The div</span>']);
expect(batch.text()).to.eql(['The div', 'The div']);
batch.text('THE DIV');
expect(batch.html()).to.eql(['THE DIV', 'THE DIV']);
return expect(batch.text()).to.eql(['THE DIV', 'THE DIV']);
});
});
suite("Templates", function () {
test("A reusable template can be generated via QuickDom.template()", function () {
var template;
template = Dom.template(['span', {
id: 'theSpan'
}]);
expect(typeof template).to.equal('object');
expect(template.type).to.equal('span');
expect(template.options).to.eql({
id: 'theSpan'
});
return expect(template.children).to.eql([]);
});
test("Templates can be turned into QuickDom instances via template.spawn() or by passing as arg to QuickDom", function () {
var spawnA, spawnB, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
spawnA = template.spawn();
spawnA.state('happy', true);
spawnB = Dom(template);
expect(spawnA.el).to.be.instanceOf(HTMLDivElement);
expect(spawnB.el).to.be.instanceOf(HTMLDivElement);
expect(spawnA).not.to.equal(spawnB);
expect(spawnA.el).not.to.equal(spawnB.el);
expect(spawnA.state('happy')).to.be["true"];
expect(spawnB.state('happy')).to.be["false"];
expect(spawnA.el.textContent).to.equal('Some Inner Text');
expect(spawnB.el.textContent).to.equal('Some Inner Text');
return expect(spawnA.el.className).to.equal('some-div');
});
test("Templates can be created from QuickElement instances", function () {
var section, sectionTemplate, templateSpawn;
section = Dom.section({
className: 'singleSection'
}, 'Some Inner Text');
section.state('happy', true);
sectionTemplate = section.toTemplate();
templateSpawn = sectionTemplate.spawn();
expect(sectionTemplate).not.to.equal(section);
expect(templateSpawn.el).not.to.equal(section.el);
expect(templateSpawn.el.className).to.equal('singleSection');
expect(templateSpawn.text).to.equal('Some Inner Text');
expect(section.state('happy')).to.be["true"];
return expect(templateSpawn.state('happy')).to.be["false"];
});
test("Templates can be created from DOM Elements", function () {
var sectionEl, sectionTemplate, templateSpawn;
sectionEl = document.createElement('section');
sectionEl.className = 'singleSection';
sectionEl.appendChild(document.createTextNode('Some Inner Text'));
sectionTemplate = Dom.template(sectionEl);
templateSpawn = sectionTemplate.spawn();
expect(templateSpawn.el).not.to.equal(sectionEl);
expect(templateSpawn.el.className).to.equal('singleSection');
return expect(templateSpawn.text).to.equal('Some Inner Text');
});
test("Templates can be extended via template.extend", function () {
var spawn, spawnA, spawnB, spawnC, template, templateCopyA, templateCopyB, templateCopyC;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
templateCopyA = template.extend({
type: 'span',
options: {
className: 'some-span'
},
children: []
});
templateCopyB = template.extend({
options: {
id: 'theMainDiv'
},
children: ['The Other Inner Text']
});
templateCopyC = template.extend(['section', {
className: 'some-section'
}, ['div', null, 'Very '], ['div', null, ['span', {
style: {
fontWeight: 500
}
}, 'Nested '], 'Inner Text']]);
expect(templateCopyA).not.to.equal(template);
expect(templateCopyB).not.to.equal(template);
spawn = template.spawn();
spawnA = templateCopyA.spawn();
spawnB = templateCopyB.spawn();
spawnC = templateCopyC.spawn();
expect(spawn.el.nodeName.toLowerCase()).to.equal('div');
expect(spawn.el.className).to.equal('some-div');
expect(spawn.el.id).to.equal('');
expect(spawn.text).to.equal('Some Inner Text');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('span');
expect(spawnA.el.className).to.equal('some-span');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.equal('some-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('The Other Inner Text');
expect(spawnC.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnC.el.className).to.equal('some-section');
expect(spawnC.el.id).to.equal('');
return expect(spawnC.text).to.equal('Very Nested Inner Text');
});
test("Templates can be spawned via extended config by passing a new config object to template.spawn()", function () {
var spawnA, spawnB, spawnRaw, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text', ['strong', {
className: 'highlighted',
style: {
opacity: 0.9
}
}, ' - Bolded Text']]);
spawnRaw = template.spawn().appendTo(sandbox);
spawnA = template.spawn({
type: 'section',
options: {
className: 'some-section',
style: {
opacity: 0.7
}
}
}).appendTo(sandbox);
spawnB = template.spawn({
options: {
className: 'main-div',
id: 'theMainDiv',
style: {
opacity: 0.5
}
},
children: [{
type: 'span',
children: [{
type: 'text',
options: {
text: 'Main Inner Text'
}
}]
}, {
type: 'b',
options: {
className: 'super-highlighted',
style: {
opacity: '0.2'
}
},
children: [{
options: {
text: ' - Very Bolded Text'
}
}]
}, {
type: 'text',
options: {
text: ' + Other Text'
}
}]
}).appendTo(sandbox);
expect(spawnRaw.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnRaw.el.className).to.equal('some-div');
expect(spawnRaw.el.id).to.equal('');
expect(spawnRaw.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnRaw.el).to.have.style('opacity', '1');
expect(spawnRaw.el.childNodes.length).to.equal(2);
expect(spawnRaw.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnRaw.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnRaw.el.childNodes[1].className).to.include('highlighted');
expect(spawnRaw.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnA.el.className).to.include('some-section');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnA.el).to.have.style('opacity', '0.7');
expect(spawnA.el.childNodes.length).to.equal(2);
expect(spawnA.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnA.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnA.el.childNodes[1].className).to.include('highlighted');
expect(spawnA.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.include('main-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('Main Inner Text - Very Bolded Text + Other Text');
expect(spawnB.el).to.have.style('opacity', '0.5');
expect(spawnB.el.childNodes.length).to.equal(3);
expect(spawnB.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(spawnB.el.childNodes[0].childNodes.length).to.equal(1);
expect(spawnB.el.childNodes[1].nodeName.toLowerCase()).to.equal('b');
expect(spawnB.el.childNodes[1].className).to.include('super-highlighted');
return expect(spawnB.el.childNodes[1]).to.have.style('opacity', '0.2');
});
test("Template.extend/spawn() can accept a template tree array", function () {
var cloneA, cloneB, cloneC, spawn, template;
template = Dom.template(['div', {
style: {
'opacity': 0.5
}
}, ['span', null, 'text of span'], ['div', null, 'text of div']]);
cloneA = template.extend(['section', {
style: {
'opacity': 0.8
}
}]);
cloneB = template.extend(['span', null, ['div']]);
cloneC = template.extend(['section', {
className: 'the-section',
style: {
color: 'blue'
}
}, ['section', null, 'text of subsection'], 'just a text node']);
spawn = template.spawn(['span', {
style: {
'width': 190,
'opacity': 0.4
}
}, 'so nice']).appendTo(sandbox);
expect(template.type).to.equal('div');
expect(template.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(template.children.length).to.equal(2);
expect(template.children[0].type).to.equal('span');
expect(template.children[0].children.length).to.equal(1);
expect(template.children[0].children[0].options.text).to.equal('text of span');
expect(template.children[1].type).to.equal('div');
expect(template.children[1].children.length).to.equal(1);
expect(template.children[1].children[0].options.text).to.equal('text of div');
expect(cloneA.type).to.equal('section');
expect(cloneA.options).to.eql({
style: {
'opacity': 0.8
}
});
expect(cloneA.children.length).to.equal(2);
expect(cloneA.children[0].type).to.equal('span');
expect(cloneA.children[0].children.length).to.equal(1);
expect(cloneA.children[0].children[0].options.text).to.equal('text of span');
expect(cloneA.children[1].type).to.equal('div');
expect(cloneA.children[1].children.length).to.equal(1);
expect(cloneA.children[1].children[0].options.text).to.equal('text of div');
expect(cloneB.type).to.equal('span');
expect(cloneB.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(cloneB.children.length).to.equal(2);
expect(cloneB.children[0].type).to.equal('div');
expect(cloneB.children[0].children.length).to.equal(1);
expect(cloneB.children[0].children[0].options.text).to.equal('text of span');
expect(cloneB.children[1].type).to.equal('div');
expect(cloneB.children[1].children.length).to.equal(1);
expect(cloneB.children[1].children[0].options.text).to.equal('text of div');
expect(cloneC.type).to.equal('section');
expect(cloneC.options).to.eql({
className: 'the-section',
style: {
'opacity': 0.5,
'color': 'blue'
}
});
expect(cloneC.children.length).to.equal(2);
expect(cloneC.children[0].type).to.equal('section');
expect(cloneC.children[0].children.length).to.equal(1);
expect(cloneC.children[0].children[0].options.text).to.equal('text of subsection');
expect(cloneC.children[1].type).to.equal('text');
expect(cloneC.children[1].options.text).to.equal('just a text node');
spawn.style('display', 'block');
expect(spawn.el.nodeName.toLowerCase()).to.equal('span');
expect(spawn.el).to.have.style('opacity', '0.4');
expect(spawn.el).to.have.style('width', '190px');
expect(spawn.el.childNodes.length).to.equal(2);
expect(spawn.el.childNodes[0].nodeType).to.equal(3);
expect(spawn.el.childNodes[0].textContent).to.equal('so nice');
expect(spawn.el.childNodes[1].nodeName.toLowerCase()).to.equal('div');
return expect(spawn.el.childNodes[1].textContent).to.equal('text of div');
});
test("Template.extend/spawn() can accept other template instances as children which will replace existing children", function () {
var childA, childB, childC, spawnedA, spawnedB, spawnedC, template, templateCopy;
template = Dom.template(['div', null, ['span', {
style: {
opacity: 0.5
}
}], 'original text']);
childA = Dom.template(['div', {
style: {
fontFamily: 'pink'
}
}]);
childB = Dom.template('replaced text');
childC = Dom.template(['section']);
templateCopy = template.extend(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]);
spawnedA = template.spawn().appendTo(sandbox);
spawnedB = templateCopy.spawn().appendTo(sandbox);
spawnedC = template.spawn(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]).appendTo(sandbox);
expect(spawnedA.type).to.equal('div');
expect(spawnedA.children.length).to.equal(2);
expect(spawnedA.children[0].type).to.equal('span');
expect(spawnedA.children[0].raw).to.have.style('opacity', '0.5');
expect(spawnedA.children[0].raw).to.have.style('fontFamily', '');
expect(spawnedA.children[1].type).to.equal('text');
expect(spawnedA.text).to.equal('original text');
expect(spawnedB.type).to.equal('span');
expect(spawnedB.children.length).to.equal(3);
expect(spawnedB.children[0].type).to.equal('div');
expect(spawnedB.children[0].raw).to.have.style('opacity', '');
expect(spawnedB.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedB.children[1].type).to.equal('text');
expect(spawnedB.text).to.equal('replaced text');
expect(spawnedB.children[2].type).to.equal('section');
expect(spawnedB.raw).to.have.style('fontSize', '77px');
expect(spawnedC.type).to.equal('span');
expect(spawnedC.children.length).to.equal(3);
expect(spawnedC.children[0].type).to.equal('div');
expect(spawnedC.children[0].raw).to.have.style('opacity', '');
expect(spawnedC.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedC.children[1].type).to.equal('text');
expect(spawnedC.text).to.equal('replaced text');
expect(spawnedC.children[2].type).to.equal('section');
return expect(spawnedC.raw).to.have.style('fontSize', '77px');
});
test("Template.extend/spawn() will consider the passed object as the options object if it doesn't contain template-related props", function () {
var template;
template = DOM.template(['div', {
defaults: {
text: 'default'
},
computers: {
text: function (text) {
return this.text = text;
}
}
}, ['span', {
ref: 'theSpan'
}]]);
expect(template.options.style).to.equal(void 0);
expect(template.options.label).to.equal(void 0);
expect(template.extend({
options: {
label: 'abc123'
}
}).options.label).to.equal('abc123');
expect(template.extend({
label: 'def456'
}).options.label).to.equal('def456');
expect(template.extend({
style: 'def456'
}).options.style).to.equal('def456');
expect(template.extend({
style: 'def456',
type: 'section'
}).options.style).to.equal(void 0);
expect(template.extend({
children: {
theSpan: {
style: 'ghi789'
}
}
}).child.theSpan.options.style).to.equal('ghi789');
expect(template.extend({
children: [{
defaults: 'ghi789'
}]
}).child.theSpan.options.defaults).to.equal('ghi789');
expect(template.spawn({
children: {
theSpan: {
className: 'GHI789'
}
}
}).child.theSpan.raw.className).to.equal('GHI789');
expect(template.spawn().text).to.equal('default');
return expect(template.spawn({
defaults: {
text: 'diff'
}
}).text).to.equal('diff');
});
test("Templates can have other templates as their children", function () {
var headerTemplate, headerTemplateClone, section, sectionTemplate;
headerTemplate = Dom.template(['header', {
style: {
'height': '200px'
}
}, ['span', {
style: {
'textAlign': 'center'
}
}, 'This is bolded text'], ' while this is not']);
headerTemplateClone = Dom.template(headerTemplate);
sectionTemplate = Dom.template(['section', null, headerTemplate]);
section = sectionTemplate.spawn().appendTo(sandbox);
expect(headerTemplateClone).to.equal(headerTemplate);
expect(sectionTemplate.children.length).to.equal(1);
expect(sectionTemplate.children[0]).to.equal(headerTemplate);
expect(sectionTemplate.children[0].children.length).to.equal(2);
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
expect(section.text).to.equal('This is bolded text while this is not');
return expect(section.children[0].children[0].style('textAlign')).to.equal('center');
});
test("A global options object can be passed as the 2nd arg to template.extend/spawn() which will be applied to all templates, spawns, & their children", function () {
var dynamicHeightStyle, headerTemplate, obj, section, sectionTemplate;
obj = {
myHeight: '150px'
};
obj.obj = obj;
dynamicHeightStyle = {
'height': function (related) {
expect(related).to.equal(obj);
return related.myHeight;
}
};
headerTemplate = Dom.template(['header', {
style: {
'width': '23px'
}
}, ['div', {
style: {
'width': '23px'
}
}, 'This is bolded text'], ' while this is not']);
sectionTemplate = Dom.template(['section', {
style: {
'width': '23px'
}
}, headerTemplate]);
section = sectionTemplate.spawn({
options: {
related: window
}
}, {
related: obj,
style: dynamicHeightStyle
}).appendTo(sandbox);
expect(section.raw.style.height).to.equal('150px');
expect(section.children[0].raw.style.height).to.equal('150px');
expect(section.children[0].children[0].raw.style.height).to.equal('150px');
expect(section.raw.style.width).to.equal('');
expect(section.children[0].raw.style.width).to.equal('');
expect(section.children[0].children[0].raw.style.width).to.equal('');
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
return expect(section.text).to.equal('This is bolded text while this is not');
});
test("Template children can be navigated by ref using the .child property", function () {
var rendered, template;
template = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
expect(typeof template.child).to.equal('object');
expect(Object.keys(template.child).length).to.equal(6);
expect(template.child.divA).to.equal(template);
expect(template.child.childA.type).to.equal('div');
expect(template.child.childA).to.equal(template.children[0]);
expect(template.child.childA_1).to.equal(template.children[0].children[0]);
expect(template.child.childA_2).to.equal(template.children[0].children[1]);
expect(template.child.childB_1).to.equal(template.children[1].children[0]);
expect(template.child.childB_2).to.equal(template.children[1].children[1]);
rendered = template.spawn();
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
return expect(rendered.text).to.equal('The Text');
});
test("Template's children can be extend/spawned with a {ref:newChild} map instead of a positional array", function () {
var rendered, templateCopy, templateCopy2, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}], {
value: 'theValue'
});
templateCopy2 = templateMain.extend({
children: {
childA: {
children: {
newChild: ['div']
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}
});
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(6);
expect(Object.keys(templateCopy.child).length).to.equal(8);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA_1).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[1]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[1].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.childD).to.equal(templateCopy.children[2]);
rendered = templateCopy.spawn().appendTo(sandbox);
expect(Object.keys(rendered.child).length).to.equal(8);
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
expect(rendered.child.childA.raw).to.have.style('display', 'inline-block');
expect(rendered.child.CHILDa_2.prop('href')).to.contain('http://google.com');
expect(rendered.child.childB_1.prop('value')).to.equal('theValue');
return expect(rendered.child.childD.attr('data-ref')).to.equal('childD');
});
test("Templates can be passed as replacement/new children in {ref:newChild} extension maps", function () {
var childA, childB, childC, templateCopy, templateMain;
childA = Dom.template(['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]]);
childB = Dom.template(['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]);
childC = Dom.template(['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]);
templateMain = Dom.template(['div', {
id: 'divA'
}, childA, childB]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form'
},
childB: childB.extend({
ref: 'ChildB'
}),
childC: childC.extend({
ref: 'ChildC'
})
}], {
value: 'theValue'
});
expect(Object.keys(templateMain.child).length).to.equal(7);
expect(Object.keys(templateCopy.child).length).to.equal(10);
expect(templateMain.children.length).to.equal(2);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(2);
expect(templateCopy.child.ChildB).to.equal(templateCopy.children[1]);
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateMain.child.childC).to.equal(void 0);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.ChildC).to.equal(templateCopy.children[2]);
expect(Object.keys(templateMain.spawn().child).length).to.equal(7);
return expect(Object.keys(templateCopy.spawn().child).length).to.equal(10);
});
test("ref-children maps shouldn't be modified by the template extender", function () {
var config, spawnA, spawnB, spawnC, spawnD, templateA, templateB, templateC, templateD;
config = {
children: {
childA_1: {
type: 'div',
options: {
style: {
display: 'none'
}
}
}
}
};
templateA = Dom.template(['div', {
ref: 'divA'
}, ['div', {
ref: 'childA'
}, ['span', {
ref: 'childA_1'
}]]]);
templateA.child.childA_1;
templateB = templateA.extend();
templateC = templateA.extend(config);
templateD = templateA.extend(config);
spawnA = templateA.spawn().appendTo(sandbox);
spawnB = templateB.spawn().appendTo(sandbox);
spawnC = templateC.spawn().appendTo(sandbox);
spawnD = templateD.spawn().appendTo(sandbox);
expect(spawnA.child.childA_1.type).to.equal('span');
expect(spawnA.child.childA_1.style('display')).to.equal('inline');
expect(spawnB.child.childA_1.type).to.equal('span');
expect(spawnB.child.childA_1.style('display')).to.equal('inline');
expect(spawnC.child.childA_1.type).to.equal('div');
expect(spawnC.child.childA_1.style('display')).to.equal('none');
expect(spawnD.child.childA_1.type).to.equal('div');
return expect(spawnD.child.childA_1.style('display')).to.equal('none');
});
test("Null values in ref-children map will remove the child from the template", function () {
var templateCopy, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]], ['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_1: null,
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childB_1: null,
childC: null
}]);
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(10);
expect(Object.keys(templateCopy.child).length).to.equal(6);
expect(templateCopy.children.length).to.equal(2);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(1);
expect(templateMain.child.childA_1).to.equal(templateMain.child.childA_1);
expect(templateCopy.child.childA_1).to.equal(void 0);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[0].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(void 0);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[0]);
expect(templateMain.child.childB_1).to.equal(templateMain.children[1].children[0]);
expect(templateMain.child.childB_2).to.equal(templateMain.children[1].children[1]);
expect(templateMain.child.childC).to.equal(templateMain.children[2]);
return expect(templateCopy.child.childC).to.equal(void 0);
});
test("Null values in options object will delete keys during template extension", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
ref: 'theDiv',
computers: {
valueA: function () {
return 1;
},
valueB: function () {
return 2;
}
},
style: {
position: 'relative',
width: 100,
height: 100,
$active: {
width: 200,
height: 200
}
}
}]);
templateB = templateA.extend({
options: {
ref: null,
computers: {
valueA: null,
valueB: function () {
return 3;
}
},
style: {
height: null,
opacity: 1,
$active: {
width: null
}
}
}
});
spawnA = templateA.spawn();
spawnB = templateB.spawn();
expect(spawnA.ref).to.equal('theDiv');
expect(spawnB.ref).to.equal(void 0);
expect(typeof spawnA.options.computers.valueA).to.equal('function');
expect(typeof spawnB.options.computers.valueA).to.equal('undefined');
expect(typeof spawnA.options.computers.valueB).to.equal('function');
expect(typeof spawnB.options.computers.valueB).to.equal('function');
expect(spawnA.options.computers.valueB()).to.equal(2);
expect(spawnB.options.computers.valueB()).to.equal(3);
expect(spawnA.options.style.position).to.equal('relative');
expect(spawnB.options.style.position).to.equal('relative');
expect(spawnA.options.style.width).to.equal(100);
expect(spawnB.options.style.width).to.equal(100);
expect(spawnA.options.style.height).to.equal(100);
expect(spawnB.options.style.height).to.equal(void 0);
expect(spawnA.options.style.opacity).to.equal(void 0);
expect(spawnB.options.style.opacity).to.equal(1);
expect(spawnA.options.style.$active.width).to.equal(200);
expect(spawnB.options.style.$active.width).to.equal(void 0);
expect(spawnA.options.style.$active.height).to.equal(200);
return expect(spawnB.options.style.$active.height).to.equal(200);
});
test("When spawning elements the options object passed to the spawns should be a clone of the template's options", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
style: {
display: 'block'
}
}]);
templateB = Dom.template(['div', {
style: {
display: 'block'
}
}]);
spawnA = templateA.spawn({
ref: 'a'
});
spawnB = templateA.spawn();
expect(spawnA.options).not.to.equal(templateA.options);
expect(spawnA.options.style).not.to.equal(templateA.options.style);
expect(templateA.options.style.$base).to.equal(void 0);
expect(spawnB.options).not.to.equal(templateB.options);
expect(spawnB.options.style).not.to.equal(templateB.options.style);
return expect(templateB.options.style.$base).to.equal(void 0);
});
test("Templates will be spawned when appended to DOM elements", function () {
var div, template;
template = Dom.template(['span', {
ref: 'theSpan'
}, 'someText']);
div = Dom.div(null, 'label: ');
expect(div.children.length).to.equal(1);
expect(div.text).to.equal('label: ');
div.append(template);
expect(div.children.length).to.equal(2);
expect(div.text).to.equal('label: someText');
div.prepend(template);
expect(div.children.length).to.equal(3);
return expect(div.text).to.equal('someTextlabel: someText');
});
return suite("Data computers", function () {
test("Templates accept options.computers fn map which will be invoked with provided options.data upon spawning", function () {
var receivedData, template;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
expect(receivedData).to.equal(null);
template.spawn();
expect(receivedData).to.equal(null);
template.spawn({
data: {
'someLabel': 'works'
}
});
return expect(receivedData).to.equal('works');
});
test("Computers will be have the spawned QuickElement instance as their context", function () {
var context, instance, template;
context = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return context = this;
}
}
}]);
expect(context).to.equal(null);
template.spawn();
expect(context).to.equal(null);
instance = template.spawn({
data: {
'someLabel': void 0
}
});
return expect(context).to.equal(instance);
});
test("Values specified in options.defaults will be used if not specified in options.data upon spawning", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data.toLowerCase();
},
'second': function (data) {
return results.second = data.toLowerCase();
},
'third': function (data) {
return results.third = data.toLowerCase();
}
},
defaults: {
'first': 'firstValue here',
'third': 'thirdValue here'
}
}]);
expect(results).to.deep.equal({});
template.spawn();
expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'thirdvalue here'
});
instance = template.spawn({
data: {
'third': 'customvalue here'
}
});
return expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'customvalue here'
});
});
test("Values can be of any type", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
},
'fourth': function (data) {
return results.fourth = data;
},
'fifth': function (data) {
return results.fifth = data;
},
'sixth': function (data) {
return results.sixth = data;
}
},
defaults: {
'first': ['abc', '123'],
'third': {
a: 1,
b: 12
},
'sixth': 999
}
}]);
instance = template.spawn({
data: {
'second': null,
'fourth': 19,
'fifth': false,
'sixth': void 0
}
});
expect(results).to.deep.equal({
first: ['abc', '123'],
second: null,
third: {
a: 1,
b: 12
},
fourth: 19,
fifth: false,
sixth: void 0
});
return expect(Object.keys(results).length).to.equal(6);
});
test("Values in options.data that do not have a matching computer will be skipped", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
}
}
}]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
return expect(Object.keys(results).length).to.equal(3);
});
test("Computers in template children will receive the parent's options.data", function () {
var instance, results, template;
results = {
parent: {},
childA: {},
childB: {},
childC: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
}
}, ['div', {
computers: {
'first': function (data) {
return results.childA.first = data;
},
'second': function (data) {
return results.childA.second = data;
},
'third': function (data) {
return results.childA.third = data;
}
}
}], ['div', null, ['div', {
computers: {
'first': function (data) {
return results.childB.first = data;
},
'fourth': function (data) {
return results.childB.fourth = data;
}
}
}], ['div', {
computers: {
'first': function (data) {
return results.childC.first = data;
},
'sixth': function (data) {
return results.childC.sixth = data;
}
}
}]]]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results.parent).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childA).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childB).to.deep.equal({
'first': 'first value',
'fourth': 'fourth value'
});
return expect(results.childC).to.deep.equal({
'first': 'first value'
});
});
test("Parent defaults will not be passed to children", function () {
var instance, results, template;
results = {
parent: {},
child: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
},
defaults: {
'second': 'second value',
'fourth': 'fourth value'
}
}, ['div', {
computers: {
'first': function (data) {
return results.child.first = data;
},
'second': function (data) {
return results.child.second = data;
},
'third': function (data) {
return results.child.third = data;
},
'fourth': function (data) {
return results.child.fourth = data;
}
},
defaults: {
'first': 'first value'
}
}]]);
instance = template.spawn({
data: {
'third': 'third value'
}
});
expect(results.parent).to.deep.equal({
'second': 'second value',
'third': 'third value'
});
return expect(results.child).to.deep.equal({
'first': 'first value',
'third': 'third value'
});
});
test("Defaults should only be applied once", function () {
var count, template;
count = {
parent: 0,
child: 0,
childChild: 0
};
template = Dom.template(['div', {
ref: 'parent',
computers: {
'first': function (data) {
return count.parent++;
}
},
defaults: {
'first': 'first value'
}
}, ['div', {
ref: 'child',
computers: {
'first': function (data) {
return count.parent++;
},
'second': function (data) {
return count.child++;
}
},
defaults: {
'second': 'second value'
}
}, ['div', {
ref: 'child',
computers: {
'fourth': function (data) {
return count.childChild++;
}
},
defaults: {
'fourth': 'fourth value'
}
}]]]);
template.spawn({
data: {
'third': 'third value'
}
});
expect(count).to.eql({
parent: 1,
child: 1,
childChild: 1
});
template.spawn();
return expect(count).to.eql({
parent: 2,
child: 2,
childChild: 2
});
});
test("Data/defaults should be applied even when parent doesn't have computers", function () {
var count, template;
count = 0;
template = Dom.template(['div', null, ['section', null, ['div', {
computers: {
'first': function (data) {
return count++;
}
},
defaults: {
'first': 'first value'
}
}]]]);
template.spawn({
data: {
'first': 'second value'
}
});
expect(count).to.equal(1);
template.spawn();
return expect(count).to.equal(2);
});
test("Data can be re-applied via .applyData(data)", function () {
var count, instance, results, template;
results = {};
count = {
a: 0,
b: 0,
c: 0,
d: 0,
e: 0,
f: 0
};
template = Dom.template(['div', {
computers: {
'a': function (data) {
results.a = data;
return count.a++;
},
'b': function (data) {
results.b = data;
return count.b++;
},
'c': function (data) {
results.c = data;
return count.c++;
},
'd': function (data) {
results.d = data;
return count.d++;
},
'e': function (data) {
results.e = data;
return count.e++;
},
'f': function (data) {
results.f = data;
return count.f++;
}
},
defaults: {
'a': 1,
'c': 3,
'f': 6
}
}]);
instance = template.spawn({
data: {
b: 2,
d: 4,
e: 5,
f: 6
}
});
expect(results).to.deep.equal({
a: 1,
b: 2,
c: 3,
d: 4,
e: 5,
f: 6
});
expect(count).to.deep.equal({
a: 1,
b: 1,
c: 1,
d: 1,
e: 1,
f: 1
});
instance.applyData({
a: 11,
b: 22,
d: 44,
e: 55
});
expect(results).to.deep.equal({
a: 11,
b: 22,
c: 3,
d: 44,
e: 55,
f: 6
});
return expect(count).to.deep.equal({
a: 2,
b: 2,
c: 2,
d: 2,
e: 2,
f: 2
});
});
test("The '_init' computer will be run by default on template spawn regardless of data", function () {
var count, template;
count = {};
template = Dom.template(['div', {
ref: 'divA',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}, ['div', {
ref: 'divB',
data: {
first: '1'
},
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}], ['div', {
ref: 'divC'
}, ['div', {
ref: 'divD'
}, ['div', {
ref: 'divE',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}]]]]);
expect(count).to.eql({});
template.spawn();
expect(count).to.eql({
divA: 1,
divB: 1,
divE: 1
});
template.spawn();
expect(count).to.eql({
divA: 2,
divB: 2,
divE: 2
});
template.child.divB.spawn({
data: {
second: '2'
}
});
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 2
});
template.child.divC.spawn();
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 3
});
template.child.divC.spawn();
return expect(count).to.eql({
divA: 2,
divB: 3,
divE: 4
});
});
test("The '_init' computer will be passed all of the data the template spawn receives", function () {
var expected, result, template;
result = {
divA: {},
divB: {}
};
template = Dom.template(['div', {
ref: 'divA',
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}, ['div', {
ref: 'divProxy'
}, ['div', {
ref: 'divB',
defaults: {
first: '1'
},
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}]]]);
expected = {
href: 'abc',
name: '123',
_init: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
};
expect(result).to.eql({
divA: {},
divB: {}
});
template.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
expect(result).to.eql({
divA: expected,
divB: expected
});
delete result.divA;
({
divB: null
});
template.child.divB.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
return expect(result).to.eql({
divB: expected
});
});
test("Data can be specified via options object", function () {
var receivedData, template, templateCopy;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
templateCopy = template.extend({
options: {
data: {
'someLabel': 'works'
}
}
});
template.spawn();
expect(receivedData).to.equal(null);
templateCopy.spawn();
expect(receivedData).to.equal('works');
template.spawn({
options: {
data: {
'someLabel': 'also works'
}
}
});
return expect(receivedData).to.equal('also works');
});
test("Data specified in children's options object will be merged with the parent's data", function () {
var receivedData, template, templateCopy;
receivedData = {
abc: null,
def: null
};
template = Dom.template(['div', null, ['span', {
data: {
abc: 123
},
computers: {
'abc': function (data) {
return receivedData.abc = data || 'nothing';
},
'def': function (data) {
return receivedData.def = data || 'nothing';
}
}
}]]);
templateCopy = template.extend({
options: {
data: {
def: 456
}
}
});
template.spawn();
expect(receivedData).to.eql({
abc: 123,
def: null
});
receivedData = {
abc: null,
def: null
};
templateCopy.spawn();
expect(receivedData).to.eql({
abc: 123,
def: 456
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
def: 789
}
}
});
expect(receivedData).to.eql({
abc: 123,
def: 789
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
abc: 789
}
}
});
return expect(receivedData).to.eql({
abc: 789,
def: null
});
});
test("Data won't be passed to children if options.passDataToChildren is false", function () {
var el1, el2, receivedData, template1, template2;
receivedData = {
parent: null,
child: null
};
template1 = DOM.template(['div', {
computers: {
abc: function (data) {
return receivedData.parent = data;
}
}
}, ['span', {
computers: {
abc: function (data) {
return receivedData.child = data;
}
}
}]]);
template2 = template1.extend({
passDataToChildren: false
});
expect(receivedData).to.eql({
parent: null,
child: null
});
el1 = template1.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: 123
});
receivedData = {
parent: null,
child: null
};
el2 = template2.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: null
});
receivedData = {
parent: null,
child: null
};
el1.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: 456
});
receivedData = {
parent: null,
child: null
};
el2.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: null
});
el2.lastChild.applyData({
abc: 789
});
return expect(receivedData).to.eql({
parent: 456,
child: 789
});
});
test("Data should be invoked for parents after invoked children", function () {
var computers, el, history, template;
history = [];
computers = {
_init: function () {
return history.push(this.ref);
},
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers: computers,
id: 'parent'
}, ['div', {
computers: computers,
id: 'child1'
}, ['div', {
computers: computers,
id: 'child2'
}]], ['div', {
computers: computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn();
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
return expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
});
return test("Computers will be invoked only one time per element if options.invokeComputersOnce is on", function () {
var computers, el, history, template;
history = [];
computers = {
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers: computers,
id: 'parent',
invokeComputersOnce: true
}, ['div', {
computers: computers,
id: 'child1'
}, ['div', {
computers: computers,
id: 'child2',
invokeComputersOnce: true
}]], ['div', {
computers: computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn({
data: {
abc: 123
}
});
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
expect(history).to.eql(['child1', 'child3']);
history.length = 0;
el.applyData({
abc: 456
});
return expect(history).to.eql(['child1', 'child3']);
});
});
});
return suite("Misc", function () {
test("QuickDom.isTemplate", function () {
expect(Dom.isTemplate(Dom.template(['div']))).to.be["true"];
expect(Dom.isTemplate(Dom.div())).to.be["false"];
expect(Dom.isTemplate(Dom.div()[0])).to.be["false"];
expect(Dom.isTemplate({})).to.be["false"];
expect(Dom.isTemplate('string')).to.be["false"];
expect(Dom.isTemplate(5)).to.be["false"];
expect(Dom.isTemplate(false)).to.be["false"];
return expect(Dom.isTemplate(true)).to.be["false"];
});
test("QuickDom.isQuickEl", function () {
expect(Dom.isQuickEl(Dom.template(['div']))).to.be["false"];
expect(Dom.isQuickEl(Dom.div())).to.be["true"];
expect(Dom.isQuickEl(Dom.text())).to.be["true"];
expect(Dom.isQuickEl(Dom.div()[0])).to.be["false"];
expect(Dom.isQuickEl({})).to.be["false"];
expect(Dom.isQuickEl('string')).to.be["false"];
expect(Dom.isQuickEl(5)).to.be["false"];
expect(Dom.isQuickEl(false)).to.be["false"];
return expect(Dom.isQuickEl(true)).to.be["false"];
});
test("QuickDom.isEl", function () {
expect(Dom.isEl(Dom.template(['div']))).to.be["false"];
expect(Dom.isEl(Dom.div())).to.be["false"];
expect(Dom.isEl(Dom.text())).to.be["false"];
expect(Dom.isEl(Dom.div()[0])).to.be["true"];
expect(Dom.isEl(Dom.text()[0])).to.be["false"];
expect(Dom.isEl({})).to.be["false"];
expect(Dom.isEl('string')).to.be["false"];
expect(Dom.isEl(5)).to.be["false"];
expect(Dom.isEl(false)).to.be["false"];
return expect(Dom.isEl(true)).to.be["false"];
});
test("Stringification", function () {
var section, sectionCopy;
section = Dom(['section', {
id: 'theSection',
className: 'theSectionClass',
style: {
'position': 'relative',
'opacity': 0.5,
'fontSize': function () {
return '29px';
},
$happy: {
fontSize: '11px',
$relaxed: {
fontSize: '8px'
}
}
}
}, ['div', {
id: 'childA',
style: {
position: 'relative'
}
}, 'childA-innertext'], 'section-innertext', ['span', {
id: 'childB',
ref: 'childB-ref!',
style: {
position: 'absolute'
}
}, 'childB-innertext', ['text', {
text: 'childB-innertext 2'
}], ['a', {
url: 'https://google.com'
}]]]).appendTo(sandbox);
window.stringified = JSON.stringify(section, null, 2);
sectionCopy = Dom(JSON.parse(stringified)).appendTo(sandbox);
expect(sectionCopy.type).to.equal(section.type);
expect(sectionCopy.ref).to.equal(section.ref);
expect(sectionCopy.el.id).to.equal(section.el.id);
expect(sectionCopy.el.className).to.equal(section.el.className);
expect(sectionCopy.style('position')).to.equal(section.style('position'));
expect(sectionCopy.style('opacity')).to.equal(section.style('opacity'));
expect(sectionCopy.style('fontSize')).not.to.equal(section.style('fontSize'));
section.style('fontSize', null);
section.state('happy', true);
sectionCopy.state('happy', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
section.state('relaxed', true);
sectionCopy.state('relaxed', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
expect(sectionCopy.children.length).to.equal(section.children.length);
expect(Object.keys(sectionCopy.child).length).to.equal(Object.keys(section.child).length);
expect(sectionCopy.text).to.equal(section.text);
expect(sectionCopy.html).to.equal(section.html);
expect(sectionCopy.children[0].style('position')).to.equal(section.children[0].style('position'));
expect(sectionCopy.children[2].style('position')).to.equal(section.children[2].style('position'));
return expect(sectionCopy.children[2].ref).to.equal(section.children[2].ref);
});
test("Chaining", function () {
var chainResult, div, head;
div = Dom.div();
chainResult = div.state('abc', true).resetState().style().css('width', 12).attr('test', 123).prop('anotherTest', 123).updateStateStyles({
height: 50
}).updateStateTexts({
$base: 'abc'
}).append().appendTo().prepend().prependTo().before().after().insertBefore().insertAfter().detach().wrap(Dom.section()).unwrap().wrap(Dom.header()).replace().appendTo(sandbox).wrap(head = Dom.header()).on('abc', function () {}).emit('abc').off('abc').off();
expect(chainResult).to.equal(div);
expect(sandbox.children[0]).to.equal(head.el);
expect(div.parent).to.equal(head);
return expect(div.css('width')).to.equal('12px');
});
return test("Invalid Arguments", function () {
var cb, div, emitCount, text;
text = Dom.text('someText', {
lostOpts: true
});
div = Dom.div({
lostOpts: true
});
expect(Dom()).to.equal(void 0);
expect(Dom(null)).to.equal(void 0);
expect(Dom({})).to.equal(void 0);
expect(div.updateOptions()).to.equal(div);
expect(text.options.lostOpts).to.equal(void 0);
expect(div.options.lostOpts).to.equal(true);
expect(div.on()).to.equal(div);
expect(div.on('abc')).to.equal(div);
expect(div.on('abc', {})).to.equal(div);
expect(div.once('abc')).to.equal(div);
expect(div.off('somethingFake')).to.equal(div);
emitCount = 0;
div.on('something', cb = function () {
return emitCount++;
});
expect(div.emit('')).to.equal(div);
expect(div.emit()).to.equal(div);
expect(div.emitPrivate('none')).to.equal(div);
expect(div.emitPrivate('')).to.equal(div);
expect(div.emitPrivate()).to.equal(div);
expect(emitCount).to.equal(0);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(1);
expect(div.off('something', function () {})).to.equal(div);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(2);
div.css(null, '129');
expect(div.el.style["null"]).to.equal(void 0);
expect(div.state()).to.eql([]);
expect(div.state(null, true)).to.equal(void 0);
expect(div.state(123, true)).to.equal(void 0);
expect(div.state('base', true)).to.equal(div);
expect(div.state('base')).to.be["false"];
expect(div.state('$whatevs', true)).to.equal(div);
expect(div.state('whatevs')).to.be["true"];
expect(div.state('another')).to.be["false"];
expect(div.state('another', true)).to.equal(div);
expect(div.state('another')).to.be["true"];
expect(div.state('another', void 0)).to.equal(div);
expect(div.state('another')).to.be["false"];
expect(div.updateStateStyles({
$base: {
width: 1
}
})).to.equal(div);
expect(div.updateStateStyles(null)).to.equal(div);
expect(div.updateStateTexts({
$base: 'abc'
})).to.equal(div);
expect(div.updateStateTexts(null)).to.equal(div);
div.appendTo(Dom(sandbox));
expect(div.parent).to.equal(Dom(sandbox));
div.append(true);
expect(div.children.length).to.equal(0);
div.appendTo(document);
expect(div.parent).to.equal(Dom(sandbox));
div.prepend(true);
expect(div.children.length).to.equal(0);
div.prependTo(true);
expect(div.parent).to.equal(Dom(sandbox));
div.after(true);
expect(div.children.length).to.equal(0);
div.insertAfter(123);
expect(div.parent).to.equal(Dom(sandbox));
div.before(true);
expect(div.children.length).to.equal(0);
div.insertBefore(123);
expect(div.parent).to.equal(Dom(sandbox));
div.wrap(123);
expect(div.parent).to.equal(Dom(sandbox));
div.replace(123);
expect(div.parent).to.equal(Dom(sandbox));
div.detach();
expect(div.parent).to.equal(void 0);
div.unwrap();
expect(div.parent).to.equal(void 0);
expect(Dom(sandbox).children.length).to.equal(0);
div.appendTo(Dom(sandbox));
expect(Dom(sandbox).children.length).to.equal(1);
if (Dom(sandbox)._removeChild) {
Dom(sandbox)._removeChild(text);
Dom(sandbox)._removeChild(Dom.div());
expect(Dom(sandbox).children.length).to.equal(1);
}
expect(function () {
return Dom.batch();
}).to["throw"]();
expect(function () {
return Dom.batch({});
}).to["throw"]();
expect(function () {
return Dom.batch(5432);
}).to["throw"]();
expect(function () {
return Dom.batch([]);
}).to["throw"]();
expect(function () {
return Dom.batch([12]).append(Dom.div());
}).to["throw"]();
expect(function () {
return Dom.batch([12]);
}).not.to["throw"]();
expect(function () {
return Dom.template();
}).to["throw"]();
expect(function () {
return Dom.template(null);
}).to["throw"]();
expect(function () {
return Dom.template({});
}).to["throw"]();
expect(function () {
return Dom.template([8482, {
className: 't'
}]);
}).to["throw"]();
expect(function () {
return Dom.template(['div', 'someString']);
}).to["throw"]();
expect(function () {
return Dom.template(['div', null, 'Some Inner Text']);
}).not.to["throw"]();
expect(function () {
return Dom.div({
style: {
opacity: 0.5,
'@abc(max-width:390)': {
opacity: 1
}
}
}).appendTo(sandbox);
}).not.to["throw"]();
return expect(function () {
div = Dom.div();
div.pipeState(div);
div.state('happy', true);
return expect(div.state('happy')).to.equal(true);
}).not.to["throw"]();
});
});
});
HTMLElement.prototype.onEvent = function (eventName, callback) {
if (this.addEventListener) {
return this.addEventListener(eventName, callback);
} else {
return this.attachEvent("on" + eventName, callback);
}
};
HTMLElement.prototype.removeEvent = function (eventName, callback) {
if (this.removeEventListener) {
return this.removeEventListener(eventName, callback);
} else {
return this.detachEvent("on" + eventName, callback);
}
};
HTMLElement.prototype.emitEvent = function (eventName) {
var event;
event = document.createEvent('Event');
event.initEvent(eventName, true, false);
return this.dispatchEvent(event);
};
if (HTMLElement.name !== 'HTMLElement') {
HTMLElement.name = 'HTMLElement';
Text.name = 'Text';
nonElementSuffix = ['OptionsCollection', 'FormControlsCollection', 'Document', 'Collection', 'AllCollection'];
elementSuffix = ["Video", "Unknown", "UList", "Track", "Title", "TextArea", "Template", "TableSection", "TableRow", "Table", "TableCol", "TableCell", "TableCaption", "Style", "Span", "Source", "Slot", "Shadow", "Select", "Script", "Quote", "Progress", "Pre", "Picture", "Param", "Paragraph", "Output", "Option", "OptGroup", "Object", "OList", "Mod", "Meter", "Meta", "Menu", "Media", "Marquee", "Map", "Link", "Legend", "Label", "LI", "Input", "Image", "IFrame", "Html", "Heading", "Head", "HR", "FrameSet", "Frame", "Form", "Font", "FieldSet", "Embed", "Div", "Directory", "Dialog", "Details", "DataList", "DList", "Content", "Canvas", "Button", "Body", "Base", "BR", "Audio", "Area", "Anchor"];
for ((i = 0, len = nonElementSuffix.length); i < len; i++) {
creator = nonElementSuffix[i];
if ((ref = window["HTML" + creator]) != null) {
ref.name = "HTML" + creator;
}
}
for ((j = 0, len1 = elementSuffix.length); j < len1; j++) {
creator = elementSuffix[j];
if ((ref1 = window["HTML" + creator + "Element"]) != null) {
ref1.name = "HTML" + creator + "Element";
}
}
if ((ref2 = window.SVGElement) != null) {
ref2.name = 'SVGElement';
}
if ((ref3 = window.SVGSVGElement) != null) {
ref3.name = 'SVGSVGElement';
}
if ((ref4 = window.SVGPolylineElement) != null) {
ref4.name = 'SVGPolylineElement';
}
}
if (window.ClientRect == null) {
window.ClientRect = DOMRect;
}
return module.exports;
},
1: function (require, module, exports) {
(function (require) {
require = (function (cache, modules, cx) {
return function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : (((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports))));
};
})({}, {
0: function (require, module, exports) {
var origDescriptors;
origDescriptors = {
'innerWidth': Object.getOwnPropertyDescriptor(window, 'innerWidth'),
'innerHeight': Object.getOwnPropertyDescriptor(window, 'innerHeight')
};
module.exports = new (function () {
var current, getReal, overwrite, overwritten;
overwritten = false;
current = {
width: window.innerWidth,
height: window.innerHeight
};
getReal = function (dimension) {
dimension = 'inner' + dimension.replace(/\b./, function (letter) {
return letter.toUpperCase();
});
return origDescriptors[dimension].get.call(window);
};
overwrite = function () {
if (!overwritten) {
overwritten = true;
Object.defineProperty(window, 'innerWidth', {
configurable: true,
get: function () {
return current.width;
},
set: function (newValue) {
return current.width = newValue;
}
});
return Object.defineProperty(window, 'innerHeight', {
configurable: true,
get: function () {
return current.height;
},
set: function (newValue) {
return current.height = newValue;
}
});
}
};
this.simulate = function (width, height) {
var event;
if (width) {
current.width = width;
}
if (height) {
current.height = height;
}
overwrite();
event = document.createEvent('Event');
event.initEvent('resize', true, false);
return window.dispatchEvent(event);
};
this.restore = function () {
Object.defineProperty(window, 'innerWidth', origDescriptors.innerWidth);
return Object.defineProperty(window, 'innerHeight', origDescriptors.innerHeight);
};
return this;
})();
;
return module.exports;
}
}, this);
return require(0);
}).call(this, null);
return module.exports;
},
2: function (require, module, exports) {
module.exports = require(5);
return module.exports;
},
3: function (require, module, exports) {
module.exports = chaiStyle;
function chaiStyle(chai, utils) {
const {Assertion} = chai;
const {flag} = utils;
let sampleDiv, sampleStyle, sampleIframe;
Assertion.addMethod('style', function (property, value = '') {
const element = flag(this, 'object');
const style = window.getComputedStyle(element);
value = value.trim();
const isNonColors = style[property] === 'rgba(0, 0, 0, 0)' || style[property] === 'transparent';
const propertyValue = isNonColors ? '' : style[property];
const assertion = value ? compareCSSValue(propertyValue, value) : Boolean(propertyValue);
const elementTag = element.tagName.toLowerCase();
const throwMessage = `expect ${elementTag} to have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
const throwMessageNegative = `expect ${elementTag} to not have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
this.assert(assertion, throwMessage, throwMessageNegative, value);
function compareCSSValue(computed, expected) {
const propertyHifenCase = property.replace(/[A-Z]/g, match => '-' + match.toLowerCase());
if (!sampleDiv) {
sampleIframe = document.createElement('iframe');
sampleDiv = document.createElement('div');
sampleStyle = window.getComputedStyle(sampleDiv);
sampleIframe.appendChild(sampleDiv);
document.body.appendChild(sampleIframe);
}
sampleDiv.style.fontSize = style.fontSize;
sampleDiv.style.setProperty(propertyHifenCase, expected, 'important');
const value = sampleStyle[property];
const hasAutoValue = value.includes('auto');
const reg = new RegExp(escapeRegExp(value).replace(/auto/g, '(\\d+(.\\d+)?px|auto)'));
sampleDiv.style.fontSize = null;
sampleDiv.style[propertyHifenCase] = null;
return hasAutoValue ? reg.test(computed) : computed === value;
}
});
}
function escapeRegExp(value) {
return String(value).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}
return module.exports;
},
5: function (require, module, exports) {
var used = [];
exports.version = '4.1.2';
exports.AssertionError = require(6);
var util = require(7);
exports.use = function (fn) {
if (!~used.indexOf(fn)) {
fn(exports, util);
used.push(fn);
}
return exports;
};
exports.util = util;
var config = require(8);
exports.config = config;
var assertion = require(9);
exports.use(assertion);
var core = require(10);
exports.use(core);
var expect = require(11);
exports.use(expect);
var should = require(12);
exports.use(should);
var assert = require(13);
exports.use(assert);
return module.exports;
},
6: function (require, module, exports) {
function exclude() {
var excludes = [].slice.call(arguments);
function excludeProps(res, obj) {
Object.keys(obj).forEach(function (key) {
if (!~excludes.indexOf(key)) res[key] = obj[key];
});
}
return function extendExclude() {
var args = [].slice.call(arguments), i = 0, res = {};
for (; i < args.length; i++) {
excludeProps(res, args[i]);
}
return res;
};
}
;
module.exports = AssertionError;
function AssertionError(message, _props, ssf) {
var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'), props = extend(_props || ({}));
this.message = message || 'Unspecified AssertionError';
this.showDiff = false;
for (var key in props) {
this[key] = props[key];
}
ssf = ssf || arguments.callee;
if (ssf && Error.captureStackTrace) {
Error.captureStackTrace(this, ssf);
} else {
try {
throw new Error();
} catch (e) {
this.stack = e.stack;
}
}
}
AssertionError.prototype = Object.create(Error.prototype);
AssertionError.prototype.name = 'AssertionError';
AssertionError.prototype.constructor = AssertionError;
AssertionError.prototype.toJSON = function (stack) {
var extend = exclude('constructor', 'toJSON', 'stack'), props = extend({
name: this.name
}, this);
if (false !== stack && this.stack) {
props.stack = this.stack;
}
return props;
};
return module.exports;
},
7: function (require, module, exports) {
var pathval = require(14);
exports.test = require(15);
exports.type = require(16);
exports.expectTypes = require(17);
exports.getMessage = require(18);
exports.getActual = require(19);
exports.inspect = require(20);
exports.objDisplay = require(21);
exports.flag = require(22);
exports.transferFlags = require(23);
exports.eql = require(24);
exports.getPathInfo = pathval.getPathInfo;
exports.hasProperty = pathval.hasProperty;
exports.getName = require(25);
exports.addProperty = require(26);
exports.addMethod = require(27);
exports.overwriteProperty = require(28);
exports.overwriteMethod = require(29);
exports.addChainableMethod = require(30);
exports.overwriteChainableMethod = require(31);
exports.compareByInspect = require(32);
exports.getOwnEnumerablePropertySymbols = require(33);
exports.getOwnEnumerableProperties = require(34);
exports.checkError = require(35);
exports.proxify = require(36);
exports.addLengthGuard = require(37);
exports.isProxyEnabled = require(38);
exports.isNaN = require(39);
return module.exports;
},
8: function (require, module, exports) {
module.exports = {
includeStack: false,
showDiff: true,
truncateThreshold: 40,
useProxy: true,
proxyExcludedKeys: ['then', 'inspect', 'toJSON']
};
return module.exports;
},
9: function (require, module, exports) {
var config = require(8);
module.exports = function (_chai, util) {
var AssertionError = _chai.AssertionError, flag = util.flag;
_chai.Assertion = Assertion;
function Assertion(obj, msg, ssfi, lockSsfi) {
flag(this, 'ssfi', ssfi || Assertion);
flag(this, 'lockSsfi', lockSsfi);
flag(this, 'object', obj);
flag(this, 'message', msg);
return util.proxify(this);
}
Object.defineProperty(Assertion, 'includeStack', {
get: function () {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
return config.includeStack;
},
set: function (value) {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
config.includeStack = value;
}
});
Object.defineProperty(Assertion, 'showDiff', {
get: function () {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
return config.showDiff;
},
set: function (value) {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
config.showDiff = value;
}
});
Assertion.addProperty = function (name, fn) {
util.addProperty(this.prototype, name, fn);
};
Assertion.addMethod = function (name, fn) {
util.addMethod(this.prototype, name, fn);
};
Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.overwriteProperty = function (name, fn) {
util.overwriteProperty(this.prototype, name, fn);
};
Assertion.overwriteMethod = function (name, fn) {
util.overwriteMethod(this.prototype, name, fn);
};
Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
var ok = util.test(this, arguments);
if (false !== showDiff) showDiff = true;
if (undefined === expected && undefined === _actual) showDiff = false;
if (true !== config.showDiff) showDiff = false;
if (!ok) {
msg = util.getMessage(this, arguments);
var actual = util.getActual(this, arguments);
throw new AssertionError(msg, {
actual: actual,
expected: expected,
showDiff: showDiff
}, ((config.includeStack)) ? this.assert : flag(this, 'ssfi'));
}
};
Object.defineProperty(Assertion.prototype, '_obj', {
get: function () {
return flag(this, 'object');
},
set: function (val) {
flag(this, 'object', val);
}
});
};
return module.exports;
},
10: function (require, module, exports) {
module.exports = function (chai, _) {
var Assertion = chai.Assertion, AssertionError = chai.AssertionError, flag = _.flag;
['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does'].forEach(function (chain) {
Assertion.addProperty(chain);
});
Assertion.addProperty('not', function () {
flag(this, 'negate', true);
});
Assertion.addProperty('deep', function () {
flag(this, 'deep', true);
});
Assertion.addProperty('nested', function () {
flag(this, 'nested', true);
});
Assertion.addProperty('own', function () {
flag(this, 'own', true);
});
Assertion.addProperty('ordered', function () {
flag(this, 'ordered', true);
});
Assertion.addProperty('any', function () {
flag(this, 'any', true);
flag(this, 'all', false);
});
Assertion.addProperty('all', function () {
flag(this, 'all', true);
flag(this, 'any', false);
});
function an(type, msg) {
if (msg) flag(this, 'message', msg);
type = type.toLowerCase();
var obj = flag(this, 'object'), article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
}
Assertion.addChainableMethod('an', an);
Assertion.addChainableMethod('a', an);
function SameValueZero(a, b) {
return (_.isNaN(a) && _.isNaN(b)) || a === b;
}
function includeChainingBehavior() {
flag(this, 'contains', true);
}
function include(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, 'message'), negate = flag(this, 'negate'), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), descriptor = isDeep ? 'deep ' : '';
flagMsg = flagMsg ? flagMsg + ': ' : '';
var included = false;
switch (objType) {
case 'string':
included = obj.indexOf(val) !== -1;
break;
case 'weakset':
if (isDeep) {
throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
}
included = obj.has(val);
break;
case 'map':
var isEql = isDeep ? _.eql : SameValueZero;
obj.forEach(function (item) {
included = included || isEql(item, val);
});
break;
case 'set':
if (isDeep) {
obj.forEach(function (item) {
included = included || _.eql(item, val);
});
} else {
included = obj.has(val);
}
break;
case 'array':
if (isDeep) {
included = obj.some(function (item) {
return _.eql(item, val);
});
} else {
included = obj.indexOf(val) !== -1;
}
break;
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,' + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
}
var props = Object.keys(val), firstErr = null, numErrs = 0;
props.forEach(function (prop) {
var propAssertion = new Assertion(obj);
_.transferFlags(this, propAssertion, true);
flag(propAssertion, 'lockSsfi', true);
if (!negate || props.length === 1) {
propAssertion.property(prop, val[prop]);
return;
}
try {
propAssertion.property(prop, val[prop]);
} catch (err) {
if (!_.checkError.compatibleConstructor(err, AssertionError)) {
throw err;
}
if (firstErr === null) firstErr = err;
numErrs++;
}
}, this);
if (negate && props.length > 1 && numErrs === props.length) {
throw firstErr;
}
return;
}
this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
}
Assertion.addChainableMethod('include', include, includeChainingBehavior);
Assertion.addChainableMethod('contain', include, includeChainingBehavior);
Assertion.addChainableMethod('contains', include, includeChainingBehavior);
Assertion.addChainableMethod('includes', include, includeChainingBehavior);
Assertion.addProperty('ok', function () {
this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
});
Assertion.addProperty('true', function () {
this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
});
Assertion.addProperty('false', function () {
this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
});
Assertion.addProperty('null', function () {
this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
});
Assertion.addProperty('undefined', function () {
this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
});
Assertion.addProperty('NaN', function () {
this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
});
Assertion.addProperty('exist', function () {
var val = flag(this, 'object');
this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
});
Assertion.addProperty('empty', function () {
var val = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), itemsCount;
flagMsg = flagMsg ? flagMsg + ': ' : '';
switch (_.type(val).toLowerCase()) {
case 'array':
case 'string':
itemsCount = val.length;
break;
case 'map':
case 'set':
itemsCount = val.size;
break;
case 'weakmap':
case 'weakset':
throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);
case 'function':
var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
throw new AssertionError(msg.trim(), undefined, ssfi);
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
}
itemsCount = Object.keys(val).length;
}
this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
});
function checkArguments() {
var obj = flag(this, 'object'), type = _.type(obj);
this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
}
Assertion.addProperty('arguments', checkArguments);
Assertion.addProperty('Arguments', checkArguments);
function assertEqual(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
if (flag(this, 'deep')) {
return this.eql(val);
} else {
this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
}
}
Assertion.addMethod('equal', assertEqual);
Assertion.addMethod('equals', assertEqual);
Assertion.addMethod('eq', assertEqual);
function assertEql(obj, msg) {
if (msg) flag(this, 'message', msg);
this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
}
Assertion.addMethod('eql', assertEql);
Assertion.addMethod('eqls', assertEql);
function assertAbove(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to above must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to above must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len > n, 'expected #{this} to have a length above #{exp} but got #{act}', 'expected #{this} to not have a length above #{exp}', n, len);
} else {
this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
}
}
Assertion.addMethod('above', assertAbove);
Assertion.addMethod('gt', assertAbove);
Assertion.addMethod('greaterThan', assertAbove);
function assertLeast(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to least must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to least must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= n, 'expected #{this} to have a length at least #{exp} but got #{act}', 'expected #{this} to have a length below #{exp}', n, len);
} else {
this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
}
}
Assertion.addMethod('least', assertLeast);
Assertion.addMethod('gte', assertLeast);
function assertBelow(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to below must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to below must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len < n, 'expected #{this} to have a length below #{exp} but got #{act}', 'expected #{this} to not have a length below #{exp}', n, len);
} else {
this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
}
}
Assertion.addMethod('below', assertBelow);
Assertion.addMethod('lt', assertBelow);
Assertion.addMethod('lessThan', assertBelow);
function assertMost(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to most must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to most must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len <= n, 'expected #{this} to have a length at most #{exp} but got #{act}', 'expected #{this} to have a length above #{exp}', n, len);
} else {
this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
}
}
Assertion.addMethod('most', assertMost);
Assertion.addMethod('lte', assertMost);
Assertion.addMethod('within', function (start, finish, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), shouldThrow = true, range = ((startType === 'date' && finishType === 'date')) ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
errorMessage = msgPrefix + 'the arguments to within must be dates';
} else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the arguments to within must be numbers';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= start && len <= finish, 'expected #{this} to have a length within ' + range, 'expected #{this} to not have a length within ' + range);
} else {
this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
}
});
function assertInstanceOf(constructor, msg) {
if (msg) flag(this, 'message', msg);
var target = flag(this, 'object');
var ssfi = flag(this, 'ssfi');
var flagMsg = flag(this, 'message');
try {
var isInstanceOf = target instanceof constructor;
} catch (err) {
if (err instanceof TypeError) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);
}
throw err;
}
var name = _.getName(constructor);
if (name === null) {
name = 'an unnamed constructor';
}
this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
}
;
Assertion.addMethod('instanceof', assertInstanceOf);
Assertion.addMethod('instanceOf', assertInstanceOf);
function assertProperty(name, val, msg) {
if (msg) flag(this, 'message', msg);
var isNested = flag(this, 'nested'), isOwn = flag(this, 'own'), flagMsg = flag(this, 'message'), obj = flag(this, 'object'), ssfi = flag(this, 'ssfi');
if (isNested && isOwn) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
}
if (obj === null || obj === undefined) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
}
var isDeep = flag(this, 'deep'), negate = flag(this, 'negate'), pathInfo = isNested ? _.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name];
var descriptor = '';
if (isDeep) descriptor += 'deep ';
if (isOwn) descriptor += 'own ';
if (isNested) descriptor += 'nested ';
descriptor += 'property ';
var hasProperty;
if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name); else if (isNested) hasProperty = pathInfo.exists; else hasProperty = _.hasProperty(obj, name);
if (!negate || arguments.length === 1) {
this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
}
if (arguments.length > 1) {
this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
}
flag(this, 'object', value);
}
Assertion.addMethod('property', assertProperty);
function assertOwnProperty(name, value, msg) {
flag(this, 'own', true);
assertProperty.apply(this, arguments);
}
Assertion.addMethod('ownProperty', assertOwnProperty);
Assertion.addMethod('haveOwnProperty', assertOwnProperty);
function assertOwnPropertyDescriptor(name, descriptor, msg) {
if (typeof descriptor === 'string') {
msg = descriptor;
descriptor = null;
}
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
if (actualDescriptor && descriptor) {
this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
} else {
this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
}
flag(this, 'object', actualDescriptor);
}
Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
function assertLengthChain() {
flag(this, 'doLength', true);
}
function assertLength(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
var len = obj.length;
this.assert(len == n, 'expected #{this} to have a length of #{exp} but got #{act}', 'expected #{this} to not have a length of #{act}', n, len);
}
Assertion.addChainableMethod('length', assertLength, assertLengthChain);
Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
function assertMatch(re, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
}
Assertion.addMethod('match', assertMatch);
Assertion.addMethod('matches', assertMatch);
Assertion.addMethod('string', function (str, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('string');
this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
});
function assertKeys(keys) {
var obj = flag(this, 'object'), objType = _.type(obj), keysType = _.type(keys), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), str, deepStr = '', ok = true, flagMsg = flag(this, 'message');
flagMsg = flagMsg ? flagMsg + ': ' : '';
var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';
if (objType === 'Map' || objType === 'Set') {
deepStr = isDeep ? 'deeply ' : '';
actual = [];
obj.forEach(function (val, key) {
actual.push(key);
});
if (keysType !== 'Array') {
keys = Array.prototype.slice.call(arguments);
}
} else {
actual = _.getOwnEnumerableProperties(obj);
switch (keysType) {
case 'Array':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
break;
case 'Object':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
keys = Object.keys(keys);
break;
default:
keys = Array.prototype.slice.call(arguments);
}
keys = keys.map(function (val) {
return typeof val === 'symbol' ? val : String(val);
});
}
if (!keys.length) {
throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
}
var len = keys.length, any = flag(this, 'any'), all = flag(this, 'all'), expected = keys, actual;
if (!any && !all) {
all = true;
}
if (any) {
ok = expected.some(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
}
if (all) {
ok = expected.every(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
if (!flag(this, 'contains')) {
ok = ok && keys.length == actual.length;
}
}
if (len > 1) {
keys = keys.map(function (key) {
return _.inspect(key);
});
var last = keys.pop();
if (all) {
str = keys.join(', ') + ', and ' + last;
}
if (any) {
str = keys.join(', ') + ', or ' + last;
}
} else {
str = _.inspect(keys[0]);
}
str = (len > 1 ? 'keys ' : 'key ') + str;
str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
}
Assertion.addMethod('keys', assertKeys);
Assertion.addMethod('key', assertKeys);
function assertThrows(errorLike, errMsgMatcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), negate = flag(this, 'negate') || false;
new Assertion(obj, flagMsg, ssfi, true).is.a('function');
if (errorLike instanceof RegExp || typeof errorLike === 'string') {
errMsgMatcher = errorLike;
errorLike = null;
}
var caughtErr;
try {
obj();
} catch (err) {
caughtErr = err;
}
var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
var errorLikeFail = false;
var errMsgMatcherFail = false;
if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
var errorLikeString = 'an error';
if (errorLike instanceof Error) {
errorLikeString = '#{exp}';
} else if (errorLike) {
errorLikeString = _.checkError.getConstructorName(errorLike);
}
this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), (caughtErr instanceof Error ? caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr))));
}
if (errorLike && caughtErr) {
if (errorLike instanceof Error) {
var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
if (isCompatibleInstance === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
}
}
}
var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
if (isCompatibleConstructor === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
}
}
if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
var placeholder = 'including';
if (errMsgMatcher instanceof RegExp) {
placeholder = 'matching';
}
var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
if (isCompatibleMessage === negate) {
if (everyArgIsDefined && negate) {
errMsgMatcherFail = true;
} else {
this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
}
}
}
if (errorLikeFail && errMsgMatcherFail) {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
flag(this, 'object', caughtErr);
}
;
Assertion.addMethod('throw', assertThrows);
Assertion.addMethod('throws', assertThrows);
Assertion.addMethod('Throw', assertThrows);
function respondTo(method, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), itself = flag(this, 'itself'), context = (('function' === typeof obj && !itself)) ? obj.prototype[method] : obj[method];
this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
}
Assertion.addMethod('respondTo', respondTo);
Assertion.addMethod('respondsTo', respondTo);
Assertion.addProperty('itself', function () {
flag(this, 'itself', true);
});
function satisfy(matcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var result = matcher(obj);
this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
}
Assertion.addMethod('satisfy', satisfy);
Assertion.addMethod('satisfies', satisfy);
function closeTo(expected, delta, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('number');
if (typeof expected !== 'number' || typeof delta !== 'number') {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
}
this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
}
Assertion.addMethod('closeTo', closeTo);
Assertion.addMethod('approximately', closeTo);
function isSubsetOf(subset, superset, cmp, contains, ordered) {
if (!contains) {
if (subset.length !== superset.length) return false;
superset = superset.slice();
}
return subset.every(function (elem, idx) {
if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
if (!cmp) {
var matchIdx = superset.indexOf(elem);
if (matchIdx === -1) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
}
return superset.some(function (elem2, matchIdx) {
if (!cmp(elem, elem2)) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
});
});
}
Assertion.addMethod('members', function (subset, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
var contains = flag(this, 'contains');
var ordered = flag(this, 'ordered');
var subject, failMsg, failNegateMsg, lengthCheck;
if (contains) {
subject = ordered ? 'an ordered superset' : 'a superset';
failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
} else {
subject = ordered ? 'ordered members' : 'members';
failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
}
var cmp = flag(this, 'deep') ? _.eql : undefined;
this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
});
function oneOf(list, msg) {
if (msg) flag(this, 'message', msg);
var expected = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
}
Assertion.addMethod('oneOf', oneOf);
function assertChanges(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'change');
flag(this, 'realDelta', final !== initial);
this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
}
Assertion.addMethod('change', assertChanges);
Assertion.addMethod('changes', assertChanges);
function assertIncreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'increase');
flag(this, 'realDelta', final - initial);
this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
}
Assertion.addMethod('increase', assertIncreases);
Assertion.addMethod('increases', assertIncreases);
function assertDecreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'decrease');
flag(this, 'realDelta', initial - final);
this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
}
Assertion.addMethod('decrease', assertDecreases);
Assertion.addMethod('decreases', assertDecreases);
function assertDelta(delta, msg) {
if (msg) flag(this, 'message', msg);
var msgObj = flag(this, 'deltaMsgObj');
var initial = flag(this, 'initialDeltaValue');
var final = flag(this, 'finalDeltaValue');
var behavior = flag(this, 'deltaBehavior');
var realDelta = flag(this, 'realDelta');
var expression;
if (behavior === 'change') {
expression = Math.abs(final - initial) === Math.abs(delta);
} else {
expression = realDelta === Math.abs(delta);
}
this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
}
Assertion.addMethod('by', assertDelta);
Assertion.addProperty('extensible', function () {
var obj = flag(this, 'object');
var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
});
Assertion.addProperty('sealed', function () {
var obj = flag(this, 'object');
var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
});
Assertion.addProperty('frozen', function () {
var obj = flag(this, 'object');
var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
});
Assertion.addProperty('finite', function (msg) {
var obj = flag(this, 'object');
this.assert(typeof obj === "number" && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
});
};
return module.exports;
},
11: function (require, module, exports) {
module.exports = function (chai, util) {
chai.expect = function (val, message) {
return new chai.Assertion(val, message);
};
chai.expect.fail = function (actual, expected, message, operator) {
message = message || 'expect.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, chai.expect.fail);
};
};
return module.exports;
},
12: function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion;
function loadShould() {
function shouldGetter() {
if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {
return new Assertion(this.valueOf(), null, shouldGetter);
}
return new Assertion(this, null, shouldGetter);
}
function shouldSetter(value) {
Object.defineProperty(this, 'should', {
value: value,
enumerable: true,
configurable: true,
writable: true
});
}
Object.defineProperty(Object.prototype, 'should', {
set: shouldSetter,
get: shouldGetter,
configurable: true
});
var should = {};
should.fail = function (actual, expected, message, operator) {
message = message || 'should.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, should.fail);
};
should.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.equal(val2);
};
should.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.Throw(errt, errs);
};
should.exist = function (val, msg) {
new Assertion(val, msg).to.exist;
};
should.not = {};
should.not.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.not.equal(val2);
};
should.not.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.not.Throw(errt, errs);
};
should.not.exist = function (val, msg) {
new Assertion(val, msg).to.not.exist;
};
should['throw'] = should['Throw'];
should.not['throw'] = should.not['Throw'];
return should;
}
;
chai.should = loadShould;
chai.Should = loadShould;
};
return module.exports;
},
13: function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion, flag = util.flag;
var assert = chai.assert = function (express, errmsg) {
var test = new Assertion(null, null, chai.assert, true);
test.assert(express, errmsg, '[ negation message unavailable ]');
};
assert.fail = function (actual, expected, message, operator) {
message = message || 'assert.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, assert.fail);
};
assert.isOk = function (val, msg) {
new Assertion(val, msg, assert.isOk, true).is.ok;
};
assert.isNotOk = function (val, msg) {
new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
};
assert.equal = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.equal, true);
test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
};
assert.notEqual = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.notEqual, true);
test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
};
assert.strictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
};
assert.notStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
};
assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
};
assert.notDeepEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
};
assert.isAbove = function (val, abv, msg) {
new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
};
assert.isAtLeast = function (val, atlst, msg) {
new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
};
assert.isBelow = function (val, blw, msg) {
new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
};
assert.isAtMost = function (val, atmst, msg) {
new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
};
assert.isTrue = function (val, msg) {
new Assertion(val, msg, assert.isTrue, true).is['true'];
};
assert.isNotTrue = function (val, msg) {
new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
};
assert.isFalse = function (val, msg) {
new Assertion(val, msg, assert.isFalse, true).is['false'];
};
assert.isNotFalse = function (val, msg) {
new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
};
assert.isNull = function (val, msg) {
new Assertion(val, msg, assert.isNull, true).to.equal(null);
};
assert.isNotNull = function (val, msg) {
new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
};
assert.isNaN = function (val, msg) {
new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
};
assert.isNotNaN = function (val, msg) {
new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
};
assert.exists = function (val, msg) {
new Assertion(val, msg, assert.exists, true).to.exist;
};
assert.notExists = function (val, msg) {
new Assertion(val, msg, assert.notExists, true).to.not.exist;
};
assert.isUndefined = function (val, msg) {
new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
};
assert.isDefined = function (val, msg) {
new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
};
assert.isFunction = function (val, msg) {
new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
};
assert.isNotFunction = function (val, msg) {
new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
};
assert.isObject = function (val, msg) {
new Assertion(val, msg, assert.isObject, true).to.be.a('object');
};
assert.isNotObject = function (val, msg) {
new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
};
assert.isArray = function (val, msg) {
new Assertion(val, msg, assert.isArray, true).to.be.an('array');
};
assert.isNotArray = function (val, msg) {
new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
};
assert.isString = function (val, msg) {
new Assertion(val, msg, assert.isString, true).to.be.a('string');
};
assert.isNotString = function (val, msg) {
new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
};
assert.isNumber = function (val, msg) {
new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
};
assert.isNotNumber = function (val, msg) {
new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
};
assert.isFinite = function (val, msg) {
new Assertion(val, msg, assert.isFinite, true).to.be.finite;
};
assert.isBoolean = function (val, msg) {
new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
};
assert.isNotBoolean = function (val, msg) {
new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
};
assert.typeOf = function (val, type, msg) {
new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
};
assert.notTypeOf = function (val, type, msg) {
new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
};
assert.instanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
};
assert.notInstanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
};
assert.include = function (exp, inc, msg) {
new Assertion(exp, msg, assert.include, true).include(inc);
};
assert.notInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
};
assert.deepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
};
assert.notDeepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
};
assert.nestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
};
assert.notNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
};
assert.deepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
};
assert.notDeepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
};
assert.ownInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
};
assert.notOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
};
assert.deepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
};
assert.notDeepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
};
assert.match = function (exp, re, msg) {
new Assertion(exp, msg, assert.match, true).to.match(re);
};
assert.notMatch = function (exp, re, msg) {
new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
};
assert.property = function (obj, prop, msg) {
new Assertion(obj, msg, assert.property, true).to.have.property(prop);
};
assert.notProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
};
assert.propertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
};
assert.notPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
};
assert.deepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
};
assert.notDeepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
};
assert.ownProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
};
assert.notOwnProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
};
assert.ownPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
};
assert.notOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
};
assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
};
assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
};
assert.nestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
};
assert.notNestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
};
assert.nestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
};
assert.notNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
};
assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
};
assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
};
assert.lengthOf = function (exp, len, msg) {
new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
};
assert.hasAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
};
assert.hasAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
};
assert.containsAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
};
assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
};
assert.doesNotHaveAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
};
assert.hasAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
};
assert.hasAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
};
assert.containsAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
};
assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
};
assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
};
assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
return flag(assertErr, 'object');
};
assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
};
assert.operator = function (val, operator, val2, msg) {
var ok;
switch (operator) {
case '==':
ok = val == val2;
break;
case '===':
ok = val === val2;
break;
case '>':
ok = val > val2;
break;
case '>=':
ok = val >= val2;
break;
case '<':
ok = val < val2;
break;
case '<=':
ok = val <= val2;
break;
case '!=':
ok = val != val2;
break;
case '!==':
ok = val !== val2;
break;
default:
msg = msg ? msg + ': ' : msg;
throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
}
var test = new Assertion(ok, msg, assert.operator, true);
test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
};
assert.closeTo = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
};
assert.approximately = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
};
assert.sameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
};
assert.notSameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
};
assert.sameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
};
assert.notSameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
};
assert.sameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
};
assert.notSameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
};
assert.sameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
};
assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
};
assert.includeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
};
assert.notIncludeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
};
assert.includeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
};
assert.notIncludeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
};
assert.includeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
};
assert.notIncludeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
};
assert.includeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
};
assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
};
assert.oneOf = function (inList, list, msg) {
new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
};
assert.changes = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
};
assert.changesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
};
assert.doesNotChange = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
};
assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
};
assert.increases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
};
assert.increasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
};
assert.doesNotIncrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
};
assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
};
assert.decreases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
};
assert.decreasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
};
assert.doesNotDecrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
};
assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
};
assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
};
assert.ifError = function (val) {
if (val) {
throw (val);
}
};
assert.isExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
};
assert.isNotExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
};
assert.isSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
};
assert.isNotSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
};
assert.isFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
};
assert.isNotFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
};
assert.isEmpty = function (val, msg) {
new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
};
assert.isNotEmpty = function (val, msg) {
new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
};
(function alias(name, as) {
assert[as] = assert[name];
return alias;
})('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};
return module.exports;
},
14: function (require, module, exports) {
'use strict';
function hasProperty(obj, name) {
if (typeof obj === 'undefined' || obj === null) {
return false;
}
return (name in Object(obj));
}
function parsePath(path) {
var str = path.replace(/([^\\])\[/g, '$1.[');
var parts = str.match(/(\\\.|[^.]+?)+/g);
return parts.map(function mapMatches(value) {
var regexp = /^\[(\d+)\]$/;
var mArr = regexp.exec(value);
var parsed = null;
if (mArr) {
parsed = {
i: parseFloat(mArr[1])
};
} else {
parsed = {
p: value.replace(/\\([.\[\]])/g, '$1')
};
}
return parsed;
});
}
function internalGetPathValue(obj, parsed, pathDepth) {
var temporaryValue = obj;
var res = null;
pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);
for (var i = 0; i < pathDepth; i++) {
var part = parsed[i];
if (temporaryValue) {
if (typeof part.p === 'undefined') {
temporaryValue = temporaryValue[part.i];
} else {
temporaryValue = temporaryValue[part.p];
}
if (i === (pathDepth - 1)) {
res = temporaryValue;
}
}
}
return res;
}
function internalSetPathValue(obj, val, parsed) {
var tempObj = obj;
var pathDepth = parsed.length;
var part = null;
for (var i = 0; i < pathDepth; i++) {
var propName = null;
var propVal = null;
part = parsed[i];
if (i === (pathDepth - 1)) {
propName = typeof part.p === 'undefined' ? part.i : part.p;
tempObj[propName] = val;
} else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
tempObj = tempObj[part.p];
} else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
tempObj = tempObj[part.i];
} else {
var next = parsed[i + 1];
propName = typeof part.p === 'undefined' ? part.i : part.p;
propVal = typeof next.p === 'undefined' ? [] : {};
tempObj[propName] = propVal;
tempObj = tempObj[propName];
}
}
}
function getPathInfo(obj, path) {
var parsed = parsePath(path);
var last = parsed[parsed.length - 1];
var info = {
parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
name: last.p || last.i,
value: internalGetPathValue(obj, parsed)
};
info.exists = hasProperty(info.parent, info.name);
return info;
}
function getPathValue(obj, path) {
var info = getPathInfo(obj, path);
return info.value;
}
function setPathValue(obj, path, val) {
var parsed = parsePath(path);
internalSetPathValue(obj, val, parsed);
return obj;
}
module.exports = {
hasProperty: hasProperty,
getPathInfo: getPathInfo,
getPathValue: getPathValue,
setPathValue: setPathValue
};
return module.exports;
},
15: function (require, module, exports) {
var flag = require(22);
module.exports = function test(obj, args) {
var negate = flag(obj, 'negate'), expr = args[0];
return negate ? !expr : expr;
};
return module.exports;
},
16: function (require, module, exports) {
'use strict';
var promiseExists = typeof Promise === 'function';
var globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self;
var isDom = ('location' in globalObject) && ('document' in globalObject);
var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(('')[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
module.exports = function typeDetect(obj) {
var typeofObj = typeof obj;
if (typeofObj !== 'object') {
return typeofObj;
}
if (obj === null) {
return 'null';
}
if (obj === globalObject) {
return 'global';
}
if (Array.isArray(obj) && (symbolToStringTagExists === false || !((Symbol.toStringTag in obj)))) {
return 'Array';
}
if (isDom) {
if (obj === globalObject.location) {
return 'Location';
}
if (obj === globalObject.document) {
return 'Document';
}
if (obj === (globalObject.navigator || ({})).mimeTypes) {
return 'MimeTypeArray';
}
if (obj === (globalObject.navigator || ({})).plugins) {
return 'PluginArray';
}
if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
return 'HTMLQuoteElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TD') {
return 'HTMLTableDataCellElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TH') {
return 'HTMLTableHeaderCellElement';
}
}
var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
if (typeof stringTag === 'string') {
return stringTag;
}
var objPrototype = Object.getPrototypeOf(obj);
if (objPrototype === RegExp.prototype) {
return 'RegExp';
}
if (objPrototype === Date.prototype) {
return 'Date';
}
if (promiseExists && objPrototype === Promise.prototype) {
return 'Promise';
}
if (setExists && objPrototype === Set.prototype) {
return 'Set';
}
if (mapExists && objPrototype === Map.prototype) {
return 'Map';
}
if (weakSetExists && objPrototype === WeakSet.prototype) {
return 'WeakSet';
}
if (weakMapExists && objPrototype === WeakMap.prototype) {
return 'WeakMap';
}
if (dataViewExists && objPrototype === DataView.prototype) {
return 'DataView';
}
if (mapExists && objPrototype === mapIteratorPrototype) {
return 'Map Iterator';
}
if (setExists && objPrototype === setIteratorPrototype) {
return 'Set Iterator';
}
if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
return 'Array Iterator';
}
if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
return 'String Iterator';
}
if (objPrototype === null) {
return 'Object';
}
return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
};
module.exports.typeDetect = module.exports;
return module.exports;
},
17: function (require, module, exports) {
var AssertionError = require(6);
var flag = require(22);
var type = require(16);
module.exports = function expectTypes(obj, types) {
var flagMsg = flag(obj, 'message');
var ssfi = flag(obj, 'ssfi');
flagMsg = flagMsg ? flagMsg + ': ' : '';
obj = flag(obj, 'object');
types = types.map(function (t) {
return t.toLowerCase();
});
types.sort();
var str = types.map(function (t, index) {
var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
return or + art + ' ' + t;
}).join(', ');
var objType = type(obj).toLowerCase();
if (!types.some(function (expected) {
return objType === expected;
})) {
throw new AssertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
}
};
return module.exports;
},
18: function (require, module, exports) {
var flag = require(22), getActual = require(19), inspect = require(20), objDisplay = require(21);
module.exports = function getMessage(obj, args) {
var negate = flag(obj, 'negate'), val = flag(obj, 'object'), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, 'message');
if (typeof msg === "function") msg = msg();
msg = msg || '';
msg = msg.replace(/#\{this\}/g, function () {
return objDisplay(val);
}).replace(/#\{act\}/g, function () {
return objDisplay(actual);
}).replace(/#\{exp\}/g, function () {
return objDisplay(expected);
});
return flagMsg ? flagMsg + ': ' + msg : msg;
};
return module.exports;
},
19: function (require, module, exports) {
module.exports = function getActual(obj, args) {
return args.length > 4 ? args[4] : obj._obj;
};
return module.exports;
},
20: function (require, module, exports) {
var getName = require(25);
var getProperties = require(40);
var getEnumerableProperties = require(41);
var config = require(8);
module.exports = inspect;
function inspect(obj, showHidden, depth, colors) {
var ctx = {
showHidden: showHidden,
seen: [],
stylize: function (str) {
return str;
}
};
return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}
var isDOMElement = function (object) {
if (typeof HTMLElement === 'object') {
return object instanceof HTMLElement;
} else {
return object && typeof object === 'object' && ('nodeType' in object) && object.nodeType === 1 && typeof object.nodeName === 'string';
}
};
function formatValue(ctx, value, recurseTimes) {
if (value && typeof value.inspect === 'function' && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (typeof ret !== 'string') {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
if (isDOMElement(value)) {
if (('outerHTML' in value)) {
return value.outerHTML;
} else {
try {
if (document.xmlVersion) {
var xmlSerializer = new XMLSerializer();
return xmlSerializer.serializeToString(value);
} else {
var ns = "http://www.w3.org/1999/xhtml";
var container = document.createElementNS(ns, '_');
container.appendChild(value.cloneNode(false));
var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');
container.innerHTML = '';
return html;
}
} catch (err) {}
}
}
var visibleKeys = getEnumerableProperties(value);
var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
var name, nameSuffix;
if (keys.length === 0 || (isError(value) && ((keys.length === 1 && keys[0] === 'stack') || (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')))) {
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
return ctx.stylize('[Function' + nameSuffix + ']', 'special');
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
}
if (isError(value)) {
return formatError(value);
}
}
var base = '', array = false, typedArray = false, braces = ['{', '}'];
if (isTypedArray(value)) {
typedArray = true;
braces = ['[', ']'];
}
if (isArray(value)) {
array = true;
braces = ['[', ']'];
}
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
base = ' [Function' + nameSuffix + ']';
}
if (isRegExp(value)) {
base = ' ' + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = ' ' + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
return formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
} else {
return ctx.stylize('[Object]', 'special');
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else if (typedArray) {
return formatTypedArray(value);
} else {
output = keys.map(function (key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
switch (typeof value) {
case 'undefined':
return ctx.stylize('undefined', 'undefined');
case 'string':
var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
return ctx.stylize(simple, 'string');
case 'number':
if (value === 0 && (1 / value) === -Infinity) {
return ctx.stylize('-0', 'number');
}
return ctx.stylize('' + value, 'number');
case 'boolean':
return ctx.stylize('' + value, 'boolean');
case 'symbol':
return ctx.stylize(value.toString(), 'symbol');
}
if (value === null) {
return ctx.stylize('null', 'null');
}
}
function formatError(value) {
return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (Object.prototype.hasOwnProperty.call(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push('');
}
}
keys.forEach(function (key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatTypedArray(value) {
var str = '[ ';
for (var i = 0; i < value.length; ++i) {
if (str.length >= config.truncateThreshold - 7) {
str += '...';
break;
}
str += value[i] + ', ';
}
str += ' ]';
if (str.indexOf(',  ]') !== -1) {
str = str.replace(',  ]', ' ]');
}
return str;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name;
var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
var str;
if (propDescriptor) {
if (propDescriptor.get) {
if (propDescriptor.set) {
str = ctx.stylize('[Getter/Setter]', 'special');
} else {
str = ctx.stylize('[Getter]', 'special');
}
} else {
if (propDescriptor.set) {
str = ctx.stylize('[Setter]', 'special');
}
}
}
if (visibleKeys.indexOf(key) < 0) {
name = '[' + key + ']';
}
if (!str) {
if (ctx.seen.indexOf(value[key]) < 0) {
if (recurseTimes === null) {
str = formatValue(ctx, value[key], null);
} else {
str = formatValue(ctx, value[key], recurseTimes - 1);
}
if (str.indexOf('\n') > -1) {
if (array) {
str = str.split('\n').map(function (line) {
return '  ' + line;
}).join('\n').substr(2);
} else {
str = '\n' + str.split('\n').map(function (line) {
return '   ' + line;
}).join('\n');
}
}
} else {
str = ctx.stylize('[Circular]', 'special');
}
}
if (typeof name === 'undefined') {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify('' + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, 'name');
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, 'string');
}
}
return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function (prev, cur) {
numLinesEst++;
if (cur.indexOf('\n') >= 0) numLinesEst++;
return prev + cur.length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
}
return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
function isTypedArray(ar) {
return (typeof ar === 'object' && (/\w+Array]$/).test(objectToString(ar)));
}
function isArray(ar) {
return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}
function isRegExp(re) {
return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}
function isDate(d) {
return typeof d === 'object' && objectToString(d) === '[object Date]';
}
function isError(e) {
return typeof e === 'object' && objectToString(e) === '[object Error]';
}
function objectToString(o) {
return Object.prototype.toString.call(o);
}
return module.exports;
},
21: function (require, module, exports) {
var inspect = require(20);
var config = require(8);
module.exports = function objDisplay(obj) {
var str = inspect(obj), type = Object.prototype.toString.call(obj);
if (config.truncateThreshold && str.length >= config.truncateThreshold) {
if (type === '[object Function]') {
return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';
} else if (type === '[object Array]') {
return '[ Array(' + obj.length + ') ]';
} else if (type === '[object Object]') {
var keys = Object.keys(obj), kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');
return '{ Object (' + kstr + ') }';
} else {
return str;
}
} else {
return str;
}
};
return module.exports;
},
22: function (require, module, exports) {
module.exports = function flag(obj, key, value) {
var flags = obj.__flags || (obj.__flags = Object.create(null));
if (arguments.length === 3) {
flags[key] = value;
} else {
return flags[key];
}
};
return module.exports;
},
23: function (require, module, exports) {
module.exports = function transferFlags(assertion, object, includeAll) {
var flags = assertion.__flags || (assertion.__flags = Object.create(null));
if (!object.__flags) {
object.__flags = Object.create(null);
}
includeAll = arguments.length === 3 ? includeAll : true;
for (var flag in flags) {
if (includeAll || (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
object.__flags[flag] = flags[flag];
}
}
};
return module.exports;
},
24: function (require, module, exports) {
'use strict';
var type = require(16);
function FakeMap() {
this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}
FakeMap.prototype = {
get: function getMap(key) {
return key[this._key];
},
set: function setMap(key, value) {
if (!Object.isFrozen(key)) {
Object.defineProperty(key, this._key, {
value: value,
configurable: true
});
}
}
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return null;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
var result = leftHandMap.get(rightHandOperand);
if (typeof result === 'boolean') {
return result;
}
}
return null;
}
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
leftHandMap.set(rightHandOperand, result);
} else {
leftHandMap = new MemoizeMap();
leftHandMap.set(rightHandOperand, result);
memoizeMap.set(leftHandOperand, leftHandMap);
}
}
module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;
function deepEqual(leftHandOperand, rightHandOperand, options) {
if (options && options.comparator) {
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
function simpleEqual(leftHandOperand, rightHandOperand) {
if (leftHandOperand === rightHandOperand) {
return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
}
if (leftHandOperand !== leftHandOperand && rightHandOperand !== rightHandOperand) {
return true;
}
if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return false;
}
return null;
}
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
options = options || ({});
options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
var comparator = options && options.comparator;
var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
if (memoizeResultLeft !== null) {
return memoizeResultLeft;
}
var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
if (memoizeResultRight !== null) {
return memoizeResultRight;
}
if (comparator) {
var comparatorResult = comparator(leftHandOperand, rightHandOperand);
if (comparatorResult === false || comparatorResult === true) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
return comparatorResult;
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
}
var leftHandType = type(leftHandOperand);
if (leftHandType !== type(rightHandOperand)) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
return false;
}
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
return result;
}
function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
switch (leftHandType) {
case 'String':
case 'Number':
case 'Boolean':
case 'Date':
return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
case 'Promise':
case 'Symbol':
case 'function':
case 'WeakMap':
case 'WeakSet':
case 'Error':
return leftHandOperand === rightHandOperand;
case 'Arguments':
case 'Int8Array':
case 'Uint8Array':
case 'Uint8ClampedArray':
case 'Int16Array':
case 'Uint16Array':
case 'Int32Array':
case 'Uint32Array':
case 'Float32Array':
case 'Float64Array':
case 'Array':
return iterableEqual(leftHandOperand, rightHandOperand, options);
case 'RegExp':
return regexpEqual(leftHandOperand, rightHandOperand);
case 'Generator':
return generatorEqual(leftHandOperand, rightHandOperand, options);
case 'DataView':
return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
case 'ArrayBuffer':
return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
case 'Set':
return entriesEqual(leftHandOperand, rightHandOperand, options);
case 'Map':
return entriesEqual(leftHandOperand, rightHandOperand, options);
default:
return objectEqual(leftHandOperand, rightHandOperand, options);
}
}
function regexpEqual(leftHandOperand, rightHandOperand) {
return leftHandOperand.toString() === rightHandOperand.toString();
}
function entriesEqual(leftHandOperand, rightHandOperand, options) {
if (leftHandOperand.size !== rightHandOperand.size) {
return false;
}
if (leftHandOperand.size === 0) {
return true;
}
var leftHandItems = [];
var rightHandItems = [];
leftHandOperand.forEach(function gatherEntries(key, value) {
leftHandItems.push([key, value]);
});
rightHandOperand.forEach(function gatherEntries(key, value) {
rightHandItems.push([key, value]);
});
return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
function iterableEqual(leftHandOperand, rightHandOperand, options) {
var length = leftHandOperand.length;
if (length !== rightHandOperand.length) {
return false;
}
if (length === 0) {
return true;
}
var index = -1;
while (++index < length) {
if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
return false;
}
}
return true;
}
function generatorEqual(leftHandOperand, rightHandOperand, options) {
return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
function hasIteratorFunction(target) {
return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
function getIteratorEntries(target) {
if (hasIteratorFunction(target)) {
try {
return getGeneratorEntries(target[Symbol.iterator]());
} catch (iteratorError) {
return [];
}
}
return [];
}
function getGeneratorEntries(generator) {
var generatorResult = generator.next();
var accumulator = [generatorResult.value];
while (generatorResult.done === false) {
generatorResult = generator.next();
accumulator.push(generatorResult.value);
}
return accumulator;
}
function getEnumerableKeys(target) {
var keys = [];
for (var key in target) {
keys.push(key);
}
return keys;
}
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
var length = keys.length;
if (length === 0) {
return true;
}
for (var i = 0; i < length; i += 1) {
if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
return false;
}
}
return true;
}
function objectEqual(leftHandOperand, rightHandOperand, options) {
var leftHandKeys = getEnumerableKeys(leftHandOperand);
var rightHandKeys = getEnumerableKeys(rightHandOperand);
if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
leftHandKeys.sort();
rightHandKeys.sort();
if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
return false;
}
return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
}
var leftHandEntries = getIteratorEntries(leftHandOperand);
var rightHandEntries = getIteratorEntries(rightHandOperand);
if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
leftHandEntries.sort();
rightHandEntries.sort();
return iterableEqual(leftHandEntries, rightHandEntries, options);
}
if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
return true;
}
return false;
}
function isPrimitive(value) {
return value === null || typeof value !== 'object';
}
return module.exports;
},
25: function (require, module, exports) {
'use strict';
var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
if (typeof aFunc !== 'function') {
return null;
}
var name = '';
if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
var match = toString.call(aFunc).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = aFunc.name;
}
return name;
}
module.exports = getFuncName;
return module.exports;
},
26: function (require, module, exports) {
var chai = require(5);
var flag = require(22);
var isProxyEnabled = require(38);
var transferFlags = require(23);
module.exports = function addProperty(ctx, name, getter) {
getter = getter === undefined ? function () {} : getter;
Object.defineProperty(ctx, name, {
get: function propertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', propertyGetter);
}
var result = getter.call(this);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
27: function (require, module, exports) {
var addLengthGuard = require(37);
var chai = require(5);
var flag = require(22);
var proxify = require(36);
var transferFlags = require(23);
module.exports = function addMethod(ctx, name, method) {
var methodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', methodWrapper);
}
var result = method.apply(this, arguments);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(methodWrapper, name, false);
ctx[name] = proxify(methodWrapper, name);
};
return module.exports;
},
28: function (require, module, exports) {
var chai = require(5);
var flag = require(22);
var isProxyEnabled = require(38);
var transferFlags = require(23);
module.exports = function overwriteProperty(ctx, name, getter) {
var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function () {};
if (_get && 'function' === typeof _get.get) _super = _get.get;
Object.defineProperty(ctx, name, {
get: function overwritingPropertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingPropertyGetter);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = getter(_super).call(this);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
29: function (require, module, exports) {
var addLengthGuard = require(37);
var chai = require(5);
var flag = require(22);
var proxify = require(36);
var transferFlags = require(23);
module.exports = function overwriteMethod(ctx, name, method) {
var _method = ctx[name], _super = function () {
throw new Error(name + ' is not a function');
};
if (_method && 'function' === typeof _method) _super = _method;
var overwritingMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingMethodWrapper);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = method(_super).apply(this, arguments);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(overwritingMethodWrapper, name, false);
ctx[name] = proxify(overwritingMethodWrapper, name);
};
return module.exports;
},
30: function (require, module, exports) {
var addLengthGuard = require(37);
var chai = require(5);
var flag = require(22);
var proxify = require(36);
var transferFlags = require(23);
var canSetPrototype = typeof Object.setPrototypeOf === 'function';
var testFn = function () {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
if (typeof propDesc !== 'object') return true;
return !propDesc.configurable;
});
var call = Function.prototype.call, apply = Function.prototype.apply;
module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
if (typeof chainingBehavior !== 'function') {
chainingBehavior = function () {};
}
var chainableBehavior = {
method: method,
chainingBehavior: chainingBehavior
};
if (!ctx.__methods) {
ctx.__methods = {};
}
ctx.__methods[name] = chainableBehavior;
Object.defineProperty(ctx, name, {
get: function chainableMethodGetter() {
chainableBehavior.chainingBehavior.call(this);
var chainableMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', chainableMethodWrapper);
}
var result = chainableBehavior.method.apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(chainableMethodWrapper, name, true);
if (canSetPrototype) {
var prototype = Object.create(this);
prototype.call = call;
prototype.apply = apply;
Object.setPrototypeOf(chainableMethodWrapper, prototype);
} else {
var asserterNames = Object.getOwnPropertyNames(ctx);
asserterNames.forEach(function (asserterName) {
if (excludeNames.indexOf(asserterName) !== -1) {
return;
}
var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
Object.defineProperty(chainableMethodWrapper, asserterName, pd);
});
}
transferFlags(this, chainableMethodWrapper);
return proxify(chainableMethodWrapper);
},
configurable: true
});
};
return module.exports;
},
31: function (require, module, exports) {
var chai = require(5);
var transferFlags = require(23);
module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
var chainableBehavior = ctx.__methods[name];
var _chainingBehavior = chainableBehavior.chainingBehavior;
chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
var result = chainingBehavior(_chainingBehavior).call(this);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
var _method = chainableBehavior.method;
chainableBehavior.method = function overwritingChainableMethodWrapper() {
var result = method(_method).apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
};
return module.exports;
},
32: function (require, module, exports) {
var inspect = require(20);
module.exports = function compareByInspect(a, b) {
return inspect(a) < inspect(b) ? -1 : 1;
};
return module.exports;
},
33: function (require, module, exports) {
module.exports = function getOwnEnumerablePropertySymbols(obj) {
if (typeof Object.getOwnPropertySymbols !== 'function') return [];
return Object.getOwnPropertySymbols(obj).filter(function (sym) {
return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
});
};
return module.exports;
},
34: function (require, module, exports) {
var getOwnEnumerablePropertySymbols = require(33);
module.exports = function getOwnEnumerableProperties(obj) {
return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};
return module.exports;
},
35: function (require, module, exports) {
'use strict';
function compatibleInstance(thrown, errorLike) {
return errorLike instanceof Error && thrown === errorLike;
}
function compatibleConstructor(thrown, errorLike) {
if (errorLike instanceof Error) {
return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
} else if (errorLike.prototype instanceof Error || errorLike === Error) {
return thrown.constructor === errorLike || thrown instanceof errorLike;
}
return false;
}
function compatibleMessage(thrown, errMatcher) {
var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
if (errMatcher instanceof RegExp) {
return errMatcher.test(comparisonString);
} else if (typeof errMatcher === 'string') {
return comparisonString.indexOf(errMatcher) !== -1;
}
return false;
}
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
var name = '';
if (typeof constructorFn.name === 'undefined') {
var match = String(constructorFn).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = constructorFn.name;
}
return name;
}
function getConstructorName(errorLike) {
var constructorName = errorLike;
if (errorLike instanceof Error) {
constructorName = getFunctionName(errorLike.constructor);
} else if (typeof errorLike === 'function') {
constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike());
}
return constructorName;
}
function getMessage(errorLike) {
var msg = '';
if (errorLike && errorLike.message) {
msg = errorLike.message;
} else if (typeof errorLike === 'string') {
msg = errorLike;
}
return msg;
}
module.exports = {
compatibleInstance: compatibleInstance,
compatibleConstructor: compatibleConstructor,
compatibleMessage: compatibleMessage,
getMessage: getMessage,
getConstructorName: getConstructorName
};
return module.exports;
},
36: function (require, module, exports) {
var config = require(8);
var flag = require(22);
var getProperties = require(40);
var isProxyEnabled = require(38);
var builtins = ['__flags', '__methods', '_obj', 'assert'];
module.exports = function proxify(obj, nonChainableMethodName) {
if (!isProxyEnabled()) return obj;
return new Proxy(obj, {
get: function proxyGetter(target, property) {
if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
if (nonChainableMethodName) {
throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
}
var orderedProperties = getProperties(target).filter(function (property) {
return !Object.prototype.hasOwnProperty(property) && builtins.indexOf(property) === -1;
}).sort(function (a, b) {
return stringDistance(property, a) - stringDistance(property, b);
});
if (orderedProperties.length && stringDistance(orderedProperties[0], property) < 4) {
throw Error('Invalid Chai property: ' + property + '. Did you mean "' + orderedProperties[0] + '"?');
} else {
throw Error('Invalid Chai property: ' + property);
}
}
if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
flag(target, 'ssfi', proxyGetter);
}
return Reflect.get(target, property);
}
});
};
function stringDistance(strA, strB, memo) {
if (!memo) {
memo = [];
for (var i = 0; i <= strA.length; i++) {
memo[i] = [];
}
}
if (!memo[strA.length] || !memo[strA.length][strB.length]) {
if (strA.length === 0 || strB.length === 0) {
memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
} else {
memo[strA.length][strB.length] = Math.min(stringDistance(strA.slice(0, -1), strB, memo) + 1, stringDistance(strA, strB.slice(0, -1), memo) + 1, stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) + (strA.slice(-1) === strB.slice(-1) ? 0 : 1));
}
}
return memo[strA.length][strB.length];
}
return module.exports;
},
37: function (require, module, exports) {
var config = require(8);
var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
module.exports = function addLengthGuard(fn, assertionName, isChainable) {
if (!fnLengthDesc.configurable) return fn;
Object.defineProperty(fn, 'length', {
get: function () {
if (isChainable) {
throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
}
throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of "' + assertionName + '".');
}
});
return fn;
};
return module.exports;
},
38: function (require, module, exports) {
var config = require(8);
module.exports = function isProxyEnabled() {
return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';
};
return module.exports;
},
39: function (require, module, exports) {
function isNaN(value) {
return value !== value;
}
module.exports = Number.isNaN || isNaN;
return module.exports;
},
40: function (require, module, exports) {
module.exports = function getProperties(object) {
var result = Object.getOwnPropertyNames(object);
function addProperty(property) {
if (result.indexOf(property) === -1) {
result.push(property);
}
}
var proto = Object.getPrototypeOf(object);
while (proto !== null) {
Object.getOwnPropertyNames(proto).forEach(addProperty);
proto = Object.getPrototypeOf(proto);
}
return result;
};
return module.exports;
},
41: function (require, module, exports) {
module.exports = function getEnumerableProperties(object) {
var result = [];
for (var name in object) {
result.push(name);
}
return result;
};
return module.exports;
}
}, this);
return require(0);
}).call(this, null, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : this);


//# sourceMappingURL=data:application/json;charset=utf-8;base64,