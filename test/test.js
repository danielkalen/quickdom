(function (require, global) {
require = (function (cache, modules, cx) {
var loader = function (r) {
if (!modules[r]) throw new Error(r + ' is not a module');
return cache[r] ? cache[r].exports : ((cache[r] = {
exports: {}
}, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
};
loader.modules = modules;
return loader;
})({}, {
"entry.js": function (require, module, exports) {
var chai, checkChildStructure, creator, elementSuffix, expect, i, j, len, len1, nonElementSuffix, ref, ref1, ref2, ref3, ref4, restartSandbox, sandbox;
this.dimensions = require("simulate.coffee");
this.Dom = this.DOM = window.quickdom;
mocha.setup('tdd');
mocha.slow(400);
mocha.timeout(12000);
if (!window.location.hostname) {
mocha.bail();
}
chai = require("node_modules/chai/index.js");
chai.use(require("node_modules/chai-style/sources/index.js"));
chai.config.truncateThreshold = 1e3;
({expect} = chai);
sandbox = null;
restartSandbox = function () {
if (sandbox) {
sandbox.parentElement.removeChild(sandbox);
}
sandbox = document.createElement('div');
sandbox.id = 'sandbox';
sandbox.setAttribute('style', 'border:1px solid; padding:20px; box-sizing:border-box');
return document.body.appendChild(sandbox);
};
checkChildStructure = function (main) {
return function (...children) {
var child, i, index, len;
expect(main.children.length).to.equal(children.length);
for ((index = i = 0, len = children.length); i < len; index = ++i) {
child = children[index];
expect(main.children[index]).to.equal(child);
expect(child.el.parentNode).to.equal(main.el);
expect(child.parent).to.equal(main);
}
};
};
suite("QuickDom", function () {
setup(restartSandbox);
test("Version Property", function () {
var packageVersion;
packageVersion = "1.0.88";
return expect(Dom.version).to.equal(packageVersion);
});
suite("Element Creation", function () {
test("Basic Creation", function () {
var div;
div = Dom('div');
expect(typeof div).to.equal('object');
expect(typeof div.el).to.equal('object');
expect(div.el).to.be.instanceOf(window.HTMLDivElement);
expect(div.parent).to.be.undefined;
return expect(div.children.length).to.equal(0);
});
test("Shortcuts", function () {
var i, len, type, types;
expect(Dom.a().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.link().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.anchor().el.constructor).to.equal(Dom('a').el.constructor);
expect(Dom.div().el.constructor).to.equal(Dom('div').el.constructor);
expect(Dom.text().el.constructor).to.equal(Dom('text').el.constructor);
expect(Dom.span().el.constructor).to.equal(Dom('span').el.constructor);
expect(Dom.h4().el.constructor).to.equal(Dom('h4').el.constructor);
expect(Dom.header().el.constructor).to.equal(Dom('header').el.constructor);
expect(Dom.footer().el.constructor).to.equal(Dom('footer').el.constructor);
expect(Dom.section().el.constructor).to.equal(Dom('section').el.constructor);
expect(Dom.button().el.constructor).to.equal(Dom('button').el.constructor);
expect(Dom.input().el.constructor).to.equal(Dom('input').el.constructor);
types = ['a', 'div', 'text', 'span', 'h4', 'header', 'footer', 'section', 'button', 'input'];
for ((i = 0, len = types.length); i < len; i++) {
type = types[i];
expect(Dom[type]().el.constructor.name).not.to.contain('Unknown');
}
});
test("Basic options", function () {
var A, B, C, D, E, F, G, H, I, J, obj;
A = Dom.div({
class: 'abc-123',
props: {
'abc': 123,
'def': 456
}
});
B = Dom.div({
id: 'B',
className: 'abc-123',
attrs: {
'data-abc': 123,
'data-def': 456
}
});
C = Dom.input({
type: 'text',
name: 'abc',
value: 'hello'
});
D = Dom.input({
type: 'checkbox',
checked: true
});
E = Dom.option({
name: 'abc',
value: 'hello',
selected: true
});
F = Dom.link({
href: 'https://google.com/'
});
G = Dom.anchor({
url: 'https://google.com/'
});
H = Dom.text('Some text');
I = Dom.img({
src: 'https://google.com/'
});
J = Dom.div({
relatedInstance: obj = {
a: 1
}
});
expect(A.el.className).to.equal('abc-123');
expect(A.el.abc).to.equal(123);
expect(A.el.def).to.equal(456);
expect(B.el.className).to.equal('abc-123');
expect(B.el.id).to.equal('B');
expect(B.el.getAttribute('data-abc')).to.equal('123');
expect(B.el.getAttribute('data-def')).to.equal('456');
if (B.el.dataset) {
expect(B.el.dataset.abc).to.equal('123');
}
expect(C.el.type).to.equal('text');
expect(C.el.name).to.equal('abc');
expect(C.el.value).to.equal('hello');
expect(D.el.checked).to.equal(true);
expect(E.el.name).to.equal('abc');
expect(E.el.selected).to.equal(true);
expect(F.el.href).to.equal('https://google.com/');
expect(G.el.href).to.equal('https://google.com/');
expect(H.el.nodeType).to.equal(3);
expect(H.el.textContent).to.equal('Some text');
expect(I.el.src).to.equal('https://google.com/');
expect(J.related).to.equal(obj);
return expect(J.options.related).to.equal(obj);
});
test("Creation w/ children", function () {
var A, B;
A = Dom.div(null, 'Some text');
B = Dom.div(null, Dom.span(), 'Some text', Dom.span());
expect(A.el.childNodes.length).to.equal(1);
expect(A.el.children.length).to.equal(0);
expect(A.el.childNodes[0].nodeType).to.equal(3);
expect(A.el.childNodes[0].textContent).to.equal('Some text');
expect(A.children.length).to.equal(1);
expect(B.el.childNodes.length).to.equal(3);
expect(B.el.children.length).to.equal(2);
expect(B.el.childNodes[0].nodeType).to.equal(1);
expect(B.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(B.el.childNodes[1].nodeType).to.equal(3);
expect(B.el.childNodes[1].textContent).to.equal('Some text');
expect(B.el.childNodes[2].nodeType).to.equal(1);
expect(B.el.childNodes[2].nodeName.toLowerCase()).to.equal('span');
return expect(B.children.length).to.equal(3);
});
test("Array syntax", function () {
var section;
section = Dom(['section', {
style: {
display: 'inline'
}
}, ['div', null, 'childA'], ['span', null, ['strong', null, 'childB']], ['div', null, 'childC', ['span', null, 'childC_1'], ['span', null, 'childC_2']]]).appendTo(sandbox);
expect(section).not.to.equal(void 0);
expect(section.raw).to.have.style('display', 'inline');
expect(section.children.length).to.equal(3);
expect(section.children[0].children.length).to.equal(1);
expect(section.children[1].children.length).to.equal(1);
expect(section.children[2].children.length).to.equal(3);
expect(section.children[2].children[1].children.length).to.equal(1);
expect(section.children[2].children[2].children.length).to.equal(1);
expect(section.children[0].text).to.equal('childA');
expect(section.children[1].text).to.equal('childB');
expect(section.children[2].text).to.equal('childCchildC_1childC_2');
expect(section.children[2].children[1].text).to.equal('childC_1');
return expect(section.children[2].children[2].text).to.equal('childC_2');
});
test("Existing Element", function () {
var A, B, C, divRaw;
divRaw = document.createElement('div');
A = Dom(divRaw);
B = Dom(divRaw);
C = Dom(A);
expect(A.el).to.equal(divRaw);
expect(B.el).to.equal(divRaw);
expect(C.el).to.equal(divRaw);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(divRaw._quickElement);
});
test("Existing Element w/ Options", function () {
var div, divRaw;
divRaw = document.createElement('div');
divRaw.id = 'A';
div = Dom(divRaw, {
id: 'B',
class: 'abc-123'
});
expect(divRaw.id).to.equal('B');
expect(divRaw.className).to.equal('abc-123');
div = Dom(div, {
id: 'C',
class: 'def-456'
});
expect(divRaw.id).to.equal('C');
return expect(divRaw.className).to.equal('def-456');
});
test("Existing Element from array-like objects", function () {
var A, B, C, parent, rawA, rawB, rawC;
rawA = document.createElement('div');
rawB = document.createElement('div');
rawC = document.createElement('div');
parent = document.createElement('section');
parent.appendChild(rawA);
parent.appendChild(rawB);
parent.appendChild(rawC);
A = Dom([rawA, rawB, rawC]);
B = Dom(parent.querySelectorAll('div'));
C = Dom(B);
expect(A.el).to.equal(rawA);
expect(B.el).to.equal(rawA);
expect(C.el).to.equal(rawA);
expect(A).to.equal(B);
expect(B).to.equal(C);
return expect(C).to.equal(rawA._quickElement);
});
test("Document node", function () {
var doc;
doc = Dom(document);
expect(doc).not.to.be.undefined;
expect(doc.raw).to.equal(document);
expect(doc.parent).to.equal(void 0);
expect(doc.children.length).to.equal(1);
expect(Dom(sandbox).parents).not.to.contain(doc);
return expect(Dom(sandbox).parents).to.contain(doc.children[0]);
});
test("Window object", function () {
var win;
win = Dom(window);
expect(win).not.to.be.undefined;
expect(win.raw === window).to.be.true;
expect(win.parent).to.equal(void 0);
expect(win.children).to.equal(void 0);
expect(win.append).to.equal(void 0);
expect(win.html).to.equal(void 0);
expect(win.style).to.equal(void 0);
return expect(Dom(sandbox).parents).not.to.contain(win);
});
test("Creation w/ styling", function () {
var computedStyle, div;
div = Dom.div({
style: {
'width': '10px',
'height': 15,
'lameo': '19px',
'background-color': 'blue',
'backgroundSize': 'cover'
}
});
sandbox.appendChild(div.el);
computedStyle = getComputedStyle(div.el);
expect(div.style.lameo).to.equal(void 0);
expect(computedStyle.lameo).to.equal(void 0);
expect(computedStyle.width).to.equal('10px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.backgroundColor).not.to.equal('');
return expect(computedStyle.backgroundSize).to.equal('cover');
});
test("SVG elements can be created via a '*' in the element's type string", function () {
var regDiv, svgBad, svgDiv, svgGood, svgPolyBad, svgPolyGood;
svgBad = Dom('svg').el;
svgGood = Dom('*svg').el;
svgPolyBad = Dom('polyline').el;
svgPolyGood = Dom('*polyline').el;
svgDiv = Dom('*div').el;
regDiv = Dom('div').el;
expect(svgBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgPolyBad).to.be.instanceOf(HTMLUnknownElement);
expect(svgGood).to.be.instanceOf(SVGSVGElement);
expect(svgPolyGood).to.be.instanceOf(SVGPolylineElement);
return expect(svgDiv.constructor).not.to.equal(regDiv.constructor);
});
test("QuickDom.html() accepts an html string which would be parsed and converted into a QuickBatch instance", function () {
var htmlString;
htmlString = "<div>firstChildText</div><span>secondChildText</span> textNode <strong>abc123</strong>";
window.batch = Dom.html(htmlString);
expect(typeof batch).to.equal('object');
expect(batch.constructor.name).to.equal('QuickBatch');
expect(batch.elements.length).to.equal(4);
expect(batch.elements[0].type).to.equal('div');
expect(batch.elements[1].type).to.equal('span');
expect(batch.elements[2].type).to.equal('text');
expect(batch.elements[3].type).to.equal('strong');
expect(batch.elements[0].text).to.equal('firstChildText');
expect(batch.elements[1].text).to.equal('secondChildText');
expect(batch.elements[2].text).to.include('textNode');
return expect(batch.elements[3].text).to.equal('abc123');
});
test("Method/Property aliases", function () {
var div;
div = Dom('div');
expect(div.raw).to.equal(div.el);
expect(div[0]).to.equal(div.el);
expect(div.css).to.equal(div.style);
expect(div.replaceWith).to.equal(div.replace);
expect(div.removeListener).to.equal(div.off);
return expect(div.removeListener('eventA'));
});
return test("user-defined methdods/getters/setters", function () {
var divA, divB;
divA = Dom.div();
divB = Dom.div({
methods: {
scrollTop: {
get: function () {
return this.raw.scrollTop;
}
},
weight: {
get: function () {
return this.raw.weight;
}
},
value: {
get: function () {
return this.raw.value;
},
set: function (value) {
return this.raw.value = value;
}
},
name: true,
bigIndex: function () {
return this.index * 10;
}
}
});
sandbox.append(divA);
sandbox.append(divB);
divA.raw.value = divB.raw.value = 'abc';
expect(typeof divA.scrollTop).to.equal('undefined');
expect(typeof divB.scrollTop).to.equal('number');
expect(typeof divA.value).to.equal('undefined');
expect(typeof divB.value).to.equal('string');
expect(typeof divA.name).to.equal('undefined');
expect(typeof divB.name).to.equal('undefined');
expect(typeof divA.bigIndex).to.equal('undefined');
expect(typeof divB.bigIndex).to.equal('function');
expect(divB.scrollTop).to.equal(divB.raw.scrollTop);
divB.raw.weight = '1';
expect(divB.weight).to.equal('1');
divB.weight = '2';
expect(divB.weight).to.equal('1');
expect(divB.value).to.equal('abc');
divB.value = '123';
expect(divB.value).to.equal('123');
return expect(divB.bigIndex()).to.equal(divB.index * 10);
});
});
suite("Events", function () {
test("Events can be listened to via the .on method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myClick', function (event) {
expect(typeof event).to.equal('object');
expect(event.type).to.equal('myClick');
return emitCountA++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
div.on('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(1);
expect(emitCountA).to.equal(3);
div.el.emitEvent('myClick');
expect(emitCountB).to.equal(2);
return expect(emitCountA).to.equal(4);
});
test("Events can be emitted via the .emit method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(2);
return expect(emitCountB).to.equal(2);
});
test("Event handlers can be manually invoked with a custom arg via the .emitPrivate method", function () {
var arg, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
arg = null;
div = Dom.div();
div.on('myEvent', function () {
emitCountA++;
return arg = arguments[0];
});
div.el.addEventListener('myEvent', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(null);
div.emitPrivate('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(0);
expect(arg).to.equal(void 0);
div.emitPrivate('myEvent', 'abc123');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(0);
expect(arg).to.equal('abc123');
div.el.emitEvent('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(1);
expect(arg).not.to.equal('abc123');
return expect(typeof arg).to.equal('object');
});
test("Booleans can be passed for the 2nd and 3rd args of .emit to control event.bubbles and event.cancelable", function () {
var div, emitCountA, emitCountB, emitCountC;
emitCountA = emitCountB = emitCountC = 0;
div = Dom.div();
div.on('eventA', function (event) {
emitCountA++;
expect(event.bubbles).to.be.true;
return expect(event.cancelable).to.be.true;
});
div.on('eventB', function (event) {
emitCountB++;
expect(event.bubbles).to.be.false;
return expect(event.cancelable).to.be.true;
});
div.on('eventC', function (event) {
emitCountC++;
expect(event.bubbles).to.be.false;
return expect(event.cancelable).to.be.false;
});
div.emit('eventA');
div.emit('eventB', false);
div.emit('eventC', false, false);
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
return expect(emitCountC).to.equal(1);
});
test("A data object can be passed as the 4th arg of .emit which will be extended onto the event object", function () {
var div, event;
div = DOM.div();
event = null;
div.on('mousedown', function (e) {
return event = e;
});
expect(event).to.equal(null);
div.emit('mousedown');
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal(void 0);
div.emit('mousedown', null, null, {
custom: 'custom',
abc: 123
});
expect(event.type).to.equal('mousedown');
expect(event.custom).to.equal('custom');
expect(event.abc).to.equal(123);
div.emit('mousedown', null, null, true);
expect(event.type).to.equal('mousedown');
return expect(event.custom).to.equal(void 0);
});
test("Event listeners can be removed via the .off method", function () {
var div, emitCountA, emitCountB, emitCountC, emitCountD, eventCB;
emitCountA = emitCountB = emitCountC = emitCountD = 0;
div = Dom.div();
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', eventCB = function () {
return emitCountB++;
});
div.on('anotherEvent', function () {
return emitCountC++;
});
div.el.addEventListener('myEvent', function () {
return emitCountD++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
expect(emitCountC).to.equal(0);
expect(emitCountD).to.equal(0);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(1);
expect(emitCountD).to.equal(1);
div.off('myEvent', eventCB);
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(2);
expect(emitCountD).to.equal(2);
div.on('myEvent', function () {
return emitCountB++;
});
div.off('myEvent');
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
expect(emitCountD).to.equal(3);
div.on('myEvent', function () {
return emitCountA++;
});
div.on('myEvent', function () {
return emitCountB++;
});
div.off();
div.emit('myEvent');
div.emit('anotherEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
expect(emitCountC).to.equal(3);
return expect(emitCountD).to.equal(4);
});
test("Events can be named via a '<event>.<name>' syntax which can be used to remove listeners later on without the original callbacks", function () {
var attachListeners, div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div().appendTo(sandbox);
attachListeners = function () {
div.on('myEvent.someName', function () {
return emitCountA++;
});
return div.on('myEvent', function () {
return emitCountB++;
});
};
attachListeners();
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.emit('myEvent');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.emit('myEvent.someName');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.off('myEvent.someOtherName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(2);
div.off('myEvent.someName');
div.emit('myEvent');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(3);
div.off('myEvent');
attachListeners();
div.emit('myEvent');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(4);
div.off('myEvent');
div.emit('myEvent');
expect(emitCountA).to.equal(3);
return expect(emitCountB).to.equal(4);
});
test("Multiple events can be registered/deregistered at once using whitespace separators", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div();
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(3);
div.emit('two');
expect(emitCount).to.equal(4);
div.emit('three');
expect(emitCount).to.equal(4);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.on('one two   three.someName', function () {
return emitCount++;
});
div.on('one two   three', function () {
return emitCount++;
});
expect(emitCount).to.equal(4);
div.emit('one');
expect(emitCount).to.equal(6);
div.emit('two');
expect(emitCount).to.equal(8);
div.emit('three');
expect(emitCount).to.equal(10);
div.off('two \tone.someName');
div.emit('one');
expect(emitCount).to.equal(11);
div.emit('two');
expect(emitCount).to.equal(12);
div.emit('three');
expect(emitCount).to.equal(14);
div.off('one three');
div.emit('one');
expect(emitCount).to.equal(14);
div.emit('two');
expect(emitCount).to.equal(15);
div.emit('three');
return expect(emitCount).to.equal(15);
});
test("Events can be listened for once via the .once method", function () {
var div, emitCountA, emitCountB;
emitCountA = emitCountB = 0;
div = Dom.div();
div.once('myClick', function (event) {
expect(typeof event).to.equal('object');
return expect(event.type).to.equal('myClick');
});
div.on('myClick', function () {
return emitCountA++;
});
div.once('myClick', function () {
return emitCountB++;
});
expect(emitCountA).to.equal(0);
expect(emitCountB).to.equal(0);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(1);
expect(emitCountB).to.equal(1);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(2);
expect(emitCountB).to.equal(1);
div.once('myClick', function (event) {
return emitCountB++;
});
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(3);
expect(emitCountB).to.equal(2);
div.el.emitEvent('myClick');
expect(emitCountA).to.equal(4);
return expect(emitCountB).to.equal(2);
});
test("Pre-defined event listeners can be passed in options.events", function () {
var div, divB, emitContext, emitCount, listeners;
emitCount = 0;
emitContext = null;
listeners = {
'one two three': function () {
return emitCount++;
},
'four': function () {
return emitCount++;
},
'five': function () {
return emitContext = this;
}
};
div = Dom.div({
events: listeners
});
expect(emitCount).to.equal(0);
div.emit('one');
expect(emitCount).to.equal(1);
div.emit('two');
expect(emitCount).to.equal(2);
div.emit('three');
expect(emitCount).to.equal(3);
div.emit('four');
expect(emitCount).to.equal(4);
div.off('one      three');
div.emit('one');
expect(emitCount).to.equal(4);
div.emit('two');
expect(emitCount).to.equal(5);
div.emit('three');
expect(emitCount).to.equal(5);
div.emit('five');
expect(emitContext).to.equal(div);
div.off();
div.emit('one');
div.emit('two');
div.emit('three');
div.emit('four');
expect(emitCount).to.equal(5);
divB = Dom.div({
events: listeners
});
divB.emit('one');
divB.emit('three');
expect(emitCount).to.equal(7);
expect(emitContext).to.equal(div);
divB.emit('five');
return expect(emitContext).to.equal(divB);
});
test("the inserted event will be privately emitted when the element is inserted into the DOM", function () {
var div, invokeCount, masterParentB, parentA, parentB, parentC;
invokeCount = 0;
parentA = Dom.section();
parentB = Dom.section();
masterParentB = Dom.div();
parentC = Dom.section().appendTo(sandbox);
div = Dom.div();
div.on('inserted', function (el) {
expect(this).to.equal(div);
expect(el).to.equal(div.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
div.appendTo(parentA);
expect(invokeCount).to.equal(0);
div.appendTo(parentB.appendTo(masterParentB));
expect(invokeCount).to.equal(0);
parentA.appendTo(sandbox);
expect(invokeCount).to.equal(0);
div.appendTo(parentC);
expect(invokeCount).to.equal(1);
div.detach();
div.appendTo(parentB.appendTo(sandbox));
expect(invokeCount).to.equal(1);
expect(div.parent).to.equal(parentB);
div.on('inserted', function () {
return expect(invokeCount++).to.equal(1);
});
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentB);
div.appendTo(parentC);
expect(invokeCount).to.equal(2);
expect(div.parent).to.equal(parentC);
div.detach();
div.appendTo(parentA);
div.on('inserted', function () {
return invokeCount++;
});
expect(invokeCount).to.equal(3);
div.detach();
div.appendTo(parentB);
return expect(invokeCount).to.equal(3);
});
return test("QuickElement.replace will trigger the inserted event", function () {
var A, B, invokeCount, parent;
invokeCount = 0;
parent = Dom.section().appendTo(sandbox);
A = Dom.div();
B = Dom.div();
B.on('inserted', function (el) {
expect(this).to.equal(B);
expect(el).to.equal(B.parent);
return expect(invokeCount++).to.equal(0);
});
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
parent.append(A);
expect(invokeCount).to.equal(0);
expect(A.parent).to.equal(parent);
expect(B.parent).to.equal(void 0);
A.replace(B);
expect(invokeCount).to.equal(1);
expect(A.parent).to.equal(void 0);
return expect(B.parent).to.equal(parent);
});
});
suite("Style", function () {
test("Styles can be set via the .style/.css method with args pair of [property, value]", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
div.style('width', '25px');
expect(div.el.style.width).to.equal('25px');
expect(computedStyle.width).to.equal('25px');
div.style('width', '5vh');
expect(div.el.style.width).to.equal('5vh');
return expect(computedStyle.width).to.contain('px');
});
test("Multiple Styles can be set via the .style/.css method by passing a style object", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.style({
width: 25,
height: '33'
});
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('33px');
});
test("Styles defined in the options object will be applied via classNames and not inline style", function () {
var divA, divB;
divA = Dom.div({
style: {
width: 15,
height: 30
}
}).appendTo(sandbox);
divB = Dom.div().appendTo(sandbox).style({
width: 15,
height: 30
});
expect(divA.raw).to.have.style('width', '15px');
expect(divB.raw).to.have.style('width', '15px');
expect(divA.raw).to.have.style('height', '30px');
expect(divB.raw).to.have.style('height', '30px');
expect(divA.raw.style.width).to.equal('');
expect(divB.raw.style.width).to.equal('15px');
expect(divA.raw.style.height).to.equal('');
return expect(divB.raw.style.height).to.equal('30px');
});
test("If passed a property name without a value, the computed value for that property will be returned", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px'
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.style('width')).to.equal('15px');
expect(div.style('height')).to.equal('0px');
div.style({
width: null,
height: 55
});
expect(div.style('width')).to.equal(computedStyle.width);
expect(div.style('height')).to.equal('55px');
div.style('width', '19vw');
return expect(div.style('width')).to.contain('px');
});
test("Functions can be passed as values for properties in style objects which will be invoked with the element's options.relatedInstance as the only argument", function () {
var anotherObj, applyWidth, div;
div = Dom.div({
rate: 25
}).appendTo(sandbox);
applyWidth = function (expectedInstance) {
return div.style({
width: function (instance) {
expect(typeof instance).to.equal('object');
expect(instance).to.equal(expectedInstance);
return div.options.rate;
}
});
};
applyWidth(div);
expect(div.options.rate).to.equal(25);
expect(div.style('width')).to.equal('25px');
div.options.rate = 250;
div.related = anotherObj = {};
applyWidth(anotherObj);
expect(div.style('width')).to.equal('250px');
div = Dom.div({
style: {
width: 30,
height: (function () {
return 50;
}),
fontSize: (function () {
return 20;
})
}
}).appendTo(sandbox);
expect(div.raw).to.have.style('width', '30px');
expect(div.raw).to.have.style('height', '50px');
return expect(div.raw).to.have.style('fontSize', '20px');
});
test("A null value can be passed for a property in order to delete that style", function () {
var div;
div = Dom.div({
style: {
width: '15px',
fontSize: function () {
return 30;
}
}
}).appendTo(sandbox);
div.style('height', 20);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '20px');
expect(div.el.style.width).to.equal('');
expect(div.el.style.height).to.equal('20px');
div.style({
width: null,
height: 12
});
expect(div.el).not.to.have.style('width', '15px');
expect(div.el).to.have.style('height', '12px');
expect(['unset', 'inherit', 'initial'].some(function (s) {
return s === div.el.style.width;
})).to.be.true;
expect(div.el.style.height).to.equal('12px');
div.css('height', null);
expect(div.el.style.height).to.equal('');
expect(div.el.style.width).not.to.equal('');
div.el.style.width = null;
expect(div.el.style.width).to.equal('');
expect(div.el).to.have.style('width', '15px');
div.css('width', null);
expect(div.el.style.width).not.to.equal('');
expect(div.el).not.to.have.style('width', '15px');
div.style('height', function () {
return 30;
});
expect(div.el.style.height).to.equal('30px');
div.style('height', function () {
return null;
});
expect(div.el.style.height).to.equal('');
expect(div.el.style.fontSize).to.equal('30px');
div.style('fontSize', null);
return expect(div.el.style.fontSize).to.equal('');
});
test(".styleSafe() can be used to obtain the value for a given property even for non-inserted elements or elements with options.styleAfterInsert", function () {
var divA, divB, heightA, heightB, prop, style, text;
style = {
width: '8px',
height: '9px',
zIndex: function (field) {
return field.options.theIndex;
},
$happy: {
width: '18px',
zIndex: function (field) {
return field.options.theIndex * 2;
}
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style,
theIndex: '12'
});
divB = Dom.div({
style,
theIndex: '29',
styleAfterInsert: true
});
divA.style({
fontSize: 10,
position: 'relative'
});
divB.style({
fontSize: 10,
position: 'relative'
});
prop = function (el, target) {
return {
computed: el.style(target),
inline: el.raw.style[target],
safe: '' + el.styleSafe(target)
};
};
expect(prop(divA, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divB, 'fontSize')).to.eql({
computed: '',
inline: '10px',
safe: '10px'
});
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '8px'
});
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '9px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '12',
safe: '12'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '29'
});
divA.state('happy', true);
divB.state('happy', true);
expect(prop(divA, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divB, 'width')).to.eql({
computed: '',
inline: '',
safe: '18px'
});
expect(prop(divA, 'zIndex')).to.eql({
computed: '',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '',
inline: '',
safe: '58'
});
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(prop(divA, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
expect(prop(divB, 'height')).to.eql({
computed: '',
inline: '',
safe: '100%'
});
divA.appendTo(sandbox);
divB.appendTo(sandbox);
heightA = getComputedStyle(divA.raw).height;
heightB = getComputedStyle(divB.raw).height;
expect(prop(divA, 'zIndex')).to.eql({
computed: '24',
inline: '24',
safe: '24'
});
expect(prop(divB, 'zIndex')).to.eql({
computed: '58',
inline: '58',
safe: '58'
});
expect(prop(divA, 'height')).to.eql({
computed: heightA,
inline: '',
safe: heightA
});
expect(prop(divB, 'height')).to.eql({
computed: heightB,
inline: '',
safe: heightB
});
expect(divA.styleSafe('height')).to.equal(heightA);
expect(divA.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('height')).to.equal(heightB);
expect(divB.styleSafe('height', true)).to.equal('100%');
divB.appendTo(sandbox);
expect(divB.style('height')).not.to.equal('');
expect(divB.style('height')).not.to.equal('100%');
expect(divB.style('height')).to.contain('px');
expect(divB.styleSafe('height')).to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).not.to.equal(divB.style('height'));
expect(divB.styleSafe('height', true)).to.equal('100%');
expect(divB.styleSafe('margin', true)).to.equal('');
expect(divB.style('width')).to.equal('18px');
expect(divA.styleSafe('fakeProp')).to.equal(divA);
expect(divA.styleSafe(123)).to.equal(divA);
text = Dom.text('abc123').appendTo(divA);
expect(text.styleSafe('fakeProp')).to.equal(void 0);
return expect(text.styleSafe(123)).to.equal(void 0);
});
test(".styleSafe() will work with instances with no given base styles", function () {
var divA, divB;
divA = Dom.div();
divB = Dom(document.createElement('div'));
expect(function () {
divA.styleSafe('height');
return divB.styleSafe('height');
}).not.to.throw();
expect(divA.styleSafe('height')).to.equal('');
return expect(divB.styleSafe('height')).to.equal('');
});
test(".styleParsed() is a shorthand for parseFloat(.styleSafe())", function () {
var divA, divB, style;
style = {
width: '8px',
height: '9px',
$happy: {
width: '18px'
},
$relaxed: {
height: '100%'
}
};
divA = Dom.div({
style
});
divB = Dom.div({
style,
styleAfterInsert: true
});
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('8px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('8px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('happy', true);
divB.state('happy', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.style('width')).to.equal('');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('');
expect(divA.styleSafe('height')).to.equal('100%');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('');
expect(divB.styleSafe('width')).to.equal('18px');
expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
divA.appendTo(sandbox);
divB.appendTo(sandbox);
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.style('width')).to.equal('18px');
expect(divA.styleSafe('width')).to.equal('18px');
expect(divA.styleParsed('width')).to.equal(parseFloat(divA.styleSafe('width')));
expect(divA.style('height')).to.equal('9px');
expect(divA.styleSafe('height')).to.equal('9px');
expect(divA.styleParsed('height')).to.equal(parseFloat(divA.styleSafe('height')));
expect(divB.style('width')).to.equal('18px');
expect(divB.styleSafe('width')).to.equal('18px');
return expect(divB.styleParsed('width')).to.equal(parseFloat(divB.styleSafe('width')));
});
test(".recalcStyle() re-applies all function-value styles", function () {
var count, div;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
div.state('relaxed', true);
expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 1,
F: 1,
G: 0
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 0
});
div.state('funny', true);
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 2,
F: 2,
G: 1
});
div.recalcStyle();
expect(count).to.eql({
A: 4,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.state('funny', false);
expect(count).to.eql({
A: 5,
B: 3,
C: 2,
D: 2,
E: 3,
F: 3,
G: 2
});
div.recalcStyle();
return expect(count).to.eql({
A: 6,
B: 3,
C: 2,
D: 2,
E: 4,
F: 4,
G: 2
});
});
test(".recalcStyle() accepts a single argument to indicate if to recalc style on children", function () {
var count, div, wrapper, wrapperCount;
count = {
A: 0,
B: 0,
C: 0,
D: 0,
E: 0,
F: 0,
G: 0
};
wrapperCount = 0;
wrapper = Dom.div({
style: {
width: function () {
return ++wrapperCount;
}
}
});
div = Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
},
fontSize: function () {
return ++count.C;
},
$happy: {
opacity: 0.5,
fontSize: function () {
return ++count.D;
}
},
$relaxed: {
height: function () {
return ++count.E;
},
fontSize: function () {
return ++count.F;
},
$funny: {
width: function () {
return ++count.G;
}
}
}
}
});
div.appendTo(wrapper);
expect(wrapperCount).to.equal(1);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(2);
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 0,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(true);
expect(wrapperCount).to.equal(3);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 0,
E: 0,
F: 0,
G: 0
});
div.state('happy', true);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle();
expect(wrapperCount).to.equal(4);
expect(count).to.eql({
A: 2,
B: 2,
C: 2,
D: 1,
E: 0,
F: 0,
G: 0
});
wrapper.recalcStyle(1);
expect(wrapperCount).to.equal(5);
return expect(count).to.eql({
A: 3,
B: 3,
C: 2,
D: 2,
E: 0,
F: 0,
G: 0
});
});
test("If options.recalcOnResize is set, .recalcStyle() will be invoked on each resize event", function () {
var count;
count = {
A: 0,
B: 0,
C: 0,
D: 0
};
Dom.div({
style: {
width: function () {
return ++count.A;
},
opacity: 1,
height: function () {
return ++count.B;
}
}
});
Dom.div({
recalcOnResize: true,
style: {
width: function () {
return ++count.C;
},
opacity: 1,
height: function () {
return ++count.D;
}
}
});
expect(count).to.eql({
A: 1,
B: 1,
C: 1,
D: 1
});
Dom(window).emit('resize');
expect(count).to.eql({
A: 1,
B: 1,
C: 2,
D: 2
});
Dom(window).emit('resize');
return expect(count).to.eql({
A: 1,
B: 1,
C: 3,
D: 3
});
});
test("If options.forceStyle is set, all registered styles will have the '!important' flag set", function () {
var divA, divB, style;
style = DOM.style({
props: {
innerHTML: ".theDiv {width:50px}"
}
});
divA = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
}
}).appendTo(sandbox);
divB = DOM.div({
className: 'theDiv',
style: {
width: 100,
height: 100
},
forceStyle: true
}).appendTo(sandbox);
expect(divA.style('width')).to.equal('100px');
expect(divB.style('width')).to.equal('100px');
style.appendTo(document.head);
expect(divA.style('width')).to.equal('50px');
expect(divB.style('width')).to.equal('100px');
expect(divA.attr('style') === '' || divA.attr('style') === null).to.be.true;
expect(divB.attr('style') === '' || divB.attr('style') === null).to.be.true;
divA.style('width', function () {
return 75;
});
divB.style('width', function () {
return 75;
});
divA.style('height', 85);
divB.style('height', 85);
expect(divA.attr('style')).not.to.equal('');
expect(divB.attr('style')).not.to.equal('');
expect(divA.attr('style')).not.to.include('75px !important');
expect(divB.attr('style')).to.include('75px !important');
expect(divA.attr('style')).not.to.include('85px !important');
expect(divB.attr('style')).to.include('85px !important');
expect(divA.style('width')).to.equal('75px');
expect(divB.style('width')).to.equal('75px');
return style.remove();
});
test(".show()/.hide() will toggle the element's visibility", function () {
var div;
div = Dom.div().appendTo(sandbox);
expect(div.style('display')).to.equal('block');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('block');
div.show();
return expect(div.style('display')).to.equal('block');
});
test(".show() will set the element's display style to the provided argument, or to the value provided in the style object", function () {
var div;
div = Dom.div({
style: {
display: 'inline'
}
}).appendTo(sandbox);
expect(div.style('display')).to.equal('inline');
div.hide();
expect(div.style('display')).to.equal('none');
div.show();
expect(div.style('display')).to.equal('inline');
div.hide();
div.show('inline-block');
return expect(div.style('display')).to.equal('inline-block');
});
return test("SVG elements", function () {
var svg;
svg = Dom(['*svg', {
style: {
display: 'block',
width: 10,
height: 10,
$happy: {
width: 20,
height: 20
}
}
}]).appendTo(sandbox);
expect(svg.style('width')).to.equal('10px');
expect(svg.style('height')).to.equal('10px');
svg.state('happy', true);
expect(svg.style('width')).to.equal('20px');
return expect(svg.style('height')).to.equal('20px');
});
});
suite("State", function () {
test("States can be polled for a value by passing only the target state's name to .state & can be toggled on/off by passing a second argument", function () {
var div;
div = Dom.div();
expect(div.state('funny')).to.be.false;
div.state('funny', true);
expect(div.state('funny')).to.be.true;
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be.true;
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.state('funny', false);
expect(div.state('funny')).to.be.false;
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.state('$funny', true);
div.state('$base', true);
expect(div.state('funny')).to.be.true;
return expect(div.state('base')).to.be.false;
});
test("A key:value pair object can be passed to toggle state for multiple states at once", function () {
var div;
div = Dom.div();
expect(div.state('a')).to.equal(false);
expect(div.state('b')).to.equal(false);
expect(div.state('c')).to.equal(false);
div.state({
a: true,
b: 1
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(true);
expect(div.state('c')).to.equal(false);
div.state({
b: false,
c: 'y'
});
expect(div.state('a')).to.equal(true);
expect(div.state('b')).to.equal(false);
return expect(div.state('c')).to.equal(true);
});
test(".state() without arguments should return an array of active states", function () {
var el;
el = DOM.div();
expect(el.state()).to.eql([]);
el.state('happy', true);
el.state('relaxed', true);
expect(el.state()).to.eql(['happy', 'relaxed']);
el.state('happy', false);
expect(el.state()).to.eql(['relaxed']);
el.state('happy', true);
return expect(el.state()).to.eql(['relaxed', 'happy']);
});
test("All states can be cleared/toggled off via .resetState", function () {
var div;
div = Dom.div();
div.state('funny', true);
div.state('happy', true);
div.state('relaxed', true);
expect(div.state('funny')).to.be.true;
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.resetState();
expect(div.state('funny')).to.be.false;
expect(div.state('happy')).to.be.false;
return expect(div.state('relaxed')).to.be.false;
});
test("A state can be toggled on/off via .toggleState", function () {
var div;
div = DOM.div();
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
expect(div.state('happy')).to.equal(true);
div.toggleState('happy');
expect(div.state('happy')).to.equal(false);
div.toggleState('happy');
return expect(div.state('happy')).to.equal(true);
});
test("Styles can be passed under specific states using a '$' prefix before the state name", function () {
var computedStyle, div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px'
},
$happy: {
width: '25px',
marginTop: '20px'
},
$relaxed: {
width: '35px',
marginLeft: '12px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', false);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
expect(computedStyle.marginLeft).to.equal('0px');
div.state('happy', true);
div.state('relaxed', true);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('20px');
expect(computedStyle.marginLeft).to.equal('12px');
div.state('happy', false);
expect(computedStyle.width).to.equal('35px');
expect(computedStyle.height).to.equal('15px');
expect(computedStyle.marginTop).to.equal('0px');
return expect(computedStyle.marginLeft).to.equal('12px');
});
test("A state:eventName (or state:eventOpts) map can be passed set for options.stateTriggers", function () {
var computedStyle, div;
div = Dom.div({
stateTriggers: {
happy: {
on: 'becameHappy',
off: 'becameSad'
},
relaxed: 'isRelaxed'
},
style: {
$base: {
width: '15px'
},
$happy: {
width: '25px'
},
$relaxed: {
width: '35px'
}
}
}).appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.state('happy')).to.be.false;
expect(div.state('relaxed')).to.be.false;
expect(computedStyle.width).to.equal('15px');
div.emit('becameHappy');
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.false;
expect(computedStyle.width).to.equal('25px');
div.emit('isRelaxed');
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
expect(computedStyle.width).to.equal('35px');
div.emit('becameSad');
expect(div.state('happy')).to.be.false;
expect(div.state('relaxed')).to.be.true;
expect(computedStyle.width).to.equal('35px');
div.state('relaxed', false);
return expect(computedStyle.width).to.equal('15px');
});
test("options.stateTriggers won't be attached if they aren't being used in style object", function () {
var divA, divB;
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(false);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("options.stateTriggers can be forced to be attached even if they aren't being used in style object via ._attachStateEvents(true)", function () {
var attachStateEvents, divA, divB;
attachStateEvents = Dom.div()._attachStateEvents ? '_attachStateEvents' : '_ae';
divA = Dom.div({
style: {
$hover: {
display: 'block'
}
}
});
divB = Dom.div({
style: {
$focus: {
display: 'block'
}
}
});
divA[attachStateEvents](true);
divB[attachStateEvents](true);
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('mouseenter');
divB.el.emitEvent('mouseenter');
expect(divA.state('hover')).to.equal(true);
expect(divB.state('hover')).to.equal(true);
divA.el.emitEvent('mouseleave');
divB.el.emitEvent('mouseleave');
expect(divA.state('hover')).to.equal(false);
expect(divB.state('hover')).to.equal(false);
divA.el.emitEvent('focus');
divB.el.emitEvent('focus');
expect(divA.state('focus')).to.equal(true);
expect(divB.state('focus')).to.equal(true);
divA.el.emitEvent('blur');
divB.el.emitEvent('blur');
expect(divA.state('focus')).to.equal(false);
return expect(divB.state('focus')).to.equal(false);
});
test("The hover and focus states will be listened for and toggled by default by their appropriate events", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '15px',
height: '15px',
backgroundColor: 'rgb(45, 45, 45)'
},
$hover: {
width: '25px',
marginTop: '20px',
backgroundColor: 'rgb(155, 155, 155)'
},
$focus: {
width: '35px',
backgroundColor: 'rgb(200, 200, 200)'
}
}
});
div.appendTo(sandbox);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(155, 155, 155)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(45, 45, 45)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseenter');
div.emit('focus');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '20px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
expect(div.el.style.marginTop).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '35px');
expect(div.el).to.have.style('height', '15px');
expect(div.el).to.have.style('marginTop', '0px');
expect(div.el).to.have.style('backgroundColor', 'rgb(200, 200, 200)');
return expect(div.el.style.marginTop).to.equal('');
});
test("If not passed a style map under the 'base' state, all non-state properties on the style object will be considered as 'base' state properties", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
height: '20px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('20px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
return expect(computedStyle.height).to.equal('20px');
});
test("State-specific styles will be removed upon state turn off or restored to the base value", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
expect(div.el.style.height).to.equal('');
div.emit('mouseenter');
expect(div.el).to.have.style('width', '25px');
expect(div.el).to.have.style('height', '30px');
expect(div.el.style.height).to.equal('');
div.emit('mouseleave');
expect(div.el).to.have.style('width', '15px');
expect(div.el).to.have.style('height', '0px');
return expect(div.el.style.height).to.equal('');
});
test("Higher order state styles will have a higher precedence than the 'base' style to be used as replacments for pending-removal state-styles", function () {
var computedStyle, div;
div = Dom.div({
style: {
width: '15px',
$hover: {
width: '25px',
height: '30px'
},
$focus: {
height: '45px'
}
}
});
div.appendTo(sandbox);
computedStyle = getComputedStyle(div.el);
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('0px');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('30px');
div.emit('focus');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('mouseleave');
expect(computedStyle.width).to.equal('15px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
div.emit('focus');
div.emit('mouseenter');
expect(computedStyle.width).to.equal('25px');
expect(computedStyle.height).to.equal('45px');
div.emit('blur');
expect(computedStyle.width).to.equal('25px');
return expect(computedStyle.height).to.equal('30px');
});
test("State toggles will be passed to children elements unless options.passStateToChildren is off", function () {
var A, B, C, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div({
passStateToChildren: false
}).appendTo(A);
expect(Main.state('happy')).to.be.false;
expect(A.state('happy')).to.be.false;
expect(B.state('happy')).to.be.false;
expect(C.state('happy')).to.be.false;
Main.state('happy', true);
expect(Main.state('happy')).to.be.true;
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
expect(C.state('happy')).to.be.true;
Main.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be.false;
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
expect(C.state('happy')).to.be.true;
Main.state('happy', true);
Main.options.passStateToChildren = true;
A.options.passStateToChildren = false;
Main.state('happy', false);
expect(Main.state('happy')).to.be.false;
expect(A.state('happy')).to.be.false;
expect(B.state('happy')).to.be.true;
return expect(C.state('happy')).to.be.true;
});
test("State styles can be nested to trigger when all states are toggled on", function () {
var div;
div = Dom.div({
style: {
$base: {
width: '12px',
height: '12px',
fontSize: '10px'
},
$funny: {
fontSize: '15px',
height: '15px'
},
$happy: {
width: '14px',
fontSize: '14px',
$relaxed: {
height: '11px',
fontSize: '17px',
$funny: {
width: '10px',
height: '14px'
}
}
},
$relaxed: {
width: '17px'
}
}
});
div.appendTo(sandbox);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('funny', true);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('15px');
expect(div.style('fontSize')).to.equal('15px');
div.state('funny', false);
expect(div.style('width')).to.equal('12px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('14px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('14px');
div.state('relaxed', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('12px');
expect(div.style('fontSize')).to.equal('10px');
div.state('happy', true);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('11px');
expect(div.style('fontSize')).to.equal('17px');
div.state('funny', true);
expect(div.style('width')).to.equal('10px');
expect(div.style('height')).to.equal('14px');
expect(div.style('fontSize')).to.equal('17px');
div.state('happy', false);
expect(div.style('width')).to.equal('17px');
expect(div.style('height')).to.equal('15px');
return expect(div.style('fontSize')).to.equal('15px');
});
test("QuickElement.rect should contain an updated version of the element's ClientRect", function () {
var div, rectA, rectB, rectC;
div = Dom.div().appendTo(sandbox);
rectA = div.rect;
rectB = div.rect;
expect(rectA).to.be.instanceOf(ClientRect);
expect(rectB).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
div.style('width', '7px');
rectC = div.rect;
expect(rectC).to.be.instanceOf(ClientRect);
expect(rectA).to.eql(rectB);
expect(rectA).not.to.eql(rectC);
expect(rectA.width).not.to.equal(7);
expect(rectB.width).not.to.equal(7);
return expect(rectC.width).to.equal(7);
});
test("QuickElement.width should return the updated version of an element's computed width", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px'
});
div.style({
width: '50%'
});
expect(div.width).to.equal(500);
div.style({
width: '10%'
});
expect(div.width).to.equal(100);
div.style({
width: '97px'
});
return expect(div.width).to.equal(97);
});
test("QuickElement.height should return the updated version of an element's computed height", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
height: '1000px'
});
div.style({
height: '50%'
});
expect(div.height).to.equal(500);
div.style({
height: '10%'
});
expect(div.height).to.equal(100);
div.style({
height: '97px'
});
return expect(div.height).to.equal(97);
});
test("QuickElement.width/.height setters are shortcuts for .style() setters", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
parent.style({
width: '1000px',
height: '1000px'
});
div.style({
width: '50%',
height: '50%'
});
div.width = div.height = '50%';
expect(div.width).to.equal(500);
expect(div.height).to.equal(500);
div.width = div.height = '10%';
expect(div.width).to.equal(100);
expect(div.height).to.equal(100);
div.width = div.height = '97px';
expect(div.width).to.equal(97);
return expect(div.height).to.equal(97);
});
test("QuickElement.orientation should return the updated version of an element's computed orientation", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.orientation).to.equal('landscape');
div.style({
width: 550,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 600,
height: 600
});
expect(div.orientation).to.equal('portrait');
div.style({
width: 601,
height: 600
});
return expect(div.orientation).to.equal('landscape');
});
test("QuickElement.aspectRatio should return the updated version of an element's computed aspect-ratio", function () {
var div, parent;
parent = Dom.div().appendTo(sandbox);
div = Dom.div().appendTo(parent);
div.style({
width: 500,
height: 400
});
expect(div.aspectRatio).to.equal(1.25);
div.style({
width: 540,
height: 600
});
expect(div.aspectRatio).to.equal(0.9);
div.style({
width: 600,
height: 600
});
expect(div.aspectRatio).to.equal(1);
div.style({
width: 300,
height: 900
});
return expect(div.aspectRatio).to.equal(0.33333333333333333333333333);
});
test("If options.styleAfterInsert is passed, function styles will be applied only after the element is inserted into the DOM", function () {
var className, divA, divB, divC, divReg, parentOpacityGetter;
parentOpacityGetter = function () {
if (this.parent) {
return this.parent.style('opacity');
} else {
return '0.5';
}
};
divReg = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
}
});
divA = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divB = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
divC = Dom.div({
style: {
height: '19px',
opacity: parentOpacityGetter
},
styleAfterInsert: true
});
className = divReg.raw.className || 'no className';
expect(divReg.raw.className).to.equal(className);
expect(divA.raw.className).to.equal(className);
expect(divB.raw.className).to.equal(className);
expect(divC.raw.className).to.equal(className);
expect(divReg.el.style.opacity).to.equal('0.5');
expect(divA.el.style.opacity).to.equal('');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divA.appendTo(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('');
expect(divC.el.style.opacity).to.equal('');
divB.insertBefore(sandbox);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
sandbox.appendChild(divC.el);
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('');
divC.parent;
expect(divA.el.style.opacity).to.equal('1');
expect(divB.el.style.opacity).to.equal('1');
expect(divC.el.style.opacity).to.equal('1');
return divC.appendTo(sandbox);
});
test("Any styles applied by states before the element has been inserted into the DOM and when options.styleAfterInsert is on will be re-applied after insert", function () {
var divA, divReg;
divReg = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
}
});
divA = Dom.div({
style: {
$base: {
height: function () {
return '19px';
}
},
$funny: {
height: function () {
return '29px';
}
},
$happy: {
height: function () {
return '39px';
}
}
},
styleAfterInsert: true
});
expect(divReg.el.style.height).to.equal('19px');
expect(divA.el.style.height).to.equal('');
divReg.state('funny', true);
divA.state('funny', true);
expect(divReg.el.style.height).to.equal('29px');
expect(divA.el.style.height).to.equal('');
divReg.state('happy', true);
divA.state('happy', true);
expect(divReg.el.style.height).to.equal('39px');
expect(divA.el.style.height).to.equal('');
divReg.appendTo(sandbox);
divA.appendTo(sandbox);
expect(divReg.el.style.height).to.equal('39px');
return expect(divA.el.style.height).to.equal('39px');
});
test("If an element with options.styleAfterInsert is appended into a detached element, styles will be applied only after the parent is appended to the DOM", function () {
var detachedParent, divA, divReg;
detachedParent = Dom.div();
divReg = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
}
});
divA = Dom.div({
style: {
height: (function () {
return '19px';
}),
$happy: {
$relaxed: {
width: function () {
return '31px';
}
}
}
},
styleAfterInsert: true
});
divReg.state('happy', true);
divReg.state('relaxed', true);
divA.state('happy', true);
divA.state('relaxed', true);
divA.state('relaxed', true);
divA.style('visibility', 'hidden');
expect(divReg.el.style.height).to.equal('19px');
expect(divReg.el.style.width).to.equal('31px');
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
divA.appendTo(detachedParent);
expect(divA.el.style.height).to.equal('');
expect(divA.el.style.width).to.equal('');
expect(divA.el.style.visibility).to.equal('hidden');
detachedParent.appendTo(sandbox);
expect(divA.el.style.height).to.equal('19px');
expect(divA.el.style.width).to.equal('31px');
return expect(divA.el.style.visibility).to.equal('hidden');
});
test("QuickElement.pipeState can be used to redirect all state toggles to the provided target element", function () {
var childA, childB, divA, divB, parentA, parentB;
parentA = Dom.div();
parentB = Dom.div({
passStateToChildren: false
});
divA = Dom.div(null).appendTo(parentA);
divB = Dom.div(null).appendTo(parentB);
childA = Dom.span().appendTo(divA);
childB = Dom.span().appendTo(divB);
divA.pipeState();
divA.state('1', true);
expect(parentA.state('1')).to.equal(false);
expect(divA.state('1')).to.equal(true);
expect(childA.state('1')).to.equal(true);
divA.pipeState(parentA);
divA.state('2', true);
expect(parentA.state('2')).to.equal(true);
expect(divA.state('2')).to.equal(true);
expect(childA.state('2')).to.equal(true);
divA.pipeState(false);
divA.state('2.5', true);
expect(parentA.state('2.5')).to.equal(false);
expect(divA.state('2.5')).to.equal(true);
expect(childA.state('2.5')).to.equal(true);
divB.pipeState(true);
divB.state('3', true);
expect(parentB.state('3')).to.equal(false);
expect(divB.state('3')).to.equal(true);
expect(childB.state('3')).to.equal(true);
divB.pipeState(parentB);
divB.state('4', true);
expect(parentB.state('4')).to.equal(true);
expect(divB.state('4')).to.equal(false);
expect(childB.state('4')).to.equal(false);
divA.pipeState(parentB);
divA.state('5', true);
expect(parentA.state('5')).to.equal(false);
expect(parentB.state('5')).to.equal(true);
expect(divA.state('5')).to.equal(false);
expect(divB.state('5')).to.equal(false);
expect(childA.state('5')).to.equal(false);
expect(childB.state('5')).to.equal(false);
divA.pipeState(false);
divB.pipeState(parentA);
divB.state('6', true);
expect(parentA.state('6')).to.equal(true);
expect(parentB.state('6')).to.equal(false);
expect(divA.state('6')).to.equal(true);
expect(divB.state('6')).to.equal(false);
expect(childA.state('6')).to.equal(true);
return expect(childB.state('6')).to.equal(false);
});
test("States can be marked as unpassable to avoid passing to children by including them in options.unpassableStates", function () {
var div, spanA, spanB, subSpan;
div = Dom.div({
unpassableStates: ['B', 'D']
});
spanA = Dom.span().appendTo(div);
spanB = Dom.span().appendTo(div);
subSpan = Dom.span().appendTo(spanB);
expect(div.state('A')).to.equal(false);
expect(spanA.state('A')).to.equal(false);
expect(spanB.state('A')).to.equal(false);
expect(subSpan.state('A')).to.equal(false);
div.state('A', true);
expect(div.state('A')).to.equal(true);
expect(spanA.state('A')).to.equal(true);
expect(spanB.state('A')).to.equal(true);
expect(subSpan.state('A')).to.equal(true);
div.state('B', true);
expect(div.state('B')).to.equal(true);
expect(spanA.state('B')).to.equal(false);
expect(spanB.state('B')).to.equal(false);
expect(subSpan.state('B')).to.equal(false);
div.state('C', true);
expect(div.state('C')).to.equal(true);
expect(spanA.state('C')).to.equal(true);
expect(spanB.state('C')).to.equal(true);
expect(subSpan.state('C')).to.equal(true);
div.state('D', true);
expect(div.state('D')).to.equal(true);
expect(spanA.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(false);
expect(subSpan.state('D')).to.equal(false);
spanB.state('D', true);
expect(spanB.state('D')).to.equal(true);
expect(subSpan.state('D')).to.equal(true);
div.state('D', false);
expect(div.state('D')).to.equal(false);
expect(spanB.state('D')).to.equal(true);
return expect(subSpan.state('D')).to.equal(true);
});
test("When .state() receives a truthy value as the third argument the event will bubble up to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div(null, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div(null, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.state('happy', true, true);
childB.state('happy', true);
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.state('relaxed', true, null);
childB.state('relaxed', true, 'on');
expect(parentA.state('relaxed')).to.equal(false);
expect(parentB.state('relaxed')).to.equal(true);
expect(subParentA.state('relaxed')).to.equal(false);
expect(subParentB.state('relaxed')).to.equal(true);
expect(childA.state('relaxed')).to.equal(true);
expect(childB.state('relaxed')).to.equal(true);
expect(subChildA.state('relaxed')).to.equal(true);
return expect(subChildB.state('relaxed')).to.equal(false);
});
test("options.stateTriggers config objects can specify a 'force' property which will make them get attached even if they aren't used", function () {
var divA, divB;
divA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
});
divB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF'
}
}
});
expect(divA.state('happy')).to.equal(false);
expect(divB.state('happy')).to.equal(false);
divA.raw.emitEvent('happyON');
divB.raw.emitEvent('happyON');
expect(divA.state('happy')).to.equal(true);
expect(divB.state('happy')).to.equal(false);
divB.state('happy', true);
divA.raw.emitEvent('happyOFF');
divB.raw.emitEvent('happyOFF');
expect(divA.state('happy')).to.equal(false);
return expect(divB.state('happy')).to.equal(true);
});
test("options.stateTriggers config objects can specify a 'bubbles' property which will cause the state to bubble to parents instead of cascade to children", function () {
var childA, childB, parentA, parentB, subChildA, subChildB, subParentA, subParentB;
parentA = Dom.section(null, subParentA = Dom.div(null, childA = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
bubbles: true,
force: true
}
}
}, subChildA = Dom.div())));
parentB = Dom.section(null, subParentB = Dom.div(null, childB = Dom.div({
stateTriggers: {
'happy': {
on: 'happyON',
off: 'happyOFF',
force: true
}
}
}, subChildB = Dom.div())));
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(false);
childA.raw.emitEvent('happyON');
childB.raw.emitEvent('happyON');
expect(parentA.state('happy')).to.equal(true);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(true);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(true);
expect(childB.state('happy')).to.equal(true);
expect(subChildA.state('happy')).to.equal(false);
expect(subChildB.state('happy')).to.equal(true);
childA.raw.emitEvent('happyOFF');
childB.raw.emitEvent('happyOFF');
expect(parentA.state('happy')).to.equal(false);
expect(parentB.state('happy')).to.equal(false);
expect(subParentA.state('happy')).to.equal(false);
expect(subParentB.state('happy')).to.equal(false);
expect(childA.state('happy')).to.equal(false);
expect(childB.state('happy')).to.equal(false);
expect(subChildA.state('happy')).to.equal(false);
return expect(subChildB.state('happy')).to.equal(false);
});
test("wrappers created for existing elements should attempt to resolve if its inserted into the DOM on init", function () {
var divA, divA_, divB, divB_;
divA_ = document.createElement('div');
divB_ = document.createElement('div');
sandbox.appendChild(divB_);
divA = Dom(divA_);
divB = Dom(divB_);
divA_.style.height = '100px';
divB_.style.height = '100px';
expect(typeof divA.height).to.equal('number');
expect(typeof divB.height).to.equal('number');
expect(isNaN(divA.height)).to.be.true;
expect(isNaN(divB.height)).to.be.false;
return expect(divA.styleSafe('height')).to.equal('100px');
});
test("state-based text", function () {
var divA, divB, divC;
divA = Dom(['div', null, ['text', {
text: {
$base: 'abc123',
$happy: 'Happy',
$relaxed: 'Relaxed'
}
}]]);
divB = Dom(['div', null, ['text', {
text: {
$happy: 'Happy',
$relaxed: 'Relaxed',
'$relaxed+funny': 'Funny & Relaxed'
}
}]]);
divC = Dom.div({
text: {
$base: 'def456',
$happy: 'ghi789'
}
});
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('happy', true);
divB.state('happy', true);
divC.state('happy', true);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
expect(divC.text).to.equal('ghi789');
divA.state('happy', false);
divB.state('happy', false);
divC.state('happy', false);
expect(divA.text).to.equal('abc123');
expect(divB.text).to.equal('');
expect(divC.text).to.equal('def456');
divA.state('relaxed', true);
divB.state('relaxed', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('happy', true);
divB.state('happy', true);
expect(divA.text).to.equal('Relaxed');
expect(divB.text).to.equal('Relaxed');
divA.state('relaxed', false);
divB.state('relaxed', false);
expect(divA.text).to.equal('Happy');
expect(divB.text).to.equal('Happy');
divB.state('relaxed', true);
divB.state('funny', true);
expect(divB.text).to.equal('Relaxed');
divB.state('relaxed+funny', true);
return expect(divB.text).to.equal('Funny & Relaxed');
});
test("state changes will emit a private stateChange:<state> event", function () {
var div, results;
results = [];
div = Dom.div({
style: {
color: 'white',
opacity: 1,
$happy: {
color: 'black'
}
}
});
div.state('any', true);
div.on('stateChange:happy', function (state) {
return results.push(['happy', state]);
});
div.on('stateChange:relaxed', function (state) {
return results.push(['relaxed', state]);
});
div.on('stateChange:arbitrary', function (state) {
return results.push(['arbitrary', state]);
});
expect(results).to.deep.equal([]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true]]);
div.state('happy', false);
expect(results).to.deep.equal([['happy', true], ['happy', false]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('happy', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('another', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true]]);
div.state('relaxed', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true]]);
div.state('arbitrary', true);
expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
div.state('relaxed', true);
return expect(results).to.deep.equal([['happy', true], ['happy', false], ['happy', true], ['relaxed', true], ['arbitrary', true]]);
});
test("state-based styles can be updated via QuickElement.updateStateStyles", function () {
var div, getStyles;
div = Dom.div({
style: {
width: 5,
height: 5,
marginTop: 5,
$happy: {
marginTop: 10
},
$relaxed: {
marginTop: 20,
width: 20,
$happy: {
height: 40,
marginTop: 40
}
},
$somethingElse: {
width: 60,
marginTop: 60
}
}
}).appendTo(sandbox);
getStyles = function () {
return {
width: div.style('width'),
height: div.style('height'),
marginTop: div.style('marginTop')
};
};
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '5px',
height: '5px',
marginTop: '10px'
});
div.updateStateStyles({
width: 7,
height: 8,
$happy: {
marginTop: 12,
height: 12
}
});
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
expect(getStyles()).to.eql({
width: '7px',
height: '8px',
marginTop: '5px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '7px',
height: '12px',
marginTop: '12px'
});
div.state('happy', false);
div.updateStateStyles({
$base: {
width: 2,
height: 9
},
$relaxed: {
height: 20,
$happy: {
width: 40,
marginTop: function () {
return 45;
}
}
}
});
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('relaxed', true);
expect(getStyles()).to.eql({
width: '20px',
height: '20px',
marginTop: '20px'
});
div.state('happy', true);
expect(getStyles()).to.eql({
width: '40px',
height: '40px',
marginTop: '45px'
});
div.state({
happy: false,
relaxed: false
});
div.el.style.marginTop = null;
expect(getStyles()).to.eql({
width: '2px',
height: '9px',
marginTop: '5px'
});
div.state('somethingElse', true);
return expect(getStyles()).to.eql({
width: '60px',
height: '9px',
marginTop: '60px'
});
});
return test("default states to apply to an element upon creation can be specified via options.state mapping", function () {
var el1, el2, el3;
el1 = DOM.div();
el2 = DOM.div({
state: {
happy: true,
relaxed: false
}
});
el3 = DOM.div({
state: {
relaxed: true
}
});
expect(el1.state('happy')).to.equal(false);
expect(el1.state('relaxed')).to.equal(false);
expect(el2.state('happy')).to.equal(true);
expect(el2.state('relaxed')).to.equal(false);
expect(el3.state('happy')).to.equal(false);
return expect(el3.state('relaxed')).to.equal(true);
});
});
suite("Media Queries", function () {
suiteTeardown(function () {
var ref;
if ((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0) {
return dimensions.restore();
}
});
suiteSetup(function () {
var ref;
if (!((ref = Object.getOwnPropertyDescriptor(window, 'innerWidth')) != null ? ref.configurable : void 0)) {
return this.skip();
}
});
teardown(function () {
var i, level, results1;
results1 = [];
for (level = i = 0; i <= 3; level = ++i) {
results1.push(Dom.CSS.clearRegistered(level));
}
return results1;
});
test("Window dimensions", function () {
var div;
dimensions.simulate(1000, 1000);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
width: '300px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@window(orientation:landscape)': {
marginTop: 6
},
'@window(orientation:portrait)': {
marginTop: 7
},
'@window(max-width:800)': {
zIndex: 3,
width: '280px'
},
'@window(max-width:700, max-height:1000)': {
zIndex: 4,
width: '250px',
height: '250px'
},
'@window(max-height:1000)': {
fontSize: '25px'
},
'@window(min-width:900px)': {
fontSize: '23px'
},
'@window(aspect-ratio:0.5)': {
fontSize: '21px',
lineHeight: '12px'
},
'@window(min-height:1200)': {
fontSize: '20px'
}
}
});
div.appendTo(sandbox);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('23px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(900);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(899);
expect(div.style('fontSize')).to.equal('25px');
dimensions.simulate(899, 1100);
expect(div.style('fontSize')).to.equal('30px');
dimensions.simulate(950);
expect(div.style('fontSize')).to.equal('23px');
dimensions.simulate(950, 1900);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('12px');
dimensions.simulate(950, 1899);
expect(div.style('fontSize')).to.equal('20px');
expect(div.style('lineHeight')).to.equal('30px');
dimensions.simulate(790);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(810);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('300px');
dimensions.simulate(791);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
dimensions.simulate(701, 900);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 900);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
dimensions.simulate(700, 1001);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('width')).to.equal('280px');
expect(div.style('height')).to.equal('300px');
dimensions.simulate(700, 1000);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('width')).to.equal('250px');
expect(div.style('height')).to.equal('250px');
expect(div.style('marginTop')).to.equal('7px');
dimensions.simulate(1100, 1000);
expect(div.style('marginTop')).to.equal('6px');
dimensions.simulate(1100, 1101);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Self dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div().appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '100%',
height: '100%',
fontSize: '30px',
lineHeight: '30px',
'@self(orientation:landscape)': {
marginTop: 6
},
'@self(orientation:portrait)': {
marginTop: 7
},
'@self(position:relative)': {
top: '20px'
},
'@self(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@self(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@self(zIndex:4)': {
lineHeight: '15px'
},
'@self(min-zIndex:6)': {
opacity: '0'
},
'@self(max-fontSize:20)': {
lineHeight: '19px'
},
'@self(min-width:600px)': {
fontSize: '19px'
},
'@self(aspect-ratio:2.25)': {
fontSize: '22px',
lineHeight: '12px'
},
'@self(min-height:700)': {
fontSize: '40px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginTop')).to.equal('6px');
expect(div.style('top')).to.equal('20px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
expect(div.style('opacity')).to.equal('1');
div.style('zIndex', 5);
dimensions.simulate();
expect(div.style('opacity')).to.equal('1');
expect(div.style('lineHeight')).to.equal('37px');
div.style('zIndex', 17);
expect(div.style('opacity')).to.equal('1');
dimensions.simulate();
expect(div.style('opacity')).to.equal('0');
simulateParent(900);
expect(div.style('fontSize')).to.equal('19px');
expect(div.style('lineHeight')).to.equal('30px');
simulateParent(900);
expect(div.style('lineHeight')).to.equal('19px');
simulateParent(900, 400);
expect(div.style('fontSize')).to.equal('22px');
expect(div.style('lineHeight')).to.equal('12px');
simulateParent(2025, 900);
expect(div.style('fontSize')).to.equal('40px');
expect(div.style('lineHeight')).to.equal('12px');
expect(div.style('marginTop')).to.equal('6px');
simulateParent(2025, 2026);
return expect(div.style('marginTop')).to.equal('7px');
});
test("Parent dimensions/styles", function () {
var div, parent, simulateParent;
parent = Dom.div({
style: {
position: 'absolute'
}
}).appendTo(sandbox);
simulateParent = function (width, height) {
if (width) {
parent.style('width', width);
}
if (height) {
parent.style('height', height);
}
return dimensions.simulate();
};
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@parent(orientation:landscape)': {
marginBottom: 6
},
'@parent(orientation:portrait)': {
marginBottom: 7
},
'@parent(position:relative)': {
top: '21px'
},
'@parent(max-width:350)': {
zIndex: 3,
fontSize: '34px'
},
'@parent(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@parent(zIndex:7)': {
lineHeight: '16px'
}
}
});
simulateParent(400, 300);
div.appendTo(parent);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('marginBottom')).to.equal('6px');
expect(div.style('top')).to.equal('30px');
parent.style('position', 'relative');
expect(div.style('top')).to.equal('30px');
simulateParent();
expect(div.style('top')).to.equal('21px');
simulateParent(349, 420);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
simulateParent(349, 399);
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('34px');
parent.style('zIndex', '7');
simulateParent(349, 401);
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('16px');
return expect(div.style('opacity')).to.equal('1');
});
test("Parent Ref dimensions/styles", function () {
var div, parent;
parent = Dom.div({
ref: 'abc'
}, Dom.div({
id: 'def'
}, Dom.div({
ref: 'ghi'
}))).appendTo(sandbox);
div = Dom.div({
style: {
position: 'relative',
zIndex: 2,
top: '30px',
width: '400px',
height: '300px',
fontSize: '30px',
lineHeight: '30px',
'@#abc(orientation:landscape)': {
fontWeight: 600
},
'@#abc(orientation:portrait)': {
fontWeight: 500
},
'@#def(position:relative)': {
top: '20px'
},
'@#def(max-width:350)': {
zIndex: 3,
fontSize: '33px'
},
'@#ghi(max-width:500, min-height:400)': {
zIndex: 4,
fontSize: '27px',
lineHeight: '37px'
},
'@#abc(zIndex:7)': {
lineHeight: '15px'
}
}
});
parent.style({
width: 400,
height: 300
});
parent.child.def.style({
width: 400,
height: 300
});
parent.child.ghi.style({
width: 400,
height: 300
});
div.appendTo(parent.child.ghi);
expect(div.style('zIndex')).to.equal('2');
expect(div.style('width')).to.equal('400px');
expect(div.style('height')).to.equal('300px');
expect(div.style('fontSize')).to.equal('30px');
expect(div.style('lineHeight')).to.equal('30px');
expect(div.style('fontWeight')).to.equal('600');
expect(div.style('top')).to.equal('30px');
parent.style({
width: 400,
height: 900,
position: 'relative'
});
dimensions.simulate();
expect(div.style('fontWeight')).to.equal('500');
expect(div.style('top')).to.equal('30px');
parent.child.def.style({
position: 'relative'
});
expect(div.style('top')).to.equal('30px');
dimensions.simulate();
expect(div.style('top')).to.equal('20px');
parent.child.def.style({
width: 349,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('3');
expect(div.style('fontSize')).to.equal('33px');
parent.child.ghi.style({
width: 450,
height: 420
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('37px');
parent.style({
zIndex: 7
});
dimensions.simulate();
expect(div.style('zIndex')).to.equal('4');
expect(div.style('fontSize')).to.equal('27px');
expect(div.style('lineHeight')).to.equal('15px');
return expect(div.style('opacity')).to.equal('1');
});
return test("Nested media queries", function () {
var div;
dimensions.simulate(1000, 900);
div = Dom.div({
style: {
zIndex: 2,
$happy: {
marginRight: 5,
'@window(orientation:landscape)': {
marginRight: 6
}
},
'@window(orientation:portrait)': {
$relaxed: {
marginRight: 7
}
}
}
});
div.appendTo(sandbox);
expect(div.style('marginRight')).to.equal('0px');
div.state('happy', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('5px');
dimensions.simulate(1000, 900);
expect(div.style('marginRight')).to.equal('6px');
div.state('relaxed', true);
expect(div.style('marginRight')).to.equal('6px');
dimensions.simulate(900, 1000);
expect(div.style('marginRight')).to.equal('7px');
dimensions.simulate(1000, 900);
return expect(div.style('marginRight')).to.equal('6px');
});
});
suite("Traversal", function () {
test("Children", function () {
var comment, div, div$, spanA, spanB, text;
div = Dom.div(null, Dom.div(), 'Some Text');
expect(div.children.length).to.equal(2);
expect(div.elementChildren.length).to.equal(1);
expect(div.el.childNodes.length).to.equal(2);
div.append(Dom.span());
expect(div.children.length).to.equal(3);
expect(div.elementChildren.length).to.equal(2);
expect(div.el.childNodes.length).to.equal(3);
div.el.appendChild(document.createElement('div'));
expect(div.children.length).to.equal(4);
expect(div.elementChildren.length).to.equal(3);
expect(div.el.childNodes.length).to.equal(4);
div = document.createElement('div');
spanA = document.createElement('span');
spanB = document.createElement('span');
text = document.createTextNode('someTextNode');
comment = document.createComment('someCommentNode');
div.appendChild(spanA);
div.appendChild(comment);
div.appendChild(spanB);
div.appendChild(text);
expect(div.childNodes.length).to.equal(4);
expect(div.children.length).to.equal(2);
div$ = Dom(div);
expect(div$.children.length).to.equal(3);
expect(div$.elementChildren.length).to.equal(2);
expect(div$.children[0].raw).to.equal(spanA);
expect(div$.children[1].raw).to.equal(spanB);
return expect(div$.children[2].raw).to.equal(text);
});
test("Parent", function () {
var A, B, C;
A = Dom.div(null, Dom.div(), 'Some Text');
B = Dom.div();
C = Dom.div();
expect(A.parent).to.equal(void 0);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
B.append(A);
expect(A.parent).to.equal(B);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(1);
expect(B.children[0]).to.equal(A);
C.append(A);
expect(A.parent).to.equal(C);
expect(A.children[0].parent).to.equal(A);
expect(A.children[0].el.parentNode).to.equal(A.el);
expect(B.children.length).to.equal(0);
return expect(C.children[0]).to.equal(A);
});
test("Parents", function () {
var A, B, C;
A = Dom.div().appendTo(sandbox);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(B);
expect(A.parent.el).to.equal(sandbox);
expect(B.parent).to.equal(A);
expect(C.parent).to.equal(B);
expect(A.parents.length).to.equal(B.parents.length - 1);
expect(B.parents.length).to.equal(C.parents.length - 1);
expect(B.parents[0]).to.equal(A);
expect(C.parents[0]).to.equal(B);
expect(C.parents.length).to.equal(5);
return expect(C.parents.slice(-1)[0].el).to.equal(document.documentElement);
});
suite("Parent Matching", function () {
teardown(function () {
return this.els.A.detach();
});
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A,
B,
C,
D
};
});
test("function filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching(null)).to.equal(void 0);
expect(D.parentMatching(B)).to.equal(void 0);
expect(D.parentMatching(function () {
return false;
})).to.equal(void 0);
expect(D.parentMatching(function (el) {
return el === B;
})).to.equal(B);
expect(D.parentMatching(function (el) {
return el === A;
})).to.equal(A);
expect(D.parentMatching(function (el) {
return el === C;
})).to.equal(C);
A.appendTo(sandbox);
return expect(D.parentMatching(function (el) {
return el.raw === document.documentElement;
})).to.equal(Dom(document.documentElement));
});
return test("ref filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentMatching('badRef')).to.equal(void 0);
expect(D.parentMatching('B')).to.equal(B);
expect(D.parentMatching('A')).to.equal(A);
return expect(D.parentMatching('C')).to.equal(C);
});
});
suite("Parents Until", function () {
suiteSetup(function () {
var A, B, C, D;
A = Dom.section({
ref: 'A'
});
B = Dom.div({
ref: 'B'
}).appendTo(A);
C = Dom.div({
ref: 'C'
}).appendTo(B);
D = Dom.span({
ref: 'D'
}).appendTo(C);
return this.els = {
A,
B,
C,
D
};
});
test("function filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parents).to.eql([C, B, A]);
expect(D.parentsUntil(null)).to.eql([C, B, A]);
expect(D.parentsUntil()).to.eql([C, B, A]);
expect(D.parentsUntil(function (el) {
return el === A;
})).to.eql([C, B]);
expect(D.parentsUntil(function (el) {
return el === B;
})).to.eql([C]);
return expect(D.parentsUntil(function (el) {
return false;
})).to.eql([C, B, A]);
});
return test("ref filter", function () {
var A, B, C, D;
({A, B, C, D} = this.els);
expect(D.parentsUntil('A')).to.eql([C, B]);
expect(D.parentsUntil('B')).to.eql([C]);
return expect(D.parentsUntil('badRef')).to.eql([C, B, A]);
});
});
test("Next", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(A.next).to.equal(B);
expect(C.next).to.equal(D);
expect(E.next).to.equal(void 0);
return expect(B.nextAll).to.eql([C, D, E]);
});
test("Next Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(A.next).to.equal(B);
expect(A.nextEl).to.equal(C);
expect(B.nextEl).to.equal(C);
expect(C.nextEl).to.equal(E);
expect(E.nextEl).to.equal(void 0);
return expect(A.nextElAll).to.eql([C, E]);
});
test("Prev", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.div(), C = Dom.div(), D = Dom.div(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(C.prev).to.equal(B);
expect(A.prev).to.equal(void 0);
return expect(D.prevAll).to.eql([C, B, A]);
});
test("Prev Element", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(E.prev).to.equal(D);
expect(E.prevEl).to.equal(C);
expect(D.prevEl).to.equal(C);
expect(C.prevEl).to.equal(A);
expect(A.prevEl).to.equal(void 0);
return expect(E.prevElAll).to.eql([C, A]);
});
test("Siblings", function () {
var A, B, C, D, E, div;
div = Dom.div(null, A = Dom.div(), B = Dom.text(), C = Dom.div(), D = Dom.text(), E = Dom.div());
expect(C.siblings).to.eql(C.prevAll.reverse().concat(C.nextAll));
expect(C.siblings).to.eql([A, B, D, E]);
expect(C.elementSiblings).to.eql([A, E]);
return expect(B.elementSiblings).to.eql([A, C, E]);
});
test("First/Last Child", function () {
var divA, divB, divBA, divBB, divC, main;
main = DOM.div({
id: 'main'
});
divA = DOM.div({
id: 'divA'
}).appendTo(main);
divB = DOM.div({
id: 'divB'
}).appendTo(main);
divC = DOM.div({
id: 'divC'
}).appendTo(main);
divBA = DOM.div({
id: 'divBA'
}).appendTo(divB);
divBB = DOM.div({
id: 'divBB'
}).appendTo(divB);
expect(main.firstChild).to.equal(divA);
expect(main.lastChild).to.equal(divC);
expect(divA.firstChild).to.equal(void 0);
expect(divA.lastChild).to.equal(void 0);
expect(divB.firstChild).to.equal(divBA);
return expect(divB.lastChild).to.equal(divBB);
});
test("Child (by ref)", function () {
var divA, divB, divC, newChild, newChildChild, newParent, sandBox;
divA = Dom.div({
id: 'divA'
}, Dom.div({
id: 'childA'
}, Dom.span({
ref: 'childA_1'
}), Dom.div({
ref: 'childA_2',
id: 'childA_2'
})), Dom.div({}, Dom.span({
ref: 'childB_1'
}), Dom.text({
id: 'childB_2'
}, 'The Text')));
divB = Dom.template(['div', {
id: 'divB'
}, ['div', {
id: 'childA',
style: {
color: 'pink'
}
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_3',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}]]]).spawn();
divC = Dom.template(['div', {
ref: 'divC'
}, ['div', {
ref: 'childA'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}]], ['div', {
ref: 'childB'
}, ['div', {
ref: 'divB'
}], ['div', {
ref: 'divC'
}], ['div', {
ref: 'divD'
}, ['div', {
ref: 'childB'
}]]]]).spawn();
expect(divA.child.childA).to.equal(divA.children[0]);
expect(divA.child.childA_1).to.equal(divA.children[0].children[0]);
expect(divA.child.childA_2).to.equal(divA.children[0].children[1]);
expect(divA.child.childA_3).to.equal(void 0);
expect(divA.child.childB).to.equal(void 0);
expect(divA.child.childB_1).to.equal(divA.children[1].children[0]);
expect(divA.child.childB_2).to.equal(divA.children[1].children[1]);
expect(divA.child.childB_2.type).to.equal('text');
expect(divB.child.childA).to.equal(divB.children[0]);
expect(divB.child.childA_1).to.equal(divB.children[0].children[0]);
expect(divB.child.childA_2).to.equal(divB.children[0].children[1]);
expect(divB.child.childA_3).to.equal(void 0);
expect(divB.child.childB).to.equal(void 0);
expect(divB.child.childB_1).to.equal(divB.children[1].children[0]);
expect(divB.child.childB_2).to.equal(divB.children[1].children[1]);
expect(divB.child.childA.style('color')).to.equal('');
expect(divB.child.childA.styleSafe('color')).not.to.equal('');
expect(divB.child.childA.styleSafe('color').length >= 4).to.be.true;
expect(divA.child.childA.raw.getAttribute('id')).to.equal('childA');
expect(divA.child.childA.raw.getAttribute('data-ref')).to.equal('childA');
expect(divA.child.childA_1.raw.getAttribute('id')).to.equal(null);
expect(divA.child.childA_1.raw.getAttribute('data-ref')).to.equal('childA_1');
expect(divA.child.childA_2.raw.getAttribute('id')).to.equal('childA_2');
expect(divA.child.childA_2.raw.getAttribute('data-ref')).to.equal('childA_2');
expect(divC.child.childA).to.equal(divC.children[0]);
expect(divC.child.childB).to.equal(divC.children[1]);
expect(divC.child.divB).to.equal(divC.children[0].children[0]);
expect(divC.child.divC).to.equal(divC);
expect(divC.child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[0].child.divB).to.equal(divC.children[0].children[0]);
expect(divC.children[0].child.divC).to.equal(divC.children[0].children[1]);
expect(divC.children[1].child.divB).to.equal(divC.children[1].children[0]);
expect(divC.children[1].child.divC).to.equal(divC.children[1].children[1]);
expect(divC.children[1].child.divD).to.equal(divC.children[1].children[2]);
expect(divC.children[1].child.childB).to.equal(divC.children[1]);
sandBox = Dom(sandbox);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
sandBox.append(divA);
expect(sandBox.child.childA).to.equal(void 0);
expect(sandBox.child.childB_2).to.equal(void 0);
expect(sandBox.child.divA).to.equal(void 0);
expect(sandBox.childf.divA).to.equal(divA);
expect(sandBox.child.childA).to.equal(divA.children[0]);
expect(sandBox.child.childB_2).to.equal(divA.children[1].children[1]);
expect(sandBox.child.divA).to.equal(divA);
newChild = Dom.div({
ref: 'newChild'
});
newChildChild = Dom.div({
ref: 'newChildChild'
});
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChildChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newChildChild.appendTo(newChild);
expect(newChild.child.newChildChild).to.equal(void 0);
expect(newChild.childf.newChildChild).to.equal(newChildChild);
expect(newChild.child.newChildChild).to.equal(newChildChild);
expect(Object.keys(newChildChild.child).length).to.equal(1);
newParent = Dom.div({
ref: 'newParent'
});
newChild.appendTo(newParent);
return expect(newParent.child.newChildChild).to.equal(newChildChild);
});
test("Index", function () {
var childA, childB, childC, childD, childE, childF, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.div());
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(3);
expect(childF.index).to.equal(5);
childC.detach();
expect(childB.index).to.equal(1);
expect(childD.index).to.equal(2);
expect(childF.index).to.equal(4);
return expect(childC.index).to.equal(null);
});
test("Index (by type)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div(), childB = Dom.div(), childC = Dom.span(), childD = Dom.text(), childE = Dom.span(), childF = Dom.text(), childG = Dom.div());
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childC.detach();
expect(childB.indexType).to.equal(1);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(2);
childA.detach();
expect(childB.indexType).to.equal(0);
expect(childD.indexType).to.equal(0);
expect(childF.indexType).to.equal(1);
expect(childG.indexType).to.equal(1);
expect(childA.indexType).to.equal(null);
return expect(childC.indexType).to.equal(null);
});
test("Index (by ref)", function () {
var childA, childB, childC, childD, childE, childF, childG, section;
section = Dom.section(null, childA = Dom.div({
ref: 'abc'
}), childB = Dom.div({
ref: 'abc'
}), childC = Dom.span({
ref: 'def'
}), childD = Dom.text({
ref: 'abc'
}), childE = Dom.span({
ref: 'abc'
}), childF = Dom.text({
ref: 'def'
}), childG = Dom.div({
ref: 'abc'
}));
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(1);
expect(childG.indexRef).to.equal(4);
childC.detach();
expect(childB.indexRef).to.equal(1);
expect(childD.indexRef).to.equal(2);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(4);
childA.detach();
expect(childB.indexRef).to.equal(0);
expect(childD.indexRef).to.equal(1);
expect(childF.indexRef).to.equal(0);
expect(childG.indexRef).to.equal(3);
expect(childA.indexRef).to.equal(null);
return expect(childC.indexRef).to.equal(null);
});
test("Query", function () {
var div, sandBox;
div = Dom.template(['div', {
class: 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
class: 'childA',
style: {
color: 'pink'
}
}, ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_1'
}], ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.query('.childA')).to.equal(div.children[0]);
expect(div.query('.childB')).to.equal(div.children[1]);
expect(div.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(div.query('.childA_1')).to.equal(div.children[0].children[0]);
expect(div.query('.childA_2')).to.equal(div.children[0].children[3]);
expect(sandBox.query('.div-one')).to.equal(div);
expect(sandBox.query('.childB_1')).to.equal(div.children[1].children[0]);
expect(sandBox.query('div[name="abc123"]')).to.equal(div);
return expect(sandBox.query('span[name="abc123"]')).to.equal(void 0);
});
test("QueryAll", function () {
var div, sandBox;
div = Dom.template(['div', {
class: 'div-one',
attrs: {
name: 'abc123'
}
}, ['div', {
class: 'childA',
style: {
color: 'pink'
}
}, ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_1'
}], ['span', {
class: 'childA_1'
}], ['div', {
class: 'childA_2'
}]], ['div', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]], ['section', {
className: 'childB'
}, ['span', {
class: 'childB_1'
}]]]).spawn().appendTo(sandBox = Dom(sandbox));
expect(div.queryAll('.childA').elements).to.eql([div.children[0]]);
expect(div.queryAll('.childB').elements).to.eql([div.children[1], div.children[2]]);
expect(div.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(div.queryAll('.childA_1').elements).to.eql([div.children[0].children[0], div.children[0].children[1], div.children[0].children[2]]);
expect(div.queryAll('.childA_2').elements).to.eql([div.children[0].children[3]]);
expect(sandBox.queryAll('.div-one').elements).to.eql([div]);
expect(sandBox.queryAll('.childB_1').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
expect(sandBox.queryAll('div[name="abc123"]').elements).to.eql([div]);
expect(sandBox.queryAll('span[name="abc123"]').elements).to.eql([]);
expect(div.text).to.equal('');
expect(sandBox.queryAll('.childB_1').text('abc123').elements).to.eql([div.children[1].children[0], div.children[2].children[0]]);
return expect(div.text).to.equal('abc123abc123');
});
return test("Query/QueryAll shortcuts", function () {
var allA, allB, el, i, index, len;
expect(Dom.query('head')).to.equal(Dom(document).query('head'));
expect(Dom.query('body')).to.equal(Dom(document).query('body'));
allA = Dom.queryAll('section').elements;
allB = Dom(document).queryAll('section').elements;
expect(allA.length).to.equal(allB.length);
for ((index = i = 0, len = allA.length); i < len; index = ++i) {
el = allA[index];
expect(allA[index]).to.equal(allB[index]);
}
});
});
suite("Manipulation", function () {
test(".append()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.appendTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(A, C);
});
test(".prepend()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.prepend(A);
checkChildStructure(MainA)(B, C, D);
checkChildStructure(MainB)(A);
C.prependTo(MainB);
checkChildStructure(MainA)(B, D);
return checkChildStructure(MainB)(C, A);
});
test(".after()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.after(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(B, A);
C.insertAfter(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(B, C, A);
});
test(".before()", function () {
var A, B, C, D, MainA, MainB;
A = Dom.div();
B = Dom.div();
C = Dom.text();
D = Dom.div();
MainA = Dom.div(null, A, B, C, D);
MainB = Dom.div();
checkChildStructure(MainA)(A, B, C, D);
checkChildStructure(MainB)();
MainB.append(B);
B.before(A);
checkChildStructure(MainA)(C, D);
checkChildStructure(MainB)(A, B);
C.insertBefore(B);
checkChildStructure(MainA)(D);
return checkChildStructure(MainB)(A, C, B);
});
test(".detach()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.detach();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(2);
expect(div.state('happy')).to.be.true;
return expect(div.state('relaxed')).to.be.true;
});
test(".remove()", function () {
var div, emitCount;
emitCount = 0;
div = Dom.div(null, 'Inner Text Here');
div.on('beep', function () {
return emitCount++;
});
div.state('happy', true);
div.state('relaxed', true);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(0);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.appendTo(sandbox);
div.emit('beep');
expect(sandbox.children.length).to.equal(1);
expect(div.parent.el).to.equal(sandbox);
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be.true;
expect(div.state('relaxed')).to.be.true;
div.remove();
div.emit('beep');
expect(sandbox.children.length).to.equal(0);
expect(div.parent).not.to.exist;
expect(emitCount).to.equal(1);
expect(div.state('happy')).to.be.false;
return expect(div.state('relaxed')).to.be.false;
});
test(".empty()", function () {
var A, B, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
A.state('happy', true);
B.state('happy', true);
checkChildStructure(Main)(A, B);
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
Main.empty();
checkChildStructure(Main)();
expect(A.parent).to.equal(void 0);
expect(B.parent).to.equal(void 0);
expect(A.state('happy')).to.be.true;
return expect(B.state('happy')).to.be.true;
});
test(".wrap()", function () {
var A, B, C, Main, wrapA, wrapB, wrapC;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div();
wrapA = Dom.section();
wrapB = Dom.section();
wrapC = Dom.section();
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
wrapA.state('relaxed', true);
wrapB.state('relaxed', true);
wrapC.state('relaxed', true);
checkChildStructure(Main)(A, B);
A.wrap(wrapA);
checkChildStructure(Main)(wrapA, B);
checkChildStructure(wrapA)(A);
B.wrap(wrapB);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A);
checkChildStructure(wrapB)(B);
B.wrap(wrapA);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)();
wrapC.appendTo(wrapB);
C.wrap(wrapC);
C.wrap();
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
C.wrap(C);
checkChildStructure(Main)(wrapA, wrapB);
checkChildStructure(wrapA)(A, B);
checkChildStructure(wrapB)(wrapC);
checkChildStructure(wrapC)(C);
expect(A.state('happy')).to.be.true;
expect(B.state('happy')).to.be.true;
expect(C.state('happy')).to.be.true;
expect(wrapA.state('relaxed')).to.be.true;
expect(wrapB.state('relaxed')).to.be.true;
return expect(wrapC.state('relaxed')).to.be.true;
});
test(".unwrap()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().prependTo(Main);
B = Dom.div().appendTo(A);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(C);
E = Dom.div().appendTo(D);
A.state('happy', true);
B.state('happy', true);
C.state('happy', true);
D.state('happy', true);
E.state('happy', true);
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(D);
checkChildStructure(D)(E);
E.unwrap();
checkChildStructure(Main)(A);
checkChildStructure(A)(B, C);
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
B.unwrap();
checkChildStructure(Main)(B, C);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)(E);
checkChildStructure(D)();
E.unwrap();
checkChildStructure(Main)(B, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.insertAfter(B);
C.appendTo(A);
D.appendTo(A);
checkChildStructure(Main)(B, A, E);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
D.unwrap();
checkChildStructure(Main)(B, C, D, E);
checkChildStructure(A)();
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".replace()", function () {
var A, B, C, D, E, Main;
Main = Dom.div();
A = Dom.div().appendTo(Main);
B = Dom.div().appendTo(Main);
C = Dom.div().appendTo(A);
D = Dom.div().appendTo(A);
E = Dom.div().appendTo(D);
A.replace();
E.replace();
checkChildStructure(Main)(A, B);
checkChildStructure(A)(C, D);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)(E);
C.replace(E).appendTo(B);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E, D);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
D.replace(E);
checkChildStructure(Main)(A, B);
checkChildStructure(A)(E);
checkChildStructure(B)(C);
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(C);
checkChildStructure(Main)(A, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
A.replace(D);
checkChildStructure(Main)(D, C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
checkChildStructure(D)();
B.replace(D);
checkChildStructure(Main)(C);
checkChildStructure(A)(E);
checkChildStructure(B)();
checkChildStructure(C)();
return checkChildStructure(D)();
});
test(".clone()", function () {
var A, B, childA, childB, emitCount, opts, sandBox;
emitCount = 0;
sandBox = Dom(sandbox);
opts = {
style: {
$base: {
width: '34px'
},
$happy: {
height: '99px'
},
$relaxed: {
opacity: '0.5'
}
}
};
A = Dom.div(opts, 'Some Inner Text').appendTo(sandbox);
A.state('happy', true);
A.on('privateEvent', function () {
return emitCount++;
});
childA = Dom.div().appendTo(A);
childB = Dom.span().appendTo(A);
B = A.clone();
A.state('relaxed', true);
A.emit('privateEvent');
expect(emitCount).to.equal(1);
expect(A.parent).to.equal(sandBox);
expect(A.css('width')).to.equal('34px');
expect(A.css('height')).to.equal('99px');
expect(A.css('opacity')).to.equal('0.5');
expect(A.siblings.length).to.equal(0);
expect(A.children.length).to.equal(3);
expect(A.children[0].el.textContent).to.equal('Some Inner Text');
expect(A.children[1]).to.equal(childA);
expect(A.children[2]).to.equal(childB);
expect(B).not.to.equal(A);
expect(B.parent).to.equal(void 0);
sandBox.append(B);
expect(B.parent).to.equal(sandBox);
expect(B.css('width')).to.equal('34px');
expect(B.css('height')).to.equal('99px');
expect(B.css('opacity')).to.equal('1');
expect(B.siblings.length).to.equal(1);
expect(B.children.length).to.equal(3);
expect(B.children[0].el.textContent).to.equal('Some Inner Text');
expect(B.children[0]).not.to.equal(A.children[0]);
expect(B.children[1]).not.to.equal(childA);
expect(B.children[2]).not.to.equal(childB);
expect(B.state('happy')).to.be.true;
expect(B.state('relaxed')).to.be.false;
expect(emitCount).to.equal(1);
B.emit('privateEvent');
expect(emitCount).to.equal(2);
A.off();
A.emit('privateEvent');
expect(emitCount).to.equal(2);
B.emit('privateEvent');
return expect(emitCount).to.equal(3);
});
test(".prop() - element property getter/setter", function () {
var div;
div = Dom.div();
expect(div.prop('myProp')).to.equal(void 0);
expect(div.prop('myProp', 192)).to.equal(div);
expect(div.prop('myProp')).to.equal(192);
expect(div.prop('myProp', '192')).to.equal(div);
expect(div.prop('myProp')).to.equal('192');
expect(div.prop('anotherProp', [1, 2, 3])).to.equal(div);
expect(div.prop('anotherProp')).to.eql([1, 2, 3]);
expect(div.el.myProp).to.equal('192');
expect(div.el.anotherProp).to.eql([1, 2, 3]);
div.el.lastProp = 9999;
expect(div.el.lastProp).to.equal(9999);
expect(div.prop('lastProp')).to.equal(9999);
expect(Object.keys(div.el)).not.to.contain('promiseIsLast');
div.prop('promiseIsLast', 'over9k');
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', void 0);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop('promiseIsLast', null);
expect(Object.keys(div.el)).to.contain('promiseIsLast');
div.prop({
abc: 123,
def: 456
});
expect(div.el.abc).to.equal(123);
return expect(div.el.def).to.equal(456);
});
test(".attr() - element attribute getter/setter", function () {
var div;
div = Dom.div();
expect(div.attr('myAttr')).to.equal(null);
expect(div.attr('myAttr', 192)).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('myAttr', '192')).to.equal(div);
expect(div.attr('myAttr')).to.equal('192');
expect(div.attr('anotherAttr', [1, 2, 3])).to.equal(div);
expect(div.attr('anotherAttr')).to.equal('1,2,3');
expect(div.el.getAttribute('myAttr')).to.equal('192');
expect(div.el.getAttribute('anotherAttr')).to.eql('1,2,3');
div.el.setAttribute('lastAttr', 9999);
expect(div.el.getAttribute('lastAttr')).to.equal('9999');
expect(div.attr('lastAttr')).to.equal('9999');
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr('promiseIsLast', 'over9k');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast');
expect(div.el.getAttribute('promiseIsLast')).to.equal('over9k');
div.attr('promiseIsLast', null);
expect(div.el.getAttribute('promiseIsLast')).to.equal(null);
div.attr({
abc: 123,
def: 456
});
expect(div.el.getAttribute('abc')).to.equal('123');
expect(div.el.getAttribute('def')).to.equal('456');
div.attr({
abc: 123,
def: null
});
expect(div.el.getAttribute('abc')).to.equal('123');
return expect(div.el.getAttribute('def')).to.equal(null);
});
test(".html - innerHTML getter/setter", function () {
var div;
div = Dom.div(null, Dom.div(), 'Some text', Dom.span(), Dom.div());
expect(div.children.length).to.equal(4);
expect(div.html).to.equal(div.el.innerHTML);
expect(div.children.length).to.equal(4);
div.html = '<section ID="test"></section>';
expect(div.html).to.equal('<section id="test"></section>');
expect(div.children.length).to.equal(1);
expect(div.children[0].el.id).to.equal('test');
return expect(div.children[0].el.nodeName.toLowerCase()).to.equal('section');
});
test(".text - textContent getter/setter", function () {
var div;
div = Dom.div(null, 'Some text', Dom.span(null, 'Inner Text'));
expect(div.children.length).to.equal(2);
expect(div.text).to.equal(div.el.textContent);
expect(div.text).to.equal('Some textInner Text');
expect(div.children.length).to.equal(2);
div.text = 'newText';
expect(div.text).to.equal('newText');
expect(div.el.textContent).to.equal('newText');
expect(div.children.length).to.equal(1);
return expect(div.children[0].el.nodeType).to.equal(3);
});
test(".addClass", function () {
var div;
div = Dom.div({
class: 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.raw.className = div.raw.className.replace('new-selector', ' ');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector  ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('.period');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.addClass('period');
return expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector period');
});
test(".removeClass", function () {
var div;
div = Dom.div({
class: 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.addClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.removeClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.removeClass('.period');
return expect(div.raw.className).to.equal('anotherSelector annoying-_-selector');
});
test(".toggleClass", function () {
var div;
div = Dom.div({
class: 'some-selector anotherSelector .period    annoying-_-selector '
});
expect(div.raw.className).to.equal('some-selector anotherSelector .period    annoying-_-selector ');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector');
div.toggleClass('new-selector');
expect(div.raw.className).to.equal('some-selector anotherSelector .period annoying-_-selector new-selector');
div.toggleClass('new-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector');
div.toggleClass('some-selector');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector');
div.toggleClass('period');
expect(div.raw.className).to.equal('anotherSelector .period annoying-_-selector some-selector period');
div.toggleClass('.period');
expect(div.raw.className).to.equal('anotherSelector annoying-_-selector some-selector period');
div.toggleClass('annoying-_-selector');
return expect(div.raw.className).to.equal('anotherSelector some-selector period');
});
test(".setRef", function () {
var el;
el = DOM.div({
ref: 'name1'
});
expect(el.ref).to.equal('name1');
expect(el.options.ref).to.equal('name1');
expect(el.attr('data-ref')).to.equal('name1');
el.setRef('name2');
expect(el.ref).to.equal('name2');
expect(el.options.ref).to.equal('name2');
return expect(el.attr('data-ref')).to.equal('name2');
});
return test("Appending/prepending elements to a text node should do nothing", function () {
var div, text;
text = Dom.text('abc123');
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.append(Dom.text('def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
text.prepend(Dom.div(null, 'def'));
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
div = Dom.div(null, '456');
div.appendTo(text);
expect(text.text).to.equal('abc123');
expect(text.raw.childNodes.length).to.equal(0);
return expect(div.parent).to.equal(void 0);
});
});
suite("Batch", function () {
test("Dom.batch() takes an iterable containing an array of elements or QuickDom elements and reveals the QuickElement API which will be applied for each element", function () {
var A, B, C, div, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
checkChildStructure(sandBox)();
checkChildStructure(div)(A, B, C);
Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text');
checkChildStructure(sandBox)(A, B, C);
checkChildStructure(div)();
expect(getComputedStyle(A.el).opacity).to.equal('0.5');
expect(getComputedStyle(C.el).opacity).to.equal('0.5');
expect(getComputedStyle(B.el).height).to.equal('30px');
expect(A.children.length).to.equal(1);
expect(B.children.length).to.equal(1);
expect(C.children.length).to.equal(1);
return expect(B.children[0].el.textContent).to.equal('Some Inner Text');
});
test("If a truthy value is passed as the 2nd arg of Dom.batch(), an array will be returned for the first method invoked containing the result for each element provided", function () {
var A, B, C, batch1, batch2, sandBox;
sandBox = Dom(sandbox);
A = Dom.div().appendTo(sandBox);
B = Dom.section().appendTo(sandBox);
C = Dom.div().appendTo(sandBox);
batch1 = Dom.batch([A, B, C]);
batch2 = Dom.batch([A, B, C], true);
expect(batch1.style('width')).to.equal(batch1);
expect(batch1.style('width', 47)).to.equal(batch1);
expect(batch2.style('width')).to.eql(['47px', '47px', '47px']);
expect(batch2.style('width', 33)).to.eql([A, B, C]);
return expect(batch2.style('width')).to.eql(['33px', '33px', '33px']);
});
test("If the .return() method is invoked on the batch instance, it will return the result set from the last method invocation", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text').style('opacity').return();
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('width').return()).to.eql(['38px', '38px', '38px']);
});
test("If the .return() method is invoked with a truthy argument, it will cause the next method invocation to return the results of the invocation for each element provided", function () {
var A, B, C, div, result, sandBox;
sandBox = Dom(sandbox);
div = Dom.div();
A = Dom.div().appendTo(div);
B = Dom.section().appendTo(div);
C = Dom.div().appendTo(div);
result = Dom.batch([A, B, C]).appendTo(sandBox).style('opacity', 0.5).css({
height: 30,
backgroundColor: 'pink'
}).append('Some Inner Text').return(true).style('opacity');
expect(result).to.eql(['0.5', '0.5', '0.5']);
return expect(Dom.batch([A, B, C]).css('width', '38px').css('height', '28px').return(true).css('width')).to.eql(['38px', '38px', '38px']);
});
test("Invoking the .reverse() method on the batch instance will reverse the elements array in the batch and thus the execution order", function () {
var A, B, C, arr;
A = Dom.div(null, 'AAA').appendTo(sandbox);
B = Dom.div(null, 'BBB').appendTo(sandbox);
C = Dom.div(null, 'CCC').appendTo(sandbox);
arr = [A, B, C];
expect(Dom.batch(arr).elements).not.to.equal(arr);
expect(Dom.batch(arr).elements).to.eql([A, B, C]);
expect(Dom.batch(arr).reverse().elements).to.eql([C, B, A]);
expect(Dom.batch(arr, 1).text()).to.eql(['AAA', 'BBB', 'CCC']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
expect(Dom.batch(arr, 1).reverse().text()).to.eql(['CCC', 'BBB', 'AAA']);
return expect(Dom.batch(arr, 1).reverse().reverse().text()).to.eql(['AAA', 'BBB', 'CCC']);
});
return test("Batch.text/.html are methods instead of getters/setters", function () {
var batch, divA, divB;
divA = Dom.div(null, 'The divA');
divB = Dom.div(null, 'The divB');
batch = Dom.batch([divA, divB], true);
expect(batch.html()).to.eql(['The divA', 'The divB']);
expect(batch.text()).to.eql(['The divA', 'The divB']);
batch.html('<span>The div</span>');
expect(batch.html()).to.eql(['<span>The div</span>', '<span>The div</span>']);
expect(batch.text()).to.eql(['The div', 'The div']);
batch.text('THE DIV');
expect(batch.html()).to.eql(['THE DIV', 'THE DIV']);
return expect(batch.text()).to.eql(['THE DIV', 'THE DIV']);
});
});
suite("Templates", function () {
test("A reusable template can be generated via QuickDom.template()", function () {
var template;
template = Dom.template(['span', {
id: 'theSpan'
}]);
expect(typeof template).to.equal('object');
expect(template.type).to.equal('span');
expect(template.options).to.eql({
id: 'theSpan'
});
return expect(template.children).to.eql([]);
});
test("Templates can be turned into QuickDom instances via template.spawn() or by passing as arg to QuickDom", function () {
var spawnA, spawnB, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
spawnA = template.spawn();
spawnA.state('happy', true);
spawnB = Dom(template);
expect(spawnA.el).to.be.instanceOf(HTMLDivElement);
expect(spawnB.el).to.be.instanceOf(HTMLDivElement);
expect(spawnA).not.to.equal(spawnB);
expect(spawnA.el).not.to.equal(spawnB.el);
expect(spawnA.state('happy')).to.be.true;
expect(spawnB.state('happy')).to.be.false;
expect(spawnA.el.textContent).to.equal('Some Inner Text');
expect(spawnB.el.textContent).to.equal('Some Inner Text');
return expect(spawnA.el.className).to.equal('some-div');
});
test("Templates can be created from QuickElement instances", function () {
var section, sectionTemplate, templateSpawn;
section = Dom.section({
className: 'singleSection'
}, 'Some Inner Text');
section.state('happy', true);
sectionTemplate = section.toTemplate();
templateSpawn = sectionTemplate.spawn();
expect(sectionTemplate).not.to.equal(section);
expect(templateSpawn.el).not.to.equal(section.el);
expect(templateSpawn.el.className).to.equal('singleSection');
expect(templateSpawn.text).to.equal('Some Inner Text');
expect(section.state('happy')).to.be.true;
return expect(templateSpawn.state('happy')).to.be.false;
});
test("Templates can be created from DOM Elements", function () {
var sectionEl, sectionTemplate, templateSpawn;
sectionEl = document.createElement('section');
sectionEl.className = 'singleSection';
sectionEl.appendChild(document.createTextNode('Some Inner Text'));
sectionTemplate = Dom.template(sectionEl);
templateSpawn = sectionTemplate.spawn();
expect(templateSpawn.el).not.to.equal(sectionEl);
expect(templateSpawn.el.className).to.equal('singleSection');
return expect(templateSpawn.text).to.equal('Some Inner Text');
});
test("Templates can be extended via template.extend", function () {
var spawn, spawnA, spawnB, spawnC, template, templateCopyA, templateCopyB, templateCopyC;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text']);
templateCopyA = template.extend({
type: 'span',
options: {
className: 'some-span'
},
children: []
});
templateCopyB = template.extend({
options: {
id: 'theMainDiv'
},
children: ['The Other Inner Text']
});
templateCopyC = template.extend(['section', {
className: 'some-section'
}, ['div', null, 'Very '], ['div', null, ['span', {
style: {
fontWeight: 500
}
}, 'Nested '], 'Inner Text']]);
expect(templateCopyA).not.to.equal(template);
expect(templateCopyB).not.to.equal(template);
spawn = template.spawn();
spawnA = templateCopyA.spawn();
spawnB = templateCopyB.spawn();
spawnC = templateCopyC.spawn();
expect(spawn.el.nodeName.toLowerCase()).to.equal('div');
expect(spawn.el.className).to.equal('some-div');
expect(spawn.el.id).to.equal('');
expect(spawn.text).to.equal('Some Inner Text');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('span');
expect(spawnA.el.className).to.equal('some-span');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.equal('some-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('The Other Inner Text');
expect(spawnC.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnC.el.className).to.equal('some-section');
expect(spawnC.el.id).to.equal('');
return expect(spawnC.text).to.equal('Very Nested Inner Text');
});
test("Templates can be spawned via extended config by passing a new config object to template.spawn()", function () {
var spawnA, spawnB, spawnRaw, template;
template = Dom.template(['div', {
className: 'some-div'
}, 'Some Inner Text', ['strong', {
className: 'highlighted',
style: {
opacity: 0.9
}
}, ' - Bolded Text']]);
spawnRaw = template.spawn().appendTo(sandbox);
spawnA = template.spawn({
type: 'section',
options: {
className: 'some-section',
style: {
opacity: 0.7
}
}
}).appendTo(sandbox);
spawnB = template.spawn({
options: {
className: 'main-div',
id: 'theMainDiv',
style: {
opacity: 0.5
}
},
children: [{
type: 'span',
children: [{
type: 'text',
options: {
text: 'Main Inner Text'
}
}]
}, {
type: 'b',
options: {
className: 'super-highlighted',
style: {
opacity: '0.2'
}
},
children: [{
options: {
text: ' - Very Bolded Text'
}
}]
}, {
type: 'text',
options: {
text: ' + Other Text'
}
}]
}).appendTo(sandbox);
expect(spawnRaw.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnRaw.el.className).to.equal('some-div');
expect(spawnRaw.el.id).to.equal('');
expect(spawnRaw.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnRaw.el).to.have.style('opacity', '1');
expect(spawnRaw.el.childNodes.length).to.equal(2);
expect(spawnRaw.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnRaw.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnRaw.el.childNodes[1].className).to.include('highlighted');
expect(spawnRaw.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnA.el.nodeName.toLowerCase()).to.equal('section');
expect(spawnA.el.className).to.include('some-section');
expect(spawnA.el.id).to.equal('');
expect(spawnA.text).to.equal('Some Inner Text - Bolded Text');
expect(spawnA.el).to.have.style('opacity', '0.7');
expect(spawnA.el.childNodes.length).to.equal(2);
expect(spawnA.el.childNodes[0].nodeName).to.equal('#text');
expect(spawnA.el.childNodes[1].nodeName.toLowerCase()).to.equal('strong');
expect(spawnA.el.childNodes[1].className).to.include('highlighted');
expect(spawnA.el.childNodes[1]).to.have.style('opacity', '0.9');
expect(spawnB.el.nodeName.toLowerCase()).to.equal('div');
expect(spawnB.el.className).to.include('main-div');
expect(spawnB.el.id).to.equal('theMainDiv');
expect(spawnB.text).to.equal('Main Inner Text - Very Bolded Text + Other Text');
expect(spawnB.el).to.have.style('opacity', '0.5');
expect(spawnB.el.childNodes.length).to.equal(3);
expect(spawnB.el.childNodes[0].nodeName.toLowerCase()).to.equal('span');
expect(spawnB.el.childNodes[0].childNodes.length).to.equal(1);
expect(spawnB.el.childNodes[1].nodeName.toLowerCase()).to.equal('b');
expect(spawnB.el.childNodes[1].className).to.include('super-highlighted');
return expect(spawnB.el.childNodes[1]).to.have.style('opacity', '0.2');
});
test("Template.extend/spawn() can accept a template tree array", function () {
var cloneA, cloneB, cloneC, spawn, template;
template = Dom.template(['div', {
style: {
'opacity': 0.5
}
}, ['span', null, 'text of span'], ['div', null, 'text of div']]);
cloneA = template.extend(['section', {
style: {
'opacity': 0.8
}
}]);
cloneB = template.extend(['span', null, ['div']]);
cloneC = template.extend(['section', {
className: 'the-section',
style: {
color: 'blue'
}
}, ['section', null, 'text of subsection'], 'just a text node']);
spawn = template.spawn(['span', {
style: {
'width': 190,
'opacity': 0.4
}
}, 'so nice']).appendTo(sandbox);
expect(template.type).to.equal('div');
expect(template.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(template.children.length).to.equal(2);
expect(template.children[0].type).to.equal('span');
expect(template.children[0].children.length).to.equal(1);
expect(template.children[0].children[0].options.text).to.equal('text of span');
expect(template.children[1].type).to.equal('div');
expect(template.children[1].children.length).to.equal(1);
expect(template.children[1].children[0].options.text).to.equal('text of div');
expect(cloneA.type).to.equal('section');
expect(cloneA.options).to.eql({
style: {
'opacity': 0.8
}
});
expect(cloneA.children.length).to.equal(2);
expect(cloneA.children[0].type).to.equal('span');
expect(cloneA.children[0].children.length).to.equal(1);
expect(cloneA.children[0].children[0].options.text).to.equal('text of span');
expect(cloneA.children[1].type).to.equal('div');
expect(cloneA.children[1].children.length).to.equal(1);
expect(cloneA.children[1].children[0].options.text).to.equal('text of div');
expect(cloneB.type).to.equal('span');
expect(cloneB.options).to.eql({
style: {
'opacity': 0.5
}
});
expect(cloneB.children.length).to.equal(2);
expect(cloneB.children[0].type).to.equal('div');
expect(cloneB.children[0].children.length).to.equal(1);
expect(cloneB.children[0].children[0].options.text).to.equal('text of span');
expect(cloneB.children[1].type).to.equal('div');
expect(cloneB.children[1].children.length).to.equal(1);
expect(cloneB.children[1].children[0].options.text).to.equal('text of div');
expect(cloneC.type).to.equal('section');
expect(cloneC.options).to.eql({
className: 'the-section',
style: {
'opacity': 0.5,
'color': 'blue'
}
});
expect(cloneC.children.length).to.equal(2);
expect(cloneC.children[0].type).to.equal('section');
expect(cloneC.children[0].children.length).to.equal(1);
expect(cloneC.children[0].children[0].options.text).to.equal('text of subsection');
expect(cloneC.children[1].type).to.equal('text');
expect(cloneC.children[1].options.text).to.equal('just a text node');
spawn.style('display', 'block');
expect(spawn.el.nodeName.toLowerCase()).to.equal('span');
expect(spawn.el).to.have.style('opacity', '0.4');
expect(spawn.el).to.have.style('width', '190px');
expect(spawn.el.childNodes.length).to.equal(2);
expect(spawn.el.childNodes[0].nodeType).to.equal(3);
expect(spawn.el.childNodes[0].textContent).to.equal('so nice');
expect(spawn.el.childNodes[1].nodeName.toLowerCase()).to.equal('div');
return expect(spawn.el.childNodes[1].textContent).to.equal('text of div');
});
test("Template.extend/spawn() can accept other template instances as children which will replace existing children", function () {
var childA, childB, childC, spawnedA, spawnedB, spawnedC, template, templateCopy;
template = Dom.template(['div', null, ['span', {
style: {
opacity: 0.5
}
}], 'original text']);
childA = Dom.template(['div', {
style: {
fontFamily: 'pink'
}
}]);
childB = Dom.template('replaced text');
childC = Dom.template(['section']);
templateCopy = template.extend(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]);
spawnedA = template.spawn().appendTo(sandbox);
spawnedB = templateCopy.spawn().appendTo(sandbox);
spawnedC = template.spawn(['span', {
style: {
fontSize: '77px'
}
}, childA, childB, childC]).appendTo(sandbox);
expect(spawnedA.type).to.equal('div');
expect(spawnedA.children.length).to.equal(2);
expect(spawnedA.children[0].type).to.equal('span');
expect(spawnedA.children[0].raw).to.have.style('opacity', '0.5');
expect(spawnedA.children[0].raw).to.have.style('fontFamily', '');
expect(spawnedA.children[1].type).to.equal('text');
expect(spawnedA.text).to.equal('original text');
expect(spawnedB.type).to.equal('span');
expect(spawnedB.children.length).to.equal(3);
expect(spawnedB.children[0].type).to.equal('div');
expect(spawnedB.children[0].raw).to.have.style('opacity', '');
expect(spawnedB.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedB.children[1].type).to.equal('text');
expect(spawnedB.text).to.equal('replaced text');
expect(spawnedB.children[2].type).to.equal('section');
expect(spawnedB.raw).to.have.style('fontSize', '77px');
expect(spawnedC.type).to.equal('span');
expect(spawnedC.children.length).to.equal(3);
expect(spawnedC.children[0].type).to.equal('div');
expect(spawnedC.children[0].raw).to.have.style('opacity', '');
expect(spawnedC.children[0].raw).to.have.style('fontFamily', 'pink');
expect(spawnedC.children[1].type).to.equal('text');
expect(spawnedC.text).to.equal('replaced text');
expect(spawnedC.children[2].type).to.equal('section');
return expect(spawnedC.raw).to.have.style('fontSize', '77px');
});
test("Template.extend/spawn() will consider the passed object as the options object if it doesn't contain template-related props", function () {
var template;
template = DOM.template(['div', {
defaults: {
text: 'default'
},
computers: {
text: function (text) {
return this.text = text;
}
}
}, ['span', {
ref: 'theSpan'
}]]);
expect(template.options.style).to.equal(void 0);
expect(template.options.label).to.equal(void 0);
expect(template.extend({
options: {
label: 'abc123'
}
}).options.label).to.equal('abc123');
expect(template.extend({
label: 'def456'
}).options.label).to.equal('def456');
expect(template.extend({
style: 'def456'
}).options.style).to.equal('def456');
expect(template.extend({
style: 'def456',
type: 'section'
}).options.style).to.equal(void 0);
expect(template.extend({
children: {
theSpan: {
style: 'ghi789'
}
}
}).child.theSpan.options.style).to.equal('ghi789');
expect(template.extend({
children: [{
defaults: 'ghi789'
}]
}).child.theSpan.options.defaults).to.equal('ghi789');
expect(template.spawn({
children: {
theSpan: {
className: 'GHI789'
}
}
}).child.theSpan.raw.className).to.equal('GHI789');
expect(template.spawn().text).to.equal('default');
return expect(template.spawn({
defaults: {
text: 'diff'
}
}).text).to.equal('diff');
});
test("Templates can have other templates as their children", function () {
var headerTemplate, headerTemplateClone, section, sectionTemplate;
headerTemplate = Dom.template(['header', {
style: {
'height': '200px'
}
}, ['span', {
style: {
'textAlign': 'center'
}
}, 'This is bolded text'], ' while this is not']);
headerTemplateClone = Dom.template(headerTemplate);
sectionTemplate = Dom.template(['section', null, headerTemplate]);
section = sectionTemplate.spawn().appendTo(sandbox);
expect(headerTemplateClone).to.equal(headerTemplate);
expect(sectionTemplate.children.length).to.equal(1);
expect(sectionTemplate.children[0]).to.equal(headerTemplate);
expect(sectionTemplate.children[0].children.length).to.equal(2);
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
expect(section.text).to.equal('This is bolded text while this is not');
return expect(section.children[0].children[0].style('textAlign')).to.equal('center');
});
test("A global options object can be passed as the 2nd arg to template.extend/spawn() which will be applied to all templates, spawns, & their children", function () {
var dynamicHeightStyle, headerTemplate, obj, section, sectionTemplate;
obj = {
myHeight: '150px'
};
obj.obj = obj;
dynamicHeightStyle = {
'height': function (related) {
expect(related).to.equal(obj);
return related.myHeight;
}
};
headerTemplate = Dom.template(['header', {
style: {
'width': '23px'
}
}, ['div', {
style: {
'width': '23px'
}
}, 'This is bolded text'], ' while this is not']);
sectionTemplate = Dom.template(['section', {
style: {
'width': '23px'
}
}, headerTemplate]);
section = sectionTemplate.spawn({
options: {
related: window
}
}, {
related: obj,
style: dynamicHeightStyle
}).appendTo(sandbox);
expect(section.raw.style.height).to.equal('150px');
expect(section.children[0].raw.style.height).to.equal('150px');
expect(section.children[0].children[0].raw.style.height).to.equal('150px');
expect(section.raw.style.width).to.equal('');
expect(section.children[0].raw.style.width).to.equal('');
expect(section.children[0].children[0].raw.style.width).to.equal('');
expect(section.children.length).to.equal(1);
expect(section.children[0].type).to.equal('header');
expect(section.children[0].children.length).to.equal(2);
return expect(section.text).to.equal('This is bolded text while this is not');
});
test("Template children can be navigated by ref using the .child property", function () {
var rendered, template;
template = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
expect(typeof template.child).to.equal('object');
expect(Object.keys(template.child).length).to.equal(6);
expect(template.child.divA).to.equal(template);
expect(template.child.childA.type).to.equal('div');
expect(template.child.childA).to.equal(template.children[0]);
expect(template.child.childA_1).to.equal(template.children[0].children[0]);
expect(template.child.childA_2).to.equal(template.children[0].children[1]);
expect(template.child.childB_1).to.equal(template.children[1].children[0]);
expect(template.child.childB_2).to.equal(template.children[1].children[1]);
rendered = template.spawn();
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
return expect(rendered.text).to.equal('The Text');
});
test("Template's children can be extend/spawned with a {ref:newChild} map instead of a positional array", function () {
var rendered, templateCopy, templateCopy2, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', null, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}], {
value: 'theValue'
});
templateCopy2 = templateMain.extend({
children: {
childA: {
children: {
newChild: ['div']
}
},
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childC: ['div', {
ref: 'childD'
}]
}
});
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(6);
expect(Object.keys(templateCopy.child).length).to.equal(8);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA_1).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[1]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[1].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.childD).to.equal(templateCopy.children[2]);
rendered = templateCopy.spawn().appendTo(sandbox);
expect(Object.keys(rendered.child).length).to.equal(8);
expect(rendered.child.childB_2).to.equal(rendered.children[1].children[1]);
expect(rendered.child.childA.raw).to.have.style('display', 'inline-block');
expect(rendered.child.CHILDa_2.prop('href')).to.contain('http://google.com');
expect(rendered.child.childB_1.prop('value')).to.equal('theValue');
return expect(rendered.child.childD.attr('data-ref')).to.equal('childD');
});
test("Templates can be passed as replacement/new children in {ref:newChild} extension maps", function () {
var childA, childB, childC, templateCopy, templateMain;
childA = Dom.template(['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]]);
childB = Dom.template(['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]]);
childC = Dom.template(['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]);
templateMain = Dom.template(['div', {
id: 'divA'
}, childA, childB]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form'
},
childB: childB.extend({
ref: 'ChildB'
}),
childC: childC.extend({
ref: 'ChildC'
})
}], {
value: 'theValue'
});
expect(Object.keys(templateMain.child).length).to.equal(7);
expect(Object.keys(templateCopy.child).length).to.equal(10);
expect(templateMain.children.length).to.equal(2);
expect(templateCopy.children.length).to.equal(3);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(2);
expect(templateCopy.child.ChildB).to.equal(templateCopy.children[1]);
expect(templateCopy.child.childB_1).to.equal(templateCopy.children[1].children[0]);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[1]);
expect(templateMain.child.childC).to.equal(void 0);
expect(templateCopy.child.childC).to.equal(void 0);
expect(templateCopy.child.ChildC).to.equal(templateCopy.children[2]);
expect(Object.keys(templateMain.spawn().child).length).to.equal(7);
return expect(Object.keys(templateCopy.spawn().child).length).to.equal(10);
});
test("ref-children maps shouldn't be modified by the template extender", function () {
var config, spawnA, spawnB, spawnC, spawnD, templateA, templateB, templateC, templateD;
config = {
children: {
childA_1: {
type: 'div',
options: {
style: {
display: 'none'
}
}
}
}
};
templateA = Dom.template(['div', {
ref: 'divA'
}, ['div', {
ref: 'childA'
}, ['span', {
ref: 'childA_1'
}]]]);
templateA.child.childA_1;
templateB = templateA.extend();
templateC = templateA.extend(config);
templateD = templateA.extend(config);
spawnA = templateA.spawn().appendTo(sandbox);
spawnB = templateB.spawn().appendTo(sandbox);
spawnC = templateC.spawn().appendTo(sandbox);
spawnD = templateD.spawn().appendTo(sandbox);
expect(spawnA.child.childA_1.type).to.equal('span');
expect(spawnA.child.childA_1.style('display')).to.equal('inline');
expect(spawnB.child.childA_1.type).to.equal('span');
expect(spawnB.child.childA_1.style('display')).to.equal('inline');
expect(spawnC.child.childA_1.type).to.equal('div');
expect(spawnC.child.childA_1.style('display')).to.equal('none');
expect(spawnD.child.childA_1.type).to.equal('div');
return expect(spawnD.child.childA_1.style('display')).to.equal('none');
});
test("Null values in ref-children map will remove the child from the template", function () {
var templateCopy, templateMain;
templateMain = Dom.template(['div', {
id: 'divA'
}, ['div', {
id: 'childA'
}, ['span', {
ref: 'childA_1'
}], ['div', {
ref: 'childA_2',
id: 'childA_2'
}]], ['div', {
ref: 'childB'
}, ['span', {
ref: 'childB_1'
}], ['text', {
id: 'childB_2',
text: 'The Text'
}]], ['div', {
id: 'childC'
}, ['span', {
ref: 'childC_1'
}], ['text', {
id: 'childC_2',
text: 'The Text'
}]]]);
templateCopy = templateMain.extend(['section', null, {
childA: {
type: 'form',
options: {
style: {
display: 'inline-block'
}
}
},
childA_1: null,
childA_2: ['a', {
id: 'CHILDa_2',
href: 'http://google.com'
}, ['text', {
ref: 'childA_2_1',
text: 'New Text'
}]],
childB_1: null,
childC: null
}]);
expect(typeof templateCopy.child.childA_2_1).not.to.equal('undefined');
expect(Object.keys(templateMain.child).length).to.equal(10);
expect(Object.keys(templateCopy.child).length).to.equal(6);
expect(templateCopy.children.length).to.equal(2);
expect(templateCopy.child.divA).to.equal(templateCopy);
expect(templateCopy.child.childA).to.equal(templateCopy.children[0]);
expect(templateCopy.child.childA.type).to.equal('form');
expect(templateCopy.child.childA.children.length).to.equal(1);
expect(templateMain.child.childA_1).to.equal(templateMain.child.childA_1);
expect(templateCopy.child.childA_1).to.equal(void 0);
expect(templateCopy.child.childA_2).to.equal(void 0);
expect(templateCopy.child.CHILDa_2).to.equal(templateCopy.children[0].children[0]);
expect(templateCopy.child.childA_2_1).to.equal(templateCopy.children[0].children[0].children[0]);
expect(templateCopy.child.childA_2_1.options.text).to.equal('New Text');
expect(templateCopy.child.childB_1).to.equal(void 0);
expect(templateCopy.child.childB_2).to.equal(templateCopy.children[1].children[0]);
expect(templateMain.child.childB_1).to.equal(templateMain.children[1].children[0]);
expect(templateMain.child.childB_2).to.equal(templateMain.children[1].children[1]);
expect(templateMain.child.childC).to.equal(templateMain.children[2]);
return expect(templateCopy.child.childC).to.equal(void 0);
});
test("Null values in options object will delete keys during template extension", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
ref: 'theDiv',
computers: {
valueA: function () {
return 1;
},
valueB: function () {
return 2;
}
},
style: {
position: 'relative',
width: 100,
height: 100,
$active: {
width: 200,
height: 200
}
}
}]);
templateB = templateA.extend({
options: {
ref: null,
computers: {
valueA: null,
valueB: function () {
return 3;
}
},
style: {
height: null,
opacity: 1,
$active: {
width: null
}
}
}
});
spawnA = templateA.spawn();
spawnB = templateB.spawn();
expect(spawnA.ref).to.equal('theDiv');
expect(spawnB.ref).to.equal(void 0);
expect(typeof spawnA.options.computers.valueA).to.equal('function');
expect(typeof spawnB.options.computers.valueA).to.equal('undefined');
expect(typeof spawnA.options.computers.valueB).to.equal('function');
expect(typeof spawnB.options.computers.valueB).to.equal('function');
expect(spawnA.options.computers.valueB()).to.equal(2);
expect(spawnB.options.computers.valueB()).to.equal(3);
expect(spawnA.options.style.position).to.equal('relative');
expect(spawnB.options.style.position).to.equal('relative');
expect(spawnA.options.style.width).to.equal(100);
expect(spawnB.options.style.width).to.equal(100);
expect(spawnA.options.style.height).to.equal(100);
expect(spawnB.options.style.height).to.equal(void 0);
expect(spawnA.options.style.opacity).to.equal(void 0);
expect(spawnB.options.style.opacity).to.equal(1);
expect(spawnA.options.style.$active.width).to.equal(200);
expect(spawnB.options.style.$active.width).to.equal(void 0);
expect(spawnA.options.style.$active.height).to.equal(200);
return expect(spawnB.options.style.$active.height).to.equal(200);
});
test("When spawning elements the options object passed to the spawns should be a clone of the template's options", function () {
var spawnA, spawnB, templateA, templateB;
templateA = Dom.template(['div', {
style: {
display: 'block'
}
}]);
templateB = Dom.template(['div', {
style: {
display: 'block'
}
}]);
spawnA = templateA.spawn({
ref: 'a'
});
spawnB = templateA.spawn();
expect(spawnA.options).not.to.equal(templateA.options);
expect(spawnA.options.style).not.to.equal(templateA.options.style);
expect(templateA.options.style.$base).to.equal(void 0);
expect(spawnB.options).not.to.equal(templateB.options);
expect(spawnB.options.style).not.to.equal(templateB.options.style);
return expect(templateB.options.style.$base).to.equal(void 0);
});
test("Templates will be spawned when appended to DOM elements", function () {
var div, template;
template = Dom.template(['span', {
ref: 'theSpan'
}, 'someText']);
div = Dom.div(null, 'label: ');
expect(div.children.length).to.equal(1);
expect(div.text).to.equal('label: ');
div.append(template);
expect(div.children.length).to.equal(2);
expect(div.text).to.equal('label: someText');
div.prepend(template);
expect(div.children.length).to.equal(3);
return expect(div.text).to.equal('someTextlabel: someText');
});
return suite("Data computers", function () {
test("Templates accept options.computers fn map which will be invoked with provided options.data upon spawning", function () {
var receivedData, template;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
expect(receivedData).to.equal(null);
template.spawn();
expect(receivedData).to.equal(null);
template.spawn({
data: {
'someLabel': 'works'
}
});
return expect(receivedData).to.equal('works');
});
test("Computers will be have the spawned QuickElement instance as their context", function () {
var context, instance, template;
context = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return context = this;
}
}
}]);
expect(context).to.equal(null);
template.spawn();
expect(context).to.equal(null);
instance = template.spawn({
data: {
'someLabel': void 0
}
});
return expect(context).to.equal(instance);
});
test("Values specified in options.defaults will be used if not specified in options.data upon spawning", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data.toLowerCase();
},
'second': function (data) {
return results.second = data.toLowerCase();
},
'third': function (data) {
return results.third = data.toLowerCase();
}
},
defaults: {
'first': 'firstValue here',
'third': 'thirdValue here'
}
}]);
expect(results).to.deep.equal({});
template.spawn();
expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'thirdvalue here'
});
instance = template.spawn({
data: {
'third': 'customvalue here'
}
});
return expect(results).to.deep.equal({
first: 'firstvalue here',
third: 'customvalue here'
});
});
test("Values can be of any type", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
},
'fourth': function (data) {
return results.fourth = data;
},
'fifth': function (data) {
return results.fifth = data;
},
'sixth': function (data) {
return results.sixth = data;
}
},
defaults: {
'first': ['abc', '123'],
'third': {
a: 1,
b: 12
},
'sixth': 999
}
}]);
instance = template.spawn({
data: {
'second': null,
'fourth': 19,
'fifth': false,
'sixth': void 0
}
});
expect(results).to.deep.equal({
first: ['abc', '123'],
second: null,
third: {
a: 1,
b: 12
},
fourth: 19,
fifth: false,
sixth: void 0
});
return expect(Object.keys(results).length).to.equal(6);
});
test("Values in options.data that do not have a matching computer will be skipped", function () {
var instance, results, template;
results = {};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.first = data;
},
'second': function (data) {
return results.second = data;
},
'third': function (data) {
return results.third = data;
}
}
}]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
return expect(Object.keys(results).length).to.equal(3);
});
test("Computers in template children will receive the parent's options.data", function () {
var instance, results, template;
results = {
parent: {},
childA: {},
childB: {},
childC: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
}
}, ['div', {
computers: {
'first': function (data) {
return results.childA.first = data;
},
'second': function (data) {
return results.childA.second = data;
},
'third': function (data) {
return results.childA.third = data;
}
}
}], ['div', null, ['div', {
computers: {
'first': function (data) {
return results.childB.first = data;
},
'fourth': function (data) {
return results.childB.fourth = data;
}
}
}], ['div', {
computers: {
'first': function (data) {
return results.childC.first = data;
},
'sixth': function (data) {
return results.childC.sixth = data;
}
}
}]]]);
instance = template.spawn({
data: {
'first': 'first value',
'second': 'second value',
'third': 'third value',
'fourth': 'fourth value'
}
});
expect(results.parent).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childA).to.deep.equal({
'first': 'first value',
'second': 'second value',
'third': 'third value'
});
expect(results.childB).to.deep.equal({
'first': 'first value',
'fourth': 'fourth value'
});
return expect(results.childC).to.deep.equal({
'first': 'first value'
});
});
test("Parent defaults will not be passed to children", function () {
var instance, results, template;
results = {
parent: {},
child: {}
};
template = Dom.template(['div', {
computers: {
'first': function (data) {
return results.parent.first = data;
},
'second': function (data) {
return results.parent.second = data;
},
'third': function (data) {
return results.parent.third = data;
}
},
defaults: {
'second': 'second value',
'fourth': 'fourth value'
}
}, ['div', {
computers: {
'first': function (data) {
return results.child.first = data;
},
'second': function (data) {
return results.child.second = data;
},
'third': function (data) {
return results.child.third = data;
},
'fourth': function (data) {
return results.child.fourth = data;
}
},
defaults: {
'first': 'first value'
}
}]]);
instance = template.spawn({
data: {
'third': 'third value'
}
});
expect(results.parent).to.deep.equal({
'second': 'second value',
'third': 'third value'
});
return expect(results.child).to.deep.equal({
'first': 'first value',
'third': 'third value'
});
});
test("Defaults should only be applied once", function () {
var count, template;
count = {
parent: 0,
child: 0,
childChild: 0
};
template = Dom.template(['div', {
ref: 'parent',
computers: {
'first': function (data) {
return count.parent++;
}
},
defaults: {
'first': 'first value'
}
}, ['div', {
ref: 'child',
computers: {
'first': function (data) {
return count.parent++;
},
'second': function (data) {
return count.child++;
}
},
defaults: {
'second': 'second value'
}
}, ['div', {
ref: 'child',
computers: {
'fourth': function (data) {
return count.childChild++;
}
},
defaults: {
'fourth': 'fourth value'
}
}]]]);
template.spawn({
data: {
'third': 'third value'
}
});
expect(count).to.eql({
parent: 1,
child: 1,
childChild: 1
});
template.spawn();
return expect(count).to.eql({
parent: 2,
child: 2,
childChild: 2
});
});
test("Data/defaults should be applied even when parent doesn't have computers", function () {
var count, template;
count = 0;
template = Dom.template(['div', null, ['section', null, ['div', {
computers: {
'first': function (data) {
return count++;
}
},
defaults: {
'first': 'first value'
}
}]]]);
template.spawn({
data: {
'first': 'second value'
}
});
expect(count).to.equal(1);
template.spawn();
return expect(count).to.equal(2);
});
test("Data can be re-applied via .applyData(data)", function () {
var count, instance, results, template;
results = {};
count = {
a: 0,
b: 0,
c: 0,
d: 0,
e: 0,
f: 0
};
template = Dom.template(['div', {
computers: {
'a': function (data) {
results.a = data;
return count.a++;
},
'b': function (data) {
results.b = data;
return count.b++;
},
'c': function (data) {
results.c = data;
return count.c++;
},
'd': function (data) {
results.d = data;
return count.d++;
},
'e': function (data) {
results.e = data;
return count.e++;
},
'f': function (data) {
results.f = data;
return count.f++;
}
},
defaults: {
'a': 1,
'c': 3,
'f': 6
}
}]);
instance = template.spawn({
data: {
b: 2,
d: 4,
e: 5,
f: 6
}
});
expect(results).to.deep.equal({
a: 1,
b: 2,
c: 3,
d: 4,
e: 5,
f: 6
});
expect(count).to.deep.equal({
a: 1,
b: 1,
c: 1,
d: 1,
e: 1,
f: 1
});
instance.applyData({
a: 11,
b: 22,
d: 44,
e: 55
});
expect(results).to.deep.equal({
a: 11,
b: 22,
c: 3,
d: 44,
e: 55,
f: 6
});
return expect(count).to.deep.equal({
a: 2,
b: 2,
c: 2,
d: 2,
e: 2,
f: 2
});
});
test("The '_init' computer will be run by default on template spawn regardless of data", function () {
var count, template;
count = {};
template = Dom.template(['div', {
ref: 'divA',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}, ['div', {
ref: 'divB',
data: {
first: '1'
},
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}], ['div', {
ref: 'divC'
}, ['div', {
ref: 'divD'
}, ['div', {
ref: 'divE',
computers: {
_init: function () {
var name1;
if (count[name1 = this.ref] == null) {
count[name1] = 0;
}
return count[this.ref]++;
}
}
}]]]]);
expect(count).to.eql({});
template.spawn();
expect(count).to.eql({
divA: 1,
divB: 1,
divE: 1
});
template.spawn();
expect(count).to.eql({
divA: 2,
divB: 2,
divE: 2
});
template.child.divB.spawn({
data: {
second: '2'
}
});
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 2
});
template.child.divC.spawn();
expect(count).to.eql({
divA: 2,
divB: 3,
divE: 3
});
template.child.divC.spawn();
return expect(count).to.eql({
divA: 2,
divB: 3,
divE: 4
});
});
test("The '_init' computer will be passed all of the data the template spawn receives", function () {
var expected, result, template;
result = {
divA: {},
divB: {}
};
template = Dom.template(['div', {
ref: 'divA',
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}, ['div', {
ref: 'divProxy'
}, ['div', {
ref: 'divB',
defaults: {
first: '1'
},
computers: {
href: function (href) {
return result[this.ref].href = href;
},
name: function (name) {
return result[this.ref].name = name;
},
_init: function () {
return result[this.ref]._init = arguments[0];
}
}
}]]]);
expected = {
href: 'abc',
name: '123',
_init: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
};
expect(result).to.eql({
divA: {},
divB: {}
});
template.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
expect(result).to.eql({
divA: expected,
divB: expected
});
delete result.divA;
({
divB: null
});
template.child.divB.spawn({
data: {
href: 'abc',
name: '123',
value: 'def',
size: '456'
}
});
return expect(result).to.eql({
divB: expected
});
});
test("Data can be specified via options object", function () {
var receivedData, template, templateCopy;
receivedData = null;
template = Dom.template(['div', {
computers: {
'someLabel': function (data) {
return receivedData = data || 'nothing';
}
}
}]);
templateCopy = template.extend({
options: {
data: {
'someLabel': 'works'
}
}
});
template.spawn();
expect(receivedData).to.equal(null);
templateCopy.spawn();
expect(receivedData).to.equal('works');
template.spawn({
options: {
data: {
'someLabel': 'also works'
}
}
});
return expect(receivedData).to.equal('also works');
});
test("Data specified in children's options object will be merged with the parent's data", function () {
var receivedData, template, templateCopy;
receivedData = {
abc: null,
def: null
};
template = Dom.template(['div', null, ['span', {
data: {
abc: 123
},
computers: {
'abc': function (data) {
return receivedData.abc = data || 'nothing';
},
'def': function (data) {
return receivedData.def = data || 'nothing';
}
}
}]]);
templateCopy = template.extend({
options: {
data: {
def: 456
}
}
});
template.spawn();
expect(receivedData).to.eql({
abc: 123,
def: null
});
receivedData = {
abc: null,
def: null
};
templateCopy.spawn();
expect(receivedData).to.eql({
abc: 123,
def: 456
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
def: 789
}
}
});
expect(receivedData).to.eql({
abc: 123,
def: 789
});
receivedData = {
abc: null,
def: null
};
template.spawn({
options: {
data: {
abc: 789
}
}
});
return expect(receivedData).to.eql({
abc: 789,
def: null
});
});
test("Data won't be passed to children if options.passDataToChildren is false", function () {
var el1, el2, receivedData, template1, template2;
receivedData = {
parent: null,
child: null
};
template1 = DOM.template(['div', {
computers: {
abc: function (data) {
return receivedData.parent = data;
}
}
}, ['span', {
computers: {
abc: function (data) {
return receivedData.child = data;
}
}
}]]);
template2 = template1.extend({
passDataToChildren: false
});
expect(receivedData).to.eql({
parent: null,
child: null
});
el1 = template1.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: 123
});
receivedData = {
parent: null,
child: null
};
el2 = template2.spawn({
data: {
abc: 123
}
});
expect(receivedData).to.eql({
parent: 123,
child: null
});
receivedData = {
parent: null,
child: null
};
el1.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: 456
});
receivedData = {
parent: null,
child: null
};
el2.applyData({
abc: 456
});
expect(receivedData).to.eql({
parent: 456,
child: null
});
el2.lastChild.applyData({
abc: 789
});
return expect(receivedData).to.eql({
parent: 456,
child: 789
});
});
test("Data should be invoked for parents after invoked children", function () {
var computers, el, history, template;
history = [];
computers = {
_init: function () {
return history.push(this.ref);
},
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers,
id: 'parent'
}, ['div', {
computers,
id: 'child1'
}, ['div', {
computers,
id: 'child2'
}]], ['div', {
computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn();
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
return expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
});
return test("Computers will be invoked only one time per element if options.invokeComputersOnce is on", function () {
var computers, el, history, template;
history = [];
computers = {
abc: function () {
return history.push(this.ref);
}
};
template = DOM.template(['div', {
computers,
id: 'parent',
invokeComputersOnce: true
}, ['div', {
computers,
id: 'child1'
}, ['div', {
computers,
id: 'child2',
invokeComputersOnce: true
}]], ['div', {
computers,
id: 'child3'
}]]);
expect(history).to.eql([]);
el = template.spawn({
data: {
abc: 123
}
});
expect(history).to.eql(['child2', 'child1', 'child3', 'parent']);
history.length = 0;
el.applyData({
abc: 123
});
expect(history).to.eql(['child1', 'child3']);
history.length = 0;
el.applyData({
abc: 456
});
return expect(history).to.eql(['child1', 'child3']);
});
});
});
return suite("Misc", function () {
test("QuickDom.isTemplate", function () {
expect(Dom.isTemplate(Dom.template(['div']))).to.be.true;
expect(Dom.isTemplate(Dom.div())).to.be.false;
expect(Dom.isTemplate(Dom.div()[0])).to.be.false;
expect(Dom.isTemplate({})).to.be.false;
expect(Dom.isTemplate('string')).to.be.false;
expect(Dom.isTemplate(5)).to.be.false;
expect(Dom.isTemplate(false)).to.be.false;
return expect(Dom.isTemplate(true)).to.be.false;
});
test("QuickDom.isQuickEl", function () {
expect(Dom.isQuickEl(Dom.template(['div']))).to.be.false;
expect(Dom.isQuickEl(Dom.div())).to.be.true;
expect(Dom.isQuickEl(Dom.text())).to.be.true;
expect(Dom.isQuickEl(Dom.div()[0])).to.be.false;
expect(Dom.isQuickEl({})).to.be.false;
expect(Dom.isQuickEl('string')).to.be.false;
expect(Dom.isQuickEl(5)).to.be.false;
expect(Dom.isQuickEl(false)).to.be.false;
return expect(Dom.isQuickEl(true)).to.be.false;
});
test("QuickDom.isEl", function () {
expect(Dom.isEl(Dom.template(['div']))).to.be.false;
expect(Dom.isEl(Dom.div())).to.be.false;
expect(Dom.isEl(Dom.text())).to.be.false;
expect(Dom.isEl(Dom.div()[0])).to.be.true;
expect(Dom.isEl(Dom.text()[0])).to.be.false;
expect(Dom.isEl({})).to.be.false;
expect(Dom.isEl('string')).to.be.false;
expect(Dom.isEl(5)).to.be.false;
expect(Dom.isEl(false)).to.be.false;
return expect(Dom.isEl(true)).to.be.false;
});
test("Stringification", function () {
var section, sectionCopy;
section = Dom(['section', {
id: 'theSection',
className: 'theSectionClass',
style: {
'position': 'relative',
'opacity': 0.5,
'fontSize': function () {
return '29px';
},
$happy: {
fontSize: '11px',
$relaxed: {
fontSize: '8px'
}
}
}
}, ['div', {
id: 'childA',
style: {
position: 'relative'
}
}, 'childA-innertext'], 'section-innertext', ['span', {
id: 'childB',
ref: 'childB-ref!',
style: {
position: 'absolute'
}
}, 'childB-innertext', ['text', {
text: 'childB-innertext 2'
}], ['a', {
url: 'https://google.com'
}]]]).appendTo(sandbox);
window.stringified = JSON.stringify(section, null, 2);
sectionCopy = Dom(JSON.parse(stringified)).appendTo(sandbox);
expect(sectionCopy.type).to.equal(section.type);
expect(sectionCopy.ref).to.equal(section.ref);
expect(sectionCopy.el.id).to.equal(section.el.id);
expect(sectionCopy.el.className).to.equal(section.el.className);
expect(sectionCopy.style('position')).to.equal(section.style('position'));
expect(sectionCopy.style('opacity')).to.equal(section.style('opacity'));
expect(sectionCopy.style('fontSize')).not.to.equal(section.style('fontSize'));
section.style('fontSize', null);
section.state('happy', true);
sectionCopy.state('happy', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
section.state('relaxed', true);
sectionCopy.state('relaxed', true);
expect(sectionCopy.style('fontSize')).to.equal(section.style('fontSize'));
expect(sectionCopy.children.length).to.equal(section.children.length);
expect(Object.keys(sectionCopy.child).length).to.equal(Object.keys(section.child).length);
expect(sectionCopy.text).to.equal(section.text);
expect(sectionCopy.html).to.equal(section.html);
expect(sectionCopy.children[0].style('position')).to.equal(section.children[0].style('position'));
expect(sectionCopy.children[2].style('position')).to.equal(section.children[2].style('position'));
return expect(sectionCopy.children[2].ref).to.equal(section.children[2].ref);
});
test("Chaining", function () {
var chainResult, div, head;
div = Dom.div();
chainResult = div.state('abc', true).resetState().style().css('width', 12).attr('test', 123).prop('anotherTest', 123).updateStateStyles({
height: 50
}).updateStateTexts({
$base: 'abc'
}).append().appendTo().prepend().prependTo().before().after().insertBefore().insertAfter().detach().wrap(Dom.section()).unwrap().wrap(Dom.header()).replace().appendTo(sandbox).wrap(head = Dom.header()).on('abc', function () {}).emit('abc').off('abc').off();
expect(chainResult).to.equal(div);
expect(sandbox.children[0]).to.equal(head.el);
expect(div.parent).to.equal(head);
return expect(div.css('width')).to.equal('12px');
});
return test("Invalid Arguments", function () {
var cb, div, emitCount, text;
text = Dom.text('someText', {
lostOpts: true
});
div = Dom.div({
lostOpts: true
});
expect(Dom()).to.equal(void 0);
expect(Dom(null)).to.equal(void 0);
expect(Dom({})).to.equal(void 0);
expect(div.updateOptions()).to.equal(div);
expect(text.options.lostOpts).to.equal(void 0);
expect(div.options.lostOpts).to.equal(true);
expect(div.on()).to.equal(div);
expect(div.on('abc')).to.equal(div);
expect(div.on('abc', {})).to.equal(div);
expect(div.once('abc')).to.equal(div);
expect(div.off('somethingFake')).to.equal(div);
emitCount = 0;
div.on('something', cb = function () {
return emitCount++;
});
expect(div.emit('')).to.equal(div);
expect(div.emit()).to.equal(div);
expect(div.emitPrivate('none')).to.equal(div);
expect(div.emitPrivate('')).to.equal(div);
expect(div.emitPrivate()).to.equal(div);
expect(emitCount).to.equal(0);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(1);
expect(div.off('something', function () {})).to.equal(div);
expect(div.emit('something')).to.equal(div);
expect(emitCount).to.equal(2);
div.css(null, '129');
expect(div.el.style.null).to.equal(void 0);
expect(div.state()).to.eql([]);
expect(div.state(null, true)).to.equal(void 0);
expect(div.state(123, true)).to.equal(void 0);
expect(div.state('base', true)).to.equal(div);
expect(div.state('base')).to.be.false;
expect(div.state('$whatevs', true)).to.equal(div);
expect(div.state('whatevs')).to.be.true;
expect(div.state('another')).to.be.false;
expect(div.state('another', true)).to.equal(div);
expect(div.state('another')).to.be.true;
expect(div.state('another', void 0)).to.equal(div);
expect(div.state('another')).to.be.false;
expect(div.updateStateStyles({
$base: {
width: 1
}
})).to.equal(div);
expect(div.updateStateStyles(null)).to.equal(div);
expect(div.updateStateTexts({
$base: 'abc'
})).to.equal(div);
expect(div.updateStateTexts(null)).to.equal(div);
div.appendTo(Dom(sandbox));
expect(div.parent).to.equal(Dom(sandbox));
div.append(true);
expect(div.children.length).to.equal(0);
div.appendTo(document);
expect(div.parent).to.equal(Dom(sandbox));
div.prepend(true);
expect(div.children.length).to.equal(0);
div.prependTo(true);
expect(div.parent).to.equal(Dom(sandbox));
div.after(true);
expect(div.children.length).to.equal(0);
div.insertAfter(123);
expect(div.parent).to.equal(Dom(sandbox));
div.before(true);
expect(div.children.length).to.equal(0);
div.insertBefore(123);
expect(div.parent).to.equal(Dom(sandbox));
div.wrap(123);
expect(div.parent).to.equal(Dom(sandbox));
div.replace(123);
expect(div.parent).to.equal(Dom(sandbox));
div.detach();
expect(div.parent).to.equal(void 0);
div.unwrap();
expect(div.parent).to.equal(void 0);
expect(Dom(sandbox).children.length).to.equal(0);
div.appendTo(Dom(sandbox));
expect(Dom(sandbox).children.length).to.equal(1);
if (Dom(sandbox)._removeChild) {
Dom(sandbox)._removeChild(text);
Dom(sandbox)._removeChild(Dom.div());
expect(Dom(sandbox).children.length).to.equal(1);
}
expect(function () {
return Dom.batch();
}).to.throw();
expect(function () {
return Dom.batch({});
}).to.throw();
expect(function () {
return Dom.batch(5432);
}).to.throw();
expect(function () {
return Dom.batch([]);
}).to.throw();
expect(function () {
return Dom.batch([12]).append(Dom.div());
}).to.throw();
expect(function () {
return Dom.batch([12]);
}).not.to.throw();
expect(function () {
return Dom.template();
}).to.throw();
expect(function () {
return Dom.template(null);
}).to.throw();
expect(function () {
return Dom.template({});
}).to.throw();
expect(function () {
return Dom.template([8482, {
className: 't'
}]);
}).to.throw();
expect(function () {
return Dom.template(['div', 'someString']);
}).to.throw();
expect(function () {
return Dom.template(['div', null, 'Some Inner Text']);
}).not.to.throw();
expect(function () {
return Dom.div({
style: {
opacity: 0.5,
'@abc(max-width:390)': {
opacity: 1
}
}
}).appendTo(sandbox);
}).not.to.throw();
return expect(function () {
div = Dom.div();
div.pipeState(div);
div.state('happy', true);
return expect(div.state('happy')).to.equal(true);
}).not.to.throw();
});
});
});
HTMLElement.prototype.onEvent = function (eventName, callback) {
if (this.addEventListener) {
return this.addEventListener(eventName, callback);
} else {
return this.attachEvent(`on${eventName}`, callback);
}
};
HTMLElement.prototype.removeEvent = function (eventName, callback) {
if (this.removeEventListener) {
return this.removeEventListener(eventName, callback);
} else {
return this.detachEvent(`on${eventName}`, callback);
}
};
HTMLElement.prototype.emitEvent = function (eventName) {
var event;
event = document.createEvent('Event');
event.initEvent(eventName, true, false);
return this.dispatchEvent(event);
};
if (HTMLElement.name !== 'HTMLElement') {
HTMLElement.name = 'HTMLElement';
Text.name = 'Text';
nonElementSuffix = ['OptionsCollection', 'FormControlsCollection', 'Document', 'Collection', 'AllCollection'];
elementSuffix = ["Video", "Unknown", "UList", "Track", "Title", "TextArea", "Template", "TableSection", "TableRow", "Table", "TableCol", "TableCell", "TableCaption", "Style", "Span", "Source", "Slot", "Shadow", "Select", "Script", "Quote", "Progress", "Pre", "Picture", "Param", "Paragraph", "Output", "Option", "OptGroup", "Object", "OList", "Mod", "Meter", "Meta", "Menu", "Media", "Marquee", "Map", "Link", "Legend", "Label", "LI", "Input", "Image", "IFrame", "Html", "Heading", "Head", "HR", "FrameSet", "Frame", "Form", "Font", "FieldSet", "Embed", "Div", "Directory", "Dialog", "Details", "DataList", "DList", "Content", "Canvas", "Button", "Body", "Base", "BR", "Audio", "Area", "Anchor"];
for ((i = 0, len = nonElementSuffix.length); i < len; i++) {
creator = nonElementSuffix[i];
if ((ref = window[`HTML${creator}`]) != null) {
ref.name = `HTML${creator}`;
}
}
for ((j = 0, len1 = elementSuffix.length); j < len1; j++) {
creator = elementSuffix[j];
if ((ref1 = window[`HTML${creator}Element`]) != null) {
ref1.name = `HTML${creator}Element`;
}
}
if ((ref2 = window.SVGElement) != null) {
ref2.name = 'SVGElement';
}
if ((ref3 = window.SVGSVGElement) != null) {
ref3.name = 'SVGSVGElement';
}
if ((ref4 = window.SVGPolylineElement) != null) {
ref4.name = 'SVGPolylineElement';
}
}
if (window.ClientRect == null) {
window.ClientRect = DOMRect;
}
return module.exports;
},
"simulate.coffee": function (require, module, exports) {
var origDescriptors;
origDescriptors = {
'innerWidth': Object.getOwnPropertyDescriptor(window, 'innerWidth'),
'innerHeight': Object.getOwnPropertyDescriptor(window, 'innerHeight')
};
module.exports = new (function () {
var current, getReal, overwrite, overwritten;
overwritten = false;
current = {
width: window.innerWidth,
height: window.innerHeight
};
getReal = function (dimension) {
dimension = 'inner' + dimension.replace(/\b./, function (letter) {
return letter.toUpperCase();
});
return origDescriptors[dimension].get.call(window);
};
overwrite = function () {
if (!overwritten) {
overwritten = true;
Object.defineProperty(window, 'innerWidth', {
configurable: true,
get: function () {
return current.width;
},
set: function (newValue) {
return current.width = newValue;
}
});
return Object.defineProperty(window, 'innerHeight', {
configurable: true,
get: function () {
return current.height;
},
set: function (newValue) {
return current.height = newValue;
}
});
}
};
this.simulate = function (width, height) {
var event;
if (width) {
current.width = width;
}
if (height) {
current.height = height;
}
overwrite();
event = document.createEvent('Event');
event.initEvent('resize', true, false);
return window.dispatchEvent(event);
};
this.restore = function () {
Object.defineProperty(window, 'innerWidth', origDescriptors.innerWidth);
return Object.defineProperty(window, 'innerHeight', origDescriptors.innerHeight);
};
return this;
})();
return module.exports;
},
"node_modules/chai/index.js": function (require, module, exports) {
module.exports = require("node_modules/chai/lib/chai.js");
return module.exports;
},
"node_modules/chai-style/sources/index.js": function (require, module, exports) {
module.exports = chaiStyle;
function chaiStyle(chai, utils) {
const {Assertion} = chai;
const {flag} = utils;
let sampleDiv, sampleStyle, sampleIframe;
Assertion.addMethod('style', function (property, value = '') {
const element = flag(this, 'object');
const style = window.getComputedStyle(element);
value = value.trim();
const isNonColors = style[property] === 'rgba(0, 0, 0, 0)' || style[property] === 'transparent';
const propertyValue = isNonColors ? '' : style[property];
const assertion = value ? compareCSSValue(propertyValue, value) : Boolean(propertyValue);
const elementTag = element.tagName.toLowerCase();
const throwMessage = `expect ${elementTag} to have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
const throwMessageNegative = `expect ${elementTag} to not have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
this.assert(assertion, throwMessage, throwMessageNegative, value);
function compareCSSValue(computed, expected) {
const propertyHifenCase = property.replace(/[A-Z]/g, match => '-' + match.toLowerCase());
if (!sampleDiv) {
sampleIframe = document.createElement('iframe');
sampleDiv = document.createElement('div');
sampleStyle = window.getComputedStyle(sampleDiv);
sampleIframe.appendChild(sampleDiv);
document.body.appendChild(sampleIframe);
}
sampleDiv.style.fontSize = style.fontSize;
sampleDiv.style.setProperty(propertyHifenCase, expected, 'important');
const value = sampleStyle[property];
const hasAutoValue = value.includes('auto');
const reg = new RegExp(escapeRegExp(value).replace(/auto/g, '(\\d+(.\\d+)?px|auto)'));
sampleDiv.style.fontSize = null;
sampleDiv.style[propertyHifenCase] = null;
return hasAutoValue ? reg.test(computed) : computed === value;
}
});
}
function escapeRegExp(value) {
return String(value).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}
return module.exports;
},
"node_modules/chai/lib/chai.js": function (require, module, exports) {
var used = [];
exports.version = '4.1.2';
exports.AssertionError = require("node_modules/assertion-error/index.js");
var util = require("node_modules/chai/lib/chai/utils/index.js");
exports.use = function (fn) {
if (!~used.indexOf(fn)) {
fn(exports, util);
used.push(fn);
}
return exports;
};
exports.util = util;
var config = require("node_modules/chai/lib/chai/config.js");
exports.config = config;
var assertion = require("node_modules/chai/lib/chai/assertion.js");
exports.use(assertion);
var core = require("node_modules/chai/lib/chai/core/assertions.js");
exports.use(core);
var expect = require("node_modules/chai/lib/chai/interface/expect.js");
exports.use(expect);
var should = require("node_modules/chai/lib/chai/interface/should.js");
exports.use(should);
var assert = require("node_modules/chai/lib/chai/interface/assert.js");
exports.use(assert);
return module.exports;
},
"node_modules/assertion-error/index.js": function (require, module, exports) {
function exclude() {
var excludes = [].slice.call(arguments);
function excludeProps(res, obj) {
Object.keys(obj).forEach(function (key) {
if (!~excludes.indexOf(key)) res[key] = obj[key];
});
}
return function extendExclude() {
var args = [].slice.call(arguments), i = 0, res = {};
for (; i < args.length; i++) {
excludeProps(res, args[i]);
}
return res;
};
}
;
module.exports = AssertionError;
function AssertionError(message, _props, ssf) {
var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'), props = extend(_props || ({}));
this.message = message || 'Unspecified AssertionError';
this.showDiff = false;
for (var key in props) {
this[key] = props[key];
}
ssf = ssf || arguments.callee;
if (ssf && Error.captureStackTrace) {
Error.captureStackTrace(this, ssf);
} else {
try {
throw new Error();
} catch (e) {
this.stack = e.stack;
}
}
}
AssertionError.prototype = Object.create(Error.prototype);
AssertionError.prototype.name = 'AssertionError';
AssertionError.prototype.constructor = AssertionError;
AssertionError.prototype.toJSON = function (stack) {
var extend = exclude('constructor', 'toJSON', 'stack'), props = extend({
name: this.name
}, this);
if (false !== stack && this.stack) {
props.stack = this.stack;
}
return props;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/index.js": function (require, module, exports) {
var pathval = require("node_modules/pathval/index.js");
exports.test = require("node_modules/chai/lib/chai/utils/test.js");
exports.type = require("node_modules/type-detect/index.js");
exports.expectTypes = require("node_modules/chai/lib/chai/utils/expectTypes.js");
exports.getMessage = require("node_modules/chai/lib/chai/utils/getMessage.js");
exports.getActual = require("node_modules/chai/lib/chai/utils/getActual.js");
exports.inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
exports.objDisplay = require("node_modules/chai/lib/chai/utils/objDisplay.js");
exports.flag = require("node_modules/chai/lib/chai/utils/flag.js");
exports.transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
exports.eql = require("node_modules/deep-eql/index.js");
exports.getPathInfo = pathval.getPathInfo;
exports.hasProperty = pathval.hasProperty;
exports.getName = require("node_modules/get-func-name/index.js");
exports.addProperty = require("node_modules/chai/lib/chai/utils/addProperty.js");
exports.addMethod = require("node_modules/chai/lib/chai/utils/addMethod.js");
exports.overwriteProperty = require("node_modules/chai/lib/chai/utils/overwriteProperty.js");
exports.overwriteMethod = require("node_modules/chai/lib/chai/utils/overwriteMethod.js");
exports.addChainableMethod = require("node_modules/chai/lib/chai/utils/addChainableMethod.js");
exports.overwriteChainableMethod = require("node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");
exports.compareByInspect = require("node_modules/chai/lib/chai/utils/compareByInspect.js");
exports.getOwnEnumerablePropertySymbols = require("node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
exports.getOwnEnumerableProperties = require("node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");
exports.checkError = require("node_modules/check-error/index.js");
exports.proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
exports.addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
exports.isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
exports.isNaN = require("node_modules/chai/lib/chai/utils/isNaN.js");
return module.exports;
},
"node_modules/chai/lib/chai/config.js": function (require, module, exports) {
module.exports = {
includeStack: false,
showDiff: true,
truncateThreshold: 40,
useProxy: true,
proxyExcludedKeys: ['then', 'inspect', 'toJSON']
};
return module.exports;
},
"node_modules/chai/lib/chai/assertion.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function (_chai, util) {
var AssertionError = _chai.AssertionError, flag = util.flag;
_chai.Assertion = Assertion;
function Assertion(obj, msg, ssfi, lockSsfi) {
flag(this, 'ssfi', ssfi || Assertion);
flag(this, 'lockSsfi', lockSsfi);
flag(this, 'object', obj);
flag(this, 'message', msg);
return util.proxify(this);
}
Object.defineProperty(Assertion, 'includeStack', {
get: function () {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
return config.includeStack;
},
set: function (value) {
console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
config.includeStack = value;
}
});
Object.defineProperty(Assertion, 'showDiff', {
get: function () {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
return config.showDiff;
},
set: function (value) {
console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
config.showDiff = value;
}
});
Assertion.addProperty = function (name, fn) {
util.addProperty(this.prototype, name, fn);
};
Assertion.addMethod = function (name, fn) {
util.addMethod(this.prototype, name, fn);
};
Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.overwriteProperty = function (name, fn) {
util.overwriteProperty(this.prototype, name, fn);
};
Assertion.overwriteMethod = function (name, fn) {
util.overwriteMethod(this.prototype, name, fn);
};
Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
};
Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
var ok = util.test(this, arguments);
if (false !== showDiff) showDiff = true;
if (undefined === expected && undefined === _actual) showDiff = false;
if (true !== config.showDiff) showDiff = false;
if (!ok) {
msg = util.getMessage(this, arguments);
var actual = util.getActual(this, arguments);
throw new AssertionError(msg, {
actual: actual,
expected: expected,
showDiff: showDiff
}, ((config.includeStack)) ? this.assert : flag(this, 'ssfi'));
}
};
Object.defineProperty(Assertion.prototype, '_obj', {
get: function () {
return flag(this, 'object');
},
set: function (val) {
flag(this, 'object', val);
}
});
};
return module.exports;
},
"node_modules/chai/lib/chai/core/assertions.js": function (require, module, exports) {
module.exports = function (chai, _) {
var Assertion = chai.Assertion, AssertionError = chai.AssertionError, flag = _.flag;
['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does'].forEach(function (chain) {
Assertion.addProperty(chain);
});
Assertion.addProperty('not', function () {
flag(this, 'negate', true);
});
Assertion.addProperty('deep', function () {
flag(this, 'deep', true);
});
Assertion.addProperty('nested', function () {
flag(this, 'nested', true);
});
Assertion.addProperty('own', function () {
flag(this, 'own', true);
});
Assertion.addProperty('ordered', function () {
flag(this, 'ordered', true);
});
Assertion.addProperty('any', function () {
flag(this, 'any', true);
flag(this, 'all', false);
});
Assertion.addProperty('all', function () {
flag(this, 'all', true);
flag(this, 'any', false);
});
function an(type, msg) {
if (msg) flag(this, 'message', msg);
type = type.toLowerCase();
var obj = flag(this, 'object'), article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
}
Assertion.addChainableMethod('an', an);
Assertion.addChainableMethod('a', an);
function SameValueZero(a, b) {
return (_.isNaN(a) && _.isNaN(b)) || a === b;
}
function includeChainingBehavior() {
flag(this, 'contains', true);
}
function include(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, 'message'), negate = flag(this, 'negate'), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), descriptor = isDeep ? 'deep ' : '';
flagMsg = flagMsg ? flagMsg + ': ' : '';
var included = false;
switch (objType) {
case 'string':
included = obj.indexOf(val) !== -1;
break;
case 'weakset':
if (isDeep) {
throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
}
included = obj.has(val);
break;
case 'map':
var isEql = isDeep ? _.eql : SameValueZero;
obj.forEach(function (item) {
included = included || isEql(item, val);
});
break;
case 'set':
if (isDeep) {
obj.forEach(function (item) {
included = included || _.eql(item, val);
});
} else {
included = obj.has(val);
}
break;
case 'array':
if (isDeep) {
included = obj.some(function (item) {
return _.eql(item, val);
});
} else {
included = obj.indexOf(val) !== -1;
}
break;
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,' + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
}
var props = Object.keys(val), firstErr = null, numErrs = 0;
props.forEach(function (prop) {
var propAssertion = new Assertion(obj);
_.transferFlags(this, propAssertion, true);
flag(propAssertion, 'lockSsfi', true);
if (!negate || props.length === 1) {
propAssertion.property(prop, val[prop]);
return;
}
try {
propAssertion.property(prop, val[prop]);
} catch (err) {
if (!_.checkError.compatibleConstructor(err, AssertionError)) {
throw err;
}
if (firstErr === null) firstErr = err;
numErrs++;
}
}, this);
if (negate && props.length > 1 && numErrs === props.length) {
throw firstErr;
}
return;
}
this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
}
Assertion.addChainableMethod('include', include, includeChainingBehavior);
Assertion.addChainableMethod('contain', include, includeChainingBehavior);
Assertion.addChainableMethod('contains', include, includeChainingBehavior);
Assertion.addChainableMethod('includes', include, includeChainingBehavior);
Assertion.addProperty('ok', function () {
this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
});
Assertion.addProperty('true', function () {
this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
});
Assertion.addProperty('false', function () {
this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
});
Assertion.addProperty('null', function () {
this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
});
Assertion.addProperty('undefined', function () {
this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
});
Assertion.addProperty('NaN', function () {
this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
});
Assertion.addProperty('exist', function () {
var val = flag(this, 'object');
this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
});
Assertion.addProperty('empty', function () {
var val = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), itemsCount;
flagMsg = flagMsg ? flagMsg + ': ' : '';
switch (_.type(val).toLowerCase()) {
case 'array':
case 'string':
itemsCount = val.length;
break;
case 'map':
case 'set':
itemsCount = val.size;
break;
case 'weakmap':
case 'weakset':
throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);
case 'function':
var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
throw new AssertionError(msg.trim(), undefined, ssfi);
default:
if (val !== Object(val)) {
throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
}
itemsCount = Object.keys(val).length;
}
this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
});
function checkArguments() {
var obj = flag(this, 'object'), type = _.type(obj);
this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
}
Assertion.addProperty('arguments', checkArguments);
Assertion.addProperty('Arguments', checkArguments);
function assertEqual(val, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
if (flag(this, 'deep')) {
return this.eql(val);
} else {
this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
}
}
Assertion.addMethod('equal', assertEqual);
Assertion.addMethod('equals', assertEqual);
Assertion.addMethod('eq', assertEqual);
function assertEql(obj, msg) {
if (msg) flag(this, 'message', msg);
this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
}
Assertion.addMethod('eql', assertEql);
Assertion.addMethod('eqls', assertEql);
function assertAbove(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to above must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to above must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len > n, 'expected #{this} to have a length above #{exp} but got #{act}', 'expected #{this} to not have a length above #{exp}', n, len);
} else {
this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
}
}
Assertion.addMethod('above', assertAbove);
Assertion.addMethod('gt', assertAbove);
Assertion.addMethod('greaterThan', assertAbove);
function assertLeast(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to least must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to least must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= n, 'expected #{this} to have a length at least #{exp} but got #{act}', 'expected #{this} to have a length below #{exp}', n, len);
} else {
this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
}
}
Assertion.addMethod('least', assertLeast);
Assertion.addMethod('gte', assertLeast);
function assertBelow(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to below must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to below must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len < n, 'expected #{this} to have a length below #{exp} but got #{act}', 'expected #{this} to not have a length below #{exp}', n, len);
} else {
this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
}
}
Assertion.addMethod('below', assertBelow);
Assertion.addMethod('lt', assertBelow);
Assertion.addMethod('lessThan', assertBelow);
function assertMost(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), shouldThrow = true;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && nType !== 'date')) {
errorMessage = msgPrefix + 'the argument to most must be a date';
} else if (nType !== 'number' && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the argument to most must be a number';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len <= n, 'expected #{this} to have a length at most #{exp} but got #{act}', 'expected #{this} to have a length above #{exp}', n, len);
} else {
this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
}
}
Assertion.addMethod('most', assertMost);
Assertion.addMethod('lte', assertMost);
Assertion.addMethod('within', function (start, finish, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = (((flagMsg)) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), shouldThrow = true, range = ((startType === 'date' && finishType === 'date')) ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;
if (doLength) {
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
}
if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
errorMessage = msgPrefix + 'the arguments to within must be dates';
} else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
errorMessage = msgPrefix + 'the arguments to within must be numbers';
} else if (!doLength && (objType !== 'date' && objType !== 'number')) {
var printObj = ((objType === 'string')) ? "'" + obj + "'" : obj;
errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
} else {
shouldThrow = false;
}
if (shouldThrow) {
throw new AssertionError(errorMessage, undefined, ssfi);
}
if (doLength) {
var len = obj.length;
this.assert(len >= start && len <= finish, 'expected #{this} to have a length within ' + range, 'expected #{this} to not have a length within ' + range);
} else {
this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
}
});
function assertInstanceOf(constructor, msg) {
if (msg) flag(this, 'message', msg);
var target = flag(this, 'object');
var ssfi = flag(this, 'ssfi');
var flagMsg = flag(this, 'message');
try {
var isInstanceOf = target instanceof constructor;
} catch (err) {
if (err instanceof TypeError) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);
}
throw err;
}
var name = _.getName(constructor);
if (name === null) {
name = 'an unnamed constructor';
}
this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
}
;
Assertion.addMethod('instanceof', assertInstanceOf);
Assertion.addMethod('instanceOf', assertInstanceOf);
function assertProperty(name, val, msg) {
if (msg) flag(this, 'message', msg);
var isNested = flag(this, 'nested'), isOwn = flag(this, 'own'), flagMsg = flag(this, 'message'), obj = flag(this, 'object'), ssfi = flag(this, 'ssfi');
if (isNested && isOwn) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
}
if (obj === null || obj === undefined) {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
}
var isDeep = flag(this, 'deep'), negate = flag(this, 'negate'), pathInfo = isNested ? _.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name];
var descriptor = '';
if (isDeep) descriptor += 'deep ';
if (isOwn) descriptor += 'own ';
if (isNested) descriptor += 'nested ';
descriptor += 'property ';
var hasProperty;
if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name); else if (isNested) hasProperty = pathInfo.exists; else hasProperty = _.hasProperty(obj, name);
if (!negate || arguments.length === 1) {
this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
}
if (arguments.length > 1) {
this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
}
flag(this, 'object', value);
}
Assertion.addMethod('property', assertProperty);
function assertOwnProperty(name, value, msg) {
flag(this, 'own', true);
assertProperty.apply(this, arguments);
}
Assertion.addMethod('ownProperty', assertOwnProperty);
Assertion.addMethod('haveOwnProperty', assertOwnProperty);
function assertOwnPropertyDescriptor(name, descriptor, msg) {
if (typeof descriptor === 'string') {
msg = descriptor;
descriptor = null;
}
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
if (actualDescriptor && descriptor) {
this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
} else {
this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
}
flag(this, 'object', actualDescriptor);
}
Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
function assertLengthChain() {
flag(this, 'doLength', true);
}
function assertLength(n, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
var len = obj.length;
this.assert(len == n, 'expected #{this} to have a length of #{exp} but got #{act}', 'expected #{this} to not have a length of #{act}', n, len);
}
Assertion.addChainableMethod('length', assertLength, assertLengthChain);
Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
function assertMatch(re, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
}
Assertion.addMethod('match', assertMatch);
Assertion.addMethod('matches', assertMatch);
Assertion.addMethod('string', function (str, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('string');
this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
});
function assertKeys(keys) {
var obj = flag(this, 'object'), objType = _.type(obj), keysType = _.type(keys), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), str, deepStr = '', ok = true, flagMsg = flag(this, 'message');
flagMsg = flagMsg ? flagMsg + ': ' : '';
var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';
if (objType === 'Map' || objType === 'Set') {
deepStr = isDeep ? 'deeply ' : '';
actual = [];
obj.forEach(function (val, key) {
actual.push(key);
});
if (keysType !== 'Array') {
keys = Array.prototype.slice.call(arguments);
}
} else {
actual = _.getOwnEnumerableProperties(obj);
switch (keysType) {
case 'Array':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
break;
case 'Object':
if (arguments.length > 1) {
throw new AssertionError(mixedArgsMsg, undefined, ssfi);
}
keys = Object.keys(keys);
break;
default:
keys = Array.prototype.slice.call(arguments);
}
keys = keys.map(function (val) {
return typeof val === 'symbol' ? val : String(val);
});
}
if (!keys.length) {
throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
}
var len = keys.length, any = flag(this, 'any'), all = flag(this, 'all'), expected = keys, actual;
if (!any && !all) {
all = true;
}
if (any) {
ok = expected.some(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
}
if (all) {
ok = expected.every(function (expectedKey) {
return actual.some(function (actualKey) {
if (isDeep) {
return _.eql(expectedKey, actualKey);
} else {
return expectedKey === actualKey;
}
});
});
if (!flag(this, 'contains')) {
ok = ok && keys.length == actual.length;
}
}
if (len > 1) {
keys = keys.map(function (key) {
return _.inspect(key);
});
var last = keys.pop();
if (all) {
str = keys.join(', ') + ', and ' + last;
}
if (any) {
str = keys.join(', ') + ', or ' + last;
}
} else {
str = _.inspect(keys[0]);
}
str = (len > 1 ? 'keys ' : 'key ') + str;
str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
}
Assertion.addMethod('keys', assertKeys);
Assertion.addMethod('key', assertKeys);
function assertThrows(errorLike, errMsgMatcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), negate = flag(this, 'negate') || false;
new Assertion(obj, flagMsg, ssfi, true).is.a('function');
if (errorLike instanceof RegExp || typeof errorLike === 'string') {
errMsgMatcher = errorLike;
errorLike = null;
}
var caughtErr;
try {
obj();
} catch (err) {
caughtErr = err;
}
var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
var errorLikeFail = false;
var errMsgMatcherFail = false;
if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
var errorLikeString = 'an error';
if (errorLike instanceof Error) {
errorLikeString = '#{exp}';
} else if (errorLike) {
errorLikeString = _.checkError.getConstructorName(errorLike);
}
this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), (caughtErr instanceof Error ? caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr))));
}
if (errorLike && caughtErr) {
if (errorLike instanceof Error) {
var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
if (isCompatibleInstance === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
}
}
}
var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
if (isCompatibleConstructor === negate) {
if (everyArgIsDefined && negate) {
errorLikeFail = true;
} else {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
}
}
if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
var placeholder = 'including';
if (errMsgMatcher instanceof RegExp) {
placeholder = 'matching';
}
var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
if (isCompatibleMessage === negate) {
if (everyArgIsDefined && negate) {
errMsgMatcherFail = true;
} else {
this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
}
}
}
if (errorLikeFail && errMsgMatcherFail) {
this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
}
flag(this, 'object', caughtErr);
}
;
Assertion.addMethod('throw', assertThrows);
Assertion.addMethod('throws', assertThrows);
Assertion.addMethod('Throw', assertThrows);
function respondTo(method, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), itself = flag(this, 'itself'), context = (('function' === typeof obj && !itself)) ? obj.prototype[method] : obj[method];
this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
}
Assertion.addMethod('respondTo', respondTo);
Assertion.addMethod('respondsTo', respondTo);
Assertion.addProperty('itself', function () {
flag(this, 'itself', true);
});
function satisfy(matcher, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object');
var result = matcher(obj);
this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
}
Assertion.addMethod('satisfy', satisfy);
Assertion.addMethod('satisfies', satisfy);
function closeTo(expected, delta, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).is.a('number');
if (typeof expected !== 'number' || typeof delta !== 'number') {
flagMsg = flagMsg ? flagMsg + ': ' : '';
throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
}
this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
}
Assertion.addMethod('closeTo', closeTo);
Assertion.addMethod('approximately', closeTo);
function isSubsetOf(subset, superset, cmp, contains, ordered) {
if (!contains) {
if (subset.length !== superset.length) return false;
superset = superset.slice();
}
return subset.every(function (elem, idx) {
if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
if (!cmp) {
var matchIdx = superset.indexOf(elem);
if (matchIdx === -1) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
}
return superset.some(function (elem2, matchIdx) {
if (!cmp(elem, elem2)) return false;
if (!contains) superset.splice(matchIdx, 1);
return true;
});
});
}
Assertion.addMethod('members', function (subset, msg) {
if (msg) flag(this, 'message', msg);
var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
var contains = flag(this, 'contains');
var ordered = flag(this, 'ordered');
var subject, failMsg, failNegateMsg, lengthCheck;
if (contains) {
subject = ordered ? 'an ordered superset' : 'a superset';
failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
} else {
subject = ordered ? 'ordered members' : 'members';
failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
}
var cmp = flag(this, 'deep') ? _.eql : undefined;
this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
});
function oneOf(list, msg) {
if (msg) flag(this, 'message', msg);
var expected = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
}
Assertion.addMethod('oneOf', oneOf);
function assertChanges(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'change');
flag(this, 'realDelta', final !== initial);
this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
}
Assertion.addMethod('change', assertChanges);
Assertion.addMethod('changes', assertChanges);
function assertIncreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'increase');
flag(this, 'realDelta', final - initial);
this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
}
Assertion.addMethod('increase', assertIncreases);
Assertion.addMethod('increases', assertIncreases);
function assertDecreases(subject, prop, msg) {
if (msg) flag(this, 'message', msg);
var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
new Assertion(fn, flagMsg, ssfi, true).is.a('function');
var initial;
if (!prop) {
new Assertion(subject, flagMsg, ssfi, true).is.a('function');
initial = subject();
} else {
new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
initial = subject[prop];
}
new Assertion(initial, flagMsg, ssfi, true).is.a('number');
fn();
var final = prop === undefined || prop === null ? subject() : subject[prop];
var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
flag(this, 'deltaMsgObj', msgObj);
flag(this, 'initialDeltaValue', initial);
flag(this, 'finalDeltaValue', final);
flag(this, 'deltaBehavior', 'decrease');
flag(this, 'realDelta', initial - final);
this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
}
Assertion.addMethod('decrease', assertDecreases);
Assertion.addMethod('decreases', assertDecreases);
function assertDelta(delta, msg) {
if (msg) flag(this, 'message', msg);
var msgObj = flag(this, 'deltaMsgObj');
var initial = flag(this, 'initialDeltaValue');
var final = flag(this, 'finalDeltaValue');
var behavior = flag(this, 'deltaBehavior');
var realDelta = flag(this, 'realDelta');
var expression;
if (behavior === 'change') {
expression = Math.abs(final - initial) === Math.abs(delta);
} else {
expression = realDelta === Math.abs(delta);
}
this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
}
Assertion.addMethod('by', assertDelta);
Assertion.addProperty('extensible', function () {
var obj = flag(this, 'object');
var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
});
Assertion.addProperty('sealed', function () {
var obj = flag(this, 'object');
var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
});
Assertion.addProperty('frozen', function () {
var obj = flag(this, 'object');
var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
});
Assertion.addProperty('finite', function (msg) {
var obj = flag(this, 'object');
this.assert(typeof obj === "number" && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
});
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/expect.js": function (require, module, exports) {
module.exports = function (chai, util) {
chai.expect = function (val, message) {
return new chai.Assertion(val, message);
};
chai.expect.fail = function (actual, expected, message, operator) {
message = message || 'expect.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, chai.expect.fail);
};
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/should.js": function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion;
function loadShould() {
function shouldGetter() {
if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {
return new Assertion(this.valueOf(), null, shouldGetter);
}
return new Assertion(this, null, shouldGetter);
}
function shouldSetter(value) {
Object.defineProperty(this, 'should', {
value: value,
enumerable: true,
configurable: true,
writable: true
});
}
Object.defineProperty(Object.prototype, 'should', {
set: shouldSetter,
get: shouldGetter,
configurable: true
});
var should = {};
should.fail = function (actual, expected, message, operator) {
message = message || 'should.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, should.fail);
};
should.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.equal(val2);
};
should.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.Throw(errt, errs);
};
should.exist = function (val, msg) {
new Assertion(val, msg).to.exist;
};
should.not = {};
should.not.equal = function (val1, val2, msg) {
new Assertion(val1, msg).to.not.equal(val2);
};
should.not.Throw = function (fn, errt, errs, msg) {
new Assertion(fn, msg).to.not.Throw(errt, errs);
};
should.not.exist = function (val, msg) {
new Assertion(val, msg).to.not.exist;
};
should['throw'] = should['Throw'];
should.not['throw'] = should.not['Throw'];
return should;
}
;
chai.should = loadShould;
chai.Should = loadShould;
};
return module.exports;
},
"node_modules/chai/lib/chai/interface/assert.js": function (require, module, exports) {
module.exports = function (chai, util) {
var Assertion = chai.Assertion, flag = util.flag;
var assert = chai.assert = function (express, errmsg) {
var test = new Assertion(null, null, chai.assert, true);
test.assert(express, errmsg, '[ negation message unavailable ]');
};
assert.fail = function (actual, expected, message, operator) {
message = message || 'assert.fail()';
throw new chai.AssertionError(message, {
actual: actual,
expected: expected,
operator: operator
}, assert.fail);
};
assert.isOk = function (val, msg) {
new Assertion(val, msg, assert.isOk, true).is.ok;
};
assert.isNotOk = function (val, msg) {
new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
};
assert.equal = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.equal, true);
test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
};
assert.notEqual = function (act, exp, msg) {
var test = new Assertion(act, msg, assert.notEqual, true);
test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
};
assert.strictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
};
assert.notStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
};
assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
};
assert.notDeepEqual = function (act, exp, msg) {
new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
};
assert.isAbove = function (val, abv, msg) {
new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
};
assert.isAtLeast = function (val, atlst, msg) {
new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
};
assert.isBelow = function (val, blw, msg) {
new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
};
assert.isAtMost = function (val, atmst, msg) {
new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
};
assert.isTrue = function (val, msg) {
new Assertion(val, msg, assert.isTrue, true).is['true'];
};
assert.isNotTrue = function (val, msg) {
new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
};
assert.isFalse = function (val, msg) {
new Assertion(val, msg, assert.isFalse, true).is['false'];
};
assert.isNotFalse = function (val, msg) {
new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
};
assert.isNull = function (val, msg) {
new Assertion(val, msg, assert.isNull, true).to.equal(null);
};
assert.isNotNull = function (val, msg) {
new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
};
assert.isNaN = function (val, msg) {
new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
};
assert.isNotNaN = function (val, msg) {
new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
};
assert.exists = function (val, msg) {
new Assertion(val, msg, assert.exists, true).to.exist;
};
assert.notExists = function (val, msg) {
new Assertion(val, msg, assert.notExists, true).to.not.exist;
};
assert.isUndefined = function (val, msg) {
new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
};
assert.isDefined = function (val, msg) {
new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
};
assert.isFunction = function (val, msg) {
new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
};
assert.isNotFunction = function (val, msg) {
new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
};
assert.isObject = function (val, msg) {
new Assertion(val, msg, assert.isObject, true).to.be.a('object');
};
assert.isNotObject = function (val, msg) {
new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
};
assert.isArray = function (val, msg) {
new Assertion(val, msg, assert.isArray, true).to.be.an('array');
};
assert.isNotArray = function (val, msg) {
new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
};
assert.isString = function (val, msg) {
new Assertion(val, msg, assert.isString, true).to.be.a('string');
};
assert.isNotString = function (val, msg) {
new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
};
assert.isNumber = function (val, msg) {
new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
};
assert.isNotNumber = function (val, msg) {
new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
};
assert.isFinite = function (val, msg) {
new Assertion(val, msg, assert.isFinite, true).to.be.finite;
};
assert.isBoolean = function (val, msg) {
new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
};
assert.isNotBoolean = function (val, msg) {
new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
};
assert.typeOf = function (val, type, msg) {
new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
};
assert.notTypeOf = function (val, type, msg) {
new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
};
assert.instanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
};
assert.notInstanceOf = function (val, type, msg) {
new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
};
assert.include = function (exp, inc, msg) {
new Assertion(exp, msg, assert.include, true).include(inc);
};
assert.notInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
};
assert.deepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
};
assert.notDeepInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
};
assert.nestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
};
assert.notNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
};
assert.deepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
};
assert.notDeepNestedInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
};
assert.ownInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
};
assert.notOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
};
assert.deepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
};
assert.notDeepOwnInclude = function (exp, inc, msg) {
new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
};
assert.match = function (exp, re, msg) {
new Assertion(exp, msg, assert.match, true).to.match(re);
};
assert.notMatch = function (exp, re, msg) {
new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
};
assert.property = function (obj, prop, msg) {
new Assertion(obj, msg, assert.property, true).to.have.property(prop);
};
assert.notProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
};
assert.propertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
};
assert.notPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
};
assert.deepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
};
assert.notDeepPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
};
assert.ownProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
};
assert.notOwnProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
};
assert.ownPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
};
assert.notOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
};
assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
};
assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
};
assert.nestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
};
assert.notNestedProperty = function (obj, prop, msg) {
new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
};
assert.nestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
};
assert.notNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
};
assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
};
assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
};
assert.lengthOf = function (exp, len, msg) {
new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
};
assert.hasAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
};
assert.hasAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
};
assert.containsAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
};
assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
};
assert.doesNotHaveAllKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
};
assert.hasAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
};
assert.hasAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
};
assert.containsAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
};
assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
};
assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
};
assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
return flag(assertErr, 'object');
};
assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
if ('string' === typeof errorLike || errorLike instanceof RegExp) {
errMsgMatcher = errorLike;
errorLike = null;
}
new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
};
assert.operator = function (val, operator, val2, msg) {
var ok;
switch (operator) {
case '==':
ok = val == val2;
break;
case '===':
ok = val === val2;
break;
case '>':
ok = val > val2;
break;
case '>=':
ok = val >= val2;
break;
case '<':
ok = val < val2;
break;
case '<=':
ok = val <= val2;
break;
case '!=':
ok = val != val2;
break;
case '!==':
ok = val !== val2;
break;
default:
msg = msg ? msg + ': ' : msg;
throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
}
var test = new Assertion(ok, msg, assert.operator, true);
test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
};
assert.closeTo = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
};
assert.approximately = function (act, exp, delta, msg) {
new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
};
assert.sameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
};
assert.notSameMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
};
assert.sameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
};
assert.notSameDeepMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
};
assert.sameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
};
assert.notSameOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
};
assert.sameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
};
assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
};
assert.includeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
};
assert.notIncludeMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
};
assert.includeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
};
assert.notIncludeDeepMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
};
assert.includeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
};
assert.notIncludeOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
};
assert.includeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
};
assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
};
assert.oneOf = function (inList, list, msg) {
new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
};
assert.changes = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
};
assert.changesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
};
assert.doesNotChange = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
};
assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
};
assert.increases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
};
assert.increasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
};
assert.doesNotIncrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
};
assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
};
assert.decreases = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
};
assert.decreasesBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
};
assert.doesNotDecrease = function (fn, obj, prop, msg) {
if (arguments.length === 3 && typeof obj === 'function') {
msg = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
};
assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
};
assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
if (arguments.length === 4 && typeof obj === 'function') {
var tmpMsg = delta;
delta = prop;
msg = tmpMsg;
} else if (arguments.length === 3) {
delta = prop;
prop = null;
}
new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
};
assert.ifError = function (val) {
if (val) {
throw (val);
}
};
assert.isExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
};
assert.isNotExtensible = function (obj, msg) {
new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
};
assert.isSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
};
assert.isNotSealed = function (obj, msg) {
new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
};
assert.isFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
};
assert.isNotFrozen = function (obj, msg) {
new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
};
assert.isEmpty = function (val, msg) {
new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
};
assert.isNotEmpty = function (val, msg) {
new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
};
(function alias(name, as) {
assert[as] = assert[name];
return alias;
})('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};
return module.exports;
},
"node_modules/pathval/index.js": function (require, module, exports) {
'use strict';
function hasProperty(obj, name) {
if (typeof obj === 'undefined' || obj === null) {
return false;
}
return (name in Object(obj));
}
function parsePath(path) {
var str = path.replace(/([^\\])\[/g, '$1.[');
var parts = str.match(/(\\\.|[^.]+?)+/g);
return parts.map(function mapMatches(value) {
var regexp = /^\[(\d+)\]$/;
var mArr = regexp.exec(value);
var parsed = null;
if (mArr) {
parsed = {
i: parseFloat(mArr[1])
};
} else {
parsed = {
p: value.replace(/\\([.\[\]])/g, '$1')
};
}
return parsed;
});
}
function internalGetPathValue(obj, parsed, pathDepth) {
var temporaryValue = obj;
var res = null;
pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);
for (var i = 0; i < pathDepth; i++) {
var part = parsed[i];
if (temporaryValue) {
if (typeof part.p === 'undefined') {
temporaryValue = temporaryValue[part.i];
} else {
temporaryValue = temporaryValue[part.p];
}
if (i === (pathDepth - 1)) {
res = temporaryValue;
}
}
}
return res;
}
function internalSetPathValue(obj, val, parsed) {
var tempObj = obj;
var pathDepth = parsed.length;
var part = null;
for (var i = 0; i < pathDepth; i++) {
var propName = null;
var propVal = null;
part = parsed[i];
if (i === (pathDepth - 1)) {
propName = typeof part.p === 'undefined' ? part.i : part.p;
tempObj[propName] = val;
} else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
tempObj = tempObj[part.p];
} else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
tempObj = tempObj[part.i];
} else {
var next = parsed[i + 1];
propName = typeof part.p === 'undefined' ? part.i : part.p;
propVal = typeof next.p === 'undefined' ? [] : {};
tempObj[propName] = propVal;
tempObj = tempObj[propName];
}
}
}
function getPathInfo(obj, path) {
var parsed = parsePath(path);
var last = parsed[parsed.length - 1];
var info = {
parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
name: last.p || last.i,
value: internalGetPathValue(obj, parsed)
};
info.exists = hasProperty(info.parent, info.name);
return info;
}
function getPathValue(obj, path) {
var info = getPathInfo(obj, path);
return info.value;
}
function setPathValue(obj, path, val) {
var parsed = parsePath(path);
internalSetPathValue(obj, val, parsed);
return obj;
}
module.exports = {
hasProperty: hasProperty,
getPathInfo: getPathInfo,
getPathValue: getPathValue,
setPathValue: setPathValue
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/test.js": function (require, module, exports) {
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
module.exports = function test(obj, args) {
var negate = flag(obj, 'negate'), expr = args[0];
return negate ? !expr : expr;
};
return module.exports;
},
"node_modules/type-detect/index.js": function (require, module, exports) {
'use strict';
var promiseExists = typeof Promise === 'function';
var globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self;
var isDom = ('location' in globalObject) && ('document' in globalObject);
var symbolExists = typeof Symbol !== 'undefined';
var mapExists = typeof Map !== 'undefined';
var setExists = typeof Set !== 'undefined';
var weakMapExists = typeof WeakMap !== 'undefined';
var weakSetExists = typeof WeakSet !== 'undefined';
var dataViewExists = typeof DataView !== 'undefined';
var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(('')[Symbol.iterator]());
var toStringLeftSliceLength = 8;
var toStringRightSliceLength = -1;
module.exports = function typeDetect(obj) {
var typeofObj = typeof obj;
if (typeofObj !== 'object') {
return typeofObj;
}
if (obj === null) {
return 'null';
}
if (obj === globalObject) {
return 'global';
}
if (Array.isArray(obj) && (symbolToStringTagExists === false || !((Symbol.toStringTag in obj)))) {
return 'Array';
}
if (isDom) {
if (obj === globalObject.location) {
return 'Location';
}
if (obj === globalObject.document) {
return 'Document';
}
if (obj === (globalObject.navigator || ({})).mimeTypes) {
return 'MimeTypeArray';
}
if (obj === (globalObject.navigator || ({})).plugins) {
return 'PluginArray';
}
if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
return 'HTMLQuoteElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TD') {
return 'HTMLTableDataCellElement';
}
if (obj instanceof HTMLElement && obj.tagName === 'TH') {
return 'HTMLTableHeaderCellElement';
}
}
var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
if (typeof stringTag === 'string') {
return stringTag;
}
var objPrototype = Object.getPrototypeOf(obj);
if (objPrototype === RegExp.prototype) {
return 'RegExp';
}
if (objPrototype === Date.prototype) {
return 'Date';
}
if (promiseExists && objPrototype === Promise.prototype) {
return 'Promise';
}
if (setExists && objPrototype === Set.prototype) {
return 'Set';
}
if (mapExists && objPrototype === Map.prototype) {
return 'Map';
}
if (weakSetExists && objPrototype === WeakSet.prototype) {
return 'WeakSet';
}
if (weakMapExists && objPrototype === WeakMap.prototype) {
return 'WeakMap';
}
if (dataViewExists && objPrototype === DataView.prototype) {
return 'DataView';
}
if (mapExists && objPrototype === mapIteratorPrototype) {
return 'Map Iterator';
}
if (setExists && objPrototype === setIteratorPrototype) {
return 'Set Iterator';
}
if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
return 'Array Iterator';
}
if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
return 'String Iterator';
}
if (objPrototype === null) {
return 'Object';
}
return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
};
module.exports.typeDetect = module.exports;
return module.exports;
},
"node_modules/chai/lib/chai/utils/expectTypes.js": function (require, module, exports) {
var AssertionError = require("node_modules/assertion-error/index.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var type = require("node_modules/type-detect/index.js");
module.exports = function expectTypes(obj, types) {
var flagMsg = flag(obj, 'message');
var ssfi = flag(obj, 'ssfi');
flagMsg = flagMsg ? flagMsg + ': ' : '';
obj = flag(obj, 'object');
types = types.map(function (t) {
return t.toLowerCase();
});
types.sort();
var str = types.map(function (t, index) {
var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
return or + art + ' ' + t;
}).join(', ');
var objType = type(obj).toLowerCase();
if (!types.some(function (expected) {
return objType === expected;
})) {
throw new AssertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getMessage.js": function (require, module, exports) {
var flag = require("node_modules/chai/lib/chai/utils/flag.js"), getActual = require("node_modules/chai/lib/chai/utils/getActual.js"), inspect = require("node_modules/chai/lib/chai/utils/inspect.js"), objDisplay = require("node_modules/chai/lib/chai/utils/objDisplay.js");
module.exports = function getMessage(obj, args) {
var negate = flag(obj, 'negate'), val = flag(obj, 'object'), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, 'message');
if (typeof msg === "function") msg = msg();
msg = msg || '';
msg = msg.replace(/#\{this\}/g, function () {
return objDisplay(val);
}).replace(/#\{act\}/g, function () {
return objDisplay(actual);
}).replace(/#\{exp\}/g, function () {
return objDisplay(expected);
});
return flagMsg ? flagMsg + ': ' + msg : msg;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getActual.js": function (require, module, exports) {
module.exports = function getActual(obj, args) {
return args.length > 4 ? args[4] : obj._obj;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/inspect.js": function (require, module, exports) {
var getName = require("node_modules/get-func-name/index.js");
var getProperties = require("node_modules/chai/lib/chai/utils/getProperties.js");
var getEnumerableProperties = require("node_modules/chai/lib/chai/utils/getEnumerableProperties.js");
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = inspect;
function inspect(obj, showHidden, depth, colors) {
var ctx = {
showHidden: showHidden,
seen: [],
stylize: function (str) {
return str;
}
};
return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}
var isDOMElement = function (object) {
if (typeof HTMLElement === 'object') {
return object instanceof HTMLElement;
} else {
return object && typeof object === 'object' && ('nodeType' in object) && object.nodeType === 1 && typeof object.nodeName === 'string';
}
};
function formatValue(ctx, value, recurseTimes) {
if (value && typeof value.inspect === 'function' && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (typeof ret !== 'string') {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
if (isDOMElement(value)) {
if (('outerHTML' in value)) {
return value.outerHTML;
} else {
try {
if (document.xmlVersion) {
var xmlSerializer = new XMLSerializer();
return xmlSerializer.serializeToString(value);
} else {
var ns = "http://www.w3.org/1999/xhtml";
var container = document.createElementNS(ns, '_');
container.appendChild(value.cloneNode(false));
var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');
container.innerHTML = '';
return html;
}
} catch (err) {}
}
}
var visibleKeys = getEnumerableProperties(value);
var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
var name, nameSuffix;
if (keys.length === 0 || (isError(value) && ((keys.length === 1 && keys[0] === 'stack') || (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')))) {
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
return ctx.stylize('[Function' + nameSuffix + ']', 'special');
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
}
if (isError(value)) {
return formatError(value);
}
}
var base = '', array = false, typedArray = false, braces = ['{', '}'];
if (isTypedArray(value)) {
typedArray = true;
braces = ['[', ']'];
}
if (isArray(value)) {
array = true;
braces = ['[', ']'];
}
if (typeof value === 'function') {
name = getName(value);
nameSuffix = name ? ': ' + name : '';
base = ' [Function' + nameSuffix + ']';
}
if (isRegExp(value)) {
base = ' ' + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = ' ' + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
return formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
} else {
return ctx.stylize('[Object]', 'special');
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else if (typedArray) {
return formatTypedArray(value);
} else {
output = keys.map(function (key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
switch (typeof value) {
case 'undefined':
return ctx.stylize('undefined', 'undefined');
case 'string':
var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
return ctx.stylize(simple, 'string');
case 'number':
if (value === 0 && (1 / value) === -Infinity) {
return ctx.stylize('-0', 'number');
}
return ctx.stylize('' + value, 'number');
case 'boolean':
return ctx.stylize('' + value, 'boolean');
case 'symbol':
return ctx.stylize(value.toString(), 'symbol');
}
if (value === null) {
return ctx.stylize('null', 'null');
}
}
function formatError(value) {
return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (Object.prototype.hasOwnProperty.call(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push('');
}
}
keys.forEach(function (key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatTypedArray(value) {
var str = '[ ';
for (var i = 0; i < value.length; ++i) {
if (str.length >= config.truncateThreshold - 7) {
str += '...';
break;
}
str += value[i] + ', ';
}
str += ' ]';
if (str.indexOf(',  ]') !== -1) {
str = str.replace(',  ]', ' ]');
}
return str;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name;
var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
var str;
if (propDescriptor) {
if (propDescriptor.get) {
if (propDescriptor.set) {
str = ctx.stylize('[Getter/Setter]', 'special');
} else {
str = ctx.stylize('[Getter]', 'special');
}
} else {
if (propDescriptor.set) {
str = ctx.stylize('[Setter]', 'special');
}
}
}
if (visibleKeys.indexOf(key) < 0) {
name = '[' + key + ']';
}
if (!str) {
if (ctx.seen.indexOf(value[key]) < 0) {
if (recurseTimes === null) {
str = formatValue(ctx, value[key], null);
} else {
str = formatValue(ctx, value[key], recurseTimes - 1);
}
if (str.indexOf('\n') > -1) {
if (array) {
str = str.split('\n').map(function (line) {
return '  ' + line;
}).join('\n').substr(2);
} else {
str = '\n' + str.split('\n').map(function (line) {
return '   ' + line;
}).join('\n');
}
}
} else {
str = ctx.stylize('[Circular]', 'special');
}
}
if (typeof name === 'undefined') {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify('' + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, 'name');
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, 'string');
}
}
return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function (prev, cur) {
numLinesEst++;
if (cur.indexOf('\n') >= 0) numLinesEst++;
return prev + cur.length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
}
return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
function isTypedArray(ar) {
return (typeof ar === 'object' && (/\w+Array]$/).test(objectToString(ar)));
}
function isArray(ar) {
return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}
function isRegExp(re) {
return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}
function isDate(d) {
return typeof d === 'object' && objectToString(d) === '[object Date]';
}
function isError(e) {
return typeof e === 'object' && objectToString(e) === '[object Error]';
}
function objectToString(o) {
return Object.prototype.toString.call(o);
}
return module.exports;
},
"node_modules/chai/lib/chai/utils/objDisplay.js": function (require, module, exports) {
var inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function objDisplay(obj) {
var str = inspect(obj), type = Object.prototype.toString.call(obj);
if (config.truncateThreshold && str.length >= config.truncateThreshold) {
if (type === '[object Function]') {
return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';
} else if (type === '[object Array]') {
return '[ Array(' + obj.length + ') ]';
} else if (type === '[object Object]') {
var keys = Object.keys(obj), kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');
return '{ Object (' + kstr + ') }';
} else {
return str;
}
} else {
return str;
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/flag.js": function (require, module, exports) {
module.exports = function flag(obj, key, value) {
var flags = obj.__flags || (obj.__flags = Object.create(null));
if (arguments.length === 3) {
flags[key] = value;
} else {
return flags[key];
}
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/transferFlags.js": function (require, module, exports) {
module.exports = function transferFlags(assertion, object, includeAll) {
var flags = assertion.__flags || (assertion.__flags = Object.create(null));
if (!object.__flags) {
object.__flags = Object.create(null);
}
includeAll = arguments.length === 3 ? includeAll : true;
for (var flag in flags) {
if (includeAll || (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
object.__flags[flag] = flags[flag];
}
}
};
return module.exports;
},
"node_modules/deep-eql/index.js": function (require, module, exports) {
'use strict';
var type = require("node_modules/type-detect/index.js");
function FakeMap() {
this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}
FakeMap.prototype = {
get: function getMap(key) {
return key[this._key];
},
set: function setMap(key, value) {
if (!Object.isFrozen(key)) {
Object.defineProperty(key, this._key, {
value: value,
configurable: true
});
}
}
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return null;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
var result = leftHandMap.get(rightHandOperand);
if (typeof result === 'boolean') {
return result;
}
}
return null;
}
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return;
}
var leftHandMap = memoizeMap.get(leftHandOperand);
if (leftHandMap) {
leftHandMap.set(rightHandOperand, result);
} else {
leftHandMap = new MemoizeMap();
leftHandMap.set(rightHandOperand, result);
memoizeMap.set(leftHandOperand, leftHandMap);
}
}
module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;
function deepEqual(leftHandOperand, rightHandOperand, options) {
if (options && options.comparator) {
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
function simpleEqual(leftHandOperand, rightHandOperand) {
if (leftHandOperand === rightHandOperand) {
return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
}
if (leftHandOperand !== leftHandOperand && rightHandOperand !== rightHandOperand) {
return true;
}
if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
return false;
}
return null;
}
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
options = options || ({});
options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
var comparator = options && options.comparator;
var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
if (memoizeResultLeft !== null) {
return memoizeResultLeft;
}
var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
if (memoizeResultRight !== null) {
return memoizeResultRight;
}
if (comparator) {
var comparatorResult = comparator(leftHandOperand, rightHandOperand);
if (comparatorResult === false || comparatorResult === true) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
return comparatorResult;
}
var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
if (simpleResult !== null) {
return simpleResult;
}
}
var leftHandType = type(leftHandOperand);
if (leftHandType !== type(rightHandOperand)) {
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
return false;
}
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
return result;
}
function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
switch (leftHandType) {
case 'String':
case 'Number':
case 'Boolean':
case 'Date':
return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
case 'Promise':
case 'Symbol':
case 'function':
case 'WeakMap':
case 'WeakSet':
case 'Error':
return leftHandOperand === rightHandOperand;
case 'Arguments':
case 'Int8Array':
case 'Uint8Array':
case 'Uint8ClampedArray':
case 'Int16Array':
case 'Uint16Array':
case 'Int32Array':
case 'Uint32Array':
case 'Float32Array':
case 'Float64Array':
case 'Array':
return iterableEqual(leftHandOperand, rightHandOperand, options);
case 'RegExp':
return regexpEqual(leftHandOperand, rightHandOperand);
case 'Generator':
return generatorEqual(leftHandOperand, rightHandOperand, options);
case 'DataView':
return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
case 'ArrayBuffer':
return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
case 'Set':
return entriesEqual(leftHandOperand, rightHandOperand, options);
case 'Map':
return entriesEqual(leftHandOperand, rightHandOperand, options);
default:
return objectEqual(leftHandOperand, rightHandOperand, options);
}
}
function regexpEqual(leftHandOperand, rightHandOperand) {
return leftHandOperand.toString() === rightHandOperand.toString();
}
function entriesEqual(leftHandOperand, rightHandOperand, options) {
if (leftHandOperand.size !== rightHandOperand.size) {
return false;
}
if (leftHandOperand.size === 0) {
return true;
}
var leftHandItems = [];
var rightHandItems = [];
leftHandOperand.forEach(function gatherEntries(key, value) {
leftHandItems.push([key, value]);
});
rightHandOperand.forEach(function gatherEntries(key, value) {
rightHandItems.push([key, value]);
});
return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
function iterableEqual(leftHandOperand, rightHandOperand, options) {
var length = leftHandOperand.length;
if (length !== rightHandOperand.length) {
return false;
}
if (length === 0) {
return true;
}
var index = -1;
while (++index < length) {
if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
return false;
}
}
return true;
}
function generatorEqual(leftHandOperand, rightHandOperand, options) {
return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
function hasIteratorFunction(target) {
return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
function getIteratorEntries(target) {
if (hasIteratorFunction(target)) {
try {
return getGeneratorEntries(target[Symbol.iterator]());
} catch (iteratorError) {
return [];
}
}
return [];
}
function getGeneratorEntries(generator) {
var generatorResult = generator.next();
var accumulator = [generatorResult.value];
while (generatorResult.done === false) {
generatorResult = generator.next();
accumulator.push(generatorResult.value);
}
return accumulator;
}
function getEnumerableKeys(target) {
var keys = [];
for (var key in target) {
keys.push(key);
}
return keys;
}
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
var length = keys.length;
if (length === 0) {
return true;
}
for (var i = 0; i < length; i += 1) {
if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
return false;
}
}
return true;
}
function objectEqual(leftHandOperand, rightHandOperand, options) {
var leftHandKeys = getEnumerableKeys(leftHandOperand);
var rightHandKeys = getEnumerableKeys(rightHandOperand);
if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
leftHandKeys.sort();
rightHandKeys.sort();
if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
return false;
}
return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
}
var leftHandEntries = getIteratorEntries(leftHandOperand);
var rightHandEntries = getIteratorEntries(rightHandOperand);
if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
leftHandEntries.sort();
rightHandEntries.sort();
return iterableEqual(leftHandEntries, rightHandEntries, options);
}
if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
return true;
}
return false;
}
function isPrimitive(value) {
return value === null || typeof value !== 'object';
}
return module.exports;
},
"node_modules/get-func-name/index.js": function (require, module, exports) {
'use strict';
var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
if (typeof aFunc !== 'function') {
return null;
}
var name = '';
if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
var match = toString.call(aFunc).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = aFunc.name;
}
return name;
}
module.exports = getFuncName;
return module.exports;
},
"node_modules/chai/lib/chai/utils/addProperty.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function addProperty(ctx, name, getter) {
getter = getter === undefined ? function () {} : getter;
Object.defineProperty(ctx, name, {
get: function propertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', propertyGetter);
}
var result = getter.call(this);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/addMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function addMethod(ctx, name, method) {
var methodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', methodWrapper);
}
var result = method.apply(this, arguments);
if (result !== undefined) return result;
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(methodWrapper, name, false);
ctx[name] = proxify(methodWrapper, name);
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteProperty.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteProperty(ctx, name, getter) {
var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function () {};
if (_get && 'function' === typeof _get.get) _super = _get.get;
Object.defineProperty(ctx, name, {
get: function overwritingPropertyGetter() {
if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingPropertyGetter);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = getter(_super).call(this);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteMethod(ctx, name, method) {
var _method = ctx[name], _super = function () {
throw new Error(name + ' is not a function');
};
if (_method && 'function' === typeof _method) _super = _method;
var overwritingMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', overwritingMethodWrapper);
}
var origLockSsfi = flag(this, 'lockSsfi');
flag(this, 'lockSsfi', true);
var result = method(_super).apply(this, arguments);
flag(this, 'lockSsfi', origLockSsfi);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(overwritingMethodWrapper, name, false);
ctx[name] = proxify(overwritingMethodWrapper, name);
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/addChainableMethod.js": function (require, module, exports) {
var addLengthGuard = require("node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = require("node_modules/chai/lib/chai.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var proxify = require("node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
var canSetPrototype = typeof Object.setPrototypeOf === 'function';
var testFn = function () {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
if (typeof propDesc !== 'object') return true;
return !propDesc.configurable;
});
var call = Function.prototype.call, apply = Function.prototype.apply;
module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
if (typeof chainingBehavior !== 'function') {
chainingBehavior = function () {};
}
var chainableBehavior = {
method: method,
chainingBehavior: chainingBehavior
};
if (!ctx.__methods) {
ctx.__methods = {};
}
ctx.__methods[name] = chainableBehavior;
Object.defineProperty(ctx, name, {
get: function chainableMethodGetter() {
chainableBehavior.chainingBehavior.call(this);
var chainableMethodWrapper = function () {
if (!flag(this, 'lockSsfi')) {
flag(this, 'ssfi', chainableMethodWrapper);
}
var result = chainableBehavior.method.apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
addLengthGuard(chainableMethodWrapper, name, true);
if (canSetPrototype) {
var prototype = Object.create(this);
prototype.call = call;
prototype.apply = apply;
Object.setPrototypeOf(chainableMethodWrapper, prototype);
} else {
var asserterNames = Object.getOwnPropertyNames(ctx);
asserterNames.forEach(function (asserterName) {
if (excludeNames.indexOf(asserterName) !== -1) {
return;
}
var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
Object.defineProperty(chainableMethodWrapper, asserterName, pd);
});
}
transferFlags(this, chainableMethodWrapper);
return proxify(chainableMethodWrapper);
},
configurable: true
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/overwriteChainableMethod.js": function (require, module, exports) {
var chai = require("node_modules/chai/lib/chai.js");
var transferFlags = require("node_modules/chai/lib/chai/utils/transferFlags.js");
module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
var chainableBehavior = ctx.__methods[name];
var _chainingBehavior = chainableBehavior.chainingBehavior;
chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
var result = chainingBehavior(_chainingBehavior).call(this);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
var _method = chainableBehavior.method;
chainableBehavior.method = function overwritingChainableMethodWrapper() {
var result = method(_method).apply(this, arguments);
if (result !== undefined) {
return result;
}
var newAssertion = new chai.Assertion();
transferFlags(this, newAssertion);
return newAssertion;
};
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/compareByInspect.js": function (require, module, exports) {
var inspect = require("node_modules/chai/lib/chai/utils/inspect.js");
module.exports = function compareByInspect(a, b) {
return inspect(a) < inspect(b) ? -1 : 1;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js": function (require, module, exports) {
module.exports = function getOwnEnumerablePropertySymbols(obj) {
if (typeof Object.getOwnPropertySymbols !== 'function') return [];
return Object.getOwnPropertySymbols(obj).filter(function (sym) {
return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
});
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js": function (require, module, exports) {
var getOwnEnumerablePropertySymbols = require("node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
module.exports = function getOwnEnumerableProperties(obj) {
return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};
return module.exports;
},
"node_modules/check-error/index.js": function (require, module, exports) {
'use strict';
function compatibleInstance(thrown, errorLike) {
return errorLike instanceof Error && thrown === errorLike;
}
function compatibleConstructor(thrown, errorLike) {
if (errorLike instanceof Error) {
return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
} else if (errorLike.prototype instanceof Error || errorLike === Error) {
return thrown.constructor === errorLike || thrown instanceof errorLike;
}
return false;
}
function compatibleMessage(thrown, errMatcher) {
var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
if (errMatcher instanceof RegExp) {
return errMatcher.test(comparisonString);
} else if (typeof errMatcher === 'string') {
return comparisonString.indexOf(errMatcher) !== -1;
}
return false;
}
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
var name = '';
if (typeof constructorFn.name === 'undefined') {
var match = String(constructorFn).match(functionNameMatch);
if (match) {
name = match[1];
}
} else {
name = constructorFn.name;
}
return name;
}
function getConstructorName(errorLike) {
var constructorName = errorLike;
if (errorLike instanceof Error) {
constructorName = getFunctionName(errorLike.constructor);
} else if (typeof errorLike === 'function') {
constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike());
}
return constructorName;
}
function getMessage(errorLike) {
var msg = '';
if (errorLike && errorLike.message) {
msg = errorLike.message;
} else if (typeof errorLike === 'string') {
msg = errorLike;
}
return msg;
}
module.exports = {
compatibleInstance: compatibleInstance,
compatibleConstructor: compatibleConstructor,
compatibleMessage: compatibleMessage,
getMessage: getMessage,
getConstructorName: getConstructorName
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/proxify.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
var flag = require("node_modules/chai/lib/chai/utils/flag.js");
var getProperties = require("node_modules/chai/lib/chai/utils/getProperties.js");
var isProxyEnabled = require("node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var builtins = ['__flags', '__methods', '_obj', 'assert'];
module.exports = function proxify(obj, nonChainableMethodName) {
if (!isProxyEnabled()) return obj;
return new Proxy(obj, {
get: function proxyGetter(target, property) {
if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
if (nonChainableMethodName) {
throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
}
var orderedProperties = getProperties(target).filter(function (property) {
return !Object.prototype.hasOwnProperty(property) && builtins.indexOf(property) === -1;
}).sort(function (a, b) {
return stringDistance(property, a) - stringDistance(property, b);
});
if (orderedProperties.length && stringDistance(orderedProperties[0], property) < 4) {
throw Error('Invalid Chai property: ' + property + '. Did you mean "' + orderedProperties[0] + '"?');
} else {
throw Error('Invalid Chai property: ' + property);
}
}
if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
flag(target, 'ssfi', proxyGetter);
}
return Reflect.get(target, property);
}
});
};
function stringDistance(strA, strB, memo) {
if (!memo) {
memo = [];
for (var i = 0; i <= strA.length; i++) {
memo[i] = [];
}
}
if (!memo[strA.length] || !memo[strA.length][strB.length]) {
if (strA.length === 0 || strB.length === 0) {
memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
} else {
memo[strA.length][strB.length] = Math.min(stringDistance(strA.slice(0, -1), strB, memo) + 1, stringDistance(strA, strB.slice(0, -1), memo) + 1, stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) + (strA.slice(-1) === strB.slice(-1) ? 0 : 1));
}
}
return memo[strA.length][strB.length];
}
return module.exports;
},
"node_modules/chai/lib/chai/utils/addLengthGuard.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
module.exports = function addLengthGuard(fn, assertionName, isChainable) {
if (!fnLengthDesc.configurable) return fn;
Object.defineProperty(fn, 'length', {
get: function () {
if (isChainable) {
throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
}
throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of "' + assertionName + '".');
}
});
return fn;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/isProxyEnabled.js": function (require, module, exports) {
var config = require("node_modules/chai/lib/chai/config.js");
module.exports = function isProxyEnabled() {
return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/isNaN.js": function (require, module, exports) {
function isNaN(value) {
return value !== value;
}
module.exports = Number.isNaN || isNaN;
return module.exports;
},
"node_modules/chai/lib/chai/utils/getProperties.js": function (require, module, exports) {
module.exports = function getProperties(object) {
var result = Object.getOwnPropertyNames(object);
function addProperty(property) {
if (result.indexOf(property) === -1) {
result.push(property);
}
}
var proto = Object.getPrototypeOf(object);
while (proto !== null) {
Object.getOwnPropertyNames(proto).forEach(addProperty);
proto = Object.getPrototypeOf(proto);
}
return result;
};
return module.exports;
},
"node_modules/chai/lib/chai/utils/getEnumerableProperties.js": function (require, module, exports) {
module.exports = function getEnumerableProperties(object) {
var result = [];
for (var name in object) {
result.push(name);
}
return result;
};
return module.exports;
}
}, this);
return require("entry.js");
}).call(this, null, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : this);


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuY29mZmVlIiwiLi4vcGFja2FnZS5qc29uIiwic2ltdWxhdGUuY29mZmVlIiwibm9kZV9tb2R1bGVzL2NoYWkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS1zdHlsZS9zb3VyY2VzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkuanMiLCJub2RlX21vZHVsZXMvYXNzZXJ0aW9uLWVycm9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9jb25maWcuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9hc3NlcnRpb24uanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9jb3JlL2Fzc2VydGlvbnMuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2UvZXhwZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvaW50ZXJmYWNlL3Nob3VsZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL2ludGVyZmFjZS9hc3NlcnQuanMiLCJub2RlX21vZHVsZXMvcGF0aHZhbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Rlc3QuanMiLCJub2RlX21vZHVsZXMvdHlwZS1kZXRlY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9leHBlY3RUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE1lc3NhZ2UuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRBY3R1YWwuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9pbnNwZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb2JqRGlzcGxheS5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2ZsYWcuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy90cmFuc2ZlckZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2RlZXAtZXFsL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2dldC1mdW5jLW5hbWUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2FkZE1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL292ZXJ3cml0ZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvYWRkQ2hhaW5hYmxlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvb3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvY29tcGFyZUJ5SW5zcGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jaGVjay1lcnJvci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Byb3hpZnkuanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRMZW5ndGhHdWFyZC5qcyIsIm5vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2lzUHJveHlFbmFibGVkLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaXNOYU4uanMiLCJub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRQcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMuanMiXSwibmFtZXMiOlsiY2hhaSIsImRpbWVuc2lvbnMiLCJEb20iLCJET00iLCJ3aW5kb3ciLCJxdWlja2RvbSIsIm1vY2hhIiwic2V0dXAiLCJzbG93IiwidGltZW91dCIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJiYWlsIiwidXNlIiwiY29uZmlnIiwidHJ1bmNhdGVUaHJlc2hvbGQiLCJzYW5kYm94IiwicmVzdGFydFNhbmRib3giLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNoZWNrQ2hpbGRTdHJ1Y3R1cmUiLCJtYWluIiwiY2hpbGRyZW4iLCJjaGlsZCIsImxlbmd0aCIsInRvIiwiZXF1YWwiLCJpbmRleCIsImV4cGVjdCIsImVsIiwicGFyZW50Tm9kZSIsInBhcmVudCIsInN1aXRlIiwidGVzdCIsInBhY2thZ2VWZXJzaW9uIiwidmVyc2lvbiIsImRpdiIsImJlIiwiaW5zdGFuY2VPZiIsIkhUTUxEaXZFbGVtZW50IiwidW5kZWZpbmVkIiwiaSIsImEiLCJjb25zdHJ1Y3RvciIsImxpbmsiLCJhbmNob3IiLCJ0ZXh0Iiwic3BhbiIsImg0IiwiaGVhZGVyIiwiZm9vdGVyIiwic2VjdGlvbiIsImJ1dHRvbiIsImlucHV0IiwidHlwZXMiLCJ0eXBlIiwibmFtZSIsIm5vdCIsImNvbnRhaW4iLCJBIiwiY2xhc3MiLCJwcm9wcyIsIkIiLCJjbGFzc05hbWUiLCJhdHRycyIsIkMiLCJ2YWx1ZSIsIkQiLCJjaGVja2VkIiwiRSIsIm9wdGlvbiIsInNlbGVjdGVkIiwiRiIsImhyZWYiLCJHIiwidXJsIiwiSCIsIkkiLCJpbWciLCJzcmMiLCJKIiwicmVsYXRlZEluc3RhbmNlIiwib2JqIiwiYWJjIiwiZGVmIiwiZ2V0QXR0cmlidXRlIiwiZGF0YXNldCIsIm5vZGVUeXBlIiwidGV4dENvbnRlbnQiLCJyZWxhdGVkIiwib3B0aW9ucyIsImNoaWxkTm9kZXMiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kVG8iLCJyYXciLCJoYXZlIiwiZGl2UmF3IiwiX3F1aWNrRWxlbWVudCIsInJhd0IiLCJyYXdDIiwicmF3QSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkb2MiLCJwYXJlbnRzIiwid2luIiwidHJ1ZSIsImFwcGVuZCIsImh0bWwiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImxhbWVvIiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kU2l6ZSIsInJlZ0RpdiIsInN2Z0dvb2QiLCJzdmdQb2x5QmFkIiwic3ZnUG9seUdvb2QiLCJzdmdEaXYiLCJzdmdCYWQiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJTVkdTVkdFbGVtZW50IiwiU1ZHUG9seWxpbmVFbGVtZW50IiwiaHRtbFN0cmluZyIsImJhdGNoIiwiZWxlbWVudHMiLCJpbmNsdWRlIiwiY3NzIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlIiwicmVtb3ZlTGlzdGVuZXIiLCJvZmYiLCJkaXZBIiwiZGl2QiIsIm1ldGhvZHMiLCJzY3JvbGxUb3AiLCJnZXQiLCJ3ZWlnaHQiLCJzZXQiLCJiaWdJbmRleCIsImVtaXRDb3VudEIiLCJvbiIsImV2ZW50IiwiZW1pdENvdW50QSIsImVtaXRFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbWl0IiwiYXJnIiwiYXJndW1lbnRzIiwiZW1pdFByaXZhdGUiLCJlbWl0Q291bnRDIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJmYWxzZSIsImUiLCJjdXN0b20iLCJlbWl0Q291bnREIiwiZXZlbnRDQiIsImF0dGFjaExpc3RlbmVycyIsImVtaXRDb3VudCIsIm9uY2UiLCJlbWl0Q29udGV4dCIsImxpc3RlbmVycyIsImV2ZW50cyIsInBhcmVudEEiLCJwYXJlbnRCIiwibWFzdGVyUGFyZW50QiIsInBhcmVudEMiLCJpbnZva2VDb3VudCIsImRldGFjaCIsImFub3RoZXJPYmoiLCJyYXRlIiwiYXBwbHlXaWR0aCIsImV4cGVjdGVkSW5zdGFuY2UiLCJpbnN0YW5jZSIsImZvbnRTaXplIiwic29tZSIsInMiLCJ6SW5kZXgiLCJmaWVsZCIsInRoZUluZGV4IiwiJGhhcHB5IiwiJHJlbGF4ZWQiLCJzdHlsZUFmdGVySW5zZXJ0IiwicG9zaXRpb24iLCJwcm9wIiwidGFyZ2V0IiwiY29tcHV0ZWQiLCJpbmxpbmUiLCJzYWZlIiwic3R5bGVTYWZlIiwiZXFsIiwic3RhdGUiLCJoZWlnaHRBIiwiaGVpZ2h0QiIsInRocm93Iiwic3R5bGVQYXJzZWQiLCJwYXJzZUZsb2F0IiwiY291bnQiLCJvcGFjaXR5IiwiJGZ1bm55IiwicmVjYWxjU3R5bGUiLCJ3cmFwcGVyQ291bnQiLCJ3cmFwcGVyIiwicmVjYWxjT25SZXNpemUiLCJpbm5lckhUTUwiLCJmb3JjZVN0eWxlIiwiaGVhZCIsImF0dHIiLCJyZW1vdmUiLCJoaWRlIiwic2hvdyIsInN2ZyIsImIiLCJjIiwicmVzZXRTdGF0ZSIsInRvZ2dsZVN0YXRlIiwiJGJhc2UiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0Iiwic3RhdGVUcmlnZ2VycyIsImhhcHB5IiwicmVsYXhlZCIsIiRob3ZlciIsIiRmb2N1cyIsImF0dGFjaFN0YXRlRXZlbnRzIiwiX2F0dGFjaFN0YXRlRXZlbnRzIiwiTWFpbiIsInBhc3NTdGF0ZVRvQ2hpbGRyZW4iLCJyZWN0QSIsInJlY3QiLCJyZWN0QiIsIkNsaWVudFJlY3QiLCJyZWN0QyIsIm9yaWVudGF0aW9uIiwiYXNwZWN0UmF0aW8iLCJkaXZSZWciLCJwYXJlbnRPcGFjaXR5R2V0dGVyIiwiZGl2QyIsImluc2VydEJlZm9yZSIsImRldGFjaGVkUGFyZW50IiwidmlzaWJpbGl0eSIsImNoaWxkQSIsImNoaWxkQiIsInBpcGVTdGF0ZSIsInVucGFzc2FibGVTdGF0ZXMiLCJzcGFuQSIsInNwYW5CIiwic3ViU3BhbiIsInN1YlBhcmVudEEiLCJzdWJDaGlsZEEiLCJzdWJQYXJlbnRCIiwic3ViQ2hpbGRCIiwiZm9yY2UiLCJkaXZCXyIsImRpdkFfIiwiaXNOYU4iLCJjb2xvciIsInJlc3VsdHMiLCJwdXNoIiwiZGVlcCIsIiRzb21ldGhpbmdFbHNlIiwiZ2V0U3R5bGVzIiwidXBkYXRlU3RhdGVTdHlsZXMiLCJlbDEiLCJlbDIiLCJlbDMiLCJzdWl0ZVRlYXJkb3duIiwicmVmIiwiY29uZmlndXJhYmxlIiwicmVzdG9yZSIsInN1aXRlU2V0dXAiLCJza2lwIiwidGVhcmRvd24iLCJyZXN1bHRzMSIsImxldmVsIiwiQ1NTIiwiY2xlYXJSZWdpc3RlcmVkIiwic2ltdWxhdGUiLCJsaW5lSGVpZ2h0Iiwic2ltdWxhdGVQYXJlbnQiLCJ0b3AiLCJtYXJnaW5Cb3R0b20iLCJmb250V2VpZ2h0IiwiZ2hpIiwibWFyZ2luUmlnaHQiLCJjb21tZW50IiwiZWxlbWVudENoaWxkcmVuIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVDb21tZW50IiwiZGl2JCIsInNsaWNlIiwiZG9jdW1lbnRFbGVtZW50IiwiZWxzIiwicGFyZW50TWF0Y2hpbmciLCJwYXJlbnRzVW50aWwiLCJuZXh0IiwibmV4dEFsbCIsIm5leHRFbCIsIm5leHRFbEFsbCIsInByZXYiLCJwcmV2QWxsIiwicHJldkVsIiwicHJldkVsQWxsIiwic2libGluZ3MiLCJyZXZlcnNlIiwiY29uY2F0IiwiZWxlbWVudFNpYmxpbmdzIiwiZGl2QkEiLCJkaXZCQiIsImZpcnN0Q2hpbGQiLCJsYXN0Q2hpbGQiLCJ0ZW1wbGF0ZSIsInNwYXduIiwiY2hpbGRBXzEiLCJjaGlsZEFfMiIsImNoaWxkQV8zIiwiY2hpbGRCXzEiLCJjaGlsZEJfMiIsImRpdkQiLCJzYW5kQm94IiwiY2hpbGRmIiwibmV3Q2hpbGQiLCJuZXdDaGlsZENoaWxkIiwiT2JqZWN0Iiwia2V5cyIsIm5ld1BhcmVudCIsImNoaWxkQyIsImNoaWxkRCIsImNoaWxkRSIsImNoaWxkRiIsImNoaWxkRyIsImluZGV4VHlwZSIsImluZGV4UmVmIiwicXVlcnkiLCJxdWVyeUFsbCIsImFsbEEiLCJhbGxCIiwiTWFpbkEiLCJNYWluQiIsInByZXBlbmQiLCJwcmVwZW5kVG8iLCJhZnRlciIsImluc2VydEFmdGVyIiwiYmVmb3JlIiwiZXhpc3QiLCJlbXB0eSIsIndyYXBBIiwid3JhcEIiLCJ3cmFwQyIsIndyYXAiLCJ1bndyYXAiLCJvcHRzIiwiY2xvbmUiLCJteVByb3AiLCJhbm90aGVyUHJvcCIsImxhc3RQcm9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic2V0UmVmIiwiYmF0Y2gxIiwiYmF0Y2gyIiwicmVzdWx0IiwicmV0dXJuIiwiYXJyIiwic3Bhd25BIiwic3Bhd25CIiwic2VjdGlvblRlbXBsYXRlIiwidG9UZW1wbGF0ZSIsInRlbXBsYXRlU3Bhd24iLCJzZWN0aW9uRWwiLCJ0ZW1wbGF0ZUNvcHlBIiwiZXh0ZW5kIiwidGVtcGxhdGVDb3B5QiIsInRlbXBsYXRlQ29weUMiLCJzcGF3bkMiLCJzcGF3blJhdyIsImNsb25lQSIsImNsb25lQiIsImNsb25lQyIsImZvbnRGYW1pbHkiLCJ0ZW1wbGF0ZUNvcHkiLCJzcGF3bmVkQSIsInNwYXduZWRCIiwic3Bhd25lZEMiLCJkZWZhdWx0cyIsImNvbXB1dGVycyIsImxhYmVsIiwidGhlU3BhbiIsImhlYWRlclRlbXBsYXRlIiwiaGVhZGVyVGVtcGxhdGVDbG9uZSIsImR5bmFtaWNIZWlnaHRTdHlsZSIsIm15SGVpZ2h0IiwicmVuZGVyZWQiLCJ0ZW1wbGF0ZU1haW4iLCJ0ZW1wbGF0ZUNvcHkyIiwiY2hpbGRBXzJfMSIsIkNISUxEYV8yIiwiQ2hpbGRCIiwiQ2hpbGRDIiwidGVtcGxhdGVBIiwidGVtcGxhdGVCIiwidGVtcGxhdGVDIiwidGVtcGxhdGVEIiwic3Bhd25EIiwidmFsdWVBIiwidmFsdWVCIiwiJGFjdGl2ZSIsInJlY2VpdmVkRGF0YSIsImRhdGEiLCJjb250ZXh0IiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImZvdXJ0aCIsImZpZnRoIiwic2l4dGgiLCJjaGlsZENoaWxkIiwiZCIsImYiLCJhcHBseURhdGEiLCJfaW5pdCIsIm5hbWUxIiwiZGl2RSIsImV4cGVjdGVkIiwic2l6ZSIsInRlbXBsYXRlMSIsInRlbXBsYXRlMiIsInBhc3NEYXRhVG9DaGlsZHJlbiIsImhpc3RvcnkiLCJpbnZva2VDb21wdXRlcnNPbmNlIiwiaXNUZW1wbGF0ZSIsImlzUXVpY2tFbCIsImlzRWwiLCJzdHJpbmdpZmllZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZWN0aW9uQ29weSIsInBhcnNlIiwiY2hhaW5SZXN1bHQiLCJ1cGRhdGVTdGF0ZVRleHRzIiwiY2IiLCJsb3N0T3B0cyIsInVwZGF0ZU9wdGlvbnMiLCJudWxsIiwiX3JlbW92ZUNoaWxkIiwiSFRNTEVsZW1lbnQiLCJwcm90b3R5cGUiLCJvbkV2ZW50IiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiVGV4dCIsIm5vbkVsZW1lbnRTdWZmaXgiLCJlbGVtZW50U3VmZml4IiwiY3JlYXRvciIsImoiLCJET01SZWN0Iiwib3JpZ0Rlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImN1cnJlbnQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRSZWFsIiwiZGltZW5zaW9uIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYWxsIiwib3ZlcndyaXRlIiwib3ZlcndyaXR0ZW4iLCJkZWZpbmVQcm9wZXJ0eSIsIm5ld1ZhbHVlIiwiY2hhaVN0eWxlIiwidXRpbHMiLCJBc3NlcnRpb24iLCJmbGFnIiwic2FtcGxlRGl2Iiwic2FtcGxlU3R5bGUiLCJzYW1wbGVJZnJhbWUiLCJhZGRNZXRob2QiLCJwcm9wZXJ0eSIsImVsZW1lbnQiLCJ0cmltIiwiaXNOb25Db2xvcnMiLCJwcm9wZXJ0eVZhbHVlIiwiYXNzZXJ0aW9uIiwiY29tcGFyZUNTU1ZhbHVlIiwiQm9vbGVhbiIsImVsZW1lbnRUYWciLCJ0YWdOYW1lIiwidGhyb3dNZXNzYWdlIiwidGhyb3dNZXNzYWdlTmVnYXRpdmUiLCJhc3NlcnQiLCJwcm9wZXJ0eUhpZmVuQ2FzZSIsIm1hdGNoIiwic2V0UHJvcGVydHkiLCJoYXNBdXRvVmFsdWUiLCJpbmNsdWRlcyIsInJlZyIsIlJlZ0V4cCIsImVzY2FwZVJlZ0V4cCIsIlN0cmluZyIsInVzZWQiLCJBc3NlcnRpb25FcnJvciIsInV0aWwiLCJmbiIsImluZGV4T2YiLCJjb3JlIiwic2hvdWxkIiwiZXhjbHVkZXMiLCJyZXMiLCJmb3JFYWNoIiwia2V5IiwiYXJncyIsImV4Y2x1ZGVQcm9wcyIsIm1lc3NhZ2UiLCJfcHJvcHMiLCJzc2YiLCJleGNsdWRlIiwic2hvd0RpZmYiLCJjYWxsZWUiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2siLCJjcmVhdGUiLCJ0b0pTT04iLCJwYXRodmFsIiwiZXhwZWN0VHlwZXMiLCJnZXRNZXNzYWdlIiwiZ2V0QWN0dWFsIiwiaW5zcGVjdCIsIm9iakRpc3BsYXkiLCJ0cmFuc2ZlckZsYWdzIiwiZ2V0UGF0aEluZm8iLCJoYXNQcm9wZXJ0eSIsImdldE5hbWUiLCJhZGRQcm9wZXJ0eSIsIm92ZXJ3cml0ZVByb3BlcnR5Iiwib3ZlcndyaXRlTWV0aG9kIiwiYWRkQ2hhaW5hYmxlTWV0aG9kIiwib3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kIiwiY29tcGFyZUJ5SW5zcGVjdCIsImdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyIsImNoZWNrRXJyb3IiLCJwcm94aWZ5IiwiYWRkTGVuZ3RoR3VhcmQiLCJpc1Byb3h5RW5hYmxlZCIsImluY2x1ZGVTdGFjayIsInVzZVByb3h5IiwicHJveHlFeGNsdWRlZEtleXMiLCJfY2hhaSIsIm1zZyIsInNzZmkiLCJsb2NrU3NmaSIsImNvbnNvbGUiLCJ3YXJuIiwiY2hhaW5pbmdCZWhhdmlvciIsImV4cHIiLCJuZWdhdGVNc2ciLCJfYWN0dWFsIiwib2siLCJhY3R1YWwiLCJ2YWwiLCJfIiwiY2hhaW4iLCJhcnRpY2xlIiwiY2hhckF0IiwiYW4iLCJvYmpUeXBlIiwiZmxhZ01zZyIsIm5lZ2F0ZSIsImlzRGVlcCIsImRlc2NyaXB0b3IiLCJpbmNsdWRlZCIsImhhcyIsImlzRXFsIiwiU2FtZVZhbHVlWmVybyIsIml0ZW0iLCJmaXJzdEVyciIsIm51bUVycnMiLCJwcm9wQXNzZXJ0aW9uIiwiZXJyIiwiY29tcGF0aWJsZUNvbnN0cnVjdG9yIiwiaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IiLCJpdGVtc0NvdW50IiwiY2hlY2tBcmd1bWVudHMiLCJfb2JqIiwiYXNzZXJ0RXF1YWwiLCJhc3NlcnRFcWwiLCJuIiwiZG9MZW5ndGgiLCJtc2dQcmVmaXgiLCJuVHlwZSIsInNob3VsZFRocm93IiwiZXJyb3JNZXNzYWdlIiwicHJpbnRPYmoiLCJsZW4iLCJhc3NlcnRBYm92ZSIsImFzc2VydExlYXN0IiwiYXNzZXJ0QmVsb3ciLCJhc3NlcnRNb3N0Iiwic3RhcnQiLCJmaW5pc2giLCJzdGFydFR5cGUiLCJmaW5pc2hUeXBlIiwicmFuZ2UiLCJ0b1VUQ1N0cmluZyIsImlzSW5zdGFuY2VPZiIsIlR5cGVFcnJvciIsImFzc2VydEluc3RhbmNlT2YiLCJpc05lc3RlZCIsImlzT3duIiwicGF0aEluZm8iLCJoYXNPd25Qcm9wZXJ0eSIsImV4aXN0cyIsImFzc2VydFByb3BlcnR5IiwiYXBwbHkiLCJhc3NlcnRPd25Qcm9wZXJ0eSIsImFjdHVhbERlc2NyaXB0b3IiLCJhc3NlcnRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJhc3NlcnRMZW5ndGgiLCJhc3NlcnRMZW5ndGhDaGFpbiIsInJlIiwiZXhlYyIsImFzc2VydE1hdGNoIiwic3RyIiwiaXMiLCJrZXlzVHlwZSIsImRlZXBTdHIiLCJtaXhlZEFyZ3NNc2ciLCJBcnJheSIsIm1hcCIsImFueSIsImFsbCIsImV4cGVjdGVkS2V5IiwiYWN0dWFsS2V5IiwiZXZlcnkiLCJsYXN0IiwicG9wIiwiam9pbiIsInNvcnQiLCJhc3NlcnRLZXlzIiwiZXJyb3JMaWtlIiwiZXJyTXNnTWF0Y2hlciIsImNhdWdodEVyciIsImV2ZXJ5QXJnSXNVbmRlZmluZWQiLCJldmVyeUFyZ0lzRGVmaW5lZCIsImVycm9yTGlrZUZhaWwiLCJlcnJNc2dNYXRjaGVyRmFpbCIsImVycm9yTGlrZVN0cmluZyIsImdldENvbnN0cnVjdG9yTmFtZSIsInRvU3RyaW5nIiwiaXNDb21wYXRpYmxlSW5zdGFuY2UiLCJjb21wYXRpYmxlSW5zdGFuY2UiLCJpc0NvbXBhdGlibGVDb25zdHJ1Y3RvciIsInBsYWNlaG9sZGVyIiwiaXNDb21wYXRpYmxlTWVzc2FnZSIsImNvbXBhdGlibGVNZXNzYWdlIiwiYXNzZXJ0VGhyb3dzIiwibWV0aG9kIiwiaXRzZWxmIiwicmVzcG9uZFRvIiwibWF0Y2hlciIsInNhdGlzZnkiLCJkZWx0YSIsIk1hdGgiLCJhYnMiLCJjbG9zZVRvIiwic3Vic2V0Iiwic3VwZXJzZXQiLCJjbXAiLCJjb250YWlucyIsIm9yZGVyZWQiLCJlbGVtIiwiaWR4IiwibWF0Y2hJZHgiLCJzcGxpY2UiLCJlbGVtMiIsInN1YmplY3QiLCJmYWlsTXNnIiwiZmFpbE5lZ2F0ZU1zZyIsImxlbmd0aENoZWNrIiwiaXNTdWJzZXRPZiIsImxpc3QiLCJvbmVPZiIsImluaXRpYWwiLCJmaW5hbCIsIm1zZ09iaiIsImFzc2VydENoYW5nZXMiLCJhc3NlcnRJbmNyZWFzZXMiLCJhc3NlcnREZWNyZWFzZXMiLCJiZWhhdmlvciIsInJlYWxEZWx0YSIsImV4cHJlc3Npb24iLCJhc3NlcnREZWx0YSIsImlzRXh0ZW5zaWJsZSIsImlzU2VhbGVkIiwiaXNGcm96ZW4iLCJpc0Zpbml0ZSIsImZhaWwiLCJvcGVyYXRvciIsIk51bWJlciIsIlN5bWJvbCIsInZhbHVlT2YiLCJzaG91bGRHZXR0ZXIiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJzaG91bGRTZXR0ZXIiLCJ2YWwxIiwidmFsMiIsIlRocm93IiwiZXJydCIsImVycnMiLCJsb2FkU2hvdWxkIiwiU2hvdWxkIiwiZXhwcmVzcyIsImVycm1zZyIsImlzT2siLCJpc05vdE9rIiwiYWN0IiwiZXhwIiwibm90RXF1YWwiLCJzdHJpY3RFcXVhbCIsIm5vdFN0cmljdEVxdWFsIiwiZGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcEVxdWFsIiwiaXNBYm92ZSIsImFidiIsImFib3ZlIiwiaXNBdExlYXN0IiwiYXRsc3QiLCJsZWFzdCIsImlzQmVsb3ciLCJibHciLCJiZWxvdyIsImlzQXRNb3N0IiwiYXRtc3QiLCJtb3N0IiwiaXNUcnVlIiwiaXNOb3RUcnVlIiwiaXNGYWxzZSIsImlzTm90RmFsc2UiLCJpc051bGwiLCJpc05vdE51bGwiLCJOYU4iLCJpc05vdE5hTiIsIm5vdEV4aXN0cyIsImlzVW5kZWZpbmVkIiwiaXNEZWZpbmVkIiwiaXNGdW5jdGlvbiIsImlzTm90RnVuY3Rpb24iLCJpc09iamVjdCIsImlzTm90T2JqZWN0IiwiaXNBcnJheSIsImlzTm90QXJyYXkiLCJpc1N0cmluZyIsImlzTm90U3RyaW5nIiwiaXNOdW1iZXIiLCJpc05vdE51bWJlciIsImZpbml0ZSIsImlzQm9vbGVhbiIsImlzTm90Qm9vbGVhbiIsInR5cGVPZiIsIm5vdFR5cGVPZiIsIm5vdEluc3RhbmNlT2YiLCJpbmMiLCJub3RJbmNsdWRlIiwiZGVlcEluY2x1ZGUiLCJub3REZWVwSW5jbHVkZSIsIm5lc3RlZEluY2x1ZGUiLCJuZXN0ZWQiLCJub3ROZXN0ZWRJbmNsdWRlIiwiZGVlcE5lc3RlZEluY2x1ZGUiLCJub3REZWVwTmVzdGVkSW5jbHVkZSIsIm93bkluY2x1ZGUiLCJvd24iLCJub3RPd25JbmNsdWRlIiwiZGVlcE93bkluY2x1ZGUiLCJub3REZWVwT3duSW5jbHVkZSIsIm5vdE1hdGNoIiwibm90UHJvcGVydHkiLCJwcm9wZXJ0eVZhbCIsIm5vdFByb3BlcnR5VmFsIiwiZGVlcFByb3BlcnR5VmFsIiwibm90RGVlcFByb3BlcnR5VmFsIiwib3duUHJvcGVydHkiLCJub3RPd25Qcm9wZXJ0eSIsIm93blByb3BlcnR5VmFsIiwibm90T3duUHJvcGVydHlWYWwiLCJkZWVwT3duUHJvcGVydHlWYWwiLCJub3REZWVwT3duUHJvcGVydHlWYWwiLCJuZXN0ZWRQcm9wZXJ0eSIsIm5vdE5lc3RlZFByb3BlcnR5IiwibmVzdGVkUHJvcGVydHlWYWwiLCJub3ROZXN0ZWRQcm9wZXJ0eVZhbCIsImRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCIsIm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbCIsImxlbmd0aE9mIiwiaGFzQW55S2V5cyIsImhhc0FsbEtleXMiLCJjb250YWluc0FsbEtleXMiLCJkb2VzTm90SGF2ZUFueUtleXMiLCJkb2VzTm90SGF2ZUFsbEtleXMiLCJoYXNBbnlEZWVwS2V5cyIsImhhc0FsbERlZXBLZXlzIiwiY29udGFpbnNBbGxEZWVwS2V5cyIsImRvZXNOb3RIYXZlQW55RGVlcEtleXMiLCJkb2VzTm90SGF2ZUFsbERlZXBLZXlzIiwidGhyb3dzIiwiYXNzZXJ0RXJyIiwiZG9lc05vdFRocm93IiwiYXBwcm94aW1hdGVseSIsInNhbWVNZW1iZXJzIiwic2V0MSIsInNldDIiLCJzYW1lIiwibWVtYmVycyIsIm5vdFNhbWVNZW1iZXJzIiwic2FtZURlZXBNZW1iZXJzIiwibm90U2FtZURlZXBNZW1iZXJzIiwic2FtZU9yZGVyZWRNZW1iZXJzIiwibm90U2FtZU9yZGVyZWRNZW1iZXJzIiwic2FtZURlZXBPcmRlcmVkTWVtYmVycyIsIm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMiLCJpbmNsdWRlTWVtYmVycyIsIm5vdEluY2x1ZGVNZW1iZXJzIiwiaW5jbHVkZURlZXBNZW1iZXJzIiwibm90SW5jbHVkZURlZXBNZW1iZXJzIiwiaW5jbHVkZU9yZGVyZWRNZW1iZXJzIiwibm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzIiwiaW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyIsIm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMiLCJpbkxpc3QiLCJjaGFuZ2VzIiwiY2hhbmdlIiwiY2hhbmdlc0J5IiwidG1wTXNnIiwiYnkiLCJkb2VzTm90Q2hhbmdlIiwiY2hhbmdlc0J1dE5vdEJ5IiwiYnV0IiwiaW5jcmVhc2VzIiwiaW5jcmVhc2UiLCJpbmNyZWFzZXNCeSIsImRvZXNOb3RJbmNyZWFzZSIsImluY3JlYXNlc0J1dE5vdEJ5IiwiZGVjcmVhc2VzIiwiZGVjcmVhc2UiLCJkZWNyZWFzZXNCeSIsImRvZXNOb3REZWNyZWFzZSIsImRvZXNOb3REZWNyZWFzZUJ5IiwiZGVjcmVhc2VzQnV0Tm90QnkiLCJpZkVycm9yIiwiZXh0ZW5zaWJsZSIsImlzTm90RXh0ZW5zaWJsZSIsInNlYWxlZCIsImlzTm90U2VhbGVkIiwiZnJvemVuIiwiaXNOb3RGcm96ZW4iLCJpc0VtcHR5IiwiaXNOb3RFbXB0eSIsImFzIiwiYWxpYXMiLCJwYXRoIiwicGFydHMiLCJyZWdleHAiLCJtQXJyIiwicGFyc2VkIiwicCIsInBhdGhEZXB0aCIsInRlbXBvcmFyeVZhbHVlIiwicGFydCIsInRlbXBPYmoiLCJwcm9wTmFtZSIsInByb3BWYWwiLCJwYXJzZVBhdGgiLCJpbmZvIiwiaW50ZXJuYWxHZXRQYXRoVmFsdWUiLCJpbnRlcm5hbFNldFBhdGhWYWx1ZSIsImdldFBhdGhWYWx1ZSIsInNldFBhdGhWYWx1ZSIsInByb21pc2VFeGlzdHMiLCJQcm9taXNlIiwiZ2xvYmFsT2JqZWN0IiwiZ2xvYmFsIiwic2VsZiIsImlzRG9tIiwic3ltYm9sRXhpc3RzIiwibWFwRXhpc3RzIiwiTWFwIiwic2V0RXhpc3RzIiwiU2V0Iiwid2Vha01hcEV4aXN0cyIsIldlYWtNYXAiLCJ3ZWFrU2V0RXhpc3RzIiwiV2Vha1NldCIsImRhdGFWaWV3RXhpc3RzIiwiRGF0YVZpZXciLCJzeW1ib2xJdGVyYXRvckV4aXN0cyIsIml0ZXJhdG9yIiwic3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMiLCJ0b1N0cmluZ1RhZyIsInNldEVudHJpZXNFeGlzdHMiLCJlbnRyaWVzIiwibWFwRW50cmllc0V4aXN0cyIsInNldEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJtYXBJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3JFeGlzdHMiLCJhcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwic3RyaW5nSXRlcmF0b3JFeGlzdHMiLCJzdHJpbmdJdGVyYXRvclByb3RvdHlwZSIsInRvU3RyaW5nTGVmdFNsaWNlTGVuZ3RoIiwidG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoIiwidHlwZW9mT2JqIiwibmF2aWdhdG9yIiwibWltZVR5cGVzIiwicGx1Z2lucyIsInN0cmluZ1RhZyIsIm9ialByb3RvdHlwZSIsIkRhdGUiLCJ0eXBlRGV0ZWN0IiwidCIsImFydCIsIm9yIiwiZ2V0UHJvcGVydGllcyIsImdldEVudW1lcmFibGVQcm9wZXJ0aWVzIiwic2hvd0hpZGRlbiIsImRlcHRoIiwiY29sb3JzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJmb3JtYXRWYWx1ZSIsImlzRE9NRWxlbWVudCIsIm9iamVjdCIsInJlY3Vyc2VUaW1lcyIsInJldCIsInByaW1pdGl2ZSIsImZvcm1hdFByaW1pdGl2ZSIsIm91dGVySFRNTCIsInhtbFZlcnNpb24iLCJ4bWxTZXJpYWxpemVyIiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwibnMiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50TlMiLCJjbG9uZU5vZGUiLCJ2aXNpYmxlS2V5cyIsIm5hbWVTdWZmaXgiLCJpc0Vycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJmb3JtYXRFcnJvciIsImJhc2UiLCJhcnJheSIsInR5cGVkQXJyYXkiLCJicmFjZXMiLCJpc1R5cGVkQXJyYXkiLCJvdXRwdXQiLCJmb3JtYXRBcnJheSIsImZvcm1hdFR5cGVkQXJyYXkiLCJmb3JtYXRQcm9wZXJ0eSIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwic2ltcGxlIiwiSW5maW5pdHkiLCJsIiwicHJvcERlc2NyaXB0b3IiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJudW1MaW5lc0VzdCIsInJlZHVjZSIsImN1ciIsImFyIiwib2JqZWN0VG9TdHJpbmciLCJvIiwia3N0ciIsImZsYWdzIiwiX19mbGFncyIsImluY2x1ZGVBbGwiLCJfa2V5IiwicmFuZG9tIiwibm93IiwiRmFrZU1hcCIsIk1lbW9pemVNYXAiLCJsZWZ0SGFuZE9wZXJhbmQiLCJyaWdodEhhbmRPcGVyYW5kIiwibWVtb2l6ZU1hcCIsImlzUHJpbWl0aXZlIiwibGVmdEhhbmRNYXAiLCJjb21wYXJhdG9yIiwiZXh0ZW5zaXZlRGVlcEVxdWFsIiwic2ltcGxlUmVzdWx0Iiwic2ltcGxlRXF1YWwiLCJtZW1vaXplIiwibWVtb2l6ZVJlc3VsdExlZnQiLCJtZW1vaXplQ29tcGFyZSIsIm1lbW9pemVSZXN1bHRSaWdodCIsImNvbXBhcmF0b3JSZXN1bHQiLCJtZW1vaXplU2V0IiwibGVmdEhhbmRUeXBlIiwiZXh0ZW5zaXZlRGVlcEVxdWFsQnlUeXBlIiwiaXRlcmFibGVFcXVhbCIsInJlZ2V4cEVxdWFsIiwiZ2VuZXJhdG9yRXF1YWwiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiZW50cmllc0VxdWFsIiwib2JqZWN0RXF1YWwiLCJsZWZ0SGFuZEl0ZW1zIiwicmlnaHRIYW5kSXRlbXMiLCJnZXRHZW5lcmF0b3JFbnRyaWVzIiwiaGFzSXRlcmF0b3JGdW5jdGlvbiIsIml0ZXJhdG9yRXJyb3IiLCJnZW5lcmF0b3IiLCJnZW5lcmF0b3JSZXN1bHQiLCJhY2N1bXVsYXRvciIsImRvbmUiLCJsZWZ0SGFuZEtleXMiLCJnZXRFbnVtZXJhYmxlS2V5cyIsInJpZ2h0SGFuZEtleXMiLCJrZXlzRXF1YWwiLCJsZWZ0SGFuZEVudHJpZXMiLCJnZXRJdGVyYXRvckVudHJpZXMiLCJyaWdodEhhbmRFbnRyaWVzIiwiRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWVNYXRjaCIsImFGdW5jIiwiZ2V0RnVuY05hbWUiLCJnZXR0ZXIiLCJwcm9wZXJ0eUdldHRlciIsIm5ld0Fzc2VydGlvbiIsIm1ldGhvZFdyYXBwZXIiLCJfZ2V0IiwiX3N1cGVyIiwib3ZlcndyaXRpbmdQcm9wZXJ0eUdldHRlciIsIm9yaWdMb2NrU3NmaSIsIl9tZXRob2QiLCJvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIiLCJjYW5TZXRQcm90b3R5cGUiLCJzZXRQcm90b3R5cGVPZiIsInRlc3RGbiIsImV4Y2x1ZGVOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJmaWx0ZXIiLCJwcm9wRGVzYyIsImNoYWluYWJsZUJlaGF2aW9yIiwiX19tZXRob2RzIiwiY2hhaW5hYmxlTWV0aG9kV3JhcHBlciIsImFzc2VydGVyTmFtZXMiLCJhc3NlcnRlck5hbWUiLCJwZCIsIl9jaGFpbmluZ0JlaGF2aW9yIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltIiwidGhyb3duIiwiZXJyTWF0Y2hlciIsImNvbXBhcmlzb25TdHJpbmciLCJjb25zdHJ1Y3RvckZuIiwiY29uc3RydWN0b3JOYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiYnVpbHRpbnMiLCJub25DaGFpbmFibGVNZXRob2ROYW1lIiwiUHJveHkiLCJSZWZsZWN0Iiwib3JkZXJlZFByb3BlcnRpZXMiLCJzdHJpbmdEaXN0YW5jZSIsInByb3h5R2V0dGVyIiwic3RyQSIsInN0ckIiLCJtZW1vIiwibWF4IiwibWluIiwiZm5MZW5ndGhEZXNjIiwiYXNzZXJ0aW9uTmFtZSIsImlzQ2hhaW5hYmxlIiwicHJvdG8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBQTtLQUFDQyxhQUVpQjtBQURsQixLQUFDQyxNQUFNLEtBQUNDLE1BQU1DLE9BQU9DO0FBQ3JCQyxNQUFNQyxNQUFNO0FBQ1pELE1BQU1FLEtBQUs7QUFDWEYsTUFBTUcsUUFBUTtBQUNkLEtBQW9CTCxPQUFPTSxTQUFTQyxVQUFwQ0w7TUFBTU07O0FBQ05aLE9B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QU87QUFHcEIsT0FBT0EsVUFBVUE7O0FBSW5CcVosT0FBT0MsVUFBVW1QLE9BQU92YyxTQUFTQTs7OztBQ05qQ21OLE9BQU9DLFVBQVUsdUJBQXVCOGQsUUFBUTtBQUM5QyxJQUFJdmtCLFNBQVN2QyxPQUFPNHRCLG9CQUFvQjlHO0FBRXhDLHFCQUFxQnpjLFVBQVU7QUFDN0IsSUFBSTlILE9BQU93SixRQUFRMUIsY0FBYyxDQUFDLEdBQUc7QUFDbkM5SCxPQUFPeEcsS0FBS3NPOzs7QUFJaEIsSUFBSXdsQixRQUFRN3ZCLE9BQU9pbEIsZUFBZTZCO0FBQ2xDLE9BQU8rSSxVQUFVLE1BQU07QUFDckI3dkIsT0FBTzR0QixvQkFBb0JpQyxPQUFPempCLFFBQVF5QjtBQUMxQ2dpQixRQUFRN3ZCLE9BQU9pbEIsZUFBZTRLOztBQUdoQyxPQUFPdHRCOzs7OztBQ2ZUd0csT0FBT0MsVUFBVSxpQ0FBaUM4ZCxRQUFRO0FBQ3hELElBQUl2a0IsU0FBUztBQUNiLFNBQVN2VCxRQUFRODNCLFFBQVE7QUFDdkJ2a0IsT0FBT3hHLEtBQUsvTTs7QUFFZCxPQUFPdVQiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiQGRpbWVuc2lvbnMgPSBpbXBvcnQgJy4vc2ltdWxhdGUuY29mZmVlJ1xuQERvbSA9IEBET00gPSB3aW5kb3cucXVpY2tkb21cbm1vY2hhLnNldHVwKCd0ZGQnKVxubW9jaGEuc2xvdyg0MDApXG5tb2NoYS50aW1lb3V0KDEyMDAwKVxubW9jaGEuYmFpbCgpIHVubGVzcyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWVcbmNoYWkgPSBpbXBvcnQgJ2NoYWknXG5jaGFpLnVzZSBpbXBvcnQgJ2NoYWktc3R5bGUnXG5jaGFpLmNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCA9IDFlM1xue2V4cGVjdH0gPSBjaGFpXG5cbnNhbmRib3ggPSBudWxsXG5yZXN0YXJ0U2FuZGJveCA9ICgpLT5cblx0c2FuZGJveC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHNhbmRib3gpIGlmIHNhbmRib3hcblx0c2FuZGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdHNhbmRib3guaWQgPSAnc2FuZGJveCdcblx0c2FuZGJveC5zZXRBdHRyaWJ1dGUgJ3N0eWxlJywgJ2JvcmRlcjoxcHggc29saWQ7IHBhZGRpbmc6MjBweDsgYm94LXNpemluZzpib3JkZXItYm94J1xuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNhbmRib3gpXG5cbmNoZWNrQ2hpbGRTdHJ1Y3R1cmUgPSAobWFpbiktPiAoY2hpbGRyZW4uLi4pLT5cblx0ZXhwZWN0KG1haW4uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbChjaGlsZHJlbi5sZW5ndGgpXG5cdGZvciBjaGlsZCxpbmRleCBpbiBjaGlsZHJlblxuXHRcdGV4cGVjdChtYWluLmNoaWxkcmVuW2luZGV4XSkudG8uZXF1YWwoY2hpbGQpXG5cdFx0ZXhwZWN0KGNoaWxkLmVsLnBhcmVudE5vZGUpLnRvLmVxdWFsKG1haW4uZWwpXG5cdFx0ZXhwZWN0KGNoaWxkLnBhcmVudCkudG8uZXF1YWwobWFpbilcblx0cmV0dXJuXG5cblxuc3VpdGUgXCJRdWlja0RvbVwiLCAoKS0+XG5cdHNldHVwKHJlc3RhcnRTYW5kYm94KVxuXG5cdHRlc3QgXCJWZXJzaW9uIFByb3BlcnR5XCIsICgpLT5cblx0XHRwYWNrYWdlVmVyc2lvbiA9IChpbXBvcnQgJy4uL3BhY2thZ2UgJCB2ZXJzaW9uJylcblx0XHRleHBlY3QoRG9tLnZlcnNpb24pLnRvLmVxdWFsKHBhY2thZ2VWZXJzaW9uKVxuXG5cblx0c3VpdGUgXCJFbGVtZW50IENyZWF0aW9uXCIsICgpLT5cblx0XHR0ZXN0IFwiQmFzaWMgQ3JlYXRpb25cIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXYpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdi5lbCkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmJlLmluc3RhbmNlT2Ygd2luZG93LkhUTUxEaXZFbGVtZW50XG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uYmUudW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMFxuXG5cblx0XHR0ZXN0IFwiU2hvcnRjdXRzXCIsICgpLT5cblx0XHRcdGV4cGVjdChEb20uYSgpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2EnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20ubGluaygpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2EnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uYW5jaG9yKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnYScpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5kaXYoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdkaXYnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20udGV4dCgpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ3RleHQnKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uc3BhbigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ3NwYW4nKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uaDQoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdoNCcpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5oZWFkZXIoKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdoZWFkZXInKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdGV4cGVjdChEb20uZm9vdGVyKCkuZWwuY29uc3RydWN0b3IpLnRvLmVxdWFsKERvbSgnZm9vdGVyJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLnNlY3Rpb24oKS5lbC5jb25zdHJ1Y3RvcikudG8uZXF1YWwoRG9tKCdzZWN0aW9uJykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHRleHBlY3QoRG9tLmJ1dHRvbigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2J1dHRvbicpLmVsLmNvbnN0cnVjdG9yKVxuXHRcdFx0ZXhwZWN0KERvbS5pbnB1dCgpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ2lucHV0JykuZWwuY29uc3RydWN0b3IpXG5cdFx0XHQjIGV4cGVjdChEb20ubWFpbigpLmVsLmNvbnN0cnVjdG9yKS50by5lcXVhbChEb20oJ21haW4nKS5lbC5jb25zdHJ1Y3Rvcilcblx0XHRcdHR5cGVzID0gWydhJywnZGl2JywndGV4dCcsJ3NwYW4nLCdoNCcsJ2hlYWRlcicsJ2Zvb3RlcicsJ3NlY3Rpb24nLCdidXR0b24nLCdpbnB1dCddXG5cdFx0XHRmb3IgdHlwZSBpbiB0eXBlc1xuXHRcdFx0XHRleHBlY3QoRG9tW3R5cGVdKCkuZWwuY29uc3RydWN0b3IubmFtZSkubm90LnRvLmNvbnRhaW4oJ1Vua25vd24nKVxuXHRcdFx0cmV0dXJuXG5cblxuXHRcdHRlc3QgXCJCYXNpYyBvcHRpb25zXCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KGNsYXNzOidhYmMtMTIzJywgcHJvcHM6eydhYmMnOjEyMywgJ2RlZic6NDU2fSlcblx0XHRcdEIgPSBEb20uZGl2KGlkOidCJywgY2xhc3NOYW1lOidhYmMtMTIzJywgYXR0cnM6eydkYXRhLWFiYyc6MTIzLCAnZGF0YS1kZWYnOjQ1Nn0pXG5cdFx0XHRDID0gRG9tLmlucHV0KHR5cGU6J3RleHQnLCBuYW1lOidhYmMnLCB2YWx1ZTonaGVsbG8nKVxuXHRcdFx0RCA9IERvbS5pbnB1dCh0eXBlOidjaGVja2JveCcsIGNoZWNrZWQ6dHJ1ZSlcblx0XHRcdEUgPSBEb20ub3B0aW9uKG5hbWU6J2FiYycsIHZhbHVlOidoZWxsbycsIHNlbGVjdGVkOnRydWUpXG5cdFx0XHRGID0gRG9tLmxpbmsoaHJlZjonaHR0cHM6Ly9nb29nbGUuY29tLycpXG5cdFx0XHRHID0gRG9tLmFuY2hvcih1cmw6J2h0dHBzOi8vZ29vZ2xlLmNvbS8nKVxuXHRcdFx0SCA9IERvbS50ZXh0KCdTb21lIHRleHQnKVxuXHRcdFx0SSA9IERvbS5pbWcoc3JjOidodHRwczovL2dvb2dsZS5jb20vJylcblx0XHRcdEogPSBEb20uZGl2KHJlbGF0ZWRJbnN0YW5jZTogb2JqPXthOjF9KVxuXG5cdFx0XHRleHBlY3QoQS5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdhYmMtMTIzJylcblx0XHRcdGV4cGVjdChBLmVsLmFiYykudG8uZXF1YWwoMTIzKVxuXHRcdFx0ZXhwZWN0KEEuZWwuZGVmKS50by5lcXVhbCg0NTYpXG5cdFx0XHRleHBlY3QoQi5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdhYmMtMTIzJylcblx0XHRcdGV4cGVjdChCLmVsLmlkKS50by5lcXVhbCgnQicpXG5cdFx0XHRleHBlY3QoQi5lbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYWJjJykpLnRvLmVxdWFsKCcxMjMnKVxuXHRcdFx0ZXhwZWN0KEIuZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWRlZicpKS50by5lcXVhbCgnNDU2Jylcblx0XHRcdGV4cGVjdChCLmVsLmRhdGFzZXQuYWJjKS50by5lcXVhbCgnMTIzJykgaWYgQi5lbC5kYXRhc2V0XG5cdFx0XHRleHBlY3QoQy5lbC50eXBlKS50by5lcXVhbCgndGV4dCcpXG5cdFx0XHRleHBlY3QoQy5lbC5uYW1lKS50by5lcXVhbCgnYWJjJylcblx0XHRcdGV4cGVjdChDLmVsLnZhbHVlKS50by5lcXVhbCgnaGVsbG8nKVxuXHRcdFx0ZXhwZWN0KEQuZWwuY2hlY2tlZCkudG8uZXF1YWwodHJ1ZSlcblx0XHRcdGV4cGVjdChFLmVsLm5hbWUpLnRvLmVxdWFsKCdhYmMnKVxuXHRcdFx0ZXhwZWN0KEUuZWwuc2VsZWN0ZWQpLnRvLmVxdWFsKHRydWUpXG5cdFx0XHRleHBlY3QoRi5lbC5ocmVmKS50by5lcXVhbCgnaHR0cHM6Ly9nb29nbGUuY29tLycpXG5cdFx0XHRleHBlY3QoRy5lbC5ocmVmKS50by5lcXVhbCgnaHR0cHM6Ly9nb29nbGUuY29tLycpXG5cdFx0XHRleHBlY3QoSC5lbC5ub2RlVHlwZSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChILmVsLnRleHRDb250ZW50KS50by5lcXVhbCgnU29tZSB0ZXh0Jylcblx0XHRcdGV4cGVjdChJLmVsLnNyYykudG8uZXF1YWwoJ2h0dHBzOi8vZ29vZ2xlLmNvbS8nKVxuXHRcdFx0ZXhwZWN0KEoucmVsYXRlZCkudG8uZXF1YWwob2JqKVxuXHRcdFx0ZXhwZWN0KEoub3B0aW9ucy5yZWxhdGVkKS50by5lcXVhbChvYmopXG5cblxuXHRcdHRlc3QgXCJDcmVhdGlvbiB3LyBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdihudWxsLCAnU29tZSB0ZXh0Jylcblx0XHRcdEIgPSBEb20uZGl2KG51bGwsIERvbS5zcGFuKCksICdTb21lIHRleHQnLCBEb20uc3BhbigpKVxuXG5cdFx0XHRleHBlY3QoQS5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChBLmVsLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChBLmVsLmNoaWxkTm9kZXNbMF0ubm9kZVR5cGUpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoQS5lbC5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50KS50by5lcXVhbCgnU29tZSB0ZXh0Jylcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlc1swXS5ub2RlVHlwZSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXNbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ3NwYW4nKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlc1sxXS5ub2RlVHlwZSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXNbMV0udGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIHRleHQnKVxuXHRcdFx0ZXhwZWN0KEIuZWwuY2hpbGROb2Rlc1syXS5ub2RlVHlwZSkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChCLmVsLmNoaWxkTm9kZXNbMl0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ3NwYW4nKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXG5cblx0XHR0ZXN0IFwiQXJyYXkgc3ludGF4XCIsICgpLT5cblx0XHRcdHNlY3Rpb24gPSBEb20oXG5cdFx0XHRcdFsnc2VjdGlvbicsIHtzdHlsZTpkaXNwbGF5OidpbmxpbmUnfSwgXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLCAnY2hpbGRBJ11cblx0XHRcdFx0XHRbJ3NwYW4nLCBudWxsLCBcblx0XHRcdFx0XHRcdFsnc3Ryb25nJywgbnVsbCwgJ2NoaWxkQiddXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgJ2NoaWxkQycsIFxuXHRcdFx0XHRcdFx0WydzcGFuJywgbnVsbCwgJ2NoaWxkQ18xJ11cblx0XHRcdFx0XHRcdFsnc3BhbicsIG51bGwsICdjaGlsZENfMiddXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChzZWN0aW9uKS5ub3QudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24ucmF3KS50by5oYXZlLnN0eWxlKCdkaXNwbGF5JywgJ2lubGluZScpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsxXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsyXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsyXS5jaGlsZHJlblsxXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblsyXS5jaGlsZHJlblsyXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS50ZXh0KS50by5lcXVhbCgnY2hpbGRBJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzFdLnRleHQpLnRvLmVxdWFsKCdjaGlsZEInKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMl0udGV4dCkudG8uZXF1YWwoJ2NoaWxkQ2NoaWxkQ18xY2hpbGRDXzInKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMl0uY2hpbGRyZW5bMV0udGV4dCkudG8uZXF1YWwoJ2NoaWxkQ18xJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzJdLnRleHQpLnRvLmVxdWFsKCdjaGlsZENfMicpXG5cblxuXHRcdHRlc3QgXCJFeGlzdGluZyBFbGVtZW50XCIsICgpLT5cblx0XHRcdGRpdlJhdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRBID0gRG9tKGRpdlJhdylcblx0XHRcdEIgPSBEb20oZGl2UmF3KVxuXHRcdFx0QyA9IERvbShBKVxuXG5cdFx0XHRleHBlY3QoQS5lbCkudG8uZXF1YWwoZGl2UmF3KVxuXHRcdFx0ZXhwZWN0KEIuZWwpLnRvLmVxdWFsKGRpdlJhdylcblx0XHRcdGV4cGVjdChDLmVsKS50by5lcXVhbChkaXZSYXcpXG5cdFx0XHRleHBlY3QoQSkudG8uZXF1YWwoQilcblx0XHRcdGV4cGVjdChCKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEMpLnRvLmVxdWFsKGRpdlJhdy5fcXVpY2tFbGVtZW50KVxuXG5cblx0XHR0ZXN0IFwiRXhpc3RpbmcgRWxlbWVudCB3LyBPcHRpb25zXCIsICgpLT5cblx0XHRcdGRpdlJhdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRkaXZSYXcuaWQgPSAnQSdcblxuXHRcdFx0ZGl2ID0gRG9tKGRpdlJhdywge2lkOidCJywgY2xhc3M6J2FiYy0xMjMnfSlcblx0XHRcdGV4cGVjdChkaXZSYXcuaWQpLnRvLmVxdWFsKCdCJylcblx0XHRcdGV4cGVjdChkaXZSYXcuY2xhc3NOYW1lKS50by5lcXVhbCgnYWJjLTEyMycpXG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbShkaXYsIHtpZDonQycsIGNsYXNzOidkZWYtNDU2J30pXG5cdFx0XHRleHBlY3QoZGl2UmF3LmlkKS50by5lcXVhbCgnQycpXG5cdFx0XHRleHBlY3QoZGl2UmF3LmNsYXNzTmFtZSkudG8uZXF1YWwoJ2RlZi00NTYnKVxuXG5cblx0XHR0ZXN0IFwiRXhpc3RpbmcgRWxlbWVudCBmcm9tIGFycmF5LWxpa2Ugb2JqZWN0c1wiLCAoKS0+XG5cdFx0XHRyYXdBID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHJhd0IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXHRcdFx0cmF3QyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRwYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJylcblx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChyYXdBKTsgcGFyZW50LmFwcGVuZENoaWxkKHJhd0IpOyBwYXJlbnQuYXBwZW5kQ2hpbGQocmF3Qyk7XG5cdFx0XHRBID0gRG9tKFtyYXdBLCByYXdCLCByYXdDXSlcblx0XHRcdEIgPSBEb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdicpKVxuXHRcdFx0QyA9IERvbShCKVxuXG5cdFx0XHRleHBlY3QoQS5lbCkudG8uZXF1YWwocmF3QSlcblx0XHRcdGV4cGVjdChCLmVsKS50by5lcXVhbChyYXdBKVxuXHRcdFx0ZXhwZWN0KEMuZWwpLnRvLmVxdWFsKHJhd0EpXG5cdFx0XHRleHBlY3QoQSkudG8uZXF1YWwoQilcblx0XHRcdGV4cGVjdChCKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEMpLnRvLmVxdWFsKHJhd0EuX3F1aWNrRWxlbWVudClcblxuXG5cblx0XHR0ZXN0IFwiRG9jdW1lbnQgbm9kZVwiLCAoKS0+XG5cdFx0XHRkb2MgPSBEb20oZG9jdW1lbnQpXG5cdFx0XHRleHBlY3QoZG9jKS5ub3QudG8uYmUudW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZG9jLnJhdykudG8uZXF1YWwoZG9jdW1lbnQpXG5cdFx0XHRleHBlY3QoZG9jLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRvYy5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLnBhcmVudHMpLm5vdC50by5jb250YWluKGRvYylcblx0XHRcdGV4cGVjdChEb20oc2FuZGJveCkucGFyZW50cykudG8uY29udGFpbihkb2MuY2hpbGRyZW5bMF0pXG5cblxuXHRcdHRlc3QgXCJXaW5kb3cgb2JqZWN0XCIsICgpLT5cblx0XHRcdHdpbiA9IERvbSh3aW5kb3cpXG5cdFx0XHRleHBlY3Qod2luKS5ub3QudG8uYmUudW5kZWZpbmVkXG5cdFx0XHRleHBlY3Qod2luLnJhdyBpcyB3aW5kb3cpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdCh3aW4ucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qod2luLmNoaWxkcmVuKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qod2luLmFwcGVuZCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHdpbi5odG1sKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3Qod2luLnN0eWxlKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoRG9tKHNhbmRib3gpLnBhcmVudHMpLm5vdC50by5jb250YWluKHdpbilcblxuXG5cdFx0dGVzdCBcIkNyZWF0aW9uIHcvIHN0eWxpbmdcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0J3dpZHRoJzogJzEwcHgnXG5cdFx0XHRcdCdoZWlnaHQnOiAxNVxuXHRcdFx0XHQnbGFtZW8nOiAnMTlweCdcblx0XHRcdFx0J2JhY2tncm91bmQtY29sb3InOiAnYmx1ZSdcblx0XHRcdFx0J2JhY2tncm91bmRTaXplJzogJ2NvdmVyJ1xuXG5cdFx0XHRzYW5kYm94LmFwcGVuZENoaWxkKGRpdi5lbClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZS5sYW1lbykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5sYW1lbykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwgJzEwcHgnXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsICcxNXB4J1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuYmFja2dyb3VuZENvbG9yKS5ub3QudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmJhY2tncm91bmRTaXplKS50by5lcXVhbCAnY292ZXInXG5cblxuXHRcdHRlc3QgXCJTVkcgZWxlbWVudHMgY2FuIGJlIGNyZWF0ZWQgdmlhIGEgJyonIGluIHRoZSBlbGVtZW50J3MgdHlwZSBzdHJpbmdcIiwgKCktPlxuXHRcdFx0c3ZnQmFkID0gRG9tKCdzdmcnKS5lbFxuXHRcdFx0c3ZnR29vZCA9IERvbSgnKnN2ZycpLmVsXG5cdFx0XHRzdmdQb2x5QmFkID0gRG9tKCdwb2x5bGluZScpLmVsXG5cdFx0XHRzdmdQb2x5R29vZCA9IERvbSgnKnBvbHlsaW5lJykuZWxcblx0XHRcdHN2Z0RpdiA9IERvbSgnKmRpdicpLmVsXG5cdFx0XHRyZWdEaXYgPSBEb20oJ2RpdicpLmVsXG5cblx0XHRcdGV4cGVjdChzdmdCYWQpLnRvLmJlLmluc3RhbmNlT2YoSFRNTFVua25vd25FbGVtZW50KVxuXHRcdFx0ZXhwZWN0KHN2Z1BvbHlCYWQpLnRvLmJlLmluc3RhbmNlT2YoSFRNTFVua25vd25FbGVtZW50KVxuXHRcdFx0ZXhwZWN0KHN2Z0dvb2QpLnRvLmJlLmluc3RhbmNlT2YoU1ZHU1ZHRWxlbWVudClcblx0XHRcdGV4cGVjdChzdmdQb2x5R29vZCkudG8uYmUuaW5zdGFuY2VPZihTVkdQb2x5bGluZUVsZW1lbnQpXG5cdFx0XHQjIGV4cGVjdChzdmdEaXYpLnRvLmJlLmluc3RhbmNlT2YoJ1NWR0VsZW1lbnQnKVxuXHRcdFx0ZXhwZWN0KHN2Z0Rpdi5jb25zdHJ1Y3Rvcikubm90LnRvLmVxdWFsKHJlZ0Rpdi5jb25zdHJ1Y3RvcilcblxuXG5cdFx0dGVzdCBcIlF1aWNrRG9tLmh0bWwoKSBhY2NlcHRzIGFuIGh0bWwgc3RyaW5nIHdoaWNoIHdvdWxkIGJlIHBhcnNlZCBhbmQgY29udmVydGVkIGludG8gYSBRdWlja0JhdGNoIGluc3RhbmNlXCIsICgpLT5cblx0XHRcdGh0bWxTdHJpbmcgPSBcIlxuXHRcdFx0XHQ8ZGl2PmZpcnN0Q2hpbGRUZXh0PC9kaXY+PHNwYW4+c2Vjb25kQ2hpbGRUZXh0PC9zcGFuPlxuXHRcdFx0XHR0ZXh0Tm9kZVxuXHRcdFx0XHQ8c3Ryb25nPmFiYzEyMzwvc3Ryb25nPlxuXHRcdFx0XCJcblx0XHRcdHdpbmRvdy5iYXRjaCA9IERvbS5odG1sKGh0bWxTdHJpbmcpXG5cblx0XHRcdGV4cGVjdCh0eXBlb2YgYmF0Y2gpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRleHBlY3QoYmF0Y2guY29uc3RydWN0b3IubmFtZSkudG8uZXF1YWwgJ1F1aWNrQmF0Y2gnXG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHMubGVuZ3RoKS50by5lcXVhbCA0XG5cdFx0XHRleHBlY3QoYmF0Y2guZWxlbWVudHNbMF0udHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1sxXS50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1syXS50eXBlKS50by5lcXVhbCAndGV4dCdcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1szXS50eXBlKS50by5lcXVhbCAnc3Ryb25nJ1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzBdLnRleHQpLnRvLmVxdWFsICdmaXJzdENoaWxkVGV4dCdcblx0XHRcdGV4cGVjdChiYXRjaC5lbGVtZW50c1sxXS50ZXh0KS50by5lcXVhbCAnc2Vjb25kQ2hpbGRUZXh0J1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzJdLnRleHQpLnRvLmluY2x1ZGUgJ3RleHROb2RlJ1xuXHRcdFx0ZXhwZWN0KGJhdGNoLmVsZW1lbnRzWzNdLnRleHQpLnRvLmVxdWFsICdhYmMxMjMnXG5cblxuXHRcdHRlc3QgXCJNZXRob2QvUHJvcGVydHkgYWxpYXNlc1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20oJ2RpdicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdykudG8uZXF1YWwoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGRpdlswXSkudG8uZXF1YWwoZGl2LmVsKVxuXHRcdFx0ZXhwZWN0KGRpdi5jc3MpLnRvLmVxdWFsKGRpdi5zdHlsZSlcblx0XHRcdGV4cGVjdChkaXYucmVwbGFjZVdpdGgpLnRvLmVxdWFsKGRpdi5yZXBsYWNlKVxuXHRcdFx0ZXhwZWN0KGRpdi5yZW1vdmVMaXN0ZW5lcikudG8uZXF1YWwoZGl2Lm9mZilcblx0XHRcdGV4cGVjdChkaXYucmVtb3ZlTGlzdGVuZXIoJ2V2ZW50QScpKVxuXG5cblx0XHR0ZXN0IFwidXNlci1kZWZpbmVkIG1ldGhkb2RzL2dldHRlcnMvc2V0dGVyc1wiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdigpXG5cdFx0XHRkaXZCID0gRG9tLmRpdiBtZXRob2RzOlxuXHRcdFx0XHRzY3JvbGxUb3A6XG5cdFx0XHRcdFx0Z2V0OiAoKS0+IEByYXcuc2Nyb2xsVG9wXG5cdFx0XHRcdHdlaWdodDpcblx0XHRcdFx0XHRnZXQ6ICgpLT4gQHJhdy53ZWlnaHRcblx0XHRcdFx0dmFsdWU6XG5cdFx0XHRcdFx0Z2V0OiAoKS0+IEByYXcudmFsdWVcblx0XHRcdFx0XHRzZXQ6ICh2YWx1ZSktPiBAcmF3LnZhbHVlID0gdmFsdWVcblx0XHRcdFx0bmFtZTogdHJ1ZVxuXHRcdFx0XHRiaWdJbmRleDogKCktPiBAaW5kZXggKiAxMFxuXG5cdFx0XHRzYW5kYm94LmFwcGVuZCBkaXZBXG5cdFx0XHRzYW5kYm94LmFwcGVuZCBkaXZCXG5cdFx0XHRkaXZBLnJhdy52YWx1ZSA9IGRpdkIucmF3LnZhbHVlID0gJ2FiYydcblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZBLnNjcm9sbFRvcCkudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2Qi5zY3JvbGxUb3ApLnRvLmVxdWFsICdudW1iZXInXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkEudmFsdWUpLnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkIudmFsdWUpLnRvLmVxdWFsICdzdHJpbmcnXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkEubmFtZSkudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2Qi5uYW1lKS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZBLmJpZ0luZGV4KS50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBkaXZCLmJpZ0luZGV4KS50by5lcXVhbCAnZnVuY3Rpb24nXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZCLnNjcm9sbFRvcCkudG8uZXF1YWwgZGl2Qi5yYXcuc2Nyb2xsVG9wXG5cdFx0XHRcblx0XHRcdGRpdkIucmF3LndlaWdodCA9ICcxJ1xuXHRcdFx0ZXhwZWN0KGRpdkIud2VpZ2h0KS50by5lcXVhbCAnMSdcblx0XHRcdFxuXHRcdFx0ZGl2Qi53ZWlnaHQgPSAnMidcblx0XHRcdGV4cGVjdChkaXZCLndlaWdodCkudG8uZXF1YWwgJzEnXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZCLnZhbHVlKS50by5lcXVhbCAnYWJjJ1xuXHRcdFx0ZGl2Qi52YWx1ZSA9ICcxMjMnXG5cdFx0XHRleHBlY3QoZGl2Qi52YWx1ZSkudG8uZXF1YWwgJzEyMydcblxuXHRcdFx0ZXhwZWN0KGRpdkIuYmlnSW5kZXgoKSkudG8uZXF1YWwgZGl2Qi5pbmRleCoxMFxuXG5cblx0c3VpdGUgXCJFdmVudHNcIiwgKCktPlxuXHRcdHRlc3QgXCJFdmVudHMgY2FuIGJlIGxpc3RlbmVkIHRvIHZpYSB0aGUgLm9uIG1ldGhvZFwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2Lm9uICdteUNsaWNrJywgKGV2ZW50KS0+XG5cdFx0XHRcdGV4cGVjdCh0eXBlb2YgZXZlbnQpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRcdGV4cGVjdChldmVudC50eXBlKS50by5lcXVhbCAnbXlDbGljaydcblx0XHRcdFx0ZW1pdENvdW50QSsrXG5cdFx0XHRcblxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMSlcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRcblx0XHRcdGRpdi5vbiAnbXlDbGljaycsIChldmVudCktPiBlbWl0Q291bnRCKytcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMylcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoNClcblxuXG5cdFx0dGVzdCBcIkV2ZW50cyBjYW4gYmUgZW1pdHRlZCB2aWEgdGhlIC5lbWl0IG1ldGhvZFwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRBKytcblx0XHRcdGRpdi5lbC5hZGRFdmVudExpc3RlbmVyICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRCKytcblxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgyKVxuXG5cblx0XHR0ZXN0IFwiRXZlbnQgaGFuZGxlcnMgY2FuIGJlIG1hbnVhbGx5IGludm9rZWQgd2l0aCBhIGN1c3RvbSBhcmcgdmlhIHRoZSAuZW1pdFByaXZhdGUgbWV0aG9kXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gMFxuXHRcdFx0YXJnID0gbnVsbFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEErKzsgYXJnID0gYXJndW1lbnRzWzBdXG5cdFx0XHRkaXYuZWwuYWRkRXZlbnRMaXN0ZW5lciAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QisrXG5cblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoYXJnKS50by5lcXVhbChudWxsKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdFByaXZhdGUoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChhcmcpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXRQcml2YXRlKCdteUV2ZW50JywgJ2FiYzEyMycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGFyZykudG8uZXF1YWwoJ2FiYzEyMycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChhcmcpLm5vdC50by5lcXVhbCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0eXBlb2YgYXJnKS50by5lcXVhbCgnb2JqZWN0JylcblxuXG5cdFx0dGVzdCBcIkJvb2xlYW5zIGNhbiBiZSBwYXNzZWQgZm9yIHRoZSAybmQgYW5kIDNyZCBhcmdzIG9mIC5lbWl0IHRvIGNvbnRyb2wgZXZlbnQuYnViYmxlcyBhbmQgZXZlbnQuY2FuY2VsYWJsZVwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IGVtaXRDb3VudEMgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblx0XHRcdGRpdi5vbiAnZXZlbnRBJywgKGV2ZW50KS0+IGVtaXRDb3VudEErKzsgZXhwZWN0KGV2ZW50LmJ1YmJsZXMpLnRvLmJlLnRydWU7IGV4cGVjdChldmVudC5jYW5jZWxhYmxlKS50by5iZS50cnVlXG5cdFx0XHRkaXYub24gJ2V2ZW50QicsIChldmVudCktPiBlbWl0Q291bnRCKys7IGV4cGVjdChldmVudC5idWJibGVzKS50by5iZS5mYWxzZTsgZXhwZWN0KGV2ZW50LmNhbmNlbGFibGUpLnRvLmJlLnRydWVcblx0XHRcdGRpdi5vbiAnZXZlbnRDJywgKGV2ZW50KS0+IGVtaXRDb3VudEMrKzsgZXhwZWN0KGV2ZW50LmJ1YmJsZXMpLnRvLmJlLmZhbHNlOyBleHBlY3QoZXZlbnQuY2FuY2VsYWJsZSkudG8uYmUuZmFsc2VcblxuXHRcdFx0ZGl2LmVtaXQoJ2V2ZW50QScpOyBkaXYuZW1pdCgnZXZlbnRCJywgZmFsc2UpOyBkaXYuZW1pdCgnZXZlbnRDJywgZmFsc2UsIGZhbHNlKTtcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QykudG8uZXF1YWwoMSlcblxuXG5cdFx0dGVzdCBcIkEgZGF0YSBvYmplY3QgY2FuIGJlIHBhc3NlZCBhcyB0aGUgNHRoIGFyZyBvZiAuZW1pdCB3aGljaCB3aWxsIGJlIGV4dGVuZGVkIG9udG8gdGhlIGV2ZW50IG9iamVjdFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBET00uZGl2KClcblx0XHRcdGV2ZW50ID0gbnVsbFxuXHRcdFx0ZGl2Lm9uICdtb3VzZWRvd24nLCAoZSktPiBldmVudCA9IGVcblxuXHRcdFx0ZXhwZWN0KGV2ZW50KS50by5lcXVhbCBudWxsXG5cdFx0XHRkaXYuZW1pdCAnbW91c2Vkb3duJ1xuXHRcdFx0ZXhwZWN0KGV2ZW50LnR5cGUpLnRvLmVxdWFsICdtb3VzZWRvd24nXG5cdFx0XHRleHBlY3QoZXZlbnQuY3VzdG9tKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZG93bicsIG51bGwsIG51bGwsIHtjdXN0b206J2N1c3RvbScsIGFiYzoxMjN9XG5cdFx0XHRleHBlY3QoZXZlbnQudHlwZSkudG8uZXF1YWwgJ21vdXNlZG93bidcblx0XHRcdGV4cGVjdChldmVudC5jdXN0b20pLnRvLmVxdWFsICdjdXN0b20nXG5cdFx0XHRleHBlY3QoZXZlbnQuYWJjKS50by5lcXVhbCAxMjNcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZG93bicsIG51bGwsIG51bGwsIHRydWVcblx0XHRcdGV4cGVjdChldmVudC50eXBlKS50by5lcXVhbCAnbW91c2Vkb3duJ1xuXHRcdFx0ZXhwZWN0KGV2ZW50LmN1c3RvbSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cblxuXHRcdHRlc3QgXCJFdmVudCBsaXN0ZW5lcnMgY2FuIGJlIHJlbW92ZWQgdmlhIHRoZSAub2ZmIG1ldGhvZFwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IGVtaXRDb3VudEMgPSBlbWl0Q291bnREID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEErK1xuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgZXZlbnRDQj0oKS0+IGVtaXRDb3VudEIrK1xuXHRcdFx0ZGl2Lm9uICdhbm90aGVyRXZlbnQnLCAoKS0+IGVtaXRDb3VudEMrK1xuXHRcdFx0ZGl2LmVsLmFkZEV2ZW50TGlzdGVuZXIgJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEQrK1xuXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEMpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50RCkudG8uZXF1YWwoMClcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKTsgZGl2LmVtaXQoJ2Fub3RoZXJFdmVudCcpO1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRDKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEQpLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5vZmYoJ215RXZlbnQnLCBldmVudENCKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKTsgZGl2LmVtaXQoJ2Fub3RoZXJFdmVudCcpO1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRDKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEQpLnRvLmVxdWFsKDIpXG5cdFx0XHRcblx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QisrXG5cdFx0XHRkaXYub2ZmKCdteUV2ZW50Jylcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jyk7IGRpdi5lbWl0KCdhbm90aGVyRXZlbnQnKTtcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QykudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChlbWl0Q291bnREKS50by5lcXVhbCgzKVxuXHRcdFx0XG5cdFx0XHRkaXYub24gJ215RXZlbnQnLCAoKS0+IGVtaXRDb3VudEErK1xuXHRcdFx0ZGl2Lm9uICdteUV2ZW50JywgKCktPiBlbWl0Q291bnRCKytcblx0XHRcdGRpdi5vZmYoKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKTsgZGl2LmVtaXQoJ2Fub3RoZXJFdmVudCcpO1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChlbWl0Q291bnRDKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEQpLnRvLmVxdWFsKDQpXG5cblxuXHRcdHRlc3QgXCJFdmVudHMgY2FuIGJlIG5hbWVkIHZpYSBhICc8ZXZlbnQ+LjxuYW1lPicgc3ludGF4IHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlbW92ZSBsaXN0ZW5lcnMgbGF0ZXIgb24gd2l0aG91dCB0aGUgb3JpZ2luYWwgY2FsbGJhY2tzXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudEEgPSBlbWl0Q291bnRCID0gMFxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGF0dGFjaExpc3RlbmVycyA9ICgpLT5cblx0XHRcdFx0ZGl2Lm9uICdteUV2ZW50LnNvbWVOYW1lJywgKCktPiBlbWl0Q291bnRBKys7XG5cdFx0XHRcdGRpdi5vbiAnbXlFdmVudCcsICgpLT4gZW1pdENvdW50QisrO1xuXG5cdFx0XHRhdHRhY2hMaXN0ZW5lcnMoKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMClcblxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQuc29tZU5hbWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2Lm9mZignbXlFdmVudC5zb21lT3RoZXJOYW1lJylcblx0XHRcdGRpdi5lbWl0KCdteUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDIpXG5cdFx0XHRcblx0XHRcdGRpdi5vZmYoJ215RXZlbnQuc29tZU5hbWUnKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMylcblx0XHRcdFxuXHRcdFx0ZGl2Lm9mZignbXlFdmVudCcpXG5cdFx0XHRhdHRhY2hMaXN0ZW5lcnMoKVxuXHRcdFx0ZGl2LmVtaXQoJ215RXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoNClcblx0XHRcdFxuXHRcdFx0ZGl2Lm9mZignbXlFdmVudCcpXG5cdFx0XHRkaXYuZW1pdCgnbXlFdmVudCcpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCg0KVxuXG5cblx0XHR0ZXN0IFwiTXVsdGlwbGUgZXZlbnRzIGNhbiBiZSByZWdpc3RlcmVkL2RlcmVnaXN0ZXJlZCBhdCBvbmNlIHVzaW5nIHdoaXRlc3BhY2Ugc2VwYXJhdG9yc1wiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnQgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblxuXHRcdFx0ZGl2Lm9uICdvbmUgdHdvICAgdGhyZWUnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAwXG5cblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMVxuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDJcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDNcblxuXHRcdFx0ZGl2Lm9mZignb25lICAgICAgdGhyZWUnKVxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAzXG5cblx0XHRcdGRpdi5lbWl0KCd0d28nKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNFxuXG5cdFx0XHRkaXYuZW1pdCgndGhyZWUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNFxuXG5cdFx0XHRkaXYub2ZmKClcblx0XHRcdGRpdi5lbWl0KCdvbmUnKTsgZGl2LmVtaXQoJ3R3bycpOyBkaXYuZW1pdCgndGhyZWUnKTtcblx0XHRcdGRpdi5vbiAnb25lIHR3byAgIHRocmVlLnNvbWVOYW1lJywgKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0ZGl2Lm9uICdvbmUgdHdvICAgdGhyZWUnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA0XG5cblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNlxuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDhcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDEwXG5cblx0XHRcdGRpdi5vZmYoJ3R3byBcXHRvbmUuc29tZU5hbWUnKVxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxMVxuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDEyXG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxNFxuXHRcdFx0XG5cdFx0XHRkaXYub2ZmKCdvbmUgdGhyZWUnKVxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxNFxuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDE1XG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAxNVxuXG5cblx0XHR0ZXN0IFwiRXZlbnRzIGNhbiBiZSBsaXN0ZW5lZCBmb3Igb25jZSB2aWEgdGhlIC5vbmNlIG1ldGhvZFwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnRBID0gZW1pdENvdW50QiA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2Lm9uY2UgJ215Q2xpY2snLCAoZXZlbnQpLT5cblx0XHRcdFx0ZXhwZWN0KHR5cGVvZiBldmVudCkudG8uZXF1YWwgJ29iamVjdCdcblx0XHRcdFx0ZXhwZWN0KGV2ZW50LnR5cGUpLnRvLmVxdWFsICdteUNsaWNrJ1xuXG5cdFx0XHRkaXYub24gJ215Q2xpY2snLCAoKS0+IGVtaXRDb3VudEErK1xuXHRcdFx0ZGl2Lm9uY2UgJ215Q2xpY2snLCAoKS0+IGVtaXRDb3VudEIrK1xuXHRcdFx0XG5cblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDApXG5cdFx0XHRcblx0XHRcdGRpdi5lbC5lbWl0RXZlbnQoJ215Q2xpY2snKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEEpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QikudG8uZXF1YWwoMSlcblx0XHRcdFxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgxKVxuXHRcdFx0XG5cdFx0XHRkaXYub25jZSAnbXlDbGljaycsIChldmVudCktPiBlbWl0Q291bnRCKytcblx0XHRcdFxuXHRcdFx0ZGl2LmVsLmVtaXRFdmVudCgnbXlDbGljaycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50QSkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRCKS50by5lcXVhbCgyKVxuXHRcdFx0XG5cdFx0XHRkaXYuZWwuZW1pdEV2ZW50KCdteUNsaWNrJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnRBKS50by5lcXVhbCg0KVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudEIpLnRvLmVxdWFsKDIpXG5cblxuXHRcdHRlc3QgXCJQcmUtZGVmaW5lZCBldmVudCBsaXN0ZW5lcnMgY2FuIGJlIHBhc3NlZCBpbiBvcHRpb25zLmV2ZW50c1wiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnQgPSAwXG5cdFx0XHRlbWl0Q29udGV4dCA9IG51bGxcblx0XHRcdGxpc3RlbmVycyA9XG5cdFx0XHRcdCdvbmUgdHdvIHRocmVlJzogKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0XHQnZm91cic6ICgpLT4gZW1pdENvdW50Kytcblx0XHRcdFx0J2ZpdmUnOiAoKS0+IGVtaXRDb250ZXh0ID0gQFxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2KGV2ZW50czpsaXN0ZW5lcnMpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCAwXG5cblx0XHRcdGRpdi5lbWl0KCdvbmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgMVxuXG5cdFx0XHRkaXYuZW1pdCgndHdvJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDJcblxuXHRcdFx0ZGl2LmVtaXQoJ3RocmVlJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDNcblxuXHRcdFx0ZGl2LmVtaXQoJ2ZvdXInKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNFxuXG5cdFx0XHRkaXYub2ZmKCdvbmUgICAgICB0aHJlZScpXG5cdFx0XHRkaXYuZW1pdCgnb25lJylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsIDRcblxuXHRcdFx0ZGl2LmVtaXQoJ3R3bycpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA1XG5cblx0XHRcdGRpdi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA1XG5cblx0XHRcdGRpdi5lbWl0KCdmaXZlJylcblx0XHRcdGV4cGVjdChlbWl0Q29udGV4dCkudG8uZXF1YWwgZGl2XG5cblx0XHRcdGRpdi5vZmYoKVxuXHRcdFx0ZGl2LmVtaXQoJ29uZScpOyBkaXYuZW1pdCgndHdvJyk7IGRpdi5lbWl0KCd0aHJlZScpOyBkaXYuZW1pdCgnZm91cicpO1xuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwgNVxuXG5cdFx0XHRkaXZCID0gRG9tLmRpdihldmVudHM6bGlzdGVuZXJzKVxuXHRcdFx0ZGl2Qi5lbWl0KCdvbmUnKTsgZGl2Qi5lbWl0KCd0aHJlZScpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCA3XG5cdFx0XHRcblx0XHRcdGV4cGVjdChlbWl0Q29udGV4dCkudG8uZXF1YWwgZGl2XG5cdFx0XHRkaXZCLmVtaXQoJ2ZpdmUnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb250ZXh0KS50by5lcXVhbCBkaXZCXG5cblxuXHRcdHRlc3QgXCJ0aGUgaW5zZXJ0ZWQgZXZlbnQgd2lsbCBiZSBwcml2YXRlbHkgZW1pdHRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGluc2VydGVkIGludG8gdGhlIERPTVwiLCAoKS0+XG5cdFx0XHRpbnZva2VDb3VudCA9IDBcblx0XHRcdHBhcmVudEEgPSBEb20uc2VjdGlvbigpXG5cdFx0XHRwYXJlbnRCID0gRG9tLnNlY3Rpb24oKVxuXHRcdFx0bWFzdGVyUGFyZW50QiA9IERvbS5kaXYoKVxuXHRcdFx0cGFyZW50QyA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXG5cdFx0XHRkaXYub24gJ2luc2VydGVkJywgKGVsKS0+XG5cdFx0XHRcdGV4cGVjdChAKS50by5lcXVhbChkaXYpXG5cdFx0XHRcdGV4cGVjdChlbCkudG8uZXF1YWwoZGl2LnBhcmVudClcblx0XHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KyspLnRvLmVxdWFsKDApXG5cblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMClcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRBKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50Qi5hcHBlbmRUbyhtYXN0ZXJQYXJlbnRCKSlcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMClcblx0XHRcdFxuXHRcdFx0cGFyZW50QS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50Qylcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMSlcblxuXHRcdFx0ZGl2LmRldGFjaCgpXG5cdFx0XHRkaXYuYXBwZW5kVG8ocGFyZW50Qi5hcHBlbmRUbyhzYW5kYm94KSlcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCBwYXJlbnRCXG5cblx0XHRcdGRpdi5vbiAnaW5zZXJ0ZWQnLCAoKS0+IGV4cGVjdChpbnZva2VDb3VudCsrKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsIHBhcmVudEJcblx0XHRcdFxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudEMpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwgcGFyZW50Q1xuXHRcdFx0XG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRBKVxuXHRcdFx0ZGl2Lm9uICdpbnNlcnRlZCcsICgpLT4gaW52b2tlQ291bnQrK1xuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgzKVxuXHRcdFx0XG5cdFx0XHRkaXYuZGV0YWNoKClcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnRCKVxuXHRcdFx0ZXhwZWN0KGludm9rZUNvdW50KS50by5lcXVhbCgzKVxuXG5cblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50LnJlcGxhY2Ugd2lsbCB0cmlnZ2VyIHRoZSBpbnNlcnRlZCBldmVudFwiLCAoKS0+XG5cdFx0XHRpbnZva2VDb3VudCA9IDBcblx0XHRcdHBhcmVudCA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdEEgPSBEb20uZGl2KClcblx0XHRcdEIgPSBEb20uZGl2KClcblxuXHRcdFx0Qi5vbiAnaW5zZXJ0ZWQnLCAoZWwpLT5cblx0XHRcdFx0ZXhwZWN0KEApLnRvLmVxdWFsKEIpXG5cdFx0XHRcdGV4cGVjdChlbCkudG8uZXF1YWwoQi5wYXJlbnQpXG5cdFx0XHRcdGV4cGVjdChpbnZva2VDb3VudCsrKS50by5lcXVhbCgwKVxuXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cblx0XHRcdHBhcmVudC5hcHBlbmQoQSlcblx0XHRcdGV4cGVjdChpbnZva2VDb3VudCkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KEEucGFyZW50KS50by5lcXVhbChwYXJlbnQpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXHRcdFx0QS5yZXBsYWNlKEIpXG5cdFx0XHRleHBlY3QoaW52b2tlQ291bnQpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbChwYXJlbnQpXG5cblxuXG5cblxuXG5cdHN1aXRlIFwiU3R5bGVcIiwgKCktPlxuXHRcdHRlc3QgXCJTdHlsZXMgY2FuIGJlIHNldCB2aWEgdGhlIC5zdHlsZS8uY3NzIG1ldGhvZCB3aXRoIGFyZ3MgcGFpciBvZiBbcHJvcGVydHksIHZhbHVlXVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOnt3aWR0aDonMTVweCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZGl2LmVsKVxuXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXG5cdFx0XHRkaXYuc3R5bGUgJ3dpZHRoJywgJzI1cHgnXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXG5cdFx0XHRkaXYuc3R5bGUgJ3dpZHRoJywgJzV2aCdcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCc1dmgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmNvbnRhaW4oJ3B4JylcblxuXG5cdFx0dGVzdCBcIk11bHRpcGxlIFN0eWxlcyBjYW4gYmUgc2V0IHZpYSB0aGUgLnN0eWxlLy5jc3MgbWV0aG9kIGJ5IHBhc3NpbmcgYSBzdHlsZSBvYmplY3RcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTp7d2lkdGg6JzE1cHgnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzBweCcpXG5cblx0XHRcdGRpdi5zdHlsZSB7d2lkdGg6MjUsIGhlaWdodDonMzMnfVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzMzcHgnKVxuXG5cblx0XHR0ZXN0IFwiU3R5bGVzIGRlZmluZWQgaW4gdGhlIG9wdGlvbnMgb2JqZWN0IHdpbGwgYmUgYXBwbGllZCB2aWEgY2xhc3NOYW1lcyBhbmQgbm90IGlubGluZSBzdHlsZVwiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdihzdHlsZTp7d2lkdGg6MTUsIGhlaWdodDozMH0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZCID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpLnN0eWxlIHt3aWR0aDoxNSwgaGVpZ2h0OjMwfVxuXG5cdFx0XHRleHBlY3QoZGl2QS5yYXcpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIucmF3KS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnJhdykudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzMwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIucmF3KS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMzBweCcpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnJhdy5zdHlsZS53aWR0aCkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXZCLnJhdy5zdHlsZS53aWR0aCkudG8uZXF1YWwgJzE1cHgnXG5cdFx0XHRleHBlY3QoZGl2QS5yYXcuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkIucmF3LnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJzMwcHgnXG5cblxuXHRcdHRlc3QgXCJJZiBwYXNzZWQgYSBwcm9wZXJ0eSBuYW1lIHdpdGhvdXQgYSB2YWx1ZSwgdGhlIGNvbXB1dGVkIHZhbHVlIGZvciB0aGF0IHByb3BlcnR5IHdpbGwgYmUgcmV0dXJuZWRcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTp7d2lkdGg6JzE1cHgnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMTVweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICcwcHgnXG5cblx0XHRcdGRpdi5zdHlsZSB3aWR0aDpudWxsLCBoZWlnaHQ6IDU1XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsIGNvbXB1dGVkU3R5bGUud2lkdGhcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICc1NXB4J1xuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgJ3dpZHRoJywgJzE5dncnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmNvbnRhaW4gJ3B4J1xuXG5cblx0XHR0ZXN0IFwiRnVuY3Rpb25zIGNhbiBiZSBwYXNzZWQgYXMgdmFsdWVzIGZvciBwcm9wZXJ0aWVzIGluIHN0eWxlIG9iamVjdHMgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGVsZW1lbnQncyBvcHRpb25zLnJlbGF0ZWRJbnN0YW5jZSBhcyB0aGUgb25seSBhcmd1bWVudFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHJhdGU6MjUpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRhcHBseVdpZHRoID0gKGV4cGVjdGVkSW5zdGFuY2UpLT5cblx0XHRcdFx0ZGl2LnN0eWxlIHdpZHRoOiAoaW5zdGFuY2UpLT5cblx0XHRcdFx0XHRleHBlY3QodHlwZW9mIGluc3RhbmNlKS50by5lcXVhbCAnb2JqZWN0J1xuXHRcdFx0XHRcdGV4cGVjdChpbnN0YW5jZSkudG8uZXF1YWwoZXhwZWN0ZWRJbnN0YW5jZSlcblx0XHRcdFx0XHRyZXR1cm4gZGl2Lm9wdGlvbnMucmF0ZVxuXG5cdFx0XHRhcHBseVdpZHRoKGRpdilcblx0XHRcdGV4cGVjdChkaXYub3B0aW9ucy5yYXRlKS50by5lcXVhbCAyNVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjVweCdcblxuXHRcdFx0ZGl2Lm9wdGlvbnMucmF0ZSA9IDI1MFxuXHRcdFx0ZGl2LnJlbGF0ZWQgPSBhbm90aGVyT2JqID0ge31cblx0XHRcdGFwcGx5V2lkdGgoYW5vdGhlck9iailcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI1MHB4J1xuXG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOnt3aWR0aDozMCwgaGVpZ2h0OigtPjUwKSwgZm9udFNpemU6KC0+MjApfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXYucmF3KS50by5oYXZlLnN0eWxlICd3aWR0aCcsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5yYXcpLnRvLmhhdmUuc3R5bGUgJ2hlaWdodCcsICc1MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5yYXcpLnRvLmhhdmUuc3R5bGUgJ2ZvbnRTaXplJywgJzIwcHgnXG5cblxuXHRcdHRlc3QgXCJBIG51bGwgdmFsdWUgY2FuIGJlIHBhc3NlZCBmb3IgYSBwcm9wZXJ0eSBpbiBvcmRlciB0byBkZWxldGUgdGhhdCBzdHlsZVwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOnt3aWR0aDonMTVweCcsIGZvbnRTaXplOiAtPiAzMH0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYuc3R5bGUgJ2hlaWdodCcsIDIwXG5cblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzIwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnMjBweCdcblxuXHRcdFx0ZGl2LnN0eWxlIHt3aWR0aDpudWxsLCBoZWlnaHQ6MTJ9XG5cdFx0XHRleHBlY3QoZGl2LmVsKS5ub3QudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMTJweCcpXG5cdFx0XHRleHBlY3QoWyd1bnNldCcsJ2luaGVyaXQnLCdpbml0aWFsJ10uc29tZSAocyktPiBzIGlzIGRpdi5lbC5zdHlsZS53aWR0aCkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsICcxMnB4J1xuXG5cdFx0XHRkaXYuY3NzICdoZWlnaHQnLCBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUud2lkdGgpLm5vdC50by5lcXVhbCAnJ1xuXG5cdFx0XHRkaXYuZWwuc3R5bGUud2lkdGggPSBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLndpZHRoKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5jc3MgJ3dpZHRoJywgbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS53aWR0aCkubm90LnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2LmVsKS5ub3QudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cblx0XHRcdGRpdi5zdHlsZSAnaGVpZ2h0JywgLT4gMzBcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAnMzBweCdcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlICdoZWlnaHQnLCAtPiBudWxsXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwgJydcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5mb250U2l6ZSkudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRkaXYuc3R5bGUgJ2ZvbnRTaXplJywgbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5mb250U2l6ZSkudG8uZXF1YWwgJydcblxuXG5cdFx0dGVzdCBcIi5zdHlsZVNhZmUoKSBjYW4gYmUgdXNlZCB0byBvYnRhaW4gdGhlIHZhbHVlIGZvciBhIGdpdmVuIHByb3BlcnR5IGV2ZW4gZm9yIG5vbi1pbnNlcnRlZCBlbGVtZW50cyBvciBlbGVtZW50cyB3aXRoIG9wdGlvbnMuc3R5bGVBZnRlckluc2VydFwiLCAoKS0+XG5cdFx0XHRzdHlsZSA9XG5cdFx0XHRcdHdpZHRoOiAnOHB4J1xuXHRcdFx0XHRoZWlnaHQ6ICc5cHgnXG5cdFx0XHRcdHpJbmRleDogKGZpZWxkKS0+IGZpZWxkLm9wdGlvbnMudGhlSW5kZXhcblx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdHdpZHRoOiAnMThweCdcblx0XHRcdFx0XHR6SW5kZXg6IChmaWVsZCktPiBmaWVsZC5vcHRpb25zLnRoZUluZGV4KjJcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0aGVpZ2h0OiAnMTAwJSdcblx0XHRcdGRpdkEgPSBEb20uZGl2IHtzdHlsZSwgdGhlSW5kZXg6JzEyJ31cblx0XHRcdGRpdkIgPSBEb20uZGl2IHtzdHlsZSwgdGhlSW5kZXg6JzI5Jywgc3R5bGVBZnRlckluc2VydDp0cnVlfVxuXHRcdFx0ZGl2QS5zdHlsZSBmb250U2l6ZToxMCwgcG9zaXRpb246J3JlbGF0aXZlJ1xuXHRcdFx0ZGl2Qi5zdHlsZSBmb250U2l6ZToxMCwgcG9zaXRpb246J3JlbGF0aXZlJ1xuXHRcdFx0cHJvcCA9IChlbCx0YXJnZXQpLT4gY29tcHV0ZWQ6ZWwuc3R5bGUodGFyZ2V0KSwgaW5saW5lOmVsLnJhdy5zdHlsZVt0YXJnZXRdLCBzYWZlOicnK2VsLnN0eWxlU2FmZSh0YXJnZXQpXG5cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICdmb250U2l6ZScpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonMTBweCcsIHNhZmU6JzEwcHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ2ZvbnRTaXplJykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicxMHB4Jywgc2FmZTonMTBweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnd2lkdGgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzhweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnd2lkdGgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzhweCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnaGVpZ2h0JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOic5cHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ2hlaWdodCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonOXB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICd6SW5kZXgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JzEyJywgc2FmZTonMTInfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ3pJbmRleCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonMjknfVxuXHRcdFx0XG5cdFx0XHRkaXZBLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXZCLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnd2lkdGgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JycsIHNhZmU6JzE4cHgnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ3dpZHRoJykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOicxOHB4J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkEsICd6SW5kZXgnKS50by5lcWwge2NvbXB1dGVkOicnLCBpbmxpbmU6JzI0Jywgc2FmZTonMjQnfVxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QiwgJ3pJbmRleCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonNTgnfVxuXHRcdFx0XG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ2hlaWdodCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JycsIGlubGluZTonJywgc2FmZTonMTAwJSd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZCLCAnaGVpZ2h0JykudG8uZXFsIHtjb21wdXRlZDonJywgaW5saW5lOicnLCBzYWZlOicxMDAlJ31cblx0XHRcdFxuXHRcdFx0ZGl2QS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2Qi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0aGVpZ2h0QSA9IGdldENvbXB1dGVkU3R5bGUoZGl2QS5yYXcpLmhlaWdodFxuXHRcdFx0aGVpZ2h0QiA9IGdldENvbXB1dGVkU3R5bGUoZGl2Qi5yYXcpLmhlaWdodFxuXHRcdFx0ZXhwZWN0KHByb3AgZGl2QSwgJ3pJbmRleCcpLnRvLmVxbCB7Y29tcHV0ZWQ6JzI0JywgaW5saW5lOicyNCcsIHNhZmU6JzI0J31cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICd6SW5kZXgnKS50by5lcWwge2NvbXB1dGVkOic1OCcsIGlubGluZTonNTgnLCBzYWZlOic1OCd9XG5cdFx0XHRleHBlY3QocHJvcCBkaXZBLCAnaGVpZ2h0JykudG8uZXFsIHtjb21wdXRlZDpoZWlnaHRBLCBpbmxpbmU6JycsIHNhZmU6aGVpZ2h0QX1cblx0XHRcdGV4cGVjdChwcm9wIGRpdkIsICdoZWlnaHQnKS50by5lcWwge2NvbXB1dGVkOmhlaWdodEIsIGlubGluZTonJywgc2FmZTpoZWlnaHRCfVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUgJ2hlaWdodCcpLnRvLmVxdWFsIGhlaWdodEFcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSAnaGVpZ2h0JywgdHJ1ZSkudG8uZXF1YWwgJzEwMCUnXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUgJ2hlaWdodCcpLnRvLmVxdWFsIGhlaWdodEJcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSAnaGVpZ2h0JywgdHJ1ZSkudG8uZXF1YWwgJzEwMCUnXG5cdFx0XHRcblx0XHRcdGRpdkIuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCdoZWlnaHQnKSkubm90LnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ2hlaWdodCcpKS5ub3QudG8uZXF1YWwoJzEwMCUnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ2hlaWdodCcpKS50by5jb250YWluKCdweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ2hlaWdodCcpKS50by5lcXVhbChkaXZCLnN0eWxlKCdoZWlnaHQnKSlcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnaGVpZ2h0JywgdHJ1ZSkpLm5vdC50by5lcXVhbChkaXZCLnN0eWxlKCdoZWlnaHQnKSlcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnaGVpZ2h0JywgdHJ1ZSkpLnRvLmVxdWFsKCcxMDAlJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnbWFyZ2luJywgdHJ1ZSkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4JylcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCdmYWtlUHJvcCcpKS50by5lcXVhbChkaXZBKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKDEyMykpLnRvLmVxdWFsKGRpdkEpXG5cblx0XHRcdHRleHQgPSBEb20udGV4dCgnYWJjMTIzJykuYXBwZW5kVG8oZGl2QSlcblx0XHRcdGV4cGVjdCh0ZXh0LnN0eWxlU2FmZSgnZmFrZVByb3AnKSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHRleHQuc3R5bGVTYWZlKDEyMykpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXG5cdFx0dGVzdCBcIi5zdHlsZVNhZmUoKSB3aWxsIHdvcmsgd2l0aCBpbnN0YW5jZXMgd2l0aCBubyBnaXZlbiBiYXNlIHN0eWxlc1wiLCAoKS0+XG5cdFx0XHRkaXZBID0gRG9tLmRpdigpXG5cdFx0XHRkaXZCID0gRG9tKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ2RpdicpXG5cblx0XHRcdGV4cGVjdCAoKS0+XG5cdFx0XHRcdGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKVxuXHRcdFx0XHRkaXZCLnN0eWxlU2FmZSgnaGVpZ2h0Jylcblx0XHRcdC5ub3QudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUgJ2hlaWdodCcpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUgJ2hlaWdodCcpLnRvLmVxdWFsICcnXG5cblxuXHRcdHRlc3QgXCIuc3R5bGVQYXJzZWQoKSBpcyBhIHNob3J0aGFuZCBmb3IgcGFyc2VGbG9hdCguc3R5bGVTYWZlKCkpXCIsICgpLT5cblx0XHRcdHN0eWxlID1cblx0XHRcdFx0d2lkdGg6ICc4cHgnXG5cdFx0XHRcdGhlaWdodDogJzlweCdcblx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdHdpZHRoOiAnMThweCdcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0aGVpZ2h0OiAnMTAwJSdcblx0XHRcdGRpdkEgPSBEb20uZGl2IHtzdHlsZX1cblx0XHRcdGRpdkIgPSBEb20uZGl2IHtzdHlsZSwgc3R5bGVBZnRlckluc2VydDp0cnVlfVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCc4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCdoZWlnaHQnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKS50by5lcXVhbCgnOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlUGFyc2VkKCdoZWlnaHQnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpXG5cblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzhweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSlcblxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSlcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ2hlaWdodCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCc5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ2hlaWdodCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSlcblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSlcblxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCd3aWR0aCcpKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlKCdoZWlnaHQnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKS50by5lcXVhbCgnMTAwJScpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnaGVpZ2h0JykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2QS5zdHlsZVNhZmUoJ2hlaWdodCcpKVxuXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlUGFyc2VkKCd3aWR0aCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkIuc3R5bGVTYWZlKCd3aWR0aCcpKVxuXG5cdFx0XHRkaXZBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZCLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXZBLnN0YXRlICdyZWxheGVkJywgb2ZmXG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkJywgb2ZmXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVTYWZlKCd3aWR0aCcpKS50by5lcXVhbCgnMThweCcpXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVBhcnNlZCgnd2lkdGgnKSkudG8uZXF1YWwocGFyc2VGbG9hdCBkaXZBLnN0eWxlU2FmZSgnd2lkdGgnKSlcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUoJ2hlaWdodCcpKS50by5lcXVhbCgnOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLnN0eWxlU2FmZSgnaGVpZ2h0JykpLnRvLmVxdWFsKCc5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGVQYXJzZWQoJ2hlaWdodCcpKS50by5lcXVhbChwYXJzZUZsb2F0IGRpdkEuc3R5bGVTYWZlKCdoZWlnaHQnKSlcblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxdWFsKCcxOHB4Jylcblx0XHRcdGV4cGVjdChkaXZCLnN0eWxlU2FmZSgnd2lkdGgnKSkudG8uZXF1YWwoJzE4cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGVQYXJzZWQoJ3dpZHRoJykpLnRvLmVxdWFsKHBhcnNlRmxvYXQgZGl2Qi5zdHlsZVNhZmUoJ3dpZHRoJykpXG5cblxuXHRcdHRlc3QgXCIucmVjYWxjU3R5bGUoKSByZS1hcHBsaWVzIGFsbCBmdW5jdGlvbi12YWx1ZSBzdHlsZXNcIiwgKCktPlxuXHRcdFx0Y291bnQgPSBBOjAsQjowLEM6MCxEOjAsRTowLEY6MCxHOjBcblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHdpZHRoOiAoKS0+ICsrY291bnQuQVxuXHRcdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRcdGhlaWdodDogKCktPiArK2NvdW50LkJcblx0XHRcdFx0Zm9udFNpemU6ICgpLT4gKytjb3VudC5DXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHRvcGFjaXR5OiAwLjVcblx0XHRcdFx0XHRmb250U2l6ZTogKCktPiArK2NvdW50LkRcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0aGVpZ2h0OiAoKS0+ICsrY291bnQuRVxuXHRcdFx0XHRcdGZvbnRTaXplOiAoKS0+ICsrY291bnQuRlxuXHRcdFx0XHRcdCRmdW5ueTpcblx0XHRcdFx0XHRcdHdpZHRoOiAoKS0+ICsrY291bnQuR1xuXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjEsQjoxLEM6MSxEOjAsRTowLEY6MCxHOjBcblx0XHRcdFxuXHRcdFx0ZGl2LnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MixCOjIsQzoyLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MixCOjIsQzoyLEQ6MSxFOjAsRjowLEc6MFxuXG5cdFx0XHRkaXYucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTozLEI6MyxDOjIsRDoyLEU6MCxGOjAsRzowXG5cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjMsQjozLEM6MixEOjIsRToxLEY6MSxHOjBcblxuXHRcdFx0ZGl2LnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6NCxCOjMsQzoyLEQ6MixFOjIsRjoyLEc6MFxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55Jywgb25cblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6NCxCOjMsQzoyLEQ6MixFOjIsRjoyLEc6MVxuXG5cdFx0XHRkaXYucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTo0LEI6MyxDOjIsRDoyLEU6MyxGOjMsRzoyXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvZmZcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6NSxCOjMsQzoyLEQ6MixFOjMsRjozLEc6MlxuXHRcdFx0XG5cdFx0XHRkaXYucmVjYWxjU3R5bGUoKVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTo2LEI6MyxDOjIsRDoyLEU6NCxGOjQsRzoyXG5cblxuXHRcdHRlc3QgXCIucmVjYWxjU3R5bGUoKSBhY2NlcHRzIGEgc2luZ2xlIGFyZ3VtZW50IHRvIGluZGljYXRlIGlmIHRvIHJlY2FsYyBzdHlsZSBvbiBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRjb3VudCA9IEE6MCxCOjAsQzowLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0d3JhcHBlckNvdW50ID0gMFxuXHRcdFx0d3JhcHBlciA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHdpZHRoOiAoKS0+ICsrd3JhcHBlckNvdW50XG5cdFx0XHRcblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHdpZHRoOiAoKS0+ICsrY291bnQuQVxuXHRcdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRcdGhlaWdodDogKCktPiArK2NvdW50LkJcblx0XHRcdFx0Zm9udFNpemU6ICgpLT4gKytjb3VudC5DXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHRvcGFjaXR5OiAwLjVcblx0XHRcdFx0XHRmb250U2l6ZTogKCktPiArK2NvdW50LkRcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0aGVpZ2h0OiAoKS0+ICsrY291bnQuRVxuXHRcdFx0XHRcdGZvbnRTaXplOiAoKS0+ICsrY291bnQuRlxuXHRcdFx0XHRcdCRmdW5ueTpcblx0XHRcdFx0XHRcdHdpZHRoOiAoKS0+ICsrY291bnQuR1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8od3JhcHBlcilcblx0XHRcdGV4cGVjdCh3cmFwcGVyQ291bnQpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MSxCOjEsQzoxLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0XG5cdFx0XHR3cmFwcGVyLnJlY2FsY1N0eWxlKClcblx0XHRcdGV4cGVjdCh3cmFwcGVyQ291bnQpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MSxCOjEsQzoxLEQ6MCxFOjAsRjowLEc6MFxuXHRcdFx0XG5cdFx0XHR3cmFwcGVyLnJlY2FsY1N0eWxlKHRydWUpXG5cdFx0XHRleHBlY3Qod3JhcHBlckNvdW50KS50by5lcXVhbCAzXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjIsQjoyLEM6MixEOjAsRTowLEY6MCxHOjBcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjIsQjoyLEM6MixEOjEsRTowLEY6MCxHOjBcblxuXHRcdFx0d3JhcHBlci5yZWNhbGNTdHlsZSgpXG5cdFx0XHRleHBlY3Qod3JhcHBlckNvdW50KS50by5lcXVhbCA0XG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjIsQjoyLEM6MixEOjEsRTowLEY6MCxHOjBcblx0XHRcdFxuXHRcdFx0d3JhcHBlci5yZWNhbGNTdHlsZSgxKVxuXHRcdFx0ZXhwZWN0KHdyYXBwZXJDb3VudCkudG8uZXF1YWwgNVxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQTozLEI6MyxDOjIsRDoyLEU6MCxGOjAsRzowXG5cblxuXHRcdHRlc3QgXCJJZiBvcHRpb25zLnJlY2FsY09uUmVzaXplIGlzIHNldCwgLnJlY2FsY1N0eWxlKCkgd2lsbCBiZSBpbnZva2VkIG9uIGVhY2ggcmVzaXplIGV2ZW50XCIsICgpLT5cblx0XHRcdGNvdW50ID0gQTowLEI6MCxDOjAsRDowXG5cdFx0XHREb20uZGl2XG5cdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdHdpZHRoOiAoKS0+ICsrY291bnQuQVxuXHRcdFx0XHRcdG9wYWNpdHk6IDFcblx0XHRcdFx0XHRoZWlnaHQ6ICgpLT4gKytjb3VudC5CXG5cdFx0XHRcblx0XHRcdERvbS5kaXZcblx0XHRcdFx0cmVjYWxjT25SZXNpemU6IHRydWVcblx0XHRcdFx0c3R5bGU6XG5cdFx0XHRcdFx0d2lkdGg6ICgpLT4gKytjb3VudC5DXG5cdFx0XHRcdFx0b3BhY2l0eTogMVxuXHRcdFx0XHRcdGhlaWdodDogKCktPiArK2NvdW50LkRcblxuXHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgQToxLEI6MSxDOjEsRDoxXG5cdFx0XHRcblx0XHRcdERvbSh3aW5kb3cpLmVtaXQgJ3Jlc2l6ZSdcblx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIEE6MSxCOjEsQzoyLEQ6MlxuXHRcdFx0XG5cdFx0XHREb20od2luZG93KS5lbWl0ICdyZXNpemUnXG5cdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBBOjEsQjoxLEM6MyxEOjNcblxuXG5cdFx0dGVzdCBcIklmIG9wdGlvbnMuZm9yY2VTdHlsZSBpcyBzZXQsIGFsbCByZWdpc3RlcmVkIHN0eWxlcyB3aWxsIGhhdmUgdGhlICchaW1wb3J0YW50JyBmbGFnIHNldFwiLCAoKS0+XG5cdFx0XHRzdHlsZSA9IERPTS5zdHlsZShwcm9wczppbm5lckhUTUw6XCIudGhlRGl2IHt3aWR0aDo1MHB4fVwiKVxuXHRcdFx0ZGl2QSA9IERPTS5kaXYoY2xhc3NOYW1lOid0aGVEaXYnLCBzdHlsZTp7d2lkdGg6MTAwLCBoZWlnaHQ6MTAwfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdkIgPSBET00uZGl2KGNsYXNzTmFtZTondGhlRGl2Jywgc3R5bGU6e3dpZHRoOjEwMCwgaGVpZ2h0OjEwMH0sIGZvcmNlU3R5bGU6dHJ1ZSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzEwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdkIuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzEwMHB4J1xuXHRcdFx0XG5cdFx0XHRzdHlsZS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKVxuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzUwcHgnXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMTAwcHgnXG5cdFx0XHRcblx0XHRcdGV4cGVjdChkaXZBLmF0dHIoJ3N0eWxlJykgaXMgJycgb3IgZGl2QS5hdHRyKCdzdHlsZScpIGlzIG51bGwpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXZCLmF0dHIoJ3N0eWxlJykgaXMgJycgb3IgZGl2Qi5hdHRyKCdzdHlsZScpIGlzIG51bGwpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdHlsZSAnd2lkdGgnLCAoKS0+IDc1XG5cdFx0XHRkaXZCLnN0eWxlICd3aWR0aCcsICgpLT4gNzVcblx0XHRcdGRpdkEuc3R5bGUgJ2hlaWdodCcsIDg1XG5cdFx0XHRkaXZCLnN0eWxlICdoZWlnaHQnLCA4NVxuXHRcdFx0ZXhwZWN0KGRpdkEuYXR0ciAnc3R5bGUnKS5ub3QudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXZCLmF0dHIgJ3N0eWxlJykubm90LnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZGl2QS5hdHRyICdzdHlsZScpLm5vdC50by5pbmNsdWRlICc3NXB4ICFpbXBvcnRhbnQnXG5cdFx0XHRleHBlY3QoZGl2Qi5hdHRyICdzdHlsZScpLnRvLmluY2x1ZGUgJzc1cHggIWltcG9ydGFudCdcblx0XHRcdGV4cGVjdChkaXZBLmF0dHIgJ3N0eWxlJykubm90LnRvLmluY2x1ZGUgJzg1cHggIWltcG9ydGFudCdcblx0XHRcdGV4cGVjdChkaXZCLmF0dHIgJ3N0eWxlJykudG8uaW5jbHVkZSAnODVweCAhaW1wb3J0YW50J1xuXHRcdFx0ZXhwZWN0KGRpdkEuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzc1cHgnXG5cdFx0XHRleHBlY3QoZGl2Qi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnNzVweCdcblx0XHRcdHN0eWxlLnJlbW92ZSgpXG5cblxuXHRcdHRlc3QgXCIuc2hvdygpLy5oaWRlKCkgd2lsbCB0b2dnbGUgdGhlIGVsZW1lbnQncyB2aXNpYmlsaXR5XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyBzYW5kYm94XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlKCdkaXNwbGF5JykpLnRvLmVxdWFsICdibG9jaydcblxuXHRcdFx0ZGl2LmhpZGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnbm9uZSdcblxuXHRcdFx0ZGl2LnNob3coKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnYmxvY2snXG5cblx0XHRcdGRpdi5zaG93KClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ2Jsb2NrJ1xuXG5cblx0XHR0ZXN0IFwiLnNob3coKSB3aWxsIHNldCB0aGUgZWxlbWVudCdzIGRpc3BsYXkgc3R5bGUgdG8gdGhlIHByb3ZpZGVkIGFyZ3VtZW50LCBvciB0byB0aGUgdmFsdWUgcHJvdmlkZWQgaW4gdGhlIHN0eWxlIG9iamVjdFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KHN0eWxlOmRpc3BsYXk6J2lubGluZScpLmFwcGVuZFRvIHNhbmRib3hcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ2lubGluZSdcblxuXHRcdFx0ZGl2LmhpZGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnbm9uZSdcblxuXHRcdFx0ZGl2LnNob3coKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSgnZGlzcGxheScpKS50by5lcXVhbCAnaW5saW5lJ1xuXG5cdFx0XHRkaXYuaGlkZSgpXG5cdFx0XHRkaXYuc2hvdygnaW5saW5lLWJsb2NrJylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUoJ2Rpc3BsYXknKSkudG8uZXF1YWwgJ2lubGluZS1ibG9jaydcblxuXG5cdFx0dGVzdCBcIlNWRyBlbGVtZW50c1wiLCAoKS0+XG5cdFx0XHRzdmcgPSBEb20oXG5cdFx0XHRcdFsnKnN2Zydcblx0XHRcdFx0XHRzdHlsZTpcblx0XHRcdFx0XHRcdGRpc3BsYXk6ICdibG9jaydcblx0XHRcdFx0XHRcdHdpZHRoOiAxMFxuXHRcdFx0XHRcdFx0aGVpZ2h0OiAxMFxuXHRcdFx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdFx0XHR3aWR0aDogMjBcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiAyMFxuXHRcdFx0XHRdXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChzdmcuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzEwcHgnXG5cdFx0XHRleHBlY3Qoc3ZnLnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMTBweCdcblxuXHRcdFx0c3ZnLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3Qoc3ZnLnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyMHB4J1xuXHRcdFx0ZXhwZWN0KHN2Zy5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzIwcHgnXG5cblxuXG5cblx0c3VpdGUgXCJTdGF0ZVwiLCAoKS0+XG5cdFx0dGVzdCBcIlN0YXRlcyBjYW4gYmUgcG9sbGVkIGZvciBhIHZhbHVlIGJ5IHBhc3Npbmcgb25seSB0aGUgdGFyZ2V0IHN0YXRlJ3MgbmFtZSB0byAuc3RhdGUgJiBjYW4gYmUgdG9nZ2xlZCBvbi9vZmYgYnkgcGFzc2luZyBhIHNlY29uZCBhcmd1bWVudFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KClcblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnZnVubnknKS50by5iZS5mYWxzZVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55JywgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnZnVubnknKS50by5iZS50cnVlXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCB0cnVlXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdmdW5ueScsIGZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnJGZ1bm55JywgdHJ1ZVxuXHRcdFx0ZGl2LnN0YXRlICckYmFzZScsIHRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYmFzZScpLnRvLmJlLmZhbHNlXG5cblxuXHRcdHRlc3QgXCJBIGtleTp2YWx1ZSBwYWlyIG9iamVjdCBjYW4gYmUgcGFzc2VkIHRvIHRvZ2dsZSBzdGF0ZSBmb3IgbXVsdGlwbGUgc3RhdGVzIGF0IG9uY2VcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2EnKS50by5lcXVhbCBmYWxzZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYicpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdjJykudG8uZXF1YWwgZmFsc2VcblxuXHRcdFx0ZGl2LnN0YXRlIGE6dHJ1ZSxiOjFcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2EnKS50by5lcXVhbCB0cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiJykudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYycpLnRvLmVxdWFsIGZhbHNlXG5cblx0XHRcdGRpdi5zdGF0ZSBiOmZhbHNlLGM6J3knXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdhJykudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYicpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdjJykudG8uZXF1YWwgdHJ1ZVxuXG5cblx0XHR0ZXN0IFwiLnN0YXRlKCkgd2l0aG91dCBhcmd1bWVudHMgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBhY3RpdmUgc3RhdGVzXCIsICgpLT5cblx0XHRcdGVsID0gRE9NLmRpdigpXG5cdFx0XHRleHBlY3QoZWwuc3RhdGUoKSkudG8uZXFsIFtdXG5cblx0XHRcdGVsLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRlbC5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoZWwuc3RhdGUoKSkudG8uZXFsIFsnaGFwcHknLCdyZWxheGVkJ11cblxuXHRcdFx0ZWwuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoZWwuc3RhdGUoKSkudG8uZXFsIFsncmVsYXhlZCddXG5cblx0XHRcdGVsLnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZWwuc3RhdGUoKSkudG8uZXFsIFsncmVsYXhlZCcsJ2hhcHB5J11cblxuXG5cdFx0dGVzdCBcIkFsbCBzdGF0ZXMgY2FuIGJlIGNsZWFyZWQvdG9nZ2xlZCBvZmYgdmlhIC5yZXNldFN0YXRlXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55Jywgb25cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Z1bm55JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXG5cdFx0XHRkaXYucmVzZXRTdGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdmdW5ueScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUuZmFsc2VcblxuXG5cdFx0dGVzdCBcIkEgc3RhdGUgY2FuIGJlIHRvZ2dsZWQgb24vb2ZmIHZpYSAudG9nZ2xlU3RhdGVcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRE9NLmRpdigpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXYudG9nZ2xlU3RhdGUoJ2hhcHB5Jylcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZVN0YXRlKCdoYXBweScpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0XG5cdFx0XHRkaXYudG9nZ2xlU3RhdGUoJ2hhcHB5Jylcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblxuXG5cdFx0dGVzdCBcIlN0eWxlcyBjYW4gYmUgcGFzc2VkIHVuZGVyIHNwZWNpZmljIHN0YXRlcyB1c2luZyBhICckJyBwcmVmaXggYmVmb3JlIHRoZSBzdGF0ZSBuYW1lXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdCRiYXNlOlxuXHRcdFx0XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICcxNXB4J1xuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0d2lkdGg6ICcyNXB4J1xuXHRcdFx0XHRcdG1hcmdpblRvcDogJzIwcHgnXG5cdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdHdpZHRoOiAnMzVweCdcblx0XHRcdFx0XHRtYXJnaW5MZWZ0OiAnMTJweCdcblxuXHRcdFx0ZGl2LmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYuZWwpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luTGVmdCkudG8uZXF1YWwoJzBweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luVG9wKS50by5lcXVhbCgnMjBweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0KS50by5lcXVhbCgnMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luVG9wKS50by5lcXVhbCgnMHB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQpLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzM1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcyMHB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCczNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUubWFyZ2luVG9wKS50by5lcXVhbCgnMHB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQpLnRvLmVxdWFsKCcxMnB4JylcblxuXG5cdFx0dGVzdCBcIkEgc3RhdGU6ZXZlbnROYW1lIChvciBzdGF0ZTpldmVudE9wdHMpIG1hcCBjYW4gYmUgcGFzc2VkIHNldCBmb3Igb3B0aW9ucy5zdGF0ZVRyaWdnZXJzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoXG5cdFx0XHRcdHN0YXRlVHJpZ2dlcnM6XG5cdFx0XHRcdFx0aGFwcHk6IHtvbjonYmVjYW1lSGFwcHknLCBvZmY6J2JlY2FtZVNhZCd9XG5cdFx0XHRcdFx0cmVsYXhlZDogJ2lzUmVsYXhlZCcgXG5cdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdCRiYXNlOlx0XHR3aWR0aDogJzE1cHgnXG5cdFx0XHRcdFx0JGhhcHB5Olx0XHR3aWR0aDogJzI1cHgnXG5cdFx0XHRcdFx0JHJlbGF4ZWQ6XHR3aWR0aDogJzM1cHgnXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYuZWwpXG5cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4JylcblxuXHRcdFx0ZGl2LmVtaXQoJ2JlY2FtZUhhcHB5Jylcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXG5cdFx0XHRkaXYuZW1pdCgnaXNSZWxheGVkJylcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMzVweCcpXG5cblx0XHRcdGRpdi5lbWl0KCdiZWNhbWVTYWQnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMzVweCcpXG5cblx0XHRcdGRpdi5zdGF0ZSgncmVsYXhlZCcsIG9mZilcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cblxuXHRcdHRlc3QgXCJvcHRpb25zLnN0YXRlVHJpZ2dlcnMgd29uJ3QgYmUgYXR0YWNoZWQgaWYgdGhleSBhcmVuJ3QgYmVpbmcgdXNlZCBpbiBzdHlsZSBvYmplY3RcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6eyRob3ZlcjogZGlzcGxheTonYmxvY2snfSlcblx0XHRcdGRpdkIgPSBEb20uZGl2KHN0eWxlOnskZm9jdXM6IGRpc3BsYXk6J2Jsb2NrJ30pXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZGl2Qi5lbC5lbWl0RXZlbnQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb2ZmXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZGl2Qi5lbC5lbWl0RXZlbnQgJ21vdXNlbGVhdmUnXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXZBLmVsLmVtaXRFdmVudCAnZm9jdXMnXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnZm9jdXMnXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9uXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdibHVyJ1xuXHRcdFx0ZGl2Qi5lbC5lbWl0RXZlbnQgJ2JsdXInXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9mZlxuXG5cblx0XHR0ZXN0IFwib3B0aW9ucy5zdGF0ZVRyaWdnZXJzIGNhbiBiZSBmb3JjZWQgdG8gYmUgYXR0YWNoZWQgZXZlbiBpZiB0aGV5IGFyZW4ndCBiZWluZyB1c2VkIGluIHN0eWxlIG9iamVjdCB2aWEgLl9hdHRhY2hTdGF0ZUV2ZW50cyh0cnVlKVwiLCAoKS0+XG5cdFx0XHRhdHRhY2hTdGF0ZUV2ZW50cyA9IGlmIERvbS5kaXYoKS5fYXR0YWNoU3RhdGVFdmVudHMgdGhlbiAnX2F0dGFjaFN0YXRlRXZlbnRzJyBlbHNlICdfYWUnXG5cdFx0XHRkaXZBID0gRG9tLmRpdihzdHlsZTp7JGhvdmVyOiBkaXNwbGF5OidibG9jayd9KVxuXHRcdFx0ZGl2QiA9IERvbS5kaXYoc3R5bGU6eyRmb2N1czogZGlzcGxheTonYmxvY2snfSlcblx0XHRcdGRpdkFbYXR0YWNoU3RhdGVFdmVudHNdKHRydWUpXG5cdFx0XHRkaXZCW2F0dGFjaFN0YXRlRXZlbnRzXSh0cnVlKVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXZBLmVsLmVtaXRFdmVudCAnbW91c2VlbnRlcidcblx0XHRcdGRpdkIuZWwuZW1pdEV2ZW50ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJ2hvdmVyJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9uXG5cblx0XHRcdGRpdkEuZWwuZW1pdEV2ZW50ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZGl2Qi5lbC5lbWl0RXZlbnQgJ21vdXNlbGVhdmUnXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaG92ZXInKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdob3ZlcicpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXZBLmVsLmVtaXRFdmVudCAnZm9jdXMnXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnZm9jdXMnXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnZm9jdXMnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2QS5lbC5lbWl0RXZlbnQgJ2JsdXInXG5cdFx0XHRkaXZCLmVsLmVtaXRFdmVudCAnYmx1cidcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdmb2N1cycpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2ZvY3VzJykudG8uZXF1YWwgb2ZmXG5cblxuXHRcdHRlc3QgXCJUaGUgaG92ZXIgYW5kIGZvY3VzIHN0YXRlcyB3aWxsIGJlIGxpc3RlbmVkIGZvciBhbmQgdG9nZ2xlZCBieSBkZWZhdWx0IGJ5IHRoZWlyIGFwcHJvcHJpYXRlIGV2ZW50c1wiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHQkYmFzZTpcblx0XHRcdFx0XHR3aWR0aDogJzE1cHgnXG5cdFx0XHRcdFx0aGVpZ2h0OiAnMTVweCdcblx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoNDUsIDQ1LCA0NSknXG5cdFx0XHRcdCRob3Zlcjpcblx0XHRcdFx0XHR3aWR0aDogJzI1cHgnXG5cdFx0XHRcdFx0bWFyZ2luVG9wOiAnMjBweCdcblx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMTU1LCAxNTUsIDE1NSknXG5cdFx0XHRcdCRmb2N1czpcblx0XHRcdFx0XHR3aWR0aDogJzM1cHgnXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiAncmdiKDIwMCwgMjAwLCAyMDApJ1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzBweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdiYWNrZ3JvdW5kQ29sb3InLCAncmdiKDQ1LCA0NSwgNDUpJylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUubWFyZ2luVG9wKS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICcyNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ21hcmdpblRvcCcsICcyMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoMTU1LCAxNTUsIDE1NSknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzBweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdiYWNrZ3JvdW5kQ29sb3InLCAncmdiKDQ1LCA0NSwgNDUpJylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUubWFyZ2luVG9wKS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZW50ZXInXG5cdFx0XHRkaXYuZW1pdCAnZm9jdXMnXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCd3aWR0aCcsICczNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2hlaWdodCcsICcxNXB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ21hcmdpblRvcCcsICcyMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ2JhY2tncm91bmRDb2xvcicsICdyZ2IoMjAwLCAyMDAsIDIwMCknKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5zdHlsZS5tYXJnaW5Ub3ApLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzM1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnbWFyZ2luVG9wJywgJzBweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdiYWNrZ3JvdW5kQ29sb3InLCAncmdiKDIwMCwgMjAwLCAyMDApJylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUubWFyZ2luVG9wKS50by5lcXVhbCgnJylcblxuXG5cdFx0dGVzdCBcIklmIG5vdCBwYXNzZWQgYSBzdHlsZSBtYXAgdW5kZXIgdGhlICdiYXNlJyBzdGF0ZSwgYWxsIG5vbi1zdGF0ZSBwcm9wZXJ0aWVzIG9uIHRoZSBzdHlsZSBvYmplY3Qgd2lsbCBiZSBjb25zaWRlcmVkIGFzICdiYXNlJyBzdGF0ZSBwcm9wZXJ0aWVzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0aGVpZ2h0OiAnMjBweCdcblx0XHRcdFx0JGhvdmVyOlxuXHRcdFx0XHRcdHdpZHRoOiAnMjVweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcyMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ21vdXNlZW50ZXInXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMzBweCcpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcxNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzIwcHgnKVxuXG5cblx0XHR0ZXN0IFwiU3RhdGUtc3BlY2lmaWMgc3R5bGVzIHdpbGwgYmUgcmVtb3ZlZCB1cG9uIHN0YXRlIHR1cm4gb2ZmIG9yIHJlc3RvcmVkIHRvIHRoZSBiYXNlIHZhbHVlXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHdpZHRoOiAnMTVweCdcblx0XHRcdFx0JGhvdmVyOlxuXHRcdFx0XHRcdHdpZHRoOiAnMjVweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblx0XHRcdGV4cGVjdChkaXYuZWwpLnRvLmhhdmUuc3R5bGUoJ3dpZHRoJywgJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnaGVpZ2h0JywgJzBweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWVudGVyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMjVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMzBweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdi5lbWl0ICdtb3VzZWxlYXZlJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbCkudG8uaGF2ZS5zdHlsZSgnd2lkdGgnLCAnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LmVsKS50by5oYXZlLnN0eWxlKCdoZWlnaHQnLCAnMHB4Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnJylcblxuXG5cdFx0dGVzdCBcIkhpZ2hlciBvcmRlciBzdGF0ZSBzdHlsZXMgd2lsbCBoYXZlIGEgaGlnaGVyIHByZWNlZGVuY2UgdGhhbiB0aGUgJ2Jhc2UnIHN0eWxlIHRvIGJlIHVzZWQgYXMgcmVwbGFjbWVudHMgZm9yIHBlbmRpbmctcmVtb3ZhbCBzdGF0ZS1zdHlsZXNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0d2lkdGg6ICcxNXB4J1xuXHRcdFx0XHQkaG92ZXI6XG5cdFx0XHRcdFx0d2lkdGg6ICcyNXB4J1xuXHRcdFx0XHRcdGhlaWdodDogJzMwcHgnXG5cdFx0XHRcdCRmb2N1czpcblx0XHRcdFx0XHRoZWlnaHQ6ICc0NXB4J1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRpdi5lbClcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcwcHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczMHB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ2ZvY3VzJ1xuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUud2lkdGgpLnRvLmVxdWFsKCcyNXB4Jylcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzQ1cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuZW1pdCAnbW91c2VsZWF2ZSdcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCc0NXB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ2JsdXInXG5cdFx0XHRkaXYuZW1pdCAnZm9jdXMnXG5cdFx0XHRkaXYuZW1pdCAnbW91c2VlbnRlcidcblx0XHRcdGV4cGVjdChjb21wdXRlZFN0eWxlLndpZHRoKS50by5lcXVhbCgnMjVweCcpXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCc0NXB4Jylcblx0XHRcdFxuXHRcdFx0ZGl2LmVtaXQgJ2JsdXInXG5cdFx0XHRleHBlY3QoY29tcHV0ZWRTdHlsZS53aWR0aCkudG8uZXF1YWwoJzI1cHgnKVxuXHRcdFx0ZXhwZWN0KGNvbXB1dGVkU3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMzBweCcpXG5cblxuXHRcdHRlc3QgXCJTdGF0ZSB0b2dnbGVzIHdpbGwgYmUgcGFzc2VkIHRvIGNoaWxkcmVuIGVsZW1lbnRzIHVubGVzcyBvcHRpb25zLnBhc3NTdGF0ZVRvQ2hpbGRyZW4gaXMgb2ZmXCIsICgpLT5cblx0XHRcdE1haW4gPSBEb20uZGl2KClcblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oTWFpbilcblx0XHRcdEIgPSBEb20uZGl2KCkuYXBwZW5kVG8oQSlcblx0XHRcdEMgPSBEb20uZGl2KHBhc3NTdGF0ZVRvQ2hpbGRyZW46ZmFsc2UpLmFwcGVuZFRvKEEpXG5cblx0XHRcdGV4cGVjdChNYWluLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoQS5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChDLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cblx0XHRcdE1haW4uc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChNYWluLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChCLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChDLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblxuXHRcdFx0TWFpbi5vcHRpb25zLnBhc3NTdGF0ZVRvQ2hpbGRyZW4gPSBmYWxzZVxuXHRcdFx0TWFpbi5zdGF0ZSAnaGFwcHknLCBmYWxzZVxuXHRcdFx0ZXhwZWN0KE1haW4uc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChCLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChDLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblxuXHRcdFx0TWFpbi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0TWFpbi5vcHRpb25zLnBhc3NTdGF0ZVRvQ2hpbGRyZW4gPSB0cnVlXG5cdFx0XHRBLm9wdGlvbnMucGFzc1N0YXRlVG9DaGlsZHJlbiA9IGZhbHNlXG5cdFx0XHRNYWluLnN0YXRlICdoYXBweScsIGZhbHNlXG5cdFx0XHRleHBlY3QoTWFpbi5zdGF0ZSAnaGFwcHknKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChCLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChDLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblxuXG5cdFx0dGVzdCBcIlN0YXRlIHN0eWxlcyBjYW4gYmUgbmVzdGVkIHRvIHRyaWdnZXIgd2hlbiBhbGwgc3RhdGVzIGFyZSB0b2dnbGVkIG9uXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdCRiYXNlOlxuXHRcdFx0XHRcdHdpZHRoOiAnMTJweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICcxMnB4J1xuXHRcdFx0XHRcdGZvbnRTaXplOiAnMTBweCdcblx0XHRcdFx0JGZ1bm55OlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMTVweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICcxNXB4J1xuXHRcdFx0XHRcdCMgd2lkdGg6ICcxMHB4J1xuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0d2lkdGg6ICcxNHB4J1xuXHRcdFx0XHRcdGZvbnRTaXplOiAnMTRweCdcblx0XHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRcdGhlaWdodDogJzExcHgnXG5cdFx0XHRcdFx0XHRmb250U2l6ZTogJzE3cHgnXG5cdFx0XHRcdFx0XHQkZnVubnk6XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiAnMTBweCdcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiAnMTRweCdcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0d2lkdGg6ICcxN3B4J1xuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzEycHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzEycHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTBweCcpXG5cblx0XHRcdGRpdi5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTVweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxNXB4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdmdW5ueScsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxMHB4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxNHB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMnB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzE0cHgnKVxuXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTdweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTFweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxN3B4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCgnMTdweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCgnMTJweCcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsKCcxMHB4JylcblxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsKCcxN3B4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsKCcxMXB4Jylcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoJzE3cHgnKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2Z1bm55Jywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzEwcHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzE0cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTdweCcpXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwoJzE3cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwoJzE1cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCgnMTVweCcpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQucmVjdCBzaG91bGQgY29udGFpbiBhbiB1cGRhdGVkIHZlcnNpb24gb2YgdGhlIGVsZW1lbnQncyBDbGllbnRSZWN0XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0cmVjdEEgPSBkaXYucmVjdFxuXHRcdFx0cmVjdEIgPSBkaXYucmVjdFxuXG5cdFx0XHRleHBlY3QocmVjdEEpLnRvLmJlLmluc3RhbmNlT2YoQ2xpZW50UmVjdClcblx0XHRcdGV4cGVjdChyZWN0QikudG8uYmUuaW5zdGFuY2VPZihDbGllbnRSZWN0KVxuXHRcdFx0ZXhwZWN0KHJlY3RBKS50by5lcWwocmVjdEIpXG5cblxuXHRcdFx0ZGl2LnN0eWxlICd3aWR0aCcsICc3cHgnXG5cdFx0XHRyZWN0QyA9IGRpdi5yZWN0XG5cdFx0XHRleHBlY3QocmVjdEMpLnRvLmJlLmluc3RhbmNlT2YoQ2xpZW50UmVjdClcblx0XHRcdGV4cGVjdChyZWN0QSkudG8uZXFsKHJlY3RCKVxuXHRcdFx0ZXhwZWN0KHJlY3RBKS5ub3QudG8uZXFsKHJlY3RDKVxuXHRcdFx0ZXhwZWN0KHJlY3RBLndpZHRoKS5ub3QudG8uZXF1YWwoNylcblx0XHRcdGV4cGVjdChyZWN0Qi53aWR0aCkubm90LnRvLmVxdWFsKDcpXG5cdFx0XHRleHBlY3QocmVjdEMud2lkdGgpLnRvLmVxdWFsKDcpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQud2lkdGggc2hvdWxkIHJldHVybiB0aGUgdXBkYXRlZCB2ZXJzaW9uIG9mIGFuIGVsZW1lbnQncyBjb21wdXRlZCB3aWR0aFwiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdHBhcmVudC5zdHlsZSB3aWR0aDonMTAwMHB4J1xuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOic1MCUnXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCg1MDApXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDonMTAlJ1xuXHRcdFx0ZXhwZWN0KGRpdi53aWR0aCkudG8uZXF1YWwoMTAwKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6Jzk3cHgnXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCg5NylcblxuXG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC5oZWlnaHQgc2hvdWxkIHJldHVybiB0aGUgdXBkYXRlZCB2ZXJzaW9uIG9mIGFuIGVsZW1lbnQncyBjb21wdXRlZCBoZWlnaHRcIiwgKCktPlxuXHRcdFx0cGFyZW50ID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KCkuYXBwZW5kVG8ocGFyZW50KVxuXHRcdFx0XG5cdFx0XHRwYXJlbnQuc3R5bGUgaGVpZ2h0OicxMDAwcHgnXG5cdFx0XHRkaXYuc3R5bGUgaGVpZ2h0Oic1MCUnXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoNTAwKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgaGVpZ2h0OicxMCUnXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoMTAwKVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgaGVpZ2h0Oic5N3B4J1xuXHRcdFx0ZXhwZWN0KGRpdi5oZWlnaHQpLnRvLmVxdWFsKDk3KVxuXG5cdFx0XG5cdFx0dGVzdCBcIlF1aWNrRWxlbWVudC53aWR0aC8uaGVpZ2h0IHNldHRlcnMgYXJlIHNob3J0Y3V0cyBmb3IgLnN0eWxlKCkgc2V0dGVyc1wiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKS5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRcblx0XHRcdHBhcmVudC5zdHlsZSB3aWR0aDonMTAwMHB4JywgaGVpZ2h0OicxMDAwcHgnXG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6JzUwJScsIGhlaWdodDonNTAlJ1xuXHRcdFx0ZGl2LndpZHRoID0gZGl2LmhlaWdodCA9ICc1MCUnXG5cdFx0XHRleHBlY3QoZGl2LndpZHRoKS50by5lcXVhbCg1MDApXG5cdFx0XHRleHBlY3QoZGl2LmhlaWdodCkudG8uZXF1YWwoNTAwKVxuXHRcdFx0XG5cdFx0XHRkaXYud2lkdGggPSBkaXYuaGVpZ2h0ID0gJzEwJSdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDEwMClcblx0XHRcdGV4cGVjdChkaXYuaGVpZ2h0KS50by5lcXVhbCgxMDApXG5cdFx0XHRcblx0XHRcdGRpdi53aWR0aCA9IGRpdi5oZWlnaHQgPSAnOTdweCdcblx0XHRcdGV4cGVjdChkaXYud2lkdGgpLnRvLmVxdWFsKDk3KVxuXHRcdFx0ZXhwZWN0KGRpdi5oZWlnaHQpLnRvLmVxdWFsKDk3KVxuXG5cblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50Lm9yaWVudGF0aW9uIHNob3VsZCByZXR1cm4gdGhlIHVwZGF0ZWQgdmVyc2lvbiBvZiBhbiBlbGVtZW50J3MgY29tcHV0ZWQgb3JpZW50YXRpb25cIiwgKCktPlxuXHRcdFx0cGFyZW50ID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KCkuYXBwZW5kVG8ocGFyZW50KVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NTAwLCBoZWlnaHQ6NDAwXG5cdFx0XHRleHBlY3QoZGl2Lm9yaWVudGF0aW9uKS50by5lcXVhbCgnbGFuZHNjYXBlJylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjU1MCwgaGVpZ2h0OjYwMFxuXHRcdFx0ZXhwZWN0KGRpdi5vcmllbnRhdGlvbikudG8uZXF1YWwoJ3BvcnRyYWl0Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjYwMCwgaGVpZ2h0OjYwMFxuXHRcdFx0ZXhwZWN0KGRpdi5vcmllbnRhdGlvbikudG8uZXF1YWwoJ3BvcnRyYWl0Jylcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlIHdpZHRoOjYwMSwgaGVpZ2h0OjYwMFxuXHRcdFx0ZXhwZWN0KGRpdi5vcmllbnRhdGlvbikudG8uZXF1YWwoJ2xhbmRzY2FwZScpXG5cblxuXHRcdHRlc3QgXCJRdWlja0VsZW1lbnQuYXNwZWN0UmF0aW8gc2hvdWxkIHJldHVybiB0aGUgdXBkYXRlZCB2ZXJzaW9uIG9mIGFuIGVsZW1lbnQncyBjb21wdXRlZCBhc3BlY3QtcmF0aW9cIiwgKCktPlxuXHRcdFx0cGFyZW50ID0gRG9tLmRpdigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRkaXYgPSBEb20uZGl2KCkuYXBwZW5kVG8ocGFyZW50KVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NTAwLCBoZWlnaHQ6NDAwXG5cdFx0XHRleHBlY3QoZGl2LmFzcGVjdFJhdGlvKS50by5lcXVhbCgxLjI1KVxuXHRcdFx0XG5cdFx0XHRkaXYuc3R5bGUgd2lkdGg6NTQwLCBoZWlnaHQ6NjAwXG5cdFx0XHRleHBlY3QoZGl2LmFzcGVjdFJhdGlvKS50by5lcXVhbCgwLjkpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDo2MDAsIGhlaWdodDo2MDBcblx0XHRcdGV4cGVjdChkaXYuYXNwZWN0UmF0aW8pLnRvLmVxdWFsKDEpXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSB3aWR0aDozMDAsIGhlaWdodDo5MDBcblx0XHRcdGV4cGVjdChkaXYuYXNwZWN0UmF0aW8pLnRvLmVxdWFsKDAuMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMpXG5cblxuXHRcdHRlc3QgXCJJZiBvcHRpb25zLnN0eWxlQWZ0ZXJJbnNlcnQgaXMgcGFzc2VkLCBmdW5jdGlvbiBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIG9ubHkgYWZ0ZXIgdGhlIGVsZW1lbnQgaXMgaW5zZXJ0ZWQgaW50byB0aGUgRE9NXCIsICgpLT5cblx0XHRcdHBhcmVudE9wYWNpdHlHZXR0ZXIgPSAoKS0+IGlmIEBwYXJlbnQgdGhlbiBAcGFyZW50LnN0eWxlKCdvcGFjaXR5JykgZWxzZSAnMC41J1xuXHRcdFx0ZGl2UmVnID0gRG9tLmRpdihzdHlsZTp7aGVpZ2h0OicxOXB4Jywgb3BhY2l0eTpwYXJlbnRPcGFjaXR5R2V0dGVyfSlcblx0XHRcdGRpdkEgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6JzE5cHgnLCBvcGFjaXR5OnBhcmVudE9wYWNpdHlHZXR0ZXJ9LCBzdHlsZUFmdGVySW5zZXJ0OnRydWUpXG5cdFx0XHRkaXZCID0gRG9tLmRpdihzdHlsZTp7aGVpZ2h0OicxOXB4Jywgb3BhY2l0eTpwYXJlbnRPcGFjaXR5R2V0dGVyfSwgc3R5bGVBZnRlckluc2VydDp0cnVlKVxuXHRcdFx0ZGl2QyA9IERvbS5kaXYoc3R5bGU6e2hlaWdodDonMTlweCcsIG9wYWNpdHk6cGFyZW50T3BhY2l0eUdldHRlcn0sIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZSlcblxuXHRcdFx0Y2xhc3NOYW1lID0gZGl2UmVnLnJhdy5jbGFzc05hbWUgb3IgJ25vIGNsYXNzTmFtZSdcblx0XHRcdGV4cGVjdChkaXZSZWcucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwoY2xhc3NOYW1lKVxuXHRcdFx0ZXhwZWN0KGRpdkEucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwoY2xhc3NOYW1lKVxuXHRcdFx0ZXhwZWN0KGRpdkIucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwoY2xhc3NOYW1lKVxuXHRcdFx0ZXhwZWN0KGRpdkMucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwoY2xhc3NOYW1lKVxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnMC41Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qy5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2QS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KGRpdkIuZWwuc3R5bGUub3BhY2l0eSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qy5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2Qi5pbnNlcnRCZWZvcmUoc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZCLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcnKVxuXHRcdFx0XG5cdFx0XHRzYW5kYm94LmFwcGVuZENoaWxkKGRpdkMuZWwpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnMScpXG5cdFx0XHRleHBlY3QoZGl2Qi5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnMScpXG5cdFx0XHRleHBlY3QoZGl2Qy5lbC5zdHlsZS5vcGFjaXR5KS50by5lcXVhbCgnJylcblx0XHRcdFxuXHRcdFx0ZGl2Qy5wYXJlbnRcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZCLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGV4cGVjdChkaXZDLmVsLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsKCcxJylcblx0XHRcdGRpdkMuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0dGVzdCBcIkFueSBzdHlsZXMgYXBwbGllZCBieSBzdGF0ZXMgYmVmb3JlIHRoZSBlbGVtZW50IGhhcyBiZWVuIGluc2VydGVkIGludG8gdGhlIERPTSBhbmQgd2hlbiBvcHRpb25zLnN0eWxlQWZ0ZXJJbnNlcnQgaXMgb24gd2lsbCBiZSByZS1hcHBsaWVkIGFmdGVyIGluc2VydFwiLCAoKS0+XG5cdFx0XHRkaXZSZWcgPSBEb20uZGl2KHN0eWxlOnskYmFzZTp7aGVpZ2h0Oi0+JzE5cHgnfSwgJGZ1bm55OntoZWlnaHQ6LT4nMjlweCd9LCAkaGFwcHk6e2hlaWdodDotPiczOXB4J319KVxuXHRcdFx0ZGl2QSA9IERvbS5kaXYoc3R5bGU6eyRiYXNlOntoZWlnaHQ6LT4nMTlweCd9LCAkZnVubnk6e2hlaWdodDotPicyOXB4J30sICRoYXBweTp7aGVpZ2h0Oi0+JzM5cHgnfX0sIHN0eWxlQWZ0ZXJJbnNlcnQ6dHJ1ZSlcblxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cblx0XHRcdGRpdlJlZy5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAnZnVubnknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcyOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdlJlZy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cdFx0XHRcblx0XHRcdGRpdlJlZy5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2QS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCczOXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzM5cHgnKVxuXG5cblx0XHR0ZXN0IFwiSWYgYW4gZWxlbWVudCB3aXRoIG9wdGlvbnMuc3R5bGVBZnRlckluc2VydCBpcyBhcHBlbmRlZCBpbnRvIGEgZGV0YWNoZWQgZWxlbWVudCwgc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBvbmx5IGFmdGVyIHRoZSBwYXJlbnQgaXMgYXBwZW5kZWQgdG8gdGhlIERPTVwiLCAoKS0+XG5cdFx0XHRkZXRhY2hlZFBhcmVudCA9IERvbS5kaXYoKVxuXHRcdFx0ZGl2UmVnID0gRG9tLmRpdihzdHlsZTp7aGVpZ2h0OigtPicxOXB4JyksICRoYXBweTokcmVsYXhlZDp7d2lkdGg6LT4nMzFweCd9fSlcblx0XHRcdGRpdkEgPSBEb20uZGl2KHN0eWxlOntoZWlnaHQ6KC0+JzE5cHgnKSwgJGhhcHB5OiRyZWxheGVkOnt3aWR0aDotPiczMXB4J319LCBzdHlsZUFmdGVySW5zZXJ0OnRydWUpXG5cblx0XHRcdGRpdlJlZy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2UmVnLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGRpdkEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdkEuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZBLnN0eWxlICd2aXNpYmlsaXR5JywgJ2hpZGRlbidcblxuXHRcdFx0ZXhwZWN0KGRpdlJlZy5lbC5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxOXB4Jylcblx0XHRcdGV4cGVjdChkaXZSZWcuZWwuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCczMXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS52aXNpYmlsaXR5KS50by5lcXVhbCgnaGlkZGVuJylcblxuXHRcdFx0ZGl2QS5hcHBlbmRUbyhkZXRhY2hlZFBhcmVudClcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS53aWR0aCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2QS5lbC5zdHlsZS52aXNpYmlsaXR5KS50by5lcXVhbCgnaGlkZGVuJylcblxuXHRcdFx0ZGV0YWNoZWRQYXJlbnQuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE5cHgnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuZWwuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCczMXB4Jylcblx0XHRcdGV4cGVjdChkaXZBLmVsLnN0eWxlLnZpc2liaWxpdHkpLnRvLmVxdWFsKCdoaWRkZW4nKVxuXG5cblx0XHR0ZXN0IFwiUXVpY2tFbGVtZW50LnBpcGVTdGF0ZSBjYW4gYmUgdXNlZCB0byByZWRpcmVjdCBhbGwgc3RhdGUgdG9nZ2xlcyB0byB0aGUgcHJvdmlkZWQgdGFyZ2V0IGVsZW1lbnRcIiwgKCktPlxuXHRcdFx0cGFyZW50QSA9IERvbS5kaXYoKVxuXHRcdFx0cGFyZW50QiA9IERvbS5kaXYocGFzc1N0YXRlVG9DaGlsZHJlbjpmYWxzZSlcblx0XHRcdGRpdkEgPSBEb20uZGl2KG51bGwpLmFwcGVuZFRvKHBhcmVudEEpXG5cdFx0XHRkaXZCID0gRG9tLmRpdihudWxsKS5hcHBlbmRUbyhwYXJlbnRCKVxuXHRcdFx0Y2hpbGRBID0gRG9tLnNwYW4oKS5hcHBlbmRUbyhkaXZBKVxuXHRcdFx0Y2hpbGRCID0gRG9tLnNwYW4oKS5hcHBlbmRUbyhkaXZCKVxuXG5cdFx0XHRkaXZBLnBpcGVTdGF0ZSgpXG5cdFx0XHRkaXZBLnN0YXRlICcxJywgb25cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICcxJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnMScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICcxJykudG8uZXF1YWwgb25cblx0XHRcdFxuXHRcdFx0ZGl2QS5waXBlU3RhdGUocGFyZW50QSlcblx0XHRcdGRpdkEuc3RhdGUgJzInLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJzInKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJzInKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5zdGF0ZSAnMicpLnRvLmVxdWFsIG9uXG5cblx0XHRcdGRpdkEucGlwZVN0YXRlKGZhbHNlKVxuXHRcdFx0ZGl2QS5zdGF0ZSAnMi41Jywgb25cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICcyLjUnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICcyLjUnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5zdGF0ZSAnMi41JykudG8uZXF1YWwgb25cblx0XHRcdFxuXHRcdFx0ZGl2Qi5waXBlU3RhdGUodHJ1ZSlcblx0XHRcdGRpdkIuc3RhdGUgJzMnLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJzMnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICczJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJzMnKS50by5lcXVhbCBvblxuXHRcdFx0XG5cdFx0XHRkaXZCLnBpcGVTdGF0ZShwYXJlbnRCKVxuXHRcdFx0ZGl2Qi5zdGF0ZSAnNCcsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnNCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnNCcpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnNCcpLnRvLmVxdWFsIG9mZlxuXHRcdFx0XG5cdFx0XHRkaXZBLnBpcGVTdGF0ZShwYXJlbnRCKVxuXHRcdFx0ZGl2QS5zdGF0ZSAnNScsIG9uXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnNScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJzUnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGRpdkEuc3RhdGUgJzUnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICc1JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICc1JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICc1JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRcblx0XHRcdGRpdkEucGlwZVN0YXRlKGZhbHNlKVxuXHRcdFx0ZGl2Qi5waXBlU3RhdGUocGFyZW50QSlcblx0XHRcdGRpdkIuc3RhdGUgJzYnLCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJzYnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJzYnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICc2JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICc2JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICc2JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJzYnKS50by5lcXVhbCBvZmZcblxuXG5cdFx0dGVzdCBcIlN0YXRlcyBjYW4gYmUgbWFya2VkIGFzIHVucGFzc2FibGUgdG8gYXZvaWQgcGFzc2luZyB0byBjaGlsZHJlbiBieSBpbmNsdWRpbmcgdGhlbSBpbiBvcHRpb25zLnVucGFzc2FibGVTdGF0ZXNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdih1bnBhc3NhYmxlU3RhdGVzOiBbJ0InLCdEJ10pXG5cdFx0XHRzcGFuQSA9IERvbS5zcGFuKCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0c3BhbkIgPSBEb20uc3BhbigpLmFwcGVuZFRvKGRpdilcblx0XHRcdHN1YlNwYW4gPSBEb20uc3BhbigpLmFwcGVuZFRvKHNwYW5CKVxuXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdBJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3BhbkEuc3RhdGUgJ0EnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzcGFuQi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlNwYW4uc3RhdGUgJ0EnKS50by5lcXVhbCBvZmZcblxuXHRcdFx0ZGl2LnN0YXRlICdBJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ0EnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5BLnN0YXRlICdBJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzcGFuQi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViU3Bhbi5zdGF0ZSAnQScpLnRvLmVxdWFsIG9uXG5cblx0XHRcdGRpdi5zdGF0ZSAnQicsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdCJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzcGFuQS5zdGF0ZSAnQicpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdCJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViU3Bhbi5zdGF0ZSAnQicpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXYuc3RhdGUgJ0MnLCBvblxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnQycpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3BhbkEuc3RhdGUgJ0MnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdDJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdDJykudG8uZXF1YWwgb25cblxuXHRcdFx0ZGl2LnN0YXRlICdEJywgb25cblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ0QnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHNwYW5BLnN0YXRlICdEJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3BhbkIuc3RhdGUgJ0QnKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdEJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRcblx0XHRcdHNwYW5CLnN0YXRlICdEJywgb25cblx0XHRcdGV4cGVjdChzcGFuQi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViU3Bhbi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRcblx0XHRcdGRpdi5zdGF0ZSAnRCcsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnRCcpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHNwYW5CLnN0YXRlICdEJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJTcGFuLnN0YXRlICdEJykudG8uZXF1YWwgb25cblxuXG5cdFx0dGVzdCBcIldoZW4gLnN0YXRlKCkgcmVjZWl2ZXMgYSB0cnV0aHkgdmFsdWUgYXMgdGhlIHRoaXJkIGFyZ3VtZW50IHRoZSBldmVudCB3aWxsIGJ1YmJsZSB1cCB0byBwYXJlbnRzIGluc3RlYWQgb2YgY2FzY2FkZSB0byBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRwYXJlbnRBID0gRG9tLnNlY3Rpb24gbnVsbCxcblx0XHRcdFx0c3ViUGFyZW50QSA9IERvbS5kaXYgbnVsbCxcblx0XHRcdFx0XHRjaGlsZEEgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0XHRzdWJDaGlsZEEgPSBEb20uZGl2KClcblx0XHRcdFxuXHRcdFx0cGFyZW50QiA9IERvbS5zZWN0aW9uIG51bGwsXG5cdFx0XHRcdHN1YlBhcmVudEIgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRCID0gRG9tLmRpdiBudWxsLFxuXHRcdFx0XHRcdFx0c3ViQ2hpbGRCID0gRG9tLmRpdigpXG5cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblxuXHRcdFx0Y2hpbGRBLnN0YXRlICdoYXBweScsIG9uLCB0cnVlXG5cdFx0XHRjaGlsZEIuc3RhdGUgJ2hhcHB5Jywgb25cblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChwYXJlbnRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJQYXJlbnRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblxuXHRcdFx0Y2hpbGRBLnN0YXRlICdyZWxheGVkJywgb24sIG51bGxcblx0XHRcdGNoaWxkQi5zdGF0ZSAncmVsYXhlZCcsIG9uLCAnb24nXG5cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50QS5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb25cblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ3JlbGF4ZWQnKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQi5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9mZlxuXG5cblx0XHR0ZXN0IFwib3B0aW9ucy5zdGF0ZVRyaWdnZXJzIGNvbmZpZyBvYmplY3RzIGNhbiBzcGVjaWZ5IGEgJ2ZvcmNlJyBwcm9wZXJ0eSB3aGljaCB3aWxsIG1ha2UgdGhlbSBnZXQgYXR0YWNoZWQgZXZlbiBpZiB0aGV5IGFyZW4ndCB1c2VkXCIsICgpLT5cblx0XHRcdGRpdkEgPSBEb20uZGl2IHN0YXRlVHJpZ2dlcnM6eydoYXBweSc6IG9uOidoYXBweU9OJywgb2ZmOidoYXBweU9GRicsIGZvcmNlOnRydWV9XG5cdFx0XHRkaXZCID0gRG9tLmRpdiBzdGF0ZVRyaWdnZXJzOnsnaGFwcHknOiBvbjonaGFwcHlPTicsIG9mZjonaGFwcHlPRkYnfVxuXG5cdFx0XHRleHBlY3QoZGl2QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChkaXZCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRkaXZBLnJhdy5lbWl0RXZlbnQgJ2hhcHB5T04nXG5cdFx0XHRkaXZCLnJhdy5lbWl0RXZlbnQgJ2hhcHB5T04nXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblxuXHRcdFx0ZGl2Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZGl2QS5yYXcuZW1pdEV2ZW50ICdoYXBweU9GRidcblx0XHRcdGRpdkIucmF3LmVtaXRFdmVudCAnaGFwcHlPRkYnXG5cblx0XHRcdGV4cGVjdChkaXZBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGRpdkIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblxuXG5cdFx0dGVzdCBcIm9wdGlvbnMuc3RhdGVUcmlnZ2VycyBjb25maWcgb2JqZWN0cyBjYW4gc3BlY2lmeSBhICdidWJibGVzJyBwcm9wZXJ0eSB3aGljaCB3aWxsIGNhdXNlIHRoZSBzdGF0ZSB0byBidWJibGUgdG8gcGFyZW50cyBpbnN0ZWFkIG9mIGNhc2NhZGUgdG8gY2hpbGRyZW5cIiwgKCktPlxuXHRcdFx0cGFyZW50QSA9IERvbS5zZWN0aW9uIG51bGwsXG5cdFx0XHRcdHN1YlBhcmVudEEgPSBEb20uZGl2IG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRBID0gRG9tLmRpdiBzdGF0ZVRyaWdnZXJzOnsnaGFwcHknOiBvbjonaGFwcHlPTicsIG9mZjonaGFwcHlPRkYnLCBidWJibGVzOnRydWUsIGZvcmNlOnRydWV9LFxuXHRcdFx0XHRcdFx0c3ViQ2hpbGRBID0gRG9tLmRpdigpXG5cdFx0XHRcblx0XHRcdHBhcmVudEIgPSBEb20uc2VjdGlvbiBudWxsLFxuXHRcdFx0XHRzdWJQYXJlbnRCID0gRG9tLmRpdiBudWxsLFxuXHRcdFx0XHRcdGNoaWxkQiA9IERvbS5kaXYgc3RhdGVUcmlnZ2Vyczp7J2hhcHB5Jzogb246J2hhcHB5T04nLCBvZmY6J2hhcHB5T0ZGJywgZm9yY2U6dHJ1ZX0sXG5cdFx0XHRcdFx0XHRzdWJDaGlsZEIgPSBEb20uZGl2KClcblxuXHRcdFx0ZXhwZWN0KHBhcmVudEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QocGFyZW50Qi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJDaGlsZEEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXG5cdFx0XHRjaGlsZEEucmF3LmVtaXRFdmVudCAnaGFwcHlPTidcblx0XHRcdGNoaWxkQi5yYXcuZW1pdEV2ZW50ICdoYXBweU9OJ1xuXG5cdFx0XHRleHBlY3QocGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXHRcdFx0ZXhwZWN0KHN1YlBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoY2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoY2hpbGRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvblxuXG5cdFx0XHRjaGlsZEEucmF3LmVtaXRFdmVudCAnaGFwcHlPRkYnXG5cdFx0XHRjaGlsZEIucmF3LmVtaXRFdmVudCAnaGFwcHlPRkYnXG5cblx0XHRcdGV4cGVjdChwYXJlbnRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHBhcmVudEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViUGFyZW50QS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChzdWJQYXJlbnRCLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGNoaWxkQS5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblx0XHRcdGV4cGVjdChjaGlsZEIuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3Qoc3ViQ2hpbGRBLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KHN1YkNoaWxkQi5zdGF0ZSAnaGFwcHknKS50by5lcXVhbCBvZmZcblxuXG5cdFx0dGVzdCBcIndyYXBwZXJzIGNyZWF0ZWQgZm9yIGV4aXN0aW5nIGVsZW1lbnRzIHNob3VsZCBhdHRlbXB0IHRvIHJlc29sdmUgaWYgaXRzIGluc2VydGVkIGludG8gdGhlIERPTSBvbiBpbml0XCIsICgpLT5cblx0XHRcdGRpdkFfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdGRpdkJfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHNhbmRib3guYXBwZW5kQ2hpbGQoZGl2Ql8pXG5cdFx0XHRkaXZBID0gRG9tKGRpdkFfKVxuXHRcdFx0ZGl2QiA9IERvbShkaXZCXylcblxuXHRcdFx0ZGl2QV8uc3R5bGUuaGVpZ2h0ID0gJzEwMHB4J1xuXHRcdFx0ZGl2Ql8uc3R5bGUuaGVpZ2h0ID0gJzEwMHB4J1xuXG5cdFx0XHRleHBlY3QodHlwZW9mIGRpdkEuaGVpZ2h0KS50by5lcXVhbCgnbnVtYmVyJylcblx0XHRcdGV4cGVjdCh0eXBlb2YgZGl2Qi5oZWlnaHQpLnRvLmVxdWFsKCdudW1iZXInKVxuXHRcdFx0ZXhwZWN0KGlzTmFOIGRpdkEuaGVpZ2h0KS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoaXNOYU4gZGl2Qi5oZWlnaHQpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2QS5zdHlsZVNhZmUgJ2hlaWdodCcpLnRvLmVxdWFsICcxMDBweCdcblxuXG5cdFx0dGVzdCBcInN0YXRlLWJhc2VkIHRleHRcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbShcblx0XHRcdFx0WydkaXYnLCBudWxsLFxuXHRcdFx0XHRcdFsndGV4dCcsXG5cdFx0XHRcdFx0XHR0ZXh0OlxuXHRcdFx0XHRcdFx0XHQkYmFzZTogJ2FiYzEyMydcblx0XHRcdFx0XHRcdFx0JGhhcHB5OiAnSGFwcHknXG5cdFx0XHRcdFx0XHRcdCRyZWxheGVkOiAnUmVsYXhlZCdcblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdGRpdkIgPSBEb20oXG5cdFx0XHRcdFsnZGl2JywgbnVsbCxcblx0XHRcdFx0XHRbJ3RleHQnLFxuXHRcdFx0XHRcdFx0dGV4dDpcblx0XHRcdFx0XHRcdFx0JGhhcHB5OiAnSGFwcHknXG5cdFx0XHRcdFx0XHRcdCRyZWxheGVkOiAnUmVsYXhlZCdcblx0XHRcdFx0XHRcdFx0JyRyZWxheGVkK2Z1bm55JzogJ0Z1bm55ICYgUmVsYXhlZCdcblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdGRpdkMgPSBEb20uZGl2KHRleHQ6eyRiYXNlOidkZWY0NTYnLCAkaGFwcHk6J2doaTc4OSd9KVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS50ZXh0KS50by5lcXVhbCAnYWJjMTIzJ1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChkaXZDLnRleHQpLnRvLmVxdWFsICdkZWY0NTYnXG5cdFx0XHRcblx0XHRcdGRpdkEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdkMuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdIYXBweSdcblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICdIYXBweSdcblx0XHRcdGV4cGVjdChkaXZDLnRleHQpLnRvLmVxdWFsICdnaGk3ODknXG5cdFx0XHRcblx0XHRcdGRpdkEuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRkaXZCLnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0ZGl2Qy5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdhYmMxMjMnXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGRpdkMudGV4dCkudG8uZXF1YWwgJ2RlZjQ1Nidcblx0XHRcdFxuXHRcdFx0ZGl2QS5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZCLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdSZWxheGVkJ1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJ1JlbGF4ZWQnXG5cdFx0XHRcblx0XHRcdGRpdkEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdkIuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdSZWxheGVkJ1xuXHRcdFx0ZXhwZWN0KGRpdkIudGV4dCkudG8uZXF1YWwgJ1JlbGF4ZWQnXG5cdFx0XHRcblx0XHRcdGRpdkEuc3RhdGUgJ3JlbGF4ZWQnLCBvZmZcblx0XHRcdGRpdkIuc3RhdGUgJ3JlbGF4ZWQnLCBvZmZcblx0XHRcdGV4cGVjdChkaXZBLnRleHQpLnRvLmVxdWFsICdIYXBweSdcblx0XHRcdGV4cGVjdChkaXZCLnRleHQpLnRvLmVxdWFsICdIYXBweSdcblx0XHRcdFxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRkaXZCLnN0YXRlICdmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnUmVsYXhlZCdcblxuXHRcdFx0ZGl2Qi5zdGF0ZSAncmVsYXhlZCtmdW5ueScsIG9uXG5cdFx0XHRleHBlY3QoZGl2Qi50ZXh0KS50by5lcXVhbCAnRnVubnkgJiBSZWxheGVkJ1xuXG5cblx0XHR0ZXN0IFwic3RhdGUgY2hhbmdlcyB3aWxsIGVtaXQgYSBwcml2YXRlIHN0YXRlQ2hhbmdlOjxzdGF0ZT4gZXZlbnRcIiwgKCktPlxuXHRcdFx0cmVzdWx0cyA9IFtdXG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHRjb2xvcjogJ3doaXRlJ1xuXHRcdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRcdCRoYXBweTogY29sb3I6ICdibGFjaydcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2FueScsIG9uXG5cdFx0XHRkaXYub24gJ3N0YXRlQ2hhbmdlOmhhcHB5JywgKHN0YXRlKS0+IHJlc3VsdHMucHVzaCBbJ2hhcHB5Jywgc3RhdGVdXG5cdFx0XHRkaXYub24gJ3N0YXRlQ2hhbmdlOnJlbGF4ZWQnLCAoc3RhdGUpLT4gcmVzdWx0cy5wdXNoIFsncmVsYXhlZCcsIHN0YXRlXVxuXHRcdFx0ZGl2Lm9uICdzdGF0ZUNoYW5nZTphcmJpdHJhcnknLCAoc3RhdGUpLT4gcmVzdWx0cy5wdXNoIFsnYXJiaXRyYXJ5Jywgc3RhdGVdXG5cdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbCBbXVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl1dXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvZmZcblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl1dXG5cblx0XHRcdGRpdi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWwgW1snaGFwcHknLG9uXSwgWydoYXBweScsb2ZmXSwgWydoYXBweScsb25dXVxuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl0sIFsnaGFwcHknLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdhbm90aGVyJywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl0sIFsnaGFwcHknLG9uXV1cblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl0sIFsnaGFwcHknLG9uXSwgWydyZWxheGVkJyxvbl1dXG5cblx0XHRcdGRpdi5zdGF0ZSAnYXJiaXRyYXJ5Jywgb25cblx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsIFtbJ2hhcHB5Jyxvbl0sIFsnaGFwcHknLG9mZl0sIFsnaGFwcHknLG9uXSwgWydyZWxheGVkJyxvbl0sIFsnYXJiaXRyYXJ5Jyxvbl1dXG5cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbCBbWydoYXBweScsb25dLCBbJ2hhcHB5JyxvZmZdLCBbJ2hhcHB5Jyxvbl0sIFsncmVsYXhlZCcsb25dLCBbJ2FyYml0cmFyeScsb25dXVxuXG5cblx0XHR0ZXN0IFwic3RhdGUtYmFzZWQgc3R5bGVzIGNhbiBiZSB1cGRhdGVkIHZpYSBRdWlja0VsZW1lbnQudXBkYXRlU3RhdGVTdHlsZXNcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihzdHlsZTpcblx0XHRcdFx0d2lkdGg6IDVcblx0XHRcdFx0aGVpZ2h0OiA1XG5cdFx0XHRcdG1hcmdpblRvcDogNVxuXHRcdFx0XHQkaGFwcHk6XG5cdFx0XHRcdFx0bWFyZ2luVG9wOiAxMFxuXHRcdFx0XHQkcmVsYXhlZDpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDIwXG5cdFx0XHRcdFx0d2lkdGg6IDIwXG5cdFx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdFx0aGVpZ2h0OiA0MFxuXHRcdFx0XHRcdFx0bWFyZ2luVG9wOiA0MFxuXHRcdFx0XHQkc29tZXRoaW5nRWxzZTpcblx0XHRcdFx0XHR3aWR0aDogNjBcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDYwXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRnZXRTdHlsZXMgPSAoKS0+IHdpZHRoOmRpdi5zdHlsZSgnd2lkdGgnKSwgaGVpZ2h0OmRpdi5zdHlsZSgnaGVpZ2h0JyksIG1hcmdpblRvcDpkaXYuc3R5bGUoJ21hcmdpblRvcCcpXG5cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic1cHgnLCBoZWlnaHQ6JzVweCcsIG1hcmdpblRvcDonNXB4J1xuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic1cHgnLCBoZWlnaHQ6JzVweCcsIG1hcmdpblRvcDonMTBweCdcblx0XHRcdFxuXHRcdFx0ZGl2LnVwZGF0ZVN0YXRlU3R5bGVzIHt3aWR0aDo3LCBoZWlnaHQ6OCwgJGhhcHB5OnttYXJnaW5Ub3A6MTIsIGhlaWdodDoxMn19XG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonN3B4JywgaGVpZ2h0OicxMnB4JywgbWFyZ2luVG9wOicxMnB4J1xuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb2ZmXG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonN3B4JywgaGVpZ2h0Oic4cHgnLCBtYXJnaW5Ub3A6JzVweCdcblx0XHRcdFxuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonN3B4JywgaGVpZ2h0OicxMnB4JywgbWFyZ2luVG9wOicxMnB4J1xuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9mZlxuXHRcdFx0XG5cdFx0XHRkaXYudXBkYXRlU3RhdGVTdHlsZXNcblx0XHRcdFx0JGJhc2U6XG5cdFx0XHRcdFx0d2lkdGg6IDJcblx0XHRcdFx0XHRoZWlnaHQ6IDlcblx0XHRcdFx0JHJlbGF4ZWQ6XG5cdFx0XHRcdFx0aGVpZ2h0OiAyMFxuXHRcdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHRcdHdpZHRoOiA0MFxuXHRcdFx0XHRcdFx0bWFyZ2luVG9wOiAtPiA0NVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonMnB4JywgaGVpZ2h0Oic5cHgnLCBtYXJnaW5Ub3A6JzVweCdcblxuXHRcdFx0ZGl2LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOicyMHB4JywgaGVpZ2h0OicyMHB4JywgbWFyZ2luVG9wOicyMHB4J1xuXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChnZXRTdHlsZXMoKSkudG8uZXFsIHdpZHRoOic0MHB4JywgaGVpZ2h0Oic0MHB4JywgbWFyZ2luVG9wOic0NXB4J1xuXG5cdFx0XHRkaXYuc3RhdGUge2hhcHB5Om9mZiwgcmVsYXhlZDpvZmZ9XG5cdFx0XHRkaXYuZWwuc3R5bGUubWFyZ2luVG9wID0gbnVsbFxuXHRcdFx0ZXhwZWN0KGdldFN0eWxlcygpKS50by5lcWwgd2lkdGg6JzJweCcsIGhlaWdodDonOXB4JywgbWFyZ2luVG9wOic1cHgnXG5cblx0XHRcdGRpdi5zdGF0ZSAnc29tZXRoaW5nRWxzZScsIG9uXG5cdFx0XHRleHBlY3QoZ2V0U3R5bGVzKCkpLnRvLmVxbCB3aWR0aDonNjBweCcsIGhlaWdodDonOXB4JywgbWFyZ2luVG9wOic2MHB4J1xuXG5cblx0XHR0ZXN0IFwiZGVmYXVsdCBzdGF0ZXMgdG8gYXBwbHkgdG8gYW4gZWxlbWVudCB1cG9uIGNyZWF0aW9uIGNhbiBiZSBzcGVjaWZpZWQgdmlhIG9wdGlvbnMuc3RhdGUgbWFwcGluZ1wiLCAoKS0+XG5cdFx0XHRlbDEgPSBET00uZGl2KClcblx0XHRcdGVsMiA9IERPTS5kaXYoc3RhdGU6e2hhcHB5Om9uLCByZWxheGVkOm9mZn0pXG5cdFx0XHRlbDMgPSBET00uZGl2KHN0YXRlOntyZWxheGVkOm9ufSlcblx0XHRcdGV4cGVjdChlbDEuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZWwxLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZWwyLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9uXG5cdFx0XHRleHBlY3QoZWwyLnN0YXRlICdyZWxheGVkJykudG8uZXF1YWwgb2ZmXG5cdFx0XHRleHBlY3QoZWwzLnN0YXRlICdoYXBweScpLnRvLmVxdWFsIG9mZlxuXHRcdFx0ZXhwZWN0KGVsMy5zdGF0ZSAncmVsYXhlZCcpLnRvLmVxdWFsIG9uXG5cblxuXG5cdHN1aXRlIFwiTWVkaWEgUXVlcmllc1wiLCAoKS0+XG5cdFx0c3VpdGVUZWFyZG93biAoKS0+IGRpbWVuc2lvbnMucmVzdG9yZSgpIGlmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LCAnaW5uZXJXaWR0aCcpPy5jb25maWd1cmFibGVcblx0XHRzdWl0ZVNldHVwICgpLT4gQHNraXAoKSBpZiBub3QgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3csICdpbm5lcldpZHRoJyk/LmNvbmZpZ3VyYWJsZVxuXHRcdHRlYXJkb3duICgpLT4gRG9tLkNTUy5jbGVhclJlZ2lzdGVyZWQobGV2ZWwpIGZvciBsZXZlbCBpbiBbMC4uM11cblxuXG5cdFx0dGVzdCBcIldpbmRvdyBkaW1lbnNpb25zXCIsICgpLT5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTAwMCwgMTAwMClcblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnXG5cdFx0XHRcdHpJbmRleDogMlxuXHRcdFx0XHR3aWR0aDogJzMwMHB4J1xuXHRcdFx0XHRoZWlnaHQ6ICczMDBweCdcblx0XHRcdFx0Zm9udFNpemU6ICczMHB4J1xuXHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzBweCdcblxuXHRcdFx0XHQnQHdpbmRvdyhvcmllbnRhdGlvbjpsYW5kc2NhcGUpJzpcblx0XHRcdFx0XHRtYXJnaW5Ub3A6IDZcblxuXHRcdFx0XHQnQHdpbmRvdyhvcmllbnRhdGlvbjpwb3J0cmFpdCknOlxuXHRcdFx0XHRcdG1hcmdpblRvcDogN1xuXG5cdFx0XHRcdCdAd2luZG93KG1heC13aWR0aDo4MDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDNcblx0XHRcdFx0XHR3aWR0aDogJzI4MHB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0B3aW5kb3cobWF4LXdpZHRoOjcwMCwgbWF4LWhlaWdodDoxMDAwKSc6XG5cdFx0XHRcdFx0ekluZGV4OiA0XG5cdFx0XHRcdFx0d2lkdGg6ICcyNTBweCdcblx0XHRcdFx0XHRoZWlnaHQ6ICcyNTBweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAd2luZG93KG1heC1oZWlnaHQ6MTAwMCknOlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjVweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAd2luZG93KG1pbi13aWR0aDo5MDBweCknOlxuXHRcdFx0XHRcdGZvbnRTaXplOiAnMjNweCdcblx0XHRcdFx0XG5cdFx0XHRcdCdAd2luZG93KGFzcGVjdC1yYXRpbzowLjUpJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzIxcHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzEycHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHdpbmRvdyhtaW4taGVpZ2h0OjEyMDApJzpcblx0XHRcdFx0XHRmb250U2l6ZTogJzIwcHgnXG5cblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMidcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzMwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzMwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjNweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc3cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoOTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjNweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg4OTkpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyNXB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDg5OSwgMTEwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoOTUwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjNweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5NTAsIDE5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcyMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICcxMnB4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDk1MCwgMTg5OSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzIwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzkwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzMnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyODBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg4MTApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMidcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzMwMHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDc5MSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjgwcHgnXG5cblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoNzAxLCA5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI4MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzMwMHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDcwMCwgOTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzQnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICcyNTBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICcyNTBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg3MDAsIDEwMDEpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzI4MHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzMwMHB4J1xuXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDcwMCwgMTAwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnMjUwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMjUwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5Ub3AnKS50by5lcXVhbCAnN3B4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDExMDAsIDEwMDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5Ub3AnKS50by5lcXVhbCAnNnB4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDExMDAsIDExMDEpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5Ub3AnKS50by5lcXVhbCAnN3B4J1xuXG5cblx0XHR0ZXN0IFwiU2VsZiBkaW1lbnNpb25zL3N0eWxlc1wiLCAoKS0+XG5cdFx0XHRwYXJlbnQgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNpbXVsYXRlUGFyZW50ID0gKHdpZHRoLCBoZWlnaHQpLT5cblx0XHRcdFx0cGFyZW50LnN0eWxlICd3aWR0aCcsIHdpZHRoIGlmIHdpZHRoXG5cdFx0XHRcdHBhcmVudC5zdHlsZSAnaGVpZ2h0JywgaGVpZ2h0IGlmIGhlaWdodFxuXHRcdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdFxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZSdcblx0XHRcdFx0ekluZGV4OiAyXG5cdFx0XHRcdHRvcDogJzMwcHgnXG5cdFx0XHRcdHdpZHRoOiAnMTAwJSdcblx0XHRcdFx0aGVpZ2h0OiAnMTAwJSdcblx0XHRcdFx0Zm9udFNpemU6ICczMHB4J1xuXHRcdFx0XHRsaW5lSGVpZ2h0OiAnMzBweCdcblxuXHRcdFx0XHQnQHNlbGYob3JpZW50YXRpb246bGFuZHNjYXBlKSc6XG5cdFx0XHRcdFx0bWFyZ2luVG9wOiA2XG5cblx0XHRcdFx0J0BzZWxmKG9yaWVudGF0aW9uOnBvcnRyYWl0KSc6XG5cdFx0XHRcdFx0bWFyZ2luVG9wOiA3XG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYocG9zaXRpb246cmVsYXRpdmUpJzpcblx0XHRcdFx0XHR0b3A6ICcyMHB4J1xuXG5cdFx0XHRcdCdAc2VsZihtYXgtd2lkdGg6MzUwKSc6XG5cdFx0XHRcdFx0ekluZGV4OiAzXG5cdFx0XHRcdFx0Zm9udFNpemU6ICczM3B4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0BzZWxmKG1heC13aWR0aDo1MDAsIG1pbi1oZWlnaHQ6NDAwKSc6XG5cdFx0XHRcdFx0ekluZGV4OiA0XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcyN3B4J1xuXHRcdFx0XHRcdGxpbmVIZWlnaHQ6ICczN3B4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0BzZWxmKHpJbmRleDo0KSc6XG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzE1cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWluLXpJbmRleDo2KSc6XG5cdFx0XHRcdFx0b3BhY2l0eTogJzAnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWF4LWZvbnRTaXplOjIwKSc6XG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzE5cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHNlbGYobWluLXdpZHRoOjYwMHB4KSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcxOXB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0BzZWxmKGFzcGVjdC1yYXRpbzoyLjI1KSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICcyMnB4J1xuXHRcdFx0XHRcdGxpbmVIZWlnaHQ6ICcxMnB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0BzZWxmKG1pbi1oZWlnaHQ6NzAwKSc6XG5cdFx0XHRcdFx0Zm9udFNpemU6ICc0MHB4J1xuXG5cdFx0XHRzaW11bGF0ZVBhcmVudCg0MDAsIDMwMClcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnQpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMidcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3dpZHRoJykudG8uZXF1YWwgJzQwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnaGVpZ2h0JykudG8uZXF1YWwgJzMwMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc2cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd0b3AnKS50by5lcXVhbCAnMjBweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMzQ5LCA0MjApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnNCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzI3cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzE1cHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDM0OSwgMzk5KVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzMnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICczM3B4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDQwMSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTVweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblx0XHRcdFxuXHRcdFx0ZGl2LnN0eWxlKCd6SW5kZXgnLCA1KVxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdvcGFjaXR5JykudG8uZXF1YWwgJzEnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzM3cHgnXG5cdFx0XHRcblx0XHRcdGRpdi5zdHlsZSgnekluZGV4JywgMTcpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdvcGFjaXR5JykudG8uZXF1YWwgJzEnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnb3BhY2l0eScpLnRvLmVxdWFsICcwJ1xuXG5cdFx0XHRzaW11bGF0ZVBhcmVudCg5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICcxOXB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0XG5cdFx0XHRzaW11bGF0ZVBhcmVudCg5MDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzE5cHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDkwMCwgNDAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjJweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTJweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMjAyNSwgOTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnNDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTJweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblRvcCcpLnRvLmVxdWFsICc2cHgnXG5cdFx0XHRcblx0XHRcdHNpbXVsYXRlUGFyZW50KDIwMjUsIDIwMjYpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5Ub3AnKS50by5lcXVhbCAnN3B4J1xuXG5cblx0XHR0ZXN0IFwiUGFyZW50IGRpbWVuc2lvbnMvc3R5bGVzXCIsICgpLT5cblx0XHRcdHBhcmVudCA9IERvbS5kaXYoc3R5bGU6e3Bvc2l0aW9uOidhYnNvbHV0ZSd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c2ltdWxhdGVQYXJlbnQgPSAod2lkdGgsIGhlaWdodCktPlxuXHRcdFx0XHRwYXJlbnQuc3R5bGUgJ3dpZHRoJywgd2lkdGggaWYgd2lkdGhcblx0XHRcdFx0cGFyZW50LnN0eWxlICdoZWlnaHQnLCBoZWlnaHQgaWYgaGVpZ2h0XG5cdFx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoKVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2IHN0eWxlOlxuXHRcdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuXHRcdFx0XHR6SW5kZXg6IDJcblx0XHRcdFx0dG9wOiAnMzBweCdcblx0XHRcdFx0d2lkdGg6ICc0MDBweCdcblx0XHRcdFx0aGVpZ2h0OiAnMzAwcHgnXG5cdFx0XHRcdGZvbnRTaXplOiAnMzBweCdcblx0XHRcdFx0bGluZUhlaWdodDogJzMwcHgnXG5cblx0XHRcdFx0J0BwYXJlbnQob3JpZW50YXRpb246bGFuZHNjYXBlKSc6XG5cdFx0XHRcdFx0bWFyZ2luQm90dG9tOiA2XG5cblx0XHRcdFx0J0BwYXJlbnQob3JpZW50YXRpb246cG9ydHJhaXQpJzpcblx0XHRcdFx0XHRtYXJnaW5Cb3R0b206IDdcblx0XHRcdFx0XG5cdFx0XHRcdCdAcGFyZW50KHBvc2l0aW9uOnJlbGF0aXZlKSc6XG5cdFx0XHRcdFx0dG9wOiAnMjFweCdcblxuXHRcdFx0XHQnQHBhcmVudChtYXgtd2lkdGg6MzUwKSc6XG5cdFx0XHRcdFx0ekluZGV4OiAzXG5cdFx0XHRcdFx0Zm9udFNpemU6ICczNHB4J1xuXHRcdFx0XHRcblx0XHRcdFx0J0BwYXJlbnQobWF4LXdpZHRoOjUwMCwgbWluLWhlaWdodDo0MDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDRcblx0XHRcdFx0XHRmb250U2l6ZTogJzI3cHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzM3cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQHBhcmVudCh6SW5kZXg6NyknOlxuXHRcdFx0XHRcdGxpbmVIZWlnaHQ6ICcxNnB4J1xuXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KDQwMCwgMzAwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHBhcmVudClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICcyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnd2lkdGgnKS50by5lcXVhbCAnNDAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdoZWlnaHQnKS50by5lcXVhbCAnMzAwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250U2l6ZScpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbGluZUhlaWdodCcpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luQm90dG9tJykudG8uZXF1YWwgJzZweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICczMHB4J1xuXG5cdFx0XHRwYXJlbnQuc3R5bGUgJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAndG9wJykudG8uZXF1YWwgJzMwcHgnXG5cblx0XHRcdHNpbXVsYXRlUGFyZW50KClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICcyMXB4J1xuXG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDQyMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzdweCdcblx0XHRcdFxuXHRcdFx0c2ltdWxhdGVQYXJlbnQoMzQ5LCAzOTkpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzM0cHgnXG5cdFx0XHRcblx0XHRcdHBhcmVudC5zdHlsZSAnekluZGV4JywgJzcnXG5cdFx0XHRzaW11bGF0ZVBhcmVudCgzNDksIDQwMSlcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMTZweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbCAnMSdcblxuXG5cdFx0dGVzdCBcIlBhcmVudCBSZWYgZGltZW5zaW9ucy9zdHlsZXNcIiwgKCktPlxuXHRcdFx0cGFyZW50ID1cblx0XHRcdFx0RG9tLmRpdih7cmVmOidhYmMnfSxcblx0XHRcdFx0XHREb20uZGl2IHtpZDonZGVmJ30sXG5cdFx0XHRcdFx0XHREb20uZGl2IHtyZWY6J2doaSd9XG5cdFx0XHRcdCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFxuXHRcdFx0ZGl2ID0gRG9tLmRpdiBzdHlsZTpcblx0XHRcdFx0cG9zaXRpb246ICdyZWxhdGl2ZSdcblx0XHRcdFx0ekluZGV4OiAyXG5cdFx0XHRcdHRvcDogJzMwcHgnXG5cdFx0XHRcdHdpZHRoOiAnNDAwcHgnXG5cdFx0XHRcdGhlaWdodDogJzMwMHB4J1xuXHRcdFx0XHRmb250U2l6ZTogJzMwcHgnXG5cdFx0XHRcdGxpbmVIZWlnaHQ6ICczMHB4J1xuXG5cdFx0XHRcdCdAI2FiYyhvcmllbnRhdGlvbjpsYW5kc2NhcGUpJzpcblx0XHRcdFx0XHRmb250V2VpZ2h0OiA2MDBcblxuXHRcdFx0XHQnQCNhYmMob3JpZW50YXRpb246cG9ydHJhaXQpJzpcblx0XHRcdFx0XHRmb250V2VpZ2h0OiA1MDBcblx0XHRcdFx0XG5cdFx0XHRcdCdAI2RlZihwb3NpdGlvbjpyZWxhdGl2ZSknOlxuXHRcdFx0XHRcdHRvcDogJzIwcHgnXG5cblx0XHRcdFx0J0AjZGVmKG1heC13aWR0aDozNTApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDNcblx0XHRcdFx0XHRmb250U2l6ZTogJzMzcHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQCNnaGkobWF4LXdpZHRoOjUwMCwgbWluLWhlaWdodDo0MDApJzpcblx0XHRcdFx0XHR6SW5kZXg6IDRcblx0XHRcdFx0XHRmb250U2l6ZTogJzI3cHgnXG5cdFx0XHRcdFx0bGluZUhlaWdodDogJzM3cHgnXG5cdFx0XHRcdFxuXHRcdFx0XHQnQCNhYmMoekluZGV4OjcpJzpcblx0XHRcdFx0XHRsaW5lSGVpZ2h0OiAnMTVweCdcblxuXG5cdFx0XHRwYXJlbnQuc3R5bGUod2lkdGg6NDAwLCBoZWlnaHQ6MzAwKVxuXHRcdFx0cGFyZW50LmNoaWxkLmRlZi5zdHlsZSh3aWR0aDo0MDAsIGhlaWdodDozMDApXG5cdFx0XHRwYXJlbnQuY2hpbGQuZ2hpLnN0eWxlKHdpZHRoOjQwMCwgaGVpZ2h0OjMwMClcblx0XHRcdGRpdi5hcHBlbmRUbyhwYXJlbnQuY2hpbGQuZ2hpKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnekluZGV4JykudG8uZXF1YWwgJzInXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd3aWR0aCcpLnRvLmVxdWFsICc0MDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2hlaWdodCcpLnRvLmVxdWFsICczMDBweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzMwcHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250V2VpZ2h0JykudG8uZXF1YWwgJzYwMCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICczMHB4J1xuXG5cdFx0XHRwYXJlbnQuc3R5bGUod2lkdGg6NDAwLCBoZWlnaHQ6OTAwLCBwb3NpdGlvbjoncmVsYXRpdmUnKVxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdmb250V2VpZ2h0JykudG8uZXF1YWwgJzUwMCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3RvcCcpLnRvLmVxdWFsICczMHB4J1xuXHRcdFx0XG5cdFx0XHRwYXJlbnQuY2hpbGQuZGVmLnN0eWxlKHBvc2l0aW9uOidyZWxhdGl2ZScpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd0b3AnKS50by5lcXVhbCAnMzBweCdcblxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd0b3AnKS50by5lcXVhbCAnMjBweCdcblxuXHRcdFx0cGFyZW50LmNoaWxkLmRlZi5zdHlsZSh3aWR0aDozNDksIGhlaWdodDo0MjApXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICczJ1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMzNweCdcblx0XHRcdFxuXHRcdFx0cGFyZW50LmNoaWxkLmdoaS5zdHlsZSh3aWR0aDo0NTAsIGhlaWdodDo0MjApXG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ3pJbmRleCcpLnRvLmVxdWFsICc0J1xuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbCAnMjdweCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2xpbmVIZWlnaHQnKS50by5lcXVhbCAnMzdweCdcblx0XHRcdFxuXHRcdFx0cGFyZW50LnN0eWxlKHpJbmRleDo3KVxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSgpXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICd6SW5kZXgnKS50by5lcXVhbCAnNCdcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwgJzI3cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdsaW5lSGVpZ2h0JykudG8uZXF1YWwgJzE1cHgnXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdvcGFjaXR5JykudG8uZXF1YWwgJzEnXG5cblxuXHRcdHRlc3QgXCJOZXN0ZWQgbWVkaWEgcXVlcmllc1wiLCAoKS0+XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDEwMDAsIDkwMClcblx0XHRcdGRpdiA9IERvbS5kaXYgc3R5bGU6XG5cdFx0XHRcdHpJbmRleDogMlxuXG5cdFx0XHRcdCRoYXBweTpcblx0XHRcdFx0XHRtYXJnaW5SaWdodDogNVxuXHRcdFx0XHRcdCdAd2luZG93KG9yaWVudGF0aW9uOmxhbmRzY2FwZSknOlxuXHRcdFx0XHRcdFx0bWFyZ2luUmlnaHQ6IDZcblxuXHRcdFx0XHQnQHdpbmRvdyhvcmllbnRhdGlvbjpwb3J0cmFpdCknOlxuXHRcdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdFx0bWFyZ2luUmlnaHQ6IDdcblxuXG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnMHB4J1xuXHRcdFx0XG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblJpZ2h0JykudG8uZXF1YWwgJzZweCdcblx0XHRcdFxuXHRcdFx0ZGltZW5zaW9ucy5zaW11bGF0ZSg5MDAsIDEwMDApXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICc1cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoMTAwMCwgOTAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnNnB4J1xuXG5cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cdFx0XHRleHBlY3QoZGl2LnN0eWxlICdtYXJnaW5SaWdodCcpLnRvLmVxdWFsICc2cHgnXG5cdFx0XHRcblx0XHRcdGRpbWVuc2lvbnMuc2ltdWxhdGUoOTAwLCAxMDAwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdHlsZSAnbWFyZ2luUmlnaHQnKS50by5lcXVhbCAnN3B4J1xuXHRcdFx0XG5cdFx0XHRkaW1lbnNpb25zLnNpbXVsYXRlKDEwMDAsIDkwMClcblx0XHRcdGV4cGVjdChkaXYuc3R5bGUgJ21hcmdpblJpZ2h0JykudG8uZXF1YWwgJzZweCdcblxuXG5cblxuXG5cblx0c3VpdGUgXCJUcmF2ZXJzYWxcIiwgKCktPlxuXHRcdHRlc3QgXCJDaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsIERvbS5kaXYoKSwgJ1NvbWUgVGV4dCcpXG5cblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbGVtZW50Q2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMilcblxuXHRcdFx0ZGl2LmFwcGVuZChEb20uc3BhbigpKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QoZGl2LmVsZW1lbnRDaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2LmVsLmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0XG5cdFx0XHRkaXYuZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoNClcblx0XHRcdGV4cGVjdChkaXYuZWxlbWVudENoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChkaXYuZWwuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDQpXG5cblx0XHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cdFx0XHRzcGFuQSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxuXHRcdFx0c3BhbkIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcblx0XHRcdHRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnc29tZVRleHROb2RlJylcblx0XHRcdGNvbW1lbnQgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdzb21lQ29tbWVudE5vZGUnKVxuXHRcdFx0XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoc3BhbkEpXG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoY29tbWVudClcblx0XHRcdGRpdi5hcHBlbmRDaGlsZChzcGFuQilcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCh0ZXh0KVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoNClcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXG5cdFx0XHRkaXYkID0gRG9tKGRpdilcblx0XHRcdGV4cGVjdChkaXYkLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChkaXYkLmVsZW1lbnRDaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QoZGl2JC5jaGlsZHJlblswXS5yYXcpLnRvLmVxdWFsKHNwYW5BKVxuXHRcdFx0ZXhwZWN0KGRpdiQuY2hpbGRyZW5bMV0ucmF3KS50by5lcXVhbChzcGFuQilcblx0XHRcdGV4cGVjdChkaXYkLmNoaWxkcmVuWzJdLnJhdykudG8uZXF1YWwodGV4dClcblxuXG5cdFx0dGVzdCBcIlBhcmVudFwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdihudWxsLCBEb20uZGl2KCksICdTb21lIFRleHQnKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXHRcdFx0QyA9IERvbS5kaXYoKVxuXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0ucGFyZW50KS50by5lcXVhbCBBXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblswXS5lbC5wYXJlbnROb2RlKS50by5lcXVhbCBBLmVsXG5cblx0XHRcdEIuYXBwZW5kKEEpXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsIEJcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuWzBdLnBhcmVudCkudG8uZXF1YWwgQVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0uZWwucGFyZW50Tm9kZSkudG8uZXF1YWwgQS5lbFxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW5bMF0pLnRvLmVxdWFsKEEpXG5cblx0XHRcdEMuYXBwZW5kKEEpXG5cdFx0XHRleHBlY3QoQS5wYXJlbnQpLnRvLmVxdWFsIENcblx0XHRcdGV4cGVjdChBLmNoaWxkcmVuWzBdLnBhcmVudCkudG8uZXF1YWwgQVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0uZWwucGFyZW50Tm9kZSkudG8uZXF1YWwgQS5lbFxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KEMuY2hpbGRyZW5bMF0pLnRvLmVxdWFsKEEpXG5cblxuXHRcdHRlc3QgXCJQYXJlbnRzXCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdEIgPSBEb20uZGl2KCkuYXBwZW5kVG8oQSlcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oQilcblxuXHRcdFx0ZXhwZWN0KEEucGFyZW50LmVsKS50by5lcXVhbChzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbChBKVxuXHRcdFx0ZXhwZWN0KEMucGFyZW50KS50by5lcXVhbChCKVxuXG5cdFx0XHRleHBlY3QoQS5wYXJlbnRzLmxlbmd0aCkudG8uZXF1YWwoQi5wYXJlbnRzLmxlbmd0aC0xKVxuXHRcdFx0ZXhwZWN0KEIucGFyZW50cy5sZW5ndGgpLnRvLmVxdWFsKEMucGFyZW50cy5sZW5ndGgtMSlcblx0XHRcdGV4cGVjdChCLnBhcmVudHNbMF0pLnRvLmVxdWFsKEEpXG5cdFx0XHRleHBlY3QoQy5wYXJlbnRzWzBdKS50by5lcXVhbChCKVxuXHRcdFx0ZXhwZWN0KEMucGFyZW50cy5sZW5ndGgpLnRvLmVxdWFsKDUpXG5cdFx0XHRleHBlY3QoQy5wYXJlbnRzLnNsaWNlKC0xKVswXS5lbCkudG8uZXF1YWwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxuXG5cblx0XHRzdWl0ZSBcIlBhcmVudCBNYXRjaGluZ1wiLCAoKS0+XG5cdFx0XHR0ZWFyZG93biAoKS0+IEBlbHMuQS5kZXRhY2goKVxuXHRcdFx0c3VpdGVTZXR1cCAoKS0+XG5cdFx0XHRcdEEgPSBEb20uc2VjdGlvbihyZWY6J0EnKVxuXHRcdFx0XHRCID0gRG9tLmRpdihyZWY6J0InKS5hcHBlbmRUbyhBKVxuXHRcdFx0XHRDID0gRG9tLmRpdihyZWY6J0MnKS5hcHBlbmRUbyhCKVxuXHRcdFx0XHREID0gRG9tLnNwYW4ocmVmOidEJykuYXBwZW5kVG8oQylcblx0XHRcdFx0QGVscyA9IHtBLEIsQyxEfVxuXHRcdFx0XHRcblx0XHRcdHRlc3QgXCJmdW5jdGlvbiBmaWx0ZXJcIiwgKCktPlxuXHRcdFx0XHR7QSxCLEMsRH0gPSBAZWxzXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHMpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nKG51bGwpKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nKEIpKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nICgpLT4gZmFsc2UpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgKGVsKS0+IGVsIGlzIEIpLnRvLmVxdWFsKEIpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nIChlbCktPiBlbCBpcyBBKS50by5lcXVhbChBKVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRNYXRjaGluZyAoZWwpLT4gZWwgaXMgQykudG8uZXF1YWwoQylcblxuXHRcdFx0XHRBLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nIChlbCktPiBlbC5yYXcgaXMgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS50by5lcXVhbChEb20oZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSlcblxuXHRcdFx0dGVzdCBcInJlZiBmaWx0ZXJcIiwgKCktPlxuXHRcdFx0XHR7QSxCLEMsRH0gPSBAZWxzXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHMpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nICdiYWRSZWYnKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudE1hdGNoaW5nICdCJykudG8uZXF1YWwoQilcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50TWF0Y2hpbmcgJ0EnKS50by5lcXVhbChBKVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRNYXRjaGluZyAnQycpLnRvLmVxdWFsKEMpXG5cblxuXHRcdHN1aXRlIFwiUGFyZW50cyBVbnRpbFwiLCAoKS0+XG5cdFx0XHRzdWl0ZVNldHVwICgpLT5cblx0XHRcdFx0QSA9IERvbS5zZWN0aW9uKHJlZjonQScpXG5cdFx0XHRcdEIgPSBEb20uZGl2KHJlZjonQicpLmFwcGVuZFRvKEEpXG5cdFx0XHRcdEMgPSBEb20uZGl2KHJlZjonQycpLmFwcGVuZFRvKEIpXG5cdFx0XHRcdEQgPSBEb20uc3BhbihyZWY6J0QnKS5hcHBlbmRUbyhDKVxuXHRcdFx0XHRAZWxzID0ge0EsQixDLER9XG5cdFx0XHRcblx0XHRcdHRlc3QgXCJmdW5jdGlvbiBmaWx0ZXJcIiwgKCktPlxuXHRcdFx0XHR7QSxCLEMsRH0gPSBAZWxzXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHMpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHNVbnRpbChudWxsKSkudG8uZXFsIFtDLEIsQV1cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsKCkpLnRvLmVxbCBbQyxCLEFdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHNVbnRpbCAoZWwpLT4gZWwgaXMgQSkudG8uZXFsIFtDLEJdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHNVbnRpbCAoZWwpLT4gZWwgaXMgQikudG8uZXFsIFtDXVxuXHRcdFx0XHRleHBlY3QoRC5wYXJlbnRzVW50aWwgKGVsKS0+IGZhbHNlKS50by5lcWwgW0MsQixBXVxuXHRcdFx0XG5cblx0XHRcdHRlc3QgXCJyZWYgZmlsdGVyXCIsICgpLT4gXG5cdFx0XHRcdHtBLEIsQyxEfSA9IEBlbHNcblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsICdBJykudG8uZXFsIFtDLEJdXG5cdFx0XHRcdGV4cGVjdChELnBhcmVudHNVbnRpbCAnQicpLnRvLmVxbCBbQ11cblx0XHRcdFx0ZXhwZWN0KEQucGFyZW50c1VudGlsICdiYWRSZWYnKS50by5lcWwgW0MsQixBXVxuXG5cblx0XHR0ZXN0IFwiTmV4dFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsIEE9RG9tLmRpdigpLCBCPURvbS5kaXYoKSwgQz1Eb20uZGl2KCksIEQ9RG9tLmRpdigpLCBFPURvbS5kaXYoKSlcblxuXHRcdFx0ZXhwZWN0KEEubmV4dCkudG8uZXF1YWwoQilcblx0XHRcdGV4cGVjdChDLm5leHQpLnRvLmVxdWFsKEQpXG5cdFx0XHRleHBlY3QoRS5uZXh0KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoQi5uZXh0QWxsKS50by5lcWwoW0MsRCxFXSlcblxuXHRcdFxuXHRcdHRlc3QgXCJOZXh0IEVsZW1lbnRcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLmRpdihudWxsLCBBPURvbS5kaXYoKSwgQj1Eb20udGV4dCgpLCBDPURvbS5kaXYoKSwgRD1Eb20udGV4dCgpLCBFPURvbS5kaXYoKSlcblxuXHRcdFx0ZXhwZWN0KEEubmV4dCkudG8uZXF1YWwoQilcblx0XHRcdGV4cGVjdChBLm5leHRFbCkudG8uZXF1YWwoQylcblx0XHRcdGV4cGVjdChCLm5leHRFbCkudG8uZXF1YWwoQylcblx0XHRcdGV4cGVjdChDLm5leHRFbCkudG8uZXF1YWwoRSlcblx0XHRcdGV4cGVjdChFLm5leHRFbCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KEEubmV4dEVsQWxsKS50by5lcWwoW0MsRV0pXG5cblxuXHRcdHRlc3QgXCJQcmV2XCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgQT1Eb20uZGl2KCksIEI9RG9tLmRpdigpLCBDPURvbS5kaXYoKSwgRD1Eb20uZGl2KCksIEU9RG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoRS5wcmV2KS50by5lcXVhbChEKVxuXHRcdFx0ZXhwZWN0KEMucHJldikudG8uZXF1YWwoQilcblx0XHRcdGV4cGVjdChBLnByZXYpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChELnByZXZBbGwpLnRvLmVxbChbQyxCLEFdKVxuXG5cdFx0XG5cdFx0dGVzdCBcIlByZXYgRWxlbWVudFwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsIEE9RG9tLmRpdigpLCBCPURvbS50ZXh0KCksIEM9RG9tLmRpdigpLCBEPURvbS50ZXh0KCksIEU9RG9tLmRpdigpKVxuXG5cdFx0XHRleHBlY3QoRS5wcmV2KS50by5lcXVhbChEKVxuXHRcdFx0ZXhwZWN0KEUucHJldkVsKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEQucHJldkVsKS50by5lcXVhbChDKVxuXHRcdFx0ZXhwZWN0KEMucHJldkVsKS50by5lcXVhbChBKVxuXHRcdFx0ZXhwZWN0KEEucHJldkVsKS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoRS5wcmV2RWxBbGwpLnRvLmVxbChbQyxBXSlcblxuXG5cdFx0dGVzdCBcIlNpYmxpbmdzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgQT1Eb20uZGl2KCksIEI9RG9tLnRleHQoKSwgQz1Eb20uZGl2KCksIEQ9RG9tLnRleHQoKSwgRT1Eb20uZGl2KCkpXG5cblx0XHRcdGV4cGVjdChDLnNpYmxpbmdzKS50by5lcWwoQy5wcmV2QWxsLnJldmVyc2UoKS5jb25jYXQoQy5uZXh0QWxsKSlcblx0XHRcdGV4cGVjdChDLnNpYmxpbmdzKS50by5lcWwoW0EsQixELEVdKVxuXHRcdFx0ZXhwZWN0KEMuZWxlbWVudFNpYmxpbmdzKS50by5lcWwoW0EsRV0pXG5cdFx0XHRleHBlY3QoQi5lbGVtZW50U2libGluZ3MpLnRvLmVxbChbQSxDLEVdKVxuXG5cblx0XHR0ZXN0IFwiRmlyc3QvTGFzdCBDaGlsZFwiLCAoKS0+XG5cdFx0XHRtYWluID0gRE9NLmRpdihpZDonbWFpbicpXG5cdFx0XHRkaXZBID0gRE9NLmRpdihpZDonZGl2QScpLmFwcGVuZFRvKG1haW4pXG5cdFx0XHRkaXZCID0gRE9NLmRpdihpZDonZGl2QicpLmFwcGVuZFRvKG1haW4pXG5cdFx0XHRkaXZDID0gRE9NLmRpdihpZDonZGl2QycpLmFwcGVuZFRvKG1haW4pXG5cdFx0XHRkaXZCQSA9IERPTS5kaXYoaWQ6J2RpdkJBJykuYXBwZW5kVG8oZGl2Qilcblx0XHRcdGRpdkJCID0gRE9NLmRpdihpZDonZGl2QkInKS5hcHBlbmRUbyhkaXZCKVxuXG5cdFx0XHRleHBlY3QobWFpbi5maXJzdENoaWxkKS50by5lcXVhbCBkaXZBXG5cdFx0XHRleHBlY3QobWFpbi5sYXN0Q2hpbGQpLnRvLmVxdWFsIGRpdkNcblx0XHRcdGV4cGVjdChkaXZBLmZpcnN0Q2hpbGQpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdkEubGFzdENoaWxkKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChkaXZCLmZpcnN0Q2hpbGQpLnRvLmVxdWFsIGRpdkJBXG5cdFx0XHRleHBlY3QoZGl2Qi5sYXN0Q2hpbGQpLnRvLmVxdWFsIGRpdkJCXG5cblxuXHRcdHRlc3QgXCJDaGlsZCAoYnkgcmVmKVwiLCAoKS0+XG5cdFx0XHRkaXZBID0gXG5cdFx0XHRcdERvbS5kaXYge2lkOidkaXZBJ30sXG5cdFx0XHRcdFx0RG9tLmRpdiB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFx0RG9tLnNwYW4ge3JlZjonY2hpbGRBXzEnfVxuXHRcdFx0XHRcdFx0RG9tLmRpdiB7cmVmOidjaGlsZEFfMicsIGlkOidjaGlsZEFfMid9XG5cdFx0XHRcdFx0RG9tLmRpdiB7fSxcblx0XHRcdFx0XHRcdERvbS5zcGFuIHtyZWY6J2NoaWxkQl8xJ31cblx0XHRcdFx0XHRcdERvbS50ZXh0IHtpZDonY2hpbGRCXzInfSwgJ1RoZSBUZXh0J1xuXG5cblx0XHRcdGRpdkIgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge2lkOidkaXZCJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQScsIHN0eWxlOntjb2xvcjoncGluayd9fSxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQV8zJywgaWQ6J2NoaWxkQV8yJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KS5zcGF3bigpXG5cblx0XHRcdGRpdkMgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2JywgcmVmOidkaXZDJyxcblx0XHRcdFx0XHRbJ2RpdicsXHRyZWY6J2NoaWxkQScsXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHJlZjonZGl2QiddXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHJlZjonZGl2QyddXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JyxcdHJlZjonY2hpbGRCJyxcblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZCJ11cblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZDJ11cblx0XHRcdFx0XHRcdFsnZGl2JywgcmVmOidkaXZEJyxcblx0XHRcdFx0XHRcdFx0WydkaXYnLCByZWY6J2NoaWxkQiddXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLnNwYXduKClcblxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMSkudG8uZXF1YWwoZGl2QS5jaGlsZHJlblswXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQV8yKS50by5lcXVhbChkaXZBLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzMpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRCXzEpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwoZGl2QS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQl8yLnR5cGUpLnRvLmVxdWFsKCd0ZXh0JylcblxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsKGRpdkIuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEFfMSkudG8uZXF1YWwoZGl2Qi5jaGlsZHJlblswXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQV8yKS50by5lcXVhbChkaXZCLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRBXzMpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQikudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KGRpdkIuY2hpbGQuY2hpbGRCXzEpLnRvLmVxdWFsKGRpdkIuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwoZGl2Qi5jaGlsZHJlblsxXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXZCLmNoaWxkLmNoaWxkQS5zdHlsZSgnY29sb3InKSkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEEuc3R5bGVTYWZlKCdjb2xvcicpKS5ub3QudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3QoZGl2Qi5jaGlsZC5jaGlsZEEuc3R5bGVTYWZlKCdjb2xvcicpLmxlbmd0aCA+PSA0KS50by5iZS50cnVlXG5cblxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBLnJhdy5nZXRBdHRyaWJ1dGUoJ2lkJykpLnRvLmVxdWFsKCdjaGlsZEEnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBLnJhdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVmJykpLnRvLmVxdWFsKCdjaGlsZEEnKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzEucmF3LmdldEF0dHJpYnV0ZSgnaWQnKSkudG8uZXF1YWwobnVsbClcblx0XHRcdGV4cGVjdChkaXZBLmNoaWxkLmNoaWxkQV8xLnJhdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVmJykpLnRvLmVxdWFsKCdjaGlsZEFfMScpXG5cdFx0XHRleHBlY3QoZGl2QS5jaGlsZC5jaGlsZEFfMi5yYXcuZ2V0QXR0cmlidXRlKCdpZCcpKS50by5lcXVhbCgnY2hpbGRBXzInKVxuXHRcdFx0ZXhwZWN0KGRpdkEuY2hpbGQuY2hpbGRBXzIucmF3LmdldEF0dHJpYnV0ZSgnZGF0YS1yZWYnKSkudG8uZXF1YWwoJ2NoaWxkQV8yJylcblxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGQuY2hpbGRBKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGQuY2hpbGRCKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzFdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGQuZGl2QikudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblswXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkLmRpdkMpLnRvLmVxdWFsKGRpdkMpXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZC5kaXZEKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzJdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGRyZW5bMF0uY2hpbGQuZGl2QikudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblswXS5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkcmVuWzBdLmNoaWxkLmRpdkMpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZC5kaXZCKS50by5lcXVhbChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KGRpdkMuY2hpbGRyZW5bMV0uY2hpbGQuZGl2QykudG8uZXF1YWwoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZHJlblsxXSlcblx0XHRcdGV4cGVjdChkaXZDLmNoaWxkcmVuWzFdLmNoaWxkLmRpdkQpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMl0pXG5cdFx0XHRleHBlY3QoZGl2Qy5jaGlsZHJlblsxXS5jaGlsZC5jaGlsZEIpLnRvLmVxdWFsKGRpdkMuY2hpbGRyZW5bMV0pXG5cblx0XHRcdHNhbmRCb3ggPSBEb20oc2FuZGJveClcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkLmRpdkEpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdFxuXHRcdFx0c2FuZEJveC5hcHBlbmQoZGl2QSlcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkLmNoaWxkQSkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkLmRpdkEpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChzYW5kQm94LmNoaWxkZi5kaXZBKS50by5lcXVhbChkaXZBKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRBKS50by5lcXVhbChkaXZBLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3guY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsKGRpdkEuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5jaGlsZC5kaXZBKS50by5lcXVhbChkaXZBKVxuXG5cdFx0XHRuZXdDaGlsZCA9IERvbS5kaXYocmVmOiduZXdDaGlsZCcpXG5cdFx0XHRuZXdDaGlsZENoaWxkID0gRG9tLmRpdihyZWY6J25ld0NoaWxkQ2hpbGQnKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkLmNoaWxkLm5ld0NoaWxkQ2hpbGQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChuZXdDaGlsZENoaWxkLmNoaWxkLm5ld0NoaWxkQ2hpbGQpLnRvLmVxdWFsKG5ld0NoaWxkQ2hpbGQpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMobmV3Q2hpbGRDaGlsZC5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCgxKVxuXG5cdFx0XHRuZXdDaGlsZENoaWxkLmFwcGVuZFRvKG5ld0NoaWxkKVxuXHRcdFx0ZXhwZWN0KG5ld0NoaWxkLmNoaWxkLm5ld0NoaWxkQ2hpbGQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChuZXdDaGlsZC5jaGlsZGYubmV3Q2hpbGRDaGlsZCkudG8uZXF1YWwobmV3Q2hpbGRDaGlsZClcblx0XHRcdGV4cGVjdChuZXdDaGlsZC5jaGlsZC5uZXdDaGlsZENoaWxkKS50by5lcXVhbChuZXdDaGlsZENoaWxkKVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKG5ld0NoaWxkQ2hpbGQuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoMSlcblxuXHRcdFx0bmV3UGFyZW50ID0gRG9tLmRpdihyZWY6J25ld1BhcmVudCcpXG5cdFx0XHRuZXdDaGlsZC5hcHBlbmRUbyhuZXdQYXJlbnQpXG5cdFx0XHRleHBlY3QobmV3UGFyZW50LmNoaWxkLm5ld0NoaWxkQ2hpbGQpLnRvLmVxdWFsKG5ld0NoaWxkQ2hpbGQpXG5cblxuXHRcdHRlc3QgXCJJbmRleFwiLCAoKS0+XG5cdFx0XHRzZWN0aW9uID1cblx0XHRcdFx0RG9tLnNlY3Rpb24obnVsbCxcblx0XHRcdFx0XHRjaGlsZEEgPSBEb20uZGl2KClcblx0XHRcdFx0XHRjaGlsZEIgPSBEb20uZGl2KClcblx0XHRcdFx0XHRjaGlsZEMgPSBEb20uc3BhbigpXG5cdFx0XHRcdFx0Y2hpbGREID0gRG9tLnRleHQoKVxuXHRcdFx0XHRcdGNoaWxkRSA9IERvbS5zcGFuKClcblx0XHRcdFx0XHRjaGlsZEYgPSBEb20uZGl2KClcblx0XHRcdFx0KVxuXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4KS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4KS50by5lcXVhbCAzXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4KS50by5lcXVhbCA1XG5cblx0XHRcdGNoaWxkQy5kZXRhY2goKVxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleCkudG8uZXF1YWwgNFxuXHRcdFx0ZXhwZWN0KGNoaWxkQy5pbmRleCkudG8uZXF1YWwgbnVsbFxuXG5cblx0XHR0ZXN0IFwiSW5kZXggKGJ5IHR5cGUpXCIsICgpLT5cblx0XHRcdHNlY3Rpb24gPVxuXHRcdFx0XHREb20uc2VjdGlvbihudWxsLFxuXHRcdFx0XHRcdGNoaWxkQSA9IERvbS5kaXYoKVxuXHRcdFx0XHRcdGNoaWxkQiA9IERvbS5kaXYoKVxuXHRcdFx0XHRcdGNoaWxkQyA9IERvbS5zcGFuKClcblx0XHRcdFx0XHRjaGlsZEQgPSBEb20udGV4dCgpXG5cdFx0XHRcdFx0Y2hpbGRFID0gRG9tLnNwYW4oKVxuXHRcdFx0XHRcdGNoaWxkRiA9IERvbS50ZXh0KClcblx0XHRcdFx0XHRjaGlsZEcgPSBEb20uZGl2KClcblx0XHRcdFx0KVxuXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4VHlwZSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleFR5cGUpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXhUeXBlKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRHLmluZGV4VHlwZSkudG8uZXF1YWwgMlxuXG5cdFx0XHRjaGlsZEMuZGV0YWNoKClcblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXhUeXBlKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4VHlwZSkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleFR5cGUpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEcuaW5kZXhUeXBlKS50by5lcXVhbCAyXG5cblx0XHRcdGNoaWxkQS5kZXRhY2goKVxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleFR5cGUpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXhUeXBlKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4VHlwZSkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRy5pbmRleFR5cGUpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEEuaW5kZXhUeXBlKS50by5lcXVhbCBudWxsXG5cdFx0XHRleHBlY3QoY2hpbGRDLmluZGV4VHlwZSkudG8uZXF1YWwgbnVsbFxuXG5cblx0XHR0ZXN0IFwiSW5kZXggKGJ5IHJlZilcIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9XG5cdFx0XHRcdERvbS5zZWN0aW9uKG51bGwsXG5cdFx0XHRcdFx0Y2hpbGRBID0gRG9tLmRpdihyZWY6J2FiYycpXG5cdFx0XHRcdFx0Y2hpbGRCID0gRG9tLmRpdihyZWY6J2FiYycpXG5cdFx0XHRcdFx0Y2hpbGRDID0gRG9tLnNwYW4ocmVmOidkZWYnKVxuXHRcdFx0XHRcdGNoaWxkRCA9IERvbS50ZXh0KHJlZjonYWJjJylcblx0XHRcdFx0XHRjaGlsZEUgPSBEb20uc3BhbihyZWY6J2FiYycpXG5cdFx0XHRcdFx0Y2hpbGRGID0gRG9tLnRleHQocmVmOidkZWYnKVxuXHRcdFx0XHRcdGNoaWxkRyA9IERvbS5kaXYocmVmOidhYmMnKVxuXHRcdFx0XHQpXG5cblx0XHRcdGV4cGVjdChjaGlsZEIuaW5kZXhSZWYpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEQuaW5kZXhSZWYpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChjaGlsZEYuaW5kZXhSZWYpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjaGlsZEcuaW5kZXhSZWYpLnRvLmVxdWFsIDRcblxuXHRcdFx0Y2hpbGRDLmRldGFjaCgpXG5cdFx0XHRleHBlY3QoY2hpbGRCLmluZGV4UmVmKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2hpbGRELmluZGV4UmVmKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoY2hpbGRGLmluZGV4UmVmKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoY2hpbGRHLmluZGV4UmVmKS50by5lcXVhbCA0XG5cblx0XHRcdGNoaWxkQS5kZXRhY2goKVxuXHRcdFx0ZXhwZWN0KGNoaWxkQi5pbmRleFJlZikudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRC5pbmRleFJlZikudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNoaWxkRi5pbmRleFJlZikudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGNoaWxkRy5pbmRleFJlZikudG8uZXF1YWwgM1xuXHRcdFx0ZXhwZWN0KGNoaWxkQS5pbmRleFJlZikudG8uZXF1YWwgbnVsbFxuXHRcdFx0ZXhwZWN0KGNoaWxkQy5pbmRleFJlZikudG8uZXF1YWwgbnVsbFxuXG5cblx0XHR0ZXN0IFwiUXVlcnlcIiwgKCktPlxuXHRcdFx0ZGl2ID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRbJ2RpdicsIHtjbGFzczonZGl2LW9uZScsIGF0dHJzOm5hbWU6J2FiYzEyMyd9LFxuXHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEEnLCBzdHlsZTp7Y29sb3I6J3BpbmsnfX0sXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnc3BhbicsIHtjbGFzczonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge2NsYXNzOidjaGlsZEFfMid9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ2RpdicsIGNsYXNzTmFtZTonY2hpbGRCJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnc2VjdGlvbicsIGNsYXNzTmFtZTonY2hpbGRCJywgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQl8xJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHQpLnNwYXduKCkuYXBwZW5kVG8oc2FuZEJveCA9IERvbShzYW5kYm94KSlcblxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeSAnLmNoaWxkQScpLnRvLmVxdWFsKGRpdi5jaGlsZHJlblswXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnkgJy5jaGlsZEInKS50by5lcXVhbChkaXYuY2hpbGRyZW5bMV0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5ICcuY2hpbGRCXzEnKS50by5lcXVhbChkaXYuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5ICcuY2hpbGRBXzEnKS50by5lcXVhbChkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoZGl2LnF1ZXJ5ICcuY2hpbGRBXzInKS50by5lcXVhbChkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bM10pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeSAnLmRpdi1vbmUnKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeSAnLmNoaWxkQl8xJykudG8uZXF1YWwoZGl2LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnkgJ2RpdltuYW1lPVwiYWJjMTIzXCJdJykudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnkgJ3NwYW5bbmFtZT1cImFiYzEyM1wiXScpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXG5cdFx0dGVzdCBcIlF1ZXJ5QWxsXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0WydkaXYnLCB7Y2xhc3M6J2Rpdi1vbmUnLCBhdHRyczpuYW1lOidhYmMxMjMnfSxcblx0XHRcdFx0XHRbJ2RpdicsIHtjbGFzczonY2hpbGRBJywgc3R5bGU6e2NvbG9yOidwaW5rJ319LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge2NsYXNzOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFx0WydkaXYnLCB7Y2xhc3M6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7Y2xhc3M6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtjbGFzczonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCBjbGFzc05hbWU6J2NoaWxkQicsIFxuXHRcdFx0XHRcdFx0WydzcGFuJywge2NsYXNzOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XHRbJ3NlY3Rpb24nLCBjbGFzc05hbWU6J2NoaWxkQicsIFxuXHRcdFx0XHRcdFx0WydzcGFuJywge2NsYXNzOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KS5zcGF3bigpLmFwcGVuZFRvKHNhbmRCb3ggPSBEb20oc2FuZGJveCkpXG5cblx0XHRcdGV4cGVjdChkaXYucXVlcnlBbGwoJy5jaGlsZEEnKS5lbGVtZW50cykudG8uZXFsKFtkaXYuY2hpbGRyZW5bMF1dKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQicpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblsxXSwgZGl2LmNoaWxkcmVuWzJdXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnlBbGwoJy5jaGlsZEJfMScpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblsxXS5jaGlsZHJlblswXSwgZGl2LmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdXSlcblx0XHRcdGV4cGVjdChkaXYucXVlcnlBbGwoJy5jaGlsZEFfMScpLmVsZW1lbnRzKS50by5lcWwoW2Rpdi5jaGlsZHJlblswXS5jaGlsZHJlblswXSwgZGl2LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdLCBkaXYuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMl1dKVxuXHRcdFx0ZXhwZWN0KGRpdi5xdWVyeUFsbCgnLmNoaWxkQV8yJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzNdXSlcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5QWxsKCcuZGl2LW9uZScpLmVsZW1lbnRzKS50by5lcWwoW2Rpdl0pXG5cdFx0XHRleHBlY3Qoc2FuZEJveC5xdWVyeUFsbCgnLmNoaWxkQl8xJykuZWxlbWVudHMpLnRvLmVxbChbZGl2LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdLCBkaXYuY2hpbGRyZW5bMl0uY2hpbGRyZW5bMF1dKVxuXHRcdFx0ZXhwZWN0KHNhbmRCb3gucXVlcnlBbGwoJ2RpdltuYW1lPVwiYWJjMTIzXCJdJykuZWxlbWVudHMpLnRvLmVxbChbZGl2XSlcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5QWxsKCdzcGFuW25hbWU9XCJhYmMxMjNcIl0nKS5lbGVtZW50cykudG8uZXFsKFtdKVxuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzYW5kQm94LnF1ZXJ5QWxsKCcuY2hpbGRCXzEnKS50ZXh0KCdhYmMxMjMnKS5lbGVtZW50cykudG8uZXFsKFtkaXYuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0sIGRpdi5jaGlsZHJlblsyXS5jaGlsZHJlblswXV0pXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsKCdhYmMxMjNhYmMxMjMnKVxuXG5cblx0XHR0ZXN0IFwiUXVlcnkvUXVlcnlBbGwgc2hvcnRjdXRzXCIsICgpLT5cblx0XHRcdGV4cGVjdChEb20ucXVlcnkoJ2hlYWQnKSkudG8uZXF1YWwoRG9tKGRvY3VtZW50KS5xdWVyeSgnaGVhZCcpKVxuXHRcdFx0ZXhwZWN0KERvbS5xdWVyeSgnYm9keScpKS50by5lcXVhbChEb20oZG9jdW1lbnQpLnF1ZXJ5KCdib2R5JykpXG5cdFx0XHRcblx0XHRcdGFsbEEgPSBEb20ucXVlcnlBbGwoJ3NlY3Rpb24nKS5lbGVtZW50c1xuXHRcdFx0YWxsQiA9IERvbShkb2N1bWVudCkucXVlcnlBbGwoJ3NlY3Rpb24nKS5lbGVtZW50c1xuXHRcdFx0ZXhwZWN0KGFsbEEubGVuZ3RoKS50by5lcXVhbChhbGxCLmxlbmd0aClcblx0XHRcdGZvciBlbCxpbmRleCBpbiBhbGxBXG5cdFx0XHRcdGV4cGVjdChhbGxBW2luZGV4XSkudG8uZXF1YWwoYWxsQltpbmRleF0pXG5cdFx0XHRyZXR1cm5cblxuXG5cblx0c3VpdGUgXCJNYW5pcHVsYXRpb25cIiwgKCktPlxuXHRcdHRlc3QgXCIuYXBwZW5kKClcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXHRcdFx0QyA9IERvbS50ZXh0KClcblx0XHRcdEQgPSBEb20uZGl2KClcblx0XHRcdE1haW5BID0gRG9tLmRpdihudWxsLCBBLCBCLCBDLCBEKVxuXHRcdFx0TWFpbkIgPSBEb20uZGl2KClcblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQSwgQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKClcblxuXHRcdFx0TWFpbkIuYXBwZW5kKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShCLCBDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQSlcblxuXHRcdFx0Qy5hcHBlbmRUbyhNYWluQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEIsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShBLCBDKVxuXG5cblxuXHRcdHRlc3QgXCIucHJlcGVuZCgpXCIsICgpLT5cblx0XHRcdEEgPSBEb20uZGl2KClcblx0XHRcdEIgPSBEb20uZGl2KClcblx0XHRcdEMgPSBEb20udGV4dCgpXG5cdFx0XHREID0gRG9tLmRpdigpXG5cdFx0XHRNYWluQSA9IERvbS5kaXYobnVsbCwgQSwgQiwgQywgRClcblx0XHRcdE1haW5CID0gRG9tLmRpdigpXG5cblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEEsIEIsIEMsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKSgpXG5cblx0XHRcdE1haW5CLnByZXBlbmQoQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEIsIEMsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShBKVxuXG5cdFx0XHRDLnByZXBlbmRUbyhNYWluQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkEpKEIsIEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5CKShDLCBBKVxuXG5cblx0XHR0ZXN0IFwiLmFmdGVyKClcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXHRcdFx0QyA9IERvbS50ZXh0KClcblx0XHRcdEQgPSBEb20uZGl2KClcblx0XHRcdE1haW5BID0gRG9tLmRpdihudWxsLCBBLCBCLCBDLCBEKVxuXHRcdFx0TWFpbkIgPSBEb20uZGl2KClcblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQSwgQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKClcblxuXHRcdFx0TWFpbkIuYXBwZW5kKEIpXG5cdFx0XHRCLmFmdGVyKEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShDLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQiwgQSlcblxuXHRcdFx0Qy5pbnNlcnRBZnRlcihCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEIsIEMsIEEpXG5cblxuXHRcdHRlc3QgXCIuYmVmb3JlKClcIiwgKCktPlxuXHRcdFx0QSA9IERvbS5kaXYoKVxuXHRcdFx0QiA9IERvbS5kaXYoKVxuXHRcdFx0QyA9IERvbS50ZXh0KClcblx0XHRcdEQgPSBEb20uZGl2KClcblx0XHRcdE1haW5BID0gRG9tLmRpdihudWxsLCBBLCBCLCBDLCBEKVxuXHRcdFx0TWFpbkIgPSBEb20uZGl2KClcblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQSwgQiwgQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKClcblxuXHRcdFx0TWFpbkIuYXBwZW5kKEIpXG5cdFx0XHRCLmJlZm9yZShBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQSkoQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbkIpKEEsIEIpXG5cblx0XHRcdEMuaW5zZXJ0QmVmb3JlKEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW5BKShEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluQikoQSwgQywgQilcblxuXG5cdFx0dGVzdCBcIi5kZXRhY2goKVwiLCAoKS0+XG5cdFx0XHRlbWl0Q291bnQgPSAwXG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsICdJbm5lciBUZXh0IEhlcmUnKVxuXHRcdFx0ZGl2Lm9uICdiZWVwJywgKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRkaXYuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkubm90LnRvLmV4aXN0XG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXHRcdFx0XG5cdFx0XHRkaXYuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGRpdi5lbWl0KCdiZWVwJylcblx0XHRcdGV4cGVjdChzYW5kYm94LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYucGFyZW50LmVsKS50by5lcXVhbChzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAncmVsYXhlZCcpLnRvLmJlLnRydWVcblxuXHRcdFx0ZGl2LmRldGFjaCgpXG5cdFx0XHRkaXYuZW1pdCgnYmVlcCcpXG5cdFx0XHRleHBlY3Qoc2FuZGJveC5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkubm90LnRvLmV4aXN0XG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXG5cblx0XHR0ZXN0IFwiLnJlbW92ZSgpXCIsICgpLT5cblx0XHRcdGVtaXRDb3VudCA9IDBcblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJ0lubmVyIFRleHQgSGVyZScpXG5cdFx0XHRkaXYub24gJ2JlZXAnLCAoKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRkaXYuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdGRpdi5zdGF0ZSAncmVsYXhlZCcsIG9uXG5cblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS5ub3QudG8uZXhpc3Rcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDApXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cdFx0XHRcblx0XHRcdGRpdi5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZGl2LmVtaXQoJ2JlZXAnKVxuXHRcdFx0ZXhwZWN0KHNhbmRib3guY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQuZWwpLnRvLmVxdWFsKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUudHJ1ZVxuXG5cdFx0XHRkaXYucmVtb3ZlKClcblx0XHRcdGRpdi5lbWl0KCdiZWVwJylcblx0XHRcdGV4cGVjdChzYW5kYm94LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS5ub3QudG8uZXhpc3Rcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdyZWxheGVkJykudG8uYmUuZmFsc2VcblxuXG5cdFx0dGVzdCBcIi5lbXB0eSgpXCIsICgpLT5cblx0XHRcdE1haW4gPSBEb20uZGl2KClcblx0XHRcdEEgPSBEb20uZGl2KCkuYXBwZW5kVG8oTWFpbilcblx0XHRcdEIgPSBEb20uZGl2KCkuYXBwZW5kVG8oTWFpbilcblx0XHRcdEEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdEIuc3RhdGUgJ2hhcHB5Jywgb25cblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBCKVxuXHRcdFx0ZXhwZWN0KEEuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXG5cdFx0XHRNYWluLmVtcHR5KClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoKVxuXHRcdFx0ZXhwZWN0KEEucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cdFx0XHRleHBlY3QoQi5wYXJlbnQpLnRvLmVxdWFsKHVuZGVmaW5lZClcblx0XHRcdGV4cGVjdChBLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChCLnN0YXRlICdoYXBweScpLnRvLmJlLnRydWVcblxuXG5cdFx0dGVzdCBcIi53cmFwKClcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QyA9IERvbS5kaXYoKVxuXHRcdFx0d3JhcEEgPSBEb20uc2VjdGlvbigpXG5cdFx0XHR3cmFwQiA9IERvbS5zZWN0aW9uKClcblx0XHRcdHdyYXBDID0gRG9tLnNlY3Rpb24oKVxuXHRcdFx0QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qi5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0Qy5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0d3JhcEEuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0d3JhcEIuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0d3JhcEMuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBCKVxuXHRcdFx0XG5cdFx0XHRBLndyYXAod3JhcEEpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQSkoQSlcblx0XHRcdFxuXHRcdFx0Qi53cmFwKHdyYXBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKSh3cmFwQSwgd3JhcEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBBKShBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQikoQilcblx0XHRcdFxuXHRcdFx0Qi53cmFwKHdyYXBBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKSh3cmFwQSwgd3JhcEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBBKShBLCBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQikoKVxuXHRcdFx0XG5cdFx0XHR3cmFwQy5hcHBlbmRUbyh3cmFwQilcblx0XHRcdEMud3JhcCh3cmFwQylcblx0XHRcdEMud3JhcCgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKHdyYXBBLCB3cmFwQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEEpKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBCKSh3cmFwQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUod3JhcEMpKEMpXG5cdFx0XHRcblx0XHRcdEMud3JhcChDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKSh3cmFwQSwgd3JhcEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBBKShBLCBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZSh3cmFwQikod3JhcEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHdyYXBDKShDKVxuXG5cdFx0XHRleHBlY3QoQS5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoQi5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoQy5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3Qod3JhcEEuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3Qod3JhcEIuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3Qod3JhcEMuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS50cnVlXG5cblxuXHRcdHRlc3QgXCIudW53cmFwKClcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5wcmVwZW5kVG8oTWFpbilcblx0XHRcdEIgPSBEb20uZGl2KCkuYXBwZW5kVG8oQSlcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oQSlcblx0XHRcdEQgPSBEb20uZGl2KCkuYXBwZW5kVG8oQylcblx0XHRcdEUgPSBEb20uZGl2KCkuYXBwZW5kVG8oRClcblx0XHRcdEEuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdEIuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdEMuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdEQuc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdEUuc3RhdGUgJ2hhcHB5Jywgb25cblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShCLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKEUpXG5cblx0XHRcdEUudW53cmFwKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoQiwgQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKShFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cblx0XHRcdEIudW53cmFwKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQiwgQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXHRcdFx0RS51bndyYXAoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShCLCBFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cblx0XHRcdEEuaW5zZXJ0QWZ0ZXIoQilcblx0XHRcdEMuYXBwZW5kVG8oQSlcblx0XHRcdEQuYXBwZW5kVG8oQSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQiwgQSwgRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblxuXHRcdFx0RC51bndyYXAoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShCLCBDLCBELCBFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cblxuXG5cdFx0dGVzdCBcIi5yZXBsYWNlKClcIiwgKCktPlxuXHRcdFx0TWFpbiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QiA9IERvbS5kaXYoKS5hcHBlbmRUbyhNYWluKVxuXHRcdFx0QyA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0RCA9IERvbS5kaXYoKS5hcHBlbmRUbyhBKVxuXHRcdFx0RSA9IERvbS5kaXYoKS5hcHBlbmRUbyhEKVxuXHRcdFx0XG5cdFx0XHRBLnJlcGxhY2UoKTsgRS5yZXBsYWNlKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQSwgQilcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoQywgRClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKEUpXG5cdFx0XHRcblx0XHRcdEMucmVwbGFjZShFKS5hcHBlbmRUbyhCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShBLCBCKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShFLCBEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKShDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblx0XHRcdFxuXHRcdFx0RC5yZXBsYWNlKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEEsIEIpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXHRcdFx0XG5cdFx0XHRCLnJlcGxhY2UoQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoTWFpbikoQSwgQylcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQSkoRSlcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQikoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShDKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEQpKClcblx0XHRcdFxuXHRcdFx0QS5yZXBsYWNlKEQpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKE1haW4pKEQsIEMpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEEpKEUpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEIpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoQykoKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShEKSgpXG5cdFx0XHRcblx0XHRcdEIucmVwbGFjZShEKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShNYWluKShDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShBKShFKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShCKSgpXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKEMpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoRCkoKVxuXG5cblx0XHR0ZXN0IFwiLmNsb25lKClcIiwgKCktPlxuXHRcdFx0ZW1pdENvdW50ID0gMFxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0b3B0cyA9IHtzdHlsZTogJGJhc2U6e3dpZHRoOiczNHB4J30sICRoYXBweTp7aGVpZ2h0Oic5OXB4J30sICRyZWxheGVkOntvcGFjaXR5OicwLjUnfX1cblx0XHRcdEEgPSBEb20uZGl2KG9wdHMsICdTb21lIElubmVyIFRleHQnKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0QS5vbiAncHJpdmF0ZUV2ZW50JywgKCktPiBlbWl0Q291bnQrK1xuXHRcdFx0Y2hpbGRBID0gRG9tLmRpdigpLmFwcGVuZFRvKEEpXG5cdFx0XHRjaGlsZEIgPSBEb20uc3BhbigpLmFwcGVuZFRvKEEpXG5cdFx0XHRCID0gQS5jbG9uZSgpXG5cblx0XHRcdEEuc3RhdGUgJ3JlbGF4ZWQnLCBvblxuXHRcdFx0QS5lbWl0KCdwcml2YXRlRXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChBLnBhcmVudCkudG8uZXF1YWwoc2FuZEJveClcblx0XHRcdGV4cGVjdChBLmNzcyAnd2lkdGgnKS50by5lcXVhbCgnMzRweCcpXG5cdFx0XHRleHBlY3QoQS5jc3MgJ2hlaWdodCcpLnRvLmVxdWFsKCc5OXB4Jylcblx0XHRcdGV4cGVjdChBLmNzcyAnb3BhY2l0eScpLnRvLmVxdWFsKCcwLjUnKVxuXHRcdFx0ZXhwZWN0KEEuc2libGluZ3MubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMF0uZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsICdTb21lIElubmVyIFRleHQnXG5cdFx0XHRleHBlY3QoQS5jaGlsZHJlblsxXSkudG8uZXF1YWwoY2hpbGRBKVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW5bMl0pLnRvLmVxdWFsKGNoaWxkQilcblx0XHRcdGV4cGVjdChCKS5ub3QudG8uZXF1YWwoQSlcblx0XHRcdGV4cGVjdChCLnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0c2FuZEJveC5hcHBlbmQoQilcblxuXHRcdFx0ZXhwZWN0KEIucGFyZW50KS50by5lcXVhbChzYW5kQm94KVxuXHRcdFx0ZXhwZWN0KEIuY3NzICd3aWR0aCcpLnRvLmVxdWFsKCczNHB4Jylcblx0XHRcdGV4cGVjdChCLmNzcyAnaGVpZ2h0JykudG8uZXF1YWwoJzk5cHgnKVxuXHRcdFx0ZXhwZWN0KEIuY3NzICdvcGFjaXR5JykudG8uZXF1YWwoJzEnKVxuXHRcdFx0ZXhwZWN0KEIuc2libGluZ3MubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW5bMF0uZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsICdTb21lIElubmVyIFRleHQnXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblswXSkubm90LnRvLmVxdWFsKEEuY2hpbGRyZW5bMF0pXG5cdFx0XHRleHBlY3QoQi5jaGlsZHJlblsxXSkubm90LnRvLmVxdWFsKGNoaWxkQSlcblx0XHRcdGV4cGVjdChCLmNoaWxkcmVuWzJdKS5ub3QudG8uZXF1YWwoY2hpbGRCKVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KEIuc3RhdGUgJ3JlbGF4ZWQnKS50by5iZS5mYWxzZVxuXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgxKVxuXHRcdFx0Qi5lbWl0KCdwcml2YXRlRXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMilcblx0XHRcdFxuXHRcdFx0QS5vZmYoKVxuXHRcdFx0QS5lbWl0KCdwcml2YXRlRXZlbnQnKVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMilcblx0XHRcdEIuZW1pdCgncHJpdmF0ZUV2ZW50Jylcblx0XHRcdGV4cGVjdChlbWl0Q291bnQpLnRvLmVxdWFsKDMpXG5cblxuXHRcdHRlc3QgXCIucHJvcCgpIC0gZWxlbWVudCBwcm9wZXJ0eSBnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ215UHJvcCcpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdteVByb3AnLCAxOTIpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdteVByb3AnKS50by5lcXVhbCAxOTJcblx0XHRcdGV4cGVjdChkaXYucHJvcCAnbXlQcm9wJywgJzE5MicpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdteVByb3AnKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdhbm90aGVyUHJvcCcsIFsxLDIsM10pLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5wcm9wICdhbm90aGVyUHJvcCcpLnRvLmVxbCBbMSwyLDNdXG5cdFx0XHRleHBlY3QoZGl2LmVsLm15UHJvcCkudG8uZXF1YWwgJzE5Midcblx0XHRcdGV4cGVjdChkaXYuZWwuYW5vdGhlclByb3ApLnRvLmVxbCBbMSwyLDNdIFxuXG5cdFx0XHRkaXYuZWwubGFzdFByb3AgPSA5OTk5XG5cdFx0XHRleHBlY3QoZGl2LmVsLmxhc3RQcm9wKS50by5lcXVhbCA5OTk5XG5cdFx0XHRleHBlY3QoZGl2LnByb3AgJ2xhc3RQcm9wJykudG8uZXF1YWwgOTk5OVxuXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoZGl2LmVsKSkubm90LnRvLmNvbnRhaW4oJ3Byb21pc2VJc0xhc3QnKVxuXHRcdFx0XG5cdFx0XHRkaXYucHJvcCAncHJvbWlzZUlzTGFzdCcsICdvdmVyOWsnXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoZGl2LmVsKSkudG8uY29udGFpbigncHJvbWlzZUlzTGFzdCcpXG5cdFx0XHRcblx0XHRcdGRpdi5wcm9wICdwcm9taXNlSXNMYXN0JywgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXMoZGl2LmVsKSkudG8uY29udGFpbigncHJvbWlzZUlzTGFzdCcpXG5cdFx0XHRcblx0XHRcdGRpdi5wcm9wICdwcm9taXNlSXNMYXN0JywgbnVsbFxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKGRpdi5lbCkpLnRvLmNvbnRhaW4oJ3Byb21pc2VJc0xhc3QnKVxuXG5cdFx0XHRkaXYucHJvcCB7YWJjOjEyMywgZGVmOjQ1Nn1cblx0XHRcdGV4cGVjdChkaXYuZWwuYWJjKS50by5lcXVhbCAxMjNcblx0XHRcdGV4cGVjdChkaXYuZWwuZGVmKS50by5lcXVhbCA0NTZcblxuXG5cdFx0dGVzdCBcIi5hdHRyKCkgLSBlbGVtZW50IGF0dHJpYnV0ZSBnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QoZGl2LmF0dHIgJ215QXR0cicpLnRvLmVxdWFsIG51bGxcblx0XHRcdGV4cGVjdChkaXYuYXR0ciAnbXlBdHRyJywgMTkyKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYuYXR0ciAnbXlBdHRyJykudG8uZXF1YWwgJzE5Midcblx0XHRcdGV4cGVjdChkaXYuYXR0ciAnbXlBdHRyJywgJzE5MicpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdteUF0dHInKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdhbm90aGVyQXR0cicsIFsxLDIsM10pLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5hdHRyICdhbm90aGVyQXR0cicpLnRvLmVxdWFsICcxLDIsMydcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdteUF0dHInKS50by5lcXVhbCAnMTkyJ1xuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ2Fub3RoZXJBdHRyJykudG8uZXFsICcxLDIsMydcblxuXHRcdFx0ZGl2LmVsLnNldEF0dHJpYnV0ZSAnbGFzdEF0dHInLCA5OTk5XG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnbGFzdEF0dHInKS50by5lcXVhbCAnOTk5OSdcblx0XHRcdGV4cGVjdChkaXYuYXR0ciAnbGFzdEF0dHInKS50by5lcXVhbCAnOTk5OSdcblxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ3Byb21pc2VJc0xhc3QnKS50by5lcXVhbCBudWxsXG5cdFx0XHRcblx0XHRcdGRpdi5hdHRyICdwcm9taXNlSXNMYXN0JywgJ292ZXI5aydcblx0XHRcdGV4cGVjdChkaXYuZWwuZ2V0QXR0cmlidXRlICdwcm9taXNlSXNMYXN0JykudG8uZXF1YWwgJ292ZXI5aydcblx0XHRcdFxuXHRcdFx0ZGl2LmF0dHIgJ3Byb21pc2VJc0xhc3QnXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAncHJvbWlzZUlzTGFzdCcpLnRvLmVxdWFsICdvdmVyOWsnXG5cdFx0XHRcblx0XHRcdGRpdi5hdHRyICdwcm9taXNlSXNMYXN0JywgbnVsbFxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ3Byb21pc2VJc0xhc3QnKS50by5lcXVhbCBudWxsXG5cblx0XHRcdGRpdi5hdHRyIHthYmM6MTIzLCBkZWY6NDU2fVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ2FiYycpLnRvLmVxdWFsICcxMjMnXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnZGVmJykudG8uZXF1YWwgJzQ1NidcblxuXHRcdFx0ZGl2LmF0dHIge2FiYzoxMjMsIGRlZjpudWxsfVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC5nZXRBdHRyaWJ1dGUgJ2FiYycpLnRvLmVxdWFsICcxMjMnXG5cdFx0XHRleHBlY3QoZGl2LmVsLmdldEF0dHJpYnV0ZSAnZGVmJykudG8uZXF1YWwgbnVsbFxuXG5cblx0XHR0ZXN0IFwiLmh0bWwgLSBpbm5lckhUTUwgZ2V0dGVyL3NldHRlclwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsIERvbS5kaXYoKSwgJ1NvbWUgdGV4dCcsIERvbS5zcGFuKCksIERvbS5kaXYoKSlcblxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDQpXG5cdFx0XHRleHBlY3QoZGl2Lmh0bWwpLnRvLmVxdWFsKGRpdi5lbC5pbm5lckhUTUwpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoNClcblxuXHRcdFx0ZGl2Lmh0bWwgPSAnPHNlY3Rpb24gSUQ9XCJ0ZXN0XCI+PC9zZWN0aW9uPidcblx0XHRcdGV4cGVjdChkaXYuaHRtbCkudG8uZXF1YWwoJzxzZWN0aW9uIGlkPVwidGVzdFwiPjwvc2VjdGlvbj4nKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuWzBdLmVsLmlkKS50by5lcXVhbCgndGVzdCcpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuWzBdLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdzZWN0aW9uJylcblxuXG5cdFx0dGVzdCBcIi50ZXh0IC0gdGV4dENvbnRlbnQgZ2V0dGVyL3NldHRlclwiLCAoKS0+XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsICdTb21lIHRleHQnLCBEb20uc3BhbihudWxsLCAnSW5uZXIgVGV4dCcpKVxuXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwoZGl2LmVsLnRleHRDb250ZW50KVxuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCgnU29tZSB0ZXh0SW5uZXIgVGV4dCcpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblxuXHRcdFx0ZGl2LnRleHQgPSAnbmV3VGV4dCdcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwoJ25ld1RleHQnKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbC50ZXh0Q29udGVudCkudG8uZXF1YWwoJ25ld1RleHQnKVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuWzBdLmVsLm5vZGVUeXBlKS50by5lcXVhbCgzKVxuXG5cblx0XHR0ZXN0IFwiLmFkZENsYXNzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgY2xhc3M6J3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgICAgYW5ub3lpbmctXy1zZWxlY3RvciAnXG5cblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgICAgYW5ub3lpbmctXy1zZWxlY3RvciAnXG5cdFx0XHRcblx0XHRcdGRpdi5hZGRDbGFzcygnbmV3LXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBuZXctc2VsZWN0b3InXG5cdFx0XHRcblx0XHRcdGRpdi5hZGRDbGFzcygnbmV3LXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBuZXctc2VsZWN0b3InXG5cdFx0XHRcblx0XHRcdGRpdi5yYXcuY2xhc3NOYW1lID0gZGl2LnJhdy5jbGFzc05hbWUucmVwbGFjZSAnbmV3LXNlbGVjdG9yJywgJyAnXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdzb21lLXNlbGVjdG9yIGFub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3IgICdcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFxuXHRcdFx0ZGl2LmFkZENsYXNzKCcucGVyaW9kJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBuZXctc2VsZWN0b3InXG5cdFx0XHRcblx0XHRcdGRpdi5hZGRDbGFzcygncGVyaW9kJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBuZXctc2VsZWN0b3IgcGVyaW9kJ1xuXG5cblx0XHR0ZXN0IFwiLnJlbW92ZUNsYXNzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgY2xhc3M6J3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgICAgYW5ub3lpbmctXy1zZWxlY3RvciAnXG5cblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgICAgYW5ub3lpbmctXy1zZWxlY3RvciAnXG5cdFx0XHRcblx0XHRcdGRpdi5hZGRDbGFzcygnbmV3LXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBuZXctc2VsZWN0b3InXG5cblx0XHRcdGRpdi5yZW1vdmVDbGFzcygnbmV3LXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvcidcblxuXHRcdFx0ZGl2LnJlbW92ZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRkaXYucmVtb3ZlQ2xhc3MoJ3NvbWUtc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnJlbW92ZUNsYXNzKCdwZXJpb2QnKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnJlbW92ZUNsYXNzKCcucGVyaW9kJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciBhbm5veWluZy1fLXNlbGVjdG9yJ1xuXG5cblx0XHR0ZXN0IFwiLnRvZ2dsZUNsYXNzXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYgY2xhc3M6J3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgICAgYW5ub3lpbmctXy1zZWxlY3RvciAnXG5cblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgICAgYW5ub3lpbmctXy1zZWxlY3RvciAnXG5cdFx0XHRcblx0XHRcdGRpdi50b2dnbGVDbGFzcygnbmV3LXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvciBuZXctc2VsZWN0b3InXG5cblx0XHRcdGRpdi50b2dnbGVDbGFzcygnbmV3LXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ3NvbWUtc2VsZWN0b3IgYW5vdGhlclNlbGVjdG9yIC5wZXJpb2QgYW5ub3lpbmctXy1zZWxlY3RvcidcblxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZXhwZWN0KGRpdi5yYXcuY2xhc3NOYW1lKS50by5lcXVhbCAnc29tZS1zZWxlY3RvciBhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIG5ldy1zZWxlY3Rvcidcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCduZXctc2VsZWN0b3InKVxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCdzb21lLXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3InXG5cdFx0XHRcdFx0XHRcblx0XHRcdGRpdi50b2dnbGVDbGFzcygnc29tZS1zZWxlY3RvcicpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdhbm90aGVyU2VsZWN0b3IgLnBlcmlvZCBhbm5veWluZy1fLXNlbGVjdG9yIHNvbWUtc2VsZWN0b3InXG5cdFx0XHRcdFx0XHRcblx0XHRcdGRpdi50b2dnbGVDbGFzcygncGVyaW9kJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciAucGVyaW9kIGFubm95aW5nLV8tc2VsZWN0b3Igc29tZS1zZWxlY3RvciBwZXJpb2QnXG5cdFx0XHRcdFx0XHRcblx0XHRcdGRpdi50b2dnbGVDbGFzcygnLnBlcmlvZCcpXG5cdFx0XHRleHBlY3QoZGl2LnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdhbm90aGVyU2VsZWN0b3IgYW5ub3lpbmctXy1zZWxlY3RvciBzb21lLXNlbGVjdG9yIHBlcmlvZCdcblx0XHRcdFx0XHRcdFxuXHRcdFx0ZGl2LnRvZ2dsZUNsYXNzKCdhbm5veWluZy1fLXNlbGVjdG9yJylcblx0XHRcdGV4cGVjdChkaXYucmF3LmNsYXNzTmFtZSkudG8uZXF1YWwgJ2Fub3RoZXJTZWxlY3RvciBzb21lLXNlbGVjdG9yIHBlcmlvZCdcblxuXG5cdFx0dGVzdCBcIi5zZXRSZWZcIiwgKCktPlxuXHRcdFx0ZWwgPSBET00uZGl2KHJlZjonbmFtZTEnKVxuXHRcdFx0ZXhwZWN0KGVsLnJlZikudG8uZXF1YWwgJ25hbWUxJ1xuXHRcdFx0ZXhwZWN0KGVsLm9wdGlvbnMucmVmKS50by5lcXVhbCAnbmFtZTEnXG5cdFx0XHRleHBlY3QoZWwuYXR0ciAnZGF0YS1yZWYnKS50by5lcXVhbCAnbmFtZTEnXG5cblx0XHRcdGVsLnNldFJlZiAnbmFtZTInXG5cdFx0XHRleHBlY3QoZWwucmVmKS50by5lcXVhbCAnbmFtZTInXG5cdFx0XHRleHBlY3QoZWwub3B0aW9ucy5yZWYpLnRvLmVxdWFsICduYW1lMidcblx0XHRcdGV4cGVjdChlbC5hdHRyICdkYXRhLXJlZicpLnRvLmVxdWFsICduYW1lMidcblxuXG5cblxuXHRcdHRlc3QgXCJBcHBlbmRpbmcvcHJlcGVuZGluZyBlbGVtZW50cyB0byBhIHRleHQgbm9kZSBzaG91bGQgZG8gbm90aGluZ1wiLCAoKS0+XG5cdFx0XHR0ZXh0ID0gRG9tLnRleHQoJ2FiYzEyMycpXG5cdFx0XHRleHBlY3QodGV4dC50ZXh0KS50by5lcXVhbCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0ZXh0LnJhdy5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMClcblxuXHRcdFx0dGV4dC5hcHBlbmQoRG9tLnRleHQoJ2RlZicpKVxuXHRcdFx0ZXhwZWN0KHRleHQudGV4dCkudG8uZXF1YWwoJ2FiYzEyMycpXG5cdFx0XHRleHBlY3QodGV4dC5yYXcuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDApXG5cblx0XHRcdHRleHQucHJlcGVuZChEb20uZGl2KG51bGwsICdkZWYnKSlcblx0XHRcdGV4cGVjdCh0ZXh0LnRleHQpLnRvLmVxdWFsKCdhYmMxMjMnKVxuXHRcdFx0ZXhwZWN0KHRleHQucmF3LmNoaWxkTm9kZXMubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0XG5cdFx0XHRkaXYgPSBEb20uZGl2KG51bGwsICc0NTYnKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKHRleHQpXG5cdFx0XHRleHBlY3QodGV4dC50ZXh0KS50by5lcXVhbCgnYWJjMTIzJylcblx0XHRcdGV4cGVjdCh0ZXh0LnJhdy5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGV4cGVjdChkaXYucGFyZW50KS50by5lcXVhbCh1bmRlZmluZWQpXG5cblxuXG5cblx0c3VpdGUgXCJCYXRjaFwiLCAoKS0+XG5cdFx0dGVzdCBcIkRvbS5iYXRjaCgpIHRha2VzIGFuIGl0ZXJhYmxlIGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgZWxlbWVudHMgb3IgUXVpY2tEb20gZWxlbWVudHMgYW5kIHJldmVhbHMgdGhlIFF1aWNrRWxlbWVudCBBUEkgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIGZvciBlYWNoIGVsZW1lbnRcIiwgKCktPlxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEIgPSBEb20uc2VjdGlvbigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXG5cdFx0XHRjaGVja0NoaWxkU3RydWN0dXJlKHNhbmRCb3gpKClcblx0XHRcdGNoZWNrQ2hpbGRTdHJ1Y3R1cmUoZGl2KShBLCBCLCBDKVxuXG5cdFx0XHREb20uYmF0Y2goW0EsQixDXSlcblx0XHRcdFx0LmFwcGVuZFRvKHNhbmRCb3gpXG5cdFx0XHRcdC5zdHlsZSAnb3BhY2l0eScsIDAuNVxuXHRcdFx0XHQuY3NzIHtoZWlnaHQ6MzAsIGJhY2tncm91bmRDb2xvcjoncGluayd9XG5cdFx0XHRcdC5hcHBlbmQgJ1NvbWUgSW5uZXIgVGV4dCdcblxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShzYW5kQm94KShBLCBCLCBDKVxuXHRcdFx0Y2hlY2tDaGlsZFN0cnVjdHVyZShkaXYpKClcblxuXHRcdFx0ZXhwZWN0KGdldENvbXB1dGVkU3R5bGUoQS5lbCkub3BhY2l0eSkudG8uZXF1YWwoJzAuNScpXG5cdFx0XHRleHBlY3QoZ2V0Q29tcHV0ZWRTdHlsZShDLmVsKS5vcGFjaXR5KS50by5lcXVhbCgnMC41Jylcblx0XHRcdGV4cGVjdChnZXRDb21wdXRlZFN0eWxlKEIuZWwpLmhlaWdodCkudG8uZXF1YWwoJzMwcHgnKVxuXHRcdFx0ZXhwZWN0KEEuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEMuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KEIuY2hpbGRyZW5bMF0uZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXG5cblx0XHR0ZXN0IFwiSWYgYSB0cnV0aHkgdmFsdWUgaXMgcGFzc2VkIGFzIHRoZSAybmQgYXJnIG9mIERvbS5iYXRjaCgpLCBhbiBhcnJheSB3aWxsIGJlIHJldHVybmVkIGZvciB0aGUgZmlyc3QgbWV0aG9kIGludm9rZWQgY29udGFpbmluZyB0aGUgcmVzdWx0IGZvciBlYWNoIGVsZW1lbnQgcHJvdmlkZWRcIiwgKCktPlxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhzYW5kQm94KVxuXHRcdFx0QiA9IERvbS5zZWN0aW9uKCkuYXBwZW5kVG8oc2FuZEJveClcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oc2FuZEJveClcblxuXHRcdFx0YmF0Y2gxID0gRG9tLmJhdGNoKFtBLEIsQ10pXG5cdFx0XHRiYXRjaDIgPSBEb20uYmF0Y2goW0EsQixDXSwgdHJ1ZSlcblxuXHRcdFx0ZXhwZWN0KGJhdGNoMS5zdHlsZSgnd2lkdGgnKSkudG8uZXF1YWwoYmF0Y2gxKVxuXHRcdFx0ZXhwZWN0KGJhdGNoMS5zdHlsZSgnd2lkdGgnLCA0NykpLnRvLmVxdWFsKGJhdGNoMSlcblx0XHRcdGV4cGVjdChiYXRjaDIuc3R5bGUoJ3dpZHRoJykpLnRvLmVxbChbJzQ3cHgnLCAnNDdweCcsICc0N3B4J10pXG5cdFx0XHRleHBlY3QoYmF0Y2gyLnN0eWxlKCd3aWR0aCcsIDMzKSkudG8uZXFsKFtBLEIsQ10pXG5cdFx0XHRleHBlY3QoYmF0Y2gyLnN0eWxlKCd3aWR0aCcpKS50by5lcWwoWyczM3B4JywgJzMzcHgnLCAnMzNweCddKVxuXG5cblx0XHR0ZXN0IFwiSWYgdGhlIC5yZXR1cm4oKSBtZXRob2QgaXMgaW52b2tlZCBvbiB0aGUgYmF0Y2ggaW5zdGFuY2UsIGl0IHdpbGwgcmV0dXJuIHRoZSByZXN1bHQgc2V0IGZyb20gdGhlIGxhc3QgbWV0aG9kIGludm9jYXRpb25cIiwgKCktPlxuXHRcdFx0c2FuZEJveCA9IERvbShzYW5kYm94KVxuXHRcdFx0ZGl2ID0gRG9tLmRpdigpXG5cdFx0XHRBID0gRG9tLmRpdigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEIgPSBEb20uc2VjdGlvbigpLmFwcGVuZFRvKGRpdilcblx0XHRcdEMgPSBEb20uZGl2KCkuYXBwZW5kVG8oZGl2KVxuXHRcdFx0XG5cdFx0XHRyZXN1bHQgPSBEb20uYmF0Y2goW0EsQixDXSlcblx0XHRcdFx0LmFwcGVuZFRvKHNhbmRCb3gpXG5cdFx0XHRcdC5zdHlsZSAnb3BhY2l0eScsIDAuNVxuXHRcdFx0XHQuY3NzIHtoZWlnaHQ6MzAsIGJhY2tncm91bmRDb2xvcjoncGluayd9XG5cdFx0XHRcdC5hcHBlbmQgJ1NvbWUgSW5uZXIgVGV4dCdcblx0XHRcdFx0LnN0eWxlICdvcGFjaXR5J1xuXHRcdFx0XHQucmV0dXJuKClcblxuXHRcdFx0ZXhwZWN0KHJlc3VsdCkudG8uZXFsIFsnMC41JywnMC41JywnMC41J11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goW0EsQixDXSkuY3NzKCd3aWR0aCcsICczOHB4JykuY3NzKCd3aWR0aCcpLnJldHVybigpKS50by5lcWwgWyczOHB4JywnMzhweCcsJzM4cHgnXVxuXG5cblx0XHR0ZXN0IFwiSWYgdGhlIC5yZXR1cm4oKSBtZXRob2QgaXMgaW52b2tlZCB3aXRoIGEgdHJ1dGh5IGFyZ3VtZW50LCBpdCB3aWxsIGNhdXNlIHRoZSBuZXh0IG1ldGhvZCBpbnZvY2F0aW9uIHRvIHJldHVybiB0aGUgcmVzdWx0cyBvZiB0aGUgaW52b2NhdGlvbiBmb3IgZWFjaCBlbGVtZW50IHByb3ZpZGVkXCIsICgpLT5cblx0XHRcdHNhbmRCb3ggPSBEb20oc2FuZGJveClcblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0QSA9IERvbS5kaXYoKS5hcHBlbmRUbyhkaXYpXG5cdFx0XHRCID0gRG9tLnNlY3Rpb24oKS5hcHBlbmRUbyhkaXYpXG5cdFx0XHRDID0gRG9tLmRpdigpLmFwcGVuZFRvKGRpdilcblx0XHRcdFxuXHRcdFx0cmVzdWx0ID0gRG9tLmJhdGNoKFtBLEIsQ10pXG5cdFx0XHRcdC5hcHBlbmRUbyhzYW5kQm94KVxuXHRcdFx0XHQuc3R5bGUgJ29wYWNpdHknLCAwLjVcblx0XHRcdFx0LmNzcyB7aGVpZ2h0OjMwLCBiYWNrZ3JvdW5kQ29sb3I6J3BpbmsnfVxuXHRcdFx0XHQuYXBwZW5kICdTb21lIElubmVyIFRleHQnXG5cdFx0XHRcdC5yZXR1cm4odHJ1ZSlcblx0XHRcdFx0LnN0eWxlICdvcGFjaXR5J1xuXG5cdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwgWycwLjUnLCcwLjUnLCcwLjUnXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChbQSxCLENdKS5jc3MoJ3dpZHRoJywgJzM4cHgnKS5jc3MoJ2hlaWdodCcsICcyOHB4JykucmV0dXJuKHRydWUpLmNzcygnd2lkdGgnKSkudG8uZXFsIFsnMzhweCcsJzM4cHgnLCczOHB4J11cblxuXG5cdFx0dGVzdCBcIkludm9raW5nIHRoZSAucmV2ZXJzZSgpIG1ldGhvZCBvbiB0aGUgYmF0Y2ggaW5zdGFuY2Ugd2lsbCByZXZlcnNlIHRoZSBlbGVtZW50cyBhcnJheSBpbiB0aGUgYmF0Y2ggYW5kIHRodXMgdGhlIGV4ZWN1dGlvbiBvcmRlclwiLCAoKS0+XG5cdFx0XHRBID0gRG9tLmRpdihudWxsLCAnQUFBJykuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdEIgPSBEb20uZGl2KG51bGwsICdCQkInKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0QyA9IERvbS5kaXYobnVsbCwgJ0NDQycpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRhcnIgPSBbQSxCLENdXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFycikuZWxlbWVudHMpLm5vdC50by5lcXVhbChhcnIpXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFycikuZWxlbWVudHMpLnRvLmVxbCBbQSxCLENdXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFycikucmV2ZXJzZSgpLmVsZW1lbnRzKS50by5lcWwgW0MsQixBXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChhcnIsMSkudGV4dCgpKS50by5lcWwgWydBQUEnLCdCQkInLCdDQ0MnXVxuXHRcdFx0ZXhwZWN0KERvbS5iYXRjaChhcnIsMSkucmV2ZXJzZSgpLnRleHQoKSkudG8uZXFsIFsnQ0NDJywnQkJCJywnQUFBJ11cblx0XHRcdGV4cGVjdChEb20uYmF0Y2goYXJyLDEpLnJldmVyc2UoKS50ZXh0KCkpLnRvLmVxbCBbJ0NDQycsJ0JCQicsJ0FBQSddXG5cdFx0XHRleHBlY3QoRG9tLmJhdGNoKGFyciwxKS5yZXZlcnNlKCkucmV2ZXJzZSgpLnRleHQoKSkudG8uZXFsIFsnQUFBJywnQkJCJywnQ0NDJ11cblxuXG5cdFx0dGVzdCBcIkJhdGNoLnRleHQvLmh0bWwgYXJlIG1ldGhvZHMgaW5zdGVhZCBvZiBnZXR0ZXJzL3NldHRlcnNcIiwgKCktPlxuXHRcdFx0ZGl2QSA9IERvbS5kaXYobnVsbCwgJ1RoZSBkaXZBJylcblx0XHRcdGRpdkIgPSBEb20uZGl2KG51bGwsICdUaGUgZGl2QicpXG5cdFx0XHRiYXRjaCA9IERvbS5iYXRjaChbZGl2QSwgZGl2Ql0sIHRydWUpXG5cblx0XHRcdGV4cGVjdChiYXRjaC5odG1sKCkpLnRvLmVxbCBbJ1RoZSBkaXZBJywgJ1RoZSBkaXZCJ11cblx0XHRcdGV4cGVjdChiYXRjaC50ZXh0KCkpLnRvLmVxbCBbJ1RoZSBkaXZBJywgJ1RoZSBkaXZCJ11cblx0XHRcdFxuXHRcdFx0YmF0Y2guaHRtbCgnPHNwYW4+VGhlIGRpdjwvc3Bhbj4nKVxuXHRcdFx0ZXhwZWN0KGJhdGNoLmh0bWwoKSkudG8uZXFsIFsnPHNwYW4+VGhlIGRpdjwvc3Bhbj4nLCAnPHNwYW4+VGhlIGRpdjwvc3Bhbj4nXVxuXHRcdFx0ZXhwZWN0KGJhdGNoLnRleHQoKSkudG8uZXFsIFsnVGhlIGRpdicsICdUaGUgZGl2J11cblxuXHRcdFx0YmF0Y2gudGV4dCgnVEhFIERJVicpXG5cdFx0XHRleHBlY3QoYmF0Y2guaHRtbCgpKS50by5lcWwgWydUSEUgRElWJywgJ1RIRSBESVYnXVxuXHRcdFx0ZXhwZWN0KGJhdGNoLnRleHQoKSkudG8uZXFsIFsnVEhFIERJVicsICdUSEUgRElWJ11cblxuXG5cblx0c3VpdGUgXCJUZW1wbGF0ZXNcIiwgKCktPlxuXHRcdHRlc3QgXCJBIHJldXNhYmxlIHRlbXBsYXRlIGNhbiBiZSBnZW5lcmF0ZWQgdmlhIFF1aWNrRG9tLnRlbXBsYXRlKClcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoWydzcGFuJywgaWQ6J3RoZVNwYW4nXSlcblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiB0ZW1wbGF0ZSkudG8uZXF1YWwoJ29iamVjdCcpXG5cdFx0XHRleHBlY3QodGVtcGxhdGUudHlwZSkudG8uZXF1YWwoJ3NwYW4nKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLm9wdGlvbnMpLnRvLmVxbChpZDondGhlU3BhbicpXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW4pLnRvLmVxbChbXSlcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gYmUgdHVybmVkIGludG8gUXVpY2tEb20gaW5zdGFuY2VzIHZpYSB0ZW1wbGF0ZS5zcGF3bigpIG9yIGJ5IHBhc3NpbmcgYXMgYXJnIHRvIFF1aWNrRG9tXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFsnZGl2JywgY2xhc3NOYW1lOidzb21lLWRpdicsICdTb21lIElubmVyIFRleHQnXSlcblx0XHRcdHNwYXduQSA9IHRlbXBsYXRlLnNwYXduKClcblx0XHRcdHNwYXduQS5zdGF0ZSAnaGFwcHknLCBvblxuXHRcdFx0c3Bhd25CID0gRG9tKHRlbXBsYXRlKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsKS50by5iZS5pbnN0YW5jZU9mKEhUTUxEaXZFbGVtZW50KVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbCkudG8uYmUuaW5zdGFuY2VPZihIVE1MRGl2RWxlbWVudClcblx0XHRcdGV4cGVjdChzcGF3bkEpLm5vdC50by5lcXVhbChzcGF3bkIpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsKS5ub3QudG8uZXF1YWwoc3Bhd25CLmVsKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5zdGF0ZSAnaGFwcHknKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3Qoc3Bhd25CLnN0YXRlICdoYXBweScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLnRleHRDb250ZW50KS50by5lcXVhbCgnU29tZSBJbm5lciBUZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwudGV4dENvbnRlbnQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdzb21lLWRpdicpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZXMgY2FuIGJlIGNyZWF0ZWQgZnJvbSBRdWlja0VsZW1lbnQgaW5zdGFuY2VzXCIsICgpLT5cblx0XHRcdHNlY3Rpb24gPSBEb20uc2VjdGlvbihjbGFzc05hbWU6J3NpbmdsZVNlY3Rpb24nLCAnU29tZSBJbm5lciBUZXh0Jylcblx0XHRcdHNlY3Rpb24uc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdHNlY3Rpb25UZW1wbGF0ZSA9IHNlY3Rpb24udG9UZW1wbGF0ZSgpXG5cdFx0XHR0ZW1wbGF0ZVNwYXduID0gc2VjdGlvblRlbXBsYXRlLnNwYXduKClcblxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25UZW1wbGF0ZSkubm90LnRvLmVxdWFsKHNlY3Rpb24pXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5lbCkubm90LnRvLmVxdWFsKHNlY3Rpb24uZWwpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdzaW5nbGVTZWN0aW9uJylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLnRleHQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uc3RhdGUgJ2hhcHB5JykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlU3Bhd24uc3RhdGUgJ2hhcHB5JykudG8uYmUuZmFsc2VcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gYmUgY3JlYXRlZCBmcm9tIERPTSBFbGVtZW50c1wiLCAoKS0+XG5cdFx0XHRzZWN0aW9uRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJylcblx0XHRcdHNlY3Rpb25FbC5jbGFzc05hbWUgPSAnc2luZ2xlU2VjdGlvbidcblx0XHRcdHNlY3Rpb25FbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSAnU29tZSBJbm5lciBUZXh0Jylcblx0XHRcdHNlY3Rpb25UZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShzZWN0aW9uRWwpXG5cdFx0XHR0ZW1wbGF0ZVNwYXduID0gc2VjdGlvblRlbXBsYXRlLnNwYXduKClcblxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlU3Bhd24uZWwpLm5vdC50by5lcXVhbChzZWN0aW9uRWwpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVTcGF3bi5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdzaW5nbGVTZWN0aW9uJylcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZVNwYXduLnRleHQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSBleHRlbmRlZCB2aWEgdGVtcGxhdGUuZXh0ZW5kXCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFsnZGl2JywgY2xhc3NOYW1lOidzb21lLWRpdicsICdTb21lIElubmVyIFRleHQnXSlcblx0XHRcdHRlbXBsYXRlQ29weUEgPSB0ZW1wbGF0ZS5leHRlbmQge3R5cGU6J3NwYW4nLCBvcHRpb25zOntjbGFzc05hbWU6J3NvbWUtc3Bhbid9LCBjaGlsZHJlbjpbXX1cblx0XHRcdHRlbXBsYXRlQ29weUIgPSB0ZW1wbGF0ZS5leHRlbmQge29wdGlvbnM6e2lkOid0aGVNYWluRGl2J30sIGNoaWxkcmVuOlsnVGhlIE90aGVyIElubmVyIFRleHQnXX1cblx0XHRcdHRlbXBsYXRlQ29weUMgPSB0ZW1wbGF0ZS5leHRlbmQoXG5cdFx0XHRcdFsnc2VjdGlvbidcblx0XHRcdFx0XHRjbGFzc05hbWU6J3NvbWUtc2VjdGlvbidcblx0XHRcdFx0XHRbJ2RpdicsIG51bGwsICdWZXJ5ICddXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7c3R5bGU6Zm9udFdlaWdodDo1MDB9LCdOZXN0ZWQgJ11cblx0XHRcdFx0XHRcdCdJbm5lciBUZXh0J1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5QSkubm90LnRvLmVxdWFsKHRlbXBsYXRlKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weUIpLm5vdC50by5lcXVhbCh0ZW1wbGF0ZSlcblx0XHRcdHNwYXduID0gdGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGVDb3B5QS5zcGF3bigpXG5cdFx0XHRzcGF3bkIgPSB0ZW1wbGF0ZUNvcHlCLnNwYXduKClcblx0XHRcdHNwYXduQyA9IHRlbXBsYXRlQ29weUMuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuY2xhc3NOYW1lKS50by5lcXVhbCgnc29tZS1kaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduLmVsLmlkKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzcGF3bi50ZXh0KS50by5lcXVhbCgnU29tZSBJbm5lciBUZXh0JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtc3BhbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmlkKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzcGF3bkEudGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCcpXG5cblx0XHRcdGV4cGVjdChzcGF3bkIuZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuaWQpLnRvLmVxdWFsKCd0aGVNYWluRGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bkIudGV4dCkudG8uZXF1YWwoJ1RoZSBPdGhlciBJbm5lciBUZXh0JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduQy5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25DLmVsLmNsYXNzTmFtZSkudG8uZXF1YWwoJ3NvbWUtc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25DLmVsLmlkKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzcGF3bkMudGV4dCkudG8uZXF1YWwoJ1ZlcnkgTmVzdGVkIElubmVyIFRleHQnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGVzIGNhbiBiZSBzcGF3bmVkIHZpYSBleHRlbmRlZCBjb25maWcgYnkgcGFzc2luZyBhIG5ldyBjb25maWcgb2JqZWN0IHRvIHRlbXBsYXRlLnNwYXduKClcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2JywgY2xhc3NOYW1lOidzb21lLWRpdicsXG5cdFx0XHRcdFx0J1NvbWUgSW5uZXIgVGV4dCcsXG5cdFx0XHRcdFx0WydzdHJvbmcnLCB7Y2xhc3NOYW1lOidoaWdobGlnaHRlZCcsIHN0eWxlOntvcGFjaXR5OjAuOX19LCAnIC0gQm9sZGVkIFRleHQnXVxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cdFx0XHRzcGF3blJhdyA9IHRlbXBsYXRlLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduQSA9IHRlbXBsYXRlLnNwYXduKHR5cGU6J3NlY3Rpb24nLCBvcHRpb25zOntjbGFzc05hbWU6J3NvbWUtc2VjdGlvbicsIHN0eWxlOntvcGFjaXR5OjAuN319KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c3Bhd25CID0gdGVtcGxhdGUuc3Bhd24oXG5cdFx0XHRcdG9wdGlvbnM6XG5cdFx0XHRcdFx0Y2xhc3NOYW1lOiAnbWFpbi1kaXYnXG5cdFx0XHRcdFx0aWQ6ICd0aGVNYWluRGl2J1xuXHRcdFx0XHRcdHN0eWxlOiBvcGFjaXR5OiAwLjVcblx0XHRcdFx0Y2hpbGRyZW46IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAnc3Bhbidcblx0XHRcdFx0XHRcdGNoaWxkcmVuOiBbXG5cdFx0XHRcdFx0XHRcdHR5cGU6J3RleHQnXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnM6IHt0ZXh0OiAnTWFpbiBJbm5lciBUZXh0J31cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dHlwZTogJ2InXG5cdFx0XHRcdFx0XHRvcHRpb25zOlxuXHRcdFx0XHRcdFx0XHRjbGFzc05hbWU6ICdzdXBlci1oaWdobGlnaHRlZCdcblx0XHRcdFx0XHRcdFx0c3R5bGU6IG9wYWNpdHk6ICcwLjInXG5cdFx0XHRcdFx0XHRjaGlsZHJlbjogW1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zOiB7dGV4dDogJyAtIFZlcnkgQm9sZGVkIFRleHQnfVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0eXBlOiAndGV4dCdcblx0XHRcdFx0XHRcdG9wdGlvbnM6IHt0ZXh0OiAnICsgT3RoZXIgVGV4dCd9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHQpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5jbGFzc05hbWUpLnRvLmVxdWFsKCdzb21lLWRpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcuZWwuaWQpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LnRleHQpLnRvLmVxdWFsKCdTb21lIElubmVyIFRleHQgLSBCb2xkZWQgVGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcuZWwpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCcxJylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lKS50by5lcXVhbCgnI3RleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduUmF3LmVsLmNoaWxkTm9kZXNbMV0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ3N0cm9uZycpXG5cdFx0XHRleHBlY3Qoc3Bhd25SYXcuZWwuY2hpbGROb2Rlc1sxXS5jbGFzc05hbWUpLnRvLmluY2x1ZGUoJ2hpZ2hsaWdodGVkJylcblx0XHRcdGV4cGVjdChzcGF3blJhdy5lbC5jaGlsZE5vZGVzWzFdKS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJzAuOScpXG5cblx0XHRcdGV4cGVjdChzcGF3bkEuZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ3NlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jbGFzc05hbWUpLnRvLmluY2x1ZGUoJ3NvbWUtc2VjdGlvbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmVsLmlkKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzcGF3bkEudGV4dCkudG8uZXF1YWwoJ1NvbWUgSW5uZXIgVGV4dCAtIEJvbGRlZCBUZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCcwLjcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQS5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuY2hpbGROb2Rlc1swXS5ub2RlTmFtZSkudG8uZXF1YWwoJyN0ZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuY2hpbGROb2Rlc1sxXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3Ryb25nJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuY2hpbGROb2Rlc1sxXS5jbGFzc05hbWUpLnRvLmluY2x1ZGUoJ2hpZ2hsaWdodGVkJylcblx0XHRcdGV4cGVjdChzcGF3bkEuZWwuY2hpbGROb2Rlc1sxXSkudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsICcwLjknKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5jbGFzc05hbWUpLnRvLmluY2x1ZGUoJ21haW4tZGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuaWQpLnRvLmVxdWFsKCd0aGVNYWluRGl2Jylcblx0XHRcdGV4cGVjdChzcGF3bkIudGV4dCkudG8uZXF1YWwoJ01haW4gSW5uZXIgVGV4dCAtIFZlcnkgQm9sZGVkIFRleHQgKyBPdGhlciBUZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwpLnRvLmhhdmUuc3R5bGUoJ29wYWNpdHknLCcwLjUnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5jaGlsZE5vZGVzLmxlbmd0aCkudG8uZXF1YWwoMylcblx0XHRcdGV4cGVjdChzcGF3bkIuZWwuY2hpbGROb2Rlc1swXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmVsLmNoaWxkTm9kZXNbMV0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkudG8uZXF1YWwoJ2InKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5jaGlsZE5vZGVzWzFdLmNsYXNzTmFtZSkudG8uaW5jbHVkZSgnc3VwZXItaGlnaGxpZ2h0ZWQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5lbC5jaGlsZE5vZGVzWzFdKS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJzAuMicpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZS5leHRlbmQvc3Bhd24oKSBjYW4gYWNjZXB0IGEgdGVtcGxhdGUgdHJlZSBhcnJheVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIHN0eWxlOnsnb3BhY2l0eSc6MC41fSwgWydzcGFuJywgbnVsbCwgJ3RleHQgb2Ygc3BhbiddLCBbJ2RpdicsIG51bGwsICd0ZXh0IG9mIGRpdiddXVxuXHRcdFx0Y2xvbmVBID0gdGVtcGxhdGUuZXh0ZW5kKFsnc2VjdGlvbicsIHN0eWxlOnsnb3BhY2l0eSc6MC44fV0pXG5cdFx0XHRjbG9uZUIgPSB0ZW1wbGF0ZS5leHRlbmQoWydzcGFuJywgbnVsbCwgWydkaXYnXV0pXG5cdFx0XHRjbG9uZUMgPSB0ZW1wbGF0ZS5leHRlbmQoWydzZWN0aW9uJywge2NsYXNzTmFtZTondGhlLXNlY3Rpb24nLCBzdHlsZTp7Y29sb3I6J2JsdWUnfX0sIFsnc2VjdGlvbicsIG51bGwsICd0ZXh0IG9mIHN1YnNlY3Rpb24nXSwgJ2p1c3QgYSB0ZXh0IG5vZGUnXSlcblx0XHRcdHNwYXduID0gdGVtcGxhdGUuc3Bhd24oWydzcGFuJywgc3R5bGU6eyd3aWR0aCc6MTkwLCAnb3BhY2l0eSc6MC40fSwgJ3NvIG5pY2UnXSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUub3B0aW9ucykudG8uZXFsIHtzdHlsZTp7J29wYWNpdHknOjAuNX19XG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAndGV4dCBvZiBzcGFuJ1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMV0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAndGV4dCBvZiBkaXYnXG5cblx0XHRcdGV4cGVjdChjbG9uZUEudHlwZSkudG8uZXF1YWwgJ3NlY3Rpb24nXG5cdFx0XHRleHBlY3QoY2xvbmVBLm9wdGlvbnMpLnRvLmVxbCB7c3R5bGU6eydvcGFjaXR5JzowLjh9fVxuXHRcdFx0ZXhwZWN0KGNsb25lQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChjbG9uZUEuY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNsb25lQS5jaGlsZHJlblswXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIHNwYW4nXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsICdkaXYnXG5cdFx0XHRleHBlY3QoY2xvbmVBLmNoaWxkcmVuWzFdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGNsb25lQS5jaGlsZHJlblsxXS5jaGlsZHJlblswXS5vcHRpb25zLnRleHQpLnRvLmVxdWFsICd0ZXh0IG9mIGRpdidcblxuXHRcdFx0ZXhwZWN0KGNsb25lQi50eXBlKS50by5lcXVhbCAnc3Bhbidcblx0XHRcdGV4cGVjdChjbG9uZUIub3B0aW9ucykudG8uZXFsIHtzdHlsZTp7J29wYWNpdHknOjAuNX19XG5cdFx0XHRleHBlY3QoY2xvbmVCLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjbG9uZUIuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAndGV4dCBvZiBzcGFuJ1xuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblsxXS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KGNsb25lQi5jaGlsZHJlblsxXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChjbG9uZUIuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF0ub3B0aW9ucy50ZXh0KS50by5lcXVhbCAndGV4dCBvZiBkaXYnXG5cblx0XHRcdGV4cGVjdChjbG9uZUMudHlwZSkudG8uZXF1YWwgJ3NlY3Rpb24nXG5cdFx0XHRleHBlY3QoY2xvbmVDLm9wdGlvbnMpLnRvLmVxbCB7Y2xhc3NOYW1lOid0aGUtc2VjdGlvbicsIHN0eWxlOnsnb3BhY2l0eSc6MC41LCAnY29sb3InOidibHVlJ319XG5cdFx0XHRleHBlY3QoY2xvbmVDLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMlxuXHRcdFx0ZXhwZWN0KGNsb25lQy5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCAnc2VjdGlvbidcblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAxXG5cdFx0XHRleHBlY3QoY2xvbmVDLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ3RleHQgb2Ygc3Vic2VjdGlvbidcblx0XHRcdGV4cGVjdChjbG9uZUMuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwgJ3RleHQnXG5cdFx0XHRleHBlY3QoY2xvbmVDLmNoaWxkcmVuWzFdLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ2p1c3QgYSB0ZXh0IG5vZGUnXG5cblx0XHRcdHNwYXduLnN0eWxlICdkaXNwbGF5JywgJ2Jsb2NrJ1xuXHRcdFx0ZXhwZWN0KHNwYXduLmVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpLnRvLmVxdWFsICdzcGFuJ1xuXHRcdFx0ZXhwZWN0KHNwYXduLmVsKS50by5oYXZlLnN0eWxlICdvcGFjaXR5JywgJzAuNCdcblx0XHRcdGV4cGVjdChzcGF3bi5lbCkudG8uaGF2ZS5zdHlsZSAnd2lkdGgnLCAnMTkwcHgnXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuY2hpbGROb2Rlcy5sZW5ndGgpLnRvLmVxdWFsIDJcblx0XHRcdGV4cGVjdChzcGF3bi5lbC5jaGlsZE5vZGVzWzBdLm5vZGVUeXBlKS50by5lcXVhbCAzXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudCkudG8uZXF1YWwgJ3NvIG5pY2UnXG5cdFx0XHRleHBlY3Qoc3Bhd24uZWwuY2hpbGROb2Rlc1sxXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KHNwYXduLmVsLmNoaWxkTm9kZXNbMV0udGV4dENvbnRlbnQpLnRvLmVxdWFsICd0ZXh0IG9mIGRpdidcblxuXHRcdFx0IyBleHBlY3QgKCktPlxuXHRcdFx0IyBcdERvbS50ZW1wbGF0ZShbJ2RpdiddKS5leHRlbmQoWydzcGFuJywgbnVsbCwgWydkaXYnLCBudWxsLCBbJ3NlY3Rpb24nXV1dKVxuXHRcdFx0IyAubm90LnRvLnRocm93KClcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlLmV4dGVuZC9zcGF3bigpIGNhbiBhY2NlcHQgb3RoZXIgdGVtcGxhdGUgaW5zdGFuY2VzIGFzIGNoaWxkcmVuIHdoaWNoIHdpbGwgcmVwbGFjZSBleGlzdGluZyBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIG51bGwsIFsnc3BhbicsIHtzdHlsZTpvcGFjaXR5OjAuNX1dLCAnb3JpZ2luYWwgdGV4dCddXG5cdFx0XHRjaGlsZEEgPSBEb20udGVtcGxhdGUgWydkaXYnLCB7c3R5bGU6Zm9udEZhbWlseToncGluayd9XVxuXHRcdFx0Y2hpbGRCID0gRG9tLnRlbXBsYXRlICdyZXBsYWNlZCB0ZXh0J1xuXHRcdFx0Y2hpbGRDID0gRG9tLnRlbXBsYXRlIFsnc2VjdGlvbiddXG5cdFx0XHR0ZW1wbGF0ZUNvcHkgPSB0ZW1wbGF0ZS5leHRlbmQoWydzcGFuJywge3N0eWxlOmZvbnRTaXplOic3N3B4J30sIGNoaWxkQSwgY2hpbGRCLCBjaGlsZENdKVxuXHRcdFx0c3Bhd25lZEEgPSB0ZW1wbGF0ZS5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bmVkQiA9IHRlbXBsYXRlQ29weS5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bmVkQyA9IHRlbXBsYXRlLnNwYXduKFsnc3BhbicsIHtzdHlsZTpmb250U2l6ZTonNzdweCd9LCBjaGlsZEEsIGNoaWxkQiwgY2hpbGRDXSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHNwYXduZWRBLnR5cGUpLnRvLmVxdWFsKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRBLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChzcGF3bmVkQS5jaGlsZHJlblswXS50eXBlKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJzAuNScpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdmb250RmFtaWx5JywgJycpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEEuY2hpbGRyZW5bMV0udHlwZSkudG8uZXF1YWwoJ3RleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRBLnRleHQpLnRvLmVxdWFsKCdvcmlnaW5hbCB0ZXh0JylcblxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLnR5cGUpLnRvLmVxdWFsKCdzcGFuJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIuY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwoJ2RpdicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdvcGFjaXR5JywgJycpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIuY2hpbGRyZW5bMF0ucmF3KS50by5oYXZlLnN0eWxlKCdmb250RmFtaWx5JywgJ3BpbmsnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLmNoaWxkcmVuWzFdLnR5cGUpLnRvLmVxdWFsKCd0ZXh0Jylcblx0XHRcdGV4cGVjdChzcGF3bmVkQi50ZXh0KS50by5lcXVhbCgncmVwbGFjZWQgdGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEIuY2hpbGRyZW5bMl0udHlwZSkudG8uZXF1YWwoJ3NlY3Rpb24nKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRCLnJhdykudG8uaGF2ZS5zdHlsZSgnZm9udFNpemUnLCAnNzdweCcpXG5cblx0XHRcdGV4cGVjdChzcGF3bmVkQy50eXBlKS50by5lcXVhbCgnc3BhbicpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgzKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsKCdkaXYnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLmNoaWxkcmVuWzBdLnJhdykudG8uaGF2ZS5zdHlsZSgnb3BhY2l0eScsICcnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLmNoaWxkcmVuWzBdLnJhdykudG8uaGF2ZS5zdHlsZSgnZm9udEZhbWlseScsICdwaW5rJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQy5jaGlsZHJlblsxXS50eXBlKS50by5lcXVhbCgndGV4dCcpXG5cdFx0XHRleHBlY3Qoc3Bhd25lZEMudGV4dCkudG8uZXF1YWwoJ3JlcGxhY2VkIHRleHQnKVxuXHRcdFx0ZXhwZWN0KHNwYXduZWRDLmNoaWxkcmVuWzJdLnR5cGUpLnRvLmVxdWFsKCdzZWN0aW9uJylcblx0XHRcdGV4cGVjdChzcGF3bmVkQy5yYXcpLnRvLmhhdmUuc3R5bGUoJ2ZvbnRTaXplJywgJzc3cHgnKVxuXG5cblx0XHR0ZXN0IFwiVGVtcGxhdGUuZXh0ZW5kL3NwYXduKCkgd2lsbCBjb25zaWRlciB0aGUgcGFzc2VkIG9iamVjdCBhcyB0aGUgb3B0aW9ucyBvYmplY3QgaWYgaXQgZG9lc24ndCBjb250YWluIHRlbXBsYXRlLXJlbGF0ZWQgcHJvcHNcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBET00udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdGRlZmF1bHRzOiB0ZXh0OiAnZGVmYXVsdCdcblx0XHRcdFx0XHRjb21wdXRlcnM6IHRleHQ6ICh0ZXh0KS0+IEB0ZXh0ID0gdGV4dFxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFsnc3BhbicsIHJlZjondGhlU3BhbiddXG5cdFx0XHRcdF1cblx0XHRcdClcblxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLm9wdGlvbnMuc3R5bGUpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLm9wdGlvbnMubGFiZWwpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmV4dGVuZChvcHRpb25zOmxhYmVsOidhYmMxMjMnKS5vcHRpb25zLmxhYmVsKS50by5lcXVhbCAnYWJjMTIzJ1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmV4dGVuZChsYWJlbDonZGVmNDU2Jykub3B0aW9ucy5sYWJlbCkudG8uZXF1YWwgJ2RlZjQ1Nidcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5leHRlbmQoc3R5bGU6J2RlZjQ1NicpLm9wdGlvbnMuc3R5bGUpLnRvLmVxdWFsICdkZWY0NTYnXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuZXh0ZW5kKHN0eWxlOidkZWY0NTYnLCB0eXBlOidzZWN0aW9uJykub3B0aW9ucy5zdHlsZSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuZXh0ZW5kKGNoaWxkcmVuOnRoZVNwYW46c3R5bGU6J2doaTc4OScpLmNoaWxkLnRoZVNwYW4ub3B0aW9ucy5zdHlsZSkudG8uZXF1YWwgJ2doaTc4OSdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5leHRlbmQoY2hpbGRyZW46W2RlZmF1bHRzOidnaGk3ODknXSkuY2hpbGQudGhlU3Bhbi5vcHRpb25zLmRlZmF1bHRzKS50by5lcXVhbCAnZ2hpNzg5J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLnNwYXduKGNoaWxkcmVuOnRoZVNwYW46Y2xhc3NOYW1lOidHSEk3ODknKS5jaGlsZC50aGVTcGFuLnJhdy5jbGFzc05hbWUpLnRvLmVxdWFsICdHSEk3ODknXG5cdFx0XHRleHBlY3QodGVtcGxhdGUuc3Bhd24oKS50ZXh0KS50by5lcXVhbCAnZGVmYXVsdCdcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5zcGF3bihkZWZhdWx0czp0ZXh0OidkaWZmJykudGV4dCkudG8uZXF1YWwgJ2RpZmYnXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZXMgY2FuIGhhdmUgb3RoZXIgdGVtcGxhdGVzIGFzIHRoZWlyIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdGhlYWRlclRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnaGVhZGVyJywge3N0eWxlOidoZWlnaHQnOicyMDBweCd9LFxuXHRcdFx0XHRbJ3NwYW4nLCB7c3R5bGU6J3RleHRBbGlnbic6J2NlbnRlcid9LCAnVGhpcyBpcyBib2xkZWQgdGV4dCddXG5cdFx0XHRcdCcgd2hpbGUgdGhpcyBpcyBub3QnXG5cdFx0XHRdXG5cdFx0XHRoZWFkZXJUZW1wbGF0ZUNsb25lID0gRG9tLnRlbXBsYXRlKGhlYWRlclRlbXBsYXRlKVxuXHRcdFx0c2VjdGlvblRlbXBsYXRlID0gRG9tLnRlbXBsYXRlIFsnc2VjdGlvbicsIG51bGwsIGhlYWRlclRlbXBsYXRlXVxuXHRcdFx0c2VjdGlvbiA9IHNlY3Rpb25UZW1wbGF0ZS5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChoZWFkZXJUZW1wbGF0ZUNsb25lKS50by5lcXVhbChoZWFkZXJUZW1wbGF0ZSlcblx0XHRcdGV4cGVjdChzZWN0aW9uVGVtcGxhdGUuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25UZW1wbGF0ZS5jaGlsZHJlblswXSkudG8uZXF1YWwoaGVhZGVyVGVtcGxhdGUpXG5cdFx0XHRleHBlY3Qoc2VjdGlvblRlbXBsYXRlLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMilcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLnR5cGUpLnRvLmVxdWFsKCdoZWFkZXInKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24udGV4dCkudG8uZXF1YWwoJ1RoaXMgaXMgYm9sZGVkIHRleHQgd2hpbGUgdGhpcyBpcyBub3QnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uc3R5bGUoJ3RleHRBbGlnbicpKS50by5lcXVhbCgnY2VudGVyJylcblxuXG5cdFx0dGVzdCBcIkEgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IGNhbiBiZSBwYXNzZWQgYXMgdGhlIDJuZCBhcmcgdG8gdGVtcGxhdGUuZXh0ZW5kL3NwYXduKCkgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIGFsbCB0ZW1wbGF0ZXMsIHNwYXducywgJiB0aGVpciBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRvYmogPSBteUhlaWdodDonMTUwcHgnXG5cdFx0XHRvYmoub2JqID0gb2JqXG5cdFx0XHRkeW5hbWljSGVpZ2h0U3R5bGUgPSAnaGVpZ2h0JzogKHJlbGF0ZWQpLT4gZXhwZWN0KHJlbGF0ZWQpLnRvLmVxdWFsKG9iaik7IHJlbGF0ZWQubXlIZWlnaHRcblx0XHRcdFxuXHRcdFx0aGVhZGVyVGVtcGxhdGUgPSBEb20udGVtcGxhdGUgWydoZWFkZXInLCB7c3R5bGU6J3dpZHRoJzonMjNweCd9LFxuXHRcdFx0XHRbJ2RpdicsIHtzdHlsZTond2lkdGgnOicyM3B4J30sICdUaGlzIGlzIGJvbGRlZCB0ZXh0J11cblx0XHRcdFx0JyB3aGlsZSB0aGlzIGlzIG5vdCdcblx0XHRcdF1cblx0XHRcdHNlY3Rpb25UZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZSBbJ3NlY3Rpb24nLCB7c3R5bGU6J3dpZHRoJzonMjNweCd9LCBoZWFkZXJUZW1wbGF0ZV1cblx0XHRcdHNlY3Rpb24gPSBzZWN0aW9uVGVtcGxhdGUuc3Bhd24oe29wdGlvbnM6e3JlbGF0ZWQ6d2luZG93fX0sIHtyZWxhdGVkOm9iaiwgc3R5bGU6ZHluYW1pY0hlaWdodFN0eWxlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24ucmF3LnN0eWxlLmhlaWdodCkudG8uZXF1YWwoJzE1MHB4Jylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLnJhdy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsKCcxNTBweCcpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlblswXS5yYXcuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCgnMTUwcHgnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24ucmF3LnN0eWxlLndpZHRoKS50by5lcXVhbCgnJylcblx0XHRcdGV4cGVjdChzZWN0aW9uLmNoaWxkcmVuWzBdLnJhdy5zdHlsZS53aWR0aCkudG8uZXF1YWwoJycpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlblswXS5yYXcuc3R5bGUud2lkdGgpLnRvLmVxdWFsKCcnKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgxKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb24uY2hpbGRyZW5bMF0udHlwZSkudG8uZXF1YWwoJ2hlYWRlcicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbi50ZXh0KS50by5lcXVhbCgnVGhpcyBpcyBib2xkZWQgdGV4dCB3aGlsZSB0aGlzIGlzIG5vdCcpXG5cblxuXHRcdHRlc3QgXCJUZW1wbGF0ZSBjaGlsZHJlbiBjYW4gYmUgbmF2aWdhdGVkIGJ5IHJlZiB1c2luZyB0aGUgLmNoaWxkIHByb3BlcnR5XCIsICgpLT5cblx0XHRcdHRlbXBsYXRlID0gXG5cdFx0XHRcdERvbS50ZW1wbGF0ZSBbJ2RpdicsIHtpZDonZGl2QSd9LFxuXHRcdFx0XHRcdFsnZGl2Jywge2lkOidjaGlsZEEnfSxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQV8yJywgaWQ6J2NoaWxkQV8yJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge2lkOidjaGlsZEJfMicsIHRleHQ6J1RoZSBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cblx0XHRcdGV4cGVjdCh0eXBlb2YgdGVtcGxhdGUuY2hpbGQpLnRvLmVxdWFsICdvYmplY3QnXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGUuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoNilcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZC5kaXZBKS50by5lcXVhbCB0ZW1wbGF0ZVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQS50eXBlKS50by5lcXVhbCAnZGl2J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlLmNoaWxkLmNoaWxkQSkudG8uZXF1YWwgdGVtcGxhdGUuY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZC5jaGlsZEFfMSkudG8uZXF1YWwgdGVtcGxhdGUuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZC5jaGlsZEFfMikudG8uZXF1YWwgdGVtcGxhdGUuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwgdGVtcGxhdGUuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZS5jaGlsZC5jaGlsZEJfMikudG8uZXF1YWwgdGVtcGxhdGUuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblxuXHRcdFx0cmVuZGVyZWQgPSB0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRleHBlY3QocmVuZGVyZWQuY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHJlbmRlcmVkLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdXG5cdFx0XHRleHBlY3QocmVuZGVyZWQudGV4dCkudG8uZXF1YWwoJ1RoZSBUZXh0JylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlJ3MgY2hpbGRyZW4gY2FuIGJlIGV4dGVuZC9zcGF3bmVkIHdpdGggYSB7cmVmOm5ld0NoaWxkfSBtYXAgaW5zdGVhZCBvZiBhIHBvc2l0aW9uYWwgYXJyYXlcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGVNYWluID0gXG5cdFx0XHRcdERvbS50ZW1wbGF0ZSBbJ2RpdicsIHtpZDonZGl2QSd9LFxuXHRcdFx0XHRcdFsnZGl2Jywge2lkOidjaGlsZEEnfSxcblx0XHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQV8xJ31dXG5cdFx0XHRcdFx0XHRbJ2RpdicsIHtyZWY6J2NoaWxkQV8yJywgaWQ6J2NoaWxkQV8yJ31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2JywgbnVsbCwgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge2lkOidjaGlsZEJfMicsIHRleHQ6J1RoZSBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHR0ZW1wbGF0ZUNvcHkgPSB0ZW1wbGF0ZU1haW4uZXh0ZW5kIFsnc2VjdGlvbicsIG51bGwsIFxuXHRcdFx0XHRjaGlsZEE6XG5cdFx0XHRcdFx0dHlwZTogJ2Zvcm0nXG5cdFx0XHRcdFx0b3B0aW9uczpcblx0XHRcdFx0XHRcdHN0eWxlOiBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuXHRcdFx0XHRjaGlsZEFfMjpcblx0XHRcdFx0XHRbJ2EnLCB7aWQ6J0NISUxEYV8yJywgaHJlZjonaHR0cDovL2dvb2dsZS5jb20nfSxcblx0XHRcdFx0XHRcdFsndGV4dCcsIHtyZWY6J2NoaWxkQV8yXzEnLCB0ZXh0OidOZXcgVGV4dCd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0Y2hpbGRDOlxuXHRcdFx0XHRcdFsnZGl2JywgcmVmOidjaGlsZEQnXVxuXHRcdFx0XSwge3ZhbHVlOid0aGVWYWx1ZSd9XG5cdFx0XHRcblx0XHRcdHRlbXBsYXRlQ29weTIgPSB0ZW1wbGF0ZU1haW4uZXh0ZW5kIGNoaWxkcmVuOlxuXHRcdFx0XHRjaGlsZEE6XG5cdFx0XHRcdFx0Y2hpbGRyZW46IG5ld0NoaWxkOiBbJ2RpdiddXG5cdFx0XHRcdGNoaWxkQV8yOlxuXHRcdFx0XHRcdFsnYScsIHtpZDonQ0hJTERhXzInLCBocmVmOidodHRwOi8vZ29vZ2xlLmNvbSd9LFxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge3JlZjonY2hpbGRBXzJfMScsIHRleHQ6J05ldyBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRjaGlsZEM6XG5cdFx0XHRcdFx0WydkaXYnLCByZWY6J2NoaWxkRCddXG5cblx0XHRcdGV4cGVjdCh0eXBlb2YgdGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yXzEpLm5vdC50by5lcXVhbCAndW5kZWZpbmVkJ1xuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHRlbXBsYXRlTWFpbi5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCg2KVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHRlbXBsYXRlQ29weS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCg4KVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmRpdkEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEEudHlwZSkudG8uZXF1YWwgJ2Zvcm0nXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzIpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5DSElMRGFfMikudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yXzEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXS5jaGlsZHJlblsxXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMl8xLm9wdGlvbnMudGV4dCkudG8uZXF1YWwgJ05ldyBUZXh0J1xuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRDKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGREKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMl1cblxuXHRcdFx0cmVuZGVyZWQgPSB0ZW1wbGF0ZUNvcHkuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHJlbmRlcmVkLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDgpXG5cdFx0XHRleHBlY3QocmVuZGVyZWQuY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHJlbmRlcmVkLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzFdXG5cdFx0XHRleHBlY3QocmVuZGVyZWQuY2hpbGQuY2hpbGRBLnJhdykudG8uaGF2ZS5zdHlsZSAnZGlzcGxheScsICdpbmxpbmUtYmxvY2snXG5cdFx0XHRleHBlY3QocmVuZGVyZWQuY2hpbGQuQ0hJTERhXzIucHJvcCgnaHJlZicpKS50by5jb250YWluICdodHRwOi8vZ29vZ2xlLmNvbSdcblx0XHRcdGV4cGVjdChyZW5kZXJlZC5jaGlsZC5jaGlsZEJfMS5wcm9wKCd2YWx1ZScpKS50by5lcXVhbCgndGhlVmFsdWUnKVxuXHRcdFx0ZXhwZWN0KHJlbmRlcmVkLmNoaWxkLmNoaWxkRC5hdHRyKCdkYXRhLXJlZicpKS50by5lcXVhbCgnY2hpbGREJylcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyBjYW4gYmUgcGFzc2VkIGFzIHJlcGxhY2VtZW50L25ldyBjaGlsZHJlbiBpbiB7cmVmOm5ld0NoaWxkfSBleHRlbnNpb24gbWFwc1wiLCAoKS0+XG5cdFx0XHRjaGlsZEEgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge2lkOidjaGlsZEEnfSxcblx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEFfMSd9XVxuXHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzInLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0Y2hpbGRCID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRbJ2RpdicsIHJlZjonY2hpbGRCJywgXG5cdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRCXzEnfV1cblx0XHRcdFx0XHRbJ3RleHQnLCB7aWQ6J2NoaWxkQl8yJywgdGV4dDonVGhlIFRleHQnfV1cblx0XHRcdFx0XVxuXHRcdFx0KVxuXHRcdFx0Y2hpbGRDID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRbJ2RpdicsIHtpZDonY2hpbGRDJ30sIFxuXHRcdFx0XHRcdFsnc3BhbicsIHtyZWY6J2NoaWxkQ18xJ31dXG5cdFx0XHRcdFx0Wyd0ZXh0Jywge2lkOidjaGlsZENfMicsIHRleHQ6J1RoZSBUZXh0J31dXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdHRlbXBsYXRlTWFpbiA9IFxuXHRcdFx0XHREb20udGVtcGxhdGUgWydkaXYnLCB7aWQ6J2RpdkEnfSxcblx0XHRcdFx0XHRjaGlsZEEsXG5cdFx0XHRcdFx0Y2hpbGRCXG5cdFx0XHRcdF1cblx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlTWFpbi5leHRlbmQgWydzZWN0aW9uJywgbnVsbCwgXG5cdFx0XHRcdGNoaWxkQTogdHlwZTogJ2Zvcm0nXG5cdFx0XHRcdGNoaWxkQjogY2hpbGRCLmV4dGVuZChyZWY6J0NoaWxkQicpXG5cdFx0XHRcdGNoaWxkQzogY2hpbGRDLmV4dGVuZChyZWY6J0NoaWxkQycpXG5cdFx0XHRdLCB7dmFsdWU6J3RoZVZhbHVlJ31cblxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHRlbXBsYXRlTWFpbi5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCg3KVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHRlbXBsYXRlQ29weS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCgxMClcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZU1haW4uY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgyKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDMpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmRpdkEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEEudHlwZSkudG8uZXF1YWwgJ2Zvcm0nXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLkNoaWxkQikudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzFdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMV0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsxXS5jaGlsZHJlblsxXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlTWFpbi5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEMpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5DaGlsZEMpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsyXVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHRlbXBsYXRlTWFpbi5zcGF3bigpLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDcpXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVDb3B5LnNwYXduKCkuY2hpbGQpLmxlbmd0aCkudG8uZXF1YWwoMTApXG5cblxuXHRcdHRlc3QgXCJyZWYtY2hpbGRyZW4gbWFwcyBzaG91bGRuJ3QgYmUgbW9kaWZpZWQgYnkgdGhlIHRlbXBsYXRlIGV4dGVuZGVyXCIsICgpLT5cblx0XHRcdGNvbmZpZyA9IGNoaWxkcmVuOiBjaGlsZEFfMToge3R5cGU6J2RpdicsIG9wdGlvbnM6IHtzdHlsZToge2Rpc3BsYXk6J25vbmUnfX19XG5cdFx0XHR0ZW1wbGF0ZUEgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2Jywge3JlZjonZGl2QSd9XG5cdFx0XHRcdFx0WydkaXYnLCB7cmVmOidjaGlsZEEnfVxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdF1cblx0XHRcdClcblx0XHRcdHRlbXBsYXRlQS5jaGlsZC5jaGlsZEFfMVxuXHRcdFx0dGVtcGxhdGVCID0gdGVtcGxhdGVBLmV4dGVuZCgpXG5cdFx0XHR0ZW1wbGF0ZUMgPSB0ZW1wbGF0ZUEuZXh0ZW5kKGNvbmZpZylcblx0XHRcdHRlbXBsYXRlRCA9IHRlbXBsYXRlQS5leHRlbmQoY29uZmlnKVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGVBLnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHNwYXduQiA9IHRlbXBsYXRlQi5zcGF3bigpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzcGF3bkMgPSB0ZW1wbGF0ZUMuc3Bhd24oKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0c3Bhd25EID0gdGVtcGxhdGVELnNwYXduKCkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChzcGF3bkEuY2hpbGQuY2hpbGRBXzEudHlwZSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3Qoc3Bhd25BLmNoaWxkLmNoaWxkQV8xLnN0eWxlICdkaXNwbGF5JykudG8uZXF1YWwgJ2lubGluZSdcblx0XHRcdGV4cGVjdChzcGF3bkIuY2hpbGQuY2hpbGRBXzEudHlwZSkudG8uZXF1YWwgJ3NwYW4nXG5cdFx0XHRleHBlY3Qoc3Bhd25CLmNoaWxkLmNoaWxkQV8xLnN0eWxlICdkaXNwbGF5JykudG8uZXF1YWwgJ2lubGluZSdcblx0XHRcdGV4cGVjdChzcGF3bkMuY2hpbGQuY2hpbGRBXzEudHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdChzcGF3bkMuY2hpbGQuY2hpbGRBXzEuc3R5bGUgJ2Rpc3BsYXknKS50by5lcXVhbCAnbm9uZSdcblx0XHRcdGV4cGVjdChzcGF3bkQuY2hpbGQuY2hpbGRBXzEudHlwZSkudG8uZXF1YWwgJ2Rpdidcblx0XHRcdGV4cGVjdChzcGF3bkQuY2hpbGQuY2hpbGRBXzEuc3R5bGUgJ2Rpc3BsYXknKS50by5lcXVhbCAnbm9uZSdcblxuXHRcdHRlc3QgXCJOdWxsIHZhbHVlcyBpbiByZWYtY2hpbGRyZW4gbWFwIHdpbGwgcmVtb3ZlIHRoZSBjaGlsZCBmcm9tIHRoZSB0ZW1wbGF0ZVwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZU1haW4gPSBcblx0XHRcdFx0RG9tLnRlbXBsYXRlIFsnZGl2Jywge2lkOidkaXZBJ30sXG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQSd9LFxuXHRcdFx0XHRcdFx0WydzcGFuJywge3JlZjonY2hpbGRBXzEnfV1cblx0XHRcdFx0XHRcdFsnZGl2Jywge3JlZjonY2hpbGRBXzInLCBpZDonY2hpbGRBXzInfV1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0WydkaXYnLCB7cmVmOidjaGlsZEInfSwgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZEJfMSd9XVxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge2lkOidjaGlsZEJfMicsIHRleHQ6J1RoZSBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFsnZGl2Jywge2lkOidjaGlsZEMnfSwgXG5cdFx0XHRcdFx0XHRbJ3NwYW4nLCB7cmVmOidjaGlsZENfMSd9XVxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge2lkOidjaGlsZENfMicsIHRleHQ6J1RoZSBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRdXG5cdFx0XHR0ZW1wbGF0ZUNvcHkgPSB0ZW1wbGF0ZU1haW4uZXh0ZW5kIFsnc2VjdGlvbicsIG51bGwsIFxuXHRcdFx0XHRjaGlsZEE6XG5cdFx0XHRcdFx0dHlwZTogJ2Zvcm0nXG5cdFx0XHRcdFx0b3B0aW9uczpcblx0XHRcdFx0XHRcdHN0eWxlOiBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuXG5cdFx0XHRcdGNoaWxkQV8xOiBudWxsXG5cdFx0XHRcdGNoaWxkQV8yOlxuXHRcdFx0XHRcdFsnYScsIHtpZDonQ0hJTERhXzInLCBocmVmOidodHRwOi8vZ29vZ2xlLmNvbSd9LFxuXHRcdFx0XHRcdFx0Wyd0ZXh0Jywge3JlZjonY2hpbGRBXzJfMScsIHRleHQ6J05ldyBUZXh0J31dXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHRjaGlsZEJfMTogbnVsbFxuXHRcdFx0XHRjaGlsZEM6IG51bGxcblx0XHRcdF1cblxuXHRcdFx0ZXhwZWN0KHR5cGVvZiB0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMSkubm90LnRvLmVxdWFsICd1bmRlZmluZWQnXG5cdFx0XHRleHBlY3QoT2JqZWN0LmtleXModGVtcGxhdGVNYWluLmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKDEwKVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHRlbXBsYXRlQ29weS5jaGlsZCkubGVuZ3RoKS50by5lcXVhbCg2KVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDIpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmRpdkEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEEpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEEudHlwZSkudG8uZXF1YWwgJ2Zvcm0nXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKDEpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVNYWluLmNoaWxkLmNoaWxkQV8xKS50by5lcXVhbCB0ZW1wbGF0ZU1haW4uY2hpbGQuY2hpbGRBXzFcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzEpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQ29weS5jaGlsZC5jaGlsZEFfMikudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLkNISUxEYV8yKS50by5lcXVhbCB0ZW1wbGF0ZUNvcHkuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRBXzJfMSkudG8uZXF1YWwgdGVtcGxhdGVDb3B5LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQV8yXzEub3B0aW9ucy50ZXh0KS50by5lcXVhbCAnTmV3IFRleHQnXG5cdFx0XHRleHBlY3QodGVtcGxhdGVDb3B5LmNoaWxkLmNoaWxkQl8xKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRCXzIpLnRvLmVxdWFsIHRlbXBsYXRlQ29weS5jaGlsZHJlblsxXS5jaGlsZHJlblswXVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlTWFpbi5jaGlsZC5jaGlsZEJfMSkudG8uZXF1YWwgdGVtcGxhdGVNYWluLmNoaWxkcmVuWzFdLmNoaWxkcmVuWzBdXG5cdFx0XHRleHBlY3QodGVtcGxhdGVNYWluLmNoaWxkLmNoaWxkQl8yKS50by5lcXVhbCB0ZW1wbGF0ZU1haW4uY2hpbGRyZW5bMV0uY2hpbGRyZW5bMV1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZU1haW4uY2hpbGQuY2hpbGRDKS50by5lcXVhbCB0ZW1wbGF0ZU1haW4uY2hpbGRyZW5bMl1cblx0XHRcdGV4cGVjdCh0ZW1wbGF0ZUNvcHkuY2hpbGQuY2hpbGRDKS50by5lcXVhbCB1bmRlZmluZWRcblxuXG5cdFx0dGVzdCBcIk51bGwgdmFsdWVzIGluIG9wdGlvbnMgb2JqZWN0IHdpbGwgZGVsZXRlIGtleXMgZHVyaW5nIHRlbXBsYXRlIGV4dGVuc2lvblwiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZUEgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdHJlZjogJ3RoZURpdidcblx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHR2YWx1ZUE6ICgpLT4gMVxuXHRcdFx0XHRcdFx0dmFsdWVCOiAoKS0+IDJcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzdHlsZTpcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnXG5cdFx0XHRcdFx0XHR3aWR0aDogMTAwXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDEwMFxuXHRcdFx0XHRcdFx0JGFjdGl2ZTpcblx0XHRcdFx0XHRcdFx0d2lkdGg6IDIwMFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDIwMFxuXHRcdFx0XHRdXG5cdFx0XHQpXG5cdFx0XHR0ZW1wbGF0ZUIgPSB0ZW1wbGF0ZUEuZXh0ZW5kKFxuXHRcdFx0XHRvcHRpb25zOlxuXHRcdFx0XHRcdHJlZjogbnVsbFxuXHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdHZhbHVlQTogbnVsbFxuXHRcdFx0XHRcdFx0dmFsdWVCOiAoKS0+IDNcblxuXHRcdFx0XHRcdHN0eWxlOlxuXHRcdFx0XHRcdFx0aGVpZ2h0OiBudWxsXG5cdFx0XHRcdFx0XHRvcGFjaXR5OiAxXG5cdFx0XHRcdFx0XHQkYWN0aXZlOlxuXHRcdFx0XHRcdFx0XHR3aWR0aDogbnVsbFxuXHRcdFx0KVxuXG5cdFx0XHRzcGF3bkEgPSB0ZW1wbGF0ZUEuc3Bhd24oKVxuXHRcdFx0c3Bhd25CID0gdGVtcGxhdGVCLnNwYXduKClcblxuXHRcdFx0ZXhwZWN0KHNwYXduQS5yZWYpLnRvLmVxdWFsICd0aGVEaXYnXG5cdFx0XHRleHBlY3Qoc3Bhd25CLnJlZikudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QodHlwZW9mIHNwYXduQS5vcHRpb25zLmNvbXB1dGVycy52YWx1ZUEpLnRvLmVxdWFsICdmdW5jdGlvbidcblx0XHRcdGV4cGVjdCh0eXBlb2Ygc3Bhd25CLm9wdGlvbnMuY29tcHV0ZXJzLnZhbHVlQSkudG8uZXF1YWwgJ3VuZGVmaW5lZCdcblx0XHRcdGV4cGVjdCh0eXBlb2Ygc3Bhd25BLm9wdGlvbnMuY29tcHV0ZXJzLnZhbHVlQikudG8uZXF1YWwgJ2Z1bmN0aW9uJ1xuXHRcdFx0ZXhwZWN0KHR5cGVvZiBzcGF3bkIub3B0aW9ucy5jb21wdXRlcnMudmFsdWVCKS50by5lcXVhbCAnZnVuY3Rpb24nXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuY29tcHV0ZXJzLnZhbHVlQigpKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3Qoc3Bhd25CLm9wdGlvbnMuY29tcHV0ZXJzLnZhbHVlQigpKS50by5lcXVhbCAzXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuc3R5bGUucG9zaXRpb24pLnRvLmVxdWFsICdyZWxhdGl2ZSdcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5zdHlsZS5wb3NpdGlvbikudG8uZXF1YWwgJ3JlbGF0aXZlJ1xuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlLndpZHRoKS50by5lcXVhbCAxMDBcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5zdHlsZS53aWR0aCkudG8uZXF1YWwgMTAwXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMuc3R5bGUuaGVpZ2h0KS50by5lcXVhbCAxMDBcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5zdHlsZS5oZWlnaHQpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHNwYXduQS5vcHRpb25zLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlLm9wYWNpdHkpLnRvLmVxdWFsIDFcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZS4kYWN0aXZlLndpZHRoKS50by5lcXVhbCAyMDBcblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucy5zdHlsZS4kYWN0aXZlLndpZHRoKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZS4kYWN0aXZlLmhlaWdodCkudG8uZXF1YWwgMjAwXG5cdFx0XHRleHBlY3Qoc3Bhd25CLm9wdGlvbnMuc3R5bGUuJGFjdGl2ZS5oZWlnaHQpLnRvLmVxdWFsIDIwMFxuXG5cblx0XHR0ZXN0IFwiV2hlbiBzcGF3bmluZyBlbGVtZW50cyB0aGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBzcGF3bnMgc2hvdWxkIGJlIGEgY2xvbmUgb2YgdGhlIHRlbXBsYXRlJ3Mgb3B0aW9uc1wiLCAoKS0+XG5cdFx0XHR0ZW1wbGF0ZUEgPSBEb20udGVtcGxhdGUgWydkaXYnLCBzdHlsZTp7ZGlzcGxheTonYmxvY2snfV1cblx0XHRcdHRlbXBsYXRlQiA9IERvbS50ZW1wbGF0ZSBbJ2RpdicsIHN0eWxlOntkaXNwbGF5OidibG9jayd9XVxuXHRcdFx0c3Bhd25BID0gdGVtcGxhdGVBLnNwYXduKHJlZjonYScpICMgUGFzc2VkIG9wdGlvbnMgdG8gbWVyZ2Ugd2l0aCBvcmlnXG5cdFx0XHRzcGF3bkIgPSB0ZW1wbGF0ZUEuc3Bhd24oKVxuXG5cdFx0XHRleHBlY3Qoc3Bhd25BLm9wdGlvbnMpLm5vdC50by5lcXVhbCh0ZW1wbGF0ZUEub3B0aW9ucylcblx0XHRcdGV4cGVjdChzcGF3bkEub3B0aW9ucy5zdHlsZSkubm90LnRvLmVxdWFsKHRlbXBsYXRlQS5vcHRpb25zLnN0eWxlKVxuXHRcdFx0ZXhwZWN0KHRlbXBsYXRlQS5vcHRpb25zLnN0eWxlLiRiYXNlKS50by5lcXVhbCh1bmRlZmluZWQpXG5cblx0XHRcdGV4cGVjdChzcGF3bkIub3B0aW9ucykubm90LnRvLmVxdWFsKHRlbXBsYXRlQi5vcHRpb25zKVxuXHRcdFx0ZXhwZWN0KHNwYXduQi5vcHRpb25zLnN0eWxlKS5ub3QudG8uZXF1YWwodGVtcGxhdGVCLm9wdGlvbnMuc3R5bGUpXG5cdFx0XHRleHBlY3QodGVtcGxhdGVCLm9wdGlvbnMuc3R5bGUuJGJhc2UpLnRvLmVxdWFsKHVuZGVmaW5lZClcblxuXG5cdFx0dGVzdCBcIlRlbXBsYXRlcyB3aWxsIGJlIHNwYXduZWQgd2hlbiBhcHBlbmRlZCB0byBET00gZWxlbWVudHNcIiwgKCktPlxuXHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoWydzcGFuJywge3JlZjondGhlU3Bhbid9LCAnc29tZVRleHQnXSlcblx0XHRcdGRpdiA9IERvbS5kaXYobnVsbCwgJ2xhYmVsOiAnKVxuXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwgMVxuXHRcdFx0ZXhwZWN0KGRpdi50ZXh0KS50by5lcXVhbCAnbGFiZWw6ICdcblx0XHRcdGRpdi5hcHBlbmQgdGVtcGxhdGVcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCAyXG5cdFx0XHRleHBlY3QoZGl2LnRleHQpLnRvLmVxdWFsICdsYWJlbDogc29tZVRleHQnXG5cdFx0XHRkaXYucHJlcGVuZCB0ZW1wbGF0ZVxuXHRcdFx0ZXhwZWN0KGRpdi5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDNcblx0XHRcdGV4cGVjdChkaXYudGV4dCkudG8uZXF1YWwgJ3NvbWVUZXh0bGFiZWw6IHNvbWVUZXh0J1xuXG5cblx0XHRzdWl0ZSBcIkRhdGEgY29tcHV0ZXJzXCIsICgpLT5cblx0XHRcdHRlc3QgXCJUZW1wbGF0ZXMgYWNjZXB0IG9wdGlvbnMuY29tcHV0ZXJzIGZuIG1hcCB3aGljaCB3aWxsIGJlIGludm9rZWQgd2l0aCBwcm92aWRlZCBvcHRpb25zLmRhdGEgdXBvbiBzcGF3bmluZ1wiLCAoKS0+XG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IG51bGxcblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRjb21wdXRlcnM6ICdzb21lTGFiZWwnOiAoZGF0YSktPiByZWNlaXZlZERhdGEgPSBkYXRhIG9yICdub3RoaW5nJ1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxdWFsKG51bGwpXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXF1YWwobnVsbClcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKHtkYXRhOidzb21lTGFiZWwnOid3b3Jrcyd9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcXVhbCgnd29ya3MnKVxuXG5cblx0XHRcdHRlc3QgXCJDb21wdXRlcnMgd2lsbCBiZSBoYXZlIHRoZSBzcGF3bmVkIFF1aWNrRWxlbWVudCBpbnN0YW5jZSBhcyB0aGVpciBjb250ZXh0XCIsICgpLT5cblx0XHRcdFx0Y29udGV4dCA9IG51bGxcblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRjb21wdXRlcnM6ICdzb21lTGFiZWwnOiAoZGF0YSktPiBjb250ZXh0ID0gdGhpc1xuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXG5cdFx0XHRcdGV4cGVjdChjb250ZXh0KS50by5lcXVhbChudWxsKVxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChjb250ZXh0KS50by5lcXVhbChudWxsKVxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bih7ZGF0YTonc29tZUxhYmVsJzp1bmRlZmluZWR9KVxuXHRcdFx0XHRleHBlY3QoY29udGV4dCkudG8uZXF1YWwoaW5zdGFuY2UpXG5cblxuXHRcdFx0dGVzdCBcIlZhbHVlcyBzcGVjaWZpZWQgaW4gb3B0aW9ucy5kZWZhdWx0cyB3aWxsIGJlIHVzZWQgaWYgbm90IHNwZWNpZmllZCBpbiBvcHRpb25zLmRhdGEgdXBvbiBzcGF3bmluZ1wiLCAoKS0+XG5cdFx0XHRcdHJlc3VsdHMgPSB7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5maXJzdCA9IGRhdGEudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5zZWNvbmQgPSBkYXRhLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0XHRcdFx0J3RoaXJkJzogKGRhdGEpLT4gcmVzdWx0cy50aGlyZCA9IGRhdGEudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRcdFx0ZGVmYXVsdHM6XG5cdFx0XHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdFZhbHVlIGhlcmUnXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZFZhbHVlIGhlcmUnXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsKHt9KVxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsKHtmaXJzdDonZmlyc3R2YWx1ZSBoZXJlJywgdGhpcmQ6J3RoaXJkdmFsdWUgaGVyZSd9KVxuXHRcdFx0XHRcblx0XHRcdFx0aW5zdGFuY2UgPSB0ZW1wbGF0ZS5zcGF3bih7ZGF0YTondGhpcmQnOidjdXN0b212YWx1ZSBoZXJlJ30pXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzKS50by5kZWVwLmVxdWFsKHtmaXJzdDonZmlyc3R2YWx1ZSBoZXJlJywgdGhpcmQ6J2N1c3RvbXZhbHVlIGhlcmUnfSlcblxuXG5cdFx0XHR0ZXN0IFwiVmFsdWVzIGNhbiBiZSBvZiBhbnkgdHlwZVwiLCAoKS0+XG5cdFx0XHRcdHJlc3VsdHMgPSB7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5maXJzdCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IHJlc3VsdHMuc2Vjb25kID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQnZm91cnRoJzogKGRhdGEpLT4gcmVzdWx0cy5mb3VydGggPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdmaWZ0aCc6IChkYXRhKS0+IHJlc3VsdHMuZmlmdGggPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdzaXh0aCc6IChkYXRhKS0+IHJlc3VsdHMuc2l4dGggPSBkYXRhXG5cdFx0XHRcdFx0XHRkZWZhdWx0czpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogWydhYmMnLCAnMTIzJ11cblx0XHRcdFx0XHRcdFx0J3RoaXJkJzoge2E6MSwgYjoxMn1cblx0XHRcdFx0XHRcdFx0J3NpeHRoJzogOTk5XG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YTpcblx0XHRcdFx0XHQnc2Vjb25kJzogbnVsbFxuXHRcdFx0XHRcdCdmb3VydGgnOiAxOVxuXHRcdFx0XHRcdCdmaWZ0aCc6IGZhbHNlXG5cdFx0XHRcdFx0J3NpeHRoJzogdW5kZWZpbmVkXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHRmaXJzdDogWydhYmMnLCAnMTIzJ11cblx0XHRcdFx0XHRzZWNvbmQ6IG51bGxcblx0XHRcdFx0XHR0aGlyZDoge2E6MSwgYjoxMn1cblx0XHRcdFx0XHRmb3VydGg6IDE5XG5cdFx0XHRcdFx0ZmlmdGg6IGZhbHNlXG5cdFx0XHRcdFx0c2l4dGg6IHVuZGVmaW5lZFxuXG5cdFx0XHRcdGV4cGVjdChPYmplY3Qua2V5cyhyZXN1bHRzKS5sZW5ndGgpLnRvLmVxdWFsKDYpXG5cblxuXHRcdFx0dGVzdCBcIlZhbHVlcyBpbiBvcHRpb25zLmRhdGEgdGhhdCBkbyBub3QgaGF2ZSBhIG1hdGNoaW5nIGNvbXB1dGVyIHdpbGwgYmUgc2tpcHBlZFwiLCAoKS0+XG5cdFx0XHRcdHJlc3VsdHMgPSB7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5maXJzdCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0J3NlY29uZCc6IChkYXRhKS0+IHJlc3VsdHMuc2Vjb25kID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXG5cdFx0XHRcdFxuXHRcdFx0XHRpbnN0YW5jZSA9IHRlbXBsYXRlLnNwYXduKGRhdGE6XG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdCd0aGlyZCc6ICd0aGlyZCB2YWx1ZSdcblx0XHRcdFx0XHQnZm91cnRoJzogJ2ZvdXJ0aCB2YWx1ZSdcblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cblx0XHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHJlc3VsdHMpLmxlbmd0aCkudG8uZXF1YWwoMylcblxuXG5cdFx0XHR0ZXN0IFwiQ29tcHV0ZXJzIGluIHRlbXBsYXRlIGNoaWxkcmVuIHdpbGwgcmVjZWl2ZSB0aGUgcGFyZW50J3Mgb3B0aW9ucy5kYXRhXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHBhcmVudDp7fSwgY2hpbGRBOnt9LCBjaGlsZEI6e30sIGNoaWxkQzp7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5wYXJlbnQuZmlyc3QgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLnBhcmVudC5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdCd0aGlyZCc6IChkYXRhKS0+IHJlc3VsdHMucGFyZW50LnRoaXJkID0gZGF0YVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRBLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkQS5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdFx0J3RoaXJkJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZEEudGhpcmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRbJ2RpdicsIG51bGwsXG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRCLmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZvdXJ0aCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRCLmZvdXJ0aCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiByZXN1bHRzLmNoaWxkQy5maXJzdCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHRcdCdzaXh0aCc6IChkYXRhKS0+IHJlc3VsdHMuY2hpbGRDLnNpeHRoID0gZGF0YVxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YTpcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkIHZhbHVlJ1xuXHRcdFx0XHRcdCdmb3VydGgnOiAnZm91cnRoIHZhbHVlJ1xuXHRcdFx0XHQpXG5cdFx0XHRcdGV4cGVjdChyZXN1bHRzLnBhcmVudCkudG8uZGVlcC5lcXVhbFxuXHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0cy5jaGlsZEEpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkIHZhbHVlJ1xuXHRcdFx0XHRcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMuY2hpbGRCKS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdCdmb3VydGgnOiAnZm91cnRoIHZhbHVlJ1xuXHRcdFx0XHRcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMuY2hpbGRDKS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXG5cblx0XHRcdHRlc3QgXCJQYXJlbnQgZGVmYXVsdHMgd2lsbCBub3QgYmUgcGFzc2VkIHRvIGNoaWxkcmVuXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHBhcmVudDp7fSwgY2hpbGQ6e31cblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IHJlc3VsdHMucGFyZW50LmZpcnN0ID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5wYXJlbnQuc2Vjb25kID0gZGF0YVxuXHRcdFx0XHRcdFx0XHQndGhpcmQnOiAoZGF0YSktPiByZXN1bHRzLnBhcmVudC50aGlyZCA9IGRhdGFcblx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogJ3NlY29uZCB2YWx1ZSdcblx0XHRcdFx0XHRcdFx0J2ZvdXJ0aCc6ICdmb3VydGggdmFsdWUnXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZC5maXJzdCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHQnc2Vjb25kJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZC5zZWNvbmQgPSBkYXRhXG5cdFx0XHRcdFx0XHRcdFx0J3RoaXJkJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZC50aGlyZCA9IGRhdGFcblx0XHRcdFx0XHRcdFx0XHQnZm91cnRoJzogKGRhdGEpLT4gcmVzdWx0cy5jaGlsZC5mb3VydGggPSBkYXRhXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHRcdCdmaXJzdCc6ICdmaXJzdCB2YWx1ZSdcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0XG5cdFx0XHRcdGluc3RhbmNlID0gdGVtcGxhdGUuc3Bhd24oZGF0YTpcblx0XHRcdFx0XHQndGhpcmQnOiAndGhpcmQgdmFsdWUnXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMucGFyZW50KS50by5kZWVwLmVxdWFsXG5cdFx0XHRcdFx0J3NlY29uZCc6ICdzZWNvbmQgdmFsdWUnXG5cdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkIHZhbHVlJ1xuXHRcdFx0XHRcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdHMuY2hpbGQpLnRvLmRlZXAuZXF1YWxcblx0XHRcdFx0XHQnZmlyc3QnOiAnZmlyc3QgdmFsdWUnXG5cdFx0XHRcdFx0J3RoaXJkJzogJ3RoaXJkIHZhbHVlJ1xuXG5cblx0XHRcdHRlc3QgXCJEZWZhdWx0cyBzaG91bGQgb25seSBiZSBhcHBsaWVkIG9uY2VcIiwgKCktPlxuXHRcdFx0XHRjb3VudCA9IHBhcmVudDowLCBjaGlsZDowLCBjaGlsZENoaWxkOjBcblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRyZWY6ICdwYXJlbnQnXG5cdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdCdmaXJzdCc6IChkYXRhKS0+IGNvdW50LnBhcmVudCsrXG5cdFx0XHRcdFx0XHRkZWZhdWx0czpcblx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0cmVmOiAnY2hpbGQnXG5cdFx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0XHQnZmlyc3QnOiAoZGF0YSktPiBjb3VudC5wYXJlbnQrK1xuXHRcdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAoZGF0YSktPiBjb3VudC5jaGlsZCsrXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHRcdCdzZWNvbmQnOiAnc2Vjb25kIHZhbHVlJ1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0cmVmOiAnY2hpbGQnXG5cdFx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZvdXJ0aCc6IChkYXRhKS0+IGNvdW50LmNoaWxkQ2hpbGQrK1xuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZvdXJ0aCc6ICdmb3VydGggdmFsdWUnXG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKGRhdGE6J3RoaXJkJzondGhpcmQgdmFsdWUnKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBwYXJlbnQ6MSwgY2hpbGQ6MSwgY2hpbGRDaGlsZDoxXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIHBhcmVudDoyLCBjaGlsZDoyLCBjaGlsZENoaWxkOjJcblxuXG5cdFx0XHR0ZXN0IFwiRGF0YS9kZWZhdWx0cyBzaG91bGQgYmUgYXBwbGllZCBldmVuIHdoZW4gcGFyZW50IGRvZXNuJ3QgaGF2ZSBjb21wdXRlcnNcIiwgKCktPlxuXHRcdFx0XHRjb3VudCA9IDBcblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsLFxuXHRcdFx0XHRcdFx0WydzZWN0aW9uJywgbnVsbCxcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogKGRhdGEpLT4gY291bnQrK1xuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHRcdFx0J2ZpcnN0JzogJ2ZpcnN0IHZhbHVlJ1xuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bihkYXRhOidmaXJzdCc6J3NlY29uZCB2YWx1ZScpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcXVhbCgyKVxuXG5cblx0XHRcdHRlc3QgXCJEYXRhIGNhbiBiZSByZS1hcHBsaWVkIHZpYSAuYXBwbHlEYXRhKGRhdGEpXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0cyA9IHt9OyBjb3VudCA9IHthOjAsIGI6MCwgYzowLCBkOjAsIGU6MCwgZjowfVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczpcblx0XHRcdFx0XHRcdFx0J2EnOiAoZGF0YSktPiByZXN1bHRzLmEgPSBkYXRhO1x0Y291bnQuYSsrXG5cdFx0XHRcdFx0XHRcdCdiJzogKGRhdGEpLT4gcmVzdWx0cy5iID0gZGF0YTtcdGNvdW50LmIrK1xuXHRcdFx0XHRcdFx0XHQnYyc6IChkYXRhKS0+IHJlc3VsdHMuYyA9IGRhdGE7XHRjb3VudC5jKytcblx0XHRcdFx0XHRcdFx0J2QnOiAoZGF0YSktPiByZXN1bHRzLmQgPSBkYXRhO1x0Y291bnQuZCsrXG5cdFx0XHRcdFx0XHRcdCdlJzogKGRhdGEpLT4gcmVzdWx0cy5lID0gZGF0YTtcdGNvdW50LmUrK1xuXHRcdFx0XHRcdFx0XHQnZic6IChkYXRhKS0+IHJlc3VsdHMuZiA9IGRhdGE7XHRjb3VudC5mKytcblx0XHRcdFx0XHRcdGRlZmF1bHRzOlxuXHRcdFx0XHRcdFx0XHQnYSc6IDFcblx0XHRcdFx0XHRcdFx0J2MnOiAzXG5cdFx0XHRcdFx0XHRcdCdmJzogNlxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXG5cdFx0XHRcdFxuXHRcdFx0XHRpbnN0YW5jZSA9IHRlbXBsYXRlLnNwYXduKGRhdGE6IHtiOjIsIGQ6NCwgZTo1LCBmOjZ9KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbCB7YToxLCBiOjIsIGM6MywgZDo0LCBlOjUsIGY6Nn1cblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5kZWVwLmVxdWFsIHthOjEsIGI6MSwgYzoxLCBkOjEsIGU6MSwgZjoxfVxuXG5cdFx0XHRcdGluc3RhbmNlLmFwcGx5RGF0YShhOjExLCBiOjIyLCBkOjQ0LCBlOjU1KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0cykudG8uZGVlcC5lcXVhbCB7YToxMSwgYjoyMiwgYzozLCBkOjQ0LCBlOjU1LCBmOjZ9XG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZGVlcC5lcXVhbCB7YToyLCBiOjIsIGM6MiwgZDoyLCBlOjIsIGY6Mn1cblxuXG5cdFx0XHR0ZXN0IFwiVGhlICdfaW5pdCcgY29tcHV0ZXIgd2lsbCBiZSBydW4gYnkgZGVmYXVsdCBvbiB0ZW1wbGF0ZSBzcGF3biByZWdhcmRsZXNzIG9mIGRhdGFcIiwgKCktPlxuXHRcdFx0XHRjb3VudCA9IHt9XG5cdFx0XHRcdHRlbXBsYXRlID0gRG9tLnRlbXBsYXRlKFxuXHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0cmVmOiAnZGl2QSdcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogX2luaXQ6ICgpLT4gY291bnRbQHJlZl0/PTA7IGNvdW50W0ByZWZdKytcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHJlZjogJ2RpdkInXG5cdFx0XHRcdFx0XHRcdGRhdGE6IGZpcnN0OiAnMSdcblx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOiBfaW5pdDogKCktPiBjb3VudFtAcmVmXT89MDsgY291bnRbQHJlZl0rK1xuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2Qydcblx0XHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdFx0cmVmOiAnZGl2RCdcblx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHRcdHJlZjogJ2RpdkUnXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6IF9pbml0OiAoKS0+IGNvdW50W0ByZWZdPz0wOyBjb3VudFtAcmVmXSsrXG5cdFx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCB7fVxuXHRcdFx0XHR0ZW1wbGF0ZS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIGRpdkE6MSwgZGl2QjoxLCBkaXZFOjFcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgZGl2QToyLCBkaXZCOjIsIGRpdkU6MlxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuY2hpbGQuZGl2Qi5zcGF3bihkYXRhOnNlY29uZDonMicpXG5cdFx0XHRcdGV4cGVjdChjb3VudCkudG8uZXFsIGRpdkE6MiwgZGl2QjozLCBkaXZFOjJcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLmNoaWxkLmRpdkMuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoY291bnQpLnRvLmVxbCBkaXZBOjIsIGRpdkI6MywgZGl2RTozXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZS5jaGlsZC5kaXZDLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KGNvdW50KS50by5lcWwgZGl2QToyLCBkaXZCOjMsIGRpdkU6NFxuXG5cblx0XHRcdHRlc3QgXCJUaGUgJ19pbml0JyBjb21wdXRlciB3aWxsIGJlIHBhc3NlZCBhbGwgb2YgdGhlIGRhdGEgdGhlIHRlbXBsYXRlIHNwYXduIHJlY2VpdmVzXCIsICgpLT5cblx0XHRcdFx0cmVzdWx0ID0gZGl2QTp7fSwgZGl2Qjp7fVxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdHJlZjogJ2RpdkEnXG5cdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdGhyZWY6IChocmVmKS0+IHJlc3VsdFtAcmVmXS5ocmVmID0gaHJlZlxuXHRcdFx0XHRcdFx0XHRuYW1lOiAobmFtZSktPiByZXN1bHRbQHJlZl0ubmFtZSA9IG5hbWVcblx0XHRcdFx0XHRcdFx0X2luaXQ6ICgpLT4gcmVzdWx0W0ByZWZdLl9pbml0ID0gYXJndW1lbnRzWzBdXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRyZWY6ICdkaXZQcm94eSdcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdHJlZjogJ2RpdkInXG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdHM6IGZpcnN0OiAnMSdcblx0XHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6XG5cdFx0XHRcdFx0XHRcdFx0XHRocmVmOiAoaHJlZiktPiByZXN1bHRbQHJlZl0uaHJlZiA9IGhyZWZcblx0XHRcdFx0XHRcdFx0XHRcdG5hbWU6IChuYW1lKS0+IHJlc3VsdFtAcmVmXS5uYW1lID0gbmFtZVxuXHRcdFx0XHRcdFx0XHRcdFx0X2luaXQ6ICgpLT4gcmVzdWx0W0ByZWZdLl9pbml0ID0gYXJndW1lbnRzWzBdXG5cdFx0XHRcdFx0XHRcdF1cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0ZWQgPSBcblx0XHRcdFx0XHRocmVmOiAnYWJjJ1xuXHRcdFx0XHRcdG5hbWU6ICcxMjMnXG5cdFx0XHRcdFx0X2luaXQ6IHtocmVmOidhYmMnLCBuYW1lOicxMjMnLCB2YWx1ZTonZGVmJywgc2l6ZTonNDU2J31cblx0XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwgZGl2QTp7fSwgZGl2Qjp7fVxuXHRcdFx0XHRcblx0XHRcdFx0dGVtcGxhdGUuc3Bhd24oZGF0YTp7aHJlZjonYWJjJywgbmFtZTonMTIzJywgdmFsdWU6J2RlZicsIHNpemU6JzQ1Nid9KVxuXHRcdFx0XHRleHBlY3QocmVzdWx0KS50by5lcWwge2RpdkE6ZXhwZWN0ZWQsIGRpdkI6ZXhwZWN0ZWR9XG5cdFx0XHRcdFxuXHRcdFx0XHRkZWxldGUgcmVzdWx0LmRpdkFcblx0XHRcdFx0ZGl2QjogbnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZS5jaGlsZC5kaXZCLnNwYXduKGRhdGE6e2hyZWY6J2FiYycsIG5hbWU6JzEyMycsIHZhbHVlOidkZWYnLCBzaXplOic0NTYnfSlcblx0XHRcdFx0ZXhwZWN0KHJlc3VsdCkudG8uZXFsIHtkaXZCOmV4cGVjdGVkfVxuXG5cblx0XHRcdHRlc3QgXCJEYXRhIGNhbiBiZSBzcGVjaWZpZWQgdmlhIG9wdGlvbnMgb2JqZWN0XCIsICgpLT5cblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gbnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERvbS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdGNvbXB1dGVyczogJ3NvbWVMYWJlbCc6IChkYXRhKS0+IHJlY2VpdmVkRGF0YSA9IGRhdGEgb3IgJ25vdGhpbmcnXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlLmV4dGVuZChvcHRpb25zOmRhdGE6eydzb21lTGFiZWwnOid3b3Jrcyd9KVxuXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXF1YWwobnVsbClcblx0XHRcdFx0dGVtcGxhdGVDb3B5LnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXF1YWwoJ3dvcmtzJylcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKG9wdGlvbnM6ZGF0YTp7J3NvbWVMYWJlbCc6J2Fsc28gd29ya3MnfSlcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXF1YWwoJ2Fsc28gd29ya3MnKVxuXG5cblx0XHRcdHRlc3QgXCJEYXRhIHNwZWNpZmllZCBpbiBjaGlsZHJlbidzIG9wdGlvbnMgb2JqZWN0IHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlIHBhcmVudCdzIGRhdGFcIiwgKCktPlxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBhYmM6bnVsbCwgZGVmOm51bGxcblx0XHRcdFx0dGVtcGxhdGUgPSBEb20udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnLCBudWxsXG5cblx0XHRcdFx0XHRcdFsnc3Bhbidcblx0XHRcdFx0XHRcdFx0ZGF0YTogYWJjOiAxMjNcblx0XHRcdFx0XHRcdFx0Y29tcHV0ZXJzOlxuXHRcdFx0XHRcdFx0XHRcdCdhYmMnOiAoZGF0YSktPiByZWNlaXZlZERhdGEuYWJjID0gZGF0YSBvciAnbm90aGluZydcblx0XHRcdFx0XHRcdFx0XHQnZGVmJzogKGRhdGEpLT4gcmVjZWl2ZWREYXRhLmRlZiA9IGRhdGEgb3IgJ25vdGhpbmcnXG5cdFx0XHRcdFx0XHRdXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHQpXG5cdFx0XHRcdHRlbXBsYXRlQ29weSA9IHRlbXBsYXRlLmV4dGVuZChvcHRpb25zOmRhdGE6e2RlZjo0NTZ9KVxuXG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKClcblx0XHRcdFx0ZXhwZWN0KHJlY2VpdmVkRGF0YSkudG8uZXFsKGFiYzoxMjMsIGRlZjpudWxsKVxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBhYmM6bnVsbCwgZGVmOm51bGxcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlQ29weS5zcGF3bigpXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbChhYmM6MTIzLCBkZWY6NDU2KVxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBhYmM6bnVsbCwgZGVmOm51bGxcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKG9wdGlvbnM6ZGF0YTp7ZGVmOjc4OX0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbChhYmM6MTIzLCBkZWY6Nzg5KVxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBhYmM6bnVsbCwgZGVmOm51bGxcblx0XHRcdFx0XG5cdFx0XHRcdHRlbXBsYXRlLnNwYXduKG9wdGlvbnM6ZGF0YTp7YWJjOjc4OX0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbChhYmM6Nzg5LCBkZWY6bnVsbClcblxuXG5cdFx0XHR0ZXN0IFwiRGF0YSB3b24ndCBiZSBwYXNzZWQgdG8gY2hpbGRyZW4gaWYgb3B0aW9ucy5wYXNzRGF0YVRvQ2hpbGRyZW4gaXMgZmFsc2VcIiwgKCktPlxuXHRcdFx0XHRyZWNlaXZlZERhdGEgPSBwYXJlbnQ6bnVsbCwgY2hpbGQ6bnVsbFxuXHRcdFx0XHR0ZW1wbGF0ZTEgPSBET00udGVtcGxhdGUoXG5cdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRjb21wdXRlcnM6IGFiYzogKGRhdGEpLT4gcmVjZWl2ZWREYXRhLnBhcmVudCA9IGRhdGFcblxuXHRcdFx0XHRcdFx0WydzcGFuJ1xuXHRcdFx0XHRcdFx0XHRjb21wdXRlcnM6IGFiYzogKGRhdGEpLT4gcmVjZWl2ZWREYXRhLmNoaWxkID0gZGF0YVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHR0ZW1wbGF0ZTIgPSB0ZW1wbGF0ZTEuZXh0ZW5kKHBhc3NEYXRhVG9DaGlsZHJlbjpmYWxzZSlcblx0XHRcdFx0XG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6bnVsbCwgY2hpbGQ6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0ZWwxID0gdGVtcGxhdGUxLnNwYXduKGRhdGE6e2FiYzoxMjN9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcWwgcGFyZW50OjEyMywgY2hpbGQ6MTIzXG5cblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gcGFyZW50Om51bGwsIGNoaWxkOm51bGxcblx0XHRcdFx0ZWwyID0gdGVtcGxhdGUyLnNwYXduKGRhdGE6e2FiYzoxMjN9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcWwgcGFyZW50OjEyMywgY2hpbGQ6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0cmVjZWl2ZWREYXRhID0gcGFyZW50Om51bGwsIGNoaWxkOm51bGxcblx0XHRcdFx0ZWwxLmFwcGx5RGF0YSh7YWJjOjQ1Nn0pXG5cdFx0XHRcdGV4cGVjdChyZWNlaXZlZERhdGEpLnRvLmVxbCBwYXJlbnQ6NDU2LCBjaGlsZDo0NTZcblx0XHRcdFx0XG5cdFx0XHRcdHJlY2VpdmVkRGF0YSA9IHBhcmVudDpudWxsLCBjaGlsZDpudWxsXG5cdFx0XHRcdGVsMi5hcHBseURhdGEoe2FiYzo0NTZ9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcWwgcGFyZW50OjQ1NiwgY2hpbGQ6bnVsbFxuXHRcdFx0XHRcblx0XHRcdFx0ZWwyLmxhc3RDaGlsZC5hcHBseURhdGEoe2FiYzo3ODl9KVxuXHRcdFx0XHRleHBlY3QocmVjZWl2ZWREYXRhKS50by5lcWwgcGFyZW50OjQ1NiwgY2hpbGQ6Nzg5XG5cblxuXHRcdFx0dGVzdCBcIkRhdGEgc2hvdWxkIGJlIGludm9rZWQgZm9yIHBhcmVudHMgYWZ0ZXIgaW52b2tlZCBjaGlsZHJlblwiLCAoKS0+XG5cdFx0XHRcdGhpc3RvcnkgPSBbXVxuXHRcdFx0XHRjb21wdXRlcnMgPSBcblx0XHRcdFx0XHRfaW5pdDogKCktPiBoaXN0b3J5LnB1c2goQHJlZilcblx0XHRcdFx0XHRhYmM6ICgpLT4gaGlzdG9yeS5wdXNoKEByZWYpXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidwYXJlbnQnfVxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDEnfVxuXHRcdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0XHR7Y29tcHV0ZXJzLCBpZDonY2hpbGQyJ31cblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0WydkaXYnXG5cdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDMnfVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0KVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFtdXG5cdFx0XHRcdGVsID0gdGVtcGxhdGUuc3Bhd24oKVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFsnY2hpbGQyJywgJ2NoaWxkMScsICdjaGlsZDMnLCAncGFyZW50J11cblxuXHRcdFx0XHRoaXN0b3J5Lmxlbmd0aCA9IDBcblx0XHRcdFx0ZWwuYXBwbHlEYXRhKGFiYzoxMjMpXG5cdFx0XHRcdGV4cGVjdChoaXN0b3J5KS50by5lcWwgWydjaGlsZDInLCAnY2hpbGQxJywgJ2NoaWxkMycsICdwYXJlbnQnXVxuXG5cblx0XHRcdHRlc3QgXCJDb21wdXRlcnMgd2lsbCBiZSBpbnZva2VkIG9ubHkgb25lIHRpbWUgcGVyIGVsZW1lbnQgaWYgb3B0aW9ucy5pbnZva2VDb21wdXRlcnNPbmNlIGlzIG9uXCIsICgpLT5cblx0XHRcdFx0aGlzdG9yeSA9IFtdXG5cdFx0XHRcdGNvbXB1dGVycyA9ICBhYmM6ICgpLT4gaGlzdG9yeS5wdXNoKEByZWYpXG5cdFx0XHRcdFxuXHRcdFx0XHR0ZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShcblx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidwYXJlbnQnLCBpbnZva2VDb21wdXRlcnNPbmNlOnRydWV9XG5cdFx0XHRcdFx0XHRbJ2Rpdidcblx0XHRcdFx0XHRcdFx0e2NvbXB1dGVycywgaWQ6J2NoaWxkMSd9XG5cdFx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHRcdHtjb21wdXRlcnMsIGlkOidjaGlsZDInLCBpbnZva2VDb21wdXRlcnNPbmNlOnRydWV9XG5cdFx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRcdFsnZGl2J1xuXHRcdFx0XHRcdFx0XHR7Y29tcHV0ZXJzLCBpZDonY2hpbGQzJ31cblx0XHRcdFx0XHRcdF1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdClcblx0XHRcdFx0ZXhwZWN0KGhpc3RvcnkpLnRvLmVxbCBbXVxuXHRcdFx0XHRlbCA9IHRlbXBsYXRlLnNwYXduKGRhdGE6YWJjOjEyMylcblx0XHRcdFx0ZXhwZWN0KGhpc3RvcnkpLnRvLmVxbCBbJ2NoaWxkMicsICdjaGlsZDEnLCAnY2hpbGQzJywgJ3BhcmVudCddXG5cblx0XHRcdFx0aGlzdG9yeS5sZW5ndGggPSAwXG5cdFx0XHRcdGVsLmFwcGx5RGF0YShhYmM6MTIzKVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFsnY2hpbGQxJywgJ2NoaWxkMyddXG5cblx0XHRcdFx0aGlzdG9yeS5sZW5ndGggPSAwXG5cdFx0XHRcdGVsLmFwcGx5RGF0YShhYmM6NDU2KVxuXHRcdFx0XHRleHBlY3QoaGlzdG9yeSkudG8uZXFsIFsnY2hpbGQxJywgJ2NoaWxkMyddXG5cblxuXG5cdHN1aXRlIFwiTWlzY1wiLCAoKS0+XG5cdFx0dGVzdCBcIlF1aWNrRG9tLmlzVGVtcGxhdGVcIiwgKCktPlxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIERvbS50ZW1wbGF0ZShbJ2RpdiddKSkudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1RlbXBsYXRlIERvbS5kaXYoKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSBEb20uZGl2KClbMF0pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUge30pLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUgJ3N0cmluZycpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzVGVtcGxhdGUgNSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSBmYWxzZSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNUZW1wbGF0ZSB0cnVlKS50by5iZS5mYWxzZVxuXHRcdFxuXG5cdFx0dGVzdCBcIlF1aWNrRG9tLmlzUXVpY2tFbFwiLCAoKS0+XG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCBEb20udGVtcGxhdGUoWydkaXYnXSkpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCBEb20uZGl2KCkpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIERvbS50ZXh0KCkpLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIERvbS5kaXYoKVswXSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNRdWlja0VsIHt9KS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwgJ3N0cmluZycpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCA1KS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc1F1aWNrRWwgZmFsc2UpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzUXVpY2tFbCB0cnVlKS50by5iZS5mYWxzZVxuXHRcdFxuXG5cdFx0dGVzdCBcIlF1aWNrRG9tLmlzRWxcIiwgKCktPlxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIERvbS50ZW1wbGF0ZShbJ2RpdiddKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCBEb20uZGl2KCkpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgRG9tLnRleHQoKSkudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChEb20uaXNFbCBEb20uZGl2KClbMF0pLnRvLmJlLnRydWVcblx0XHRcdGV4cGVjdChEb20uaXNFbCBEb20udGV4dCgpWzBdKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIHt9KS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsICdzdHJpbmcnKS50by5iZS5mYWxzZVxuXHRcdFx0ZXhwZWN0KERvbS5pc0VsIDUpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgZmFsc2UpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoRG9tLmlzRWwgdHJ1ZSkudG8uYmUuZmFsc2Vcblx0XHRcblxuXHRcdHRlc3QgXCJTdHJpbmdpZmljYXRpb25cIiwgKCktPlxuXHRcdFx0c2VjdGlvbiA9IERvbShcblx0XHRcdFx0WydzZWN0aW9uJyx7XG5cdFx0XHRcdFx0aWQ6ICd0aGVTZWN0aW9uJ1xuXHRcdFx0XHRcdGNsYXNzTmFtZTogJ3RoZVNlY3Rpb25DbGFzcydcblx0XHRcdFx0XHRzdHlsZTpcblx0XHRcdFx0XHRcdCdwb3NpdGlvbic6ICdyZWxhdGl2ZSdcblx0XHRcdFx0XHRcdCdvcGFjaXR5JzogMC41XG5cdFx0XHRcdFx0XHQnZm9udFNpemUnOiAoKS0+ICcyOXB4J1xuXHRcdFx0XHRcdFx0JGhhcHB5OlxuXHRcdFx0XHRcdFx0XHRmb250U2l6ZTogJzExcHgnXG5cdFx0XHRcdFx0XHRcdCRyZWxheGVkOlxuXHRcdFx0XHRcdFx0XHRcdGZvbnRTaXplOiAnOHB4J1xuXHRcdFx0XHR9XG5cdFx0XHRcdFx0WydkaXYnLCB7aWQ6J2NoaWxkQScsIHN0eWxlOnBvc2l0aW9uOidyZWxhdGl2ZSd9LCAnY2hpbGRBLWlubmVydGV4dCddXG5cdFx0XHRcdFx0J3NlY3Rpb24taW5uZXJ0ZXh0J1xuXHRcdFx0XHRcdFsnc3BhbicsIHtpZDonY2hpbGRCJywgcmVmOidjaGlsZEItcmVmIScsIHN0eWxlOnBvc2l0aW9uOidhYnNvbHV0ZSd9XG5cdFx0XHRcdFx0XHQnY2hpbGRCLWlubmVydGV4dCdcblx0XHRcdFx0XHRcdFsndGV4dCcsIHt0ZXh0OidjaGlsZEItaW5uZXJ0ZXh0IDInfV1cblx0XHRcdFx0XHRcdFsnYScsIHt1cmw6J2h0dHBzOi8vZ29vZ2xlLmNvbSd9XVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0XVxuXHRcdFx0KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0d2luZG93LnN0cmluZ2lmaWVkID0gSlNPTi5zdHJpbmdpZnkoc2VjdGlvbiwgbnVsbCwgMilcblx0XHRcdHNlY3Rpb25Db3B5ID0gRG9tKEpTT04ucGFyc2Uoc3RyaW5naWZpZWQpKS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkudHlwZSkudG8uZXF1YWwoc2VjdGlvbi50eXBlKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LnJlZikudG8uZXF1YWwoc2VjdGlvbi5yZWYpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuZWwuaWQpLnRvLmVxdWFsKHNlY3Rpb24uZWwuaWQpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuZWwuY2xhc3NOYW1lKS50by5lcXVhbChzZWN0aW9uLmVsLmNsYXNzTmFtZSlcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAncG9zaXRpb24nKS50by5lcXVhbChzZWN0aW9uLnN0eWxlICdwb3NpdGlvbicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuc3R5bGUgJ29wYWNpdHknKS50by5lcXVhbChzZWN0aW9uLnN0eWxlICdvcGFjaXR5Jylcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAnZm9udFNpemUnKS5ub3QudG8uZXF1YWwoc2VjdGlvbi5zdHlsZSAnZm9udFNpemUnKVxuXHRcdFx0XG5cdFx0XHRzZWN0aW9uLnN0eWxlICdmb250U2l6ZScsIG51bGxcblx0XHRcdHNlY3Rpb24uc3RhdGUgJ2hhcHB5Jywgb25cblx0XHRcdHNlY3Rpb25Db3B5LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuc3R5bGUgJ2ZvbnRTaXplJykudG8uZXF1YWwoc2VjdGlvbi5zdHlsZSAnZm9udFNpemUnKVxuXHRcdFx0XG5cdFx0XHRzZWN0aW9uLnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdHNlY3Rpb25Db3B5LnN0YXRlICdyZWxheGVkJywgb25cblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5zdHlsZSAnZm9udFNpemUnKS50by5lcXVhbChzZWN0aW9uLnN0eWxlICdmb250U2l6ZScpXG5cdFx0XHRcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsKHNlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoKVxuXHRcdFx0ZXhwZWN0KE9iamVjdC5rZXlzKHNlY3Rpb25Db3B5LmNoaWxkKS5sZW5ndGgpLnRvLmVxdWFsKE9iamVjdC5rZXlzKHNlY3Rpb24uY2hpbGQpLmxlbmd0aClcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS50ZXh0KS50by5lcXVhbChzZWN0aW9uLnRleHQpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuaHRtbCkudG8uZXF1YWwoc2VjdGlvbi5odG1sKVxuXHRcdFx0ZXhwZWN0KHNlY3Rpb25Db3B5LmNoaWxkcmVuWzBdLnN0eWxlICdwb3NpdGlvbicpLnRvLmVxdWFsKHNlY3Rpb24uY2hpbGRyZW5bMF0uc3R5bGUgJ3Bvc2l0aW9uJylcblx0XHRcdGV4cGVjdChzZWN0aW9uQ29weS5jaGlsZHJlblsyXS5zdHlsZSAncG9zaXRpb24nKS50by5lcXVhbChzZWN0aW9uLmNoaWxkcmVuWzJdLnN0eWxlICdwb3NpdGlvbicpXG5cdFx0XHRleHBlY3Qoc2VjdGlvbkNvcHkuY2hpbGRyZW5bMl0ucmVmKS50by5lcXVhbChzZWN0aW9uLmNoaWxkcmVuWzJdLnJlZilcblxuXG5cdFx0dGVzdCBcIkNoYWluaW5nXCIsICgpLT5cblx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0Y2hhaW5SZXN1bHQgPSBkaXZcblx0XHRcdFx0LnN0YXRlKCdhYmMnLCBvbilcblx0XHRcdFx0LnJlc2V0U3RhdGUoKVxuXHRcdFx0XHQuc3R5bGUoKVxuXHRcdFx0XHQuY3NzKCd3aWR0aCcsIDEyKVxuXHRcdFx0XHQuYXR0cigndGVzdCcsIDEyMylcblx0XHRcdFx0LnByb3AoJ2Fub3RoZXJUZXN0JywgMTIzKVxuXHRcdFx0XHQudXBkYXRlU3RhdGVTdHlsZXMoe2hlaWdodDo1MH0pXG5cdFx0XHRcdC51cGRhdGVTdGF0ZVRleHRzKHskYmFzZTonYWJjJ30pXG5cdFx0XHRcdC5hcHBlbmQoKVxuXHRcdFx0XHQuYXBwZW5kVG8oKVxuXHRcdFx0XHQucHJlcGVuZCgpXG5cdFx0XHRcdC5wcmVwZW5kVG8oKVxuXHRcdFx0XHQuYmVmb3JlKClcblx0XHRcdFx0LmFmdGVyKClcblx0XHRcdFx0Lmluc2VydEJlZm9yZSgpXG5cdFx0XHRcdC5pbnNlcnRBZnRlcigpXG5cdFx0XHRcdC5kZXRhY2goKVxuXHRcdFx0XHQud3JhcChEb20uc2VjdGlvbigpKVxuXHRcdFx0XHQudW53cmFwKClcblx0XHRcdFx0LndyYXAoRG9tLmhlYWRlcigpKVxuXHRcdFx0XHQucmVwbGFjZSgpXG5cdFx0XHRcdC5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XHQud3JhcChoZWFkPURvbS5oZWFkZXIoKSlcblx0XHRcdFx0Lm9uKCdhYmMnLCAoKS0+KVxuXHRcdFx0XHQuZW1pdCgnYWJjJylcblx0XHRcdFx0Lm9mZignYWJjJylcblx0XHRcdFx0Lm9mZigpXG5cblx0XHRcdGV4cGVjdChjaGFpblJlc3VsdCkudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KHNhbmRib3guY2hpbGRyZW5bMF0pLnRvLmVxdWFsKGhlYWQuZWwpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoaGVhZClcblx0XHRcdGV4cGVjdChkaXYuY3NzICd3aWR0aCcpLnRvLmVxdWFsKCcxMnB4JylcblxuXG5cdFx0dGVzdCBcIkludmFsaWQgQXJndW1lbnRzXCIsICgpLT5cblx0XHRcdHRleHQgPSBEb20udGV4dCgnc29tZVRleHQnLCB7bG9zdE9wdHM6dHJ1ZX0pXG5cdFx0XHRkaXYgPSBEb20uZGl2KHtsb3N0T3B0czp0cnVlfSlcblxuXHRcdFx0ZXhwZWN0KERvbSgpKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChEb20obnVsbCkpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KERvbSh7fSkpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdi51cGRhdGVPcHRpb25zKCkpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KHRleHQub3B0aW9ucy5sb3N0T3B0cykudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2Lm9wdGlvbnMubG9zdE9wdHMpLnRvLmVxdWFsIHRydWVcblx0XHRcdGV4cGVjdChkaXYub24oKSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2Lm9uKCdhYmMnKSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2Lm9uKCdhYmMnLCB7fSkpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5vbmNlKCdhYmMnKSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2Lm9mZignc29tZXRoaW5nRmFrZScpKS50by5lcXVhbCBkaXZcblxuXHRcdFx0ZW1pdENvdW50ID0gMDsgZGl2Lm9uICdzb21ldGhpbmcnLCBjYj0oKS0+IGVtaXRDb3VudCsrXG5cdFx0XHRleHBlY3QoZGl2LmVtaXQoJycpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXQoKSkudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbWl0UHJpdmF0ZSgnbm9uZScpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZGl2LmVtaXRQcml2YXRlKCcnKSkudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbWl0UHJpdmF0ZSgpKS50by5lcXVhbChkaXYpXG5cdFx0XHRleHBlY3QoZW1pdENvdW50KS50by5lcXVhbCgwKVxuXHRcdFx0ZXhwZWN0KGRpdi5lbWl0KCdzb21ldGhpbmcnKSkudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMSlcblx0XHRcdGV4cGVjdChkaXYub2ZmKCdzb21ldGhpbmcnLCAoKS0+KSkudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KGRpdi5lbWl0KCdzb21ldGhpbmcnKSkudG8uZXF1YWwoZGl2KVxuXHRcdFx0ZXhwZWN0KGVtaXRDb3VudCkudG8uZXF1YWwoMilcblxuXHRcdFx0ZGl2LmNzcyhudWxsLCAnMTI5Jylcblx0XHRcdGV4cGVjdChkaXYuZWwuc3R5bGUubnVsbCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlKCkpLnRvLmVxbCBbXVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZShudWxsLCBvbikpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSgxMjMsIG9uKSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdiYXNlJywgb24pLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYmFzZScpLnRvLmJlLmZhbHNlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICckd2hhdGV2cycsIG9uKS50by5lcXVhbCBkaXZcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ3doYXRldnMnKS50by5iZS50cnVlXG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdhbm90aGVyJykudG8uYmUuZmFsc2Vcblx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2Fub3RoZXInLCBvbikudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdhbm90aGVyJykudG8uYmUudHJ1ZVxuXHRcdFx0ZXhwZWN0KGRpdi5zdGF0ZSAnYW5vdGhlcicsIHVuZGVmaW5lZCkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnN0YXRlICdhbm90aGVyJykudG8uYmUuZmFsc2VcblxuXHRcdFx0ZXhwZWN0KGRpdi51cGRhdGVTdGF0ZVN0eWxlcyB7JGJhc2U6e3dpZHRoOjF9fSkudG8uZXF1YWwgZGl2XG5cdFx0XHRleHBlY3QoZGl2LnVwZGF0ZVN0YXRlU3R5bGVzIG51bGwpLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi51cGRhdGVTdGF0ZVRleHRzIHskYmFzZTonYWJjJ30pLnRvLmVxdWFsIGRpdlxuXHRcdFx0ZXhwZWN0KGRpdi51cGRhdGVTdGF0ZVRleHRzIG51bGwpLnRvLmVxdWFsIGRpdlxuXG5cdFx0XHRkaXYuYXBwZW5kVG8oRG9tIHNhbmRib3gpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cblx0XHRcdGRpdi5hcHBlbmQodHJ1ZSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2LmFwcGVuZFRvKGRvY3VtZW50KVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKERvbSBzYW5kYm94KVxuXHRcdFx0ZGl2LnByZXBlbmQodHJ1ZSlcblx0XHRcdGV4cGVjdChkaXYuY2hpbGRyZW4ubGVuZ3RoKS50by5lcXVhbCgwKVxuXHRcdFx0ZGl2LnByZXBlbmRUbyh0cnVlKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKERvbSBzYW5kYm94KVxuXHRcdFx0ZGl2LmFmdGVyKHRydWUpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGRpdi5pbnNlcnRBZnRlcigxMjMpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwoRG9tIHNhbmRib3gpXG5cdFx0XHRkaXYuYmVmb3JlKHRydWUpXG5cdFx0XHRleHBlY3QoZGl2LmNoaWxkcmVuLmxlbmd0aCkudG8uZXF1YWwoMClcblx0XHRcdGRpdi5pbnNlcnRCZWZvcmUoMTIzKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKERvbSBzYW5kYm94KVxuXHRcdFx0ZGl2LndyYXAoMTIzKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKERvbSBzYW5kYm94KVxuXHRcdFx0ZGl2LnJlcGxhY2UoMTIzKVxuXHRcdFx0ZXhwZWN0KGRpdi5wYXJlbnQpLnRvLmVxdWFsKERvbSBzYW5kYm94KVxuXHRcdFx0ZGl2LmRldGFjaCgpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZGl2LnVud3JhcCgpXG5cdFx0XHRleHBlY3QoZGl2LnBhcmVudCkudG8uZXF1YWwodW5kZWZpbmVkKVxuXHRcdFx0ZXhwZWN0KERvbShzYW5kYm94KS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDBcblxuXHRcdFx0ZGl2LmFwcGVuZFRvKERvbSBzYW5kYm94KVxuXHRcdFx0ZXhwZWN0KERvbShzYW5kYm94KS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblx0XHRcdGlmIERvbShzYW5kYm94KS5fcmVtb3ZlQ2hpbGRcblx0XHRcdFx0RG9tKHNhbmRib3gpLl9yZW1vdmVDaGlsZCh0ZXh0KVxuXHRcdFx0XHREb20oc2FuZGJveCkuX3JlbW92ZUNoaWxkKERvbS5kaXYoKSlcblx0XHRcdFx0ZXhwZWN0KERvbShzYW5kYm94KS5jaGlsZHJlbi5sZW5ndGgpLnRvLmVxdWFsIDFcblxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLmJhdGNoKClcblx0XHRcdFx0LnRvLnRocm93KClcblx0XHRcdFxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLmJhdGNoKHt9KVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goNTQzMilcblx0XHRcdFx0LnRvLnRocm93KClcblx0XHRcdFxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLmJhdGNoKFtdKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHRleHBlY3QgKCktPiBEb20uYmF0Y2goWzEyXSkuYXBwZW5kKERvbS5kaXYoKSlcblx0XHRcdFx0LnRvLnRocm93KClcblx0XHRcdFxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLmJhdGNoKFsxMl0pXG5cdFx0XHRcdC5ub3QudG8udGhyb3coKVxuXHRcdFx0XG5cdFx0XHQjIGV4cGVjdCAoKS0+IERvbS5iYXRjaCgkKCdkaXYnKSlcblx0XHRcdCMgXHQubm90LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLnRlbXBsYXRlKClcblx0XHRcdFx0LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLnRlbXBsYXRlKG51bGwpXG5cdFx0XHRcdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCAoKS0+IERvbS50ZW1wbGF0ZSh7fSlcblx0XHRcdFx0LnRvLnRocm93KClcblxuXHRcdFx0ZXhwZWN0ICgpLT4gRG9tLnRlbXBsYXRlKFs4NDgyLCB7Y2xhc3NOYW1lOid0J31dKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUoWydkaXYnLCAnc29tZVN0cmluZyddKVxuXHRcdFx0XHQudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20udGVtcGxhdGUoWydkaXYnLCBudWxsLCAnU29tZSBJbm5lciBUZXh0J10pXG5cdFx0XHRcdC5ub3QudG8udGhyb3coKVxuXG5cdFx0XHRleHBlY3QgKCktPiBEb20uZGl2KHN0eWxlOntvcGFjaXR5OjAuNSwgJ0BhYmMobWF4LXdpZHRoOjM5MCknOntvcGFjaXR5OjF9fSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFx0Lm5vdC50by50aHJvdygpXG5cblx0XHRcdGV4cGVjdCgoKS0+XG5cdFx0XHRcdGRpdiA9IERvbS5kaXYoKVxuXHRcdFx0XHRkaXYucGlwZVN0YXRlKGRpdilcblx0XHRcdFx0ZGl2LnN0YXRlICdoYXBweScsIG9uXG5cdFx0XHRcdGV4cGVjdChkaXYuc3RhdGUgJ2hhcHB5JykudG8uZXF1YWwgb25cblx0XHRcdCkubm90LnRvLnRocm93KClcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbkhUTUxFbGVtZW50OjpvbkV2ZW50ID0gKGV2ZW50TmFtZSwgY2FsbGJhY2spLT5cblx0aWYgQGFkZEV2ZW50TGlzdGVuZXJcblx0XHRAYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKVxuXHRlbHNlXG5cdFx0QGF0dGFjaEV2ZW50KFwib24je2V2ZW50TmFtZX1cIiwgY2FsbGJhY2spXG5cblxuSFRNTEVsZW1lbnQ6OnJlbW92ZUV2ZW50ID0gKGV2ZW50TmFtZSwgY2FsbGJhY2spLT5cblx0aWYgQHJlbW92ZUV2ZW50TGlzdGVuZXJcblx0XHRAcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKVxuXHRlbHNlXG5cdFx0QGRldGFjaEV2ZW50KFwib24je2V2ZW50TmFtZX1cIiwgY2FsbGJhY2spXG5cblxuSFRNTEVsZW1lbnQ6OmVtaXRFdmVudCA9IChldmVudE5hbWUpLT5cblx0ZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKVxuXHRldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLCB0cnVlLCBmYWxzZSlcblx0QGRpc3BhdGNoRXZlbnQoZXZlbnQpXG5cblxuaWYgSFRNTEVsZW1lbnQubmFtZSBpc250ICdIVE1MRWxlbWVudCdcblx0SFRNTEVsZW1lbnQubmFtZSA9ICdIVE1MRWxlbWVudCdcblx0VGV4dC5uYW1lID0gJ1RleHQnXG5cdG5vbkVsZW1lbnRTdWZmaXggPSBbXG5cdFx0J09wdGlvbnNDb2xsZWN0aW9uJ1xuXHRcdCdGb3JtQ29udHJvbHNDb2xsZWN0aW9uJ1xuXHRcdCdEb2N1bWVudCdcblx0XHQnQ29sbGVjdGlvbidcblx0XHQnQWxsQ29sbGVjdGlvbidcblx0XVxuXHRlbGVtZW50U3VmZml4ID0gW1xuXHRcdFwiVmlkZW9cIixcIlVua25vd25cIixcIlVMaXN0XCIsXCJUcmFja1wiLFwiVGl0bGVcIixcblx0XHRcIlRleHRBcmVhXCIsXCJUZW1wbGF0ZVwiLFwiVGFibGVTZWN0aW9uXCIsXCJUYWJsZVJvd1wiLFxuXHRcdFwiVGFibGVcIixcIlRhYmxlQ29sXCIsXCJUYWJsZUNlbGxcIixcIlRhYmxlQ2FwdGlvblwiLFxuXHRcdFwiU3R5bGVcIixcIlNwYW5cIixcIlNvdXJjZVwiLFwiU2xvdFwiLFwiU2hhZG93XCIsXCJTZWxlY3RcIixcblx0XHRcIlNjcmlwdFwiLFwiUXVvdGVcIixcIlByb2dyZXNzXCIsXCJQcmVcIixcIlBpY3R1cmVcIixcblx0XHRcIlBhcmFtXCIsXCJQYXJhZ3JhcGhcIixcIk91dHB1dFwiLFwiT3B0aW9uXCIsXCJPcHRHcm91cFwiLFxuXHRcdFwiT2JqZWN0XCIsXCJPTGlzdFwiLFwiTW9kXCIsXCJNZXRlclwiLFwiTWV0YVwiLFwiTWVudVwiLFxuXHRcdFwiTWVkaWFcIixcIk1hcnF1ZWVcIixcIk1hcFwiLFwiTGlua1wiLFwiTGVnZW5kXCIsXCJMYWJlbFwiLFxuXHRcdFwiTElcIixcIklucHV0XCIsXCJJbWFnZVwiLFwiSUZyYW1lXCIsXCJIdG1sXCIsXCJIZWFkaW5nXCIsXG5cdFx0XCJIZWFkXCIsXCJIUlwiLFwiRnJhbWVTZXRcIixcIkZyYW1lXCIsXCJGb3JtXCIsXCJGb250XCIsXG5cdFx0XCJGaWVsZFNldFwiLFwiRW1iZWRcIixcIkRpdlwiLFwiRGlyZWN0b3J5XCIsXCJEaWFsb2dcIixcblx0XHRcIkRldGFpbHNcIixcIkRhdGFMaXN0XCIsXCJETGlzdFwiLFwiQ29udGVudFwiLFwiQ2FudmFzXCIsXG5cdFx0XCJCdXR0b25cIixcIkJvZHlcIixcIkJhc2VcIixcIkJSXCIsXCJBdWRpb1wiLFwiQXJlYVwiLFwiQW5jaG9yXCJcblx0XVxuXG5cdGZvciBjcmVhdG9yIGluIG5vbkVsZW1lbnRTdWZmaXhcblx0XHR3aW5kb3dbXCJIVE1MI3tjcmVhdG9yfVwiXT8ubmFtZSA9IFwiSFRNTCN7Y3JlYXRvcn1cIlxuXG5cdGZvciBjcmVhdG9yIGluIGVsZW1lbnRTdWZmaXhcblx0XHR3aW5kb3dbXCJIVE1MI3tjcmVhdG9yfUVsZW1lbnRcIl0/Lm5hbWUgPSBcIkhUTUwje2NyZWF0b3J9RWxlbWVudFwiXG5cblx0d2luZG93LlNWR0VsZW1lbnQ/Lm5hbWUgPSAnU1ZHRWxlbWVudCdcblx0d2luZG93LlNWR1NWR0VsZW1lbnQ/Lm5hbWUgPSAnU1ZHU1ZHRWxlbWVudCdcblx0d2luZG93LlNWR1BvbHlsaW5lRWxlbWVudD8ubmFtZSA9ICdTVkdQb2x5bGluZUVsZW1lbnQnXG5cbndpbmRvdy5DbGllbnRSZWN0ID89IERPTVJlY3RcblxuXG5cblxuIiwie1xuICBcIm5hbWVcIjogXCJxdWlja2RvbVwiLFxuICBcInZlcnNpb25cIjogXCIxLjAuODhcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkZhc3QgJiBsaWdodCBET00gZWxlbWVudCBtYW5hZ2VtZW50IHN1cHBvcnRpbmcganF1ZXJ5LWxpa2UgbWV0aG9kcywgdGVtcGxhdGVzLCAmIHN0YXRlLWJhc2VkIHN0eWxpbmdcIixcbiAgXCJtYWluXCI6IFwiZGlzdC9xdWlja2RvbS5qc1wiLFxuICBcImJyb3dzZXJcIjoge1xuICAgIFwiLi9kZWJ1Z1wiOiBcImRpc3QvcXVpY2tkb20uZGVidWcuanNcIixcbiAgICBcIi4vZGlzdC9xdWlja2RvbS5qc1wiOiBcInNyYy9pbmRleC5jb2ZmZWVcIlxuICB9LFxuICBcImJyb3dzZXJpZnlcIjoge1xuICAgIFwidHJhbnNmb3JtXCI6IFtcbiAgICAgIFwic2ltcGx5aW1wb3J0L2NvbXBhdFwiXG4gICAgXVxuICB9LFxuICBcInNpbXBseWltcG9ydFwiOiB7XG4gICAgXCJmaW5hbFRyYW5zZm9ybVwiOiBbXG4gICAgICBbXG4gICAgICAgIFwiYmFiZWxpZnlcIixcbiAgICAgICAge1xuICAgICAgICAgIFwicHJlc2V0c1wiOiBbXG4gICAgICAgICAgICBbXCJAYmFiZWwvcHJlc2V0LWVudlwiLCB7XCJtb2R1bGVzXCI6ZmFsc2V9XVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiLmNvbmZpZy90cmFuc2Zvcm1zL21pbmlmeS1zdXBlclwiLFxuICAgICAgXCIuY29uZmlnL3RyYW5zZm9ybXMvbWluaWZ5LXJlbmFtZVwiLFxuICAgICAgXCIuY29uZmlnL3RyYW5zZm9ybXMvbWluaWZ5LXNpbXBsZVwiXG4gICAgXVxuICB9LFxuICBcImRpcmVjdG9yaWVzXCI6IHtcbiAgICBcInRlc3RcIjogXCJ0ZXN0XCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInBvc3R2ZXJzaW9uXCI6IFwibnBtIHJ1biBidWlsZCAmJiBnaXQgYWRkIC4gJiYgZ2l0IGNvbW1pdCAtYSAtbSAnW0J1aWxkXSdcIixcbiAgICBcInByZXB1Ymxpc2hPbmx5XCI6IFwibnBtIHJ1biB0ZXN0OnRyYXZpc1wiLFxuICAgIFwicG9zdHB1Ymxpc2hcIjogXCJnaXQgcHVzaFwiLFxuICAgIFwid2F0Y2hcIjogXCJjYWtlIC1kIHdhdGNoXCIsXG4gICAgXCJidWlsZFwiOiBcImNha2UgLWQgYnVpbGQgJiYgY2FrZSBidWlsZCAmJiBjYWtlIG1lYXN1cmUgJiYgY3AgLXIgYnVpbGQvKiBkaXN0L1wiLFxuICAgIFwidGVzdFwiOiBcIm5wbSBydW4gdGVzdDpicm93c2VyIC1zIHx8IHRydWVcIixcbiAgICBcInRlc3Q6dHJhdmlzXCI6IFwibnBtIHJ1biB0ZXN0OmJyb3dzZXIgLXMgJiYgbnBtIHJ1biB0ZXN0Om1pbmlmaWVkIC1zXCIsXG4gICAgXCJ0ZXN0OmxvY2FsXCI6IFwib3BlbiB0ZXN0L3Rlc3RydW5uZXIuaHRtbFwiLFxuICAgIFwidGVzdDptaW5pZmllZFwiOiBcIm1pbmlmaWVkPTEgbnBtIHJ1biB0ZXN0OmJyb3dzZXIgLXMgfHwgdHJ1ZVwiLFxuICAgIFwidGVzdDprYXJtYVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAgIGthcm1hIHN0YXJ0IC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6YnJvd3NlclwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyBrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW4gLS1icm93c2VycyBFbGVjdHJvbiAuY29uZmlnL2thcm1hLmNvbmYuY29mZmVlXCIsXG4gICAgXCJ0ZXN0OmNocm9tZVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAga2FybWEgc3RhcnQgLS1zaW5nbGUtcnVuIC0tYnJvd3NlcnMgQ2hyb21lIC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6ZmlyZWZveFwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyBrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW4gLS1icm93c2VycyBGaXJlZm94IC5jb25maWcva2FybWEuY29uZi5jb2ZmZWVcIixcbiAgICBcInRlc3Q6c2FmYXJpXCI6IFwiY2FrZSBpbnN0YWxsOnRlc3Q7ICBrYXJtYSBzdGFydCAtLXNpbmdsZS1ydW4gLS1icm93c2VycyBTYWZhcmkgLmNvbmZpZy9rYXJtYS5jb25mLmNvZmZlZVwiLFxuICAgIFwidGVzdDpzYXVjZVwiOiBcImNha2UgaW5zdGFsbDp0ZXN0OyAgIHNhdWNlPTEga2FybWEgc3RhcnQgLmNvbmZpZy9rYXJtYS5jb25mLmNvZmZlZVwiLFxuICAgIFwiY292ZXJhZ2VcIjogXCJjYWtlIGluc3RhbGw6Y292ZXJhZ2U7IG5wbSBydW4gY292ZXJhZ2U6cnVuICYmIG5wbSBydW4gY292ZXJhZ2U6YmFkZ2VcIixcbiAgICBcImNvdmVyYWdlOnJ1blwiOiBcImNvdmVyYWdlPXRydWUgbnBtIHJ1biB0ZXN0OmVsZWN0cm9uXCIsXG4gICAgXCJjb3ZlcmFnZTpiYWRnZVwiOiBcImJhZGdlLWdlbiAtZCAuLy5jb25maWcvYmFkZ2VzL2NvdmVyYWdlXCIsXG4gICAgXCJjb3ZlcmFnZTpzaG93XCI6IFwib3BlbiBjb3ZlcmFnZS9sY292LXJlcG9ydC9pbmRleC5odG1sXCJcbiAgfSxcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsa2FsZW4vcXVpY2tkb20uZ2l0XCJcbiAgfSxcbiAgXCJhdXRob3JcIjogXCJkYW5pZWxrYWxlblwiLFxuICBcImxpY2Vuc2VcIjogXCJJU0NcIixcbiAgXCJidWdzXCI6IHtcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxrYWxlbi9xdWlja2RvbS9pc3N1ZXNcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbGthbGVuL3F1aWNrZG9tI3JlYWRtZVwiLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAZGFuaWVsa2FsZW4vaXNcIjogXCJeMi4wLjBcIixcbiAgICBcInF1aWNrY3NzXCI6IFwiXjEuMy40XCIsXG4gICAgXCJzbWFydC1leHRlbmRcIjogXCJeMS43LjNcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJibHVlYmlyZFwiOiBcIl4zLjUuMFwiLFxuICAgIFwiY2hhbGtcIjogXCJeMi4wLjFcIixcbiAgICBcImNvZmZlZS1zY3JpcHRcIjogXCJeMS4xMi42XCIsXG4gICAgXCJleGVjYVwiOiBcIl4wLjcuMFwiLFxuICAgIFwiZnMtamV0cGFja1wiOiBcIl4wLjEzLjNcIixcbiAgICBcInByb21pc2UtYnJlYWtcIjogXCJeMC4xLjJcIixcbiAgICBcInNlbXZlclwiOiBcIl41LjMuMFwiXG4gIH1cbn1cbiIsIm9yaWdEZXNjcmlwdG9ycyA9IFxuXHQnaW5uZXJXaWR0aCc6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LCAnaW5uZXJXaWR0aCcpXG5cdCdpbm5lckhlaWdodCc6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LCAnaW5uZXJIZWlnaHQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyAoKS0+XG5cdG92ZXJ3cml0dGVuID0gZmFsc2Vcblx0Y3VycmVudCA9IHdpZHRoOndpbmRvdy5pbm5lcldpZHRoLCBoZWlnaHQ6d2luZG93LmlubmVySGVpZ2h0XG5cdFxuXHRnZXRSZWFsID0gKGRpbWVuc2lvbiktPlxuXHRcdGRpbWVuc2lvbiA9ICdpbm5lcicrZGltZW5zaW9uLnJlcGxhY2UgL1xcYi4vLCAobGV0dGVyKS0+IGxldHRlci50b1VwcGVyQ2FzZSgpXG5cdFx0b3JpZ0Rlc2NyaXB0b3JzW2RpbWVuc2lvbl0uZ2V0LmNhbGwod2luZG93KVxuXG5cdG92ZXJ3cml0ZSA9ICgpLT4gdW5sZXNzIG92ZXJ3cml0dGVuXG5cdFx0b3ZlcndyaXR0ZW4gPSB0cnVlXG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5IHdpbmRvdywgJ2lubmVyV2lkdGgnLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRnZXQ6ICgpLT4gY3VycmVudC53aWR0aFxuXHRcdFx0c2V0OiAobmV3VmFsdWUpLT4gY3VycmVudC53aWR0aCA9IG5ld1ZhbHVlXG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5IHdpbmRvdywgJ2lubmVySGVpZ2h0Jyxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0Z2V0OiAoKS0+IGN1cnJlbnQuaGVpZ2h0XG5cdFx0XHRzZXQ6IChuZXdWYWx1ZSktPiBjdXJyZW50LmhlaWdodCA9IG5ld1ZhbHVlXG5cdFxuXG5cdEBzaW11bGF0ZSA9ICh3aWR0aCwgaGVpZ2h0KS0+XG5cdFx0Y3VycmVudC53aWR0aCA9IHdpZHRoIGlmIHdpZHRoXG5cdFx0Y3VycmVudC5oZWlnaHQgPSBoZWlnaHQgaWYgaGVpZ2h0XG5cdFx0XG5cdFx0b3ZlcndyaXRlKClcblx0XHRldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpXG5cdFx0ZXZlbnQuaW5pdEV2ZW50KCdyZXNpemUnLCB0cnVlLCBmYWxzZSlcblx0XHR3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudClcblxuXG5cdEByZXN0b3JlID0gKCktPlxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB3aW5kb3csICdpbm5lcldpZHRoJywgb3JpZ0Rlc2NyaXB0b3JzLmlubmVyV2lkdGhcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkgd2luZG93LCAnaW5uZXJIZWlnaHQnLCBvcmlnRGVzY3JpcHRvcnMuaW5uZXJIZWlnaHRcblxuXG5cdHJldHVybiBAIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9jaGFpJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNoYWlTdHlsZVxuXG5mdW5jdGlvbiBjaGFpU3R5bGUoY2hhaSwgdXRpbHMpIHtcbiAgY29uc3Qge0Fzc2VydGlvbn0gPSBjaGFpXG4gIGNvbnN0IHtmbGFnfSA9IHV0aWxzXG4gIGxldCBzYW1wbGVEaXYsIHNhbXBsZVN0eWxlLCBzYW1wbGVJZnJhbWVcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzdHlsZScsIGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSA9ICcnKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVxuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpXG5cbiAgICBjb25zdCBpc05vbkNvbG9ycyA9IHN0eWxlW3Byb3BlcnR5XSA9PT0gJ3JnYmEoMCwgMCwgMCwgMCknIC8vIHdlYmtpdFxuICAgICAgfHwgc3R5bGVbcHJvcGVydHldID09PSAndHJhbnNwYXJlbnQnIC8vIGZpcmVmb3hcblxuICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBpc05vbkNvbG9yc1xuICAgICAgPyAnJ1xuICAgICAgOiBzdHlsZVtwcm9wZXJ0eV1cblxuICAgIGNvbnN0IGFzc2VydGlvbiA9IHZhbHVlXG4gICAgICA/IGNvbXBhcmVDU1NWYWx1ZShwcm9wZXJ0eVZhbHVlLCB2YWx1ZSlcbiAgICAgIDogQm9vbGVhbihwcm9wZXJ0eVZhbHVlKVxuXG4gICAgY29uc3QgZWxlbWVudFRhZyA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICBjb25zdCB0aHJvd01lc3NhZ2UgPSBgZXhwZWN0ICR7ZWxlbWVudFRhZ30gdG8gaGF2ZSB7JHtwcm9wZXJ0eX06ICR7dmFsdWV9fSwgaXMgcmVjZWl2aW5nIHske3Byb3BlcnR5fTogJHtwcm9wZXJ0eVZhbHVlfX1gXG4gICAgY29uc3QgdGhyb3dNZXNzYWdlTmVnYXRpdmUgPSBgZXhwZWN0ICR7ZWxlbWVudFRhZ30gdG8gbm90IGhhdmUgeyR7cHJvcGVydHl9OiAke3ZhbHVlfX0sIGlzIHJlY2VpdmluZyB7JHtwcm9wZXJ0eX06ICR7cHJvcGVydHlWYWx1ZX19YFxuXG4gICAgdGhpcy5hc3NlcnQoYXNzZXJ0aW9uLCB0aHJvd01lc3NhZ2UsIHRocm93TWVzc2FnZU5lZ2F0aXZlLCB2YWx1ZSlcblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVDU1NWYWx1ZShjb21wdXRlZCwgZXhwZWN0ZWQpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5SGlmZW5DYXNlID0gcHJvcGVydHkucmVwbGFjZSgvW0EtWl0vZywgKG1hdGNoKSA9PiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpKVxuICAgICAgaWYgKCFzYW1wbGVEaXYpIHtcbiAgICAgICAgc2FtcGxlSWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJylcbiAgICAgICAgc2FtcGxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgc2FtcGxlU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzYW1wbGVEaXYpXG5cbiAgICAgICAgc2FtcGxlSWZyYW1lLmFwcGVuZENoaWxkKHNhbXBsZURpdilcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzYW1wbGVJZnJhbWUpXG4gICAgICB9XG4gICAgICBzYW1wbGVEaXYuc3R5bGUuZm9udFNpemUgPSBzdHlsZS5mb250U2l6ZVxuICAgICAgc2FtcGxlRGl2LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5SGlmZW5DYXNlLCBleHBlY3RlZCwgJ2ltcG9ydGFudCcpXG4gICAgICBjb25zdCB2YWx1ZSA9IHNhbXBsZVN0eWxlW3Byb3BlcnR5XVxuXG4gICAgICBjb25zdCBoYXNBdXRvVmFsdWUgPSB2YWx1ZS5pbmNsdWRlcygnYXV0bycpXG4gICAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4cCh2YWx1ZSkucmVwbGFjZSgvYXV0by9nLCAnKFxcXFxkKyguXFxcXGQrKT9weHxhdXRvKScpKVxuICAgICAgc2FtcGxlRGl2LnN0eWxlLmZvbnRTaXplID0gbnVsbFxuICAgICAgc2FtcGxlRGl2LnN0eWxlW3Byb3BlcnR5SGlmZW5DYXNlXSA9IG51bGxcblxuICAgICAgcmV0dXJuIGhhc0F1dG9WYWx1ZVxuICAgICAgICA/IHJlZy50ZXN0KGNvbXB1dGVkKVxuICAgICAgICA6IGNvbXB1dGVkID09PSB2YWx1ZVxuICAgIH1cbiAgfSlcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmVnRXhwLmVzY2FwZS9ibG9iL21hc3Rlci9wb2x5ZmlsbC5qc1xuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHZhbHVlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkucmVwbGFjZSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKVxufVxuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIHVzZWQgPSBbXTtcblxuLyohXG4gKiBDaGFpIHZlcnNpb25cbiAqL1xuXG5leHBvcnRzLnZlcnNpb24gPSAnNC4xLjInO1xuXG4vKiFcbiAqIEFzc2VydGlvbiBFcnJvclxuICovXG5cbmV4cG9ydHMuQXNzZXJ0aW9uRXJyb3IgPSByZXF1aXJlKCdhc3NlcnRpb24tZXJyb3InKTtcblxuLyohXG4gKiBVdGlscyBmb3IgcGx1Z2lucyAobm90IGV4cG9ydGVkKVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi9jaGFpL3V0aWxzJyk7XG5cbi8qKlxuICogIyAudXNlKGZ1bmN0aW9uKVxuICpcbiAqIFByb3ZpZGVzIGEgd2F5IHRvIGV4dGVuZCB0aGUgaW50ZXJuYWxzIG9mIENoYWkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn1cbiAqIEByZXR1cm5zIHt0aGlzfSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy51c2UgPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYgKCF+dXNlZC5pbmRleE9mKGZuKSkge1xuICAgIGZuKGV4cG9ydHMsIHV0aWwpO1xuICAgIHVzZWQucHVzaChmbik7XG4gIH1cblxuICByZXR1cm4gZXhwb3J0cztcbn07XG5cbi8qIVxuICogVXRpbGl0eSBGdW5jdGlvbnNcbiAqL1xuXG5leHBvcnRzLnV0aWwgPSB1dGlsO1xuXG4vKiFcbiAqIENvbmZpZ3VyYXRpb25cbiAqL1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jaGFpL2NvbmZpZycpO1xuZXhwb3J0cy5jb25maWcgPSBjb25maWc7XG5cbi8qIVxuICogUHJpbWFyeSBgQXNzZXJ0aW9uYCBwcm90b3R5cGVcbiAqL1xuXG52YXIgYXNzZXJ0aW9uID0gcmVxdWlyZSgnLi9jaGFpL2Fzc2VydGlvbicpO1xuZXhwb3J0cy51c2UoYXNzZXJ0aW9uKTtcblxuLyohXG4gKiBDb3JlIEFzc2VydGlvbnNcbiAqL1xuXG52YXIgY29yZSA9IHJlcXVpcmUoJy4vY2hhaS9jb3JlL2Fzc2VydGlvbnMnKTtcbmV4cG9ydHMudXNlKGNvcmUpO1xuXG4vKiFcbiAqIEV4cGVjdCBpbnRlcmZhY2VcbiAqL1xuXG52YXIgZXhwZWN0ID0gcmVxdWlyZSgnLi9jaGFpL2ludGVyZmFjZS9leHBlY3QnKTtcbmV4cG9ydHMudXNlKGV4cGVjdCk7XG5cbi8qIVxuICogU2hvdWxkIGludGVyZmFjZVxuICovXG5cbnZhciBzaG91bGQgPSByZXF1aXJlKCcuL2NoYWkvaW50ZXJmYWNlL3Nob3VsZCcpO1xuZXhwb3J0cy51c2Uoc2hvdWxkKTtcblxuLyohXG4gKiBBc3NlcnQgaW50ZXJmYWNlXG4gKi9cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJy4vY2hhaS9pbnRlcmZhY2UvYXNzZXJ0Jyk7XG5leHBvcnRzLnVzZShhc3NlcnQpO1xuIiwiLyohXG4gKiBhc3NlcnRpb24tZXJyb3JcbiAqIENvcHlyaWdodChjKSAyMDEzIEpha2UgTHVlciA8amFrZUBxdWFsaWFuY3kuY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHdpbGwgY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIG9uZSBvYmplY3QgdG8gYW5vdGhlciBleGNsdWRpbmcgYW55IG9yaWdpbmFsbHlcbiAqIGxpc3RlZC4gUmV0dXJuZWQgZnVuY3Rpb24gd2lsbCBjcmVhdGUgYSBuZXcgYHt9YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhjbHVkZWQgcHJvcGVydGllcyAuLi5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5cbmZ1bmN0aW9uIGV4Y2x1ZGUgKCkge1xuICB2YXIgZXhjbHVkZXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgZnVuY3Rpb24gZXhjbHVkZVByb3BzIChyZXMsIG9iaikge1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoIX5leGNsdWRlcy5pbmRleE9mKGtleSkpIHJlc1trZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kRXhjbHVkZSAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgICwgaSA9IDBcbiAgICAgICwgcmVzID0ge307XG5cbiAgICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4Y2x1ZGVQcm9wcyhyZXMsIGFyZ3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG59O1xuXG4vKiFcbiAqIFByaW1hcnkgRXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0aW9uRXJyb3I7XG5cbi8qKlxuICogIyMjIEFzc2VydGlvbkVycm9yXG4gKlxuICogQW4gZXh0ZW5zaW9uIG9mIHRoZSBKYXZhU2NyaXB0IGBFcnJvcmAgY29uc3RydWN0b3IgZm9yXG4gKiBhc3NlcnRpb24gYW5kIHZhbGlkYXRpb24gc2NlbmFyaW9zLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyB0byBpbmNsdWRlIChvcHRpb25hbClcbiAqIEBwYXJhbSB7Y2FsbGVlfSBzdGFydCBzdGFjayBmdW5jdGlvbiAob3B0aW9uYWwpXG4gKi9cblxuZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3IgKG1lc3NhZ2UsIF9wcm9wcywgc3NmKSB7XG4gIHZhciBleHRlbmQgPSBleGNsdWRlKCduYW1lJywgJ21lc3NhZ2UnLCAnc3RhY2snLCAnY29uc3RydWN0b3InLCAndG9KU09OJylcbiAgICAsIHByb3BzID0gZXh0ZW5kKF9wcm9wcyB8fCB7fSk7XG5cbiAgLy8gZGVmYXVsdCB2YWx1ZXNcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCAnVW5zcGVjaWZpZWQgQXNzZXJ0aW9uRXJyb3InO1xuICB0aGlzLnNob3dEaWZmID0gZmFsc2U7XG5cbiAgLy8gY29weSBmcm9tIHByb3BlcnRpZXNcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdGhpc1trZXldID0gcHJvcHNba2V5XTtcbiAgfVxuXG4gIC8vIGNhcHR1cmUgc3RhY2sgdHJhY2VcbiAgc3NmID0gc3NmIHx8IGFyZ3VtZW50cy5jYWxsZWU7XG4gIGlmIChzc2YgJiYgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBzc2YpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrO1xuICAgIH1cbiAgfVxufVxuXG4vKiFcbiAqIEluaGVyaXQgZnJvbSBFcnJvci5wcm90b3R5cGVcbiAqL1xuXG5Bc3NlcnRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5cbi8qIVxuICogU3RhdGljYWxseSBzZXQgbmFtZVxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcblxuLyohXG4gKiBFbnN1cmUgY29ycmVjdCBjb25zdHJ1Y3RvclxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFzc2VydGlvbkVycm9yO1xuXG4vKipcbiAqIEFsbG93IGVycm9ycyB0byBiZSBjb252ZXJ0ZWQgdG8gSlNPTiBmb3Igc3RhdGljIHRyYW5zZmVyLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5jbHVkZSBzdGFjayAoZGVmYXVsdDogYHRydWVgKVxuICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgdGhhdCBjYW4gYmUgYEpTT04uc3RyaW5naWZ5YFxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoc3RhY2spIHtcbiAgdmFyIGV4dGVuZCA9IGV4Y2x1ZGUoJ2NvbnN0cnVjdG9yJywgJ3RvSlNPTicsICdzdGFjaycpXG4gICAgLCBwcm9wcyA9IGV4dGVuZCh7IG5hbWU6IHRoaXMubmFtZSB9LCB0aGlzKTtcblxuICAvLyBpbmNsdWRlIHN0YWNrIGlmIGV4aXN0cyBhbmQgbm90IHR1cm5lZCBvZmZcbiAgaWYgKGZhbHNlICE9PSBzdGFjayAmJiB0aGlzLnN0YWNrKSB7XG4gICAgcHJvcHMuc3RhY2sgPSB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIERlcGVuZGVuY2llcyB0aGF0IGFyZSB1c2VkIGZvciBtdWx0aXBsZSBleHBvcnRzIGFyZSByZXF1aXJlZCBoZXJlIG9ubHkgb25jZVxuICovXG5cbnZhciBwYXRodmFsID0gcmVxdWlyZSgncGF0aHZhbCcpO1xuXG4vKiFcbiAqIHRlc3QgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMudGVzdCA9IHJlcXVpcmUoJy4vdGVzdCcpO1xuXG4vKiFcbiAqIHR5cGUgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMudHlwZSA9IHJlcXVpcmUoJ3R5cGUtZGV0ZWN0Jyk7XG5cbi8qIVxuICogZXhwZWN0VHlwZXMgdXRpbGl0eVxuICovXG5leHBvcnRzLmV4cGVjdFR5cGVzID0gcmVxdWlyZSgnLi9leHBlY3RUeXBlcycpO1xuXG4vKiFcbiAqIG1lc3NhZ2UgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZ2V0TWVzc2FnZSA9IHJlcXVpcmUoJy4vZ2V0TWVzc2FnZScpO1xuXG4vKiFcbiAqIGFjdHVhbCB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5nZXRBY3R1YWwgPSByZXF1aXJlKCcuL2dldEFjdHVhbCcpO1xuXG4vKiFcbiAqIEluc3BlY3QgdXRpbFxuICovXG5cbmV4cG9ydHMuaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpO1xuXG4vKiFcbiAqIE9iamVjdCBEaXNwbGF5IHV0aWxcbiAqL1xuXG5leHBvcnRzLm9iakRpc3BsYXkgPSByZXF1aXJlKCcuL29iakRpc3BsYXknKTtcblxuLyohXG4gKiBGbGFnIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLmZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcblxuLyohXG4gKiBGbGFnIHRyYW5zZmVycmluZyB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy50cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qIVxuICogRGVlcCBlcXVhbCB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5lcWwgPSByZXF1aXJlKCdkZWVwLWVxbCcpO1xuXG4vKiFcbiAqIERlZXAgcGF0aCBpbmZvXG4gKi9cblxuZXhwb3J0cy5nZXRQYXRoSW5mbyA9IHBhdGh2YWwuZ2V0UGF0aEluZm87XG5cbi8qIVxuICogQ2hlY2sgaWYgYSBwcm9wZXJ0eSBleGlzdHNcbiAqL1xuXG5leHBvcnRzLmhhc1Byb3BlcnR5ID0gcGF0aHZhbC5oYXNQcm9wZXJ0eTtcblxuLyohXG4gKiBGdW5jdGlvbiBuYW1lXG4gKi9cblxuZXhwb3J0cy5nZXROYW1lID0gcmVxdWlyZSgnZ2V0LWZ1bmMtbmFtZScpO1xuXG4vKiFcbiAqIGFkZCBQcm9wZXJ0eVxuICovXG5cbmV4cG9ydHMuYWRkUHJvcGVydHkgPSByZXF1aXJlKCcuL2FkZFByb3BlcnR5Jyk7XG5cbi8qIVxuICogYWRkIE1ldGhvZFxuICovXG5cbmV4cG9ydHMuYWRkTWV0aG9kID0gcmVxdWlyZSgnLi9hZGRNZXRob2QnKTtcblxuLyohXG4gKiBvdmVyd3JpdGUgUHJvcGVydHlcbiAqL1xuXG5leHBvcnRzLm92ZXJ3cml0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9vdmVyd3JpdGVQcm9wZXJ0eScpO1xuXG4vKiFcbiAqIG92ZXJ3cml0ZSBNZXRob2RcbiAqL1xuXG5leHBvcnRzLm92ZXJ3cml0ZU1ldGhvZCA9IHJlcXVpcmUoJy4vb3ZlcndyaXRlTWV0aG9kJyk7XG5cbi8qIVxuICogQWRkIGEgY2hhaW5hYmxlIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuYWRkQ2hhaW5hYmxlTWV0aG9kID0gcmVxdWlyZSgnLi9hZGRDaGFpbmFibGVNZXRob2QnKTtcblxuLyohXG4gKiBPdmVyd3JpdGUgY2hhaW5hYmxlIG1ldGhvZFxuICovXG5cbmV4cG9ydHMub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kID0gcmVxdWlyZSgnLi9vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QnKTtcblxuLyohXG4gKiBDb21wYXJlIGJ5IGluc3BlY3QgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5jb21wYXJlQnlJbnNwZWN0ID0gcmVxdWlyZSgnLi9jb21wYXJlQnlJbnNwZWN0Jyk7XG5cbi8qIVxuICogR2V0IG93biBlbnVtZXJhYmxlIHByb3BlcnR5IHN5bWJvbHMgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzID0gcmVxdWlyZSgnLi9nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzJyk7XG5cbi8qIVxuICogR2V0IG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMnKTtcblxuLyohXG4gKiBDaGVja3MgZXJyb3IgYWdhaW5zdCBhIGdpdmVuIHNldCBvZiBjcml0ZXJpYVxuICovXG5cbmV4cG9ydHMuY2hlY2tFcnJvciA9IHJlcXVpcmUoJ2NoZWNrLWVycm9yJyk7XG5cbi8qIVxuICogUHJveGlmeSB1dGlsXG4gKi9cblxuZXhwb3J0cy5wcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG5cbi8qIVxuICogYWRkTGVuZ3RoR3VhcmQgdXRpbFxuICovXG5cbmV4cG9ydHMuYWRkTGVuZ3RoR3VhcmQgPSByZXF1aXJlKCcuL2FkZExlbmd0aEd1YXJkJyk7XG5cbi8qIVxuICogaXNQcm94eUVuYWJsZWQgaGVscGVyXG4gKi9cblxuZXhwb3J0cy5pc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcblxuLyohXG4gKiBpc05hTiBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmlzTmFOID0gcmVxdWlyZSgnLi9pc05hTicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqICMjIyBjb25maWcuaW5jbHVkZVN0YWNrXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBpbmZsdWVuY2VzIHdoZXRoZXIgc3RhY2sgdHJhY2VcbiAgICogaXMgaW5jbHVkZWQgaW4gQXNzZXJ0aW9uIGVycm9yIG1lc3NhZ2UuIERlZmF1bHQgb2YgZmFsc2VcbiAgICogc3VwcHJlc3NlcyBzdGFjayB0cmFjZSBpbiB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICpcbiAgICogICAgIGNoYWkuY29uZmlnLmluY2x1ZGVTdGFjayA9IHRydWU7ICAvLyBlbmFibGUgc3RhY2sgb24gZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBpbmNsdWRlU3RhY2s6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnNob3dEaWZmXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBpbmZsdWVuY2VzIHdoZXRoZXIgb3Igbm90XG4gICAqIHRoZSBgc2hvd0RpZmZgIGZsYWcgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSB0aHJvd25cbiAgICogQXNzZXJ0aW9uRXJyb3JzLiBgZmFsc2VgIHdpbGwgYWx3YXlzIGJlIGBmYWxzZWA7IGB0cnVlYFxuICAgKiB3aWxsIGJlIHRydWUgd2hlbiB0aGUgYXNzZXJ0aW9uIGhhcyByZXF1ZXN0ZWQgYSBkaWZmXG4gICAqIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHNob3dEaWZmOiB0cnVlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnRydW5jYXRlVGhyZXNob2xkXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBzZXRzIGxlbmd0aCB0aHJlc2hvbGQgZm9yIGFjdHVhbCBhbmRcbiAgICogZXhwZWN0ZWQgdmFsdWVzIGluIGFzc2VydGlvbiBlcnJvcnMuIElmIHRoaXMgdGhyZXNob2xkIGlzIGV4Y2VlZGVkLCBmb3JcbiAgICogZXhhbXBsZSBmb3IgbGFyZ2UgZGF0YSBzdHJ1Y3R1cmVzLCB0aGUgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBzb21ldGhpbmdcbiAgICogbGlrZSBgWyBBcnJheSgzKSBdYCBvciBgeyBPYmplY3QgKHByb3AxLCBwcm9wMikgfWAuXG4gICAqXG4gICAqIFNldCBpdCB0byB6ZXJvIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgdHJ1bmNhdGluZyBhbHRvZ2V0aGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGVzcGVjaWFsbHkgdXNlcmZ1bCB3aGVuIGRvaW5nIGFzc2VydGlvbnMgb24gYXJyYXlzOiBoYXZpbmcgdGhpc1xuICAgKiBzZXQgdG8gYSByZWFzb25hYmxlIGxhcmdlIHZhbHVlIG1ha2VzIHRoZSBmYWlsdXJlIG1lc3NhZ2VzIHJlYWRpbHlcbiAgICogaW5zcGVjdGFibGUuXG4gICAqXG4gICAqICAgICBjaGFpLmNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCA9IDA7ICAvLyBkaXNhYmxlIHRydW5jYXRpbmdcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHRydW5jYXRlVGhyZXNob2xkOiA0MCxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy51c2VQcm94eVxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgZGVmaW5lcyBpZiBjaGFpIHdpbGwgdXNlIGEgUHJveHkgdG8gdGhyb3dcbiAgICogYW4gZXJyb3Igd2hlbiBhIG5vbi1leGlzdGVudCBwcm9wZXJ0eSBpcyByZWFkLCB3aGljaCBwcm90ZWN0cyB1c2Vyc1xuICAgKiBmcm9tIHR5cG9zIHdoZW4gdXNpbmcgcHJvcGVydHktYmFzZWQgYXNzZXJ0aW9ucy5cbiAgICpcbiAgICogU2V0IGl0IHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgdGhpcyBmZWF0dXJlLlxuICAgKlxuICAgKiAgICAgY2hhaS5jb25maWcudXNlUHJveHkgPSBmYWxzZTsgIC8vIGRpc2FibGUgdXNlIG9mIFByb3h5XG4gICAqXG4gICAqIFRoaXMgZmVhdHVyZSBpcyBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIHJlZ2FyZGxlc3Mgb2YgdGhpcyBjb25maWcgdmFsdWVcbiAgICogaW4gZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwcm94aWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHVzZVByb3h5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLnByb3h5RXhjbHVkZWRLZXlzXG4gICAqXG4gICAqIFVzZXIgY29uZmlndXJhYmxlIHByb3BlcnR5LCBkZWZpbmVzIHdoaWNoIHByb3BlcnRpZXMgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICogaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGUgYXNzZXJ0aW9uLlxuICAgKiBUaGlzIGlzIG9ubHkgYXBwbGllZCBpZiB0aGUgZW52aXJvbm1lbnQgQ2hhaSBpcyBydW5uaW5nIGluIHN1cHBvcnRzIHByb3hpZXMgYW5kXG4gICAqIGlmIHRoZSBgdXNlUHJveHlgIGNvbmZpZ3VyYXRpb24gc2V0dGluZyBpcyBlbmFibGVkLlxuICAgKiBCeSBkZWZhdWx0LCBgdGhlbmAgYW5kIGBpbnNwZWN0YCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGVcbiAgICogYXNzZXJ0aW9uIG9iamVjdCBiZWNhdXNlIHRoZSBgLmluc3BlY3RgIHByb3BlcnR5IGlzIHJlYWQgYnkgYHV0aWwuaW5zcGVjdGAgKGZvciBleGFtcGxlLCB3aGVuXG4gICAqIHVzaW5nIGBjb25zb2xlLmxvZ2Agb24gdGhlIGFzc2VydGlvbiBvYmplY3QpIGFuZCBgLnRoZW5gIGlzIG5lY2Vzc2FyeSBmb3IgcHJvbWlzZSB0eXBlLWNoZWNraW5nLlxuICAgKlxuICAgKiAgICAgLy8gQnkgZGVmYXVsdCB0aGVzZSBrZXlzIHdpbGwgbm90IHRocm93IGFuIGVycm9yIGlmIHRoZXkgZG8gbm90IGV4aXN0IG9uIHRoZSBhc3NlcnRpb24gb2JqZWN0XG4gICAqICAgICBjaGFpLmNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5cyA9IFsndGhlbicsICdpbnNwZWN0J107XG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIHByb3h5RXhjbHVkZWRLZXlzOiBbJ3RoZW4nLCAnaW5zcGVjdCcsICd0b0pTT04nXVxufTtcbiIsIi8qIVxuICogY2hhaVxuICogaHR0cDovL2NoYWlqcy5jb21cbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX2NoYWksIHV0aWwpIHtcbiAgLyohXG4gICAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gICAqL1xuXG4gIHZhciBBc3NlcnRpb25FcnJvciA9IF9jaGFpLkFzc2VydGlvbkVycm9yXG4gICAgLCBmbGFnID0gdXRpbC5mbGFnO1xuXG4gIC8qIVxuICAgKiBNb2R1bGUgZXhwb3J0LlxuICAgKi9cblxuICBfY2hhaS5Bc3NlcnRpb24gPSBBc3NlcnRpb247XG5cbiAgLyohXG4gICAqIEFzc2VydGlvbiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBDcmVhdGVzIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqXG4gICAqIGBBc3NlcnRpb25gIG9iamVjdHMgY29udGFpbiBtZXRhZGF0YSBpbiB0aGUgZm9ybSBvZiBmbGFncy4gVGhyZWUgZmxhZ3MgY2FuXG4gICAqIGJlIGFzc2lnbmVkIGR1cmluZyBpbnN0YW50aWF0aW9uIGJ5IHBhc3NpbmcgYXJndW1lbnRzIHRvIHRoaXMgY29uc3RydWN0b3I6XG4gICAqXG4gICAqIC0gYG9iamVjdGA6IFRoaXMgZmxhZyBjb250YWlucyB0aGUgdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb24uIEZvciBleGFtcGxlLCBpblxuICAgKiAgIHRoZSBhc3NlcnRpb24gYGV4cGVjdChudW1LaXR0ZW5zKS50by5lcXVhbCg3KTtgLCB0aGUgYG9iamVjdGAgZmxhZyB3aWxsXG4gICAqICAgY29udGFpbiBgbnVtS2l0dGVuc2Agc28gdGhhdCB0aGUgYGVxdWFsYCBhc3NlcnRpb24gY2FuIHJlZmVyZW5jZSBpdCB3aGVuXG4gICAqICAgbmVlZGVkLlxuICAgKlxuICAgKiAtIGBtZXNzYWdlYDogVGhpcyBmbGFnIGNvbnRhaW5zIGFuIG9wdGlvbmFsIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvIGJlXG4gICAqICAgcHJlcGVuZGVkIHRvIHRoZSBlcnJvciBtZXNzYWdlIHRoYXQncyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2VydGlvbiB3aGVuIGl0XG4gICAqICAgZmFpbHMuXG4gICAqXG4gICAqIC0gYHNzZmlgOiBUaGlzIGZsYWcgc3RhbmRzIGZvciBcInN0YXJ0IHN0YWNrIGZ1bmN0aW9uIGluZGljYXRvclwiLiBJdFxuICAgKiAgIGNvbnRhaW5zIGEgZnVuY3Rpb24gcmVmZXJlbmNlIHRoYXQgc2VydmVzIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3JcbiAgICogICByZW1vdmluZyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGVycm9yIHRoYXQncyBjcmVhdGVkIGJ5IHRoZVxuICAgKiAgIGFzc2VydGlvbiB3aGVuIGl0IGZhaWxzLiBUaGUgZ29hbCBpcyB0byBwcm92aWRlIGEgY2xlYW5lciBzdGFjayB0cmFjZSB0b1xuICAgKiAgIGVuZCB1c2VycyBieSByZW1vdmluZyBDaGFpJ3MgaW50ZXJuYWwgZnVuY3Rpb25zLiBOb3RlIHRoYXQgaXQgb25seSB3b3Jrc1xuICAgKiAgIGluIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgYEVycm9yLmNhcHR1cmVTdGFja1RyYWNlYCwgYW5kIG9ubHkgd2hlblxuICAgKiAgIGBDaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2tgIGhhc24ndCBiZWVuIHNldCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAtIGBsb2NrU3NmaWA6IFRoaXMgZmxhZyBjb250cm9scyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYHNzZmlgIGZsYWdcbiAgICogICBzaG91bGQgcmV0YWluIGl0cyBjdXJyZW50IHZhbHVlLCBldmVuIGFzIGFzc2VydGlvbnMgYXJlIGNoYWluZWQgb2ZmIG9mXG4gICAqICAgdGhpcyBvYmplY3QuIFRoaXMgaXMgdXN1YWxseSBzZXQgdG8gYHRydWVgIHdoZW4gY3JlYXRpbmcgYSBuZXcgYXNzZXJ0aW9uXG4gICAqICAgZnJvbSB3aXRoaW4gYW5vdGhlciBhc3NlcnRpb24uIEl0J3MgYWxzbyB0ZW1wb3JhcmlseSBzZXQgdG8gYHRydWVgIGJlZm9yZVxuICAgKiAgIGFuIG92ZXJ3cml0dGVuIGFzc2VydGlvbiBnZXRzIGNhbGxlZCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBvYmogdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyAob3B0aW9uYWwpIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNzZmkgKG9wdGlvbmFsKSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3Zpbmcgc3RhY2sgZnJhbWVzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9ja1NzZmkgKG9wdGlvbmFsKSB3aGV0aGVyIG9yIG5vdCB0aGUgc3NmaSBmbGFnIGlzIGxvY2tlZFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgZnVuY3Rpb24gQXNzZXJ0aW9uIChvYmosIG1zZywgc3NmaSwgbG9ja1NzZmkpIHtcbiAgICBmbGFnKHRoaXMsICdzc2ZpJywgc3NmaSB8fCBBc3NlcnRpb24pO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgbG9ja1NzZmkpO1xuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIG9iaik7XG4gICAgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICByZXR1cm4gdXRpbC5wcm94aWZ5KHRoaXMpO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzc2VydGlvbiwgJ2luY2x1ZGVTdGFjaycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uaW5jbHVkZVN0YWNrIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgaW5zdGVhZC4nKTtcbiAgICAgIHJldHVybiBjb25maWcuaW5jbHVkZVN0YWNrO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uaW5jbHVkZVN0YWNrIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgaW5zdGVhZC4nKTtcbiAgICAgIGNvbmZpZy5pbmNsdWRlU3RhY2sgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24sICdzaG93RGlmZicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uc2hvd0RpZmYgaXMgZGVwcmVjYXRlZCwgdXNlIGNoYWkuY29uZmlnLnNob3dEaWZmIGluc3RlYWQuJyk7XG4gICAgICByZXR1cm4gY29uZmlnLnNob3dEaWZmO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgY29uc29sZS53YXJuKCdBc3NlcnRpb24uc2hvd0RpZmYgaXMgZGVwcmVjYXRlZCwgdXNlIGNoYWkuY29uZmlnLnNob3dEaWZmIGluc3RlYWQuJyk7XG4gICAgICBjb25maWcuc2hvd0RpZmYgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwuYWRkUHJvcGVydHkodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdXRpbC5hZGRNZXRob2QodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kID0gZnVuY3Rpb24gKG5hbWUsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKSB7XG4gICAgdXRpbC5hZGRDaGFpbmFibGVNZXRob2QodGhpcy5wcm90b3R5cGUsIG5hbWUsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKTtcbiAgfTtcblxuICBBc3NlcnRpb24ub3ZlcndyaXRlUHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLm92ZXJ3cml0ZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwub3ZlcndyaXRlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcikge1xuICAgIHV0aWwub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuYXNzZXJ0KGV4cHJlc3Npb24sIG1lc3NhZ2UsIG5lZ2F0ZU1lc3NhZ2UsIGV4cGVjdGVkLCBhY3R1YWwsIHNob3dEaWZmKVxuICAgKlxuICAgKiBFeGVjdXRlcyBhbiBleHByZXNzaW9uIGFuZCBjaGVjayBleHBlY3RhdGlvbnMuIFRocm93cyBBc3NlcnRpb25FcnJvciBmb3IgcmVwb3J0aW5nIGlmIHRlc3QgZG9lc24ndCBwYXNzLlxuICAgKlxuICAgKiBAbmFtZSBhc3NlcnRcbiAgICogQHBhcmFtIHtQaGlsb3NvcGhpY2FsfSBleHByZXNzaW9uIHRvIGJlIHRlc3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gbWVzc2FnZSBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgbWVzc2FnZSB0byBkaXNwbGF5IGlmIGV4cHJlc3Npb24gZmFpbHNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IG5lZ2F0ZWRNZXNzYWdlIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBuZWdhdGVkTWVzc2FnZSB0byBkaXNwbGF5IGlmIG5lZ2F0ZWQgZXhwcmVzc2lvbiBmYWlsc1xuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZCB2YWx1ZSAocmVtZW1iZXIgdG8gY2hlY2sgZm9yIG5lZ2F0aW9uKVxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWwgKG9wdGlvbmFsKSB3aWxsIGRlZmF1bHQgdG8gYHRoaXMub2JqYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dEaWZmIChvcHRpb25hbCkgd2hlbiBzZXQgdG8gYHRydWVgLCBhc3NlcnQgd2lsbCBkaXNwbGF5IGEgZGlmZiBpbiBhZGRpdGlvbiB0byB0aGUgbWVzc2FnZSBpZiBleHByZXNzaW9uIGZhaWxzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cblxuICBBc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCA9IGZ1bmN0aW9uIChleHByLCBtc2csIG5lZ2F0ZU1zZywgZXhwZWN0ZWQsIF9hY3R1YWwsIHNob3dEaWZmKSB7XG4gICAgdmFyIG9rID0gdXRpbC50ZXN0KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGZhbHNlICE9PSBzaG93RGlmZikgc2hvd0RpZmYgPSB0cnVlO1xuICAgIGlmICh1bmRlZmluZWQgPT09IGV4cGVjdGVkICYmIHVuZGVmaW5lZCA9PT0gX2FjdHVhbCkgc2hvd0RpZmYgPSBmYWxzZTtcbiAgICBpZiAodHJ1ZSAhPT0gY29uZmlnLnNob3dEaWZmKSBzaG93RGlmZiA9IGZhbHNlO1xuXG4gICAgaWYgKCFvaykge1xuICAgICAgbXNnID0gdXRpbC5nZXRNZXNzYWdlKHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYWN0dWFsID0gdXRpbC5nZXRBY3R1YWwodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtc2csIHtcbiAgICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAsIHNob3dEaWZmOiBzaG93RGlmZlxuICAgICAgfSwgKGNvbmZpZy5pbmNsdWRlU3RhY2spID8gdGhpcy5hc3NlcnQgOiBmbGFnKHRoaXMsICdzc2ZpJykpO1xuICAgIH1cbiAgfTtcblxuICAvKiFcbiAgICogIyMjIC5fb2JqXG4gICAqXG4gICAqIFF1aWNrIHJlZmVyZW5jZSB0byBzdG9yZWQgYGFjdHVhbGAgdmFsdWUgZm9yIHBsdWdpbiBkZXZlbG9wZXJzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFzc2VydGlvbi5wcm90b3R5cGUsICdfb2JqJyxcbiAgICB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgLCBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgdmFsKTtcbiAgICAgIH1cbiAgfSk7XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBodHRwOi8vY2hhaWpzLmNvbVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIF8pIHtcbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uXG4gICAgLCBBc3NlcnRpb25FcnJvciA9IGNoYWkuQXNzZXJ0aW9uRXJyb3JcbiAgICAsIGZsYWcgPSBfLmZsYWc7XG5cbiAgLyoqXG4gICAqICMjIyBMYW5ndWFnZSBDaGFpbnNcbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBhcmUgcHJvdmlkZWQgYXMgY2hhaW5hYmxlIGdldHRlcnMgdG8gaW1wcm92ZSB0aGUgcmVhZGFiaWxpdHlcbiAgICogb2YgeW91ciBhc3NlcnRpb25zLlxuICAgKlxuICAgKiAqKkNoYWlucyoqXG4gICAqXG4gICAqIC0gdG9cbiAgICogLSBiZVxuICAgKiAtIGJlZW5cbiAgICogLSBpc1xuICAgKiAtIHRoYXRcbiAgICogLSB3aGljaFxuICAgKiAtIGFuZFxuICAgKiAtIGhhc1xuICAgKiAtIGhhdmVcbiAgICogLSB3aXRoXG4gICAqIC0gYXRcbiAgICogLSBvZlxuICAgKiAtIHNhbWVcbiAgICogLSBidXRcbiAgICogLSBkb2VzXG4gICAqXG4gICAqIEBuYW1lIGxhbmd1YWdlIGNoYWluc1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBbICd0bycsICdiZScsICdiZWVuJ1xuICAsICdpcycsICdhbmQnLCAnaGFzJywgJ2hhdmUnXG4gICwgJ3dpdGgnLCAndGhhdCcsICd3aGljaCcsICdhdCdcbiAgLCAnb2YnLCAnc2FtZScsICdidXQnLCAnZG9lcycgXS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFpbikge1xuICAgIEFzc2VydGlvbi5hZGRQcm9wZXJ0eShjaGFpbik7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFxuICAgKlxuICAgKiBOZWdhdGVzIGFsbCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogICAgIGV4cGVjdChmdW5jdGlvbiAoKSB7fSkudG8ubm90LnRocm93KCk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYicpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5kb2VzLm5vdC5pbmNsdWRlKDMpO1xuICAgKlxuICAgKiBKdXN0IGJlY2F1c2UgeW91IGNhbiBuZWdhdGUgYW55IGFzc2VydGlvbiB3aXRoIGAubm90YCBkb2Vzbid0IG1lYW4geW91XG4gICAqIHNob3VsZC4gV2l0aCBncmVhdCBwb3dlciBjb21lcyBncmVhdCByZXNwb25zaWJpbGl0eS4gSXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IHRoZSBvbmUgZXhwZWN0ZWQgb3V0cHV0IHdhcyBwcm9kdWNlZCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nXG4gICAqIHRoYXQgb25lIG9mIGNvdW50bGVzcyB1bmV4cGVjdGVkIG91dHB1dHMgd2Fzbid0IHByb2R1Y2VkLiBTZWUgaW5kaXZpZHVhbFxuICAgKiBhc3NlcnRpb25zIGZvciBzcGVjaWZpYyBndWlkYW5jZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5ub3QuZXF1YWwoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBAbmFtZSBub3RcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdub3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnbmVnYXRlJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLmVxdWFsYCwgYC5pbmNsdWRlYCwgYC5tZW1iZXJzYCwgYC5rZXlzYCwgYW5kIGAucHJvcGVydHlgXG4gICAqIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQgb2Ygc3RyaWN0XG4gICAqIChgPT09YCkgZXF1YWxpdHkuIFNlZSB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXBcbiAgICogZXF1YWxpdHkgYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFscyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZGVlcC5lcXVhbCh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmVxdWFsKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5kZWVwLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmluY2x1ZGUoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5kZWVwLmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgbWVtYmVyIGB7YTogMX1gXG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLmhhdmUuZGVlcC5tZW1iZXJzKFt7YTogMX1dKTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmhhdmUubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgc2V0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIGtleSBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoW3thOiAxfV0pKS50by5oYXZlLmRlZXAua2V5cyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLm5vdC5oYXZlLmtleXMoW3thOiAxfV0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBwcm9wZXJ0eSBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgneCcsIHthOiAxfSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdkZWVwJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2RlZXAnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkXG4gICAqXG4gICAqIEVuYWJsZXMgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBpbiBhbGwgYC5wcm9wZXJ0eWAgYW5kIGAuaW5jbHVkZWBcbiAgICogYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nKTtcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8ubmVzdGVkLmluY2x1ZGUoeydhLmJbMV0nOiAneSd9KTtcbiAgICpcbiAgICogSWYgYC5gIG9yIGBbXWAgYXJlIHBhcnQgb2YgYW4gYWN0dWFsIHByb3BlcnR5IG5hbWUsIHRoZXkgY2FuIGJlIGVzY2FwZWQgYnlcbiAgICogYWRkaW5nIHR3byBiYWNrc2xhc2hlcyBiZWZvcmUgdGhlbS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAneCd9fSkudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ1xcXFwuYS5cXFxcW2JcXFxcXScpO1xuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6ICd4J319KS50by5uZXN0ZWQuaW5jbHVkZSh7J1xcXFwuYS5cXFxcW2JcXFxcXSc6ICd4J30pO1xuICAgKlxuICAgKiBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggYC5vd25gLlxuICAgKlxuICAgKiBAbmFtZSBuZXN0ZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCduZXN0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnbmVzdGVkJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAucHJvcGVydHlgIGFuZCBgLmluY2x1ZGVgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluXG4gICAqIHRvIGlnbm9yZSBpbmhlcml0ZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIE9iamVjdC5wcm90b3R5cGUuYiA9IDI7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93bi5wcm9wZXJ0eSgnYScpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicpLmJ1dC5ub3Qub3duLnByb3BlcnR5KCdiJyk7IFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ub3duLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUoe2I6IDJ9KS5idXQubm90Lm93bi5pbmNsdWRlKHtiOiAyfSk7XG4gICAqXG4gICAqIGAub3duYCBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBgLm5lc3RlZGAuXG4gICAqXG4gICAqIEBuYW1lIG93blxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ293bicsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdvd24nLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAub3JkZXJlZFxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAubWVtYmVyc2AgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gcmVxdWlyZSB0aGF0XG4gICAqIG1lbWJlcnMgYmUgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5oYXZlLm9yZGVyZWQubWVtYmVycyhbMSwgMl0pXG4gICAqICAgICAgIC5idXQubm90LmhhdmUub3JkZXJlZC5tZW1iZXJzKFsyLCAxXSk7XG4gICAqXG4gICAqIFdoZW4gYC5pbmNsdWRlYCBhbmQgYC5vcmRlcmVkYCBhcmUgY29tYmluZWQsIHRoZSBvcmRlcmluZyBiZWdpbnMgYXQgdGhlXG4gICAqIHN0YXJ0IG9mIGJvdGggYXJyYXlzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDJdKVxuICAgKiAgICAgICAuYnV0Lm5vdC5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhbMiwgM10pO1xuICAgKlxuICAgKiBAbmFtZSBvcmRlcmVkXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnb3JkZXJlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdvcmRlcmVkJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmFueVxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAua2V5c2AgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gb25seSByZXF1aXJlIHRoYXRcbiAgICogdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy4gVGhpcyBpcyB0aGUgb3Bwb3NpdGUgb2ZcbiAgICogYC5hbGxgLCB3aGljaCByZXF1aXJlcyB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhbGwgb2YgdGhlIGdpdmVuIGtleXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqIFNlZSB0aGUgYC5rZXlzYCBkb2MgZm9yIGd1aWRhbmNlIG9uIHdoZW4gdG8gdXNlIGAuYW55YCBvciBgLmFsbGAuXG4gICAqXG4gICAqIEBuYW1lIGFueVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2FueScsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdhbnknLCB0cnVlKTtcbiAgICBmbGFnKHRoaXMsICdhbGwnLCBmYWxzZSk7XG4gIH0pO1xuXG5cbiAgLyoqXG4gICAqICMjIyAuYWxsXG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlXG4gICAqIHRhcmdldCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW4ga2V5cy4gVGhpcyBpcyB0aGUgb3Bwb3NpdGUgb2YgYC5hbnlgLCB3aGljaFxuICAgKiBvbmx5IHJlcXVpcmVzIHRoYXQgdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYC5hbGxgIGlzIHVzZWQgYnkgZGVmYXVsdCB3aGVuIG5laXRoZXIgYC5hbGxgIG5vciBgLmFueWAgYXJlXG4gICAqIGFkZGVkIGVhcmxpZXIgaW4gdGhlIGNoYWluLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYWRkIGAuYWxsYCBhbnl3YXlcbiAgICogYmVjYXVzZSBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eS5cbiAgICpcbiAgICogU2VlIHRoZSBgLmtleXNgIGRvYyBmb3IgZ3VpZGFuY2Ugb24gd2hlbiB0byB1c2UgYC5hbnlgIG9yIGAuYWxsYC5cbiAgICpcbiAgICogQG5hbWUgYWxsXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnYWxsJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2FsbCcsIHRydWUpO1xuICAgIGZsYWcodGhpcywgJ2FueScsIGZhbHNlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYSh0eXBlWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQncyB0eXBlIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBzdHJpbmcgYHR5cGVgLiBUeXBlc1xuICAgKiBhcmUgY2FzZSBpbnNlbnNpdGl2ZS4gU2VlIHRoZSBgdHlwZS1kZXRlY3RgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGVcbiAgICogdHlwZSBkZXRlY3Rpb24gYWxnb3JpdGhtOiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL3R5cGUtZGV0ZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5hKCdudWxsJyk7XG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS5hbigndW5kZWZpbmVkJyk7XG4gICAqICAgICBleHBlY3QobmV3IEVycm9yKS50by5iZS5hbignZXJyb3InKTtcbiAgICogICAgIGV4cGVjdChQcm9taXNlLnJlc29sdmUoKSkudG8uYmUuYSgncHJvbWlzZScpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBGbG9hdDMyQXJyYXkpLnRvLmJlLmEoJ2Zsb2F0MzJhcnJheScpO1xuICAgKiAgICAgZXhwZWN0KFN5bWJvbCgpKS50by5iZS5hKCdzeW1ib2wnKTtcbiAgICpcbiAgICogYC5hYCBzdXBwb3J0cyBvYmplY3RzIHRoYXQgaGF2ZSBhIGN1c3RvbSB0eXBlIHNldCB2aWEgYFN5bWJvbC50b1N0cmluZ1RhZ2AuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7XG4gICAqICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnbXlDdXN0b21UeXBlJ1xuICAgKiAgICAgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChteU9iaikudG8uYmUuYSgnbXlDdXN0b21UeXBlJykuYnV0Lm5vdC5hbignb2JqZWN0Jyk7XG4gICAqXG4gICAqIEl0J3Mgb2Z0ZW4gYmVzdCB0byB1c2UgYC5hYCB0byBjaGVjayBhIHRhcmdldCdzIHR5cGUgYmVmb3JlIG1ha2luZyBtb3JlXG4gICAqIGFzc2VydGlvbnMgb24gdGhlIHNhbWUgdGFyZ2V0LiBUaGF0IHdheSwgeW91IGF2b2lkIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZnJvbVxuICAgKiBhbnkgYXNzZXJ0aW9uIHRoYXQgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pbmNsdWRlcygyKTtcbiAgICogICAgIGV4cGVjdChbXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pcy5lbXB0eTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5hYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgdGhlIGV4cGVjdGVkIHR5cGUsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0XG4gICAqIGlzbid0IG9uZSBvZiBtYW55IHVuZXhwZWN0ZWQgdHlwZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmJlLmEoJ3N0cmluZycpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5ub3QuYmUuYW4oJ2FycmF5Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmFgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSB0b1xuICAgKiBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZFxuICAgKiBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hKCdzdHJpbmcnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgKlxuICAgKiBgLmFgIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBsYW5ndWFnZSBjaGFpbiB0byBpbXByb3ZlIHRoZSByZWFkYWJpbGl0eSBvZlxuICAgKiB5b3VyIGFzc2VydGlvbnMuIFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8uaGF2ZS5hLnByb3BlcnR5KCdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmFgLlxuICAgKlxuICAgKiBAbmFtZSBhXG4gICAqIEBhbGlhcyBhblxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYW4gKHR5cGUsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGFydGljbGUgPSB+WyAnYScsICdlJywgJ2knLCAnbycsICd1JyBdLmluZGV4T2YodHlwZS5jaGFyQXQoMCkpID8gJ2FuICcgOiAnYSAnO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHR5cGUgPT09IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgJyArIGFydGljbGUgKyB0eXBlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSAnICsgYXJ0aWNsZSArIHR5cGVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnYW4nLCBhbik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2EnLCBhbik7XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZSh2YWxbLCBtc2ddKVxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBzdHJpbmcsIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBzdHJpbmcgYHZhbGBcbiAgICogaXMgYSBzdWJzdHJpbmcgb2YgdGhlIHRhcmdldC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8uaW5jbHVkZSgnZm9vJyk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhbiBhcnJheSwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGB2YWxgIGlzIGFcbiAgICogbWVtYmVyIG9mIHRoZSB0YXJnZXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlKDIpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0LCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gb2JqZWN0XG4gICAqIGB2YWxgJ3MgcHJvcGVydGllcyBhcmUgYSBzdWJzZXQgb2YgdGhlIHRhcmdldCdzIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlKHthOiAxLCBiOiAyfSk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIFNldCBvciBXZWFrU2V0LCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYHZhbGAgaXMgYVxuICAgKiBtZW1iZXIgb2YgdGhlIHRhcmdldC4gU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0gaXMgdXNlZC5cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyXSkpLnRvLmluY2x1ZGUoMik7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIE1hcCwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGB2YWxgIGlzIG9uZSBvZlxuICAgKiB0aGUgdmFsdWVzIG9mIHRoZSB0YXJnZXQuIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtIGlzIHVzZWQuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IE1hcChbWydhJywgMV0sIFsnYicsIDJdXSkpLnRvLmluY2x1ZGUoMik7XG4gICAqXG4gICAqIEJlY2F1c2UgYC5pbmNsdWRlYCBkb2VzIGRpZmZlcmVudCB0aGluZ3MgYmFzZWQgb24gdGhlIHRhcmdldCdzIHR5cGUsIGl0J3NcbiAgICogaW1wb3J0YW50IHRvIGNoZWNrIHRoZSB0YXJnZXQncyB0eXBlIGJlZm9yZSB1c2luZyBgLmluY2x1ZGVgLiBTZWUgdGhlIGAuYWBcbiAgICogZG9jIGZvciBpbmZvIG9uIHRlc3RpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uYmUuYW4oJ2FycmF5JykudGhhdC5pbmNsdWRlcygyKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkgaXMgdXNlZCB0byBjb21wYXJlIGFycmF5IG1lbWJlcnMgYW5kXG4gICAqIG9iamVjdCBwcm9wZXJ0aWVzLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eVxuICAgKiBpbnN0ZWFkIChXZWFrU2V0IHRhcmdldHMgYXJlIG5vdCBzdXBwb3J0ZWQpLiBTZWUgdGhlIGBkZWVwLWVxbGAgcHJvamVjdFxuICAgKiBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGluY2x1ZGVzIGB7YTogMX1gXG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLmRlZXAuaW5jbHVkZSh7YTogMX0pO1xuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5ub3QuaW5jbHVkZSh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGluY2x1ZGVzIGB4OiB7YTogMX1gXG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLmRlZXAuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLm5vdC5pbmNsdWRlKHt4OiB7YTogMX19KTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYWxsIG9mIHRoZSB0YXJnZXQncyBwcm9wZXJ0aWVzIGFyZSBzZWFyY2hlZCB3aGVuIHdvcmtpbmcgd2l0aFxuICAgKiBvYmplY3RzLiBUaGlzIGluY2x1ZGVzIHByb3BlcnRpZXMgdGhhdCBhcmUgaW5oZXJpdGVkIGFuZC9vciBub24tZW51bWVyYWJsZS5cbiAgICogQWRkIGAub3duYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBleGNsdWRlIHRoZSB0YXJnZXQncyBpbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBmcm9tIHRoZSBzZWFyY2guXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ub3duLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUoe2I6IDJ9KS5idXQubm90Lm93bi5pbmNsdWRlKHtiOiAyfSk7XG4gICAqXG4gICAqIE5vdGUgdGhhdCBhIHRhcmdldCBvYmplY3QgaXMgYWx3YXlzIG9ubHkgc2VhcmNoZWQgZm9yIGB2YWxgJ3Mgb3duXG4gICAqIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICpcbiAgICogYC5kZWVwYCBhbmQgYC5vd25gIGNhbiBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IDJ9fSkudG8uZGVlcC5vd24uaW5jbHVkZSh7YToge2I6IDJ9fSk7XG4gICAqXG4gICAqIEFkZCBgLm5lc3RlZGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZW5hYmxlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gd2hlblxuICAgKiByZWZlcmVuY2luZyBuZXN0ZWQgcHJvcGVydGllcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8ubmVzdGVkLmluY2x1ZGUoeydhLmJbMV0nOiAneSd9KTtcbiAgICpcbiAgICogSWYgYC5gIG9yIGBbXWAgYXJlIHBhcnQgb2YgYW4gYWN0dWFsIHByb3BlcnR5IG5hbWUsIHRoZXkgY2FuIGJlIGVzY2FwZWQgYnlcbiAgICogYWRkaW5nIHR3byBiYWNrc2xhc2hlcyBiZWZvcmUgdGhlbS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAyfX0pLnRvLm5lc3RlZC5pbmNsdWRlKHsnXFxcXC5hLlxcXFxbYlxcXFxdJzogMn0pO1xuICAgKlxuICAgKiBgLmRlZXBgIGFuZCBgLm5lc3RlZGAgY2FuIGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogW3tjOiAzfV19fSkudG8uZGVlcC5uZXN0ZWQuaW5jbHVkZSh7J2EuYlswXSc6IHtjOiAzfX0pO1xuICAgKlxuICAgKiBgLm93bmAgYW5kIGAubmVzdGVkYCBjYW5ub3QgYmUgY29tYmluZWQuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuaW5jbHVkZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm5vdC5pbmNsdWRlKCd0YWNvJyk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaW5jbHVkZSg0KTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLmluY2x1ZGVgIHdoZW4gdGhlIHRhcmdldCBpcyBhbiBvYmplY3QuXG4gICAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zIGJ5IGFzc2VydGluZyB0aGF0IHRoZVxuICAgKiB0YXJnZXQgb2JqZWN0IGRvZXNuJ3QgaGF2ZSBhbGwgb2YgYHZhbGAncyBrZXkvdmFsdWUgcGFpcnMgYnV0IG1heSBvciBtYXlcbiAgICogbm90IGhhdmUgc29tZSBvZiB0aGVtLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3NcbiAgICogZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IG9iamVjdCBpc24ndCBldmVuIGV4cGVjdGVkIHRvIGhhdmUgYHZhbGAncyBrZXlzLCBpdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YzogM30pLnRvLm5vdC5oYXZlLmFueS5rZXlzKCdhJywgJ2InKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YzogM30pLnRvLm5vdC5pbmNsdWRlKHthOiAxLCBiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgb2JqZWN0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYHZhbGAncyBrZXlzLCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IHRoYXQgZWFjaCBvZiB0aGUgcHJvcGVydGllcyBoYXMgaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXIgdGhhblxuICAgKiBhc3NlcnRpbmcgdGhhdCBlYWNoIHByb3BlcnR5IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMywgYjogNH0pLnRvLmluY2x1ZGUoe2E6IDMsIGI6IDR9KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMywgYjogNH0pLnRvLm5vdC5pbmNsdWRlKHthOiAxLCBiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmluY2x1ZGVgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUoNCwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmluY2x1ZGUoNCk7XG4gICAqXG4gICAqIGAuaW5jbHVkZWAgY2FuIGFsc28gYmUgdXNlZCBhcyBhIGxhbmd1YWdlIGNoYWluLCBjYXVzaW5nIGFsbCBgLm1lbWJlcnNgIGFuZFxuICAgKiBgLmtleXNgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhlIHRhcmdldCB0byBiZSBhXG4gICAqIHN1cGVyc2V0IG9mIHRoZSBleHBlY3RlZCBzZXQsIHJhdGhlciB0aGFuIGFuIGlkZW50aWNhbCBzZXQuIE5vdGUgdGhhdFxuICAgKiBgLm1lbWJlcnNgIGlnbm9yZXMgZHVwbGljYXRlcyBpbiB0aGUgc3Vic2V0IHdoZW4gYC5pbmNsdWRlYCBpcyBhZGRlZC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QncyBrZXlzIGFyZSBhIHN1cGVyc2V0IG9mIFsnYScsICdiJ10gYnV0IG5vdCBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLmluY2x1ZGUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyLCBjOiAzfSkudG8ubm90LmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGlzIGEgc3VwZXJzZXQgb2YgWzEsIDJdIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlLm1lbWJlcnMoWzEsIDJdKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLm5vdC5oYXZlLm1lbWJlcnMoWzEsIDJdKTtcbiAgICpcbiAgICogICAgIC8vIER1cGxpY2F0ZXMgaW4gdGhlIHN1YnNldCBhcmUgaWdub3JlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyLCAyLCAyXSk7XG4gICAqXG4gICAqIE5vdGUgdGhhdCBhZGRpbmcgYC5hbnlgIGVhcmxpZXIgaW4gdGhlIGNoYWluIGNhdXNlcyB0aGUgYC5rZXlzYCBhc3NlcnRpb25cbiAgICogdG8gaWdub3JlIGAuaW5jbHVkZWAuXG4gICAqXG4gICAqICAgICAvLyBCb3RoIGFzc2VydGlvbnMgYXJlIGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaW5jbHVkZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogVGhlIGFsaWFzZXMgYC5pbmNsdWRlc2AsIGAuY29udGFpbmAsIGFuZCBgLmNvbnRhaW5zYCBjYW4gYmUgdXNlZFxuICAgKiBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlXG4gICAqIEBhbGlhcyBjb250YWluXG4gICAqIEBhbGlhcyBpbmNsdWRlc1xuICAgKiBAYWxpYXMgY29udGFpbnNcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBTYW1lVmFsdWVaZXJvKGEsIGIpIHtcbiAgICByZXR1cm4gKF8uaXNOYU4oYSkgJiYgXy5pc05hTihiKSkgfHwgYSA9PT0gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yICgpIHtcbiAgICBmbGFnKHRoaXMsICdjb250YWlucycsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5jbHVkZSAodmFsLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICBcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBkZXNjcmlwdG9yID0gaXNEZWVwID8gJ2RlZXAgJyA6ICcnO1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgdmFyIGluY2x1ZGVkID0gZmFsc2U7XG5cbiAgICBzd2l0Y2ggKG9ialR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIGluY2x1ZGVkID0gb2JqLmluZGV4T2YodmFsKSAhPT0gLTE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd3ZWFrc2V0JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICAgIGZsYWdNc2cgKyAndW5hYmxlIHRvIHVzZSAuZGVlcC5pbmNsdWRlIHdpdGggV2Vha1NldCcsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBzc2ZpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY2x1ZGVkID0gb2JqLmhhcyh2YWwpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWFwJzpcbiAgICAgICAgdmFyIGlzRXFsID0gaXNEZWVwID8gXy5lcWwgOiBTYW1lVmFsdWVaZXJvO1xuICAgICAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIGluY2x1ZGVkID0gaW5jbHVkZWQgfHwgaXNFcWwoaXRlbSwgdmFsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZXQnOlxuICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGluY2x1ZGVkID0gaW5jbHVkZWQgfHwgXy5lcWwoaXRlbSwgdmFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IG9iai5oYXModmFsKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IG9iai5pbmRleE9mKHZhbCkgIT09IC0xO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUaGlzIGJsb2NrIGlzIGZvciBhc3NlcnRpbmcgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QuXG4gICAgICAgIC8vIGBfLmV4cGVjdFR5cGVzYCBpc24ndCB1c2VkIGhlcmUgYmVjYXVzZSBgLmluY2x1ZGVgIHNob3VsZCB3b3JrIHdpdGhcbiAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGEgY3VzdG9tIGBAQHRvU3RyaW5nVGFnYC5cbiAgICAgICAgaWYgKHZhbCAhPT0gT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJ29iamVjdCB0ZXN0ZWQgbXVzdCBiZSBhbiBhcnJheSwgYSBtYXAsIGFuIG9iamVjdCwnXG4gICAgICAgICAgICAgICsgJyBhIHNldCwgYSBzdHJpbmcsIG9yIGEgd2Vha3NldCwgYnV0ICcgKyBvYmpUeXBlICsgJyBnaXZlbicsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBzc2ZpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbClcbiAgICAgICAgICAsIGZpcnN0RXJyID0gbnVsbFxuICAgICAgICAgICwgbnVtRXJycyA9IDA7XG4gIFxuICAgICAgICBwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgdmFyIHByb3BBc3NlcnRpb24gPSBuZXcgQXNzZXJ0aW9uKG9iaik7XG4gICAgICAgICAgXy50cmFuc2ZlckZsYWdzKHRoaXMsIHByb3BBc3NlcnRpb24sIHRydWUpO1xuICAgICAgICAgIGZsYWcocHJvcEFzc2VydGlvbiwgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gIFxuICAgICAgICAgIGlmICghbmVnYXRlIHx8IHByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcHJvcEFzc2VydGlvbi5wcm9wZXJ0eShwcm9wLCB2YWxbcHJvcF0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb3BBc3NlcnRpb24ucHJvcGVydHkocHJvcCwgdmFsW3Byb3BdKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmICghXy5jaGVja0Vycm9yLmNvbXBhdGlibGVDb25zdHJ1Y3RvcihlcnIsIEFzc2VydGlvbkVycm9yKSkge1xuICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RFcnIgPT09IG51bGwpIGZpcnN0RXJyID0gZXJyO1xuICAgICAgICAgICAgbnVtRXJycysrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gIFxuICAgICAgICAvLyBXaGVuIHZhbGlkYXRpbmcgLm5vdC5pbmNsdWRlIHdpdGggbXVsdGlwbGUgcHJvcGVydGllcywgd2Ugb25seSB3YW50XG4gICAgICAgIC8vIHRvIHRocm93IGFuIGFzc2VydGlvbiBlcnJvciBpZiBhbGwgb2YgdGhlIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkLFxuICAgICAgICAvLyBpbiB3aGljaCBjYXNlIHdlIHRocm93IHRoZSBmaXJzdCBwcm9wZXJ0eSBhc3NlcnRpb24gZXJyb3IgdGhhdCB3ZVxuICAgICAgICAvLyBlbmNvdW50ZXJlZC5cbiAgICAgICAgaWYgKG5lZ2F0ZSAmJiBwcm9wcy5sZW5ndGggPiAxICYmIG51bUVycnMgPT09IHByb3BzLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IGZpcnN0RXJyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBc3NlcnQgaW5jbHVzaW9uIGluIGNvbGxlY3Rpb24gb3Igc3Vic3RyaW5nIGluIGEgc3RyaW5nLlxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaW5jbHVkZWRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gJyArIGRlc2NyaXB0b3IgKyAnaW5jbHVkZSAnICsgXy5pbnNwZWN0KHZhbClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90ICcgKyBkZXNjcmlwdG9yICsgJ2luY2x1ZGUgJyArIF8uaW5zcGVjdCh2YWwpKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2luY2x1ZGUnLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2NvbnRhaW4nLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2NvbnRhaW5zJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdpbmNsdWRlcycsIGluY2x1ZGUsIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yKTtcblxuICAvKipcbiAgICogIyMjIC5va1xuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBsb29zZWx5IChgPT1gKSBlcXVhbCB0byBgdHJ1ZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgb3IgZGVlcGx5IGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUudHJ1ZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub2tgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDApLnRvLmVxdWFsKDApOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDApLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLmJlLmZhbHNlOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLmJlLm51bGw7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobnVsbCkudG8ubm90LmJlLm9rOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5vaztcbiAgICpcbiAgICogQG5hbWUgb2tcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdvaycsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdHJ1dGh5J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBmYWxzeScpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC50cnVlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYHRydWVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAudHJ1ZWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW4gbm90XG4gICAqIGVxdWFsIHRvIGB0cnVlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8uYmUuZmFsc2U7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLm5vdC5iZS50cnVlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUudHJ1ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS50cnVlO1xuICAgKlxuICAgKiBAbmFtZSB0cnVlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgndHJ1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdHJ1ZSA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdHJ1ZSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc2UnXG4gICAgICAsIGZsYWcodGhpcywgJ25lZ2F0ZScpID8gZmFsc2UgOiB0cnVlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZmFsc2VcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5iZS5mYWxzZTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5mYWxzZWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIGBmYWxzZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUudHJ1ZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5ub3QuYmUuZmFsc2U7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5mYWxzZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QodHJ1ZSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmZhbHNlO1xuICAgKlxuICAgKiBAbmFtZSBmYWxzZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2ZhbHNlJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBmYWxzZSA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc2UnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydWUnXG4gICAgICAsIGZsYWcodGhpcywgJ25lZ2F0ZScpID8gdHJ1ZSA6IGZhbHNlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAubnVsbFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGBudWxsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm51bGxgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgbnVsbGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLm51bGw7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUubnVsbDtcbiAgICpcbiAgICogQG5hbWUgbnVsbFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ251bGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG51bGwgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIG51bGwnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBudWxsJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLnVuZGVmaW5lZFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHVuZGVmaW5lZCkudG8uYmUudW5kZWZpbmVkO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnVuZGVmaW5lZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS51bmRlZmluZWQ7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUudW5kZWZpbmVkO1xuICAgKlxuICAgKiBAbmFtZSB1bmRlZmluZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCd1bmRlZmluZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHVuZGVmaW5lZCA9PT0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgdW5kZWZpbmVkJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgdW5kZWZpbmVkJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLk5hTlxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBleGFjdGx5IGBOYU5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KE5hTikudG8uYmUuTmFOO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLk5hTmAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW4gbm90XG4gICAqIGVxdWFsIHRvIGBOYU5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5lcXVhbCgnZm9vJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5OYU47IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuTmFOO1xuICAgKlxuICAgKiBAbmFtZSBOYU5cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdOYU4nLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIF8uaXNOYU4oZmxhZyh0aGlzLCAnb2JqZWN0JykpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgTmFOJ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBOYU4nXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXhpc3RcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbm90IHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gZWl0aGVyIGBudWxsYCBvclxuICAgKiBgdW5kZWZpbmVkYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG9cbiAgICogaXRzIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmV4aXN0OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgwKS50by5lcXVhbCgwKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgwKS50by5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXhpc3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLmJlLm51bGw7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobnVsbCkudG8ubm90LmV4aXN0OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLm5vdC5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobnVsbCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmV4aXN0O1xuICAgKlxuICAgKiBAbmFtZSBleGlzdFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2V4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgdmFsICE9PSBudWxsICYmIHZhbCAhPT0gdW5kZWZpbmVkXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGV4aXN0J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXhpc3QnXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZW1wdHlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIGFycmF5LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzXG4gICAqIGBsZW5ndGhgIHByb3BlcnR5IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYDBgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFtdKS50by5iZS5lbXB0eTtcbiAgICogICAgIGV4cGVjdCgnJykudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG1hcCBvciBzZXQsIGAuZW1wdHlgIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgYHNpemVgXG4gICAqIHByb3BlcnR5IGlzIHN0cmljdGx5IGVxdWFsIHRvIGAwYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KCkpLnRvLmJlLmVtcHR5O1xuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoKSkudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGAuZW1wdHlgIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0XG4gICAqIGRvZXNuJ3QgaGF2ZSBhbnkgb3duIGVudW1lcmFibGUgcHJvcGVydGllcy4gUHJvcGVydGllcyB3aXRoIFN5bWJvbC1iYXNlZFxuICAgKiBrZXlzIGFyZSBleGNsdWRlZCBmcm9tIHRoZSBjb3VudC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7fSkudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIEJlY2F1c2UgYC5lbXB0eWAgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5lbXB0eWAuIFNlZSB0aGUgYC5hYFxuICAgKiBkb2MgZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3QoW10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaXMuZW1wdHk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZW1wdHlgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBjb250YWlucyBpdHMgZXhwZWN0ZWQgbnVtYmVyIG9mIHZhbHVlcyxcbiAgICogcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgaXQncyBub3QgZW1wdHkuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmJlLmVtcHR5OyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyLCAzXSkpLnRvLmhhdmUucHJvcGVydHkoJ3NpemUnLCAzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsxLCAyLCAzXSkpLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoT2JqZWN0LmtleXMoe2E6IDF9KSkudG8uaGF2ZS5sZW5ndGhPZigxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuZW1wdHk7XG4gICAqXG4gICAqIEBuYW1lIGVtcHR5XG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZW1wdHknLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBpdGVtc0NvdW50O1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gICAgc3dpdGNoIChfLnR5cGUodmFsKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBpdGVtc0NvdW50ID0gdmFsLmxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtYXAnOlxuICAgICAgY2FzZSAnc2V0JzpcbiAgICAgICAgaXRlbXNDb3VudCA9IHZhbC5zaXplO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlYWttYXAnOlxuICAgICAgY2FzZSAnd2Vha3NldCc6XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJy5lbXB0eSB3YXMgcGFzc2VkIGEgd2VhayBjb2xsZWN0aW9uJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgc3NmaVxuICAgICAgICApO1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICB2YXIgbXNnID0gZmxhZ01zZyArICcuZW1wdHkgd2FzIHBhc3NlZCBhIGZ1bmN0aW9uICcgKyBfLmdldE5hbWUodmFsKTtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1zZy50cmltKCksIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodmFsICE9PSBPYmplY3QodmFsKSkge1xuICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICAgIGZsYWdNc2cgKyAnLmVtcHR5IHdhcyBwYXNzZWQgbm9uLXN0cmluZyBwcmltaXRpdmUgJyArIF8uaW5zcGVjdCh2YWwpLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXNDb3VudCA9IE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAwID09PSBpdGVtc0NvdW50XG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGVtcHR5J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgZW1wdHknXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuYXJndW1lbnRzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIHRlc3QgKCkge1xuICAgKiAgICAgICBleHBlY3QoYXJndW1lbnRzKS50by5iZS5hcmd1bWVudHM7XG4gICAqICAgICB9XG4gICAqXG4gICAqICAgICB0ZXN0KCk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYXJndW1lbnRzYC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB3aGljaCB0eXBlIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gYmUsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IGl0cyBub3QgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmFyZ3VtZW50czsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe30sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hcmd1bWVudHM7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLkFyZ3VtZW50c2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5hcmd1bWVudHNgLlxuICAgKlxuICAgKiBAbmFtZSBhcmd1bWVudHNcbiAgICogQGFsaWFzIEFyZ3VtZW50c1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBjaGVja0FyZ3VtZW50cyAoKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHR5cGUgPSBfLnR5cGUob2JqKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgJ0FyZ3VtZW50cycgPT09IHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYXJndW1lbnRzIGJ1dCBnb3QgJyArIHR5cGVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIGFyZ3VtZW50cydcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdhcmd1bWVudHMnLCBjaGVja0FyZ3VtZW50cyk7XG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnQXJndW1lbnRzJywgY2hlY2tBcmd1bWVudHMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmVxdWFsKHZhbFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gdGhlIGdpdmVuIGB2YWxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpO1xuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5lcXVhbCgnZm9vJyk7XG4gICAqIFxuICAgKiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWUgdGhlXG4gICAqIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbHMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmRlZXAuZXF1YWwoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWxzIGBbMSwgMl1gXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5kZWVwLmVxdWFsKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuZXF1YWwoWzEsIDJdKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5lcXVhbGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogbm90IGVxdWFsIHRvIG9uZSBvZiBjb3VudGxlc3MgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmVxdWFsKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5lcXVhbGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uZXF1YWwoMik7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuZXF1YWxzYCBhbmQgYGVxYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmVxdWFsYC5cbiAgICpcbiAgICogQG5hbWUgZXF1YWxcbiAgICogQGFsaWFzIGVxdWFsc1xuICAgKiBAYWxpYXMgZXFcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRFcXVhbCAodmFsLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgaWYgKGZsYWcodGhpcywgJ2RlZXAnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZXFsKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIHZhbCA9PT0gb2JqXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZXF1YWwgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBlcXVhbCAje2V4cH0nXG4gICAgICAgICwgdmFsXG4gICAgICAgICwgdGhpcy5fb2JqXG4gICAgICAgICwgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcXVhbCcsIGFzc2VydEVxdWFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXF1YWxzJywgYXNzZXJ0RXF1YWwpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcScsIGFzc2VydEVxdWFsKTtcblxuICAvKipcbiAgICogIyMjIC5lcWwob2JqWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgb2JqYC4gU2VlIHRoZVxuICAgKiBgZGVlcC1lcWxgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGlzIGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWwgdG8ge2E6IDF9XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5lcWwoe2E6IDF9KS5idXQubm90LmVxdWFsKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgaXMgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbCB0byBbMSwgMl1cbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmVxbChbMSwgMl0pLmJ1dC5ub3QuZXF1YWwoWzEsIDJdKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5lcWxgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBkZWVwbHkgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXJcbiAgICogdGhhbiBub3QgZGVlcGx5IGVxdWFsIHRvIG9uZSBvZiBjb3VudGxlc3MgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5lcWwoe2E6IDF9KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5lcWwoe2I6IDJ9KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuZXFsYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5lcWwoe2I6IDJ9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uZXFsKHtiOiAyfSk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmVxbHNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuZXFsYC5cbiAgICpcbiAgICogVGhlIGAuZGVlcC5lcXVhbGAgYXNzZXJ0aW9uIGlzIGFsbW9zdCBpZGVudGljYWwgdG8gYC5lcWxgIGJ1dCB3aXRoIG9uZVxuICAgKiBkaWZmZXJlbmNlOiBgLmRlZXAuZXF1YWxgIGNhdXNlcyBkZWVwIGVxdWFsaXR5IGNvbXBhcmlzb25zIHRvIGFsc28gYmUgdXNlZFxuICAgKiBmb3IgYW55IG90aGVyIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluLlxuICAgKlxuICAgKiBAbmFtZSBlcWxcbiAgICogQGFsaWFzIGVxbHNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRFcWwob2JqLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgXy5lcWwob2JqLCBmbGFnKHRoaXMsICdvYmplY3QnKSlcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZGVlcGx5IGVxdWFsICN7ZXhwfSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGRlZXBseSBlcXVhbCAje2V4cH0nXG4gICAgICAsIG9ialxuICAgICAgLCB0aGlzLl9vYmpcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcWwnLCBhc3NlcnRFcWwpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdlcWxzJywgYXNzZXJ0RXFsKTtcblxuICAvKipcbiAgICogIyMjIC5hYm92ZShuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS5cbiAgICogSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmFib3ZlKDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZ3JlYXRlciB0aGFuIHRoZSBnaXZlbiBudW1iZXIgYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmFib3ZlKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmFib3ZlKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5hYm92ZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmFib3ZlKDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5hYm92ZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmFib3ZlKDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYWJvdmUoMik7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuZ3RgIGFuZCBgLmdyZWF0ZXJUaGFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLmFib3ZlYC5cbiAgICpcbiAgICogQG5hbWUgYWJvdmVcbiAgICogQGFsaWFzIGd0XG4gICAqIEBhbGlhcyBncmVhdGVyVGhhblxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0QWJvdmUgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYWJvdmUgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYWJvdmUgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA+IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGFib3ZlICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID4gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBtb3N0ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2Fib3ZlJywgYXNzZXJ0QWJvdmUpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdndCcsIGFzc2VydEFib3ZlKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3JlYXRlclRoYW4nLCBhc3NlcnRBYm92ZSk7XG5cbiAgLyoqXG4gICAqICMjIyAubGVhc3QoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIG51bWJlciBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hdC5sZWFzdCgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlclxuICAgKiBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmxlYXN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUuYXQubGVhc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmxlYXN0YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYXQubGVhc3QoMiwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hdC5sZWFzdCgyKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuZ3RlYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmxlYXN0YC5cbiAgICpcbiAgICogQG5hbWUgbGVhc3RcbiAgICogQGFsaWFzIGd0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVhc3QgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBsZWFzdCBtdXN0IGJlIGEgZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChuVHlwZSAhPT0gJ251bWJlcicgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBsZWFzdCBtdXN0IGJlIGEgbnVtYmVyJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgbGVuID49IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGF0IGxlYXN0ICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGJlbG93ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgbGVuXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPj0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IGxlYXN0ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsZWFzdCcsIGFzc2VydExlYXN0KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3RlJywgYXNzZXJ0TGVhc3QpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmJlbG93KG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgbGVzcyB0aGFuIHRoZSBnaXZlbiBudW1iZXIgb3IgZGF0ZSBgbmAgcmVzcGVjdGl2ZWx5LlxuICAgKiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYmVsb3coMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYmVsb3coNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGgoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5iZWxvd2AuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmJlLmJlbG93KDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5iZWxvd2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmJlbG93KDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYmVsb3coMSk7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAubHRgIGFuZCBgLmxlc3NUaGFuYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLmJlbG93YC5cbiAgICpcbiAgICogQG5hbWUgYmVsb3dcbiAgICogQGFsaWFzIGx0XG4gICAqIEBhbGlhcyBsZXNzVGhhblxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0QmVsb3cgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBiZWxvdyBtdXN0IGJlIGEgZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChuVHlwZSAhPT0gJ251bWJlcicgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBiZWxvdyBtdXN0IGJlIGEgbnVtYmVyJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgbGVuIDwgblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSBsZW5ndGggYmVsb3cgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGEgbGVuZ3RoIGJlbG93ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgbGVuXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPCBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYmVsb3cgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IGxlYXN0ICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2JlbG93JywgYXNzZXJ0QmVsb3cpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdsdCcsIGFzc2VydEJlbG93KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbGVzc1RoYW4nLCBhc3NlcnRCZWxvdyk7XG5cbiAgLyoqXG4gICAqICMjIyAubW9zdChuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzXG4gICAqIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0Lm1vc3QoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0Lm1vc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5sZW5ndGhPZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5tb3N0KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5tb3N0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5ub3QuYmUuYXQubW9zdCgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAubW9zdGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmF0Lm1vc3QoMSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDIsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hdC5tb3N0KDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5sdGVgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAubW9zdGAuXG4gICAqXG4gICAqIEBuYW1lIG1vc3RcbiAgICogQGFsaWFzIGx0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TW9zdCAobiwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGRvTGVuZ3RoID0gZmxhZyh0aGlzLCAnZG9MZW5ndGgnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG1zZ1ByZWZpeCA9ICgoZmxhZ01zZykgPyBmbGFnTXNnICsgJzogJyA6ICcnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIG5UeXBlID0gXy50eXBlKG4pLnRvTG93ZXJDYXNlKClcbiAgICAgICwgc2hvdWxkVGhyb3cgPSB0cnVlO1xuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gICAgfVxuICAgIFxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiBuVHlwZSAhPT0gJ2RhdGUnKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBtb3N0IG11c3QgYmUgYSBkYXRlJztcbiAgICB9IGVsc2UgaWYgKG5UeXBlICE9PSAnbnVtYmVyJyAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIG1vc3QgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA8PSBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhdCBtb3N0ICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICAgICwgbGVuXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPD0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGF0IG1vc3QgI3tleHB9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFib3ZlICN7ZXhwfSdcbiAgICAgICAgLCBuXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21vc3QnLCBhc3NlcnRNb3N0KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbHRlJywgYXNzZXJ0TW9zdCk7XG5cbiAgLyoqXG4gICAqICMjIyAud2l0aGluKHN0YXJ0LCBmaW5pc2hbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlblxuICAgKiBudW1iZXIgb3IgZGF0ZSBgc3RhcnRgLCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIgb3IgZGF0ZSBgZmluaXNoYCByZXNwZWN0aXZlbHkuXG4gICAqIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZFxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS53aXRoaW4oMSwgMyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLndpdGhpbigyLCAzKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUud2l0aGluKDEsIDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXJcbiAgICogYHN0YXJ0YCwgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyIGBmaW5pc2hgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLndpdGhpbigyLCA0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi53aXRoaW4oMiwgNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLndpdGhpbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLndpdGhpbigyLCA0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAud2l0aGluYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoNCkudG8uYmUud2l0aGluKDEsIDMsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCg0LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUud2l0aGluKDEsIDMpO1xuICAgKlxuICAgKiBAbmFtZSB3aXRoaW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IGxvd2VyIGJvdW5kIGluY2x1c2l2ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gZmluaXNoIHVwcGVyIGJvdW5kIGluY2x1c2l2ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnd2l0aGluJywgZnVuY3Rpb24gKHN0YXJ0LCBmaW5pc2gsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzdGFydFR5cGUgPSBfLnR5cGUoc3RhcnQpLnRvTG93ZXJDYXNlKClcbiAgICAgICwgZmluaXNoVHlwZSA9IF8udHlwZShmaW5pc2gpLnRvTG93ZXJDYXNlKClcbiAgICAgICwgc2hvdWxkVGhyb3cgPSB0cnVlXG4gICAgICAsIHJhbmdlID0gKHN0YXJ0VHlwZSA9PT0gJ2RhdGUnICYmIGZpbmlzaFR5cGUgPT09ICdkYXRlJylcbiAgICAgICAgICA/IHN0YXJ0LnRvVVRDU3RyaW5nKCkgKyAnLi4nICsgZmluaXNoLnRvVVRDU3RyaW5nKClcbiAgICAgICAgICA6IHN0YXJ0ICsgJy4uJyArIGZpbmlzaDtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cblxuICAgIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgPT09ICdkYXRlJyAmJiAoc3RhcnRUeXBlICE9PSAnZGF0ZScgfHwgZmluaXNoVHlwZSAhPT0gJ2RhdGUnKSkpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnRzIHRvIHdpdGhpbiBtdXN0IGJlIGRhdGVzJztcbiAgICB9IGVsc2UgaWYgKChzdGFydFR5cGUgIT09ICdudW1iZXInIHx8IGZpbmlzaFR5cGUgIT09ICdudW1iZXInKSAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50cyB0byB3aXRoaW4gbXVzdCBiZSBudW1iZXJzJztcbiAgICB9IGVsc2UgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSAhPT0gJ2RhdGUnICYmIG9ialR5cGUgIT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHByaW50T2JqID0gKG9ialR5cGUgPT09ICdzdHJpbmcnKSA/IFwiJ1wiICsgb2JqICsgXCInXCIgOiBvYmo7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAnZXhwZWN0ZWQgJyArIHByaW50T2JqICsgJyB0byBiZSBhIG51bWJlciBvciBhIGRhdGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRUaHJvdyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRUaHJvdykge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGVycm9yTWVzc2FnZSwgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgbGVuID49IHN0YXJ0ICYmIGxlbiA8PSBmaW5pc2hcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCB3aXRoaW4gJyArIHJhbmdlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmogPj0gc3RhcnQgJiYgb2JqIDw9IGZpbmlzaFxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgd2l0aGluICcgKyByYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmluc3RhbmNlb2YoY29uc3RydWN0b3JbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgZ2l2ZW4gYGNvbnN0cnVjdG9yYC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7IH1cbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLmJlLmFuLmluc3RhbmNlb2YoQ2F0KTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluc3RhbmNlb2ZgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgKlxuICAgKiBgLmluc3RhbmNlb2ZgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hbi5pbnN0YW5jZW9mKEFycmF5LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgKlxuICAgKiBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRVM1LCBgLmluc3RhbmNlb2ZgIG1heSBub3QgYWx3YXlzIHdvcmsgYXMgZXhwZWN0ZWRcbiAgICogd2hlbiB1c2luZyBhIHRyYW5zcGlsZXIgc3VjaCBhcyBCYWJlbCBvciBUeXBlU2NyaXB0LiBJbiBwYXJ0aWN1bGFyLCBpdCBtYXlcbiAgICogcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMgd2hlbiBzdWJjbGFzc2luZyBidWlsdC1pbiBvYmplY3Qgc3VjaCBhc1xuICAgKiBgQXJyYXlgLCBgRXJyb3JgLCBhbmQgYE1hcGAuIFNlZSB5b3VyIHRyYW5zcGlsZXIncyBkb2NzIGZvciBkZXRhaWxzOlxuICAgKlxuICAgKiAtIChbQmFiZWxdKGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL3VzYWdlL2NhdmVhdHMvI2NsYXNzZXMpKVxuICAgKiAtIChbVHlwZVNjcmlwdF0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvQnJlYWtpbmctQ2hhbmdlcyNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmspKVxuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5pbnN0YW5jZU9mYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmluc3RhbmNlb2ZgLlxuICAgKlxuICAgKiBAbmFtZSBpbnN0YW5jZW9mXG4gICAqIEBwYXJhbSB7Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAYWxpYXMgaW5zdGFuY2VPZlxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRJbnN0YW5jZU9mIChjb25zdHJ1Y3RvciwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgdGFyZ2V0ID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICB2YXIgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICB2YXIgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgaXNJbnN0YW5jZU9mID0gdGFyZ2V0IGluc3RhbmNlb2YgY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKFxuICAgICAgICAgIGZsYWdNc2cgKyAnVGhlIGluc3RhbmNlb2YgYXNzZXJ0aW9uIG5lZWRzIGEgY29uc3RydWN0b3IgYnV0ICdcbiAgICAgICAgICAgICsgXy50eXBlKGNvbnN0cnVjdG9yKSArICcgd2FzIGdpdmVuLicsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IF8uZ2V0TmFtZShjb25zdHJ1Y3Rvcik7XG4gICAgaWYgKG5hbWUgPT09IG51bGwpIHtcbiAgICAgIG5hbWUgPSAnYW4gdW5uYW1lZCBjb25zdHJ1Y3Rvcic7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGlzSW5zdGFuY2VPZlxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhbiBpbnN0YW5jZSBvZiAnICsgbmFtZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYW4gaW5zdGFuY2Ugb2YgJyArIG5hbWVcbiAgICApO1xuICB9O1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luc3RhbmNlb2YnLCBhc3NlcnRJbnN0YW5jZU9mKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaW5zdGFuY2VPZicsIGFzc2VydEluc3RhbmNlT2YpO1xuXG4gIC8qKlxuICAgKiAjIyMgLnByb3BlcnR5KG5hbWVbLCB2YWxbLCBtc2ddXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnKTtcbiAgICpcbiAgICogV2hlbiBgdmFsYCBpcyBwcm92aWRlZCwgYC5wcm9wZXJ0eWAgYWxzbyBhc3NlcnRzIHRoYXQgdGhlIHByb3BlcnR5J3MgdmFsdWVcbiAgICogaXMgZXF1YWwgdG8gdGhlIGdpdmVuIGB2YWxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYScsIDEpO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZVxuICAgKiBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWUgdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvclxuICAgKiBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgcHJvcGVydHkgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uaGF2ZS5kZWVwLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmhhdmUucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKlxuICAgKiBUaGUgdGFyZ2V0J3MgZW51bWVyYWJsZSBhbmQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBhcmUgYWx3YXlzIGluY2x1ZGVkXG4gICAqIGluIHRoZSBzZWFyY2guIEJ5IGRlZmF1bHQsIGJvdGggb3duIGFuZCBpbmhlcml0ZWQgcHJvcGVydGllcyBhcmUgaW5jbHVkZWQuXG4gICAqIEFkZCBgLm93bmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZXhjbHVkZSBpbmhlcml0ZWQgcHJvcGVydGllcyBmcm9tIHRoZVxuICAgKiBzZWFyY2guXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd24ucHJvcGVydHkoJ2EnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duLnByb3BlcnR5KCdhJywgMSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdiJykuYnV0Lm5vdC5vd24ucHJvcGVydHkoJ2InKTsgXG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAub3duYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLmhhdmUuZGVlcC5vd24ucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKlxuICAgKiBBZGQgYC5uZXN0ZWRgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGVuYWJsZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIHdoZW5cbiAgICogcmVmZXJlbmNpbmcgbmVzdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nKTtcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFsneCcsICd5J119fSkudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ2EuYlsxXScsICd5Jyk7XG4gICAqXG4gICAqIElmIGAuYCBvciBgW11gIGFyZSBwYXJ0IG9mIGFuIGFjdHVhbCBwcm9wZXJ0eSBuYW1lLCB0aGV5IGNhbiBiZSBlc2NhcGVkIGJ5XG4gICAqIGFkZGluZyB0d28gYmFja3NsYXNoZXMgYmVmb3JlIHRoZW0uXG4gICAqXG4gICAqICAgICBleHBlY3QoeycuYSc6IHsnW2JdJzogJ3gnfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdcXFxcLmEuXFxcXFtiXFxcXF0nKTtcbiAgICpcbiAgICogYC5kZWVwYCBhbmQgYC5uZXN0ZWRgIGNhbiBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFt7YzogM31dfX0pXG4gICAqICAgICAgIC50by5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KCdhLmJbMF0nLCB7YzogM30pO1xuICAgKlxuICAgKiBgLm93bmAgYW5kIGAubmVzdGVkYCBjYW5ub3QgYmUgY29tYmluZWQuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAucHJvcGVydHlgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLnByb3BlcnR5YCB3aGVuIHByb3ZpZGluZyBgdmFsYC4gVGhlXG4gICAqIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlXG4gICAqIHRhcmdldCBlaXRoZXIgZG9lc24ndCBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCwgb3IgdGhhdCBpdFxuICAgKiBkb2VzIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgIGJ1dCBpdHMgdmFsdWUgaXNuJ3QgZXF1YWwgdG9cbiAgICogdGhlIGdpdmVuIGB2YWxgLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3NcbiAgICogZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzbid0IGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXlcbiAgICogYG5hbWVgLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdhJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSB3aXRoIHRoZSBnaXZlbiBrZXkgYG5hbWVgLFxuICAgKiBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHByb3BlcnR5IGhhcyBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlclxuICAgKiB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdhJywgMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLnByb3BlcnR5YCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluXG4gICAqIHRvIGJlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgZnJvbSB0aGUgb3JpZ2luYWwgdGFyZ2V0IG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnKS50aGF0LmlzLmEoJ251bWJlcicpO1xuICAgKlxuICAgKiBgLnByb3BlcnR5YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyBgdmFsYCwgb25seSB1c2UgdGhlXG4gICAqIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5wcm9wZXJ0eSgnYScsIDIpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicsIHVuZGVmaW5lZCwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiBcbiAgICogVGhlIGFib3ZlIGFzc2VydGlvbiBpc24ndCB0aGUgc2FtZSB0aGluZyBhcyBub3QgcHJvdmlkaW5nIGB2YWxgLiBJbnN0ZWFkLFxuICAgKiBpdCdzIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQgb2JqZWN0IGhhcyBhIGBiYCBwcm9wZXJ0eSB0aGF0J3MgZXF1YWwgdG9cbiAgICogYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIFRoZSBhc3NlcnRpb25zIGAub3duUHJvcGVydHlgIGFuZCBgLmhhdmVPd25Qcm9wZXJ0eWAgY2FuIGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5vd24ucHJvcGVydHlgLlxuICAgKlxuICAgKiBAbmFtZSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwgKG9wdGlvbmFsKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQHJldHVybnMgdmFsdWUgb2YgcHJvcGVydHkgZm9yIGNoYWluaW5nXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydFByb3BlcnR5IChuYW1lLCB2YWwsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgdmFyIGlzTmVzdGVkID0gZmxhZyh0aGlzLCAnbmVzdGVkJylcbiAgICAgICwgaXNPd24gPSBmbGFnKHRoaXMsICdvd24nKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG5cbiAgICBpZiAoaXNOZXN0ZWQgJiYgaXNPd24pIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgZmxhZ01zZyArICdUaGUgXCJuZXN0ZWRcIiBhbmQgXCJvd25cIiBmbGFncyBjYW5ub3QgYmUgY29tYmluZWQuJyxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBzc2ZpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgZmxhZ01zZyArICdUYXJnZXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgc3NmaVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgaXNEZWVwID0gZmxhZyh0aGlzLCAnZGVlcCcpXG4gICAgICAsIG5lZ2F0ZSA9IGZsYWcodGhpcywgJ25lZ2F0ZScpXG4gICAgICAsIHBhdGhJbmZvID0gaXNOZXN0ZWQgPyBfLmdldFBhdGhJbmZvKG9iaiwgbmFtZSkgOiBudWxsXG4gICAgICAsIHZhbHVlID0gaXNOZXN0ZWQgPyBwYXRoSW5mby52YWx1ZSA6IG9ialtuYW1lXTtcblxuICAgIHZhciBkZXNjcmlwdG9yID0gJyc7XG4gICAgaWYgKGlzRGVlcCkgZGVzY3JpcHRvciArPSAnZGVlcCAnO1xuICAgIGlmIChpc093bikgZGVzY3JpcHRvciArPSAnb3duICc7XG4gICAgaWYgKGlzTmVzdGVkKSBkZXNjcmlwdG9yICs9ICduZXN0ZWQgJztcbiAgICBkZXNjcmlwdG9yICs9ICdwcm9wZXJ0eSAnO1xuXG4gICAgdmFyIGhhc1Byb3BlcnR5O1xuICAgIGlmIChpc093bikgaGFzUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBuYW1lKTtcbiAgICBlbHNlIGlmIChpc05lc3RlZCkgaGFzUHJvcGVydHkgPSBwYXRoSW5mby5leGlzdHM7XG4gICAgZWxzZSBoYXNQcm9wZXJ0eSA9IF8uaGFzUHJvcGVydHkob2JqLCBuYW1lKTtcblxuICAgIC8vIFdoZW4gcGVyZm9ybWluZyBhIG5lZ2F0ZWQgYXNzZXJ0aW9uIGZvciBib3RoIG5hbWUgYW5kIHZhbCwgbWVyZWx5IGhhdmluZ1xuICAgIC8vIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpc24ndCBlbm91Z2ggdG8gY2F1c2UgdGhlIGFzc2VydGlvbiB0b1xuICAgIC8vIGZhaWwuIEl0IG11c3QgYm90aCBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgYW5kIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoYXQgcHJvcGVydHkgbXVzdCBlcXVhbCB0aGUgZ2l2ZW4gdmFsLiBUaGVyZWZvcmUsIHNraXAgdGhpcyBhc3NlcnRpb24gaW5cbiAgICAvLyBmYXZvciBvZiB0aGUgbmV4dC5cbiAgICBpZiAoIW5lZ2F0ZSB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBoYXNQcm9wZXJ0eVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSAnICsgZGVzY3JpcHRvciArIF8uaW5zcGVjdChuYW1lKSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBoYXNQcm9wZXJ0eSAmJiAoaXNEZWVwID8gXy5lcWwodmFsLCB2YWx1ZSkgOiB2YWwgPT09IHZhbHVlKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9mICN7ZXhwfSwgYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9mICN7YWN0fSdcbiAgICAgICAgLCB2YWxcbiAgICAgICAgLCB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCB2YWx1ZSk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdwcm9wZXJ0eScsIGFzc2VydFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBhc3NlcnRPd25Qcm9wZXJ0eSAobmFtZSwgdmFsdWUsIG1zZykge1xuICAgIGZsYWcodGhpcywgJ293bicsIHRydWUpO1xuICAgIGFzc2VydFByb3BlcnR5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdvd25Qcm9wZXJ0eScsIGFzc2VydE93blByb3BlcnR5KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaGF2ZU93blByb3BlcnR5JywgYXNzZXJ0T3duUHJvcGVydHkpO1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blByb3BlcnR5RGVzY3JpcHRvcihuYW1lWywgZGVzY3JpcHRvclssIG1zZ11dKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBoYXMgaXRzIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlIGdpdmVuIGtleVxuICAgKiBgbmFtZWAuIEVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkIGluIHRoZVxuICAgKiBzZWFyY2guXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScpO1xuICAgKlxuICAgKiBXaGVuIGBkZXNjcmlwdG9yYCBpcyBwcm92aWRlZCwgYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIGFsc28gYXNzZXJ0cyB0aGF0XG4gICAqIHRoZSBwcm9wZXJ0eSdzIGRlc2NyaXB0b3IgaXMgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgZGVzY3JpcHRvcmAuIFNlZVxuICAgKiB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAxLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYicpO1xuICAgKiBcbiAgICogSG93ZXZlciwgaXQncyBkYW5nZXJvdXMgdG8gbmVnYXRlIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCB3aGVuIHByb3ZpZGluZ1xuICAgKiBhIGBkZXNjcmlwdG9yYC4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnlcbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBlaXRoZXIgZG9lc24ndCBoYXZlIGEgcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoXG4gICAqIHRoZSBnaXZlbiBrZXkgYG5hbWVgLCBvciB0aGF0IGl0IGRvZXMgaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aCB0aGVcbiAgICogZ2l2ZW4ga2V5IGBuYW1lYCBidXQgaXRzIG5vdCBkZWVwbHkgZXF1YWwgdG8gdGhlIGdpdmVuIGBkZXNjcmlwdG9yYC4gSXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhblxuICAgKiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpc24ndCBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoIHRoZSBnaXZlblxuICAgKiBrZXkgYG5hbWVgLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8ubm90LmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMSxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aCB0aGUgZ2l2ZW5cbiAgICoga2V5IGBuYW1lYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSBwcm9wZXJ0eSBoYXMgaXRzIGV4cGVjdGVkXG4gICAqIGRlc2NyaXB0b3IsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueVxuICAgKiB1bmV4cGVjdGVkIGRlc2NyaXB0b3JzLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogM30pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMyxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAxLFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3dcbiAgICogaW4gdGhlIGNoYWluIHRvIGJlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciBmcm9tIHRoZSBvcmlnaW5hbFxuICAgKiB0YXJnZXQgb2JqZWN0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnKVxuICAgKiAgICAgICAudGhhdC5oYXMucHJvcGVydHkoJ2VudW1lcmFibGUnLCB0cnVlKTtcbiAgICpcbiAgICogYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYVxuICAgKiBjdXN0b20gZXJyb3IgbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc29cbiAgICogYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC4gV2hlbiBub3QgcHJvdmlkaW5nXG4gICAqIGBkZXNjcmlwdG9yYCwgb25seSB1c2UgdGhlIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMixcbiAgICogICAgIH0sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnLCB7XG4gICAqICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICogICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAqICAgICAgIHZhbHVlOiAyLFxuICAgKiAgICAgfSk7XG4gICAqIFxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KVxuICAgKiAgICAgICAudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InLCB1bmRlZmluZWQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogVGhlIGFib3ZlIGFzc2VydGlvbiBpc24ndCB0aGUgc2FtZSB0aGluZyBhcyBub3QgcHJvdmlkaW5nIGBkZXNjcmlwdG9yYC5cbiAgICogSW5zdGVhZCwgaXQncyBhc3NlcnRpbmcgdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCBoYXMgYSBgYmAgcHJvcGVydHlcbiAgICogZGVzY3JpcHRvciB0aGF0J3MgZGVlcGx5IGVxdWFsIHRvIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5oYXZlT3duUHJvcGVydHlEZXNjcmlwdG9yYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAuXG4gICAqXG4gICAqIEBuYW1lIG93blByb3BlcnR5RGVzY3JpcHRvclxuICAgKiBAYWxpYXMgaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZGVzY3JpcHRvciBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKG5hbWUsIGRlc2NyaXB0b3IsIG1zZykge1xuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1zZyA9IGRlc2NyaXB0b3I7XG4gICAgICBkZXNjcmlwdG9yID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgIHZhciBhY3R1YWxEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3Qob2JqKSwgbmFtZSk7XG4gICAgaWYgKGFjdHVhbERlc2NyaXB0b3IgJiYgZGVzY3JpcHRvcikge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgXy5lcWwoZGVzY3JpcHRvciwgYWN0dWFsRGVzY3JpcHRvcilcbiAgICAgICAgLCAnZXhwZWN0ZWQgdGhlIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvbiAje3RoaXN9IHRvIG1hdGNoICcgKyBfLmluc3BlY3QoZGVzY3JpcHRvcikgKyAnLCBnb3QgJyArIF8uaW5zcGVjdChhY3R1YWxEZXNjcmlwdG9yKVxuICAgICAgICAsICdleHBlY3RlZCB0aGUgb3duIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yICcgKyBfLmluc3BlY3QobmFtZSkgKyAnIG9uICN7dGhpc30gdG8gbm90IG1hdGNoICcgKyBfLmluc3BlY3QoZGVzY3JpcHRvcilcbiAgICAgICAgLCBkZXNjcmlwdG9yXG4gICAgICAgICwgYWN0dWFsRGVzY3JpcHRvclxuICAgICAgICAsIHRydWVcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGFjdHVhbERlc2NyaXB0b3JcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGFuIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYW4gb3duIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yICcgKyBfLmluc3BlY3QobmFtZSlcbiAgICAgICk7XG4gICAgfVxuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIGFjdHVhbERlc2NyaXB0b3IpO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnb3duUHJvcGVydHlEZXNjcmlwdG9yJywgYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvcicsIGFzc2VydE93blByb3BlcnR5RGVzY3JpcHRvcik7XG5cbiAgLyoqXG4gICAqICMjIyAubGVuZ3RoT2YoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlclxuICAgKiBgbmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpO1xuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmxlbmd0aE9mYC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUsIHJhdGhlciB0aGFuIG5vdCBlcXVhbCB0byBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHZhbHVlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmhhdmUubGVuZ3RoT2YoNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmxlbmd0aE9mYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLmxlbmd0aE9mKDIpO1xuICAgKlxuICAgKiBgLmxlbmd0aE9mYCBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgbGFuZ3VhZ2UgY2hhaW4sIGNhdXNpbmcgYWxsIGAuYWJvdmVgLFxuICAgKiBgLmJlbG93YCwgYC5sZWFzdGAsIGAubW9zdGAsIGFuZCBgLndpdGhpbmAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGVcbiAgICogY2hhaW4gdG8gdXNlIHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBhcyB0aGUgdGFyZ2V0LiBIb3dldmVyLCBpdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGVxdWFsIHRvIGl0c1xuICAgKiBleHBlY3RlZCBsZW5ndGgsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0cyBgbGVuZ3RoYCBwcm9wZXJ0eSBmYWxsc1xuICAgKiB3aXRoaW4gc29tZSByYW5nZSBvZiB2YWx1ZXMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYmVsb3coNCk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmF0LmxlYXN0KDMpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5tb3N0KDMpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi53aXRoaW4oMiw0KTtcbiAgICpcbiAgICogRHVlIHRvIGEgY29tcGF0aWJpbGl0eSBpc3N1ZSwgdGhlIGFsaWFzIGAubGVuZ3RoYCBjYW4ndCBiZSBjaGFpbmVkIGRpcmVjdGx5XG4gICAqIG9mZiBvZiBhbiB1bmludm9rZWQgbWV0aG9kIHN1Y2ggYXMgYC5hYC4gVGhlcmVmb3JlLCBgLmxlbmd0aGAgY2FuJ3QgYmUgdXNlZFxuICAgKiBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmxlbmd0aE9mYCBpbiBldmVyeSBzaXR1YXRpb24uIEl0J3MgcmVjb21tZW5kZWQgdG9cbiAgICogYWx3YXlzIHVzZSBgLmxlbmd0aE9mYCBpbnN0ZWFkIG9mIGAubGVuZ3RoYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUuYS5sZW5ndGgoMyk7IC8vIGluY29tcGF0aWJsZTsgdGhyb3dzIGVycm9yXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmEubGVuZ3RoT2YoMyk7ICAvLyBwYXNzZXMgYXMgZXhwZWN0ZWRcbiAgICpcbiAgICogQG5hbWUgbGVuZ3RoT2ZcbiAgICogQGFsaWFzIGxlbmd0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVuZ3RoQ2hhaW4gKCkge1xuICAgIGZsYWcodGhpcywgJ2RvTGVuZ3RoJywgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRMZW5ndGggKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIHZhciBsZW4gPSBvYmoubGVuZ3RoO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGxlbiA9PSBuXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSBsZW5ndGggb2YgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCBvZiAje2FjdH0nXG4gICAgICAsIG5cbiAgICAgICwgbGVuXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2xlbmd0aCcsIGFzc2VydExlbmd0aCwgYXNzZXJ0TGVuZ3RoQ2hhaW4pO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdsZW5ndGhPZicsIGFzc2VydExlbmd0aCwgYXNzZXJ0TGVuZ3RoQ2hhaW4pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm1hdGNoKHJlWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIGByZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm1hdGNoKC9eZm9vLyk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAubWF0Y2hgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5ub3QubWF0Y2goL3RhY28vKTtcbiAgICpcbiAgICogYC5tYXRjaGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5tYXRjaCgvdGFjby8sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLm1hdGNoKC90YWNvLyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLm1hdGNoZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAubWF0Y2hgLlxuICAgKlxuICAgKiBAbmFtZSBtYXRjaFxuICAgKiBAYWxpYXMgbWF0Y2hlc1xuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBmdW5jdGlvbiBhc3NlcnRNYXRjaChyZSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICByZS5leGVjKG9iailcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbWF0Y2ggJyArIHJlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBtYXRjaCAnICsgcmVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbWF0Y2gnLCBhc3NlcnRNYXRjaCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21hdGNoZXMnLCBhc3NlcnRNYXRjaCk7XG5cbiAgLyoqXG4gICAqICMjIyAuc3RyaW5nKHN0clssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IHN0cmluZyBjb250YWlucyB0aGUgZ2l2ZW4gc3Vic3RyaW5nIGBzdHJgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5oYXZlLnN0cmluZygnYmFyJyk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuc3RyaW5nYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubm90LmhhdmUuc3RyaW5nKCd0YWNvJyk7XG4gICAqXG4gICAqIGAuc3RyaW5nYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLmhhdmUuc3RyaW5nKC90YWNvLywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KCdmb29iYXInLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5zdHJpbmcoL3RhY28vKTtcbiAgICpcbiAgICogQG5hbWUgc3RyaW5nXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3N0cmluZycsIGZ1bmN0aW9uIChzdHIsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ3N0cmluZycpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIH5vYmouaW5kZXhPZihzdHIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGNvbnRhaW4gJyArIF8uaW5zcGVjdChzdHIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBjb250YWluICcgKyBfLmluc3BlY3Qoc3RyKVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmtleXMoa2V5MVssIGtleTJbLCAuLi5dXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgb2JqZWN0LCBhcnJheSwgbWFwLCBvciBzZXQgaGFzIHRoZSBnaXZlbiBrZXlzLiBPbmx5XG4gICAqIHRoZSB0YXJnZXQncyBvd24gaW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkIGluIHRoZSBzZWFyY2guIFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0IG9yIGFycmF5LCBrZXlzIGNhbiBiZSBwcm92aWRlZCBhcyBvbmUgb3IgbW9yZVxuICAgKiBzdHJpbmcgYXJndW1lbnRzLCBhIHNpbmdsZSBhcnJheSBhcmd1bWVudCwgb3IgYSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LiBJblxuICAgKiB0aGUgbGF0dGVyIGNhc2UsIG9ubHkgdGhlIGtleXMgaW4gdGhlIGdpdmVuIG9iamVjdCBtYXR0ZXI7IHRoZSB2YWx1ZXMgYXJlXG4gICAqIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdChbJ3gnLCAneSddKS50by5oYXZlLmFsbC5rZXlzKDAsIDEpO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cyhbJ2EnLCAnYiddKTtcbiAgICogICAgIGV4cGVjdChbJ3gnLCAneSddKS50by5oYXZlLmFsbC5rZXlzKFswLCAxXSk7XG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKHthOiA0LCBiOiA1fSk7IC8vIGlnbm9yZSA0IGFuZCA1XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cyh7MDogNCwgMTogNX0pOyAvLyBpZ25vcmUgNCBhbmQgNVxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBtYXAgb3Igc2V0LCBlYWNoIGtleSBtdXN0IGJlIHByb3ZpZGVkIGFzIGEgc2VwYXJhdGVcbiAgICogYXJndW1lbnQuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IE1hcChbWydhJywgMV0sIFsnYicsIDJdXSkpLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoWydhJywgJ2InXSkpLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBCZWNhdXNlIGAua2V5c2AgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5rZXlzYC4gU2VlIHRoZSBgLmFgIGRvY1xuICAgKiBmb3IgaW5mbyBvbiB0ZXN0aW5nIGEgdGFyZ2V0J3MgdHlwZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmJlLmFuKCdvYmplY3QnKS50aGF0Lmhhcy5hbGwua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBrZXlzIG9mIG1hcHMgYW5kXG4gICAqIHNldHMuIEFkZCBgLmRlZXBgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZVxuICAgKiB0aGUgYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IHNldCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBrZXkgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFt7YTogMX1dKSkudG8uaGF2ZS5hbGwuZGVlcC5rZXlzKFt7YTogMX1dKTtcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFt7YTogMX1dKSkudG8ubm90LmhhdmUuYWxsLmtleXMoW3thOiAxfV0pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgdGFyZ2V0IG11c3QgaGF2ZSBhbGwgb2YgdGhlIGdpdmVuIGtleXMgYW5kIG5vIG1vcmUuIEFkZFxuICAgKiBgLmFueWAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gb25seSByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCBoYXZlIGF0IGxlYXN0XG4gICAqIG9uZSBvZiB0aGUgZ2l2ZW4ga2V5cy4gQWxzbywgYWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGVcbiAgICogYC5rZXlzYC4gSXQncyBvZnRlbiBiZXN0IHRvIGFkZCBgLmFueWAgd2hlbiBuZWdhdGluZyBgLmtleXNgLCBhbmQgdG8gdXNlXG4gICAqIGAuYWxsYCB3aGVuIGFzc2VydGluZyBgLmtleXNgIHdpdGhvdXQgbmVnYXRpb24uXG4gICAqXG4gICAqIFdoZW4gbmVnYXRpbmcgYC5rZXlzYCwgYC5hbnlgIGlzIHByZWZlcnJlZCBiZWNhdXNlIGAubm90LmFueS5rZXlzYCBhc3NlcnRzXG4gICAqIGV4YWN0bHkgd2hhdCdzIGV4cGVjdGVkIG9mIHRoZSBvdXRwdXQsIHdoZXJlYXMgYC5ub3QuYWxsLmtleXNgIGNyZWF0ZXNcbiAgICogdW5jZXJ0YWluIGV4cGVjdGF0aW9ucy5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkOyBhc3NlcnRzIHRoYXQgdGFyZ2V0IGRvZXNuJ3QgaGF2ZSBhbnkgb2YgdGhlIGdpdmVuIGtleXNcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLm5vdC5oYXZlLmFueS5rZXlzKCdjJywgJ2QnKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBkb2Vzbid0IGhhdmUgYWxsIG9mIHRoZSBnaXZlblxuICAgKiAgICAgLy8ga2V5cyBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBzb21lIG9mIHRoZW1cbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdjJywgJ2QnKTtcbiAgICpcbiAgICogV2hlbiBhc3NlcnRpbmcgYC5rZXlzYCB3aXRob3V0IG5lZ2F0aW9uLCBgLmFsbGAgaXMgcHJlZmVycmVkIGJlY2F1c2VcbiAgICogYC5hbGwua2V5c2AgYXNzZXJ0cyBleGFjdGx5IHdoYXQncyBleHBlY3RlZCBvZiB0aGUgb3V0cHV0LCB3aGVyZWFzXG4gICAqIGAuYW55LmtleXNgIGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucy5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkOyBhc3NlcnRzIHRoYXQgdGFyZ2V0IGhhcyBhbGwgdGhlIGdpdmVuIGtleXNcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkOyBhc3NlcnRzIHRoYXQgdGFyZ2V0IGhhcyBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuXG4gICAqICAgICAvLyBrZXlzIGJ1dCBtYXkgb3IgbWF5IG5vdCBoYXZlIG1vcmUgb2YgdGhlbVxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIE5vdGUgdGhhdCBgLmFsbGAgaXMgdXNlZCBieSBkZWZhdWx0IHdoZW4gbmVpdGhlciBgLmFsbGAgbm9yIGAuYW55YCBhcHBlYXJcbiAgICogZWFybGllciBpbiB0aGUgY2hhaW4uIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhZGQgYC5hbGxgIGFueXdheSBiZWNhdXNlXG4gICAqIGl0IGltcHJvdmVzIHJlYWRhYmlsaXR5LlxuICAgKlxuICAgKiAgICAgLy8gQm90aCBhc3NlcnRpb25zIGFyZSBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5rZXlzKCdhJywgJ2InKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmluY2x1ZGVgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdCB0aGUgdGFyZ2V0J3Mga2V5cyBiZSBhXG4gICAqIHN1cGVyc2V0IG9mIHRoZSBleHBlY3RlZCBrZXlzLCByYXRoZXIgdGhhbiBpZGVudGljYWwgc2V0cy5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QncyBrZXlzIGFyZSBhIHN1cGVyc2V0IG9mIFsnYScsICdiJ10gYnV0IG5vdCBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLmluY2x1ZGUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyLCBjOiAzfSkudG8ubm90LmhhdmUuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBIb3dldmVyLCBpZiBgLmFueWAgYW5kIGAuaW5jbHVkZWAgYXJlIGNvbWJpbmVkLCBvbmx5IHRoZSBgLmFueWAgdGFrZXNcbiAgICogZWZmZWN0LiBUaGUgYC5pbmNsdWRlYCBpcyBpZ25vcmVkIGluIHRoaXMgY2FzZS5cbiAgICpcbiAgICogICAgIC8vIEJvdGggYXNzZXJ0aW9ucyBhcmUgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUua2V5KCdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmtleWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5rZXlzYC5cbiAgICpcbiAgICogQG5hbWUga2V5c1xuICAgKiBAYWxpYXMga2V5XG4gICAqIEBwYXJhbSB7Li4uU3RyaW5nfEFycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRLZXlzIChrZXlzKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKVxuICAgICAgLCBrZXlzVHlwZSA9IF8udHlwZShrZXlzKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBzdHJcbiAgICAgICwgZGVlcFN0ciA9ICcnXG4gICAgICAsIG9rID0gdHJ1ZVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpO1xuXG4gICAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuICAgIHZhciBtaXhlZEFyZ3NNc2cgPSBmbGFnTXNnICsgJ3doZW4gdGVzdGluZyBrZXlzIGFnYWluc3QgYW4gb2JqZWN0IG9yIGFuIGFycmF5IHlvdSBtdXN0IGdpdmUgYSBzaW5nbGUgQXJyYXl8T2JqZWN0fFN0cmluZyBhcmd1bWVudCBvciBtdWx0aXBsZSBTdHJpbmcgYXJndW1lbnRzJztcblxuICAgIGlmIChvYmpUeXBlID09PSAnTWFwJyB8fCBvYmpUeXBlID09PSAnU2V0Jykge1xuICAgICAgZGVlcFN0ciA9IGlzRGVlcCA/ICdkZWVwbHkgJyA6ICcnO1xuICAgICAgYWN0dWFsID0gW107XG5cbiAgICAgIC8vIE1hcCBhbmQgU2V0ICcua2V5cycgYXJlbid0IHN1cHBvcnRlZCBpbiBJRSAxMS4gVGhlcmVmb3JlLCB1c2UgLmZvckVhY2guXG4gICAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAodmFsLCBrZXkpIHsgYWN0dWFsLnB1c2goa2V5KSB9KTtcblxuICAgICAgaWYgKGtleXNUeXBlICE9PSAnQXJyYXknKSB7XG4gICAgICAgIGtleXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdHVhbCA9IF8uZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqKTtcblxuICAgICAgc3dpdGNoIChrZXlzVHlwZSkge1xuICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobWl4ZWRBcmdzTXNnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtaXhlZEFyZ3NNc2csIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhrZXlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBrZXlzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBzdHJpbmdpZnkgbm9uLVN5bWJvbHMgYmVjYXVzZSBTeW1ib2xzIHdvdWxkIGJlY29tZSBcIlN5bWJvbCgpXCJcbiAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJyA/IHZhbCA6IFN0cmluZyh2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFrZXlzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGZsYWdNc2cgKyAna2V5cyByZXF1aXJlZCcsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoXG4gICAgICAsIGFueSA9IGZsYWcodGhpcywgJ2FueScpXG4gICAgICAsIGFsbCA9IGZsYWcodGhpcywgJ2FsbCcpXG4gICAgICAsIGV4cGVjdGVkID0ga2V5c1xuICAgICAgLCBhY3R1YWw7XG5cbiAgICBpZiAoIWFueSAmJiAhYWxsKSB7XG4gICAgICBhbGwgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEhhcyBhbnlcbiAgICBpZiAoYW55KSB7XG4gICAgICBvayA9IGV4cGVjdGVkLnNvbWUoZnVuY3Rpb24oZXhwZWN0ZWRLZXkpIHtcbiAgICAgICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGFjdHVhbEtleSkge1xuICAgICAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBfLmVxbChleHBlY3RlZEtleSwgYWN0dWFsS2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkS2V5ID09PSBhY3R1YWxLZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhhcyBhbGxcbiAgICBpZiAoYWxsKSB7XG4gICAgICBvayA9IGV4cGVjdGVkLmV2ZXJ5KGZ1bmN0aW9uKGV4cGVjdGVkS2V5KSB7XG4gICAgICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbihhY3R1YWxLZXkpIHtcbiAgICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5lcWwoZXhwZWN0ZWRLZXksIGFjdHVhbEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBleHBlY3RlZEtleSA9PT0gYWN0dWFsS2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFmbGFnKHRoaXMsICdjb250YWlucycpKSB7XG4gICAgICAgIG9rID0gb2sgJiYga2V5cy5sZW5ndGggPT0gYWN0dWFsLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBLZXkgc3RyaW5nXG4gICAgaWYgKGxlbiA+IDEpIHtcbiAgICAgIGtleXMgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIF8uaW5zcGVjdChrZXkpO1xuICAgICAgfSk7XG4gICAgICB2YXIgbGFzdCA9IGtleXMucG9wKCk7XG4gICAgICBpZiAoYWxsKSB7XG4gICAgICAgIHN0ciA9IGtleXMuam9pbignLCAnKSArICcsIGFuZCAnICsgbGFzdDtcbiAgICAgIH1cbiAgICAgIGlmIChhbnkpIHtcbiAgICAgICAgc3RyID0ga2V5cy5qb2luKCcsICcpICsgJywgb3IgJyArIGxhc3Q7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IF8uaW5zcGVjdChrZXlzWzBdKTtcbiAgICB9XG5cbiAgICAvLyBGb3JtXG4gICAgc3RyID0gKGxlbiA+IDEgPyAna2V5cyAnIDogJ2tleSAnKSArIHN0cjtcblxuICAgIC8vIEhhdmUgLyBpbmNsdWRlXG4gICAgc3RyID0gKGZsYWcodGhpcywgJ2NvbnRhaW5zJykgPyAnY29udGFpbiAnIDogJ2hhdmUgJykgKyBzdHI7XG5cbiAgICAvLyBBc3NlcnRpb25cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgb2tcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gJyArIGRlZXBTdHIgKyBzdHJcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90ICcgKyBkZWVwU3RyICsgc3RyXG4gICAgICAsIGV4cGVjdGVkLnNsaWNlKDApLnNvcnQoXy5jb21wYXJlQnlJbnNwZWN0KVxuICAgICAgLCBhY3R1YWwuc29ydChfLmNvbXBhcmVCeUluc3BlY3QpXG4gICAgICAsIHRydWVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgna2V5cycsIGFzc2VydEtleXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdrZXknLCBhc3NlcnRLZXlzKTtcblxuICAvKipcbiAgICogIyMjIC50aHJvdyhbZXJyb3JMaWtlXSwgW2Vyck1zZ01hdGNoZXJdLCBbbXNnXSlcbiAgICpcbiAgICogV2hlbiBubyBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLnRocm93YCBpbnZva2VzIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kXG4gICAqIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24uXG4gICAqIFxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coKTtcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGFuZCBpdCdzIGFuIGVycm9yIGNvbnN0cnVjdG9yLCBgLnRocm93YFxuICAgKiBpbnZva2VzIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCdzIGFuXG4gICAqIGluc3RhbmNlIG9mIHRoYXQgZXJyb3IgY29uc3RydWN0b3IuXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYW4gZXJyb3IgaW5zdGFuY2UsIGAudGhyb3dgIGludm9rZXNcbiAgICogdGhlIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB0aGF0J3Mgc3RyaWN0bHlcbiAgICogKGA9PT1gKSBlcXVhbCB0byB0aGF0IGVycm9yIGluc3RhbmNlLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KGVycik7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhIHN0cmluZywgYC50aHJvd2AgaW52b2tlcyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHdpdGggYSBtZXNzYWdlIHRoYXRcbiAgICogY29udGFpbnMgdGhhdCBzdHJpbmcuXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdygnc2FsbW9uJyk7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHdpdGggYVxuICAgKiBtZXNzYWdlIHRoYXQgbWF0Y2hlcyB0aGF0IHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICpcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KC9zYWxtb24vKTtcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYW5kIHRoZSBmaXJzdCBpcyBhbiBlcnJvciBpbnN0YW5jZSBvclxuICAgKiBjb25zdHJ1Y3RvciwgYW5kIHRoZSBzZWNvbmQgaXMgYSBzdHJpbmcgb3IgcmVndWxhciBleHByZXNzaW9uLCBgLnRocm93YFxuICAgKiBpbnZva2VzIHRoZSBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB0aGF0IGZ1bGZpbGxzIGJvdGhcbiAgICogY29uZGl0aW9ucyBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqICAgICB2YXIgZXJyID0gbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7XG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yLCAnc2FsbW9uJyk7XG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgL3NhbG1vbi8pO1xuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhlcnIsICdzYWxtb24nKTtcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coZXJyLCAvc2FsbW9uLyk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAudGhyb3dgLlxuICAgKiAgICAgXG4gICAqICAgICB2YXIgZ29vZEZuID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coKTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLnRocm93YCB3aGVuIHByb3ZpZGluZyBhbnkgYXJndW1lbnRzLlxuICAgKiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGVpdGhlciBkb2Vzbid0IHRocm93IGFuIGVycm9yLCBvciB0aGF0IGl0IHRocm93cyBhbiBlcnJvciBidXQgb2YgYVxuICAgKiBkaWZmZXJlbnQgdHlwZSB0aGFuIHRoZSBnaXZlbiB0eXBlLCBvciB0aGF0IGl0IHRocm93cyBhbiBlcnJvciBvZiB0aGUgZ2l2ZW5cbiAgICogdHlwZSBidXQgd2l0aCBhIG1lc3NhZ2UgdGhhdCBkb2Vzbid0IGluY2x1ZGUgdGhlIGdpdmVuIHN0cmluZy4gSXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhblxuICAgKiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpc24ndCBleHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgZ29vZEZuID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChnb29kRm4pLnRvLm5vdC50aHJvdyhSZWZlcmVuY2VFcnJvciwgJ3gnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byB0aHJvdyBhbiBlcnJvciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiB0aGF0IHRoZSBlcnJvciBpcyBvZiBpdHMgZXhwZWN0ZWQgdHlwZSwgYW5kIGhhcyBhIG1lc3NhZ2UgdGhhdCBpbmNsdWRlcyBhblxuICAgKiBleHBlY3RlZCBzdHJpbmcsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0IGRvZXNuJ3QgaGF2ZSBvbmUgb2YgbWFueVxuICAgKiB1bmV4cGVjdGVkIHR5cGVzLCBhbmQgZG9lc24ndCBoYXZlIGEgbWVzc2FnZSB0aGF0IGluY2x1ZGVzIHNvbWUgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yLCAnc2FsbW9uJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLm5vdC50aHJvdyhSZWZlcmVuY2VFcnJvciwgJ3gnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAudGhyb3dgIGNoYW5nZXMgdGhlIHRhcmdldCBvZiBhbnkgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG9cbiAgICogYmUgdGhlIGVycm9yIG9iamVjdCB0aGF0J3MgdGhyb3duLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgZXJyLmNvZGUgPSA0MjtcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IpLndpdGgucHJvcGVydHkoJ2NvZGUnLCA0Mik7XG4gICAqXG4gICAqIGAudGhyb3dgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC4gV2hlbiBub3QgcHJvdmlkaW5nIHR3byBhcmd1bWVudHMsIGFsd2F5cyB1c2VcbiAgICogdGhlIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8udGhyb3coVHlwZUVycm9yLCAneCcsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChnb29kRm4sICdub29vIHdoeSBmYWlsPz8nKS50by50aHJvdygpO1xuICAgKlxuICAgKiBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRVM1LCBgLnRocm93YCBtYXkgbm90IGFsd2F5cyB3b3JrIGFzIGV4cGVjdGVkIHdoZW5cbiAgICogdXNpbmcgYSB0cmFuc3BpbGVyIHN1Y2ggYXMgQmFiZWwgb3IgVHlwZVNjcmlwdC4gSW4gcGFydGljdWxhciwgaXQgbWF5XG4gICAqIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzIHdoZW4gc3ViY2xhc3NpbmcgdGhlIGJ1aWx0LWluIGBFcnJvcmAgb2JqZWN0IGFuZFxuICAgKiB0aGVuIHBhc3NpbmcgdGhlIHN1YmNsYXNzZWQgY29uc3RydWN0b3IgdG8gYC50aHJvd2AuIFNlZSB5b3VyIHRyYW5zcGlsZXInc1xuICAgKiBkb2NzIGZvciBkZXRhaWxzOlxuICAgKlxuICAgKiAtIChbQmFiZWxdKGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL3VzYWdlL2NhdmVhdHMvI2NsYXNzZXMpKVxuICAgKiAtIChbVHlwZVNjcmlwdF0oaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvQnJlYWtpbmctQ2hhbmdlcyNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmspKVxuICAgKlxuICAgKiBCZXdhcmUgb2Ygc29tZSBjb21tb24gbWlzdGFrZXMgd2hlbiB1c2luZyB0aGUgYHRocm93YCBhc3NlcnRpb24uIE9uZSBjb21tb25cbiAgICogbWlzdGFrZSBpcyB0byBhY2NpZGVudGFsbHkgaW52b2tlIHRoZSBmdW5jdGlvbiB5b3Vyc2VsZiBpbnN0ZWFkIG9mIGxldHRpbmdcbiAgICogdGhlIGB0aHJvd2AgYXNzZXJ0aW9uIGludm9rZSB0aGUgZnVuY3Rpb24gZm9yIHlvdS4gRm9yIGV4YW1wbGUsIHdoZW5cbiAgICogdGVzdGluZyBpZiBhIGZ1bmN0aW9uIG5hbWVkIGBmbmAgdGhyb3dzLCBwcm92aWRlIGBmbmAgaW5zdGVhZCBvZiBgZm4oKWAgYXNcbiAgICogdGhlIHRhcmdldCBmb3IgdGhlIGFzc2VydGlvbi5cbiAgICpcbiAgICogICAgIGV4cGVjdChmbikudG8udGhyb3coKTsgICAgIC8vIEdvb2QhIFRlc3RzIGBmbmAgYXMgZGVzaXJlZFxuICAgKiAgICAgZXhwZWN0KGZuKCkpLnRvLnRocm93KCk7ICAgLy8gQmFkISBUZXN0cyByZXN1bHQgb2YgYGZuKClgLCBub3QgYGZuYFxuICAgKlxuICAgKiBJZiB5b3UgbmVlZCB0byBhc3NlcnQgdGhhdCB5b3VyIGZ1bmN0aW9uIGBmbmAgdGhyb3dzIHdoZW4gcGFzc2VkIGNlcnRhaW5cbiAgICogYXJndW1lbnRzLCB0aGVuIHdyYXAgYSBjYWxsIHRvIGBmbmAgaW5zaWRlIG9mIGFub3RoZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqICAgICBleHBlY3QoZnVuY3Rpb24gKCkgeyBmbig0Mik7IH0pLnRvLnRocm93KCk7ICAvLyBGdW5jdGlvbiBleHByZXNzaW9uXG4gICAqICAgICBleHBlY3QoKCkgPT4gZm4oNDIpKS50by50aHJvdygpOyAgICAgICAgICAgICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25cbiAgICpcbiAgICogQW5vdGhlciBjb21tb24gbWlzdGFrZSBpcyB0byBwcm92aWRlIGFuIG9iamVjdCBtZXRob2QgKG9yIGFueSBzdGFuZC1hbG9uZVxuICAgKiBmdW5jdGlvbiB0aGF0IHJlbGllcyBvbiBgdGhpc2ApIGFzIHRoZSB0YXJnZXQgb2YgdGhlIGFzc2VydGlvbi4gRG9pbmcgc28gaXNcbiAgICogcHJvYmxlbWF0aWMgYmVjYXVzZSB0aGUgYHRoaXNgIGNvbnRleHQgd2lsbCBiZSBsb3N0IHdoZW4gdGhlIGZ1bmN0aW9uIGlzXG4gICAqIGludm9rZWQgYnkgYC50aHJvd2A7IHRoZXJlJ3Mgbm8gd2F5IGZvciBpdCB0byBrbm93IHdoYXQgYHRoaXNgIGlzIHN1cHBvc2VkXG4gICAqIHRvIGJlLiBUaGVyZSBhcmUgdHdvIHdheXMgYXJvdW5kIHRoaXMgcHJvYmxlbS4gT25lIHNvbHV0aW9uIGlzIHRvIHdyYXAgdGhlXG4gICAqIG1ldGhvZCBvciBmdW5jdGlvbiBjYWxsIGluc2lkZSBvZiBhbm90aGVyIGZ1bmN0aW9uLiBBbm90aGVyIHNvbHV0aW9uIGlzIHRvXG4gICAqIHVzZSBgYmluZGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZnVuY3Rpb24gKCkgeyBjYXQubWVvdygpOyB9KS50by50aHJvdygpOyAgLy8gRnVuY3Rpb24gZXhwcmVzc2lvblxuICAgKiAgICAgZXhwZWN0KCgpID0+IGNhdC5tZW93KCkpLnRvLnRocm93KCk7ICAgICAgICAgICAgIC8vIEVTNiBhcnJvdyBmdW5jdGlvblxuICAgKiAgICAgZXhwZWN0KGNhdC5tZW93LmJpbmQoY2F0KSkudG8udGhyb3coKTsgICAgICAgICAgIC8vIEJpbmRcbiAgICpcbiAgICogRmluYWxseSwgaXQncyB3b3J0aCBtZW50aW9uaW5nIHRoYXQgaXQncyBhIGJlc3QgcHJhY3RpY2UgaW4gSmF2YVNjcmlwdCB0b1xuICAgKiBvbmx5IHRocm93IGBFcnJvcmAgYW5kIGRlcml2YXRpdmVzIG9mIGBFcnJvcmAgc3VjaCBhcyBgUmVmZXJlbmNlRXJyb3JgLFxuICAgKiBgVHlwZUVycm9yYCwgYW5kIHVzZXItZGVmaW5lZCBvYmplY3RzIHRoYXQgZXh0ZW5kIGBFcnJvcmAuIE5vIG90aGVyIHR5cGUgb2ZcbiAgICogdmFsdWUgd2lsbCBnZW5lcmF0ZSBhIHN0YWNrIHRyYWNlIHdoZW4gaW5pdGlhbGl6ZWQuIFdpdGggdGhhdCBzYWlkLCB0aGVcbiAgICogYHRocm93YCBhc3NlcnRpb24gZG9lcyB0ZWNobmljYWxseSBzdXBwb3J0IGFueSB0eXBlIG9mIHZhbHVlIGJlaW5nIHRocm93bixcbiAgICogbm90IGp1c3QgYEVycm9yYCBhbmQgaXRzIGRlcml2YXRpdmVzLlxuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLnRocm93c2AgYW5kIGAuVGhyb3dgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoXG4gICAqIGAudGhyb3dgLlxuICAgKlxuICAgKiBAbmFtZSB0aHJvd1xuICAgKiBAYWxpYXMgdGhyb3dzXG4gICAqIEBhbGlhcyBUaHJvd1xuICAgKiBAcGFyYW0ge0Vycm9yfEVycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGVyck1zZ01hdGNoZXIgZXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgKiBAcmV0dXJucyBlcnJvciBmb3IgY2hhaW5pbmcgKG51bGwgaWYgbm8gZXJyb3IpXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydFRocm93cyAoZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIG5lZ2F0ZSA9IGZsYWcodGhpcywgJ25lZ2F0ZScpIHx8IGZhbHNlO1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIFJlZ0V4cCB8fCB0eXBlb2YgZXJyb3JMaWtlID09PSAnc3RyaW5nJykge1xuICAgICAgZXJyTXNnTWF0Y2hlciA9IGVycm9yTGlrZTtcbiAgICAgIGVycm9yTGlrZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNhdWdodEVycjtcbiAgICB0cnkge1xuICAgICAgb2JqKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjYXVnaHRFcnIgPSBlcnI7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSB0aGUgbmVnYXRlIGZsYWcgZW5hYmxlZCBhbmQgYXQgbGVhc3Qgb25lIHZhbGlkIGFyZ3VtZW50IGl0IG1lYW5zIHdlIGRvIGV4cGVjdCBhbiBlcnJvclxuICAgIC8vIGJ1dCB3ZSB3YW50IGl0IHRvIG1hdGNoIGEgZ2l2ZW4gc2V0IG9mIGNyaXRlcmlhXG4gICAgdmFyIGV2ZXJ5QXJnSXNVbmRlZmluZWQgPSBlcnJvckxpa2UgPT09IHVuZGVmaW5lZCAmJiBlcnJNc2dNYXRjaGVyID09PSB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB3ZSd2ZSBnb3QgdGhlIG5lZ2F0ZSBmbGFnIGVuYWJsZWQgYW5kIGJvdGggYXJncywgd2Ugc2hvdWxkIG9ubHkgZmFpbCBpZiBib3RoIGFyZW4ndCBjb21wYXRpYmxlXG4gICAgLy8gU2VlIElzc3VlICM1NTEgYW5kIFBSICM2ODNAR2l0SHViXG4gICAgdmFyIGV2ZXJ5QXJnSXNEZWZpbmVkID0gQm9vbGVhbihlcnJvckxpa2UgJiYgZXJyTXNnTWF0Y2hlcik7XG4gICAgdmFyIGVycm9yTGlrZUZhaWwgPSBmYWxzZTtcbiAgICB2YXIgZXJyTXNnTWF0Y2hlckZhaWwgPSBmYWxzZTtcblxuICAgIC8vIENoZWNraW5nIGlmIGVycm9yIHdhcyB0aHJvd25cbiAgICBpZiAoZXZlcnlBcmdJc1VuZGVmaW5lZCB8fCAhZXZlcnlBcmdJc1VuZGVmaW5lZCAmJiAhbmVnYXRlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRoaXMgdG8gZGlzcGxheSByZXN1bHRzIGNvcnJlY3RseSBhY2NvcmRpbmcgdG8gdGhlaXIgdHlwZXNcbiAgICAgIHZhciBlcnJvckxpa2VTdHJpbmcgPSAnYW4gZXJyb3InO1xuICAgICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGVycm9yTGlrZVN0cmluZyA9ICcje2V4cH0nO1xuICAgICAgfSBlbHNlIGlmIChlcnJvckxpa2UpIHtcbiAgICAgICAgZXJyb3JMaWtlU3RyaW5nID0gXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBjYXVnaHRFcnJcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAnICsgZXJyb3JMaWtlU3RyaW5nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93IGFuIGVycm9yIGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgLCBlcnJvckxpa2UgJiYgZXJyb3JMaWtlLnRvU3RyaW5nKClcbiAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgP1xuICAgICAgICAgICAgY2F1Z2h0RXJyLnRvU3RyaW5nKCkgOiAodHlwZW9mIGNhdWdodEVyciA9PT0gJ3N0cmluZycgPyBjYXVnaHRFcnIgOiBjYXVnaHRFcnIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoY2F1Z2h0RXJyKSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChlcnJvckxpa2UgJiYgY2F1Z2h0RXJyKSB7XG4gICAgICAvLyBXZSBzaG91bGQgY29tcGFyZSBpbnN0YW5jZXMgb25seSBpZiBgZXJyb3JMaWtlYCBpcyBhbiBpbnN0YW5jZSBvZiBgRXJyb3JgXG4gICAgICBpZiAoZXJyb3JMaWtlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdmFyIGlzQ29tcGF0aWJsZUluc3RhbmNlID0gXy5jaGVja0Vycm9yLmNvbXBhdGlibGVJbnN0YW5jZShjYXVnaHRFcnIsIGVycm9yTGlrZSk7XG5cbiAgICAgICAgaWYgKGlzQ29tcGF0aWJsZUluc3RhbmNlID09PSBuZWdhdGUpIHtcbiAgICAgICAgICAvLyBUaGVzZSBjaGVja3Mgd2VyZSBjcmVhdGVkIHRvIGVuc3VyZSB3ZSB3b24ndCBmYWlsIHRvbyBzb29uIHdoZW4gd2UndmUgZ290IGJvdGggYXJncyBhbmQgYSBuZWdhdGVcbiAgICAgICAgICAvLyBTZWUgSXNzdWUgIzU1MSBhbmQgUFIgIzY4M0BHaXRIdWJcbiAgICAgICAgICBpZiAoZXZlcnlBcmdJc0RlZmluZWQgJiYgbmVnYXRlKSB7XG4gICAgICAgICAgICBlcnJvckxpa2VGYWlsID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgICAgICAgbmVnYXRlXG4gICAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgI3tleHB9IGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgdGhyb3cgI3tleHB9JyArIChjYXVnaHRFcnIgJiYgIW5lZ2F0ZSA/ICcgYnV0ICN7YWN0fSB3YXMgdGhyb3duJyA6ICcnKVxuICAgICAgICAgICAgICAsIGVycm9yTGlrZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICwgY2F1Z2h0RXJyLnRvU3RyaW5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0NvbXBhdGlibGVDb25zdHJ1Y3RvciA9IF8uY2hlY2tFcnJvci5jb21wYXRpYmxlQ29uc3RydWN0b3IoY2F1Z2h0RXJyLCBlcnJvckxpa2UpO1xuICAgICAgaWYgKGlzQ29tcGF0aWJsZUNvbnN0cnVjdG9yID09PSBuZWdhdGUpIHtcbiAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyb3JMaWtlRmFpbCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAje2V4cH0gYnV0ICN7YWN0fSB3YXMgdGhyb3duJ1xuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgdGhyb3cgI3tleHB9JyArIChjYXVnaHRFcnIgPyAnIGJ1dCAje2FjdH0gd2FzIHRocm93bicgOiAnJylcbiAgICAgICAgICAgICwgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3JMaWtlLnRvU3RyaW5nKCkgOiBlcnJvckxpa2UgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpKVxuICAgICAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgPyBjYXVnaHRFcnIudG9TdHJpbmcoKSA6IGNhdWdodEVyciAmJiBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYXVnaHRFcnIgJiYgZXJyTXNnTWF0Y2hlciAhPT0gdW5kZWZpbmVkICYmIGVyck1zZ01hdGNoZXIgIT09IG51bGwpIHtcbiAgICAgIC8vIEhlcmUgd2UgY2hlY2sgY29tcGF0aWJsZSBtZXNzYWdlc1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gJ2luY2x1ZGluZyc7XG4gICAgICBpZiAoZXJyTXNnTWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICBwbGFjZWhvbGRlciA9ICdtYXRjaGluZydcbiAgICAgIH1cblxuICAgICAgdmFyIGlzQ29tcGF0aWJsZU1lc3NhZ2UgPSBfLmNoZWNrRXJyb3IuY29tcGF0aWJsZU1lc3NhZ2UoY2F1Z2h0RXJyLCBlcnJNc2dNYXRjaGVyKTtcbiAgICAgIGlmIChpc0NvbXBhdGlibGVNZXNzYWdlID09PSBuZWdhdGUpIHtcbiAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyTXNnTWF0Y2hlckZhaWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgbmVnYXRlXG4gICAgICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93IGVycm9yICcgKyBwbGFjZWhvbGRlciArICcgI3tleHB9IGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyBlcnJvciBub3QgJyArIHBsYWNlaG9sZGVyICsgJyAje2V4cH0nXG4gICAgICAgICAgICAsICBlcnJNc2dNYXRjaGVyXG4gICAgICAgICAgICAsICBfLmNoZWNrRXJyb3IuZ2V0TWVzc2FnZShjYXVnaHRFcnIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIGJvdGggYXNzZXJ0aW9ucyBmYWlsZWQgYW5kIGJvdGggc2hvdWxkJ3ZlIG1hdGNoZWQgd2UgdGhyb3cgYW4gZXJyb3JcbiAgICBpZiAoZXJyb3JMaWtlRmFpbCAmJiBlcnJNc2dNYXRjaGVyRmFpbCkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG5lZ2F0ZVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93ICN7ZXhwfSBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyID8gJyBidXQgI3thY3R9IHdhcyB0aHJvd24nIDogJycpXG4gICAgICAgICwgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3JMaWtlLnRvU3RyaW5nKCkgOiBlcnJvckxpa2UgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpKVxuICAgICAgICAsIChjYXVnaHRFcnIgaW5zdGFuY2VvZiBFcnJvciA/IGNhdWdodEVyci50b1N0cmluZygpIDogY2F1Z2h0RXJyICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoY2F1Z2h0RXJyKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgY2F1Z2h0RXJyKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCd0aHJvdycsIGFzc2VydFRocm93cyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Rocm93cycsIGFzc2VydFRocm93cyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ1Rocm93JywgYXNzZXJ0VGhyb3dzKTtcblxuICAvKipcbiAgICogIyMjIC5yZXNwb25kVG8obWV0aG9kWywgbXNnXSlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgbm9uLWZ1bmN0aW9uIG9iamVjdCwgYC5yZXNwb25kVG9gIGFzc2VydHMgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGhhcyBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIGBtZXRob2RgLiBUaGUgbWV0aG9kIGNhbiBiZSBvd24gb3JcbiAgICogaW5oZXJpdGVkLCBhbmQgaXQgY2FuIGJlIGVudW1lcmFibGUgb3Igbm9uLWVudW1lcmFibGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBDYXQoKSkudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIGZ1bmN0aW9uLCBgLnJlc3BvbmRUb2AgYXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQnc1xuICAgKiBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYC4gQWdhaW4sIHRoZVxuICAgKiBtZXRob2QgY2FuIGJlIG93biBvciBpbmhlcml0ZWQsIGFuZCBpdCBjYW4gYmUgZW51bWVyYWJsZSBvciBub24tZW51bWVyYWJsZS5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoQ2F0KS50by5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQWRkIGAuaXRzZWxmYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBmb3JjZSBgLnJlc3BvbmRUb2AgdG8gdHJlYXQgdGhlXG4gICAqIHRhcmdldCBhcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGV2ZW4gaWYgaXQncyBhIGZ1bmN0aW9uLiBUaHVzLCBpdCBhc3NlcnRzXG4gICAqIHRoYXQgdGhlIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYCwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCdzIGBwcm90b3R5cGVgIHByb3BlcnR5IGhhcyBhIG1ldGhvZCB3aXRoIHRoZVxuICAgKiBnaXZlbiBuYW1lIGBtZXRob2RgLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICogICAgIENhdC5oaXNzID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoQ2F0KS5pdHNlbGYudG8ucmVzcG9uZFRvKCdoaXNzJykuYnV0Lm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogV2hlbiBub3QgYWRkaW5nIGAuaXRzZWxmYCwgaXQncyBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlXG4gICAqIHVzaW5nIGAucmVzcG9uZFRvYC4gU2VlIHRoZSBgLmFgIGRvYyBmb3IgaW5mbyBvbiBjaGVja2luZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBDYXQoKSkudG8uYmUuYW4oJ29iamVjdCcpLnRoYXQucmVzcG9uZHNUbygnbWVvdycpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnJlc3BvbmRUb2AuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBEb2cgKCkge31cbiAgICogICAgIERvZy5wcm90b3R5cGUuYmFyayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBEb2coKSkudG8ubm90LnJlc3BvbmRUbygnbWVvdycpO1xuICAgKlxuICAgKiBgLnJlc3BvbmRUb2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt9KS50by5yZXNwb25kVG8oJ21lb3cnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3Qoe30sICdub29vIHdoeSBmYWlsPz8nKS50by5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAucmVzcG9uZHNUb2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5yZXNwb25kVG9gLlxuICAgKlxuICAgKiBAbmFtZSByZXNwb25kVG9cbiAgICogQGFsaWFzIHJlc3BvbmRzVG9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gcmVzcG9uZFRvIChtZXRob2QsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBpdHNlbGYgPSBmbGFnKHRoaXMsICdpdHNlbGYnKVxuICAgICAgLCBjb250ZXh0ID0gKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvYmogJiYgIWl0c2VsZilcbiAgICAgICAgPyBvYmoucHJvdG90eXBlW21ldGhvZF1cbiAgICAgICAgOiBvYmpbbWV0aG9kXTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAnZnVuY3Rpb24nID09PSB0eXBlb2YgY29udGV4dFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byByZXNwb25kIHRvICcgKyBfLmluc3BlY3QobWV0aG9kKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgcmVzcG9uZCB0byAnICsgXy5pbnNwZWN0KG1ldGhvZClcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgncmVzcG9uZFRvJywgcmVzcG9uZFRvKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgncmVzcG9uZHNUbycsIHJlc3BvbmRUbyk7XG5cbiAgLyoqXG4gICAqICMjIyAuaXRzZWxmXG4gICAqXG4gICAqIEZvcmNlcyBhbGwgYC5yZXNwb25kVG9gIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGJlaGF2ZSBhcyBpZlxuICAgKiB0aGUgdGFyZ2V0IGlzIGEgbm9uLWZ1bmN0aW9uIG9iamVjdCwgZXZlbiBpZiBpdCdzIGEgZnVuY3Rpb24uIFRodXMsIGl0XG4gICAqIGNhdXNlcyBgLnJlc3BvbmRUb2AgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW5cbiAgICogbmFtZSwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCdzIGBwcm90b3R5cGVgIHByb3BlcnR5IGhhcyBhXG4gICAqIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICogICAgIENhdC5oaXNzID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3QoQ2F0KS5pdHNlbGYudG8ucmVzcG9uZFRvKCdoaXNzJykuYnV0Lm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQG5hbWUgaXRzZWxmXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnaXRzZWxmJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ2l0c2VsZicsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5zYXRpc2Z5KG1hdGNoZXJbLCBtc2ddKVxuICAgKlxuICAgKiBJbnZva2VzIHRoZSBnaXZlbiBgbWF0Y2hlcmAgZnVuY3Rpb24gd2l0aCB0aGUgdGFyZ2V0IGJlaW5nIHBhc3NlZCBhcyB0aGVcbiAgICogZmlyc3QgYXJndW1lbnQsIGFuZCBhc3NlcnRzIHRoYXQgdGhlIHZhbHVlIHJldHVybmVkIGlzIHRydXRoeS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5zYXRpc2Z5KGZ1bmN0aW9uKG51bSkge1xuICAgKiAgICAgICByZXR1cm4gbnVtID4gMDsgXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zYXRpc2Z5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3Quc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDI7XG4gICAqICAgICB9KTtcbiAgICpcbiAgICogYC5zYXRpc2Z5YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDI7XG4gICAqICAgICB9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLnNhdGlzZmllc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5zYXRpc2Z5YC5cbiAgICpcbiAgICogQG5hbWUgc2F0aXNmeVxuICAgKiBAYWxpYXMgc2F0aXNmaWVzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1hdGNoZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNhdGlzZnkgKG1hdGNoZXIsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB2YXIgcmVzdWx0ID0gbWF0Y2hlcihvYmopO1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICByZXN1bHRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gc2F0aXNmeSAnICsgXy5vYmpEaXNwbGF5KG1hdGNoZXIpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBzYXRpc2Z5JyArIF8ub2JqRGlzcGxheShtYXRjaGVyKVxuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IGZhbHNlIDogdHJ1ZVxuICAgICAgLCByZXN1bHRcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc2F0aXNmeScsIHNhdGlzZnkpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzYXRpc2ZpZXMnLCBzYXRpc2Z5KTtcblxuICAvKipcbiAgICogIyMjIC5jbG9zZVRvKGV4cGVjdGVkLCBkZWx0YVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIHRoYXQncyB3aXRoaW4gYSBnaXZlbiArLy0gYGRlbHRhYCByYW5nZVxuICAgKiBvZiB0aGUgZ2l2ZW4gbnVtYmVyIGBleHBlY3RlZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGVcbiAgICogdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5lcXVhbCgxLjUpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDEsIDAuNSk7XG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDIsIDAuNSk7XG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDEsIDEpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmNsb3NlVG9gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uZXF1YWwoMS41KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxLjUpLnRvLm5vdC5iZS5jbG9zZVRvKDMsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5jbG9zZVRvYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMS41KS50by5iZS5jbG9zZVRvKDMsIDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLjUsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5jbG9zZVRvKDMsIDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5hcHByb3hpbWF0ZWx5YCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmNsb3NlVG9gLlxuICAgKlxuICAgKiBAbmFtZSBjbG9zZVRvXG4gICAqIEBhbGlhcyBhcHByb3hpbWF0ZWx5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNsb3NlVG8oZXhwZWN0ZWQsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ251bWJlcicpO1xuICAgIGlmICh0eXBlb2YgZXhwZWN0ZWQgIT09ICdudW1iZXInIHx8IHR5cGVvZiBkZWx0YSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ3RoZSBhcmd1bWVudHMgdG8gY2xvc2VUbyBvciBhcHByb3hpbWF0ZWx5IG11c3QgYmUgbnVtYmVycycsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIE1hdGguYWJzKG9iaiAtIGV4cGVjdGVkKSA8PSBkZWx0YVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBjbG9zZSB0byAnICsgZXhwZWN0ZWQgKyAnICsvLSAnICsgZGVsdGFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIGNsb3NlIHRvICcgKyBleHBlY3RlZCArICcgKy8tICcgKyBkZWx0YVxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdjbG9zZVRvJywgY2xvc2VUbyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2FwcHJveGltYXRlbHknLCBjbG9zZVRvKTtcblxuICAvLyBOb3RlOiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGlmIHRlc3RpbmcgZm9yIGluY2x1c2lvbiBpbnN0ZWFkIG9mIHNhbWVuZXNzLlxuICBmdW5jdGlvbiBpc1N1YnNldE9mKHN1YnNldCwgc3VwZXJzZXQsIGNtcCwgY29udGFpbnMsIG9yZGVyZWQpIHtcbiAgICBpZiAoIWNvbnRhaW5zKSB7XG4gICAgICBpZiAoc3Vic2V0Lmxlbmd0aCAhPT0gc3VwZXJzZXQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBzdXBlcnNldCA9IHN1cGVyc2V0LnNsaWNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnNldC5ldmVyeShmdW5jdGlvbihlbGVtLCBpZHgpIHtcbiAgICAgIGlmIChvcmRlcmVkKSByZXR1cm4gY21wID8gY21wKGVsZW0sIHN1cGVyc2V0W2lkeF0pIDogZWxlbSA9PT0gc3VwZXJzZXRbaWR4XTtcblxuICAgICAgaWYgKCFjbXApIHtcbiAgICAgICAgdmFyIG1hdGNoSWR4ID0gc3VwZXJzZXQuaW5kZXhPZihlbGVtKTtcbiAgICAgICAgaWYgKG1hdGNoSWR4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIFJlbW92ZSBtYXRjaCBmcm9tIHN1cGVyc2V0IHNvIG5vdCBjb3VudGVkIHR3aWNlIGlmIGR1cGxpY2F0ZSBpbiBzdWJzZXQuXG4gICAgICAgIGlmICghY29udGFpbnMpIHN1cGVyc2V0LnNwbGljZShtYXRjaElkeCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3VwZXJzZXQuc29tZShmdW5jdGlvbihlbGVtMiwgbWF0Y2hJZHgpIHtcbiAgICAgICAgaWYgKCFjbXAoZWxlbSwgZWxlbTIpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgLy8gUmVtb3ZlIG1hdGNoIGZyb20gc3VwZXJzZXQgc28gbm90IGNvdW50ZWQgdHdpY2UgaWYgZHVwbGljYXRlIGluIHN1YnNldC5cbiAgICAgICAgaWYgKCFjb250YWlucykgc3VwZXJzZXQuc3BsaWNlKG1hdGNoSWR4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm1lbWJlcnMoc2V0WywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgYXJyYXkgaGFzIHRoZSBzYW1lIG1lbWJlcnMgYXMgdGhlIGdpdmVuIGFycmF5XG4gICAqIGBzZXRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5tZW1iZXJzKFsyLCAxLCAzXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDJdKS50by5oYXZlLm1lbWJlcnMoWzIsIDEsIDJdKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgbWVtYmVycyBhcmUgY29tcGFyZWQgdXNpbmcgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkuIEFkZCBgLmRlZXBgXG4gICAqIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIHVzZSBkZWVwIGVxdWFsaXR5IGluc3RlYWQuIFNlZSB0aGUgYGRlZXAtZXFsYFxuICAgKiBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIG1lbWJlciBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5oYXZlLmRlZXAubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5oYXZlLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBvcmRlciBkb2Vzbid0IG1hdHRlci4gQWRkIGAub3JkZXJlZGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG9cbiAgICogcmVxdWlyZSB0aGF0IG1lbWJlcnMgYXBwZWFyIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDIsIDNdKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubWVtYmVycyhbMiwgMSwgM10pXG4gICAqICAgICAgIC5idXQubm90Lm9yZGVyZWQubWVtYmVycyhbMiwgMSwgM10pO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBib3RoIGFycmF5cyBtdXN0IGJlIHRoZSBzYW1lIHNpemUuIEFkZCBgLmluY2x1ZGVgIGVhcmxpZXIgaW5cbiAgICogdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdCB0aGUgdGFyZ2V0J3MgbWVtYmVycyBiZSBhIHN1cGVyc2V0IG9mIHRoZVxuICAgKiBleHBlY3RlZCBtZW1iZXJzLiBOb3RlIHRoYXQgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBpbiB0aGUgc3Vic2V0IHdoZW5cbiAgICogYC5pbmNsdWRlYCBpcyBhZGRlZC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBpcyBhIHN1cGVyc2V0IG9mIFsxLCAyXSBidXQgbm90IGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqXG4gICAqICAgICAvLyBEdXBsaWNhdGVzIGluIHRoZSBzdWJzZXQgYXJlIGlnbm9yZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMiwgMiwgMl0pO1xuICAgKlxuICAgKiBgLmRlZXBgLCBgLm9yZGVyZWRgLCBhbmQgYC5pbmNsdWRlYCBjYW4gYWxsIGJlIGNvbWJpbmVkLiBIb3dldmVyLCBpZlxuICAgKiBgLmluY2x1ZGVgIGFuZCBgLm9yZGVyZWRgIGFyZSBjb21iaW5lZCwgdGhlIG9yZGVyaW5nIGJlZ2lucyBhdCB0aGUgc3RhcnQgb2ZcbiAgICogYm90aCBhcnJheXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoW3thOiAxfSwge2I6IDJ9LCB7YzogM31dKVxuICAgKiAgICAgICAudG8uaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhbe2E6IDF9LCB7YjogMn1dKVxuICAgKiAgICAgICAuYnV0Lm5vdC5pbmNsdWRlLmRlZXAub3JkZXJlZC5tZW1iZXJzKFt7YjogMn0sIHtjOiAzfV0pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm1lbWJlcnNgLiBIb3dldmVyLCBpdCdzXG4gICAqIGRhbmdlcm91cyB0byBkbyBzby4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnNcbiAgICogYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBhcnJheSBkb2Vzbid0IGhhdmUgYWxsIG9mIHRoZSBzYW1lIG1lbWJlcnMgYXNcbiAgICogdGhlIGdpdmVuIGFycmF5IGBzZXRgIGJ1dCBtYXkgb3IgbWF5IG5vdCBoYXZlIHNvbWUgb2YgdGhlbS4gSXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb25cbiAgICogdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuaW5jbHVkZSgzKS5hbmQubm90LmluY2x1ZGUoNCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFszLCA0XSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm1lbWJlcnNgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmhhdmUubWVtYmVycyhbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLm1lbWJlcnMoWzEsIDIsIDNdKTtcbiAgICpcbiAgICogQG5hbWUgbWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21lbWJlcnMnLCBmdW5jdGlvbiAoc3Vic2V0LCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIG5ldyBBc3NlcnRpb24oc3Vic2V0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcblxuICAgIHZhciBjb250YWlucyA9IGZsYWcodGhpcywgJ2NvbnRhaW5zJyk7XG4gICAgdmFyIG9yZGVyZWQgPSBmbGFnKHRoaXMsICdvcmRlcmVkJyk7XG5cbiAgICB2YXIgc3ViamVjdCwgZmFpbE1zZywgZmFpbE5lZ2F0ZU1zZywgbGVuZ3RoQ2hlY2s7XG5cbiAgICBpZiAoY29udGFpbnMpIHtcbiAgICAgIHN1YmplY3QgPSBvcmRlcmVkID8gJ2FuIG9yZGVyZWQgc3VwZXJzZXQnIDogJ2Egc3VwZXJzZXQnO1xuICAgICAgZmFpbE1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIGJlICcgKyBzdWJqZWN0ICsgJyBvZiAje2V4cH0nO1xuICAgICAgZmFpbE5lZ2F0ZU1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSAnICsgc3ViamVjdCArICcgb2YgI3tleHB9JztcbiAgICB9IGVsc2Uge1xuICAgICAgc3ViamVjdCA9IG9yZGVyZWQgPyAnb3JkZXJlZCBtZW1iZXJzJyA6ICdtZW1iZXJzJztcbiAgICAgIGZhaWxNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIHRoZSBzYW1lICcgKyBzdWJqZWN0ICsgJyBhcyAje2V4cH0nO1xuICAgICAgZmFpbE5lZ2F0ZU1zZyA9ICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIHRoZSBzYW1lICcgKyBzdWJqZWN0ICsgJyBhcyAje2V4cH0nO1xuICAgIH1cblxuICAgIHZhciBjbXAgPSBmbGFnKHRoaXMsICdkZWVwJykgPyBfLmVxbCA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBpc1N1YnNldE9mKHN1YnNldCwgb2JqLCBjbXAsIGNvbnRhaW5zLCBvcmRlcmVkKVxuICAgICAgLCBmYWlsTXNnXG4gICAgICAsIGZhaWxOZWdhdGVNc2dcbiAgICAgICwgc3Vic2V0XG4gICAgICAsIG9ialxuICAgICAgLCB0cnVlXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAub25lT2YobGlzdFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbWVtYmVyIG9mIHRoZSBnaXZlbiBhcnJheSBgbGlzdGAuIEhvd2V2ZXIsXG4gICAqIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5vbmVPZihbMSwgMiwgM10pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQ29tcGFyaXNvbnMgYXJlIHBlcmZvcm1lZCB1c2luZyBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eS5cbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5vbmVPZmAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLm9uZU9mKFsyLCAzLCA0XSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm9uZU9mYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUub25lT2YoWzIsIDMsIDRdLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLm9uZU9mKFsyLCAzLCA0XSk7XG4gICAqXG4gICAqIEBuYW1lIG9uZU9mXG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IGxpc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZU9mIChsaXN0LCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZXhwZWN0ZWQgPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihsaXN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBsaXN0LmluZGV4T2YoZXhwZWN0ZWQpID4gLTFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgb25lIG9mICN7ZXhwfSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIG9uZSBvZiAje2V4cH0nXG4gICAgICAsIGxpc3RcbiAgICAgICwgZXhwZWN0ZWRcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnb25lT2YnLCBvbmVPZik7XG5cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuY2hhbmdlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGZ1bmN0aW9uXG4gICAqIGBzdWJqZWN0YCByZXR1cm5zIGEgZGlmZmVyZW50IHZhbHVlIHdoZW4gaXQncyBpbnZva2VkIGJlZm9yZSB0aGUgdGFyZ2V0XG4gICAqIGZ1bmN0aW9uIGNvbXBhcmVkIHRvIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyd2FyZC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IGBzdWJqZWN0YCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICB2YXIgZG90cyA9ICcnXG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBkb3RzICs9ICcuJzsgfVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChnZXREb3RzKCkpLnRvLmVxdWFsKCcnKTtcbiAgICogICAgIGFkZERvdCgpO1xuICAgKiAgICAgZXhwZWN0KGdldERvdHMoKSkudG8uZXF1YWwoJy4nKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8uY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmNoYW5nZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBkaWZmZXJlbnQgYmVmb3JlIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYWZ0ZXJ3YXJkLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge2RvdHM6ICcnfVxuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgbXlPYmouZG90cyArPSAnLic7IH07XG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG15T2JqKS50by5oYXZlLnByb3BlcnR5KCdkb3RzJywgJycpO1xuICAgKiAgICAgYWRkRG90KCk7XG4gICAqICAgICBleHBlY3QobXlPYmopLnRvLmhhdmUucHJvcGVydHkoJ2RvdHMnLCAnLicpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkRG90KS50by5jaGFuZ2UobXlPYmosICdkb3RzJyk7XG4gICAqXG4gICAqIFN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBiZWZvcmUgYW5kIGFmdGVyIHZhbHVlcy5cbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5jaGFuZ2VgLlxuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UoZ2V0RG90cyk7XG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7ZG90czogJyd9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UobXlPYmosICdkb3RzJyk7XG4gICAqXG4gICAqIGAuY2hhbmdlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHtkb3RzOiAnJ31cbiAgICogICAgICAgLCBhZGREb3QgPSBmdW5jdGlvbiAoKSB7IG15T2JqLmRvdHMgKz0gJy4nOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8ubm90LmNoYW5nZShteU9iaiwgJ2RvdHMnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICB2YXIgZG90cyA9ICcnXG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBkb3RzICs9ICcuJzsgfVxuICAgKiAgICAgICAsIGdldERvdHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBkb3RzOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZERvdCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLm5vdC5jaGFuZ2UoZ2V0RG90cyk7XG4gICAqXG4gICAqIGAuY2hhbmdlYCBhbHNvIGNhdXNlcyBhbGwgYC5ieWAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG9cbiAgICogYXNzZXJ0IGhvdyBtdWNoIGEgbnVtZXJpYyBzdWJqZWN0IHdhcyBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGJ5LiBIb3dldmVyLFxuICAgKiBpdCdzIGRhbmdlcm91cyB0byB1c2UgYC5jaGFuZ2UuYnlgLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXNcbiAgICogdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaW5jcmVhc2VzIGJ5XG4gICAqIHRoZSBnaXZlbiBkZWx0YSwgb3IgdGhhdCBpdCBkZWNyZWFzZXMgYnkgdGhlIGdpdmVuIGRlbHRhLiBJdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvblxuICAgKiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmNoYW5nZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuY2hhbmdlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5jaGFuZ2VgLlxuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VcbiAgICogQGFsaWFzIGNoYW5nZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRDaGFuZ2VzIChzdWJqZWN0LCBwcm9wLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZm4gPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihmbiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIHZhciBpbml0aWFsO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3RbcHJvcF07XG4gICAgfVxuXG4gICAgZm4oKTtcblxuICAgIHZhciBmaW5hbCA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gc3ViamVjdCgpIDogc3ViamVjdFtwcm9wXTtcbiAgICB2YXIgbXNnT2JqID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBpbml0aWFsIDogJy4nICsgcHJvcDtcblxuICAgIC8vIFRoaXMgZ2V0cyBmbGFnZ2VkIGJlY2F1c2Ugb2YgdGhlIC5ieShkZWx0YSkgYXNzZXJ0aW9uXG4gICAgZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonLCBtc2dPYmopO1xuICAgIGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJywgaW5pdGlhbCk7XG4gICAgZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJywgZmluYWwpO1xuICAgIGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InLCAnY2hhbmdlJyk7XG4gICAgZmxhZyh0aGlzLCAncmVhbERlbHRhJywgZmluYWwgIT09IGluaXRpYWwpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpbml0aWFsICE9PSBmaW5hbFxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gY2hhbmdlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGNoYW5nZSdcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnY2hhbmdlJywgYXNzZXJ0Q2hhbmdlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2NoYW5nZXMnLCBhc3NlcnRDaGFuZ2VzKTtcblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZShzdWJqZWN0WywgcHJvcFssIG1zZ11dKVxuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYC5pbmNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGdyZWF0ZXIgbnVtYmVyIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gd2hlbiBpdCdzIGludm9rZWQgYmVmb3JlaGFuZC4gYC5pbmNyZWFzZWAgYWxzb1xuICAgKiBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGFzc2VydCBob3cgbXVjaFxuICAgKiBncmVhdGVyIG9mIGEgbnVtYmVyIGlzIHJldHVybmVkLiBJdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHJldHVyblxuICAgKiB2YWx1ZSBpbmNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudCwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIGl0IGluY3JlYXNlZFxuICAgKiBieSBhbnkgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IHZhbCArPSAyOyB9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UoZ2V0VmFsKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKGdldFZhbCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHR3byBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCBgLmluY3JlYXNlYCBhc3NlcnRzIHRoYXQgdGhlIHZhbHVlIG9mIHRoZVxuICAgKiBnaXZlbiBvYmplY3QgYHN1YmplY3RgJ3MgYHByb3BgIHByb3BlcnR5IGlzIGdyZWF0ZXIgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byBiZWZvcmVoYW5kLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluY3JlYXNlYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSBzdWJqZWN0IGVpdGhlciBkZWNyZWFzZXMsIG9yIHRoYXQgaXQgc3RheXMgdGhlIHNhbWUuXG4gICAqIEl0J3Mgb2Z0ZW4gYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW5cbiAgICogd3JpdGUgYW4gYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSBzdWJqZWN0IGlzIGV4cGVjdGVkIHRvIGRlY3JlYXNlLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgaXRcbiAgICogZGVjcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8ubm90LmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiBcbiAgICogV2hlbiB0aGUgc3ViamVjdCBpcyBleHBlY3RlZCB0byBzdGF5IHRoZSBzYW1lLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0XG4gICAqIGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5jaGFuZ2UobXlPYmosICd2YWwnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuaW5jcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuaW5jcmVhc2VgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC4gV2hlbiBub3QgcHJvdmlkaW5nIHR3byBhcmd1bWVudHMsIGFsd2F5c1xuICAgKiB1c2UgdGhlIHNlY29uZCBmb3JtLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8uaW5jcmVhc2UobXlPYmosICd2YWwnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICB2YXIgdmFsID0gMVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuICAgKiAgICAgICAsIGdldFZhbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbDsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaW5jcmVhc2UoZ2V0VmFsKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaW5jcmVhc2VzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmluY3JlYXNlYC5cbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VcbiAgICogQGFsaWFzIGluY3JlYXNlc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc3ViamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEluY3JlYXNlcyAoc3ViamVjdCwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIGZuID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24oZm4sIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG5cbiAgICB2YXIgaW5pdGlhbDtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0W3Byb3BdO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXJcbiAgICBuZXcgQXNzZXJ0aW9uKGluaXRpYWwsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ251bWJlcicpO1xuXG4gICAgZm4oKTtcblxuICAgIHZhciBmaW5hbCA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gc3ViamVjdCgpIDogc3ViamVjdFtwcm9wXTtcbiAgICB2YXIgbXNnT2JqID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBpbml0aWFsIDogJy4nICsgcHJvcDtcblxuICAgIGZsYWcodGhpcywgJ2RlbHRhTXNnT2JqJywgbXNnT2JqKTtcbiAgICBmbGFnKHRoaXMsICdpbml0aWFsRGVsdGFWYWx1ZScsIGluaXRpYWwpO1xuICAgIGZsYWcodGhpcywgJ2ZpbmFsRGVsdGFWYWx1ZScsIGZpbmFsKTtcbiAgICBmbGFnKHRoaXMsICdkZWx0YUJlaGF2aW9yJywgJ2luY3JlYXNlJyk7XG4gICAgZmxhZyh0aGlzLCAncmVhbERlbHRhJywgZmluYWwgLSBpbml0aWFsKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgZmluYWwgLSBpbml0aWFsID4gMFxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gaW5jcmVhc2UnXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBub3QgaW5jcmVhc2UnXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luY3JlYXNlJywgYXNzZXJ0SW5jcmVhc2VzKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaW5jcmVhc2VzJywgYXNzZXJ0SW5jcmVhc2VzKTtcblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZShzdWJqZWN0WywgcHJvcFssIG1zZ11dKVxuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYC5kZWNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGxlc3NlciBudW1iZXIgd2hlbiBpdCdzIGludm9rZWQgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byB3aGVuIGl0J3MgaW52b2tlZCBiZWZvcmVoYW5kLiBgLmRlY3JlYXNlYCBhbHNvXG4gICAqIGNhdXNlcyBhbGwgYC5ieWAgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gYXNzZXJ0IGhvdyBtdWNoXG4gICAqIGxlc3NlciBvZiBhIG51bWJlciBpcyByZXR1cm5lZC4gSXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSByZXR1cm5cbiAgICogdmFsdWUgZGVjcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQsIHJhdGhlciB0aGFuIGFzc2VydGluZyBpdCBkZWNyZWFzZWRcbiAgICogYnkgYW55IGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IHZhbCAtPSAyOyB9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShnZXRWYWwpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShnZXRWYWwpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC5kZWNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBsZXNzZXIgYWZ0ZXIgaW52b2tpbmcgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBjb21wYXJlZCB0byBiZWZvcmVoYW5kLiBcbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCAtPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5kZWNyZWFzZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogZGFuZ2Vyb3VzIHRvIGRvIHNvLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9uc1xuICAgKiBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaW5jcmVhc2VzLCBvciB0aGF0IGl0IHN0YXlzIHRoZSBzYW1lLlxuICAgKiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuXG4gICAqIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgc3ViamVjdCBpcyBleHBlY3RlZCB0byBpbmNyZWFzZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IGl0XG4gICAqIGluY3JlYXNlZCBieSB0aGUgZXhwZWN0ZWQgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLm5vdC5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gc3RheSB0aGUgc2FtZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAndmFsJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmRlY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmRlY3JlYXNlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXRWYWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWw7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmRlY3JlYXNlKGdldFZhbCk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmRlY3JlYXNlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5kZWNyZWFzZWAuXG4gICAqXG4gICAqIEBuYW1lIGRlY3JlYXNlXG4gICAqIEBhbGlhcyBkZWNyZWFzZXNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnREZWNyZWFzZXMgKHN1YmplY3QsIHByb3AsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBmbiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgdmFyIGluaXRpYWw7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkocHJvcCk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdFtwcm9wXTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyXG4gICAgbmV3IEFzc2VydGlvbihpbml0aWFsLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICBmbGFnKHRoaXMsICdkZWx0YU1zZ09iaicsIG1zZ09iaik7XG4gICAgZmxhZyh0aGlzLCAnaW5pdGlhbERlbHRhVmFsdWUnLCBpbml0aWFsKTtcbiAgICBmbGFnKHRoaXMsICdmaW5hbERlbHRhVmFsdWUnLCBmaW5hbCk7XG4gICAgZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicsICdkZWNyZWFzZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGluaXRpYWwgLSBmaW5hbCk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGZpbmFsIC0gaW5pdGlhbCA8IDBcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGRlY3JlYXNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGRlY3JlYXNlJ1xuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdkZWNyZWFzZScsIGFzc2VydERlY3JlYXNlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2RlY3JlYXNlcycsIGFzc2VydERlY3JlYXNlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuYnkoZGVsdGFbLCBtc2ddKVxuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhbiBgLmluY3JlYXNlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXRcbiAgICogdGhlIHN1YmplY3Qgb2YgdGhlIGAuaW5jcmVhc2VgIGFzc2VydGlvbiBpbmNyZWFzZWQgYnkgdGhlIGdpdmVuIGBkZWx0YWAuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhIGAuZGVjcmVhc2VgIGFzc2VydGlvbiBpbiB0aGUgY2hhaW4sIGAuYnlgIGFzc2VydHMgdGhhdCB0aGVcbiAgICogc3ViamVjdCBvZiB0aGUgYC5kZWNyZWFzZWAgYXNzZXJ0aW9uIGRlY3JlYXNlZCBieSB0aGUgZ2l2ZW4gYGRlbHRhYC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgc3VidHJhY3RUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCAtPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiBXaGVuIGZvbGxvd2luZyBhIGAuY2hhbmdlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHN1YmplY3Qgb2YgdGhlIGAuY2hhbmdlYCBhc3NlcnRpb24gZWl0aGVyIGluY3JlYXNlZCBvciBkZWNyZWFzZWQgYnkgdGhlXG4gICAqIGdpdmVuIGBkZWx0YWAuIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIHVzZSBgLmNoYW5nZS5ieWAuIFRoZSBwcm9ibGVtIGlzXG4gICAqIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zLiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlXG4gICAqIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0c1xuICAgKiB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmNoYW5nZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5ieWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCB0aGUgc3ViamVjdCBjaGFuZ2VkIGJ5IGl0cyBleHBlY3RlZCBkZWx0YSwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgaXQgZGlkbid0IGNoYW5nZSBieSBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgZGVsdGFzLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnV0Lm5vdC5ieSgzKTtcbiAgICpcbiAgICogYC5ieWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlIHRvXG4gICAqIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kXG4gICAqIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgzLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoYWRkVHdvLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgzKTtcbiAgICpcbiAgICogQG5hbWUgYnlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnREZWx0YShkZWx0YSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG5cbiAgICB2YXIgbXNnT2JqID0gZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonKTtcbiAgICB2YXIgaW5pdGlhbCA9IGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJyk7XG4gICAgdmFyIGZpbmFsID0gZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJyk7XG4gICAgdmFyIGJlaGF2aW9yID0gZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicpO1xuICAgIHZhciByZWFsRGVsdGEgPSBmbGFnKHRoaXMsICdyZWFsRGVsdGEnKTtcblxuICAgIHZhciBleHByZXNzaW9uO1xuICAgIGlmIChiZWhhdmlvciA9PT0gJ2NoYW5nZScpIHtcbiAgICAgIGV4cHJlc3Npb24gPSBNYXRoLmFicyhmaW5hbCAtIGluaXRpYWwpID09PSBNYXRoLmFicyhkZWx0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cHJlc3Npb24gPSByZWFsRGVsdGEgPT09IE1hdGguYWJzKGRlbHRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGV4cHJlc3Npb25cbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvICcgKyBiZWhhdmlvciArICcgYnkgJyArIGRlbHRhXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBub3QgJyArIGJlaGF2aW9yICsgJyBieSAnICsgZGVsdGFcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnYnknLCBhc3NlcnREZWx0YSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXh0ZW5zaWJsZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBleHRlbnNpYmxlLCB3aGljaCBtZWFucyB0aGF0IG5ldyBwcm9wZXJ0aWVzIGNhblxuICAgKiBiZSBhZGRlZCB0byBpdC4gUHJpbWl0aXZlcyBhcmUgbmV2ZXIgZXh0ZW5zaWJsZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXh0ZW5zaWJsZWAuXG4gICAqXG4gICAqICAgICB2YXIgbm9uRXh0ZW5zaWJsZU9iamVjdCA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSlcbiAgICogICAgICAgLCBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSlcbiAgICogICAgICAgLCBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub25FeHRlbnNpYmxlT2JqZWN0KS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgICogICAgIGV4cGVjdChzZWFsZWRPYmplY3QpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmV4dGVuc2libGU7XG4gICAqXG4gICAqIEBuYW1lIGV4dGVuc2libGVcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdleHRlbnNpYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuXG4gICAgLy8gSW4gRVM1LCBpZiB0aGUgYXJndW1lbnQgdG8gdGhpcyBtZXRob2QgaXMgYSBwcmltaXRpdmUsIHRoZW4gaXQgd2lsbCBjYXVzZSBhIFR5cGVFcnJvci5cbiAgICAvLyBJbiBFUzYsIGEgbm9uLW9iamVjdCBhcmd1bWVudCB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2FzIGEgbm9uLWV4dGVuc2libGUgb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIGZhbHNlLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0V4dGVuc2libGVcbiAgICAvLyBUaGUgZm9sbG93aW5nIHByb3ZpZGVzIEVTNiBiZWhhdmlvciBmb3IgRVM1IGVudmlyb25tZW50cy5cblxuICAgIHZhciBpc0V4dGVuc2libGUgPSBvYmogPT09IE9iamVjdChvYmopICYmIE9iamVjdC5pc0V4dGVuc2libGUob2JqKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNFeHRlbnNpYmxlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGV4dGVuc2libGUnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBleHRlbnNpYmxlJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLnNlYWxlZFxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzZWFsZWQsIHdoaWNoIG1lYW5zIHRoYXQgbmV3IHByb3BlcnRpZXMgY2FuJ3QgYmVcbiAgICogYWRkZWQgdG8gaXQsIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4ndCBiZSByZWNvbmZpZ3VyZWQgb3IgZGVsZXRlZC5cbiAgICogSG93ZXZlciwgaXQncyBwb3NzaWJsZSB0aGF0IGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbiBzdGlsbCBiZSByZWFzc2lnbmVkXG4gICAqIHRvIGRpZmZlcmVudCB2YWx1ZXMuIFByaW1pdGl2ZXMgYXJlIGFsd2F5cyBzZWFsZWQuXG4gICAqXG4gICAqICAgICB2YXIgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHNlYWxlZE9iamVjdCkudG8uYmUuc2VhbGVkO1xuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8uYmUuc2VhbGVkO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLnNlYWxlZDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5zZWFsZWRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLnNlYWxlZDtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEBuYW1lIHNlYWxlZFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ3NlYWxlZCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIHNlYWxlZCBvcmRpbmFyeSBvYmplY3QsIHNpbXBseSByZXR1cm4gdHJ1ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzU2VhbGVkXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNTZWFsZWQgPSBvYmogPT09IE9iamVjdChvYmopID8gT2JqZWN0LmlzU2VhbGVkKG9iaikgOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpc1NlYWxlZFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBzZWFsZWQnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBzZWFsZWQnXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZnJvemVuXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGZyb3plbiwgd2hpY2ggbWVhbnMgdGhhdCBuZXcgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgKiBhZGRlZCB0byBpdCwgYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbid0IGJlIHJlYXNzaWduZWQgdG8gZGlmZmVyZW50XG4gICAqIHZhbHVlcywgcmVjb25maWd1cmVkLCBvciBkZWxldGVkLiBQcmltaXRpdmVzIGFyZSBhbHdheXMgZnJvemVuLlxuICAgKlxuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGZyb3plbk9iamVjdCkudG8uYmUuZnJvemVuO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmZyb3plbjtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5mcm96ZW5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmJlLmZyb3plbjtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5mcm96ZW47XG4gICAqXG4gICAqIEBuYW1lIGZyb3plblxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2Zyb3plbicsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIGZyb3plbiBvcmRpbmFyeSBvYmplY3QsIHNpbXBseSByZXR1cm4gdHJ1ZS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzRnJvemVuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNGcm96ZW4gPSBvYmogPT09IE9iamVjdChvYmopID8gT2JqZWN0LmlzRnJvemVuKG9iaikgOiB0cnVlO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBpc0Zyb3plblxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBmcm96ZW4nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBmcm96ZW4nXG4gICAgKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuZmluaXRlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyLCBhbmQgaXNuJ3QgYE5hTmAgb3IgcG9zaXRpdmUvbmVnYXRpdmVcbiAgICogYEluZmluaXR5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5maW5pdGU7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZmluaXRlYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSBzdWJqZWN0IGVpdGhlciBpc24ndCBhIG51bWJlciwgb3IgdGhhdCBpdCdzIGBOYU5gLCBvclxuICAgKiB0aGF0IGl0J3MgcG9zaXRpdmUgYEluZmluaXR5YCwgb3IgdGhhdCBpdCdzIG5lZ2F0aXZlIGBJbmZpbml0eWAuIEl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gYmUgYSBudW1iZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogdGhhdCBpdCdzIHRoZSBleHBlY3RlZCB0eXBlLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBpc24ndCBvbmUgb2ZcbiAgICogbWFueSB1bmV4cGVjdGVkIHR5cGVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBgTmFOYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5XG4gICAqIHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoTmFOKS50by5iZS5OYU47IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoTmFOKS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlIHBvc2l0aXZlIGluZmluaXR5LCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdChJbmZpbml0eSkudG8uZXF1YWwoSW5maW5pdHkpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KEluZmluaXR5KS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlIG5lZ2F0aXZlIGluZmluaXR5LCBpdCdzIG9mdGVuIGJlc3QgdG9cbiAgICogYXNzZXJ0IGV4YWN0bHkgdGhhdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgtSW5maW5pdHkpLnRvLmVxdWFsKC1JbmZpbml0eSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoLUluZmluaXR5KS50by5ub3QuYmUuZmluaXRlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmZpbml0ZTtcbiAgICpcbiAgICogQG5hbWUgZmluaXRlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZmluaXRlJywgZnVuY3Rpb24obXNnKSB7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHR5cGVvZiBvYmogPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUob2JqKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhIGZpbml0ZSBudW1iZXInXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBhIGZpbml0ZSBudW1iZXInXG4gICAgKTtcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuICBjaGFpLmV4cGVjdCA9IGZ1bmN0aW9uICh2YWwsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IGNoYWkuQXNzZXJ0aW9uKHZhbCwgbWVzc2FnZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0sIFtvcGVyYXRvcl0pXG4gICAqXG4gICAqIFRocm93IGEgZmFpbHVyZS5cbiAgICpcbiAgICogQG5hbWUgZmFpbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGNoYWkuZXhwZWN0LmZhaWwgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IpIHtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnZXhwZWN0LmZhaWwoKSc7XG4gICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IobWVzc2FnZSwge1xuICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgLCBleHBlY3RlZDogZXhwZWN0ZWRcbiAgICAgICwgb3BlcmF0b3I6IG9wZXJhdG9yXG4gICAgfSwgY2hhaS5leHBlY3QuZmFpbCk7XG4gIH07XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuICB2YXIgQXNzZXJ0aW9uID0gY2hhaS5Bc3NlcnRpb247XG5cbiAgZnVuY3Rpb24gbG9hZFNob3VsZCAoKSB7XG4gICAgLy8gZXhwbGljaXRseSBkZWZpbmUgdGhpcyBtZXRob2QgYXMgZnVuY3Rpb24gYXMgdG8gaGF2ZSBpdCdzIG5hbWUgdG8gaW5jbHVkZSBhcyBgc3NmaWBcbiAgICBmdW5jdGlvbiBzaG91bGRHZXR0ZXIoKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFN0cmluZ1xuICAgICAgICAgIHx8IHRoaXMgaW5zdGFuY2VvZiBOdW1iZXJcbiAgICAgICAgICB8fCB0aGlzIGluc3RhbmNlb2YgQm9vbGVhblxuICAgICAgICAgIHx8IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdGhpcyBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzc2VydGlvbih0aGlzLnZhbHVlT2YoKSwgbnVsbCwgc2hvdWxkR2V0dGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKHRoaXMsIG51bGwsIHNob3VsZEdldHRlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3VsZFNldHRlcih2YWx1ZSkge1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvY2hhaS9pc3N1ZXMvODY6IHRoaXMgbWFrZXNcbiAgICAgIC8vIGB3aGF0ZXZlci5zaG91bGQgPSBzb21lVmFsdWVgIGFjdHVhbGx5IHNldCBgc29tZVZhbHVlYCwgd2hpY2ggaXNcbiAgICAgIC8vIGVzcGVjaWFsbHkgdXNlZnVsIGZvciBgZ2xvYmFsLnNob3VsZCA9IHJlcXVpcmUoJ2NoYWknKS5zaG91bGQoKWAuXG4gICAgICAvL1xuICAgICAgLy8gTm90ZSB0aGF0IHdlIGhhdmUgdG8gdXNlIFtbRGVmaW5lUHJvcGVydHldXSBpbnN0ZWFkIG9mIFtbUHV0XV1cbiAgICAgIC8vIHNpbmNlIG90aGVyd2lzZSB3ZSB3b3VsZCB0cmlnZ2VyIHRoaXMgdmVyeSBzZXR0ZXIhXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Nob3VsZCcsIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gbW9kaWZ5IE9iamVjdC5wcm90b3R5cGUgdG8gaGF2ZSBgc2hvdWxkYFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCAnc2hvdWxkJywge1xuICAgICAgc2V0OiBzaG91bGRTZXR0ZXJcbiAgICAgICwgZ2V0OiBzaG91bGRHZXR0ZXJcbiAgICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICB2YXIgc2hvdWxkID0ge307XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgICAqXG4gICAgICogVGhyb3cgYSBmYWlsdXJlLlxuICAgICAqXG4gICAgICogQG5hbWUgZmFpbFxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3BlcmF0b3JcbiAgICAgKiBAbmFtZXNwYWNlIEJERFxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG5cbiAgICBzaG91bGQuZmFpbCA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvcikge1xuICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ3Nob3VsZC5mYWlsKCknO1xuICAgICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IobWVzc2FnZSwge1xuICAgICAgICAgIGFjdHVhbDogYWN0dWFsXG4gICAgICAgICwgZXhwZWN0ZWQ6IGV4cGVjdGVkXG4gICAgICAgICwgb3BlcmF0b3I6IG9wZXJhdG9yXG4gICAgICB9LCBzaG91bGQuZmFpbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyBub24tc3RyaWN0IGVxdWFsaXR5IChgPT1gKSBvZiBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQuZXF1YWwoMywgJzMnLCAnPT0gY29lcmNlcyB2YWx1ZXMgdG8gc3RyaW5ncycpO1xuICAgICAqXG4gICAgICogQG5hbWUgZXF1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmVxdWFsID0gZnVuY3Rpb24gKHZhbDEsIHZhbDIsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbih2YWwxLCBtc2cpLnRvLmVxdWFsKHZhbDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLnRocm93KGZ1bmN0aW9uLCBbY29uc3RydWN0b3Ivc3RyaW5nL3JlZ2V4cF0sIFtzdHJpbmcvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyB0aGF0IGBmdW5jdGlvbmAgd2lsbCB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuIGluc3RhbmNlIG9mXG4gICAgICogYGNvbnN0cnVjdG9yYCwgb3IgYWx0ZXJuYXRlbHkgdGhhdCBpdCB3aWxsIHRocm93IGFuIGVycm9yIHdpdGggbWVzc2FnZVxuICAgICAqIG1hdGNoaW5nIGByZWdleHBgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgJ2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvcicpO1xuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sIC9mdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3IvKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCBSZWZlcmVuY2VFcnJvcik7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IsICdmdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3InKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCBSZWZlcmVuY2VFcnJvciwgL2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvci8pO1xuICAgICAqXG4gICAgICogQG5hbWUgdGhyb3dcbiAgICAgKiBAYWxpYXMgVGhyb3dcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLlRocm93ID0gZnVuY3Rpb24gKGZuLCBlcnJ0LCBlcnJzLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZykudG8uVGhyb3coZXJydCwgZXJycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAuZXhpc3RcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqICAgICB2YXIgZm9vID0gJ2hpJztcbiAgICAgKlxuICAgICAqICAgICBzaG91bGQuZXhpc3QoZm9vLCAnZm9vIGV4aXN0cycpO1xuICAgICAqXG4gICAgICogQG5hbWUgZXhpc3RcbiAgICAgKiBAbmFtZXNwYWNlIFNob3VsZFxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG5cbiAgICBzaG91bGQuZXhpc3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2cpLnRvLmV4aXN0O1xuICAgIH1cblxuICAgIC8vIG5lZ2F0aW9uXG4gICAgc2hvdWxkLm5vdCA9IHt9XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLm5vdC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAgICpcbiAgICAgKiBBc3NlcnRzIG5vbi1zdHJpY3QgaW5lcXVhbGl0eSAoYCE9YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLm5vdC5lcXVhbCgzLCA0LCAndGhlc2UgbnVtYmVycyBhcmUgbm90IGVxdWFsJyk7XG4gICAgICpcbiAgICAgKiBAbmFtZSBub3QuZXF1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLm5vdC5lcXVhbCA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsMSwgbXNnKS50by5ub3QuZXF1YWwodmFsMik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAudGhyb3coZnVuY3Rpb24sIFtjb25zdHJ1Y3Rvci9yZWdleHBdLCBbbWVzc2FnZV0pXG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgYGZ1bmN0aW9uYCB3aWxsIF9ub3RfIHRocm93IGFuIGVycm9yIHRoYXQgaXMgYW4gaW5zdGFuY2Ugb2ZcbiAgICAgKiBgY29uc3RydWN0b3JgLCBvciBhbHRlcm5hdGVseSB0aGF0IGl0IHdpbGwgbm90IHRocm93IGFuIGVycm9yIHdpdGggbWVzc2FnZVxuICAgICAqIG1hdGNoaW5nIGByZWdleHBgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC5ub3QudGhyb3coZm4sIEVycm9yLCAnZnVuY3Rpb24gZG9lcyBub3QgdGhyb3cnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIG5vdC50aHJvd1xuICAgICAqIEBhbGlhcyBub3QuVGhyb3dcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLm5vdC5UaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJydCwgZXJycywgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2cpLnRvLm5vdC5UaHJvdyhlcnJ0LCBlcnJzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC5ub3QuZXhpc3RcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqICAgICB2YXIgYmFyID0gbnVsbDtcbiAgICAgKlxuICAgICAqICAgICBzaG91bGQubm90LmV4aXN0KGJhciwgJ2JhciBkb2VzIG5vdCBleGlzdCcpO1xuICAgICAqXG4gICAgICogQG5hbWUgbm90LmV4aXN0XG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLm5vdC5leGlzdCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZykudG8ubm90LmV4aXN0O1xuICAgIH1cblxuICAgIHNob3VsZFsndGhyb3cnXSA9IHNob3VsZFsnVGhyb3cnXTtcbiAgICBzaG91bGQubm90Wyd0aHJvdyddID0gc2hvdWxkLm5vdFsnVGhyb3cnXTtcblxuICAgIHJldHVybiBzaG91bGQ7XG4gIH07XG5cbiAgY2hhaS5zaG91bGQgPSBsb2FkU2hvdWxkO1xuICBjaGFpLlNob3VsZCA9IGxvYWRTaG91bGQ7XG59O1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjaGFpLCB1dGlsKSB7XG5cbiAgLyohXG4gICAqIENoYWkgZGVwZW5kZW5jaWVzLlxuICAgKi9cblxuICB2YXIgQXNzZXJ0aW9uID0gY2hhaS5Bc3NlcnRpb25cbiAgICAsIGZsYWcgPSB1dGlsLmZsYWc7XG5cbiAgLyohXG4gICAqIE1vZHVsZSBleHBvcnQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiAjIyMgYXNzZXJ0KGV4cHJlc3Npb24sIG1lc3NhZ2UpXG4gICAqXG4gICAqIFdyaXRlIHlvdXIgb3duIHRlc3QgZXhwcmVzc2lvbnMuXG4gICAqXG4gICAqICAgICBhc3NlcnQoJ2ZvbycgIT09ICdiYXInLCAnZm9vIGlzIG5vdCBiYXInKTtcbiAgICogICAgIGFzc2VydChBcnJheS5pc0FycmF5KFtdKSwgJ2VtcHR5IGFycmF5cyBhcmUgYXJyYXlzJyk7XG4gICAqXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cHJlc3Npb24gdG8gdGVzdCBmb3IgdHJ1dGhpbmVzc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSB0byBkaXNwbGF5IG9uIGVycm9yXG4gICAqIEBuYW1lIGFzc2VydFxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB2YXIgYXNzZXJ0ID0gY2hhaS5hc3NlcnQgPSBmdW5jdGlvbiAoZXhwcmVzcywgZXJybXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKG51bGwsIG51bGwsIGNoYWkuYXNzZXJ0LCB0cnVlKTtcbiAgICB0ZXN0LmFzc2VydChcbiAgICAgICAgZXhwcmVzc1xuICAgICAgLCBlcnJtc2dcbiAgICAgICwgJ1sgbmVnYXRpb24gbWVzc2FnZSB1bmF2YWlsYWJsZSBdJ1xuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0sIFtvcGVyYXRvcl0pXG4gICAqXG4gICAqIFRocm93IGEgZmFpbHVyZS4gTm9kZS5qcyBgYXNzZXJ0YCBtb2R1bGUtY29tcGF0aWJsZS5cbiAgICpcbiAgICogQG5hbWUgZmFpbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5mYWlsID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ2Fzc2VydC5mYWlsKCknO1xuICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgYWN0dWFsOiBhY3R1YWxcbiAgICAgICwgZXhwZWN0ZWQ6IGV4cGVjdGVkXG4gICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgIH0sIGFzc2VydC5mYWlsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc09rKG9iamVjdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgdHJ1dGh5LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzT2soJ2V2ZXJ5dGhpbmcnLCAnZXZlcnl0aGluZyBpcyBvaycpO1xuICAgKiAgICAgYXNzZXJ0LmlzT2soZmFsc2UsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc09rXG4gICAqIEBhbGlhcyBva1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3QgdG8gdGVzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNPayA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc09rLCB0cnVlKS5pcy5vaztcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE9rKG9iamVjdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgZmFsc3kuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RPaygnZXZlcnl0aGluZycsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2soZmFsc2UsICd0aGlzIHdpbGwgcGFzcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdE9rXG4gICAqIEBhbGlhcyBub3RPa1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3QgdG8gdGVzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RPayA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE9rLCB0cnVlKS5pcy5ub3Qub2s7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIG5vbi1zdHJpY3QgZXF1YWxpdHkgKGA9PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmVxdWFsKDMsICczJywgJz09IGNvZXJjZXMgdmFsdWVzIHRvIHN0cmluZ3MnKTtcbiAgICpcbiAgICogQG5hbWUgZXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuZXF1YWwsIHRydWUpO1xuXG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cCA9PSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBlcXVhbCAje2FjdH0nXG4gICAgICAsIGV4cFxuICAgICAgLCBhY3RcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIG5vbi1zdHJpY3QgaW5lcXVhbGl0eSAoYCE9YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90RXF1YWwoMywgNCwgJ3RoZXNlIG51bWJlcnMgYXJlIG5vdCBlcXVhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICB2YXIgdGVzdCA9IG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5ub3RFcXVhbCwgdHJ1ZSk7XG5cbiAgICB0ZXN0LmFzc2VydChcbiAgICAgICAgZXhwICE9IGZsYWcodGVzdCwgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGVxdWFsICN7YWN0fSdcbiAgICAgICwgZXhwXG4gICAgICAsIGFjdFxuICAgICAgLCB0cnVlXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgc3RyaWN0IGVxdWFsaXR5IChgPT09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgdHJ1ZSwgJ3RoZXNlIGJvb2xlYW5zIGFyZSBzdHJpY3RseSBlcXVhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBzdHJpY3RFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuc3RyaWN0RXF1YWwsIHRydWUpLnRvLmVxdWFsKGV4cCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHN0cmljdCBpbmVxdWFsaXR5IChgIT09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U3RyaWN0RXF1YWwoMywgJzMnLCAnbm8gY29lcmNpb24gZm9yIHN0cmljdCBlcXVhbGl0eScpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTdHJpY3RFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90U3RyaWN0RXF1YWwsIHRydWUpLnRvLm5vdC5lcXVhbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgYWN0dWFsYCBpcyBkZWVwbHkgZXF1YWwgdG8gYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwRXF1YWwoeyB0ZWE6ICdncmVlbicgfSwgeyB0ZWE6ICdncmVlbicgfSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBFcXVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFsaWFzIGRlZXBTdHJpY3RFcXVhbFxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcEVxdWFsID0gYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmRlZXBFcXVhbCwgdHJ1ZSkudG8uZXFsKGV4cCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0IHRoYXQgYGFjdHVhbGAgaXMgbm90IGRlZXBseSBlcXVhbCB0byBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBFcXVhbCh7IHRlYTogJ2dyZWVuJyB9LCB7IHRlYTogJ2phc21pbmUnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwRXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5ub3REZWVwRXF1YWwsIHRydWUpLnRvLm5vdC5lcWwoZXhwKTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBYm92ZSh2YWx1ZVRvQ2hlY2ssIHZhbHVlVG9CZUFib3ZlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlVG9DaGVja2AgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuICg+KSBgdmFsdWVUb0JlQWJvdmVgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQWJvdmUoNSwgMiwgJzUgaXMgc3RyaWN0bHkgZ3JlYXRlciB0aGFuIDInKTtcbiAgICpcbiAgICogQG5hbWUgaXNBYm92ZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQ2hlY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0JlQWJvdmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQWJvdmUgPSBmdW5jdGlvbiAodmFsLCBhYnYsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Fib3ZlLCB0cnVlKS50by5iZS5hYm92ZShhYnYpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0F0TGVhc3QodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBdExlYXN0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlVG9DaGVja2AgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICg+PSkgYHZhbHVlVG9CZUF0TGVhc3RgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQXRMZWFzdCg1LCAyLCAnNSBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIDInKTtcbiAgICogICAgIGFzc2VydC5pc0F0TGVhc3QoMywgMywgJzMgaXMgZ3JlYXRlciBvciBlcXVhbCB0byAzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXRMZWFzdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQ2hlY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0JlQXRMZWFzdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNBdExlYXN0ID0gZnVuY3Rpb24gKHZhbCwgYXRsc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0F0TGVhc3QsIHRydWUpLnRvLmJlLmxlYXN0KGF0bHN0KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNCZWxvdyh2YWx1ZVRvQ2hlY2ssIHZhbHVlVG9CZUJlbG93LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlVG9DaGVja2AgaXMgc3RyaWN0bHkgbGVzcyB0aGFuICg8KSBgdmFsdWVUb0JlQmVsb3dgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQmVsb3coMywgNiwgJzMgaXMgc3RyaWN0bHkgbGVzcyB0aGFuIDYnKTtcbiAgICpcbiAgICogQG5hbWUgaXNCZWxvd1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQ2hlY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0JlQmVsb3dcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQmVsb3cgPSBmdW5jdGlvbiAodmFsLCBibHcsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0JlbG93LCB0cnVlKS50by5iZS5iZWxvdyhibHcpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0F0TW9zdCh2YWx1ZVRvQ2hlY2ssIHZhbHVlVG9CZUF0TW9zdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byAoPD0pIGB2YWx1ZVRvQmVBdE1vc3RgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQXRNb3N0KDMsIDYsICczIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byA2Jyk7XG4gICAqICAgICBhc3NlcnQuaXNBdE1vc3QoNCwgNCwgJzQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNBdE1vc3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUF0TW9zdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNBdE1vc3QgPSBmdW5jdGlvbiAodmFsLCBhdG1zdCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQXRNb3N0LCB0cnVlKS50by5iZS5tb3N0KGF0bXN0KTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1RydWUodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgdHJ1ZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWFTZXJ2ZWQgPSB0cnVlO1xuICAgKiAgICAgYXNzZXJ0LmlzVHJ1ZSh0ZWFTZXJ2ZWQsICd0aGUgdGVhIGhhcyBiZWVuIHNlcnZlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1RydWVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzVHJ1ZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc1RydWUsIHRydWUpLmlzWyd0cnVlJ107XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RUcnVlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCB0cnVlLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYSA9ICd0YXN0eSBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc05vdFRydWUodGVhLCAnZ3JlYXQsIHRpbWUgZm9yIHRlYSEnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RUcnVlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFRydWUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RUcnVlLCB0cnVlKS50by5ub3QuZXF1YWwodHJ1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNGYWxzZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBmYWxzZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWFTZXJ2ZWQgPSBmYWxzZTtcbiAgICogICAgIGFzc2VydC5pc0ZhbHNlKHRlYVNlcnZlZCwgJ25vIHRlYSB5ZXQ/IGhtbS4uLicpO1xuICAgKlxuICAgKiBAbmFtZSBpc0ZhbHNlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0ZhbHNlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRmFsc2UsIHRydWUpLmlzWydmYWxzZSddO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RmFsc2UodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgbm90IGZhbHNlLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYSA9ICd0YXN0eSBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc05vdEZhbHNlKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90RmFsc2VcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90RmFsc2UgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RGYWxzZSwgdHJ1ZSkudG8ubm90LmVxdWFsKGZhbHNlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc051bGwodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgbnVsbC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc051bGwoZXJyLCAndGhlcmUgd2FzIG5vIGVycm9yJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTnVsbFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOdWxsID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTnVsbCwgdHJ1ZSkudG8uZXF1YWwobnVsbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3ROdWxsKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBudWxsLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYSA9ICd0YXN0eSBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc05vdE51bGwodGVhLCAnZ3JlYXQsIHRpbWUgZm9yIHRlYSEnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3ROdWxsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdE51bGwgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3ROdWxsLCB0cnVlKS50by5ub3QuZXF1YWwobnVsbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOYU5cbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHZhbHVlIGlzIE5hTi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05hTihOYU4sICdOYU4gaXMgTmFOJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTmFOXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05hTiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05hTiwgdHJ1ZSkudG8uYmUuTmFOO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TmFOXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB2YWx1ZSBpcyBub3QgTmFOLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90TmFOKDQsICc0IGlzIG5vdCBOYU4nKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3ROYU5cbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGFzc2VydC5pc05vdE5hTiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE5hTiwgdHJ1ZSkubm90LnRvLmJlLk5hTjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5leGlzdHNcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbmVpdGhlciBgbnVsbGAgbm9yIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgdmFyIGZvbyA9ICdoaSc7XG4gICAqXG4gICAqICAgICBhc3NlcnQuZXhpc3RzKGZvbywgJ2ZvbyBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAnKTtcbiAgICpcbiAgICogQG5hbWUgZXhpc3RzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5leGlzdHMgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuZXhpc3RzLCB0cnVlKS50by5leGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RFeGlzdHNcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZWl0aGVyIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciBiYXIgPSBudWxsXG4gICAqICAgICAgICwgYmF6O1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEV4aXN0cyhiYXIpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEV4aXN0cyhiYXosICdiYXogaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEV4aXN0c1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RXhpc3RzID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lm5vdEV4aXN0cywgdHJ1ZSkudG8ubm90LmV4aXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzVW5kZWZpbmVkKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYTtcbiAgICogICAgIGFzc2VydC5pc1VuZGVmaW5lZCh0ZWEsICdubyB0ZWEgZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1VuZGVmaW5lZFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNVbmRlZmluZWQgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNVbmRlZmluZWQsIHRydWUpLnRvLmVxdWFsKHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNEZWZpbmVkKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAnY3VwIG9mIGNoYWknO1xuICAgKiAgICAgYXNzZXJ0LmlzRGVmaW5lZCh0ZWEsICd0ZWEgaGFzIGJlZW4gZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc0RlZmluZWRcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzRGVmaW5lZCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0RlZmluZWQsIHRydWUpLnRvLm5vdC5lcXVhbCh1bmRlZmluZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRnVuY3Rpb24odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIHNlcnZlVGVhKCkgeyByZXR1cm4gJ2N1cCBvZiB0ZWEnOyB9O1xuICAgKiAgICAgYXNzZXJ0LmlzRnVuY3Rpb24oc2VydmVUZWEsICdncmVhdCwgd2UgY2FuIGhhdmUgdGVhIG5vdycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Z1bmN0aW9uXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRnVuY3Rpb24sIHRydWUpLnRvLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RGdW5jdGlvbih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIGZ1bmN0aW9uLlxuICAgKlxuICAgKiAgICAgdmFyIHNlcnZlVGVhID0gWyAnaGVhdCcsICdwb3VyJywgJ3NpcCcgXTtcbiAgICogICAgIGFzc2VydC5pc05vdEZ1bmN0aW9uKHNlcnZlVGVhLCAnZ3JlYXQsIHdlIGhhdmUgbGlzdGVkIHRoZSBzdGVwcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90RnVuY3Rpb24sIHRydWUpLnRvLm5vdC5iZS5hKCdmdW5jdGlvbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzT2JqZWN0KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGFuIG9iamVjdCBvZiB0eXBlICdPYmplY3QnIChhcyByZXZlYWxlZCBieSBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2ApLlxuICAgKiBfVGhlIGFzc2VydGlvbiBkb2VzIG5vdCBtYXRjaCBzdWJjbGFzc2VkIG9iamVjdHMuX1xuICAgKlxuICAgKiAgICAgdmFyIHNlbGVjdGlvbiA9IHsgbmFtZTogJ0NoYWknLCBzZXJ2ZTogJ3dpdGggc3BpY2VzJyB9O1xuICAgKiAgICAgYXNzZXJ0LmlzT2JqZWN0KHNlbGVjdGlvbiwgJ3RlYSBzZWxlY3Rpb24gaXMgYW4gb2JqZWN0Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzT2JqZWN0XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc09iamVjdCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc09iamVjdCwgdHJ1ZSkudG8uYmUuYSgnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RPYmplY3QodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYW4gb2JqZWN0IG9mIHR5cGUgJ09iamVjdCcgKGFzIHJldmVhbGVkIGJ5IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCkuXG4gICAqXG4gICAqICAgICB2YXIgc2VsZWN0aW9uID0gJ2NoYWknXG4gICAqICAgICBhc3NlcnQuaXNOb3RPYmplY3Qoc2VsZWN0aW9uLCAndGVhIHNlbGVjdGlvbiBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RPYmplY3QobnVsbCwgJ251bGwgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdE9iamVjdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RPYmplY3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RPYmplY3QsIHRydWUpLnRvLm5vdC5iZS5hKCdvYmplY3QnKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0FycmF5KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGFuIGFycmF5LlxuICAgKlxuICAgKiAgICAgdmFyIG1lbnUgPSBbICdncmVlbicsICdjaGFpJywgJ29vbG9uZycgXTtcbiAgICogICAgIGFzc2VydC5pc0FycmF5KG1lbnUsICd3aGF0IGtpbmQgb2YgdGVhIGRvIHdlIHdhbnQ/Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXJyYXlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXJyYXkgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBcnJheSwgdHJ1ZSkudG8uYmUuYW4oJ2FycmF5Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RBcnJheSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhbiBhcnJheS5cbiAgICpcbiAgICogICAgIHZhciBtZW51ID0gJ2dyZWVufGNoYWl8b29sb25nJztcbiAgICogICAgIGFzc2VydC5pc05vdEFycmF5KG1lbnUsICd3aGF0IGtpbmQgb2YgdGVhIGRvIHdlIHdhbnQ/Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90QXJyYXlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90QXJyYXkgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RBcnJheSwgdHJ1ZSkudG8ubm90LmJlLmFuKCdhcnJheScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzU3RyaW5nKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYU9yZGVyID0gJ2NoYWknO1xuICAgKiAgICAgYXNzZXJ0LmlzU3RyaW5nKHRlYU9yZGVyLCAnb3JkZXIgcGxhY2VkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzU3RyaW5nXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1N0cmluZyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc1N0cmluZywgdHJ1ZSkudG8uYmUuYSgnc3RyaW5nJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RTdHJpbmcodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBzdHJpbmcuXG4gICAqXG4gICAqICAgICB2YXIgdGVhT3JkZXIgPSA0O1xuICAgKiAgICAgYXNzZXJ0LmlzTm90U3RyaW5nKHRlYU9yZGVyLCAnb3JkZXIgcGxhY2VkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90U3RyaW5nXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFN0cmluZyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdFN0cmluZywgdHJ1ZSkudG8ubm90LmJlLmEoJ3N0cmluZycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTnVtYmVyKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgbnVtYmVyLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAyO1xuICAgKiAgICAgYXNzZXJ0LmlzTnVtYmVyKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTnVtYmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOdW1iZXIgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOdW1iZXIsIHRydWUpLnRvLmJlLmEoJ251bWJlcicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TnVtYmVyKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGEgbnVtYmVyLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAnMiBjdXBzIHBsZWFzZSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3ROdW1iZXIoY3VwcywgJ2hvdyBtYW55IGN1cHMnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3ROdW1iZXJcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90TnVtYmVyID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90TnVtYmVyLCB0cnVlKS50by5ub3QuYmUuYSgnbnVtYmVyJyk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzRmluaXRlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlci4gVW5saWtlIGAuaXNOdW1iZXJgLCB0aGlzIHdpbGwgZmFpbCBmb3IgYE5hTmAgYW5kIGBJbmZpbml0eWAuXG4gICAqXG4gICAqICAgICB2YXIgY3VwcyA9IDI7XG4gICAqICAgICBhc3NlcnQuaXNGaW5pdGUoY3VwcywgJ2hvdyBtYW55IGN1cHMnKTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc0Zpbml0ZShOYU4pOyAvLyB0aHJvd3NcbiAgICpcbiAgICogQG5hbWUgaXNGaW5pdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Zpbml0ZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Zpbml0ZSwgdHJ1ZSkudG8uYmUuZmluaXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzQm9vbGVhbih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIGJvb2xlYW4uXG4gICAqXG4gICAqICAgICB2YXIgdGVhUmVhZHkgPSB0cnVlXG4gICAqICAgICAgICwgdGVhU2VydmVkID0gZmFsc2U7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNCb29sZWFuKHRlYVJlYWR5LCAnaXMgdGhlIHRlYSByZWFkeScpO1xuICAgKiAgICAgYXNzZXJ0LmlzQm9vbGVhbih0ZWFTZXJ2ZWQsICdoYXMgdGVhIGJlZW4gc2VydmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQm9vbGVhblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNCb29sZWFuID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQm9vbGVhbiwgdHJ1ZSkudG8uYmUuYSgnYm9vbGVhbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90Qm9vbGVhbih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIGJvb2xlYW4uXG4gICAqXG4gICAqICAgICB2YXIgdGVhUmVhZHkgPSAneWVwJ1xuICAgKiAgICAgICAsIHRlYVNlcnZlZCA9ICdub3BlJztcbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEJvb2xlYW4odGVhUmVhZHksICdpcyB0aGUgdGVhIHJlYWR5Jyk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RCb29sZWFuKHRlYVNlcnZlZCwgJ2hhcyB0ZWEgYmVlbiBzZXJ2ZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RCb29sZWFuXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEJvb2xlYW4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RCb29sZWFuLCB0cnVlKS50by5ub3QuYmUuYSgnYm9vbGVhbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnR5cGVPZih2YWx1ZSwgbmFtZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCdzIHR5cGUgaXMgYG5hbWVgLCBhcyBkZXRlcm1pbmVkIGJ5XG4gICAqIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICpcbiAgICogICAgIGFzc2VydC50eXBlT2YoeyB0ZWE6ICdjaGFpJyB9LCAnb2JqZWN0JywgJ3dlIGhhdmUgYW4gb2JqZWN0Jyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKFsnY2hhaScsICdqYXNtaW5lJ10sICdhcnJheScsICd3ZSBoYXZlIGFuIGFycmF5Jyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKCd0ZWEnLCAnc3RyaW5nJywgJ3dlIGhhdmUgYSBzdHJpbmcnKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YoL3RlYS8sICdyZWdleHAnLCAnd2UgaGF2ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbicpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZihudWxsLCAnbnVsbCcsICd3ZSBoYXZlIGEgbnVsbCcpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZih1bmRlZmluZWQsICd1bmRlZmluZWQnLCAnd2UgaGF2ZSBhbiB1bmRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgdHlwZU9mXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC50eXBlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQudHlwZU9mLCB0cnVlKS50by5iZS5hKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFR5cGVPZih2YWx1ZSwgbmFtZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCdzIHR5cGUgaXMgX25vdF8gYG5hbWVgLCBhcyBkZXRlcm1pbmVkIGJ5XG4gICAqIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RUeXBlT2YoJ3RlYScsICdudW1iZXInLCAnc3RyaW5ncyBhcmUgbm90IG51bWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90VHlwZU9mXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlb2YgbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90VHlwZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lm5vdFR5cGVPZiwgdHJ1ZSkudG8ubm90LmJlLmEodHlwZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaW5zdGFuY2VPZihvYmplY3QsIGNvbnN0cnVjdG9yLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGFuIGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAuXG4gICAqXG4gICAqICAgICB2YXIgVGVhID0gZnVuY3Rpb24gKG5hbWUpIHsgdGhpcy5uYW1lID0gbmFtZTsgfVxuICAgKiAgICAgICAsIGNoYWkgPSBuZXcgVGVhKCdjaGFpJyk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5zdGFuY2VPZihjaGFpLCBUZWEsICdjaGFpIGlzIGFuIGluc3RhbmNlIG9mIHRlYScpO1xuICAgKlxuICAgKiBAbmFtZSBpbnN0YW5jZU9mXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmluc3RhbmNlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaW5zdGFuY2VPZiwgdHJ1ZSkudG8uYmUuaW5zdGFuY2VPZih0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RJbnN0YW5jZU9mKG9iamVjdCwgY29uc3RydWN0b3IsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBgdmFsdWVgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgLlxuICAgKlxuICAgKiAgICAgdmFyIFRlYSA9IGZ1bmN0aW9uIChuYW1lKSB7IHRoaXMubmFtZSA9IG5hbWU7IH1cbiAgICogICAgICAgLCBjaGFpID0gbmV3IFN0cmluZygnY2hhaScpO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluc3RhbmNlT2YoY2hhaSwgVGVhLCAnY2hhaSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgdGVhJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluc3RhbmNlT2ZcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge0NvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5zdGFuY2VPZiA9IGZ1bmN0aW9uICh2YWwsIHR5cGUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RJbnN0YW5jZU9mLCB0cnVlKVxuICAgICAgLnRvLm5vdC5iZS5pbnN0YW5jZU9mKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBpbmNsdWRlcyBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZVxuICAgKiBpbmNsdXNpb24gb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSwgYSBzdWJzdHJpbmcgaW4gYSBzdHJpbmcsIG9yIGEgc3Vic2V0IG9mXG4gICAqIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoWzEsMiwzXSwgMiwgJ2FycmF5IGNvbnRhaW5zIHZhbHVlJyk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSgnZm9vYmFyJywgJ2ZvbycsICdzdHJpbmcgY29udGFpbnMgc3Vic3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSh7IGZvbzogJ2JhcicsIGhlbGxvOiAndW5pdmVyc2UnIH0sIHsgZm9vOiAnYmFyJyB9LCAnb2JqZWN0IGNvbnRhaW5zIHByb3BlcnR5Jyk7XG4gICAqXG4gICAqIFN0cmljdCBlcXVhbGl0eSAoPT09KSBpcyB1c2VkLiBXaGVuIGFzc2VydGluZyB0aGUgaW5jbHVzaW9uIG9mIGEgdmFsdWUgaW5cbiAgICogYW4gYXJyYXksIHRoZSBhcnJheSBpcyBzZWFyY2hlZCBmb3IgYW4gZWxlbWVudCB0aGF0J3Mgc3RyaWN0bHkgZXF1YWwgdG8gdGhlXG4gICAqIGdpdmVuIHZhbHVlLiBXaGVuIGFzc2VydGluZyBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdCwgdGhlIG9iamVjdFxuICAgKiBpcyBzZWFyY2hlZCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5IGtleXMsIGNoZWNraW5nIHRoYXQgZWFjaCBvbmUgaXMgcHJlc2VudFxuICAgKiBhbmQgc3RyaWN0eSBlcXVhbCB0byB0aGUgZ2l2ZW4gcHJvcGVydHkgdmFsdWUuIEZvciBpbnN0YW5jZTpcbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKFtvYmoxLCBvYmoyXSwgb2JqMSk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiBvYmoxfSk7XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9KTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuaW5jbHVkZSwgdHJ1ZSkuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBkb2VzIG5vdCBpbmNsdWRlIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnRcbiAgICogdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSwgYSBzdWJzdHJpbmcgaW4gYSBzdHJpbmcsIG9yIGEgc3Vic2V0IG9mXG4gICAqIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoWzEsMiwzXSwgNCwgJ2FycmF5IGRvZXNuJ3QgY29udGFpbiB2YWx1ZScpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoJ2Zvb2JhcicsICdiYXonLCAnc3RyaW5nIGRvZXNuJ3QgY29udGFpbiBzdWJzdHJpbmcnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHsgZm9vOiAnYmFyJywgaGVsbG86ICd1bml2ZXJzZScgfSwgeyBmb286ICdiYXonIH0sICdvYmplY3QgZG9lc24ndCBjb250YWluIHByb3BlcnR5Jyk7XG4gICAqXG4gICAqIFN0cmljdCBlcXVhbGl0eSAoPT09KSBpcyB1c2VkLiBXaGVuIGFzc2VydGluZyB0aGUgYWJzZW5jZSBvZiBhIHZhbHVlIGluIGFuXG4gICAqIGFycmF5LCB0aGUgYXJyYXkgaXMgc2VhcmNoZWQgdG8gY29uZmlybSB0aGUgYWJzZW5jZSBvZiBhbiBlbGVtZW50IHRoYXQnc1xuICAgKiBzdHJpY3RseSBlcXVhbCB0byB0aGUgZ2l2ZW4gdmFsdWUuIFdoZW4gYXNzZXJ0aW5nIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW5cbiAgICogYW4gb2JqZWN0LCB0aGUgb2JqZWN0IGlzIHNlYXJjaGVkIHRvIGNvbmZpcm0gdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuXG4gICAqIHByb3BlcnR5IGtleXMgaXMgZWl0aGVyIG5vdCBwcmVzZW50IG9yIG5vdCBzdHJpY3RseSBlcXVhbCB0byB0aGUgZ2l2ZW5cbiAgICogcHJvcGVydHkgdmFsdWUuIEZvciBpbnN0YW5jZTpcbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDF9KTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMSwgYmFyOiB7YjogMn19KTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZSwgdHJ1ZSkubm90LmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgaGF5c3RhY2tgIGluY2x1ZGVzIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlXG4gICAqIGluY2x1c2lvbiBvZiBhIHZhbHVlIGluIGFuIGFycmF5IG9yIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgKiBEZWVwIGVxdWFsaXR5IGlzIHVzZWQuXG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQuZGVlcEluY2x1ZGUoW29iajEsIG9iajJdLCB7YTogMX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IHthOiAxfSwgYmFyOiB7YjogMn19KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcEluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5kZWVwSW5jbHVkZSwgdHJ1ZSkuZGVlcC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBkb2VzIG5vdCBpbmNsdWRlIGBuZWVkbGVgLiBDYW4gYmUgdXNlZCB0byBhc3NlcnRcbiAgICogdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSBvciBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICogRGVlcCBlcXVhbGl0eSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgdmFyIG9iajEgPSB7YTogMX1cbiAgICogICAgICAgLCBvYmoyID0ge2I6IDJ9O1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDl9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogOX19KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX0sIGJhcjoge2I6IDl9fSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBJbmNsdWRlXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge01peGVkfSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90RGVlcEluY2x1ZGUsIHRydWUpLm5vdC5kZWVwLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5uZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLiBcbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0LlxuICAgKiBFbmFibGVzIHRoZSB1c2Ugb2YgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgcmVmZXJlbmNpbmcgbmVzdGVkIFxuICAgKiBwcm9wZXJ0aWVzLlxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5uZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J2InOiAneCd9fSwgeydcXFxcLmEuW2JdJzogJ3gnfSk7XG4gICAqICAgICBhc3NlcnQubmVzdGVkSW5jbHVkZSh7J2EnOiB7J1tiXSc6ICd4J319LCB7J2EuXFxcXFtiXFxcXF0nOiAneCd9KTtcbiAgICogXG4gICAqIEBuYW1lIG5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqLyBcblxuICBhc3NlcnQubmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUsIHRydWUpLm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90TmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBkb2VzIG5vdCBpbmNsdWRlICduZWVkbGUnLiBcbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdC5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZCBcbiAgICogcHJvcGVydGllcy4gXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUoeycuYSc6IHsnYic6ICd4J319LCB7J1xcXFwuYS5iJzogJ3knfSk7XG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkSW5jbHVkZSh7J2EnOiB7J1tiXSc6ICd4J319LCB7J2EuXFxcXFtiXFxcXF0nOiAneSd9KTtcbiAgICogXG4gICAqIEBuYW1lIG5vdE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqLyBcblxuICBhc3NlcnQubm90TmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUsIHRydWUpXG4gICAgICAubm90Lm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcE5lc3RlZEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBjaGVja2luZyBmb3IgZGVlcCBlcXVhbGl0eS5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZCBcbiAgICogcHJvcGVydGllcy5cbiAgICogJ1tdJyBhbmQgJy4nIGluIHByb3BlcnR5IG5hbWVzIGNhbiBiZSBlc2NhcGVkIHVzaW5nIGRvdWJsZSBiYWNrc2xhc2hlcy5cbiAgICogXG4gICAqICAgICBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUoe2E6IHtiOiBbe3g6IDF9XX19LCB7J2EuYlswXSc6IHt4OiAxfX0pO1xuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J1tiXSc6IHt4OiAxfX19LCB7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IHt4OiAxfX0pO1xuICAgKiAgICBcbiAgICogQG5hbWUgZGVlcE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwTmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUsIHRydWUpXG4gICAgICAuZGVlcC5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBOZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGRvZXMgbm90IGluY2x1ZGUgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWQgXG4gICAqIHByb3BlcnRpZXMuXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlKHthOiB7YjogW3t4OiAxfV19fSwgeydhLmJbMF0nOiB7eTogMX19KVxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J1tiXSc6IHt4OiAxfX19LCB7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IHt5OiAyfX0pO1xuICAgKiAgICBcbiAgICogQG5hbWUgbm90RGVlcE5lc3RlZEluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWMgXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwTmVzdGVkSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90RGVlcE5lc3RlZEluY2x1ZGUsIHRydWUpXG4gICAgICAubm90LmRlZXAubmVzdGVkLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5vd25JbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGluY2x1c2lvbiBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0Lm93bkluY2x1ZGUoeyBhOiAxIH0sIHsgYTogMSB9KTtcbiAgICogXG4gICAqIEBuYW1lIG93bkluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm93bkluY2x1ZGUsIHRydWUpLm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcy5cbiAgICogXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKiBcbiAgICogICAgIGFzc2VydC5ub3RPd25JbmNsdWRlKHsgYTogMSB9LCB7IGI6IDIgfSk7XG4gICAqIFxuICAgKiBAbmFtZSBub3RPd25JbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3RPd25JbmNsdWRlLCB0cnVlKS5ub3Qub3duLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwT3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0IHdoaWxlIGlnbm9yaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFuZCBjaGVja2luZyBmb3IgZGVlcCBlcXVhbGl0eS5cbiAgICogXG4gICAqICAgICAgYXNzZXJ0LmRlZXBPd25JbmNsdWRlKHthOiB7YjogMn19LCB7YToge2I6IDJ9fSk7XG4gICAqICAgICAgXG4gICAqIEBuYW1lIGRlZXBPd25JbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwT3duSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuZGVlcE93bkluY2x1ZGUsIHRydWUpXG4gICAgICAuZGVlcC5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5ub3REZWVwT3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBhYnNlbmNlIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcyBhbmQgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIFxuICAgKiAgICAgIGFzc2VydC5ub3REZWVwT3duSW5jbHVkZSh7YToge2I6IDJ9fSwge2E6IHtjOiAzfX0pO1xuICAgKiAgICAgIFxuICAgKiBAbmFtZSBub3REZWVwT3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBPd25JbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5kZWVwLm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubWF0Y2godmFsdWUsIHJlZ2V4cCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBtYXRjaGVzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYHJlZ2V4cGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubWF0Y2goJ2Zvb2JhcicsIC9eZm9vLywgJ3JlZ2V4cCBtYXRjaGVzJyk7XG4gICAqXG4gICAqIEBuYW1lIG1hdGNoXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZWdleHBcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm1hdGNoID0gZnVuY3Rpb24gKGV4cCwgcmUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5tYXRjaCwgdHJ1ZSkudG8ubWF0Y2gocmUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE1hdGNoKHZhbHVlLCByZWdleHAsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgZG9lcyBub3QgbWF0Y2ggdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBgcmVnZXhwYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RNYXRjaCgnZm9vYmFyJywgL15mb28vLCAncmVnZXhwIGRvZXMgbm90IG1hdGNoJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE1hdGNoXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZWdleHBcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE1hdGNoID0gZnVuY3Rpb24gKGV4cCwgcmUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3RNYXRjaCwgdHJ1ZSkudG8ubm90Lm1hdGNoKHJlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkIGJ5XG4gICAqIGBwcm9wZXJ0eWAuXG4gICAqXG4gICAqICAgICBhc3NlcnQucHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhJyk7XG4gICAqICAgICBhc3NlcnQucHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndG9TdHJpbmcnKTtcbiAgICpcbiAgICogQG5hbWUgcHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LnByb3BlcnR5LCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWRcbiAgICogYnkgYHByb3BlcnR5YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUnKTtcbiAgICpcbiAgICogQG5hbWUgbm90UHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkIGJ5XG4gICAqIGBwcm9wZXJ0eWAgd2l0aCBhIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2tcbiAgICogKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQucHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBnb29kJyB9LCAndGVhJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgcHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQucHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAgd2l0aCB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAqICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFByb3BlcnR5VmFsKHsgdGVhOiAnaXMgZ29vZCcgfSwgJ3RlYScsICdpcyBiYWQnKTtcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCh7IHRlYTogJ2lzIGdvb2QnIH0sICdjb2ZmZWUnLCAnaXMgZ29vZCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90UHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgIHdpdGggYSB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWRcbiAgICogYnkgYHByb3BlcnR5YCB3aXRoIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBibGFjazogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnb29sb25nJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ2NvZmZlZScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5kZWVwLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAuIEluaGVyaXRlZFxuICAgKiBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm93blByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYScpO1xuICAgKlxuICAgKiBAbmFtZSBvd25Qcm9wZXJ0eVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQub3duUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQub3duUHJvcGVydHksIHRydWUpXG4gICAgICAudG8uaGF2ZS5vd24ucHJvcGVydHkocHJvcCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5XG4gICAqIGBwcm9wZXJ0eWAuIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ2NvZmZlZScpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5KHt9LCAndG9TdHJpbmcnKTtcbiAgICpcbiAgICogQG5hbWUgbm90T3duUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE93blByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE93blByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm93bi5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5vd25Qcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgYW5kIGEgdmFsdWVcbiAgICogZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm93blByb3BlcnR5VmFsKHsgY29mZmVlOiAnaXMgZ29vZCd9LCAnY29mZmVlJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgb3duUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm93bi5wcm9wZXJ0eShwcm9wLCB2YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90T3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgXG4gICAqIHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aGUgcHJvdmlkZWQgYHZhbHVlYC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVja1xuICAgKiAoPT09KS4gSW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90T3duUHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBiZXR0ZXInfSwgJ3RlYScsICdpcyB3b3JzZScpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsKHt9LCAndG9TdHJpbmcnLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgICpcbiAgICogQG5hbWUgbm90T3duUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBPd25Qcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgYW5kIGEgdmFsdWVcbiAgICogZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLiBJbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwT3duUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBPd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZGVlcE93blByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuZGVlcC5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBPd25Qcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWBcbiAgICogd2l0aCBhIHZhbHVlIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICogSW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGJsYWNrOiAnbWF0Y2hhJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgZ3JlZW46ICdvb2xvbmcnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAnY29mZmVlJywgeyBncmVlbjogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHt9LCAndG9TdHJpbmcnLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWx1ZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5kZWVwLm93bi5wcm9wZXJ0eShwcm9wLCB2YWx1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLCB3aGljaCBjYW4gYmUgYSBzdHJpbmcgdXNpbmcgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3JcbiAgICogbmVzdGVkIHJlZmVyZW5jZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICd0ZWEuZ3JlZW4nKTtcbiAgICpcbiAgICogQG5hbWUgbmVzdGVkUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAsIHdoaWNoXG4gICAqIGNhbiBiZSBhIHN0cmluZyB1c2luZyBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWQgcmVmZXJlbmNlLiBUaGVcbiAgICogcHJvcGVydHkgY2Fubm90IGV4aXN0IG9uIHRoZSBvYmplY3Qgbm9yIGFueXdoZXJlIGluIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLm9vbG9uZycpO1xuICAgKlxuICAgKiBAbmFtZSBub3ROZXN0ZWRQcm9wZXJ0eVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90TmVzdGVkUHJvcGVydHksIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUubmVzdGVkLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIHdpdGggdmFsdWUgZ2l2ZW5cbiAgICogYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIG5lc3RlZFxuICAgKiByZWZlcmVuY2UuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJywgJ21hdGNoYScpO1xuICAgKlxuICAgKiBAbmFtZSBuZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIHdpdGhcbiAgICogdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJywgJ2tvbmFjaGEnKTtcbiAgICogICAgIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUuZ3JlZW4nLCAnbWF0Y2hhJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoIGEgdmFsdWUgZ2l2ZW5cbiAgICogYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIG5lc3RlZFxuICAgKiByZWZlcmVuY2UuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogeyBtYXRjaGE6ICd5dW0nIH0gfSB9LCAndGVhLmdyZWVuJywgeyBtYXRjaGE6ICd5dW0nIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwTmVzdGVkUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBOZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIHdpdGhcbiAgICogdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gYHByb3BlcnR5YCBjYW4gdXNlIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogeyBtYXRjaGE6ICd5dW0nIH0gfSB9LCAndGVhLmdyZWVuJywgeyBvb2xvbmc6ICd5dW0nIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogeyBtYXRjaGE6ICd5dW0nIH0gfSB9LCAndGVhLmdyZWVuJywgeyBtYXRjaGE6ICd5dWNrJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ibGFjaycsIHsgbWF0Y2hhOiAneXVtJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmxlbmd0aE9mKG9iamVjdCwgbGVuZ3RoLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYSBgbGVuZ3RoYCBwcm9wZXJ0eSB3aXRoIHRoZSBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5sZW5ndGhPZihbMSwyLDNdLCAzLCAnYXJyYXkgaGFzIGxlbmd0aCBvZiAzJyk7XG4gICAqICAgICBhc3NlcnQubGVuZ3RoT2YoJ2Zvb2JhcicsIDYsICdzdHJpbmcgaGFzIGxlbmd0aCBvZiA2Jyk7XG4gICAqXG4gICAqIEBuYW1lIGxlbmd0aE9mXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5sZW5ndGhPZiA9IGZ1bmN0aW9uIChleHAsIGxlbiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lmxlbmd0aE9mLCB0cnVlKS50by5oYXZlLmxlbmd0aE9mKGxlbik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaGFzQW55S2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnaURvbnRFeGlzdCcsICdiYXonXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtmb286IDMwLCBpRG9udEV4aXN0OiA5OSwgYmF6OiAxMzM3fSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX0sICdrZXknXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pLCBbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKTtcbiAgICpcbiAgICogQG5hbWUgaGFzQW55S2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FueUtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaGFzQW55S2V5cywgdHJ1ZSkudG8uaGF2ZS5hbnkua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmhhc0FsbEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhbGwgYW5kIG9ubHkgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdiYXInLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgYmFyOiA5OSwgYmF6OiAxMzM3XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX0sICdrZXknXSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pO1xuICAgKlxuICAgKiBAbmFtZSBoYXNBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbGxLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FsbEtleXMsIHRydWUpLnRvLmhhdmUuYWxsLmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jb250YWluc0FsbEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhbGwgb2YgdGhlIGBrZXlzYCBwcm92aWRlZCBidXQgbWF5IGhhdmUgbW9yZSBrZXlzIG5vdCBsaXN0ZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnZm9vJywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdiYXInLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtmb286IDMwLCBiYXo6IDEzMzd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgYmFyOiA5OSwgYmF6OiAxMzM3fSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7Zm9vOiAxfV0pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX0sICdrZXknXSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tmb286ICdiYXInfV0pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10pO1xuICAgKlxuICAgKiBAbmFtZSBjb250YWluc0FsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5jb250YWluc0FsbEtleXMsIHRydWUpXG4gICAgICAudG8uY29udGFpbi5hbGwua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQW55S2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIG5vbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydvbmUnLCAndHdvJywgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge29uZTogMSwgdHdvOiAyLCBleGFtcGxlOiAnZm9vJ30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbnlLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFueS5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbGxLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIG5vdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ29uZScsICd0d28nLCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7b25lOiAxLCB0d286IDIsIGV4YW1wbGU6ICdmb28nfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKG5ldyBNYXAoW1t7Zm9vOiAxfSwgJ2JhciddLCBbJ2tleScsICd2YWx1ZSddXSksIFt7b25lOiAndHdvJ30sICdleGFtcGxlJ10pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7b25lOiAndHdvJ30sICdleGFtcGxlJ10pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYWxsLmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5oYXNBbnlEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGF0IGxlYXN0IG9uZSBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgW3t0d286ICd0d28nfSwgJ3ZhbHVlVHdvJ11dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dGhyZWU6ICd0aHJlZSd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQWxsS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FueURlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuYW55LmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuaGFzQWxsRGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhbGwgYW5kIG9ubHkgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddXSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKlxuICAgKiBAbmFtZSBoYXNBbGxEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuYWxsLmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuY29udGFpbnNBbGxEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgY29udGFpbnMgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKlxuICAgKiBAbmFtZSBjb250YWluc0FsbERlZXBLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLmNvbnRhaW4uYWxsLmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIG5vbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHt0aGlzRG9lc05vdDogJ2V4aXN0J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7dHdlbnR5OiAndHdlbnR5J30sIHtmaWZ0eTogJ2ZpZnR5J31dKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHt0d2VudHk6ICd0d2VudHknfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe3R3ZW50eTogJ3R3ZW50eSd9LCB7ZmlmdHk6ICdmaWZ0eSd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQW55RGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYW55LmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBub3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXSwgWzEsIDJdXSksIHt0aGlzRG9lc05vdDogJ2V4aXN0J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7dHdlbnR5OiAndHdlbnR5J30sIHtvbmU6ICdvbmUnfV0pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwge3R3ZW50eTogJ3R3ZW50eSd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHtmaWZ0eTogJ2ZpZnR5J31dKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbGxEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5hbGwuZGVlcC5rZXlzKGtleXMpO1xuICB9XG5cbiAvKipcbiAgICogIyMjIC50aHJvd3MoZm4sIFtlcnJvckxpa2Uvc3RyaW5nL3JlZ2V4cF0sIFtzdHJpbmcvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBJZiBgZXJyb3JMaWtlYCBpcyBhbiBgRXJyb3JgIGNvbnN0cnVjdG9yLCBhc3NlcnRzIHRoYXQgYGZuYCB3aWxsIHRocm93IGFuIGVycm9yIHRoYXQgaXMgYW5cbiAgICogaW5zdGFuY2Ugb2YgYGVycm9yTGlrZWAuXG4gICAqIElmIGBlcnJvckxpa2VgIGlzIGFuIGBFcnJvcmAgaW5zdGFuY2UsIGFzc2VydHMgdGhhdCB0aGUgZXJyb3IgdGhyb3duIGlzIHRoZSBzYW1lXG4gICAqIGluc3RhbmNlIGFzIGBlcnJvckxpa2VgLlxuICAgKiBJZiBgZXJyTXNnTWF0Y2hlcmAgaXMgcHJvdmlkZWQsIGl0IGFsc28gYXNzZXJ0cyB0aGF0IHRoZSBlcnJvciB0aHJvd24gd2lsbCBoYXZlIGFcbiAgICogbWVzc2FnZSBtYXRjaGluZyBgZXJyTXNnTWF0Y2hlcmAuXG4gICAqXG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCAnZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yJyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCAvZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yLyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvcik7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBlcnJvckluc3RhbmNlKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIFJlZmVyZW5jZUVycm9yLCAnRXJyb3IgdGhyb3duIG11c3QgYmUgYSBSZWZlcmVuY2VFcnJvciBhbmQgaGF2ZSB0aGlzIG1zZycpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSwgJ0Vycm9yIHRocm93biBtdXN0IGJlIHRoZSBzYW1lIGVycm9ySW5zdGFuY2UgYW5kIGhhdmUgdGhpcyBtc2cnKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIFJlZmVyZW5jZUVycm9yLCAvRXJyb3IgdGhyb3duIG11c3QgYmUgYSBSZWZlcmVuY2VFcnJvciBhbmQgbWF0Y2ggdGhpcy8pO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSwgL0Vycm9yIHRocm93biBtdXN0IGJlIHRoZSBzYW1lIGVycm9ySW5zdGFuY2UgYW5kIG1hdGNoIHRoaXMvKTtcbiAgICpcbiAgICogQG5hbWUgdGhyb3dzXG4gICAqIEBhbGlhcyB0aHJvd1xuICAgKiBAYWxpYXMgVGhyb3dcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtFcnJvckNvbnN0cnVjdG9yfEVycm9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBlcnJNc2dNYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBlcnJvckxpa2UgfHwgZXJyb3JMaWtlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBlcnJNc2dNYXRjaGVyID0gZXJyb3JMaWtlO1xuICAgICAgZXJyb3JMaWtlID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgYXNzZXJ0RXJyID0gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQudGhyb3dzLCB0cnVlKVxuICAgICAgLnRvLnRocm93KGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlcik7XG4gICAgcmV0dXJuIGZsYWcoYXNzZXJ0RXJyLCAnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdFRocm93KGZuLCBbZXJyb3JMaWtlL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICpcbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBjb25zdHJ1Y3RvciwgYXNzZXJ0cyB0aGF0IGBmbmAgd2lsbCBfbm90XyB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuXG4gICAqIGluc3RhbmNlIG9mIGBlcnJvckxpa2VgLlxuICAgKiBJZiBgZXJyb3JMaWtlYCBpcyBhbiBgRXJyb3JgIGluc3RhbmNlLCBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biBpcyBfbm90XyB0aGUgc2FtZVxuICAgKiBpbnN0YW5jZSBhcyBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVyck1zZ01hdGNoZXJgIGlzIHByb3ZpZGVkLCBpdCBhbHNvIGFzc2VydHMgdGhhdCB0aGUgZXJyb3IgdGhyb3duIHdpbGwgX25vdF8gaGF2ZSBhXG4gICAqIG1lc3NhZ2UgbWF0Y2hpbmcgYGVyck1zZ01hdGNoZXJgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgJ0FueSBFcnJvciB0aHJvd24gbXVzdCBub3QgaGF2ZSB0aGlzIG1lc3NhZ2UnKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIC9BbnkgRXJyb3IgdGhyb3duIG11c3Qgbm90IG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIEVycm9yKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgRXJyb3IsICdFcnJvciBtdXN0IG5vdCBoYXZlIHRoaXMgbWVzc2FnZScpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgZXJyb3JJbnN0YW5jZSwgJ0Vycm9yIG11c3Qgbm90IGhhdmUgdGhpcyBtZXNzYWdlJyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBFcnJvciwgL0Vycm9yIG11c3Qgbm90IG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UsIC9FcnJvciBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RUaHJvd1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGVycm9yTGlrZVxuICAgKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd9IGVyck1zZ01hdGNoZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24gKGZuLCBlcnJvckxpa2UsIGVyck1zZ01hdGNoZXIsIG1zZykge1xuICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGVycm9yTGlrZSB8fCBlcnJvckxpa2UgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIGVyck1zZ01hdGNoZXIgPSBlcnJvckxpa2U7XG4gICAgICBlcnJvckxpa2UgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RUaHJvdywgdHJ1ZSlcbiAgICAgIC50by5ub3QudGhyb3coZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5vcGVyYXRvcih2YWwxLCBvcGVyYXRvciwgdmFsMiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBDb21wYXJlcyB0d28gdmFsdWVzIHVzaW5nIGBvcGVyYXRvcmAuXG4gICAqXG4gICAqICAgICBhc3NlcnQub3BlcmF0b3IoMSwgJzwnLCAyLCAnZXZlcnl0aGluZyBpcyBvaycpO1xuICAgKiAgICAgYXNzZXJ0Lm9wZXJhdG9yKDEsICc+JywgMiwgJ3RoaXMgd2lsbCBmYWlsJyk7XG4gICAqXG4gICAqIEBuYW1lIG9wZXJhdG9yXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbDFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm9wZXJhdG9yID0gZnVuY3Rpb24gKHZhbCwgb3BlcmF0b3IsIHZhbDIsIG1zZykge1xuICAgIHZhciBvaztcbiAgICBzd2l0Y2gob3BlcmF0b3IpIHtcbiAgICAgIGNhc2UgJz09JzpcbiAgICAgICAgb2sgPSB2YWwgPT0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc9PT0nOlxuICAgICAgICBvayA9IHZhbCA9PT0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc+JzpcbiAgICAgICAgb2sgPSB2YWwgPiB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgb2sgPSB2YWwgPj0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgb2sgPSB2YWwgPCB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgb2sgPSB2YWwgPD0gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICchPSc6XG4gICAgICAgIG9rID0gdmFsICE9IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnIT09JzpcbiAgICAgICAgb2sgPSB2YWwgIT09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbXNnID0gbXNnID8gbXNnICsgJzogJyA6IG1zZztcbiAgICAgICAgdGhyb3cgbmV3IGNoYWkuQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgbXNnICsgJ0ludmFsaWQgb3BlcmF0b3IgXCInICsgb3BlcmF0b3IgKyAnXCInLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBhc3NlcnQub3BlcmF0b3JcbiAgICAgICAgKTtcbiAgICB9XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKG9rLCBtc2csIGFzc2VydC5vcGVyYXRvciwgdHJ1ZSk7XG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIHRydWUgPT09IGZsYWcodGVzdCwgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAnICsgdXRpbC5pbnNwZWN0KHZhbCkgKyAnIHRvIGJlICcgKyBvcGVyYXRvciArICcgJyArIHV0aWwuaW5zcGVjdCh2YWwyKVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIHV0aWwuaW5zcGVjdCh2YWwpICsgJyB0byBub3QgYmUgJyArIG9wZXJhdG9yICsgJyAnICsgdXRpbC5pbnNwZWN0KHZhbDIpICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuY2xvc2VUbyhhY3R1YWwsIGV4cGVjdGVkLCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCBgZXhwZWN0ZWRgLCB0byB3aXRoaW4gYSArLy0gYGRlbHRhYCByYW5nZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5jbG9zZVRvKDEuNSwgMSwgMC41LCAnbnVtYmVycyBhcmUgY2xvc2UnKTtcbiAgICpcbiAgICogQG5hbWUgY2xvc2VUb1xuICAgKiBAcGFyYW0ge051bWJlcn0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNsb3NlVG8gPSBmdW5jdGlvbiAoYWN0LCBleHAsIGRlbHRhLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuY2xvc2VUbywgdHJ1ZSkudG8uYmUuY2xvc2VUbyhleHAsIGRlbHRhKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5hcHByb3hpbWF0ZWx5KGFjdHVhbCwgZXhwZWN0ZWQsIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIGBleHBlY3RlZGAsIHRvIHdpdGhpbiBhICsvLSBgZGVsdGFgIHJhbmdlLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmFwcHJveGltYXRlbHkoMS41LCAxLCAwLjUsICdudW1iZXJzIGFyZSBjbG9zZScpO1xuICAgKlxuICAgKiBAbmFtZSBhcHByb3hpbWF0ZWx5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhY3R1YWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuYXBwcm94aW1hdGVseSA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgZGVsdGEsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5hcHByb3hpbWF0ZWx5LCB0cnVlKVxuICAgICAgLnRvLmJlLmFwcHJveGltYXRlbHkoZXhwLCBkZWx0YSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZU1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5zYW1lTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAzIF0sICdzYW1lIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZU1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lTWVtYmVycyA9IGZ1bmN0aW9uIChzZXQxLCBzZXQyLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHNldDEsIG1zZywgYXNzZXJ0LnNhbWVNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90U2FtZU1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci5cbiAgICogVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RTYW1lTWVtYmVycyhbIDEsIDIsIDMgXSwgWyA1LCAxLCAzIF0sICdub3Qgc2FtZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFNhbWVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZU1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5zYW1lLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5zYW1lRGVlcE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQuc2FtZURlZXBNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbeyBiOiAyIH0sIHsgYTogMSB9LCB7IGM6IDMgfV0sICdzYW1lIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBzYW1lRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lRGVlcE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaGF2ZS5zYW1lLmRlZXAubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVEZWVwTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBkb24ndCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gYW55IG9yZGVyLlxuICAgKiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RTYW1lRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFt7IGI6IDIgfSwgeyBhOiAxIH0sIHsgZjogNSB9XSwgJ25vdCBzYW1lIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lRGVlcE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5kZWVwLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5zYW1lT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnNhbWVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAxLCAyLCAzIF0sICdzYW1lIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBzYW1lT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaGF2ZS5zYW1lLm9yZGVyZWQubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVPcmRlcmVkTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBkb24ndCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gdGhlIHNhbWVcbiAgICogb3JkZXIuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDEsIDMgXSwgJ25vdCBzYW1lIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICogVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgJ3NhbWUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LnNhbWVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lXG4gICAqIG9yZGVyLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogYXNzZXJ0Lm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IHo6IDUgfSBdLCAnbm90IHNhbWUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogYXNzZXJ0Lm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9LCB7IGM6IDMgfSBdLCAnbm90IHNhbWUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAyIF0sICdpbmNsdWRlIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZU1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGFcbiAgICogc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDUsIDEgXSwgJ25vdCBpbmNsdWRlIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZU1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlRGVlcE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYSBkZWVwXG4gICAqIGVxdWFsaXR5IGNoZWNrLiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGI6IDIgfSwgeyBhOiAxIH0sIHsgYjogMiB9IF0sICdpbmNsdWRlIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQuaW5jbHVkZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmluY2x1ZGUuZGVlcC5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXNuJ3QgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBkZWVwIGVxdWFsaXR5IGNoZWNrLiBEdXBsaWNhdGVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGI6IDIgfSwgeyBmOiA1IH0gXSwgJ25vdCBpbmNsdWRlIGRlZXAgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbmNsdWRlRGVlcE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNsdWRlLmRlZXAubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZU9yZGVyZWRNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzIGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gdGhlIHNhbWUgb3JkZXJcbiAgICogYmVnaW5uaW5nIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQgaW4gYHN1cGVyc2V0YC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMSwgMiBdLCAnaW5jbHVkZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gdGhlIHNhbWUgb3JkZXJcbiAgICogYmVnaW5uaW5nIHdpdGggdGhlIGZpcnN0IGVsZW1lbnQgaW4gYHN1cGVyc2V0YC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSBdLCAnbm90IGluY2x1ZGUgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDMgXSwgJ25vdCBpbmNsdWRlIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNsdWRlLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5XG4gICAqIGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBhOiAxIH0sIHsgYjogMiB9IF0sICdpbmNsdWRlIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc3VwZXJzZXRcbiAgICogQHBhcmFtIHtBcnJheX0gc3Vic2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBkZWVwIGVxdWFsaXR5XG4gICAqIGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBhOiAxIH0sIHsgZjogNSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYzogMyB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNsdWRlLmRlZXAub3JkZXJlZC5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5vbmVPZihpbkxpc3QsIGxpc3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IG5vbi1vYmplY3QsIG5vbi1hcnJheSB2YWx1ZSBgaW5MaXN0YCBhcHBlYXJzIGluIHRoZSBmbGF0IGFycmF5IGBsaXN0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vbmVPZigxLCBbIDIsIDEgXSwgJ05vdCBmb3VuZCBpbiBsaXN0Jyk7XG4gICAqXG4gICAqIEBuYW1lIG9uZU9mXG4gICAqIEBwYXJhbSB7Kn0gaW5MaXN0XG4gICAqIEBwYXJhbSB7QXJyYXk8Kj59IGxpc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm9uZU9mID0gZnVuY3Rpb24gKGluTGlzdCwgbGlzdCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihpbkxpc3QsIG1zZywgYXNzZXJ0Lm9uZU9mLCB0cnVlKS50by5iZS5vbmVPZihsaXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmNoYW5nZXMoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gY2hhbmdlcyB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMjIgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgY2hhbmdlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXMgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmNoYW5nZXMsIHRydWUpLnRvLmNoYW5nZShvYmosIHByb3ApO1xuICB9XG5cbiAgIC8qKlxuICAgKiAjIyMgLmNoYW5nZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gY2hhbmdlcyB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBieSBhbiBhbW91bnQgKGRlbHRhKS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsICs9IDIgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzQnkoZm4sIG9iaiwgJ3ZhbCcsIDIpO1xuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXNCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuY2hhbmdlc0J5LCB0cnVlKVxuICAgICAgLnRvLmNoYW5nZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gICAvKipcbiAgICogIyMjIC5kb2VzTm90Q2hhbmdlKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBjb25zb2xlLmxvZygnZm9vJyk7IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdENoYW5nZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RDaGFuZ2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90Q2hhbmdlID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdENoYW5nZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuY2hhbmdlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBvciBvZiBhIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGJ5IGFuIGFtb3VudCAoZGVsdGEpXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAxMCB9O1xuICAgKiAgICAgYXNzZXJ0LmNoYW5nZXNCdXROb3RCeShmbiwgb2JqLCAndmFsJywgNSk7XG4gICAqXG4gICAqIEBuYW1lIGNoYW5nZXNCdXROb3RCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuY2hhbmdlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5jaGFuZ2VzQnV0Tm90QnksIHRydWUpXG4gICAgICAudG8uY2hhbmdlKG9iaiwgcHJvcCkuYnV0Lm5vdC5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZXMoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gaW5jcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDEzIH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jcmVhc2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuaW5jcmVhc2VzLCB0cnVlKVxuICAgICAgLnRvLmluY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5pbmNyZWFzZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gaW5jcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsICs9IDEwIH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzQnkoZm4sIG9iaiwgJ3ZhbCcsIDEwKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlc0J5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5pbmNyZWFzZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RJbmNyZWFzZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBpbmNyZWFzZSBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA4IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEluY3JlYXNlKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEluY3JlYXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEluY3JlYXNlID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdEluY3JlYXNlLCB0cnVlKVxuICAgICAgLnRvLm5vdC5pbmNyZWFzZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgaW5jcmVhc2UgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eSBvciBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMTUgfTtcbiAgICogICAgIGFzc2VydC5pbmNyZWFzZXNCdXROb3RCeShmbiwgb2JqLCAndmFsJywgMTApO1xuICAgKlxuICAgKiBAbmFtZSBpbmNyZWFzZXNCdXROb3RCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jcmVhc2VzQnV0Tm90QnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmluY3JlYXNlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmluY3JlYXNlKG9iaiwgcHJvcCkuYnV0Lm5vdC5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXMoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDUgfTtcbiAgICogICAgIGFzc2VydC5kZWNyZWFzZXMoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWNyZWFzZXMgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXMsIHRydWUpXG4gICAgICAudG8uZGVjcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRlY3JlYXNlc0J5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eSBvciBhIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGJ5IGFuIGFtb3VudCAoZGVsdGEpXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCAtPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzQnkoZm4sIG9iaiwgJ3ZhbCcsIDUpO1xuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZXNCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRlY3JlYXNlc0J5LCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCkuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZG9lc05vdERlY3JlYXNlKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSAxNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3REZWNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuZGVjcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3REZWNyZWFzZUJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eSBvciBhIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGJ5IGFuIGFtb3VudCAoZGVsdGEpXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDUgfTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90RGVjcmVhc2VCeShmbiwgb2JqLCAndmFsJywgMSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3REZWNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90RGVjcmVhc2VCeSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuZGVjcmVhc2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXNCdXROb3RCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDEpO1xuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZXNCdXROb3RCeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFuZ2UgYW1vdW50IChkZWx0YSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzQnV0Tm90QnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCkuYnV0Lm5vdC5ieShkZWx0YSk7XG4gIH1cblxuICAvKiFcbiAgICogIyMjIC5pZkVycm9yKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyBpZiB2YWx1ZSBpcyBub3QgYSBmYWxzZSB2YWx1ZSwgYW5kIHRocm93cyBpZiBpdCBpcyBhIHRydWUgdmFsdWUuXG4gICAqIFRoaXMgaXMgYWRkZWQgdG8gYWxsb3cgZm9yIGNoYWkgdG8gYmUgYSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBOb2RlJ3NcbiAgICogYXNzZXJ0IGNsYXNzLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignSSBhbSBhIGN1c3RvbSBlcnJvcicpO1xuICAgKiAgICAgYXNzZXJ0LmlmRXJyb3IoZXJyKTsgLy8gUmV0aHJvd3MgZXJyIVxuICAgKlxuICAgKiBAbmFtZSBpZkVycm9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhyb3codmFsKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNFeHRlbnNpYmxlKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGV4dGVuc2libGUgKGNhbiBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0V4dGVuc2libGUoe30pO1xuICAgKlxuICAgKiBAbmFtZSBpc0V4dGVuc2libGVcbiAgICogQGFsaWFzIGV4dGVuc2libGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0V4dGVuc2libGUgPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNFeHRlbnNpYmxlLCB0cnVlKS50by5iZS5leHRlbnNpYmxlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RXh0ZW5zaWJsZShvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBfbm90XyBleHRlbnNpYmxlLlxuICAgKlxuICAgKiAgICAgdmFyIG5vbkV4dGVuc2libGVPYmplY3QgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pO1xuICAgKiAgICAgdmFyIHNlYWxlZE9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICogICAgIHZhciBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEV4dGVuc2libGUobm9uRXh0ZW5zaWJsZU9iamVjdCk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKHNlYWxlZE9iamVjdCk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90RXh0ZW5zaWJsZVxuICAgKiBAYWxpYXMgbm90RXh0ZW5zaWJsZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZSA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdEV4dGVuc2libGUsIHRydWUpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzU2VhbGVkKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIHNlYWxlZCAoY2Fubm90IGhhdmUgbmV3IHByb3BlcnRpZXMgYWRkZWQgdG8gaXRcbiAgICogYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbm5vdCBiZSByZW1vdmVkKS5cbiAgICpcbiAgICogICAgIHZhciBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSk7XG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzU2VhbGVkKHNlYWxlZE9iamVjdCk7XG4gICAqICAgICBhc3NlcnQuaXNTZWFsZWQoZnJvemVuT2JqZWN0KTtcbiAgICpcbiAgICogQG5hbWUgaXNTZWFsZWRcbiAgICogQGFsaWFzIHNlYWxlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzU2VhbGVkID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzU2VhbGVkLCB0cnVlKS50by5iZS5zZWFsZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RTZWFsZWQob2JqZWN0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgX25vdF8gc2VhbGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90U2VhbGVkKHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RTZWFsZWRcbiAgICogQGFsaWFzIG5vdFNlYWxlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90U2VhbGVkID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzTm90U2VhbGVkLCB0cnVlKS50by5ub3QuYmUuc2VhbGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRnJvemVuKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGZyb3plbiAoY2Fubm90IGhhdmUgbmV3IHByb3BlcnRpZXMgYWRkZWQgdG8gaXRcbiAgICogYW5kIGl0cyBleGlzdGluZyBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBtb2RpZmllZCkuXG4gICAqXG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqICAgICBhc3NlcnQuZnJvemVuKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzRnJvemVuXG4gICAqIEBhbGlhcyBmcm96ZW5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Zyb3plbiA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc0Zyb3plbiwgdHJ1ZSkudG8uYmUuZnJvemVuO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RnJvemVuKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIF9ub3RfIGZyb3plbi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEZyb3plbih7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90RnJvemVuXG4gICAqIEBhbGlhcyBub3RGcm96ZW5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZyb3plbiA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdEZyb3plbiwgdHJ1ZSkudG8ubm90LmJlLmZyb3plbjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0VtcHR5KHRhcmdldClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgZG9lcyBub3QgY29udGFpbiBhbnkgdmFsdWVzLlxuICAgKiBGb3IgYXJyYXlzIGFuZCBzdHJpbmdzLCBpdCBjaGVja3MgdGhlIGBsZW5ndGhgIHByb3BlcnR5LlxuICAgKiBGb3IgYE1hcGAgYW5kIGBTZXRgIGluc3RhbmNlcywgaXQgY2hlY2tzIHRoZSBgc2l6ZWAgcHJvcGVydHkuXG4gICAqIEZvciBub24tZnVuY3Rpb24gb2JqZWN0cywgaXQgZ2V0cyB0aGUgY291bnQgb2Ygb3duXG4gICAqIGVudW1lcmFibGUgc3RyaW5nIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNFbXB0eShbXSk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eSgnJyk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eShuZXcgTWFwKTtcbiAgICogICAgIGFzc2VydC5pc0VtcHR5KHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNFbXB0eVxuICAgKiBAYWxpYXMgZW1wdHlcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfE1hcHxTZXR9IHRhcmdldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0VtcHR5ID0gZnVuY3Rpb24odmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNFbXB0eSwgdHJ1ZSkudG8uYmUuZW1wdHk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RFbXB0eSh0YXJnZXQpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGNvbnRhaW5zIHZhbHVlcy5cbiAgICogRm9yIGFycmF5cyBhbmQgc3RyaW5ncywgaXQgY2hlY2tzIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eS5cbiAgICogRm9yIGBNYXBgIGFuZCBgU2V0YCBpbnN0YW5jZXMsIGl0IGNoZWNrcyB0aGUgYHNpemVgIHByb3BlcnR5LlxuICAgKiBGb3Igbm9uLWZ1bmN0aW9uIG9iamVjdHMsIGl0IGdldHMgdGhlIGNvdW50IG9mIG93blxuICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90RW1wdHkoWzEsIDJdKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KCczNCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RW1wdHkobmV3IFNldChbNSwgNl0pKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KHsga2V5OiA3IH0pO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEVtcHR5XG4gICAqIEBhbGlhcyBub3RFbXB0eVxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheXxTdHJpbmd8TWFwfFNldH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90RW1wdHkgPSBmdW5jdGlvbih2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdEVtcHR5LCB0cnVlKS50by5ub3QuYmUuZW1wdHk7XG4gIH07XG5cbiAgLyohXG4gICAqIEFsaWFzZXMuXG4gICAqL1xuXG4gIChmdW5jdGlvbiBhbGlhcyhuYW1lLCBhcyl7XG4gICAgYXNzZXJ0W2FzXSA9IGFzc2VydFtuYW1lXTtcbiAgICByZXR1cm4gYWxpYXM7XG4gIH0pXG4gICgnaXNPaycsICdvaycpXG4gICgnaXNOb3RPaycsICdub3RPaycpXG4gICgndGhyb3dzJywgJ3Rocm93JylcbiAgKCd0aHJvd3MnLCAnVGhyb3cnKVxuICAoJ2lzRXh0ZW5zaWJsZScsICdleHRlbnNpYmxlJylcbiAgKCdpc05vdEV4dGVuc2libGUnLCAnbm90RXh0ZW5zaWJsZScpXG4gICgnaXNTZWFsZWQnLCAnc2VhbGVkJylcbiAgKCdpc05vdFNlYWxlZCcsICdub3RTZWFsZWQnKVxuICAoJ2lzRnJvemVuJywgJ2Zyb3plbicpXG4gICgnaXNOb3RGcm96ZW4nLCAnbm90RnJvemVuJylcbiAgKCdpc0VtcHR5JywgJ2VtcHR5JylcbiAgKCdpc05vdEVtcHR5JywgJ25vdEVtcHR5Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiBDaGFpIC0gcGF0aHZhbCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbG9naWNhbHBhcmFkb3gvZmlsdHJcbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5oYXNQcm9wZXJ0eShvYmplY3QsIG5hbWUpXG4gKlxuICogVGhpcyBhbGxvd3MgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIG93blxuICogb3IgaW5oZXJpdGVkIGZyb20gcHJvdG90eXBlIGNoYWluIG5hbWVkIHByb3BlcnR5LlxuICpcbiAqIEJhc2ljYWxseSBkb2VzIHRoZSBzYW1lIHRoaW5nIGFzIHRoZSBgaW5gXG4gKiBvcGVyYXRvciBidXQgd29ya3MgcHJvcGVybHkgd2l0aCBudWxsL3VuZGVmaW5lZCB2YWx1ZXNcbiAqIGFuZCBvdGhlciBwcmltaXRpdmVzLlxuICpcbiAqICAgICB2YXIgb2JqID0ge1xuICogICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgLCBzdHI6ICdIZWxsbydcbiAqICAgICB9XG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSB0aGUgcmVzdWx0cy5cbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnc3RyJyk7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnY29uc3RydWN0b3InKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmosICdiYXInKTsgIC8vIGZhbHNlXG4gKlxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsICdsZW5ndGgnKTsgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsIDEpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsIDUpOyAgLy8gZmFsc2VcbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLmFyciwgJ2xlbmd0aCcpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsIDIpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsIDMpOyAgLy8gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufSB3aGV0aGVyIGl0IGV4aXN0c1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgaGFzUHJvcGVydHlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzUHJvcGVydHkob2JqLCBuYW1lKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fCBvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUaGUgYGluYCBvcGVyYXRvciBkb2VzIG5vdCB3b3JrIHdpdGggcHJpbWl0aXZlcy5cbiAgcmV0dXJuIG5hbWUgaW4gT2JqZWN0KG9iaik7XG59XG5cbi8qICFcbiAqICMjIHBhcnNlUGF0aChwYXRoKVxuICpcbiAqIEhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHBhcnNlIHN0cmluZyBvYmplY3RcbiAqIHBhdGhzLiBVc2UgaW4gY29uanVuY3Rpb24gd2l0aCBgaW50ZXJuYWxHZXRQYXRoVmFsdWVgLlxuICpcbiAqICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlUGF0aCgnbXlvYmplY3QucHJvcGVydHkuc3VicHJvcCcpO1xuICpcbiAqICMjIyBQYXRoczpcbiAqXG4gKiAqIENhbiBiZSBpbmZpbml0ZWx5IGRlZXAgYW5kIG5lc3RlZC5cbiAqICogQXJyYXlzIGFyZSBhbHNvIHZhbGlkIHVzaW5nIHRoZSBmb3JtYWwgYG15b2JqZWN0LmRvY3VtZW50WzNdLnByb3BlcnR5YC5cbiAqICogTGl0ZXJhbCBkb3RzIGFuZCBicmFja2V0cyAobm90IGRlbGltaXRlcikgbXVzdCBiZSBiYWNrc2xhc2gtZXNjYXBlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gcGFyc2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgc3RyID0gcGF0aC5yZXBsYWNlKC8oW15cXFxcXSlcXFsvZywgJyQxLlsnKTtcbiAgdmFyIHBhcnRzID0gc3RyLm1hdGNoKC8oXFxcXFxcLnxbXi5dKz8pKy9nKTtcbiAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbiBtYXBNYXRjaGVzKHZhbHVlKSB7XG4gICAgdmFyIHJlZ2V4cCA9IC9eXFxbKFxcZCspXFxdJC87XG4gICAgdmFyIG1BcnIgPSByZWdleHAuZXhlYyh2YWx1ZSk7XG4gICAgdmFyIHBhcnNlZCA9IG51bGw7XG4gICAgaWYgKG1BcnIpIHtcbiAgICAgIHBhcnNlZCA9IHsgaTogcGFyc2VGbG9hdChtQXJyWzFdKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWQgPSB7IHA6IHZhbHVlLnJlcGxhY2UoL1xcXFwoWy5cXFtcXF1dKS9nLCAnJDEnKSB9O1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH0pO1xufVxuXG4vKiAhXG4gKiAjIyBpbnRlcm5hbEdldFBhdGhWYWx1ZShvYmosIHBhcnNlZFssIHBhdGhEZXB0aF0pXG4gKlxuICogSGVscGVyIGNvbXBhbmlvbiBmdW5jdGlvbiBmb3IgYC5wYXJzZVBhdGhgIHRoYXQgcmV0dXJuc1xuICogdGhlIHZhbHVlIGxvY2F0ZWQgYXQgdGhlIHBhcnNlZCBhZGRyZXNzLlxuICpcbiAqICAgICAgdmFyIHZhbHVlID0gZ2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRvIHNlYXJjaCBhZ2FpbnN0XG4gKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkIGRlZmluaXRpb24gZnJvbSBgcGFyc2VQYXRoYC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCAobmVzdGluZyBsZXZlbCkgb2YgdGhlIHByb3BlcnR5IHdlIHdhbnQgdG8gcmV0cmlldmVcbiAqIEByZXR1cm5zIHtPYmplY3R8VW5kZWZpbmVkfSB2YWx1ZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQsIHBhdGhEZXB0aCkge1xuICB2YXIgdGVtcG9yYXJ5VmFsdWUgPSBvYmo7XG4gIHZhciByZXMgPSBudWxsO1xuICBwYXRoRGVwdGggPSAodHlwZW9mIHBhdGhEZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyBwYXJzZWQubGVuZ3RoIDogcGF0aERlcHRoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhEZXB0aDsgaSsrKSB7XG4gICAgdmFyIHBhcnQgPSBwYXJzZWRbaV07XG4gICAgaWYgKHRlbXBvcmFyeVZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnQucCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSB0ZW1wb3JhcnlWYWx1ZVtwYXJ0LmldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSB0ZW1wb3JhcnlWYWx1ZVtwYXJ0LnBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA9PT0gKHBhdGhEZXB0aCAtIDEpKSB7XG4gICAgICAgIHJlcyA9IHRlbXBvcmFyeVZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbi8qICFcbiAqICMjIGludGVybmFsU2V0UGF0aFZhbHVlKG9iaiwgdmFsdWUsIHBhcnNlZClcbiAqXG4gKiBDb21wYW5pb24gZnVuY3Rpb24gZm9yIGBwYXJzZVBhdGhgIHRoYXQgc2V0c1xuICogdGhlIHZhbHVlIGxvY2F0ZWQgYXQgYSBwYXJzZWQgYWRkcmVzcy5cbiAqXG4gKiAgaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCAndmFsdWUnLCBwYXJzZWQpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gc2VhcmNoIGFuZCBkZWZpbmUgb25cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdG8gdXNlIHVwb24gc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkIGRlZmluaXRpb24gZnJvbSBgcGFyc2VQYXRoYFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCB2YWwsIHBhcnNlZCkge1xuICB2YXIgdGVtcE9iaiA9IG9iajtcbiAgdmFyIHBhdGhEZXB0aCA9IHBhcnNlZC5sZW5ndGg7XG4gIHZhciBwYXJ0ID0gbnVsbDtcbiAgLy8gSGVyZSB3ZSBpdGVyYXRlIHRocm91Z2ggZXZlcnkgcGFydCBvZiB0aGUgcGF0aFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhEZXB0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gbnVsbDtcbiAgICB2YXIgcHJvcFZhbCA9IG51bGw7XG4gICAgcGFydCA9IHBhcnNlZFtpXTtcblxuICAgIC8vIElmIGl0J3MgdGhlIGxhc3QgcGFydCBvZiB0aGUgcGF0aCwgd2Ugc2V0IHRoZSAncHJvcE5hbWUnIHZhbHVlIHdpdGggdGhlIHByb3BlcnR5IG5hbWVcbiAgICBpZiAoaSA9PT0gKHBhdGhEZXB0aCAtIDEpKSB7XG4gICAgICBwcm9wTmFtZSA9IHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnID8gcGFydC5pIDogcGFydC5wO1xuICAgICAgLy8gTm93IHdlIHNldCB0aGUgcHJvcGVydHkgd2l0aCB0aGUgbmFtZSBoZWxkIGJ5ICdwcm9wTmFtZScgb24gb2JqZWN0IHdpdGggdGhlIGRlc2lyZWQgdmFsXG4gICAgICB0ZW1wT2JqW3Byb3BOYW1lXSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJ0LnAgIT09ICd1bmRlZmluZWQnICYmIHRlbXBPYmpbcGFydC5wXSkge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcGFydC5wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJ0LmkgIT09ICd1bmRlZmluZWQnICYmIHRlbXBPYmpbcGFydC5pXSkge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcGFydC5pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIG9iaiBkb2Vzbid0IGhhdmUgdGhlIHByb3BlcnR5IHdlIGNyZWF0ZSBvbmUgd2l0aCB0aGF0IG5hbWUgdG8gZGVmaW5lIGl0XG4gICAgICB2YXIgbmV4dCA9IHBhcnNlZFtpICsgMV07XG4gICAgICAvLyBIZXJlIHdlIHNldCB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2hpY2ggd2lsbCBiZSBkZWZpbmVkXG4gICAgICBwcm9wTmFtZSA9IHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnID8gcGFydC5pIDogcGFydC5wO1xuICAgICAgLy8gSGVyZSB3ZSBkZWNpZGUgaWYgdGhpcyBwcm9wZXJ0eSB3aWxsIGJlIGFuIGFycmF5IG9yIGEgbmV3IG9iamVjdFxuICAgICAgcHJvcFZhbCA9IHR5cGVvZiBuZXh0LnAgPT09ICd1bmRlZmluZWQnID8gW10gOiB7fTtcbiAgICAgIHRlbXBPYmpbcHJvcE5hbWVdID0gcHJvcFZhbDtcbiAgICAgIHRlbXBPYmogPSB0ZW1wT2JqW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiAjIyMgLmdldFBhdGhJbmZvKG9iamVjdCwgcGF0aClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHByb3BlcnR5IGluZm8gaW4gYW5cbiAqIG9iamVjdCBnaXZlbiBhIHN0cmluZyBwYXRoLlxuICpcbiAqIFRoZSBwYXRoIGluZm8gY29uc2lzdHMgb2YgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAqIHBhcmVudCAtIFRoZSBwYXJlbnQgb2JqZWN0IG9mIHRoZSBwcm9wZXJ0eSByZWZlcmVuY2VkIGJ5IGBwYXRoYFxuICogKiBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpbmFsIHByb3BlcnR5LCBhIG51bWJlciBpZiBpdCB3YXMgYW4gYXJyYXkgaW5kZXhlclxuICogKiB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHksIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKiAqIGV4aXN0cyAtIFdoZXRoZXIgdGhlIHByb3BlcnR5IGV4aXN0cyBvciBub3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gaW5mb1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0UGF0aEluZm9cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZ2V0UGF0aEluZm8ob2JqLCBwYXRoKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZVBhdGgocGF0aCk7XG4gIHZhciBsYXN0ID0gcGFyc2VkW3BhcnNlZC5sZW5ndGggLSAxXTtcbiAgdmFyIGluZm8gPSB7XG4gICAgcGFyZW50OiBwYXJzZWQubGVuZ3RoID4gMSA/IGludGVybmFsR2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkLCBwYXJzZWQubGVuZ3RoIC0gMSkgOiBvYmosXG4gICAgbmFtZTogbGFzdC5wIHx8IGxhc3QuaSxcbiAgICB2YWx1ZTogaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQpLFxuICB9O1xuICBpbmZvLmV4aXN0cyA9IGhhc1Byb3BlcnR5KGluZm8ucGFyZW50LCBpbmZvLm5hbWUpO1xuXG4gIHJldHVybiBpbmZvO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0UGF0aFZhbHVlKG9iamVjdCwgcGF0aClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHZhbHVlcyBpbiBhblxuICogb2JqZWN0IGdpdmVuIGEgc3RyaW5nIHBhdGguXG4gKlxuICogICAgIHZhciBvYmogPSB7XG4gKiAgICAgICAgIHByb3AxOiB7XG4gKiAgICAgICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgICAgICwgc3RyOiAnSGVsbG8nXG4gKiAgICAgICAgIH1cbiAqICAgICAgICwgcHJvcDI6IHtcbiAqICAgICAgICAgICAgIGFycjogWyB7IG5lc3RlZDogJ1VuaXZlcnNlJyB9IF1cbiAqICAgICAgICAgICAsIHN0cjogJ0hlbGxvIGFnYWluISdcbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHdvdWxkIGJlIHRoZSByZXN1bHRzLlxuICpcbiAqICAgICBnZXRQYXRoVmFsdWUob2JqLCAncHJvcDEuc3RyJyk7IC8vIEhlbGxvXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AxLmF0dFsyXScpOyAvLyBiXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AyLmFyclswXS5uZXN0ZWQnKTsgLy8gVW5pdmVyc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gdmFsdWUgb3IgYHVuZGVmaW5lZGBcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldFBhdGhWYWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRQYXRoVmFsdWUob2JqLCBwYXRoKSB7XG4gIHZhciBpbmZvID0gZ2V0UGF0aEluZm8ob2JqLCBwYXRoKTtcbiAgcmV0dXJuIGluZm8udmFsdWU7XG59XG5cbi8qKlxuICogIyMjIC5zZXRQYXRoVmFsdWUob2JqZWN0LCBwYXRoLCB2YWx1ZSlcbiAqXG4gKiBEZWZpbmUgdGhlIHZhbHVlIGluIGFuIG9iamVjdCBhdCBhIGdpdmVuIHN0cmluZyBwYXRoLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgb2JqID0ge1xuICogICAgIHByb3AxOiB7XG4gKiAgICAgICAgIGFycjogWydhJywgJ2InLCAnYyddXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvJ1xuICogICAgIH1cbiAqICAgLCBwcm9wMjoge1xuICogICAgICAgICBhcnI6IFsgeyBuZXN0ZWQ6ICdVbml2ZXJzZScgfSBdXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvIGFnYWluISdcbiAqICAgICB9XG4gKiB9O1xuICogYGBgXG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSBhY2NlcHRhYmxlLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcHJvcGVydGllcyA9IHJlcXVpcmUoJ3RlYS1wcm9wZXJ0aWVzJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMS5zdHInLCAnSGVsbG8gVW5pdmVyc2UhJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMS5hcnJbMl0nLCAnQicpO1xuICogcHJvcGVydGllcy5zZXQob2JqLCAncHJvcDIuYXJyWzBdLm5lc3RlZC52YWx1ZScsIHsgaGVsbG86ICd1bml2ZXJzZScgfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldFBhdGhWYWx1ZShvYmosIHBhdGgsIHZhbCkge1xuICB2YXIgcGFyc2VkID0gcGFyc2VQYXRoKHBhdGgpO1xuICBpbnRlcm5hbFNldFBhdGhWYWx1ZShvYmosIHZhbCwgcGFyc2VkKTtcbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhhc1Byb3BlcnR5OiBoYXNQcm9wZXJ0eSxcbiAgZ2V0UGF0aEluZm86IGdldFBhdGhJbmZvLFxuICBnZXRQYXRoVmFsdWU6IGdldFBhdGhWYWx1ZSxcbiAgc2V0UGF0aFZhbHVlOiBzZXRQYXRoVmFsdWUsXG59O1xuIiwiLyohXG4gKiBDaGFpIC0gdGVzdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcblxuLyoqXG4gKiAjIyMgLnRlc3Qob2JqZWN0LCBleHByZXNzaW9uKVxuICpcbiAqIFRlc3QgYW5kIG9iamVjdCBmb3IgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIHRlc3RcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRlc3Qob2JqLCBhcmdzKSB7XG4gIHZhciBuZWdhdGUgPSBmbGFnKG9iaiwgJ25lZ2F0ZScpXG4gICAgLCBleHByID0gYXJnc1swXTtcbiAgcmV0dXJuIG5lZ2F0ZSA/ICFleHByIDogZXhwcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qICFcbiAqIHR5cGUtZGV0ZWN0XG4gKiBDb3B5cmlnaHQoYykgMjAxMyBqYWtlIGx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG52YXIgcHJvbWlzZUV4aXN0cyA9IHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nO1xudmFyIGdsb2JhbE9iamVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBzZWxmOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG52YXIgaXNEb20gPSAnbG9jYXRpb24nIGluIGdsb2JhbE9iamVjdCAmJiAnZG9jdW1lbnQnIGluIGdsb2JhbE9iamVjdDtcbnZhciBzeW1ib2xFeGlzdHMgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJztcbnZhciBtYXBFeGlzdHMgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcbnZhciBzZXRFeGlzdHMgPSB0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJztcbnZhciB3ZWFrTWFwRXhpc3RzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnO1xudmFyIHdlYWtTZXRFeGlzdHMgPSB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgZGF0YVZpZXdFeGlzdHMgPSB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbEl0ZXJhdG9yRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgIT09ICd1bmRlZmluZWQnO1xudmFyIHNldEVudHJpZXNFeGlzdHMgPSBzZXRFeGlzdHMgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJztcbnZhciBtYXBFbnRyaWVzRXhpc3RzID0gbWFwRXhpc3RzICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09ICdmdW5jdGlvbic7XG52YXIgc2V0SXRlcmF0b3JQcm90b3R5cGUgPSBzZXRFbnRyaWVzRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgU2V0KCkuZW50cmllcygpKTtcbnZhciBtYXBJdGVyYXRvclByb3RvdHlwZSA9IG1hcEVudHJpZXNFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBNYXAoKS5lbnRyaWVzKCkpO1xudmFyIGFycmF5SXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG52YXIgYXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGFycmF5SXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgc3RyaW5nSXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgU3RyaW5nLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xudmFyIHN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlID0gc3RyaW5nSXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgdG9TdHJpbmdMZWZ0U2xpY2VMZW5ndGggPSA4O1xudmFyIHRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCA9IC0xO1xuLyoqXG4gKiAjIyMgdHlwZU9mIChvYmopXG4gKlxuICogVXNlcyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGFuIG9iamVjdCxcbiAqIG5vcm1hbGlzaW5nIGJlaGF2aW91ciBhY3Jvc3MgZW5naW5lIHZlcnNpb25zICYgd2VsbCBvcHRpbWlzZWQuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IG9iamVjdCB0eXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHR5cGVEZXRlY3Qob2JqKSB7XG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAqIFByZTpcbiAgICogICBzdHJpbmcgbGl0ZXJhbCAgICAgeCAzLDAzOSwwMzUgb3BzL3NlYyDCsTEuNjIlICg3OCBydW5zIHNhbXBsZWQpXG4gICAqICAgYm9vbGVhbiBsaXRlcmFsICAgIHggMSw0MjQsMTM4IG9wcy9zZWMgwrE0LjU0JSAoNzUgcnVucyBzYW1wbGVkKVxuICAgKiAgIG51bWJlciBsaXRlcmFsICAgICB4IDEsNjUzLDE1MyBvcHMvc2VjIMKxMS45MSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogICB1bmRlZmluZWQgICAgICAgICAgeCA5LDk3OCw2NjAgb3BzL3NlYyDCsTEuOTIlICg3NSBydW5zIHNhbXBsZWQpXG4gICAqICAgZnVuY3Rpb24gICAgICAgICAgIHggMiw1NTYsNzY5IG9wcy9zZWMgwrExLjczJSAoNzcgcnVucyBzYW1wbGVkKVxuICAgKiBQb3N0OlxuICAgKiAgIHN0cmluZyBsaXRlcmFsICAgICB4IDM4LDU2NCw3OTYgb3BzL3NlYyDCsTEuMTUlICg3OSBydW5zIHNhbXBsZWQpXG4gICAqICAgYm9vbGVhbiBsaXRlcmFsICAgIHggMzEsMTQ4LDk0MCBvcHMvc2VjIMKxMS4xMCUgKDc5IHJ1bnMgc2FtcGxlZClcbiAgICogICBudW1iZXIgbGl0ZXJhbCAgICAgeCAzMiw2NzksMzMwIG9wcy9zZWMgwrExLjkwJSAoNzggcnVucyBzYW1wbGVkKVxuICAgKiAgIHVuZGVmaW5lZCAgICAgICAgICB4IDMyLDM2MywzNjggb3BzL3NlYyDCsTEuMDclICg4MiBydW5zIHNhbXBsZWQpXG4gICAqICAgZnVuY3Rpb24gICAgICAgICAgIHggMzEsMjk2LDg3MCBvcHMvc2VjIMKxMC45NiUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgICovXG4gIHZhciB0eXBlb2ZPYmogPSB0eXBlb2Ygb2JqO1xuICBpZiAodHlwZW9mT2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0eXBlb2ZPYmo7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgKiBQcmU6XG4gICAqICAgbnVsbCAgICAgICAgICAgICAgIHggMjgsNjQ1LDc2NSBvcHMvc2VjIMKxMS4xNyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogUG9zdDpcbiAgICogICBudWxsICAgICAgICAgICAgICAgeCAzNiw0MjgsOTYyIG9wcy9zZWMgwrExLjM3JSAoODQgcnVucyBzYW1wbGVkKVxuICAgKi9cbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cpYGBcbiAgICogIC0gTm9kZSA9PT0gXCJbb2JqZWN0IGdsb2JhbF1cIlxuICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBnbG9iYWxdXCJcbiAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBQaGFudG9tSlMgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIElFIDExID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIElFIEVkZ2UgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKWBgXG4gICAqICAtIENocm9tZSBXb3JrZXIgPT09IFwiW29iamVjdCBnbG9iYWxdXCJcbiAgICogIC0gRmlyZWZveCBXb3JrZXIgPT09IFwiW29iamVjdCBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKiAgLSBTYWZhcmkgV29ya2VyID09PSBcIltvYmplY3QgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICogIC0gSUUgMTEgV29ya2VyID09PSBcIltvYmplY3QgV29ya2VyR2xvYmFsU2NvcGVdXCJcbiAgICogIC0gSUUgRWRnZSBXb3JrZXIgPT09IFwiW29iamVjdCBXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKi9cbiAgaWYgKG9iaiA9PT0gZ2xvYmFsT2JqZWN0KSB7XG4gICAgcmV0dXJuICdnbG9iYWwnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICogUHJlOlxuICAgKiAgIGFycmF5IGxpdGVyYWwgICAgICB4IDIsODg4LDM1MiBvcHMvc2VjIMKxMC42NyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogUG9zdDpcbiAgICogICBhcnJheSBsaXRlcmFsICAgICAgeCAyMiw0NzksNjUwIG9wcy9zZWMgwrEwLjk2JSAoODEgcnVucyBzYW1wbGVkKVxuICAgKi9cbiAgaWYgKFxuICAgIEFycmF5LmlzQXJyYXkob2JqKSAmJlxuICAgIChzeW1ib2xUb1N0cmluZ1RhZ0V4aXN0cyA9PT0gZmFsc2UgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gb2JqKSlcbiAgKSB7XG4gICAgcmV0dXJuICdBcnJheSc7XG4gIH1cblxuICBpZiAoaXNEb20pIHtcbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvYnJvd3NlcnMuaHRtbCNsb2NhdGlvbilcbiAgICAgKiBXaGF0V0cgSFRNTCQ3LjcuMyAtIFRoZSBgTG9jYXRpb25gIGludGVyZmFjZVxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93LmxvY2F0aW9uKWBgXG4gICAgICogIC0gSUUgPD0xMSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqICAtIElFIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IGdsb2JhbE9iamVjdC5sb2NhdGlvbikge1xuICAgICAgcmV0dXJuICdMb2NhdGlvbic7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2RvY3VtZW50KVxuICAgICAqIFdoYXRXRyBIVE1MJDMuMS4xIC0gVGhlIGBEb2N1bWVudGAgb2JqZWN0XG4gICAgICogTm90ZTogTW9zdCBicm93c2VycyBjdXJyZW50bHkgYWRoZXIgdG8gdGhlIFczQyBET00gTGV2ZWwgMiBzcGVjXG4gICAgICogICAgICAgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1IVE1ML2h0bWwuaHRtbCNJRC0yNjgwOTI2OClcbiAgICAgKiAgICAgICB3aGljaCBzdWdnZXN0cyB0aGF0IGJyb3dzZXJzIHNob3VsZCB1c2UgSFRNTFRhYmxlQ2VsbEVsZW1lbnQgZm9yXG4gICAgICogICAgICAgYm90aCBURCBhbmQgVEggZWxlbWVudHMuIFdoYXRXRyBzZXBhcmF0ZXMgdGhlc2UuXG4gICAgICogICAgICAgV2hhdFdHIEhUTUwgc3RhdGVzOlxuICAgICAqICAgICAgICAgPiBGb3IgaGlzdG9yaWNhbCByZWFzb25zLCBXaW5kb3cgb2JqZWN0cyBtdXN0IGFsc28gaGF2ZSBhXG4gICAgICogICAgICAgICA+IHdyaXRhYmxlLCBjb25maWd1cmFibGUsIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVkXG4gICAgICogICAgICAgICA+IEhUTUxEb2N1bWVudCB3aG9zZSB2YWx1ZSBpcyB0aGUgRG9jdW1lbnQgaW50ZXJmYWNlIG9iamVjdC5cbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50KWBgXG4gICAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxEb2N1bWVudF1cIlxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBEb2N1bWVudF1cIlxuICAgICAqICAtIElFIDExID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gSUUgRWRnZSA8PTEzID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiA9PT0gZ2xvYmFsT2JqZWN0LmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gJ0RvY3VtZW50JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI21pbWV0eXBlYXJyYXkpXG4gICAgICogV2hhdFdHIEhUTUwkOC42LjEuNSAtIFBsdWdpbnMgLSBJbnRlcmZhY2UgTWltZVR5cGVBcnJheVxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmF2aWdhdG9yLm1pbWVUeXBlcylgYFxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBNU01pbWVUeXBlc0NvbGxlY3Rpb25dXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSAoZ2xvYmFsT2JqZWN0Lm5hdmlnYXRvciB8fCB7fSkubWltZVR5cGVzKSB7XG4gICAgICByZXR1cm4gJ01pbWVUeXBlQXJyYXknO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjcGx1Z2luYXJyYXkpXG4gICAgICogV2hhdFdHIEhUTUwkOC42LjEuNSAtIFBsdWdpbnMgLSBJbnRlcmZhY2UgUGx1Z2luQXJyYXlcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5hdmlnYXRvci5wbHVnaW5zKWBgXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IE1TUGx1Z2luc0NvbGxlY3Rpb25dXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSAoZ2xvYmFsT2JqZWN0Lm5hdmlnYXRvciB8fCB7fSkucGx1Z2lucykge1xuICAgICAgcmV0dXJuICdQbHVnaW5BcnJheSc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNwbHVnaW5hcnJheSlcbiAgICAgKiBXaGF0V0cgSFRNTCQ0LjQuNCAtIFRoZSBgYmxvY2txdW90ZWAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFF1b3RlRWxlbWVudGBcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jsb2NrcXVvdGUnKSlgYFxuICAgICAqICAtIElFIDw9MTAgPT09IFwiW29iamVjdCBIVE1MQmxvY2tFbGVtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG9iai50YWdOYW1lID09PSAnQkxPQ0tRVU9URScpIHtcbiAgICAgIHJldHVybiAnSFRNTFF1b3RlRWxlbWVudCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2h0bWx0YWJsZWRhdGFjZWxsZWxlbWVudClcbiAgICAgKiBXaGF0V0cgSFRNTCQ0LjkuOSAtIFRoZSBgdGRgIGVsZW1lbnQgLSBJbnRlcmZhY2UgYEhUTUxUYWJsZURhdGFDZWxsRWxlbWVudGBcbiAgICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBhZGhlciB0byB0aGUgVzNDIERPTSBMZXZlbCAyIHNwZWNcbiAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTgyOTE1MDc1KVxuICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgKiAgICAgICBib3RoIFREIGFuZCBUSCBlbGVtZW50cy4gV2hhdFdHIHNlcGFyYXRlcyB0aGVzZS5cbiAgICAgKiBUZXN0OiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKSlcbiAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG9iai50YWdOYW1lID09PSAnVEQnKSB7XG4gICAgICByZXR1cm4gJ0hUTUxUYWJsZURhdGFDZWxsRWxlbWVudCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI2h0bWx0YWJsZWhlYWRlcmNlbGxlbGVtZW50KVxuICAgICAqIFdoYXRXRyBIVE1MJDQuOS45IC0gVGhlIGB0ZGAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFRhYmxlSGVhZGVyQ2VsbEVsZW1lbnRgXG4gICAgICogTm90ZTogTW9zdCBicm93c2VycyBjdXJyZW50bHkgYWRoZXIgdG8gdGhlIFczQyBET00gTGV2ZWwgMiBzcGVjXG4gICAgICogICAgICAgKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1IVE1ML2h0bWwuaHRtbCNJRC04MjkxNTA3NSlcbiAgICAgKiAgICAgICB3aGljaCBzdWdnZXN0cyB0aGF0IGJyb3dzZXJzIHNob3VsZCB1c2UgSFRNTFRhYmxlQ2VsbEVsZW1lbnQgZm9yXG4gICAgICogICAgICAgYm90aCBURCBhbmQgVEggZWxlbWVudHMuIFdoYXRXRyBzZXBhcmF0ZXMgdGhlc2UuXG4gICAgICogVGVzdDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJykpXG4gICAgICogIC0gQ2hyb21lID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqL1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBvYmoudGFnTmFtZSA9PT0gJ1RIJykge1xuICAgICAgcmV0dXJuICdIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudCc7XG4gICAgfVxuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBGbG9hdDY0QXJyYXkgICAgICAgeCA2MjUsNjQ0IG9wcy9zZWMgwrExLjU4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgRmxvYXQzMkFycmF5ICAgICAgIHggMSwyNzksODUyIG9wcy9zZWMgwrEyLjkxJSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDMyQXJyYXkgICAgICAgIHggMSwxNzgsMTg1IG9wcy9zZWMgwrExLjk1JSAoODMgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDE2QXJyYXkgICAgICAgIHggMSwwMDgsMzgwIG9wcy9zZWMgwrEyLjI1JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhBcnJheSAgICAgICAgIHggMSwxMjgsMDQwIG9wcy9zZWMgwrEyLjExJSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MzJBcnJheSAgICAgICAgIHggMSwxNzAsMTE5IG9wcy9zZWMgwrEyLjg4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MTZBcnJheSAgICAgICAgIHggMSwxNzYsMzQ4IG9wcy9zZWMgwrE1Ljc5JSAoODYgcnVucyBzYW1wbGVkKVxuICAqICAgSW50OEFycmF5ICAgICAgICAgIHggMSwwNTgsNzA3IG9wcy9zZWMgwrE0Ljk0JSAoNzcgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhDbGFtcGVkQXJyYXkgIHggMSwxMTAsNjMzIG9wcy9zZWMgwrE0LjIwJSAoODAgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBGbG9hdDY0QXJyYXkgICAgICAgeCA3LDEwNSw2NzEgb3BzL3NlYyDCsTEzLjQ3JSAoNjQgcnVucyBzYW1wbGVkKVxuICAqICAgRmxvYXQzMkFycmF5ICAgICAgIHggNSw4ODcsOTEyIG9wcy9zZWMgwrExLjQ2JSAoODIgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDMyQXJyYXkgICAgICAgIHggNiw0OTEsNjYxIG9wcy9zZWMgwrExLjc2JSAoNzkgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDE2QXJyYXkgICAgICAgIHggNiw1NTksNzk1IG9wcy9zZWMgwrExLjY3JSAoODIgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhBcnJheSAgICAgICAgIHggNiw0NjMsOTY2IG9wcy9zZWMgwrExLjQzJSAoODUgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MzJBcnJheSAgICAgICAgIHggNSw2NDEsODQxIG9wcy9zZWMgwrEzLjQ5JSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgSW50MTZBcnJheSAgICAgICAgIHggNiw1ODMsNTExIG9wcy9zZWMgwrExLjk4JSAoODAgcnVucyBzYW1wbGVkKVxuICAqICAgSW50OEFycmF5ICAgICAgICAgIHggNiw2MDYsMDc4IG9wcy9zZWMgwrExLjc0JSAoODEgcnVucyBzYW1wbGVkKVxuICAqICAgVWludDhDbGFtcGVkQXJyYXkgIHggNiw2MDIsMjI0IG9wcy9zZWMgwrExLjc3JSAoODMgcnVucyBzYW1wbGVkKVxuICAqL1xuICB2YXIgc3RyaW5nVGFnID0gKHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddKTtcbiAgaWYgKHR5cGVvZiBzdHJpbmdUYWcgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cmluZ1RhZztcbiAgfVxuXG4gIHZhciBvYmpQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICByZWdleCBsaXRlcmFsICAgICAgeCAxLDc3MiwzODUgb3BzL3NlYyDCsTEuODUlICg3NyBydW5zIHNhbXBsZWQpXG4gICogICByZWdleCBjb25zdHJ1Y3RvciAgeCAyLDE0Myw2MzQgb3BzL3NlYyDCsTIuNDYlICg3OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHJlZ2V4IGxpdGVyYWwgICAgICB4IDMsOTI4LDAwOSBvcHMvc2VjIMKxMC42NSUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgKiAgIHJlZ2V4IGNvbnN0cnVjdG9yICB4IDMsOTMxLDEwOCBvcHMvc2VjIMKxMC41OCUgKDg0IHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKG9ialByb3RvdHlwZSA9PT0gUmVnRXhwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnUmVnRXhwJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgZGF0ZSAgICAgICAgICAgICAgIHggMiwxMzAsMDc0IG9wcy9zZWMgwrE0LjQyJSAoNjggcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBkYXRlICAgICAgICAgICAgICAgeCAzLDk1Myw3Nzkgb3BzL3NlYyDCsTEuMzUlICg3NyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IERhdGUucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdEYXRlJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy1wcm9taXNlLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjUuNC41LjQgLSBQcm9taXNlLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJQcm9taXNlXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUHJvbWlzZS5yZXNvbHZlKCkpYGBcbiAgICogIC0gQ2hyb21lIDw9NDcgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICogIC0gRWRnZSA8PTIwID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqICAtIEZpcmVmb3ggMjktTGF0ZXN0ID09PSBcIltvYmplY3QgUHJvbWlzZV1cIlxuICAgKiAgLSBTYWZhcmkgNy4xLUxhdGVzdCA9PT0gXCJbb2JqZWN0IFByb21pc2VdXCJcbiAgICovXG4gIGlmIChwcm9taXNlRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gUHJvbWlzZS5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1Byb21pc2UnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBzZXQgICAgICAgICAgICAgICAgeCAyLDIyMiwxODYgb3BzL3NlYyDCsTEuMzElICg4MiBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHNldCAgICAgICAgICAgICAgICB4IDQsNTQ1LDg3OSBvcHMvc2VjIMKxMS4xMyUgKDgzIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHNldEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFNldC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1NldCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIG1hcCAgICAgICAgICAgICAgICB4IDIsMzk2LDg0MiBvcHMvc2VjIMKxMS41OSUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgbWFwICAgICAgICAgICAgICAgIHggNCwxODMsOTQ1IG9wcy9zZWMgwrE2LjU5JSAoODIgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAobWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gTWFwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnTWFwJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgd2Vha3NldCAgICAgICAgICAgIHggMSwzMjMsMjIwIG9wcy9zZWMgwrEyLjE3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICB3ZWFrc2V0ICAgICAgICAgICAgeCA0LDIzNyw1MTAgb3BzL3NlYyDCsTIuMDElICg3NyBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmICh3ZWFrU2V0RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gV2Vha1NldC5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ1dlYWtTZXQnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICB3ZWFrbWFwICAgICAgICAgICAgeCAxLDUwMCwyNjAgb3BzL3NlYyDCsTIuMDIlICg3OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHdlYWttYXAgICAgICAgICAgICB4IDMsODgxLDM4NCBvcHMvc2VjIMKxMS40NSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHdlYWtNYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBXZWFrTWFwLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnV2Vha01hcCc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtZGF0YXZpZXcucHJvdG90eXBlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyNC4yLjQuMjEgLSBEYXRhVmlldy5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiRGF0YVZpZXdcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChkYXRhVmlld0V4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IERhdGFWaWV3LnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnRGF0YVZpZXcnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVtYXBpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIzLjEuNS4yLjIgLSAlTWFwSXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIk1hcCBJdGVyYXRvclwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBNYXAoKS5lbnRyaWVzKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAobWFwRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gbWFwSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ01hcCBJdGVyYXRvcic7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJXNldGl0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjMuMi41LjIuMiAtICVTZXRJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiU2V0IEl0ZXJhdG9yXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IFNldCgpLmVudHJpZXMoKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChzZXRFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBzZXRJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU2V0IEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIyLjEuNS4yLjIgLSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiQXJyYXkgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChbXVtTeW1ib2wuaXRlcmF0b3JdKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoYXJyYXlJdGVyYXRvckV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IGFycmF5SXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ0FycmF5IEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyMS4xLjUuMi4yIC0gJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJTdHJpbmcgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCgnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpYGBcbiAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAqL1xuICBpZiAoc3RyaW5nSXRlcmF0b3JFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBzdHJpbmdJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU3RyaW5nIEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgb2JqZWN0IGZyb20gbnVsbCAgIHggMiw0MjQsMzIwIG9wcy9zZWMgwrExLjY3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBvYmplY3QgZnJvbSBudWxsICAgeCA1LDgzOCwwMDAgb3BzL3NlYyDCsTAuOTklICg4NCBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChvYmpQcm90b3R5cGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0XG4gICAgLnByb3RvdHlwZVxuICAgIC50b1N0cmluZ1xuICAgIC5jYWxsKG9iailcbiAgICAuc2xpY2UodG9TdHJpbmdMZWZ0U2xpY2VMZW5ndGgsIHRvU3RyaW5nUmlnaHRTbGljZUxlbmd0aCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy50eXBlRGV0ZWN0ID0gbW9kdWxlLmV4cG9ydHM7XG4iLCIvKiFcbiAqIENoYWkgLSBleHBlY3RUeXBlcyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmV4cGVjdFR5cGVzKG9iaiwgdHlwZXMpXG4gKlxuICogRW5zdXJlcyB0aGF0IHRoZSBvYmplY3QgYmVpbmcgdGVzdGVkIGFnYWluc3QgaXMgb2YgYSB2YWxpZCB0eXBlLlxuICpcbiAqICAgICB1dGlscy5leHBlY3RUeXBlcyh0aGlzLCBbJ2FycmF5JywgJ29iamVjdCcsICdzdHJpbmcnXSk7XG4gKlxuICogQHBhcmFtIHtNaXhlZH0gb2JqIGNvbnN0cnVjdGVkIEFzc2VydGlvblxuICogQHBhcmFtIHtBcnJheX0gdHlwZSBBIGxpc3Qgb2YgYWxsb3dlZCB0eXBlcyBmb3IgdGhpcyBhc3NlcnRpb25cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGV4cGVjdFR5cGVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciBBc3NlcnRpb25FcnJvciA9IHJlcXVpcmUoJ2Fzc2VydGlvbi1lcnJvcicpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciB0eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBlY3RUeXBlcyhvYmosIHR5cGVzKSB7XG4gIHZhciBmbGFnTXNnID0gZmxhZyhvYmosICdtZXNzYWdlJyk7XG4gIHZhciBzc2ZpID0gZmxhZyhvYmosICdzc2ZpJyk7XG5cbiAgZmxhZ01zZyA9IGZsYWdNc2cgPyBmbGFnTXNnICsgJzogJyA6ICcnO1xuXG4gIG9iaiA9IGZsYWcob2JqLCAnb2JqZWN0Jyk7XG4gIHR5cGVzID0gdHlwZXMubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnRvTG93ZXJDYXNlKCk7IH0pO1xuICB0eXBlcy5zb3J0KCk7XG5cbiAgLy8gVHJhbnNmb3JtcyBbJ2xvcmVtJywgJ2lwc3VtJ10gaW50byAnYSBsb3JlbSwgb3IgYW4gaXBzdW0nXG4gIHZhciBzdHIgPSB0eXBlcy5tYXAoZnVuY3Rpb24gKHQsIGluZGV4KSB7XG4gICAgdmFyIGFydCA9IH5bICdhJywgJ2UnLCAnaScsICdvJywgJ3UnIF0uaW5kZXhPZih0LmNoYXJBdCgwKSkgPyAnYW4nIDogJ2EnO1xuICAgIHZhciBvciA9IHR5cGVzLmxlbmd0aCA+IDEgJiYgaW5kZXggPT09IHR5cGVzLmxlbmd0aCAtIDEgPyAnb3IgJyA6ICcnO1xuICAgIHJldHVybiBvciArIGFydCArICcgJyArIHQ7XG4gIH0pLmpvaW4oJywgJyk7XG5cbiAgdmFyIG9ialR5cGUgPSB0eXBlKG9iaikudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoIXR5cGVzLnNvbWUoZnVuY3Rpb24gKGV4cGVjdGVkKSB7IHJldHVybiBvYmpUeXBlID09PSBleHBlY3RlZDsgfSkpIHtcbiAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICBmbGFnTXNnICsgJ29iamVjdCB0ZXN0ZWQgbXVzdCBiZSAnICsgc3RyICsgJywgYnV0ICcgKyBvYmpUeXBlICsgJyBnaXZlbicsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBzc2ZpXG4gICAgKTtcbiAgfVxufTtcbiIsIi8qIVxuICogQ2hhaSAtIG1lc3NhZ2UgY29tcG9zaXRpb24gdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJylcbiAgLCBnZXRBY3R1YWwgPSByZXF1aXJlKCcuL2dldEFjdHVhbCcpXG4gICwgaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpXG4gICwgb2JqRGlzcGxheSA9IHJlcXVpcmUoJy4vb2JqRGlzcGxheScpO1xuXG4vKipcbiAqICMjIyAuZ2V0TWVzc2FnZShvYmplY3QsIG1lc3NhZ2UsIG5lZ2F0ZU1lc3NhZ2UpXG4gKlxuICogQ29uc3RydWN0IHRoZSBlcnJvciBtZXNzYWdlIGJhc2VkIG9uIGZsYWdzXG4gKiBhbmQgdGVtcGxhdGUgdGFncy4gVGVtcGxhdGUgdGFncyB3aWxsIHJldHVyblxuICogYSBzdHJpbmdpZmllZCBpbnNwZWN0aW9uIG9mIHRoZSBvYmplY3QgcmVmZXJlbmNlZC5cbiAqXG4gKiBNZXNzYWdlIHRlbXBsYXRlIHRhZ3M6XG4gKiAtIGAje3RoaXN9YCBjdXJyZW50IGFzc2VydGVkIG9iamVjdFxuICogLSBgI3thY3R9YCBhY3R1YWwgdmFsdWVcbiAqIC0gYCN7ZXhwfWAgZXhwZWN0ZWQgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE1lc3NhZ2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRNZXNzYWdlKG9iaiwgYXJncykge1xuICB2YXIgbmVnYXRlID0gZmxhZyhvYmosICduZWdhdGUnKVxuICAgICwgdmFsID0gZmxhZyhvYmosICdvYmplY3QnKVxuICAgICwgZXhwZWN0ZWQgPSBhcmdzWzNdXG4gICAgLCBhY3R1YWwgPSBnZXRBY3R1YWwob2JqLCBhcmdzKVxuICAgICwgbXNnID0gbmVnYXRlID8gYXJnc1syXSA6IGFyZ3NbMV1cbiAgICAsIGZsYWdNc2cgPSBmbGFnKG9iaiwgJ21lc3NhZ2UnKTtcblxuICBpZih0eXBlb2YgbXNnID09PSBcImZ1bmN0aW9uXCIpIG1zZyA9IG1zZygpO1xuICBtc2cgPSBtc2cgfHwgJyc7XG4gIG1zZyA9IG1zZ1xuICAgIC5yZXBsYWNlKC8jXFx7dGhpc1xcfS9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBvYmpEaXNwbGF5KHZhbCk7IH0pXG4gICAgLnJlcGxhY2UoLyNcXHthY3RcXH0vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JqRGlzcGxheShhY3R1YWwpOyB9KVxuICAgIC5yZXBsYWNlKC8jXFx7ZXhwXFx9L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iakRpc3BsYXkoZXhwZWN0ZWQpOyB9KTtcblxuICByZXR1cm4gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnICsgbXNnIDogbXNnO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldEFjdHVhbCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldEFjdHVhbChvYmplY3QsIFthY3R1YWxdKVxuICpcbiAqIFJldHVybnMgdGhlIGBhY3R1YWxgIHZhbHVlIGZvciBhbiBBc3NlcnRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAoY29uc3RydWN0ZWQgQXNzZXJ0aW9uKVxuICogQHBhcmFtIHtBcmd1bWVudHN9IGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZS5hc3NlcnQgYXJndW1lbnRzXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRBY3R1YWxcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEFjdHVhbChvYmosIGFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MubGVuZ3RoID4gNCA/IGFyZ3NbNF0gOiBvYmouX29iajtcbn07XG4iLCIvLyBUaGlzIGlzIChhbG1vc3QpIGRpcmVjdGx5IGZyb20gTm9kZS5qcyB1dGlsc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2Jsb2IvZjhjMzM1ZDBjYWY0N2YxNmQzMTQxM2Y4OWFhMjhlZGEzODc4ZTNhYS9saWIvdXRpbC5qc1xuXG52YXIgZ2V0TmFtZSA9IHJlcXVpcmUoJ2dldC1mdW5jLW5hbWUnKTtcbnZhciBnZXRQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXRQcm9wZXJ0aWVzJyk7XG52YXIgZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldEVudW1lcmFibGVQcm9wZXJ0aWVzJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zcGVjdDtcblxuLyoqXG4gKiAjIyMgLmluc3BlY3Qob2JqLCBbc2hvd0hpZGRlbl0sIFtkZXB0aF0sIFtjb2xvcnNdKVxuICpcbiAqIEVjaG9lcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJpZXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd0hpZGRlbiBGbGFnIHRoYXQgc2hvd3MgaGlkZGVuIChub3QgZW51bWVyYWJsZSlcbiAqICAgIHByb3BlcnRpZXMgb2Ygb2JqZWN0cy4gRGVmYXVsdCBpcyBmYWxzZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCBEZXB0aCBpbiB3aGljaCB0byBkZXNjZW5kIGluIG9iamVjdC4gRGVmYXVsdCBpcyAyLlxuICogQHBhcmFtIHtCb29sZWFufSBjb2xvcnMgRmxhZyB0byB0dXJuIG9uIEFOU0kgZXNjYXBlIGNvZGVzIHRvIGNvbG9yIHRoZVxuICogICAgb3V0cHV0LiBEZWZhdWx0IGlzIGZhbHNlIChubyBjb2xvcmluZykuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBpbnNwZWN0XG4gKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKSB7XG4gIHZhciBjdHggPSB7XG4gICAgc2hvd0hpZGRlbjogc2hvd0hpZGRlbixcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHI7IH1cbiAgfTtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCAodHlwZW9mIGRlcHRoID09PSAndW5kZWZpbmVkJyA/IDIgOiBkZXB0aCkpO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIGEgRE9NIGVsZW1lbnQuXG52YXIgaXNET01FbGVtZW50ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ25vZGVUeXBlJyBpbiBvYmplY3QgJiZcbiAgICAgIG9iamVjdC5ub2RlVHlwZSA9PT0gMSAmJlxuICAgICAgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZyc7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLmluc3BlY3QgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKHR5cGVvZiByZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gSWYgdGhpcyBpcyBhIERPTSBlbGVtZW50LCB0cnkgdG8gZ2V0IHRoZSBvdXRlciBIVE1MLlxuICBpZiAoaXNET01FbGVtZW50KHZhbHVlKSkge1xuICAgIGlmICgnb3V0ZXJIVE1MJyBpbiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm91dGVySFRNTDtcbiAgICAgIC8vIFRoaXMgdmFsdWUgZG9lcyBub3QgaGF2ZSBhbiBvdXRlckhUTUwgYXR0cmlidXRlLFxuICAgICAgLy8gICBpdCBjb3VsZCBzdGlsbCBiZSBhbiBYTUwgZWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIHNlcmlhbGl6ZSBpdFxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnhtbFZlcnNpb24pIHtcbiAgICAgICAgICB2YXIgeG1sU2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7XG4gICAgICAgICAgcmV0dXJuIHhtbFNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZpcmVmb3ggMTEtIGRvIG5vdCBzdXBwb3J0IG91dGVySFRNTFxuICAgICAgICAgIC8vICAgSXQgZG9lcywgaG93ZXZlciwgc3VwcG9ydCBpbm5lckhUTUxcbiAgICAgICAgICAvLyAgIFVzZSB0aGUgZm9sbG93aW5nIHRvIHJlbmRlciB0aGUgZWxlbWVudFxuICAgICAgICAgIHZhciBucyA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdfJyk7XG5cbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICAgICAgdmFyIGh0bWwgPSBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICAgICAgICAucmVwbGFjZSgnPjwnLCAnPicgKyB2YWx1ZS5pbm5lckhUTUwgKyAnPCcpO1xuICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIFRoaXMgY291bGQgYmUgYSBub24tbmF0aXZlIERPTSBpbXBsZW1lbnRhdGlvbixcbiAgICAgICAgLy8gICBjb250aW51ZSB3aXRoIHRoZSBub3JtYWwgZmxvdzpcbiAgICAgICAgLy8gICBwcmludGluZyB0aGUgZWxlbWVudCBhcyBpZiBpdCBpcyBhbiBvYmplY3QuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIgdmlzaWJsZUtleXMgPSBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyh2YWx1ZSk7XG4gIHZhciBrZXlzID0gY3R4LnNob3dIaWRkZW4gPyBnZXRQcm9wZXJ0aWVzKHZhbHVlKSA6IHZpc2libGVLZXlzO1xuXG4gIHZhciBuYW1lLCBuYW1lU3VmZml4O1xuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgLy8gSW4gSUUsIGVycm9ycyBoYXZlIGEgc2luZ2xlIGBzdGFja2AgcHJvcGVydHksIG9yIGlmIHRoZXkgYXJlIHZhbmlsbGEgYEVycm9yYCxcbiAgLy8gYSBgc3RhY2tgIHBsdXMgYGRlc2NyaXB0aW9uYCBwcm9wZXJ0eTsgaWdub3JlIHRob3NlIGZvciBjb25zaXN0ZW5jeS5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwIHx8IChpc0Vycm9yKHZhbHVlKSAmJiAoXG4gICAgICAoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ3N0YWNrJykgfHxcbiAgICAgIChrZXlzLmxlbmd0aCA9PT0gMiAmJiBrZXlzWzBdID09PSAnZGVzY3JpcHRpb24nICYmIGtleXNbMV0gPT09ICdzdGFjaycpXG4gICAgICkpKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbmFtZSA9IGdldE5hbWUodmFsdWUpO1xuICAgICAgbmFtZVN1ZmZpeCA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZVN1ZmZpeCArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJydcbiAgICAsIGFycmF5ID0gZmFsc2VcbiAgICAsIHR5cGVkQXJyYXkgPSBmYWxzZVxuICAgICwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICBpZiAoaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgIHR5cGVkQXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBuYW1lID0gZ2V0TmFtZSh2YWx1ZSk7XG4gICAgbmFtZVN1ZmZpeCA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuYW1lU3VmZml4ICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2UgaWYgKHR5cGVkQXJyYXkpIHtcbiAgICByZXR1cm4gZm9ybWF0VHlwZWRBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgPT09IDAgJiYgKDEvdmFsdWUpID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCctMCcsICdudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSh2YWx1ZS50b1N0cmluZygpLCAnc3ltYm9sJyk7XG4gIH1cbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHZhciBzdHIgPSAnWyAnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA+PSBjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgLSA3KSB7XG4gICAgICBzdHIgKz0gJy4uLic7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc3RyICs9IHZhbHVlW2ldICsgJywgJztcbiAgfVxuICBzdHIgKz0gJyBdJztcblxuICAvLyBSZW1vdmluZyB0cmFpbGluZyBgLCBgIGlmIHRoZSBhcnJheSB3YXMgbm90IHRydW5jYXRlZFxuICBpZiAoc3RyLmluZGV4T2YoJywgIF0nKSAhPT0gLTEpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgnLCAgXScsICcgXScpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZTtcbiAgdmFyIHByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KTtcbiAgdmFyIHN0cjtcblxuICBpZiAocHJvcERlc2NyaXB0b3IpIHtcbiAgICBpZiAocHJvcERlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICBpZiAocHJvcERlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BEZXNjcmlwdG9yLnNldCkge1xuICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodmlzaWJsZUtleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZih2YWx1ZVtrZXldKSA8IDApIHtcbiAgICAgIGlmIChyZWN1cnNlVGltZXMgPT09IG51bGwpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZVtrZXldLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgdmFsdWVba2V5XSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFyKSB7XG4gIC8vIFVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gY2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgVHlwZWRBcnJheVxuICAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGl0J3Mgb25lIG9mIHRoZXNlIHR5cGVzXG4gIHJldHVybiAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiAvXFx3K0FycmF5XSQvLnRlc3Qob2JqZWN0VG9TdHJpbmcoYXIpKSk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpIHx8XG4gICAgICAgICAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhhcikgPT09ICdbb2JqZWN0IEFycmF5XScpO1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gdHlwZW9mIHJlID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gdHlwZW9mIGQgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gdHlwZW9mIGUgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIvKiFcbiAqIENoYWkgLSBmbGFnIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRhbmNpZXNcbiAqL1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG4vKipcbiAqICMjIyAub2JqRGlzcGxheShvYmplY3QpXG4gKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgbWF0Y2hlc1xuICogY3JpdGVyaWEgdG8gYmUgaW5zcGVjdGVkIGluLWxpbmUgZm9yIGVycm9yXG4gKiBtZXNzYWdlcyBvciBzaG91bGQgYmUgdHJ1bmNhdGVkLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGphdmFzY3JpcHQgb2JqZWN0IHRvIGluc3BlY3RcbiAqIEBuYW1lIG9iakRpc3BsYXlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvYmpEaXNwbGF5KG9iaikge1xuICB2YXIgc3RyID0gaW5zcGVjdChvYmopXG4gICAgLCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG5cbiAgaWYgKGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCAmJiBzdHIubGVuZ3RoID49IGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCkge1xuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICByZXR1cm4gIW9iai5uYW1lIHx8IG9iai5uYW1lID09PSAnJ1xuICAgICAgICA/ICdbRnVuY3Rpb25dJ1xuICAgICAgICA6ICdbRnVuY3Rpb246ICcgKyBvYmoubmFtZSArICddJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybiAnWyBBcnJheSgnICsgb2JqLmxlbmd0aCArICcpIF0nO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAsIGtzdHIgPSBrZXlzLmxlbmd0aCA+IDJcbiAgICAgICAgICA/IGtleXMuc3BsaWNlKDAsIDIpLmpvaW4oJywgJykgKyAnLCAuLi4nXG4gICAgICAgICAgOiBrZXlzLmpvaW4oJywgJyk7XG4gICAgICByZXR1cm4gJ3sgT2JqZWN0ICgnICsga3N0ciArICcpIH0nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZmxhZyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmZsYWcob2JqZWN0LCBrZXksIFt2YWx1ZV0pXG4gKlxuICogR2V0IG9yIHNldCBhIGZsYWcgdmFsdWUgb24gYW4gb2JqZWN0LiBJZiBhXG4gKiB2YWx1ZSBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHNldCwgZWxzZSBpdCB3aWxsXG4gKiByZXR1cm4gdGhlIGN1cnJlbnRseSBzZXQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgaWZcbiAqIHRoZSB2YWx1ZSBpcyBub3Qgc2V0LlxuICpcbiAqICAgICB1dGlscy5mbGFnKHRoaXMsICdmb28nLCAnYmFyJyk7IC8vIHNldHRlclxuICogICAgIHV0aWxzLmZsYWcodGhpcywgJ2ZvbycpOyAvLyBnZXR0ZXIsIHJldHVybnMgYGJhcmBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IGNvbnN0cnVjdGVkIEFzc2VydGlvblxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgKG9wdGlvbmFsKVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZmxhZ1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFnKG9iaiwga2V5LCB2YWx1ZSkge1xuICB2YXIgZmxhZ3MgPSBvYmouX19mbGFncyB8fCAob2JqLl9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICBmbGFnc1trZXldID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZsYWdzW2tleV07XG4gIH1cbn07XG4iLCIvKiFcbiAqIENoYWkgLSB0cmFuc2ZlckZsYWdzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG9iamVjdCwgaW5jbHVkZUFsbCA9IHRydWUpXG4gKlxuICogVHJhbnNmZXIgYWxsIHRoZSBmbGFncyBmb3IgYGFzc2VydGlvbmAgdG8gYG9iamVjdGAuIElmXG4gKiBgaW5jbHVkZUFsbGAgaXMgc2V0IHRvIGBmYWxzZWAsIHRoZW4gdGhlIGJhc2UgQ2hhaVxuICogYXNzZXJ0aW9uIGZsYWdzIChuYW1lbHkgYG9iamVjdGAsIGBzc2ZpYCwgYGxvY2tTc2ZpYCxcbiAqIGFuZCBgbWVzc2FnZWApIHdpbGwgbm90IGJlIHRyYW5zZmVycmVkLlxuICpcbiAqXG4gKiAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBBc3NlcnRpb24oKTtcbiAqICAgICB1dGlscy50cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgbmV3QXNzZXJ0aW9uKTtcbiAqXG4gKiAgICAgdmFyIGFub3RoZXJBc3Nlcml0b24gPSBuZXcgQXNzZXJ0aW9uKG15T2JqKTtcbiAqICAgICB1dGlscy50cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgYW5vdGhlckFzc2VydGlvbiwgZmFsc2UpO1xuICpcbiAqIEBwYXJhbSB7QXNzZXJ0aW9ufSBhc3NlcnRpb24gdGhlIGFzc2VydGlvbiB0byB0cmFuc2ZlciB0aGUgZmxhZ3MgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0aGUgb2JqZWN0IHRvIHRyYW5zZmVyIHRoZSBmbGFncyB0bzsgdXN1YWxseSBhIG5ldyBhc3NlcnRpb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaW5jbHVkZUFsbFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgdHJhbnNmZXJGbGFnc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2ZlckZsYWdzKGFzc2VydGlvbiwgb2JqZWN0LCBpbmNsdWRlQWxsKSB7XG4gIHZhciBmbGFncyA9IGFzc2VydGlvbi5fX2ZsYWdzIHx8IChhc3NlcnRpb24uX19mbGFncyA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG4gIGlmICghb2JqZWN0Ll9fZmxhZ3MpIHtcbiAgICBvYmplY3QuX19mbGFncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBpbmNsdWRlQWxsID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMyA/IGluY2x1ZGVBbGwgOiB0cnVlO1xuXG4gIGZvciAodmFyIGZsYWcgaW4gZmxhZ3MpIHtcbiAgICBpZiAoaW5jbHVkZUFsbCB8fFxuICAgICAgICAoZmxhZyAhPT0gJ29iamVjdCcgJiYgZmxhZyAhPT0gJ3NzZmknICYmIGZsYWcgIT09ICdsb2NrU3NmaScgJiYgZmxhZyAhPSAnbWVzc2FnZScpKSB7XG4gICAgICBvYmplY3QuX19mbGFnc1tmbGFnXSA9IGZsYWdzW2ZsYWddO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbHMgU3ltYm9sOiBmYWxzZSwgVWludDhBcnJheTogZmFsc2UsIFdlYWtNYXA6IGZhbHNlICovXG4vKiFcbiAqIGRlZXAtZXFsXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciB0eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcbmZ1bmN0aW9uIEZha2VNYXAoKSB7XG4gIHRoaXMuX2tleSA9ICdjaGFpL2RlZXAtZXFsX18nICsgTWF0aC5yYW5kb20oKSArIERhdGUubm93KCk7XG59XG5cbkZha2VNYXAucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIGdldE1hcChrZXkpIHtcbiAgICByZXR1cm4ga2V5W3RoaXMuX2tleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0TWFwKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIU9iamVjdC5pc0Zyb3plbihrZXkpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoa2V5LCB0aGlzLl9rZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgTWVtb2l6ZU1hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gV2Vha01hcCA6IEZha2VNYXA7XG4vKiFcbiAqIENoZWNrIHRvIHNlZSBpZiB0aGUgTWVtb2l6ZU1hcCBoYXMgcmVjb3JkZWQgYSByZXN1bHQgb2YgdGhlIHR3byBvcGVyYW5kc1xuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNZW1vaXplTWFwfSBtZW1vaXplTWFwXG4gKiBAcmV0dXJucyB7Qm9vbGVhbnxudWxsfSByZXN1bHRcbiovXG5mdW5jdGlvbiBtZW1vaXplQ29tcGFyZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG1lbW9pemVNYXApIHtcbiAgLy8gVGVjaG5pY2FsbHksIFdlYWtNYXAga2V5cyBjYW4gKm9ubHkqIGJlIG9iamVjdHMsIG5vdCBwcmltaXRpdmVzLlxuICBpZiAoIW1lbW9pemVNYXAgfHwgaXNQcmltaXRpdmUobGVmdEhhbmRPcGVyYW5kKSB8fCBpc1ByaW1pdGl2ZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBsZWZ0SGFuZE1hcCA9IG1lbW9pemVNYXAuZ2V0KGxlZnRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZE1hcCkge1xuICAgIHZhciByZXN1bHQgPSBsZWZ0SGFuZE1hcC5nZXQocmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qIVxuICogU2V0IHRoZSByZXN1bHQgb2YgdGhlIGVxdWFsaXR5IGludG8gdGhlIE1lbW9pemVNYXBcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWVtb2l6ZU1hcH0gbWVtb2l6ZU1hcFxuICogQHBhcmFtIHtCb29sZWFufSByZXN1bHRcbiovXG5mdW5jdGlvbiBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgbWVtb2l6ZU1hcCwgcmVzdWx0KSB7XG4gIC8vIFRlY2huaWNhbGx5LCBXZWFrTWFwIGtleXMgY2FuICpvbmx5KiBiZSBvYmplY3RzLCBub3QgcHJpbWl0aXZlcy5cbiAgaWYgKCFtZW1vaXplTWFwIHx8IGlzUHJpbWl0aXZlKGxlZnRIYW5kT3BlcmFuZCkgfHwgaXNQcmltaXRpdmUocmlnaHRIYW5kT3BlcmFuZCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxlZnRIYW5kTWFwID0gbWVtb2l6ZU1hcC5nZXQobGVmdEhhbmRPcGVyYW5kKTtcbiAgaWYgKGxlZnRIYW5kTWFwKSB7XG4gICAgbGVmdEhhbmRNYXAuc2V0KHJpZ2h0SGFuZE9wZXJhbmQsIHJlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgbGVmdEhhbmRNYXAgPSBuZXcgTWVtb2l6ZU1hcCgpO1xuICAgIGxlZnRIYW5kTWFwLnNldChyaWdodEhhbmRPcGVyYW5kLCByZXN1bHQpO1xuICAgIG1lbW9pemVNYXAuc2V0KGxlZnRIYW5kT3BlcmFuZCwgbGVmdEhhbmRNYXApO1xuICB9XG59XG5cbi8qIVxuICogUHJpbWFyeSBFeHBvcnRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBFcXVhbDtcbm1vZHVsZS5leHBvcnRzLk1lbW9pemVNYXAgPSBNZW1vaXplTWFwO1xuXG4vKipcbiAqIEFzc2VydCBkZWVwbHkgbmVzdGVkIHNhbWVWYWx1ZSBlcXVhbGl0eSBiZXR3ZWVuIHR3byBvYmplY3RzIG9mIGFueSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAob3B0aW9uYWwpIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuY29tcGFyYXRvcl0gKG9wdGlvbmFsKSBPdmVycmlkZSBkZWZhdWx0IGFsZ29yaXRobSwgZGV0ZXJtaW5pbmcgY3VzdG9tIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWVtb2l6ZV0gKG9wdGlvbmFsKSBQcm92aWRlIGEgY3VzdG9tIG1lbW9pemF0aW9uIG9iamVjdCB3aGljaCB3aWxsIGNhY2hlIHRoZSByZXN1bHRzIG9mXG4gICAgY29tcGxleCBvYmplY3RzIGZvciBhIHNwZWVkIGJvb3N0LiBCeSBwYXNzaW5nIGBmYWxzZWAgeW91IGNhbiBkaXNhYmxlIG1lbW9pemF0aW9uLCBidXQgdGhpcyB3aWxsIGNhdXNlIGNpcmN1bGFyXG4gICAgcmVmZXJlbmNlcyB0byBibG93IHRoZSBzdGFjay5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgLy8gSWYgd2UgaGF2ZSBhIGNvbXBhcmF0b3IsIHdlIGNhbid0IGFzc3VtZSBhbnl0aGluZzsgc28gYmFpbCB0byBpdHMgY2hlY2sgZmlyc3QuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29tcGFyYXRvcikge1xuICAgIHJldHVybiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhciBzaW1wbGVSZXN1bHQgPSBzaW1wbGVFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAoc2ltcGxlUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHNpbXBsZVJlc3VsdDtcbiAgfVxuXG4gIC8vIERlZXBlciBjb21wYXJpc29ucyBhcmUgcHVzaGVkIHRocm91Z2ggdG8gYSBsYXJnZXIgZnVuY3Rpb25cbiAgcmV0dXJuIGV4dGVuc2l2ZURlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIE1hbnkgY29tcGFyaXNvbnMgY2FuIGJlIGNhbmNlbGVkIG91dCBlYXJseSB2aWEgc2ltcGxlIGVxdWFsaXR5IG9yIHByaW1pdGl2ZSBjaGVja3MuXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEByZXR1cm4ge0Jvb2xlYW58bnVsbH0gZXF1YWwgbWF0Y2hcbiAqL1xuZnVuY3Rpb24gc2ltcGxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKSB7XG4gIC8vIEVxdWFsIHJlZmVyZW5jZXMgKGV4Y2VwdCBmb3IgTnVtYmVycykgY2FuIGJlIHJldHVybmVkIGVhcmx5XG4gIGlmIChsZWZ0SGFuZE9wZXJhbmQgPT09IHJpZ2h0SGFuZE9wZXJhbmQpIHtcbiAgICAvLyBIYW5kbGUgKy0wIGNhc2VzXG4gICAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZCAhPT0gMCB8fCAxIC8gbGVmdEhhbmRPcGVyYW5kID09PSAxIC8gcmlnaHRIYW5kT3BlcmFuZDtcbiAgfVxuXG4gIC8vIGhhbmRsZSBOYU4gY2FzZXNcbiAgaWYgKFxuICAgIGxlZnRIYW5kT3BlcmFuZCAhPT0gbGVmdEhhbmRPcGVyYW5kICYmIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmlnaHRIYW5kT3BlcmFuZCAhPT0gcmlnaHRIYW5kT3BlcmFuZCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEFueXRoaW5nIHRoYXQgaXMgbm90IGFuICdvYmplY3QnLCBpLmUuIHN5bWJvbHMsIGZ1bmN0aW9ucywgYm9vbGVhbnMsIG51bWJlcnMsXG4gIC8vIHN0cmluZ3MsIGFuZCB1bmRlZmluZWQsIGNhbiBiZSBjb21wYXJlZCBieSByZWZlcmVuY2UuXG4gIGlmIChpc1ByaW1pdGl2ZShsZWZ0SGFuZE9wZXJhbmQpIHx8IGlzUHJpbWl0aXZlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgLy8gRWFzeSBvdXQgYi9jIGl0IHdvdWxkIGhhdmUgcGFzc2VkIHRoZSBmaXJzdCBlcXVhbGl0eSBjaGVja1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyohXG4gKiBUaGUgbWFpbiBsb2dpYyBvZiB0aGUgYGRlZXBFcXVhbGAgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChvcHRpb25hbCkgQWRkaXRpb25hbCBvcHRpb25zXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5jb21wYXJhdG9yXSAob3B0aW9uYWwpIE92ZXJyaWRlIGRlZmF1bHQgYWxnb3JpdGhtLCBkZXRlcm1pbmluZyBjdXN0b20gZXF1YWxpdHkuXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5tZW1vaXplXSAob3B0aW9uYWwpIFByb3ZpZGUgYSBjdXN0b20gbWVtb2l6YXRpb24gb2JqZWN0IHdoaWNoIHdpbGwgY2FjaGUgdGhlIHJlc3VsdHMgb2ZcbiAgICBjb21wbGV4IG9iamVjdHMgZm9yIGEgc3BlZWQgYm9vc3QuIEJ5IHBhc3NpbmcgYGZhbHNlYCB5b3UgY2FuIGRpc2FibGUgbWVtb2l6YXRpb24sIGJ1dCB0aGlzIHdpbGwgY2F1c2UgY2lyY3VsYXJcbiAgICByZWZlcmVuY2VzIHRvIGJsb3cgdGhlIHN0YWNrLlxuICogQHJldHVybiB7Qm9vbGVhbn0gZXF1YWwgbWF0Y2hcbiovXG5mdW5jdGlvbiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLm1lbW9pemUgPSBvcHRpb25zLm1lbW9pemUgPT09IGZhbHNlID8gZmFsc2UgOiBvcHRpb25zLm1lbW9pemUgfHwgbmV3IE1lbW9pemVNYXAoKTtcbiAgdmFyIGNvbXBhcmF0b3IgPSBvcHRpb25zICYmIG9wdGlvbnMuY29tcGFyYXRvcjtcblxuICAvLyBDaGVjayBpZiBhIG1lbW9pemVkIHJlc3VsdCBleGlzdHMuXG4gIHZhciBtZW1vaXplUmVzdWx0TGVmdCA9IG1lbW9pemVDb21wYXJlKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplKTtcbiAgaWYgKG1lbW9pemVSZXN1bHRMZWZ0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lbW9pemVSZXN1bHRMZWZ0O1xuICB9XG4gIHZhciBtZW1vaXplUmVzdWx0UmlnaHQgPSBtZW1vaXplQ29tcGFyZShyaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSk7XG4gIGlmIChtZW1vaXplUmVzdWx0UmlnaHQgIT09IG51bGwpIHtcbiAgICByZXR1cm4gbWVtb2l6ZVJlc3VsdFJpZ2h0O1xuICB9XG5cbiAgLy8gSWYgYSBjb21wYXJhdG9yIGlzIHByZXNlbnQsIHVzZSBpdC5cbiAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgY29tcGFyYXRvclJlc3VsdCA9IGNvbXBhcmF0b3IobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKTtcbiAgICAvLyBDb21wYXJhdG9ycyBtYXkgcmV0dXJuIG51bGwsIGluIHdoaWNoIGNhc2Ugd2Ugd2FudCB0byBnbyBiYWNrIHRvIGRlZmF1bHQgYmVoYXZpb3IuXG4gICAgaWYgKGNvbXBhcmF0b3JSZXN1bHQgPT09IGZhbHNlIHx8IGNvbXBhcmF0b3JSZXN1bHQgPT09IHRydWUpIHtcbiAgICAgIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIGNvbXBhcmF0b3JSZXN1bHQpO1xuICAgICAgcmV0dXJuIGNvbXBhcmF0b3JSZXN1bHQ7XG4gICAgfVxuICAgIC8vIFRvIGFsbG93IGNvbXBhcmF0b3JzIHRvIG92ZXJyaWRlICphbnkqIGJlaGF2aW9yLCB3ZSByYW4gdGhlbSBmaXJzdC4gU2luY2UgaXQgZGlkbid0IGRlY2lkZVxuICAgIC8vIHdoYXQgdG8gZG8sIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvIHJldHVybiB0aGUgYmFzaWMgdGVzdHMgZmlyc3QgYmVmb3JlIHdlIG1vdmUgb24uXG4gICAgdmFyIHNpbXBsZVJlc3VsdCA9IHNpbXBsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgaWYgKHNpbXBsZVJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgLy8gRG9uJ3QgbWVtb2l6ZSB0aGlzLCBpdCB0YWtlcyBsb25nZXIgdG8gc2V0L3JldHJpZXZlIHRoYW4gdG8ganVzdCBjb21wYXJlLlxuICAgICAgcmV0dXJuIHNpbXBsZVJlc3VsdDtcbiAgICB9XG4gIH1cblxuICB2YXIgbGVmdEhhbmRUeXBlID0gdHlwZShsZWZ0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRUeXBlICE9PSB0eXBlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSwgZmFsc2UpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlbXBvcmFyaWx5IHNldCB0aGUgb3BlcmFuZHMgaW4gdGhlIG1lbW9pemUgb2JqZWN0IHRvIHByZXZlbnQgYmxvd2luZyB0aGUgc3RhY2tcbiAgbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSwgdHJ1ZSk7XG5cbiAgdmFyIHJlc3VsdCA9IGV4dGVuc2l2ZURlZXBFcXVhbEJ5VHlwZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kVHlwZSwgb3B0aW9ucyk7XG4gIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV4dGVuc2l2ZURlZXBFcXVhbEJ5VHlwZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kVHlwZSwgb3B0aW9ucykge1xuICBzd2l0Y2ggKGxlZnRIYW5kVHlwZSkge1xuICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgY2FzZSAnTnVtYmVyJzpcbiAgICBjYXNlICdCb29sZWFuJzpcbiAgICBjYXNlICdEYXRlJzpcbiAgICAgIC8vIElmIHRoZXNlIHR5cGVzIGFyZSB0aGVpciBpbnN0YW5jZSB0eXBlcyAoZS5nLiBgbmV3IE51bWJlcmApIHRoZW4gcmUtZGVlcEVxdWFsIGFnYWluc3QgdGhlaXIgdmFsdWVzXG4gICAgICByZXR1cm4gZGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZC52YWx1ZU9mKCksIHJpZ2h0SGFuZE9wZXJhbmQudmFsdWVPZigpKTtcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdFcnJvcic6XG4gICAgICByZXR1cm4gbGVmdEhhbmRPcGVyYW5kID09PSByaWdodEhhbmRPcGVyYW5kO1xuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnSW50OEFycmF5JzpcbiAgICBjYXNlICdVaW50OEFycmF5JzpcbiAgICBjYXNlICdVaW50OENsYW1wZWRBcnJheSc6XG4gICAgY2FzZSAnSW50MTZBcnJheSc6XG4gICAgY2FzZSAnVWludDE2QXJyYXknOlxuICAgIGNhc2UgJ0ludDMyQXJyYXknOlxuICAgIGNhc2UgJ1VpbnQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDMyQXJyYXknOlxuICAgIGNhc2UgJ0Zsb2F0NjRBcnJheSc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgcmV0dXJuIHJlZ2V4cEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgY2FzZSAnR2VuZXJhdG9yJzpcbiAgICAgIHJldHVybiBnZW5lcmF0b3JFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGNhc2UgJ0RhdGFWaWV3JzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKG5ldyBVaW50OEFycmF5KGxlZnRIYW5kT3BlcmFuZC5idWZmZXIpLCBuZXcgVWludDhBcnJheShyaWdodEhhbmRPcGVyYW5kLmJ1ZmZlciksIG9wdGlvbnMpO1xuICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKG5ldyBVaW50OEFycmF5KGxlZnRIYW5kT3BlcmFuZCksIG5ldyBVaW50OEFycmF5KHJpZ2h0SGFuZE9wZXJhbmQpLCBvcHRpb25zKTtcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGNhc2UgJ01hcCc6XG4gICAgICByZXR1cm4gZW50cmllc0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBvYmplY3RFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qIVxuICogQ29tcGFyZSB0d28gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgZXF1YWxpdHkuXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtSZWdFeHB9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIHJlZ2V4cEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCkge1xuICByZXR1cm4gbGVmdEhhbmRPcGVyYW5kLnRvU3RyaW5nKCkgPT09IHJpZ2h0SGFuZE9wZXJhbmQudG9TdHJpbmcoKTtcbn1cblxuLyohXG4gKiBDb21wYXJlIHR3byBTZXRzL01hcHMgZm9yIGVxdWFsaXR5LiBGYXN0ZXIgdGhhbiBvdGhlciBlcXVhbGl0eSBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtTZXR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtTZXR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gZW50cmllc0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICAvLyBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBTZXQjZW50cmllcyBvciBTZXQjQEBpdGVyYXRvciwgc28gd2UgbmVlZCBtYW51YWxseSBwb3B1bGF0ZSB1c2luZyBTZXQjZm9yRWFjaFxuICBpZiAobGVmdEhhbmRPcGVyYW5kLnNpemUgIT09IHJpZ2h0SGFuZE9wZXJhbmQuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobGVmdEhhbmRPcGVyYW5kLnNpemUgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgbGVmdEhhbmRJdGVtcyA9IFtdO1xuICB2YXIgcmlnaHRIYW5kSXRlbXMgPSBbXTtcbiAgbGVmdEhhbmRPcGVyYW5kLmZvckVhY2goZnVuY3Rpb24gZ2F0aGVyRW50cmllcyhrZXksIHZhbHVlKSB7XG4gICAgbGVmdEhhbmRJdGVtcy5wdXNoKFsga2V5LCB2YWx1ZSBdKTtcbiAgfSk7XG4gIHJpZ2h0SGFuZE9wZXJhbmQuZm9yRWFjaChmdW5jdGlvbiBnYXRoZXJFbnRyaWVzKGtleSwgdmFsdWUpIHtcbiAgICByaWdodEhhbmRJdGVtcy5wdXNoKFsga2V5LCB2YWx1ZSBdKTtcbiAgfSk7XG4gIHJldHVybiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kSXRlbXMuc29ydCgpLCByaWdodEhhbmRJdGVtcy5zb3J0KCksIG9wdGlvbnMpO1xufVxuXG4vKiFcbiAqIFNpbXBsZSBlcXVhbGl0eSBmb3IgZmxhdCBpdGVyYWJsZSBvYmplY3RzIHN1Y2ggYXMgQXJyYXlzLCBUeXBlZEFycmF5cyBvciBOb2RlLmpzIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtJdGVyYWJsZX0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBsZWZ0SGFuZE9wZXJhbmQubGVuZ3RoO1xuICBpZiAobGVuZ3RoICE9PSByaWdodEhhbmRPcGVyYW5kLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTE7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmRbaW5kZXhdLCByaWdodEhhbmRPcGVyYW5kW2luZGV4XSwgb3B0aW9ucykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKiFcbiAqIFNpbXBsZSBlcXVhbGl0eSBmb3IgZ2VuZXJhdG9yIG9iamVjdHMgc3VjaCBhcyB0aG9zZSByZXR1cm5lZCBieSBnZW5lcmF0b3IgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7SXRlcmFibGV9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtJdGVyYWJsZX0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBnZW5lcmF0b3JFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwoZ2V0R2VuZXJhdG9yRW50cmllcyhsZWZ0SGFuZE9wZXJhbmQpLCBnZXRHZW5lcmF0b3JFbnRyaWVzKHJpZ2h0SGFuZE9wZXJhbmQpLCBvcHRpb25zKTtcbn1cblxuLyohXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgYW4gQEBpdGVyYXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBoYXMgYW4gQEBpdGVyYXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaGFzSXRlcmF0b3JGdW5jdGlvbih0YXJnZXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0YXJnZXRbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyohXG4gKiBHZXRzIGFsbCBpdGVyYXRvciBlbnRyaWVzIGZyb20gdGhlIGdpdmVuIE9iamVjdC4gSWYgdGhlIE9iamVjdCBoYXMgbm8gQEBpdGVyYXRvciBmdW5jdGlvbiwgcmV0dXJucyBhbiBlbXB0eSBhcnJheS5cbiAqIFRoaXMgd2lsbCBjb25zdW1lIHRoZSBpdGVyYXRvciAtIHdoaWNoIGNvdWxkIGhhdmUgc2lkZSBlZmZlY3RzIGRlcGVuZGluZyBvbiB0aGUgQEBpdGVyYXRvciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcmV0dXJucyB7QXJyYXl9IGFuIGFycmF5IG9mIGVudHJpZXMgZnJvbSB0aGUgQEBpdGVyYXRvciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBnZXRJdGVyYXRvckVudHJpZXModGFyZ2V0KSB7XG4gIGlmIChoYXNJdGVyYXRvckZ1bmN0aW9uKHRhcmdldCkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGdldEdlbmVyYXRvckVudHJpZXModGFyZ2V0W1N5bWJvbC5pdGVyYXRvcl0oKSk7XG4gICAgfSBjYXRjaCAoaXRlcmF0b3JFcnJvcikge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW107XG59XG5cbi8qIVxuICogR2V0cyBhbGwgZW50cmllcyBmcm9tIGEgR2VuZXJhdG9yLiBUaGlzIHdpbGwgY29uc3VtZSB0aGUgZ2VuZXJhdG9yIC0gd2hpY2ggY291bGQgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gKlxuICogQHBhcmFtIHtHZW5lcmF0b3J9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBlbnRyaWVzIGZyb20gdGhlIEdlbmVyYXRvci5cbiAqL1xuZnVuY3Rpb24gZ2V0R2VuZXJhdG9yRW50cmllcyhnZW5lcmF0b3IpIHtcbiAgdmFyIGdlbmVyYXRvclJlc3VsdCA9IGdlbmVyYXRvci5uZXh0KCk7XG4gIHZhciBhY2N1bXVsYXRvciA9IFsgZ2VuZXJhdG9yUmVzdWx0LnZhbHVlIF07XG4gIHdoaWxlIChnZW5lcmF0b3JSZXN1bHQuZG9uZSA9PT0gZmFsc2UpIHtcbiAgICBnZW5lcmF0b3JSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICAgIGFjY3VtdWxhdG9yLnB1c2goZ2VuZXJhdG9yUmVzdWx0LnZhbHVlKTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qIVxuICogR2V0cyBhbGwgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBrZXlzIGZyb20gYSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIGtleXMgZnJvbSB0aGUgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlS2V5cyh0YXJnZXQpIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuXG4vKiFcbiAqIERldGVybWluZXMgaWYgdHdvIG9iamVjdHMgaGF2ZSBtYXRjaGluZyB2YWx1ZXMsIGdpdmVuIGEgc2V0IG9mIGtleXMuIERlZmVycyB0byBkZWVwRXF1YWwgZm9yIHRoZSBlcXVhbGl0eSBjaGVjayBvZlxuICogZWFjaCBrZXkuIElmIGFueSB2YWx1ZSBvZiB0aGUgZ2l2ZW4ga2V5IGlzIG5vdCBlcXVhbCwgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlIChlYXJseSkuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIEFuIGFycmF5IG9mIGtleXMgdG8gY29tcGFyZSB0aGUgdmFsdWVzIG9mIGxlZnRIYW5kT3BlcmFuZCBhbmQgcmlnaHRIYW5kT3BlcmFuZCBhZ2FpbnN0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5mdW5jdGlvbiBrZXlzRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZFtrZXlzW2ldXSwgcmlnaHRIYW5kT3BlcmFuZFtrZXlzW2ldXSwgb3B0aW9ucykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKiFcbiAqIFJlY3Vyc2l2ZWx5IGNoZWNrIHRoZSBlcXVhbGl0eSBvZiB0d28gT2JqZWN0cy4gT25jZSBiYXNpYyBzYW1lbmVzcyBoYXMgYmVlbiBlc3RhYmxpc2hlZCBpdCB3aWxsIGRlZmVyIHRvIGBkZWVwRXF1YWxgXG4gKiBmb3IgZWFjaCBlbnVtZXJhYmxlIGtleSBpbiB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBvYmplY3RFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlZnRIYW5kS2V5cyA9IGdldEVudW1lcmFibGVLZXlzKGxlZnRIYW5kT3BlcmFuZCk7XG4gIHZhciByaWdodEhhbmRLZXlzID0gZ2V0RW51bWVyYWJsZUtleXMocmlnaHRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZEtleXMubGVuZ3RoICYmIGxlZnRIYW5kS2V5cy5sZW5ndGggPT09IHJpZ2h0SGFuZEtleXMubGVuZ3RoKSB7XG4gICAgbGVmdEhhbmRLZXlzLnNvcnQoKTtcbiAgICByaWdodEhhbmRLZXlzLnNvcnQoKTtcbiAgICBpZiAoaXRlcmFibGVFcXVhbChsZWZ0SGFuZEtleXMsIHJpZ2h0SGFuZEtleXMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5c0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgbGVmdEhhbmRLZXlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhciBsZWZ0SGFuZEVudHJpZXMgPSBnZXRJdGVyYXRvckVudHJpZXMobGVmdEhhbmRPcGVyYW5kKTtcbiAgdmFyIHJpZ2h0SGFuZEVudHJpZXMgPSBnZXRJdGVyYXRvckVudHJpZXMocmlnaHRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZEVudHJpZXMubGVuZ3RoICYmIGxlZnRIYW5kRW50cmllcy5sZW5ndGggPT09IHJpZ2h0SGFuZEVudHJpZXMubGVuZ3RoKSB7XG4gICAgbGVmdEhhbmRFbnRyaWVzLnNvcnQoKTtcbiAgICByaWdodEhhbmRFbnRyaWVzLnNvcnQoKTtcbiAgICByZXR1cm4gaXRlcmFibGVFcXVhbChsZWZ0SGFuZEVudHJpZXMsIHJpZ2h0SGFuZEVudHJpZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGxlZnRIYW5kS2V5cy5sZW5ndGggPT09IDAgJiZcbiAgICAgIGxlZnRIYW5kRW50cmllcy5sZW5ndGggPT09IDAgJiZcbiAgICAgIHJpZ2h0SGFuZEtleXMubGVuZ3RoID09PSAwICYmXG4gICAgICByaWdodEhhbmRFbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiFcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYSBwcmltaXRpdmUuXG4gKlxuICogVGhpcyBpbnRlbnRpb25hbGx5IHJldHVybnMgdHJ1ZSBmb3IgYWxsIG9iamVjdHMgdGhhdCBjYW4gYmUgY29tcGFyZWQgYnkgcmVmZXJlbmNlLFxuICogaW5jbHVkaW5nIGZ1bmN0aW9ucyBhbmQgc3ltYm9scy5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiBDaGFpIC0gZ2V0RnVuY05hbWUgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRGdW5jTmFtZShjb25zdHJ1Y3RvckZuKVxuICpcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbi5cbiAqIFdoZW4gYSBub24tZnVuY3Rpb24gaW5zdGFuY2UgaXMgcGFzc2VkLCByZXR1cm5zIGBudWxsYC5cbiAqIFRoaXMgYWxzbyBpbmNsdWRlcyBhIHBvbHlmaWxsIGZ1bmN0aW9uIGlmIGBhRnVuYy5uYW1lYCBpcyBub3QgZGVmaW5lZC5cbiAqXG4gKiBAbmFtZSBnZXRGdW5jTmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudmFyIHRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uTmFtZU1hdGNoID0gL1xccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqW14oPzoqXFwvKV0rXFwqXFwvXFxzKikqKFteXFxzXFwoXFwvXSspLztcbmZ1bmN0aW9uIGdldEZ1bmNOYW1lKGFGdW5jKSB7XG4gIGlmICh0eXBlb2YgYUZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBuYW1lID0gJyc7XG4gIGlmICh0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBhRnVuYy5uYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEhlcmUgd2UgcnVuIGEgcG9seWZpbGwgaWYgRnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCB0aGUgYG5hbWVgIHByb3BlcnR5IGFuZCBpZiBhRnVuYy5uYW1lIGlzIG5vdCBkZWZpbmVkXG4gICAgdmFyIG1hdGNoID0gdG9TdHJpbmcuY2FsbChhRnVuYykubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBgbmFtZWAgcHJvcGVydHkgd2UganVzdCB1c2UgaXRcbiAgICBuYW1lID0gYUZ1bmMubmFtZTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZ1bmNOYW1lO1xuIiwiLyohXG4gKiBDaGFpIC0gYWRkUHJvcGVydHkgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBpc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5hZGRQcm9wZXJ0eShjdHgsIG5hbWUsIGdldHRlcilcbiAqXG4gKiBBZGRzIGEgcHJvcGVydHkgdG8gdGhlIHByb3RvdHlwZSBvZiBhbiBvYmplY3QuXG4gKlxuICogICAgIHV0aWxzLmFkZFByb3BlcnR5KGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmluc3RhbmNlb2YoRm9vKTtcbiAqICAgICB9KTtcbiAqXG4gKiBDYW4gYWxzbyBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIGBjaGFpLkFzc2VydGlvbmAuXG4gKlxuICogICAgIGNoYWkuQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdmb28nLCBmbik7XG4gKlxuICogVGhlbiBjYW4gYmUgdXNlZCBhcyBhbnkgb3RoZXIgYXNzZXJ0aW9uLlxuICpcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmJlLmZvbztcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB0byB3aGljaCB0aGUgcHJvcGVydHkgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHByb3BlcnR5IHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0dGVyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZFByb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpIHtcbiAgZ2V0dGVyID0gZ2V0dGVyID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IGdldHRlcjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBuYW1lLFxuICAgIHsgZ2V0OiBmdW5jdGlvbiBwcm9wZXJ0eUdldHRlcigpIHtcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYHByb3BlcnR5R2V0dGVyYCBjYXVzZXMgdGhpcyBmdW5jdGlvbiB0b1xuICAgICAgICAvLyBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tIHRoZVxuICAgICAgICAvLyBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgLy8gdGhlIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQgYW5kIHByb3h5IHByb3RlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgICAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZFxuICAgICAgICAvLyBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhlIGZpcnN0IGNhc2UsIHRoZSBgc3NmaWAgZmxhZ1xuICAgICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kXG4gICAgICAgIC8vIGNhc2UsIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBwcm94eSBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZW4gdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAgICAgLy8gc2V0IGJ5IHRoZSBwcm94eSBnZXR0ZXIuXG4gICAgICAgIGlmICghaXNQcm94eUVuYWJsZWQoKSAmJiAhZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBwcm9wZXJ0eUdldHRlcik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0dGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgfVxuICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGFkZE1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5hZGRNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QpXG4gKlxuICogQWRkcyBhIG1ldGhvZCB0byB0aGUgcHJvdG90eXBlIG9mIGFuIG9iamVjdC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmVxdWFsKHN0cik7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChmb29TdHIpLnRvLmJlLmZvbygnYmFyJyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3QgdG8gd2hpY2ggdGhlIG1ldGhvZCBpcyBhZGRlZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZE1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZE1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgbWV0aG9kV3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgbWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXMgZnVuY3Rpb24gdG8gYmUgdGhlXG4gICAgLy8gc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZlxuICAgIC8vIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgbWV0aG9kV3JhcHBlcik7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG5cbiAgYWRkTGVuZ3RoR3VhcmQobWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG1ldGhvZFdyYXBwZXIsIG5hbWUpO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZVByb3BlcnR5IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAub3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBmbilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBwcm9wZXJ0eSBnZXR0ZXIgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgdmFsdWUuIE11c3QgcmV0dXJuIGZ1bmN0aW9uIHRvIHVzZSBhcyBnZXR0ZXIuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZVByb3BlcnR5KGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ29rJywgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAqICAgICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgRm9vKSB7XG4gKiAgICAgICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iai5uYW1lKS50by5lcXVhbCgnYmFyJyk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVQcm9wZXJ0eSgnZm9vJywgZm4pO1xuICpcbiAqIFRoZW4gY2FuIGJlIHVzZWQgYXMgYW55IG90aGVyIGFzc2VydGlvbi5cbiAqXG4gKiAgICAgZXhwZWN0KG15Rm9vKS50by5iZS5vaztcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgcHJvcGVydHkgdG8gb3ZlcndyaXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZVByb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpIHtcbiAgdmFyIF9nZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN0eCwgbmFtZSlcbiAgICAsIF9zdXBlciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGlmIChfZ2V0ICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBfZ2V0LmdldClcbiAgICBfc3VwZXIgPSBfZ2V0LmdldFxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIG92ZXJ3cml0aW5nUHJvcGVydHlHZXR0ZXIoKSB7XG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lc1xuICAgICAgICAvLyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgLy8gdGhlIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQgYW5kIHByb3h5IHByb3RlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgICAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZFxuICAgICAgICAvLyBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhlIGZpcnN0IGNhc2UsIHRoZSBgc3NmaWAgZmxhZ1xuICAgICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kXG4gICAgICAgIC8vIGNhc2UsIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBwcm94eSBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZW4gdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAgICAgLy8gc2V0IGJ5IHRoZSBwcm94eSBnZXR0ZXIuXG4gICAgICAgIGlmICghaXNQcm94eUVuYWJsZWQoKSAmJiAhZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBsb2NrU3NmaWAgZmxhZyB0byBgdHJ1ZWAgcHJldmVudHMgdGhlIG92ZXJ3cml0dGVuXG4gICAgICAgIC8vIGFzc2VydGlvbiBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYFxuICAgICAgICAvLyBmbGFnIGlzIGFscmVhZHkgc2V0IHRvIHRoZSBjb3JyZWN0IHN0YXJ0aW5nIHBvaW50IGZvciB0aGlzIGFzc2VydGlvbi5cbiAgICAgICAgdmFyIG9yaWdMb2NrU3NmaSA9IGZsYWcodGhpcywgJ2xvY2tTc2ZpJyk7XG4gICAgICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZXR0ZXIoX3N1cGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIG9yaWdMb2NrU3NmaSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgfVxuICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZU1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5vdmVyd3JpdGVNZXRob2QoY3R4LCBuYW1lLCBmbilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBtZXRob2QgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgZnVuY3Rpb24uIE11c3QgcmV0dXJuIGZ1bmN0aW9uXG4gKiB0byBiZSB1c2VkIGZvciBuYW1lLlxuICpcbiAqICAgICB1dGlscy5vdmVyd3JpdGVNZXRob2QoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnZXF1YWwnLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICogICAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBGb28pIHtcbiAqICAgICAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqLnZhbHVlKS50by5lcXVhbChzdHIpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uZXF1YWwoJ2JhcicpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHdob3NlIG1ldGhvZCBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgX21ldGhvZCA9IGN0eFtuYW1lXVxuICAgICwgX3N1cGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfTtcblxuICBpZiAoX21ldGhvZCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgX21ldGhvZClcbiAgICBfc3VwZXIgPSBfbWV0aG9kO1xuXG4gIHZhciBvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXNcbiAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tXG4gICAgLy8gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgb3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyKTtcbiAgICB9XG5cbiAgICAvLyBTZXR0aW5nIHRoZSBgbG9ja1NzZmlgIGZsYWcgdG8gYHRydWVgIHByZXZlbnRzIHRoZSBvdmVyd3JpdHRlbiBhc3NlcnRpb25cbiAgICAvLyBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYCBmbGFnIGlzIGFscmVhZHlcbiAgICAvLyBzZXQgdG8gdGhlIGNvcnJlY3Qgc3RhcnRpbmcgcG9pbnQgZm9yIHRoaXMgYXNzZXJ0aW9uLlxuICAgIHZhciBvcmlnTG9ja1NzZmkgPSBmbGFnKHRoaXMsICdsb2NrU3NmaScpO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfc3VwZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZmxhZyh0aGlzLCAnbG9ja1NzZmknLCBvcmlnTG9ja1NzZmkpO1xuXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgfVxuXG4gIGFkZExlbmd0aEd1YXJkKG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gYWRkQ2hhaW5pbmdNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBhZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBwcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKiFcbiAqIE1vZHVsZSB2YXJpYWJsZXNcbiAqL1xuXG4vLyBDaGVjayB3aGV0aGVyIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGlzIHN1cHBvcnRlZFxudmFyIGNhblNldFByb3RvdHlwZSA9IHR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPT09ICdmdW5jdGlvbic7XG5cbi8vIFdpdGhvdXQgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgc3VwcG9ydCwgdGhpcyBtb2R1bGUgd2lsbCBuZWVkIHRvIGFkZCBwcm9wZXJ0aWVzIHRvIGEgZnVuY3Rpb24uXG4vLyBIb3dldmVyLCBzb21lIG9mIGZ1bmN0aW9ucycgb3duIHByb3BzIGFyZSBub3QgY29uZmlndXJhYmxlIGFuZCBzaG91bGQgYmUgc2tpcHBlZC5cbnZhciB0ZXN0Rm4gPSBmdW5jdGlvbigpIHt9O1xudmFyIGV4Y2x1ZGVOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3RGbikuZmlsdGVyKGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0ZXN0Rm4sIG5hbWUpO1xuXG4gIC8vIE5vdGU6IFBoYW50b21KUyAxLnggaW5jbHVkZXMgYGNhbGxlZWAgYXMgb25lIG9mIGB0ZXN0Rm5gJ3Mgb3duIHByb3BlcnRpZXMsXG4gIC8vIGJ1dCB0aGVuIHJldHVybnMgYHVuZGVmaW5lZGAgYXMgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIGBjYWxsZWVgLiBBcyBhXG4gIC8vIHdvcmthcm91bmQsIHdlIHBlcmZvcm0gYW4gb3RoZXJ3aXNlIHVubmVjZXNzYXJ5IHR5cGUtY2hlY2sgZm9yIGBwcm9wRGVzY2AsXG4gIC8vIGFuZCB0aGVuIGZpbHRlciBpdCBvdXQgaWYgaXQncyBub3QgYW4gb2JqZWN0IGFzIGl0IHNob3VsZCBiZS5cbiAgaWYgKHR5cGVvZiBwcm9wRGVzYyAhPT0gJ29iamVjdCcpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuICFwcm9wRGVzYy5jb25maWd1cmFibGU7XG59KTtcblxuLy8gQ2FjaGUgYEZ1bmN0aW9uYCBwcm9wZXJ0aWVzXG52YXIgY2FsbCAgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCxcbiAgICBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLyoqXG4gKiAjIyMgLmFkZENoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcilcbiAqXG4gKiBBZGRzIGEgbWV0aG9kIHRvIGFuIG9iamVjdCwgc3VjaCB0aGF0IHRoZSBtZXRob2QgY2FuIGFsc28gYmUgY2hhaW5lZC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkQ2hhaW5hYmxlTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmVxdWFsKHN0cik7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2ZvbycsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKTtcbiAqXG4gKiBUaGUgcmVzdWx0IGNhbiB0aGVuIGJlIHVzZWQgYXMgYm90aCBhIG1ldGhvZCBhc3NlcnRpb24sIGV4ZWN1dGluZyBib3RoIGBtZXRob2RgIGFuZFxuICogYGNoYWluaW5nQmVoYXZpb3JgLCBvciBhcyBhIGxhbmd1YWdlIGNoYWluLCB3aGljaCBvbmx5IGV4ZWN1dGVzIGBjaGFpbmluZ0JlaGF2aW9yYC5cbiAqXG4gKiAgICAgZXhwZWN0KGZvb1N0cikudG8uYmUuZm9vKCdiYXInKTtcbiAqICAgICBleHBlY3QoZm9vU3RyKS50by5iZS5mb28uZXF1YWwoJ2ZvbycpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBtZXRob2QgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCB0byBhZGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBgbmFtZWAsIHdoZW4gY2FsbGVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFpbmluZ0JlaGF2aW9yIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgYWRkQ2hhaW5hYmxlTWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkQ2hhaW5hYmxlTWV0aG9kKGN0eCwgbmFtZSwgbWV0aG9kLCBjaGFpbmluZ0JlaGF2aW9yKSB7XG4gIGlmICh0eXBlb2YgY2hhaW5pbmdCZWhhdmlvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gIH1cblxuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSB7XG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgICwgY2hhaW5pbmdCZWhhdmlvcjogY2hhaW5pbmdCZWhhdmlvclxuICB9O1xuXG4gIC8vIHNhdmUgdGhlIG1ldGhvZHMgc28gd2UgY2FuIG92ZXJ3cml0ZSB0aGVtIGxhdGVyLCBpZiB3ZSBuZWVkIHRvLlxuICBpZiAoIWN0eC5fX21ldGhvZHMpIHtcbiAgICBjdHguX19tZXRob2RzID0ge307XG4gIH1cbiAgY3R4Ll9fbWV0aG9kc1tuYW1lXSA9IGNoYWluYWJsZUJlaGF2aW9yO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIGNoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICAgICAgY2hhaW5hYmxlQmVoYXZpb3IuY2hhaW5pbmdCZWhhdmlvci5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHZhciBjaGFpbmFibGVNZXRob2RXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBjaGFpbmFibGVNZXRob2RXcmFwcGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAvLyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgYSBmYWlsZWQgYXNzZXJ0aW9uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIGFzIHRoZSBzdGFydGluZyBwb2ludCBpZlxuICAgICAgICAgIC8vIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXNuJ3Qgc2V0LlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRoZW4gdGhpcyBhc3NlcnRpb24gaXMgYmVpbmdcbiAgICAgICAgICAvLyBpbnZva2VkIGZyb20gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGlzIGNhc2UsIHRoZSBgc3NmaWBcbiAgICAgICAgICAvLyBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgb3ZlcndyaXRpbmcgYSBjaGFpbmFibGUgbWV0aG9kIG1lcmVseSByZXBsYWNlcyB0aGUgc2F2ZWRcbiAgICAgICAgICAvLyBtZXRob2RzIGluIGBjdHguX19tZXRob2RzYCBpbnN0ZWFkIG9mIGNvbXBsZXRlbHkgcmVwbGFjaW5nIHRoZVxuICAgICAgICAgIC8vIG92ZXJ3cml0dGVuIGFzc2VydGlvbi4gVGhlcmVmb3JlLCBhbiBvdmVyd3JpdGluZyBhc3NlcnRpb24gd29uJ3RcbiAgICAgICAgICAvLyBzZXQgdGhlIGBzc2ZpYCBvciBgbG9ja1NzZmlgIGZsYWdzLlxuICAgICAgICAgIGlmICghZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIGNoYWluYWJsZU1ldGhvZFdyYXBwZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZXN1bHQgPSBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgICAgICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZExlbmd0aEd1YXJkKGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIG5hbWUsIHRydWUpO1xuXG4gICAgICAgIC8vIFVzZSBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKGNhblNldFByb3RvdHlwZSkge1xuICAgICAgICAgIC8vIEluaGVyaXQgYWxsIHByb3BlcnRpZXMgZnJvbSB0aGUgb2JqZWN0IGJ5IHJlcGxhY2luZyB0aGUgYEZ1bmN0aW9uYCBwcm90b3R5cGVcbiAgICAgICAgICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBgY2FsbGAgYW5kIGBhcHBseWAgbWV0aG9kcyBmcm9tIGBGdW5jdGlvbmBcbiAgICAgICAgICBwcm90b3R5cGUuY2FsbCA9IGNhbGw7XG4gICAgICAgICAgcHJvdG90eXBlLmFwcGx5ID0gYXBwbHk7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIHByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCByZWRlZmluZSBhbGwgcHJvcGVydGllcyAoc2xvdyEpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBhc3NlcnRlck5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3R4KTtcbiAgICAgICAgICBhc3NlcnRlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGFzc2VydGVyTmFtZSkge1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVOYW1lcy5pbmRleE9mKGFzc2VydGVyTmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdHgsIGFzc2VydGVyTmFtZSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hhaW5hYmxlTWV0aG9kV3JhcHBlciwgYXNzZXJ0ZXJOYW1lLCBwZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIGNoYWluYWJsZU1ldGhvZFdyYXBwZXIpO1xuICAgICAgICByZXR1cm4gcHJveGlmeShjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgIH1cbiAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBvdmVyd3JpdGVDaGFpbmFibGVNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBjaGFpbmFibGUgbWV0aG9kXG4gKiBhbmQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBvclxuICogcHJvcGVydHkuICBNdXN0IHJldHVybiBmdW5jdGlvbnMgdG8gYmUgdXNlZCBmb3JcbiAqIG5hbWUuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdsZW5ndGhPZicsXG4gKiAgICAgICBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgKTtcbiAqXG4gKiBDYW4gYWxzbyBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIGBjaGFpLkFzc2VydGlvbmAuXG4gKlxuICogICAgIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCgnZm9vJywgZm4sIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3Qgd2hvc2UgbWV0aG9kIC8gcHJvcGVydHkgaXMgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCAvIHByb3BlcnR5IHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoYWluaW5nQmVoYXZpb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgcHJvcGVydHlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcikge1xuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSBjdHguX19tZXRob2RzW25hbWVdO1xuXG4gIHZhciBfY2hhaW5pbmdCZWhhdmlvciA9IGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3I7XG4gIGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2hhaW5pbmdCZWhhdmlvcihfY2hhaW5pbmdCZWhhdmlvcikuY2FsbCh0aGlzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xuXG4gIHZhciBfbWV0aG9kID0gY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kO1xuICBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZFdyYXBwZXIoKSB7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfbWV0aG9kKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gY29tcGFyZUJ5SW5zcGVjdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcblxuLyoqXG4gKiAjIyMgLmNvbXBhcmVCeUluc3BlY3QobWl4ZWQsIG1peGVkKVxuICpcbiAqIFRvIGJlIHVzZWQgYXMgYSBjb21wYXJlRnVuY3Rpb24gd2l0aCBBcnJheS5wcm90b3R5cGUuc29ydC4gQ29tcGFyZXMgZWxlbWVudHNcbiAqIHVzaW5nIGluc3BlY3QgaW5zdGVhZCBvZiBkZWZhdWx0IGJlaGF2aW9yIG9mIHVzaW5nIHRvU3RyaW5nIHNvIHRoYXQgU3ltYm9sc1xuICogYW5kIG9iamVjdHMgd2l0aCBpcnJlZ3VsYXIvbWlzc2luZyB0b1N0cmluZyBjYW4gc3RpbGwgYmUgc29ydGVkIHdpdGhvdXQgYVxuICogVHlwZUVycm9yLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGZpcnN0IGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHBhcmFtIHtNaXhlZH0gc2Vjb25kIGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gLTEgaWYgJ2EnIHNob3VsZCBjb21lIGJlZm9yZSAnYic7IG90aGVyd2lzZSAxIFxuICogQG5hbWUgY29tcGFyZUJ5SW5zcGVjdFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBhcmVCeUluc3BlY3QoYSwgYikge1xuICByZXR1cm4gaW5zcGVjdChhKSA8IGluc3BlY3QoYikgPyAtMSA6IDE7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZGlyZWN0bHktb3duZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzIG9mIGFuXG4gKiBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuICogcmV0dXJucyBib3RoIGVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybnMge0FycmF5fVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9sc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMob2JqKSB7XG4gIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaikuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzID0gcmVxdWlyZSgnLi9nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzJyk7XG5cbi8qKlxuICogIyMjIC5nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBkaXJlY3RseS1vd25lZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBhbiBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgT2JqZWN0LmtleXMgb25seVxuICogcmV0dXJucyBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzLCBub3QgZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmNvbmNhdChnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzKG9iaikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIGNoZWNrRXJyb3IgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5jaGVja0Vycm9yXG4gKlxuICogQ2hlY2tzIHRoYXQgYW4gZXJyb3IgY29uZm9ybXMgdG8gYSBnaXZlbiBzZXQgb2YgY3JpdGVyaWEgYW5kL29yIHJldHJpZXZlcyBpbmZvcm1hdGlvbiBhYm91dCBpdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlSW5zdGFuY2UodGhyb3duLCBlcnJvckxpa2UpXG4gKlxuICogQ2hlY2tzIGlmIHR3byBpbnN0YW5jZXMgYXJlIGNvbXBhdGlibGUgKHN0cmljdCBlcXVhbCkuXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGVycm9yTGlrZSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRXJyb3IsIGJlY2F1c2UgaW5zdGFuY2VzXG4gKiBjYW4gb25seSBiZSBjb21wYXRpYmxlIGlmIHRoZXkncmUgYm90aCBlcnJvciBpbnN0YW5jZXMuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUluc3RhbmNlXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUluc3RhbmNlKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIHJldHVybiBlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciAmJiB0aHJvd24gPT09IGVycm9yTGlrZTtcbn1cblxuLyoqXG4gKiAjIyMgLmNvbXBhdGlibGVDb25zdHJ1Y3Rvcih0aHJvd24sIGVycm9yTGlrZSlcbiAqXG4gKiBDaGVja3MgaWYgdHdvIGNvbnN0cnVjdG9ycyBhcmUgY29tcGF0aWJsZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FuIHJlY2VpdmUgZWl0aGVyIGFuIGVycm9yIGNvbnN0cnVjdG9yIG9yXG4gKiBhbiBlcnJvciBpbnN0YW5jZSBhcyB0aGUgYGVycm9yTGlrZWAgYXJndW1lbnQuXG4gKiBDb25zdHJ1Y3RvcnMgYXJlIGNvbXBhdGlibGUgaWYgdGhleSdyZSB0aGUgc2FtZSBvciBpZiBvbmUgaXNcbiAqIGFuIGluc3RhbmNlIG9mIGFub3RoZXIuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUNvbnN0cnVjdG9yKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIElmIGBlcnJvckxpa2VgIGlzIGFuIGluc3RhbmNlIG9mIGFueSBlcnJvciB3ZSBjb21wYXJlIHRoZWlyIGNvbnN0cnVjdG9yc1xuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZS5jb25zdHJ1Y3RvciB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2UuY29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoZXJyb3JMaWtlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yTGlrZSA9PT0gRXJyb3IpIHtcbiAgICAvLyBJZiBgZXJyb3JMaWtlYCBpcyBhIGNvbnN0cnVjdG9yIHRoYXQgaW5oZXJpdHMgZnJvbSBFcnJvciwgd2UgY29tcGFyZSBgdGhyb3duYCB0byBgZXJyb3JMaWtlYCBkaXJlY3RseVxuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZSB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2U7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpXG4gKlxuICogQ2hlY2tzIGlmIGFuIGVycm9yJ3MgbWVzc2FnZSBpcyBjb21wYXRpYmxlIHdpdGggYSBtYXRjaGVyIChTdHJpbmcgb3IgUmVnRXhwKS5cbiAqIElmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIHRoZSBTdHJpbmcgb3IgcGFzc2VzIHRoZSBSZWdFeHAgdGVzdCxcbiAqIGl0IGlzIGNvbnNpZGVyZWQgY29tcGF0aWJsZS5cbiAqXG4gKiBAbmFtZSBjb21wYXRpYmxlTWVzc2FnZVxuICogQHBhcmFtIHtFcnJvcn0gdGhyb3duIGVycm9yXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGVyck1hdGNoZXIgdG8gbG9vayBmb3IgaW50byB0aGUgbWVzc2FnZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpIHtcbiAgdmFyIGNvbXBhcmlzb25TdHJpbmcgPSB0eXBlb2YgdGhyb3duID09PSAnc3RyaW5nJyA/IHRocm93biA6IHRocm93bi5tZXNzYWdlO1xuICBpZiAoZXJyTWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBlcnJNYXRjaGVyLnRlc3QoY29tcGFyaXNvblN0cmluZyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVyck1hdGNoZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbXBhcmlzb25TdHJpbmcuaW5kZXhPZihlcnJNYXRjaGVyKSAhPT0gLTE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pXG4gKlxuICogUmV0dXJucyB0aGUgbmFtZSBvZiBhIGZ1bmN0aW9uLlxuICogVGhpcyBhbHNvIGluY2x1ZGVzIGEgcG9seWZpbGwgZnVuY3Rpb24gaWYgYGNvbnN0cnVjdG9yRm4ubmFtZWAgaXMgbm90IGRlZmluZWQuXG4gKlxuICogQG5hbWUgZ2V0RnVuY3Rpb25OYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvckZuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZnVuY3Rpb25OYW1lTWF0Y2ggPSAvXFxzKmZ1bmN0aW9uKD86XFxzfFxccypcXC9cXCpbXig/OipcXC8pXStcXCpcXC9cXHMqKSooW15cXChcXC9dKykvO1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pIHtcbiAgdmFyIG5hbWUgPSAnJztcbiAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvckZuLm5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gSGVyZSB3ZSBydW4gYSBwb2x5ZmlsbCBpZiBjb25zdHJ1Y3RvckZuLm5hbWUgaXMgbm90IGRlZmluZWRcbiAgICB2YXIgbWF0Y2ggPSBTdHJpbmcoY29uc3RydWN0b3JGbikubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuYW1lID0gY29uc3RydWN0b3JGbi5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKVxuICpcbiAqIEdldHMgdGhlIGNvbnN0cnVjdG9yIG5hbWUgZm9yIGFuIEVycm9yIGluc3RhbmNlIG9yIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAqXG4gKiBAbmFtZSBnZXRDb25zdHJ1Y3Rvck5hbWVcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpIHtcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGVycm9yTGlrZTtcbiAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZS5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yTGlrZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIElmIGBlcnJgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBFcnJvciBpdCBpcyBhbiBlcnJvciBjb25zdHJ1Y3RvciBpdHNlbGYgb3IgYW5vdGhlciBmdW5jdGlvbi5cbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBjb21tb24gZnVuY3Rpb24gd2UgZ2V0IGl0cyBuYW1lLCBvdGhlcndpc2Ugd2UgbWF5IG5lZWQgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlXG4gICAgLy8gb2YgdGhlIGVycm9yIGp1c3QgaW4gY2FzZSBpdCdzIGEgcG9vcmx5LWNvbnN0cnVjdGVkIGVycm9yLiBQbGVhc2Ugc2VlIGNoYWlqcy9jaGFpL2lzc3Vlcy80NSB0byBrbm93IG1vcmUuXG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZSkudHJpbSgpIHx8XG4gICAgICAgIGdldEZ1bmN0aW9uTmFtZShuZXcgZXJyb3JMaWtlKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRNZXNzYWdlKGVycm9yTGlrZSlcbiAqXG4gKiBHZXRzIHRoZSBlcnJvciBtZXNzYWdlIGZyb20gYW4gZXJyb3IuXG4gKiBJZiBgZXJyYCBpcyBhIFN0cmluZyBpdHNlbGYsIHdlIHJldHVybiBpdC5cbiAqIElmIHRoZSBlcnJvciBoYXMgbm8gbWVzc2FnZSwgd2UgcmV0dXJuIGFuIGVtcHR5IHN0cmluZy5cbiAqXG4gKiBAbmFtZSBnZXRNZXNzYWdlXG4gKiBAcGFyYW0ge0Vycm9yfFN0cmluZ30gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2UoZXJyb3JMaWtlKSB7XG4gIHZhciBtc2cgPSAnJztcbiAgaWYgKGVycm9yTGlrZSAmJiBlcnJvckxpa2UubWVzc2FnZSkge1xuICAgIG1zZyA9IGVycm9yTGlrZS5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvckxpa2UgPT09ICdzdHJpbmcnKSB7XG4gICAgbXNnID0gZXJyb3JMaWtlO1xuICB9XG5cbiAgcmV0dXJuIG1zZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBhdGlibGVJbnN0YW5jZTogY29tcGF0aWJsZUluc3RhbmNlLFxuICBjb21wYXRpYmxlQ29uc3RydWN0b3I6IGNvbXBhdGlibGVDb25zdHJ1Y3RvcixcbiAgY29tcGF0aWJsZU1lc3NhZ2U6IGNvbXBhdGlibGVNZXNzYWdlLFxuICBnZXRNZXNzYWdlOiBnZXRNZXNzYWdlLFxuICBnZXRDb25zdHJ1Y3Rvck5hbWU6IGdldENvbnN0cnVjdG9yTmFtZSxcbn07XG4iLCJ2YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIGdldFByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldFByb3BlcnRpZXMnKTtcbnZhciBpc1Byb3h5RW5hYmxlZCA9IHJlcXVpcmUoJy4vaXNQcm94eUVuYWJsZWQnKTtcblxuLyohXG4gKiBDaGFpIC0gcHJveGlmeSB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLnByb3hpZnkob2JqZWN0KVxuICpcbiAqIFJldHVybiBhIHByb3h5IG9mIGdpdmVuIG9iamVjdCB0aGF0IHRocm93cyBhbiBlcnJvciB3aGVuIGEgbm9uLWV4aXN0ZW50XG4gKiBwcm9wZXJ0eSBpcyByZWFkLiBCeSBkZWZhdWx0LCB0aGUgcm9vdCBjYXVzZSBpcyBhc3N1bWVkIHRvIGJlIGEgbWlzc3BlbGxlZFxuICogcHJvcGVydHksIGFuZCB0aHVzIGFuIGF0dGVtcHQgaXMgbWFkZSB0byBvZmZlciBhIHJlYXNvbmFibGUgc3VnZ2VzdGlvbiBmcm9tXG4gKiB0aGUgbGlzdCBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBIb3dldmVyLCBpZiBhIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUgaXNcbiAqIHByb3ZpZGVkLCB0aGVuIHRoZSByb290IGNhdXNlIGlzIGluc3RlYWQgYSBmYWlsdXJlIHRvIGludm9rZSBhIG5vbi1jaGFpbmFibGVcbiAqIG1ldGhvZCBwcmlvciB0byByZWFkaW5nIHRoZSBub24tZXhpc3RlbnQgcHJvcGVydHkuXG4gKiBcbiAqIElmIHByb3hpZXMgYXJlIHVuc3VwcG9ydGVkIG9yIGRpc2FibGVkIHZpYSB0aGUgdXNlcidzIENoYWkgY29uZmlnLCB0aGVuXG4gKiByZXR1cm4gb2JqZWN0IHdpdGhvdXQgbW9kaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBub25DaGFpbmFibGVNZXRob2ROYW1lXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBwcm94aWZ5XG4gKi9cblxudmFyIGJ1aWx0aW5zID0gWydfX2ZsYWdzJywgJ19fbWV0aG9kcycsICdfb2JqJywgJ2Fzc2VydCddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByb3hpZnkob2JqLCBub25DaGFpbmFibGVNZXRob2ROYW1lKSB7XG4gIGlmICghaXNQcm94eUVuYWJsZWQoKSkgcmV0dXJuIG9iajtcblxuICByZXR1cm4gbmV3IFByb3h5KG9iaiwge1xuICAgIGdldDogZnVuY3Rpb24gcHJveHlHZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgLy8gVGhpcyBjaGVjayBpcyBoZXJlIGJlY2F1c2Ugd2Ugc2hvdWxkIG5vdCB0aHJvdyBlcnJvcnMgb24gU3ltYm9sIHByb3BlcnRpZXNcbiAgICAgIC8vIHN1Y2ggYXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AuXG4gICAgICAvLyBUaGUgdmFsdWVzIGZvciB3aGljaCBhbiBlcnJvciBzaG91bGQgYmUgdGhyb3duIGNhbiBiZSBjb25maWd1cmVkIHVzaW5nXG4gICAgICAvLyB0aGUgYGNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5c2Agc2V0dGluZy5cbiAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgY29uZmlnLnByb3h5RXhjbHVkZWRLZXlzLmluZGV4T2YocHJvcGVydHkpID09PSAtMSAmJlxuICAgICAgICAgICFSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5KSkge1xuICAgICAgICAvLyBTcGVjaWFsIG1lc3NhZ2UgZm9yIGludmFsaWQgcHJvcGVydHkgYWNjZXNzIG9mIG5vbi1jaGFpbmFibGUgbWV0aG9kcy5cbiAgICAgICAgaWYgKG5vbkNoYWluYWJsZU1ldGhvZE5hbWUpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSArICcuJyArXG4gICAgICAgICAgICBwcm9wZXJ0eSArICcuIFNlZSBkb2NzIGZvciBwcm9wZXIgdXNhZ2Ugb2YgXCInICtcbiAgICAgICAgICAgIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUgKyAnXCIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3JkZXJlZFByb3BlcnRpZXMgPSBnZXRQcm9wZXJ0aWVzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgICAgcmV0dXJuICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJlxuICAgICAgICAgICAgYnVpbHRpbnMuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xO1xuICAgICAgICB9KS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nRGlzdGFuY2UocHJvcGVydHksIGEpIC0gc3RyaW5nRGlzdGFuY2UocHJvcGVydHksIGIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3JkZXJlZFByb3BlcnRpZXMubGVuZ3RoICYmXG4gICAgICAgICAgICBzdHJpbmdEaXN0YW5jZShvcmRlcmVkUHJvcGVydGllc1swXSwgcHJvcGVydHkpIDwgNCkge1xuICAgICAgICAgIC8vIElmIHRoZSBwcm9wZXJ0eSBpcyByZWFzb25hYmx5IGNsb3NlIHRvIGFuIGV4aXN0aW5nIENoYWkgcHJvcGVydHksXG4gICAgICAgICAgLy8gc3VnZ2VzdCB0aGF0IHByb3BlcnR5IHRvIHRoZSB1c2VyLlxuICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBwcm9wZXJ0eSArXG4gICAgICAgICAgICAnLiBEaWQgeW91IG1lYW4gXCInICsgb3JkZXJlZFByb3BlcnRpZXNbMF0gKyAnXCI/Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIHByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBVc2UgdGhpcyBwcm94eSBnZXR0ZXIgYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciByZW1vdmluZyBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gZnJhbWVzIGZyb20gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi4gRm9yIHByb3BlcnR5XG4gICAgICAvLyBhc3NlcnRpb25zLCB0aGlzIHByZXZlbnRzIHRoZSBwcm94eSBnZXR0ZXIgZnJvbSBzaG93aW5nIHVwIGluIHRoZSBzdGFja1xuICAgICAgLy8gdHJhY2Ugc2luY2UgaXQncyBpbnZva2VkIGJlZm9yZSB0aGUgcHJvcGVydHkgZ2V0dGVyLiBGb3IgbWV0aG9kIGFuZFxuICAgICAgLy8gY2hhaW5hYmxlIG1ldGhvZCBhc3NlcnRpb25zLCB0aGlzIGZsYWcgd2lsbCBlbmQgdXAgZ2V0dGluZyBjaGFuZ2VkIHRvXG4gICAgICAvLyB0aGUgbWV0aG9kIHdyYXBwZXIsIHdoaWNoIGlzIGdvb2Qgc2luY2UgdGhpcyBmcmFtZSB3aWxsIG5vIGxvbmdlciBiZSBpblxuICAgICAgLy8gdGhlIHN0YWNrIG9uY2UgdGhlIG1ldGhvZCBpcyBpbnZva2VkLiBOb3RlIHRoYXQgQ2hhaSBidWlsdGluIGFzc2VydGlvblxuICAgICAgLy8gcHJvcGVydGllcyBzdWNoIGFzIGBfX2ZsYWdzYCBhcmUgc2tpcHBlZCBzaW5jZSB0aGlzIGlzIG9ubHkgbWVhbnQgdG9cbiAgICAgIC8vIGNhcHR1cmUgdGhlIHN0YXJ0aW5nIHBvaW50IG9mIGFuIGFzc2VydGlvbi4gVGhpcyBzdGVwIGlzIGFsc28gc2tpcHBlZFxuICAgICAgLy8gaWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRodXMgaW5kaWNhdGluZyB0aGF0IHRoaXMgYXNzZXJ0aW9uIGlzXG4gICAgICAvLyBiZWluZyBjYWxsZWQgZnJvbSB3aXRoaW4gYW5vdGhlciBhc3NlcnRpb24uIEluIHRoYXQgY2FzZSwgdGhlIGBzc2ZpYFxuICAgICAgLy8gZmxhZyBpcyBhbHJlYWR5IHNldCB0byB0aGUgb3V0ZXIgYXNzZXJ0aW9uJ3Mgc3RhcnRpbmcgcG9pbnQuXG4gICAgICBpZiAoYnVpbHRpbnMuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xICYmICFmbGFnKHRhcmdldCwgJ2xvY2tTc2ZpJykpIHtcbiAgICAgICAgZmxhZyh0YXJnZXQsICdzc2ZpJywgcHJveHlHZXR0ZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogIyBzdHJpbmdEaXN0YW5jZShzdHJBLCBzdHJCKVxuICogUmV0dXJuIHRoZSBMZXZlbnNodGVpbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byBzdHJpbmdzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ckFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJCXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBzdHJpbmcgZGlzdGFuY2UgYmV0d2VlbiBzdHJBIGFuZCBzdHJCXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdEaXN0YW5jZShzdHJBLCBzdHJCLCBtZW1vKSB7XG4gIGlmICghbWVtbykge1xuICAgIC8vIGBtZW1vYCBpcyBhIHR3by1kaW1lbnNpb25hbCBhcnJheSBjb250YWluaW5nIGEgY2FjaGUgb2YgZGlzdGFuY2VzXG4gICAgLy8gbWVtb1tpXVtqXSBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBzdHJBLnNsaWNlKDAsIGkpIGFuZFxuICAgIC8vIHN0ckIuc2xpY2UoMCwgaikuXG4gICAgbWVtbyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHN0ckEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG1lbW9baV0gPSBbXTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW1lbW9bc3RyQS5sZW5ndGhdIHx8ICFtZW1vW3N0ckEubGVuZ3RoXVtzdHJCLmxlbmd0aF0pIHtcbiAgICBpZiAoc3RyQS5sZW5ndGggPT09IDAgfHwgc3RyQi5sZW5ndGggPT09IDApIHtcbiAgICAgIG1lbW9bc3RyQS5sZW5ndGhdW3N0ckIubGVuZ3RoXSA9IE1hdGgubWF4KHN0ckEubGVuZ3RoLCBzdHJCLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbW9bc3RyQS5sZW5ndGhdW3N0ckIubGVuZ3RoXSA9IE1hdGgubWluKFxuICAgICAgICBzdHJpbmdEaXN0YW5jZShzdHJBLnNsaWNlKDAsIC0xKSwgc3RyQiwgbWVtbykgKyAxLFxuICAgICAgICBzdHJpbmdEaXN0YW5jZShzdHJBLCBzdHJCLnNsaWNlKDAsIC0xKSwgbWVtbykgKyAxLFxuICAgICAgICBzdHJpbmdEaXN0YW5jZShzdHJBLnNsaWNlKDAsIC0xKSwgc3RyQi5zbGljZSgwLCAtMSksIG1lbW8pICtcbiAgICAgICAgICAoc3RyQS5zbGljZSgtMSkgPT09IHN0ckIuc2xpY2UoLTEpID8gMCA6IDEpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZW1vW3N0ckEubGVuZ3RoXVtzdHJCLmxlbmd0aF07XG59XG4iLCJ2YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG5cbnZhciBmbkxlbmd0aERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGZ1bmN0aW9uICgpIHt9LCAnbGVuZ3RoJyk7XG5cbi8qIVxuICogQ2hhaSAtIGFkZExlbmd0aEd1YXJkIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuYWRkTGVuZ3RoR3VhcmQoZm4sIGFzc2VydGlvbk5hbWUsIGlzQ2hhaW5hYmxlKVxuICpcbiAqIERlZmluZSBgbGVuZ3RoYCBhcyBhIGdldHRlciBvbiB0aGUgZ2l2ZW4gdW5pbnZva2VkIG1ldGhvZCBhc3NlcnRpb24uIFRoZVxuICogZ2V0dGVyIGFjdHMgYXMgYSBndWFyZCBhZ2FpbnN0IGNoYWluaW5nIGBsZW5ndGhgIGRpcmVjdGx5IG9mZiBvZiBhbiB1bmludm9rZWRcbiAqIG1ldGhvZCBhc3NlcnRpb24sIHdoaWNoIGlzIGEgcHJvYmxlbSBiZWNhdXNlIGl0IHJlZmVyZW5jZXMgYGZ1bmN0aW9uYCdzXG4gKiBidWlsdC1pbiBgbGVuZ3RoYCBwcm9wZXJ0eSBpbnN0ZWFkIG9mIENoYWkncyBgbGVuZ3RoYCBhc3NlcnRpb24uIFdoZW4gdGhlXG4gKiBnZXR0ZXIgY2F0Y2hlcyB0aGUgdXNlciBtYWtpbmcgdGhpcyBtaXN0YWtlLCBpdCB0aHJvd3MgYW4gZXJyb3Igd2l0aCBhXG4gKiBoZWxwZnVsIG1lc3NhZ2UuXG4gKlxuICogVGhlcmUgYXJlIHR3byB3YXlzIGluIHdoaWNoIHRoaXMgbWlzdGFrZSBjYW4gYmUgbWFkZS4gVGhlIGZpcnN0IHdheSBpcyBieVxuICogY2hhaW5pbmcgdGhlIGBsZW5ndGhgIGFzc2VydGlvbiBkaXJlY3RseSBvZmYgb2YgYW4gdW5pbnZva2VkIGNoYWluYWJsZVxuICogbWV0aG9kLiBJbiB0aGlzIGNhc2UsIENoYWkgc3VnZ2VzdHMgdGhhdCB0aGUgdXNlciB1c2UgYGxlbmd0aE9mYCBpbnN0ZWFkLiBUaGVcbiAqIHNlY29uZCB3YXkgaXMgYnkgY2hhaW5pbmcgdGhlIGBsZW5ndGhgIGFzc2VydGlvbiBkaXJlY3RseSBvZmYgb2YgYW4gdW5pbnZva2VkXG4gKiBub24tY2hhaW5hYmxlIG1ldGhvZC4gTm9uLWNoYWluYWJsZSBtZXRob2RzIG11c3QgYmUgaW52b2tlZCBwcmlvciB0b1xuICogY2hhaW5pbmcuIEluIHRoaXMgY2FzZSwgQ2hhaSBzdWdnZXN0cyB0aGF0IHRoZSB1c2VyIGNvbnN1bHQgdGhlIGRvY3MgZm9yIHRoZVxuICogZ2l2ZW4gYXNzZXJ0aW9uLlxuICpcbiAqIElmIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgaXMgdW5jb25maWd1cmFibGUsIHRoZW4gcmV0dXJuIGBmbmBcbiAqIHdpdGhvdXQgbW9kaWZpY2F0aW9uLlxuICpcbiAqIE5vdGUgdGhhdCBpbiBFUzYsIHRoZSBmdW5jdGlvbidzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGNvbmZpZ3VyYWJsZSwgc28gb25jZVxuICogc3VwcG9ydCBmb3IgbGVnYWN5IGVudmlyb25tZW50cyBpcyBkcm9wcGVkLCBDaGFpJ3MgYGxlbmd0aGAgcHJvcGVydHkgY2FuXG4gKiByZXBsYWNlIHRoZSBidWlsdC1pbiBmdW5jdGlvbidzIGBsZW5ndGhgIHByb3BlcnR5LCBhbmQgdGhpcyBsZW5ndGggZ3VhcmQgd2lsbFxuICogbm8gbG9uZ2VyIGJlIG5lY2Vzc2FyeS4gSW4gdGhlIG1lYW4gdGltZSwgbWFpbnRhaW5pbmcgY29uc2lzdGVuY3kgYWNyb3NzIGFsbFxuICogZW52aXJvbm1lbnRzIGlzIHRoZSBwcmlvcml0eS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtTdHJpbmd9IGFzc2VydGlvbk5hbWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNDaGFpbmFibGVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZExlbmd0aEd1YXJkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRMZW5ndGhHdWFyZCAoZm4sIGFzc2VydGlvbk5hbWUsIGlzQ2hhaW5hYmxlKSB7XG4gIGlmICghZm5MZW5ndGhEZXNjLmNvbmZpZ3VyYWJsZSkgcmV0dXJuIGZuO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2xlbmd0aCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NoYWluYWJsZSkge1xuICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgYXNzZXJ0aW9uTmFtZSArICcubGVuZ3RoLiBEdWUnICtcbiAgICAgICAgICAnIHRvIGEgY29tcGF0aWJpbGl0eSBpc3N1ZSwgXCJsZW5ndGhcIiBjYW5ub3QgZGlyZWN0bHkgZm9sbG93IFwiJyArXG4gICAgICAgICAgYXNzZXJ0aW9uTmFtZSArICdcIi4gVXNlIFwiJyArIGFzc2VydGlvbk5hbWUgKyAnLmxlbmd0aE9mXCIgaW5zdGVhZC4nKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIGFzc2VydGlvbk5hbWUgKyAnLmxlbmd0aC4gU2VlJyArXG4gICAgICAgICcgZG9jcyBmb3IgcHJvcGVyIHVzYWdlIG9mIFwiJyArIGFzc2VydGlvbk5hbWUgKyAnXCIuJyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZm47XG59O1xuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG4vKiFcbiAqIENoYWkgLSBpc1Byb3h5RW5hYmxlZCBoZWxwZXJcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaXNQcm94eUVuYWJsZWQoKVxuICpcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjaGVjayBpZiBDaGFpJ3MgcHJveHkgcHJvdGVjdGlvbiBmZWF0dXJlIGlzIGVuYWJsZWQuIElmXG4gKiBwcm94aWVzIGFyZSB1bnN1cHBvcnRlZCBvciBkaXNhYmxlZCB2aWEgdGhlIHVzZXIncyBDaGFpIGNvbmZpZywgdGhlbiByZXR1cm5cbiAqIGZhbHNlLiBPdGhlcndpc2UsIHJldHVybiB0cnVlLlxuICpcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGlzUHJveHlFbmFibGVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1Byb3h5RW5hYmxlZCgpIHtcbiAgcmV0dXJuIGNvbmZpZy51c2VQcm94eSAmJiBcbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGlzTmFOIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTUgU2FrdGhpcHJpeWFuIFZhaXJhbWFuaSA8dGhlY2hhcmdpbmd2b2xjYW5vQGdtYWlsLmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5pc05hTih2YWx1ZSlcbiAqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIE5hTiBvciBub3QuXG4gKlxuICogICAgIHV0aWxzLmlzTmFOKE5hTik7IC8vIHRydWVcbiAqXG4gKiBAcGFyYW0ge1ZhbHVlfSBUaGUgdmFsdWUgd2hpY2ggaGFzIHRvIGJlIGNoZWNrZWQgaWYgaXQgaXMgTmFOXG4gKiBAbmFtZSBpc05hTlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgLy8gUmVmZXIgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzbmFuLW51bWJlclxuICAvLyBzZWN0aW9uJ3MgTk9URS5cbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuLy8gSWYgRUNNQVNjcmlwdCA2J3MgTnVtYmVyLmlzTmFOIGlzIHByZXNlbnQsIHByZWZlciB0aGF0LlxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgaXNOYU47XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0UHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QsIGVudW1lcmFibGUgb3Igbm90LFxuICogaW5oZXJpdGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UHJvcGVydGllcyhvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgZnVuY3Rpb24gYWRkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICBpZiAocmVzdWx0LmluZGV4T2YocHJvcGVydHkpID09PSAtMSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJvcGVydHkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICB3aGlsZSAocHJvdG8gIT09IG51bGwpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykuZm9yRWFjaChhZGRQcm9wZXJ0eSk7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldEVudW1lcmFibGVQcm9wZXJ0aWVzKG9iamVjdClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LFxuICogaW5oZXJpdGVkIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBnZXRFbnVtZXJhYmxlUHJvcGVydGllc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgcmVzdWx0LnB1c2gobmFtZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXX0=